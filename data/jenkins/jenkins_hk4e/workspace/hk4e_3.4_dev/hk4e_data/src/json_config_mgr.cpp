// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/json_config_mgr.cpp

// Line 46: range 000000000F23AFF8-000000000F23B47F
bool __cdecl JsonConfigMgr::isInSimplePolygon(
        const data::Point2D *point,
        const std::vector<data::Point2D> *polygon_point_vec)
{
  float y; // xmm1_4
  float v3; // xmm1_4
  double v4; // xmm0_8
  float v5; // xmm1_4
  float v6; // xmm1_4
  double v7; // xmm0_8
  float v8; // xmm1_4
  char inside; // [rsp+1Fh] [rbp-31h]
  float lhs; // [rsp+20h] [rbp-30h]
  float lhsa; // [rsp+20h] [rbp-30h]
  size_t i; // [rsp+28h] [rbp-28h]
  size_t j; // [rsp+30h] [rbp-20h]
  size_t size; // [rsp+38h] [rbp-18h]
  std::vector<data::Point2D>::const_reference point0; // [rsp+40h] [rbp-10h]
  std::vector<data::Point2D>::const_reference point1; // [rsp+48h] [rbp-8h]

  inside = 0;
  size = std::vector<data::Point2D>::size(polygon_point_vec);
  i = 0LL;
  j = size - 1;
  while ( i < size )
  {
    point0 = std::vector<data::Point2D>::operator[](polygon_point_vec, i);
    point1 = std::vector<data::Point2D>::operator[](polygon_point_vec, j);
    if ( *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)point + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&point->y);
    }
    y = point->y;
    if ( *(_BYTE *)(((unsigned __int64)&point1->y >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)point1 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point1->y >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&point1->y);
    }
    if ( point1->y <= y )
    {
      if ( *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)point + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&point->y);
      }
      v5 = point->y;
      if ( *(_BYTE *)(((unsigned __int64)&point0->y >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)point0 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point0->y >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&point0->y);
      }
      if ( point0->y > v5 )
      {
        v6 = point->y - point0->y;
        if ( *(_BYTE *)(((unsigned __int64)point1 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)point1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point1 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(point1);
        }
        *(float *)&v7 = point1->x;
        if ( *(_BYTE *)(((unsigned __int64)point0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)point0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point0 >> 3) + 0x7FFF8000) )
        {
          v7 = __asan_report_load4(point0);
        }
        lhsa = (float)(*(float *)&v7 - point0->x) * v6;
        if ( *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)point & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(point);
        }
        v8 = point->x - point0->x;
        if ( *(_BYTE *)(((unsigned __int64)&point1->y >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)point1 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point1->y >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&point1->y);
        }
        if ( (float)((float)(point1->y - point0->y) * v8) > lhsa )
          inside ^= 1u;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&point0->y >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)point0 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point0->y >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&point0->y);
      }
      if ( point->y >= point0->y )
      {
        v3 = point->y - point0->y;
        if ( *(_BYTE *)(((unsigned __int64)point1 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)point1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point1 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(point1);
        }
        *(float *)&v4 = point1->x;
        if ( *(_BYTE *)(((unsigned __int64)point0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)point0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point0 >> 3) + 0x7FFF8000) )
        {
          v4 = __asan_report_load4(point0);
        }
        lhs = (float)(*(float *)&v4 - point0->x) * v3;
        if ( *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)point & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(point);
        }
        if ( lhs > (float)((float)(point1->y - point0->y) * (float)(point->x - point0->x)) )
          inside ^= 1u;
      }
    }
    j = i++;
  }
  return inside;
};

// Line 87: range 000000000F23B480-000000000F23C97B
void __cdecl testCheckInPolygon(const std::string *message, const std::vector<data::Point2D> *polygon_point_vec)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  __int64 v6; // rsi
  common::milog::MiLogStream *v7; // rax
  __gnu_cxx::__alloc_traits<std::allocator<data::Point2D>,data::Point2D>::value_type *v8; // rax
  int *v9; // rdx
  char v10; // cl
  _BOOL8 v11; // rsi
  int v12; // xmm0_4
  __gnu_cxx::__alloc_traits<std::allocator<data::Point2D>,data::Point2D>::value_type *v13; // rax
  int *v14; // rdx
  char v15; // cl
  _BOOL8 v16; // rsi
  int v17; // xmm0_4
  std::vector<data::Point2D>::const_reference v18; // rdx
  char v19; // cl
  _BOOL8 v20; // rsi
  float y; // xmm0_4
  std::vector<data::Point2D>::const_reference v22; // rdx
  char v23; // cl
  float *v24; // rsi
  float v25; // xmm0_4
  float *v26; // rax
  int *v27; // rdx
  char v28; // cl
  std::vector<data::Point2D>::const_reference v29; // rsi
  int v30; // xmm0_4
  float *v31; // rax
  int *v32; // rdx
  char v33; // cl
  std::vector<data::Point2D>::const_reference v34; // rsi
  int v35; // xmm0_4
  float *v36; // rax
  int *v37; // rdx
  char v38; // cl
  float *p_y; // rsi
  int v40; // xmm0_4
  float *v41; // rax
  int *v42; // rdx
  char v43; // cl
  int v44; // xmm0_4
  char *v45; // rsi
  double v46; // xmm0_8
  float v47; // xmm1_4
  __m128i v48; // xmm0
  int v49; // ecx
  char v50; // dl
  double v51; // xmm0_8
  float v52; // xmm1_4
  __m128i v53; // xmm0
  int v54; // ecx
  char v55; // dl
  const data::Point2D *v56; // rdx
  bool v57; // r14
  size_t v58; // rsi
  std::basic_string<bool>::reference v59; // rax
  bool *v60; // rdx
  char v61; // cl
  __int64 v62; // rsi
  const data::Point2D *v63; // rax
  bool isPointInsidePolygon; // r14
  size_t v65; // rsi
  std::basic_string<bool>::reference v66; // rax
  bool *v67; // rdx
  char v68; // cl
  __int64 v69; // rsi
  size_t v70; // rsi
  std::basic_string<bool>::reference v71; // rax
  char *v72; // rdx
  char v73; // cl
  char v74; // r14
  size_t v75; // rsi
  std::basic_string<bool>::reference v76; // rax
  _BYTE *v77; // rdx
  char v78; // cl
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // r14
  std::vector<data::Point2D>::size_type v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // rax
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // rax
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  size_t i; // [rsp+10h] [rbp-380h]
  size_t i_0; // [rsp+18h] [rbp-378h]
  size_t i_1; // [rsp+20h] [rbp-370h]
  size_t i_2; // [rsp+28h] [rbp-368h]
  std::vector<data::Point2D> *__for_range; // [rsp+30h] [rbp-360h]
  data::Point2D *point; // [rsp+38h] [rbp-358h]
  char v99[848]; // [rsp+40h] [rbp-350h] BYREF

  v2 = (unsigned __int64)v99;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(800LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 4 5 t0:95 64 4 9 low_x:103 80 4 10 high_x:104 96 4 9 low_y:105 112 4 10 high_y:106 128 4 7"
                        " num:115 144 4 6 t1:135 160 4 6 t2:141 176 4 14 same_count:144 192 8 15 __for_begin:119 224 8 13"
                        " __for_end:119 256 8 9 <unknown> 288 8 9 <unknown> 320 16 8 timer:88 352 24 10 polygon:89 416 24"
                        " 20 random_point_vec:117 480 32 9 <unknown> 544 32 9 <unknown> 608 32 15 cmp_results:125 672 32 "
                        "11 results:125 736 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = testCheckInPolygon;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -234556924;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -219021312;
  v4[536862731] = -234881024;
  v4[536862732] = -218959118;
  v4[536862733] = -234881024;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 320));
  InteriorCheckablePolygon::InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v2 + 352));
  if ( InteriorCheckablePolygon::initByPointVec((InteriorCheckablePolygon *const)(v2 + 352), polygon_point_vec) )
  {
    if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 480, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 480),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "testCheckInPolygon",
      92);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 480),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v5, (const char (*)[20])"initByPointVec fail");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
    *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
  }
  else
  {
    v6 = (unsigned int)common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 320));
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 48, v6);
    *(_DWORD *)(v2 + 48) = v6;
    if ( std::vector<data::Point2D>::empty(polygon_point_vec) )
    {
      if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "testCheckInPolygon",
        99);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 544),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        v7,
        (const char (*)[27])"polygon_point_vec is empty");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
    }
    else
    {
      v8 = (__gnu_cxx::__alloc_traits<std::allocator<data::Point2D>,data::Point2D>::value_type *)std::vector<data::Point2D>::operator[](
                                                                                                   polygon_point_vec,
                                                                                                   0LL);
      v9 = (int *)v8;
      v10 = *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000);
      v11 = v10 != 0;
      if ( v10 != 0 && (char)(((unsigned __int8)v8 & 7) + 3) >= v10 )
        __asan_report_load4(v8);
      v12 = *v9;
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 64, v11);
      *(_DWORD *)(v2 + 64) = v12;
      v13 = (__gnu_cxx::__alloc_traits<std::allocator<data::Point2D>,data::Point2D>::value_type *)std::vector<data::Point2D>::operator[](
                                                                                                    polygon_point_vec,
                                                                                                    0LL);
      v14 = (int *)v13;
      v15 = *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000);
      v16 = v15 != 0;
      if ( v15 != 0 && (char)(((unsigned __int8)v13 & 7) + 3) >= v15 )
        __asan_report_load4(v13);
      v17 = *v14;
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, v16);
      *(_DWORD *)(v2 + 80) = v17;
      v18 = std::vector<data::Point2D>::operator[](polygon_point_vec, 0LL);
      v19 = *(_BYTE *)(((unsigned __int64)&v18->y >> 3) + 0x7FFF8000);
      v20 = v19 != 0;
      if ( v19 != 0 && (char)((((_BYTE)v18 + 4) & 7) + 3) >= v19 )
        __asan_report_load4(&v18->y);
      y = v18->y;
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, v20);
      *(float *)(v2 + 96) = y;
      v22 = std::vector<data::Point2D>::operator[](polygon_point_vec, 0LL);
      v23 = *(_BYTE *)(((unsigned __int64)&v22->y >> 3) + 0x7FFF8000);
      v24 = (float *)(v23 != 0);
      if ( v23 != 0 && (char)((((_BYTE)v22 + 4) & 7) + 3) >= v23 )
        __asan_report_load4(&v22->y);
      v25 = v22->y;
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, v24);
      *(float *)(v2 + 112) = v25;
      for ( i = 1LL; i < std::vector<data::Point2D>::size(polygon_point_vec); ++i )
      {
        v29 = std::vector<data::Point2D>::operator[](polygon_point_vec, i);
        v26 = (float *)std::min<float>((const float *)(v2 + 64), &v29->x);
        v27 = (int *)v26;
        v28 = *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000);
        LOBYTE(v29) = v28 != 0;
        if ( v28 != 0 && (char)(((unsigned __int8)v26 & 7) + 3) >= v28 )
          __asan_report_load4(v26);
        v30 = *v27;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, v29);
        *(_DWORD *)(v2 + 64) = v30;
        v34 = std::vector<data::Point2D>::operator[](polygon_point_vec, i);
        v31 = (float *)std::max<float>((const float *)(v2 + 80), &v34->x);
        v32 = (int *)v31;
        v33 = *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000);
        LOBYTE(v34) = v33 != 0;
        if ( v33 != 0 && (char)(((unsigned __int8)v31 & 7) + 3) >= v33 )
          __asan_report_load4(v31);
        v35 = *v32;
        if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 80, v34);
        *(_DWORD *)(v2 + 80) = v35;
        p_y = &std::vector<data::Point2D>::operator[](polygon_point_vec, i)->y;
        v36 = (float *)std::min<float>((const float *)(v2 + 96), p_y);
        v37 = (int *)v36;
        v38 = *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000);
        LOBYTE(p_y) = v38 != 0;
        if ( v38 != 0 && (char)(((unsigned __int8)v36 & 7) + 3) >= v38 )
          __asan_report_load4(v36);
        v40 = *v37;
        if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 96, p_y);
        *(_DWORD *)(v2 + 96) = v40;
        v24 = &std::vector<data::Point2D>::operator[](polygon_point_vec, i)->y;
        v41 = (float *)std::max<float>((const float *)(v2 + 112), v24);
        v42 = (int *)v41;
        v43 = *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000);
        LOBYTE(v24) = v43 != 0;
        if ( v43 != 0 && (char)(((unsigned __int8)v41 & 7) + 3) >= v43 )
          __asan_report_load4(v41);
        v44 = *v42;
        if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 112, v24);
        *(_DWORD *)(v2 + 112) = v44;
      }
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, v24);
      *(_DWORD *)(v2 + 128) = 1000000;
      std::vector<data::Point2D>::vector((std::vector<data::Point2D> *const)(v2 + 416));
      std::vector<data::Point2D>::resize((std::vector<data::Point2D> *const)(v2 + 416), 0xF4240uLL);
      __for_range = (std::vector<data::Point2D> *)(v2 + 416);
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 192, 1000000LL);
      *(std::vector<data::Point2D>::iterator *)(v2 + 192) = std::vector<data::Point2D>::begin(__for_range);
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 224, 1000000LL);
      *(std::vector<data::Point2D>::iterator *)(v2 + 224) = std::vector<data::Point2D>::end(__for_range);
      while ( 1 )
      {
        v45 = (char *)(v2 + 224);
        if ( !__gnu_cxx::operator!=<data::Point2D *,std::vector<data::Point2D>>(
                (const __gnu_cxx::__normal_iterator<data::Point2D*,std::vector<data::Point2D> > *)(v2 + 192),
                (const __gnu_cxx::__normal_iterator<data::Point2D*,std::vector<data::Point2D> > *)(v2 + 224)) )
          break;
        point = __gnu_cxx::__normal_iterator<data::Point2D *,std::vector<data::Point2D>>::operator*((const __gnu_cxx::__normal_iterator<data::Point2D*,std::vector<data::Point2D> > *const)(v2 + 192));
        if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 80);
        LODWORD(v46) = *(_DWORD *)(v2 + 80);
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          v46 = __asan_report_load4(v2 + 64);
        v47 = *(float *)&v46;
        v48 = _mm_cvtsi32_si128(*(_DWORD *)(v2 + 64));
        *(float *)v48.m128i_i32 = common::tools::RandomUtils::rand<float>(*(float *)v48.m128i_i32, v47);
        v49 = _mm_cvtsi128_si32(v48);
        v50 = *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000);
        if ( v50 != 0 && (char)(((unsigned __int8)point & 7) + 3) >= v50 )
        {
          LOBYTE(v45) = v50 != 0;
          __asan_report_store4(point, v45);
        }
        LODWORD(point->x) = v49;
        if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 112);
        LODWORD(v51) = *(_DWORD *)(v2 + 112);
        if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
          v51 = __asan_report_load4(v2 + 96);
        v52 = *(float *)&v51;
        v53 = _mm_cvtsi32_si128(*(_DWORD *)(v2 + 96));
        *(float *)v53.m128i_i32 = common::tools::RandomUtils::rand<float>(*(float *)v53.m128i_i32, v52);
        v54 = _mm_cvtsi128_si32(v53);
        v55 = *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000);
        if ( v55 != 0 && (char)((((_BYTE)point + 4) & 7) + 3) >= v55 )
        {
          LOBYTE(v45) = v55 != 0;
          __asan_report_store4(&point->y, v45);
        }
        LODWORD(point->y) = v54;
        __gnu_cxx::__normal_iterator<data::Point2D *,std::vector<data::Point2D>>::operator++((__gnu_cxx::__normal_iterator<data::Point2D*,std::vector<data::Point2D> > *const)(v2 + 192));
      }
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      std::basic_string<bool>::basic_string((std::basic_string<bool> *const)(v2 + 608));
      *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
      std::basic_string<bool>::basic_string((std::basic_string<bool> *const)(v2 + 672));
      std::basic_string<bool>::resize((std::basic_string<bool> *const)(v2 + 608), 0xF4240uLL);
      std::basic_string<bool>::resize((std::basic_string<bool> *const)(v2 + 672), 0xF4240uLL);
      common::tools::TimeUtils::Timer::reset((common::tools::TimeUtils::Timer *const)(v2 + 320));
      for ( i_0 = 0LL; i_0 <= 0xF423F; ++i_0 )
      {
        v56 = std::vector<data::Point2D>::operator[]((std::vector<data::Point2D> *const)(v2 + 416), i_0);
        v57 = JsonConfigMgr::isInSimplePolygon(v56, polygon_point_vec);
        v58 = i_0;
        v59 = std::basic_string<bool>::operator[]((std::basic_string<bool> *const)(v2 + 608), i_0);
        v60 = v59;
        v61 = *(_BYTE *)(((unsigned __int64)v59 >> 3) + 0x7FFF8000);
        if ( v61 != 0 && ((unsigned __int8)v59 & 7) >= v61 )
        {
          LOBYTE(v58) = v61 != 0;
          __asan_report_store1(v59, v58, v59);
        }
        *v60 = v57;
      }
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 4;
      v62 = (unsigned int)common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, v62);
      *(_DWORD *)(v2 + 144) = v62;
      common::tools::TimeUtils::Timer::reset((common::tools::TimeUtils::Timer *const)(v2 + 320));
      for ( i_1 = 0LL; i_1 <= 0xF423F; ++i_1 )
      {
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
        v63 = std::vector<data::Point2D>::operator[]((std::vector<data::Point2D> *const)(v2 + 416), i_1);
        Vector2::Vector2((Vector2 *const)(v2 + 256), v63);
        isPointInsidePolygon = InteriorCheckablePolygon::isPointInsidePolygon(
                                 (const InteriorCheckablePolygon *const)(v2 + 352),
                                 (const Vector2 *)(v2 + 256));
        v65 = i_1;
        v66 = std::basic_string<bool>::operator[]((std::basic_string<bool> *const)(v2 + 672), i_1);
        v67 = v66;
        v68 = *(_BYTE *)(((unsigned __int64)v66 >> 3) + 0x7FFF8000);
        if ( v68 != 0 && ((unsigned __int8)v66 & 7) >= v68 )
        {
          LOBYTE(v65) = v68 != 0;
          __asan_report_store1(v66, v65, v66);
        }
        *v67 = isPointInsidePolygon;
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      }
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 4;
      v69 = (unsigned int)common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, v69);
      *(_DWORD *)(v2 + 160) = v69;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, v69);
      *(_DWORD *)(v2 + 176) = 0;
      for ( i_2 = 0LL; i_2 <= 0xF423F; ++i_2 )
      {
        v70 = i_2;
        v71 = std::basic_string<bool>::operator[]((std::basic_string<bool> *const)(v2 + 608), i_2);
        v72 = (char *)v71;
        v73 = *(_BYTE *)(((unsigned __int64)v71 >> 3) + 0x7FFF8000);
        if ( v73 != 0 && ((unsigned __int8)v71 & 7) >= v73 )
        {
          LOBYTE(v70) = v73 != 0;
          __asan_report_load1(v71, v70, v71);
        }
        v74 = *v72;
        v75 = i_2;
        v76 = std::basic_string<bool>::operator[]((std::basic_string<bool> *const)(v2 + 672), i_2);
        v77 = v76;
        v78 = *(_BYTE *)(((unsigned __int64)v76 >> 3) + 0x7FFF8000);
        if ( v78 != 0 && ((unsigned __int8)v76 & 7) >= v78 )
        {
          LOBYTE(v75) = v78 != 0;
          __asan_report_load1(v76, v75, v76);
        }
        if ( v74 == *v77 )
        {
          if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 176);
          ++*(_DWORD *)(v2 + 176);
        }
      }
      *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 736, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 736),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "testCheckInPolygon",
        157);
      v79 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              (common::milog::MiLogStream *const)(v2 + 736),
              message);
      v80 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v79, (const char (*)[12])" point_num:");
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      v81 = std::vector<data::Point2D>::size(polygon_point_vec);
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
        v81 = __asan_report_store8(v2 + 288, " point_num:");
      *(_QWORD *)(v2 + 288) = v81;
      v82 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v80,
              (const unsigned __int64 *)(v2 + 288));
      v83 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v82, (const char (*)[13])" same_count:");
      v84 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v83,
              (const unsigned int *)(v2 + 176));
      v85 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v84, (const char (*)[2])"/");
      v86 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v85,
              (const unsigned int *)(v2 + 128));
      v87 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v86, (const char (*)[5])" t0:");
      v88 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v87, (const unsigned int *)(v2 + 48));
      v89 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v88, (const char (*)[5])" t1:");
      v90 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v89,
              (const unsigned int *)(v2 + 144));
      v91 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v90, (const char (*)[5])" t2:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v91, (const unsigned int *)(v2 + 160));
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
      *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
      std::basic_string<bool>::~basic_string((std::basic_string<bool> *const)(v2 + 672));
      std::basic_string<bool>::~basic_string((std::basic_string<bool> *const)(v2 + 608));
      std::vector<data::Point2D>::~vector((std::vector<data::Point2D> *const)(v2 + 416));
    }
  }
  InteriorCheckablePolygon::~InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v2 + 352));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 320));
  if ( v99 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = -168430091;
  }
};

// Line 162: range 000000000F7BA789-000000000F7BAB49
int32_t __cdecl insertToHashMap<std::unordered_map<int,ConfigAbilityHashMap>,ConfigAbilityHashMap,std::string ConfigAbilityHashMap::*>(
        std::unordered_map<int,ConfigAbilityHashMap> *hash_map,
        const std::string *key,
        ConfigAbilityHashMap *value,
        std::string *member)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t StringHash; // edx
  char v8; // al
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::pointer v16; // rax
  int32_t result; // eax
  ConfigAbilityHashMap *v18; // rdx
  ConfigAbilityHashMap *v19; // r8
  const std::string *keya; // [rsp+10h] [rbp-100h]
  char v23[240]; // [rsp+20h] [rbp-F0h] BYREF

  keya = key;
  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 13 hash_code:164 64 8 8 iter:165 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = insertToHashMap<std::unordered_map<int,ConfigAbilityHashMap>,ConfigAbilityHashMap,std::string ConfigAbilityHashMap::*>;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862725] = -202116109;
  StringHash = getStringHash(key);
  v8 = *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000);
  LOBYTE(key) = v8 != 0;
  if ( v8 != 0 && v8 <= 3 )
    __asan_report_store4(v4 + 48, key);
  *(_DWORD *)(v4 + 48) = StringHash;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, key);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v4 + 64) = std::unordered_map<int,ConfigAbilityHashMap>::find(
                                                                           hash_map,
                                                                           (const std::unordered_map<int,ConfigAbilityHashMap>::key_type *)(v4 + 48));
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v4 + 96) = std::unordered_map<int,ConfigAbilityHashMap>::end(hash_map);
  v9 = std::__detail::operator!=<std::pair<int const,ConfigAbilityHashMap>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "insertToHashMap",
      169);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v4 + 128),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v11 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v10,
            (const char (*)[21])"duplicate hash_code:");
    v12 = common::milog::MiLogStream::operator<<<int,(int *)0>(v11, (const int *)(v4 + 48));
    v13 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v12, (const char (*)[10])" new_key:");
    v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, keya);
    v15 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v14, (const char (*)[10])" old_key:");
    v16 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v4 + 64));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      v15,
      (const std::string *)((char *)&v16->second.ability_name + (_QWORD)member));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
    result = -1;
  }
  else
  {
    v18 = std::move<ConfigAbilityHashMap &>(value);
    std::unordered_map<int,ConfigAbilityHashMap>::emplace<int &,ConfigAbilityHashMap>(
      hash_map,
      (int *)(v4 + 48),
      v18,
      (int *)(v4 + 48),
      v19);
    result = 0;
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 162: range 000000000F7BA1F7-000000000F7BA5B7
int32_t __cdecl insertToHashMap<std::unordered_map<int,ConfigAbilityOverride>,ConfigAbilityOverride,std::string ConfigAbilityOverride::*>(
        std::unordered_map<int,ConfigAbilityOverride> *hash_map,
        const std::string *key,
        ConfigAbilityOverride *value,
        std::string *member)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t StringHash; // edx
  char v8; // al
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::pointer v16; // rax
  int32_t result; // eax
  ConfigAbilityOverride *v18; // rdx
  ConfigAbilityOverride *v19; // r8
  const std::string *keya; // [rsp+10h] [rbp-100h]
  char v23[240]; // [rsp+20h] [rbp-F0h] BYREF

  keya = key;
  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 13 hash_code:164 64 8 8 iter:165 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = insertToHashMap<std::unordered_map<int,ConfigAbilityOverride>,ConfigAbilityOverride,std::string ConfigAbilityOverride::*>;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862725] = -202116109;
  StringHash = getStringHash(key);
  v8 = *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000);
  LOBYTE(key) = v8 != 0;
  if ( v8 != 0 && v8 <= 3 )
    __asan_report_store4(v4 + 48, key);
  *(_DWORD *)(v4 + 48) = StringHash;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, key);
  *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v4 + 64) = std::unordered_map<int,ConfigAbilityOverride>::find(
                                                                            hash_map,
                                                                            (const std::unordered_map<int,ConfigAbilityOverride>::key_type *)(v4 + 48));
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v4 + 96) = std::unordered_map<int,ConfigAbilityOverride>::end(hash_map);
  v9 = std::__detail::operator!=<std::pair<int const,ConfigAbilityOverride>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "insertToHashMap",
      169);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v4 + 128),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v11 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v10,
            (const char (*)[21])"duplicate hash_code:");
    v12 = common::milog::MiLogStream::operator<<<int,(int *)0>(v11, (const int *)(v4 + 48));
    v13 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v12, (const char (*)[10])" new_key:");
    v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, keya);
    v15 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v14, (const char (*)[10])" old_key:");
    v16 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v4 + 64));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      v15,
      (const std::string *)((char *)&v16->second.override_name + (_QWORD)member));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
    result = -1;
  }
  else
  {
    v18 = std::move<ConfigAbilityOverride &>(value);
    std::unordered_map<int,ConfigAbilityOverride>::emplace<int &,ConfigAbilityOverride>(
      hash_map,
      (int *)(v4 + 48),
      v18,
      (int *)(v4 + 48),
      v19);
    result = 0;
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 181: range 000000000F23C97C-000000000F23C98F
HK4EDesignConfig *__cdecl JsonConfigMgr::getConfig(JsonConfigMgr *const this)
{
  return (HK4EDesignConfig *)&this[-12].config_regional_play_map_;
};

// Line 187: range 000000000F23C990-000000000F23C9A3
const HK4EDesignConfig *__cdecl JsonConfigMgr::getConfig(const JsonConfigMgr *const this)
{
  return (const HK4EDesignConfig *)&this[-12].config_regional_play_map_;
};

// Line 193: range 000000000F23C9A4-000000000F23F17D
int32_t __cdecl JsonConfigMgr::loadAllJson(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  int v7; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  int32_t v68; // ebx
  char v70[2048]; // [rsp+20h] [rbp-800h] BYREF

  v2 = (common::milog::MiLogStream *)v70;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(2016LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"31 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 32 9 <unknown> 1568 32 9 <unknown> 1632 32 9 <unknown> 1696 32 9 <unknown> 1760 32 9 <unknown> 1824 32 9 <unknown> 1888 32 9 <unknown> 1952 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)JsonConfigMgr::loadAllJson;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -218959118;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -218959118;
  v4[536862780] = -218959118;
  v4[536862782] = -202116109;
  if ( JsonConfigMgr::loadScenePoint(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      195);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v5, (const char (*)[15])"loadScenePoint");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v6, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadSceneRoute(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[3], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 3,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      196);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 3, (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])"loadSceneRoute");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 3);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadSceneEnvironmentZone(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[5], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 5,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      197);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 5, (const char (*)[16])"[CONFIG_ERROR] ");
    v11 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            v10,
            (const char (*)[25])"loadSceneEnvironmentZone");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 5);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadAllAbilityConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[7], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 7,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      198);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 7, (const char (*)[16])"[CONFIG_ERROR] ");
    v13 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v12,
            (const char (*)[21])"loadAllAbilityConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v13, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 7);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadGlobalCombatConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[9], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 9,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      199);
    v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 9, (const char (*)[16])"[CONFIG_ERROR] ");
    v15 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v14,
            (const char (*)[23])"loadGlobalCombatConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v15, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 9);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadAllAvatarConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[11], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 11,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      200);
    v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 11,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v16,
            (const char (*)[20])"loadAllAvatarConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 11);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadAllMonsterConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[13], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      201);
    v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 13,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v19 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v18,
            (const char (*)[21])"loadAllMonsterConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v19, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 13);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadAllGadgetConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[15], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      202);
    v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 15,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v21 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v20,
            (const char (*)[20])"loadAllGadgetConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v21, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 15);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadAllTalentConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[17], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      203);
    v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 17,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v23 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v22,
            (const char (*)[20])"loadAllTalentConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v23, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 17);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadLevelEntityConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[19], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 19,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      204);
    v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 19,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v25 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v24,
            (const char (*)[22])"loadLevelEntityConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 19);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadWeatherAreaConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[21], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      205);
    v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 21,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v27 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v26,
            (const char (*)[22])"loadWeatherAreaConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v27, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 21);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadOpenAreaPointConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[23], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 23,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      206);
    v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 23,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v29 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v28,
            (const char (*)[24])"loadOpenAreaPointConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v29, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 23);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadNpcBornConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[25], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 25,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      207);
    v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 25,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v31 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v30, (const char (*)[18])"loadNpcBornConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v31, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 25);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadClimateConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[27] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[27].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[27].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[27], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 27,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      208);
    v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 27,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v33 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v32, (const char (*)[18])"loadClimateConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v33, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 27);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadClimateAreaConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[29] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[29].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[29].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[29], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 29,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      209);
    v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 29,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v35 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v34,
            (const char (*)[22])"loadClimateAreaConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v35, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 29);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadPolygonConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[31] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[31].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[31].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[31], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 31,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      210);
    v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 31,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v37 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v36, (const char (*)[18])"loadPolygonConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v37, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 31);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadWorldAreaJsonConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[33] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[33].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[33].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[33], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 33,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      211);
    v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 33,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v39 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v38,
            (const char (*)[24])"loadWorldAreaJsonConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v39, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 33);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadAllAbilityGroupConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[35] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[35].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[35].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[35], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 35,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      212);
    v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 35,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v41 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v40,
            (const char (*)[26])"loadAllAbilityGroupConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v41, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 35);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadWidgetConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[37] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[37].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[37].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[37], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 37,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      213);
    v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 37,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v43 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v42, (const char (*)[17])"loadWidgetConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v43, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 37);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadLevelLayoutJsonConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[39] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[39].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[39].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[39], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 39,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      214);
    v44 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 39,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v45 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v44,
            (const char (*)[26])"loadLevelLayoutJsonConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v45, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 39);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadSceneHomeConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[41] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[41].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[41].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[41], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 41,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      215);
    v46 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 41,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v47 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v46,
            (const char (*)[20])"loadSceneHomeConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v47, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 41);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadWidgetNewConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[43] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[43].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[43].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[43], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 43,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      216);
    v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 43,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v49 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v48,
            (const char (*)[20])"loadWidgetNewConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v49, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 43);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadHomeFurnitureSuite(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[45] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[45].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[45].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[45], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 45,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      217);
    v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 45,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v51 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v50,
            (const char (*)[23])"loadHomeFurnitureSuite");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v51, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 45);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadHomeFishpondConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[47] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[47].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[47].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[47], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 47,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      218);
    v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 47,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v53 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v52,
            (const char (*)[23])"loadHomeFishpondConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v53, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 47);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadHomeFurnitureGroupConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[49] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[49].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[49].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[49], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 49,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      219);
    v54 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 49,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v55 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            v54,
            (const char (*)[29])"loadHomeFurnitureGroupConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v55, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 49);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadHomeSceneAutoGenConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[51] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[51].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[51].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[51], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 51,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      220);
    v56 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 51,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v57 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            v56,
            (const char (*)[27])"loadHomeSceneAutoGenConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v57, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 51);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadAllCustomDungeonConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[53] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[53].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[53].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[53], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 53,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      221);
    v58 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 53,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v59 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            v58,
            (const char (*)[27])"loadAllCustomDungeonConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v59, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 53);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadRegionalPlayConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[55] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[55].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[55].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[55], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 55,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      222);
    v60 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 55,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v61 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v60,
            (const char (*)[23])"loadRegionalPlayConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v61, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 55);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadDeathZoneConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[57] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[57].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[57].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[57], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 57,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      223);
    v62 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 57,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v63 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v62,
            (const char (*)[20])"loadDeathZoneConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v63, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 57);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadSGVRegisterConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[59] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[59].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[59].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[59], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 59,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      224);
    v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 59,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v65 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v64,
            (const char (*)[22])"loadSGVRegisterConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v65, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 59);
    v7 = -1;
  }
  else if ( JsonConfigMgr::loadHomeFishtankConfig(this, config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[61] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[61].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[61].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[61], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 61,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllJson",
      225);
    v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 61,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v67 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v66,
            (const char (*)[23])"loadHomeFishtankConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v67, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 61);
    v7 = -1;
  }
  else
  {
    v7 = 0;
  }
  v68 = v7;
  if ( v70 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8048) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8050) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8058) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8060) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8068) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8070) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8078) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8080) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8088) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8090) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8098) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80A0) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80A8) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80B0) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80B8) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80C0) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80C8) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80D0) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80D8) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80E0) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80E8) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80F0) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80F8) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    __asan_stack_free_5(v2, 2016LL, v70);
  }
  return v68;
};

// Line 231: range 000000000F23F17E-000000000F2404EA
int32_t __cdecl JsonConfigMgr::rewriteConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  int32_t ret; // [rsp+1Ch] [rbp-384h]
  char v33[896]; // [rsp+20h] [rbp-380h] BYREF

  v2 = (common::milog::MiLogStream *)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(864LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"13 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)JsonConfigMgr::rewriteConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -202116109;
  ret = 0;
  if ( JsonConfigMgr::rewriteWeatherAreaConfig(this, config) )
  {
    ret = -1;
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      233);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           v5,
           (const char (*)[25])"rewriteWeatherAreaConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v6, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    *(_DWORD *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteScenePointConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[3], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 3,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      234);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 3, (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           v7,
           (const char (*)[24])"rewriteScenePointConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v8, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 3);
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteNpcBornConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[5], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 5,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      235);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 5, (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v9,
            (const char (*)[21])"rewriteNpcBornConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 5);
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteMonsterConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[7], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 7,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      236);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 7, (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v11,
            (const char (*)[21])"rewriteMonsterConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 7);
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteClimateAreaConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[9], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 9,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      237);
    v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 9, (const char (*)[16])"[CONFIG_ERROR] ");
    v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            v13,
            (const char (*)[25])"rewriteClimateAreaConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 9);
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewritePolygonConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[11], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 11,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      238);
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 11,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v16 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v15,
            (const char (*)[21])"rewritePolygonConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 11);
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteWidgetConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[13], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      239);
    v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 13,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v18 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v17,
            (const char (*)[20])"rewriteWidgetConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 13);
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteCoopConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[15], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      240);
    v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 15,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v20 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v19, (const char (*)[18])"rewriteCoopConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v20, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 15);
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteHomeModuleConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[17], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      241);
    v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 17,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v22 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v21,
            (const char (*)[24])"rewriteHomeModuleConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 17);
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteRegionalPlayConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[19], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 19,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      242);
    v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 19,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v24 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v23,
            (const char (*)[26])"rewriteRegionalPlayConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v24, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 19);
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteDeathZoneConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[21], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      243);
    v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 21,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v26 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v25,
            (const char (*)[23])"rewriteDeathZoneConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v26, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 21);
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteGlobalCombatAntiCheatAttackTagWhiteListConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[23], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 23,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      244);
    v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 23,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v28 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            v27,
            (const char (*)[53])"rewriteGlobalCombatAntiCheatAttackTagWhiteListConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v28, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 23);
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::rewriteGlobalCombatConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[25], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 25,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteConfig",
      245);
    v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 25,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v30 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v29,
            (const char (*)[26])"rewriteGlobalCombatConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v30, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 25);
  }
  if ( v33 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8068) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8068) = -168430091;
  }
  return ret;
};

// Line 251: range 000000000F2404EC-000000000F24294B
int32_t __cdecl JsonConfigMgr::checkConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  int32_t ret; // [rsp+1Ch] [rbp-6C4h]
  char v59[1728]; // [rsp+20h] [rbp-6C0h] BYREF

  v2 = (common::milog::MiLogStream *)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1696LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"26 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 32 9 <unknown> 1568 32 9 <unknown> 1632 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)JsonConfigMgr::checkConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -202116109;
  ret = 0;
  if ( JsonConfigMgr::checkAbilityConfig(this) )
  {
    ret = -1;
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      253);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v5, (const char (*)[19])"checkAbilityConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v6, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    *(_DWORD *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkAvatarConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[3], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 3,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      254);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 3, (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v7, (const char (*)[18])"checkAvatarConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v8, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 3);
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkMonsterConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[5], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 5,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      255);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 5, (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v9, (const char (*)[19])"checkMonsterConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 5);
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkGadgetConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[7], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 7,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      256);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 7, (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v11, (const char (*)[18])"checkGadgetConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 7);
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkTalentConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[9], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 9,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      257);
    v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 9, (const char (*)[16])"[CONFIG_ERROR] ");
    v14 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"checkTalentConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 9);
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkGlobalCombatConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[11], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 11,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      258);
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 11,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v15,
            (const char (*)[24])"checkGlobalCombatConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 11);
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkLevelEntityConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[13], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      259);
    v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 13,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v18 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v17,
            (const char (*)[23])"checkLevelEntityConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 13);
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkScenePointConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[15], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      260);
    v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 15,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v20 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v19,
            (const char (*)[22])"checkScenePointConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v20, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 15);
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkSceneRouteConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[17], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      261);
    v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 17,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v22 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v21,
            (const char (*)[22])"checkSceneRouteConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 17);
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkSceneEnvironmentZone(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[19], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 19,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      262);
    v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 19,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v24 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v23,
            (const char (*)[26])"checkSceneEnvironmentZone");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v24, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 19);
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkNpcBornConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[21], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      263);
    v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 21,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v26 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v25, (const char (*)[19])"checkNpcBornConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v26, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 21);
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkClimateConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[23], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 23,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      264);
    v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 23,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v28 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v27, (const char (*)[19])"checkClimateConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v28, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 23);
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkAbilityGroupConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[25], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 25,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      265);
    v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 25,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v30 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v29,
            (const char (*)[24])"checkAbilityGroupConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v30, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 25);
    *(_DWORD *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkWidgetConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[27] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[27] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[27].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[27].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[27], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 27,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      266);
    v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 27,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v32 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v31, (const char (*)[18])"checkWidgetConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v32, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 27);
    *(_DWORD *)(((unsigned __int64)&v2[27] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkMixinConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[29] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[29] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[29].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[29].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[29], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 29,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      267);
    v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 29,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v34 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v33, (const char (*)[17])"checkMixinConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v34, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 29);
    *(_DWORD *)(((unsigned __int64)&v2[29] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkSceneHomeConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[31] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[31] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[31].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[31].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[31], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 31,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      268);
    v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 31,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v36 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v35,
            (const char (*)[21])"checkSceneHomeConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v36, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 31);
    *(_DWORD *)(((unsigned __int64)&v2[31] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkWidgetNewConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[33] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[33] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[33].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[33].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[33], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 33,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      269);
    v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 33,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v38 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v37,
            (const char (*)[21])"checkWidgetNewConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v38, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 33);
    *(_DWORD *)(((unsigned __int64)&v2[33] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkClimateAreaConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[35] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[35] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[35].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[35].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[35], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 35,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      270);
    v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 35,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v40 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v39,
            (const char (*)[23])"checkClimateAreaConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v40, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 35);
    *(_DWORD *)(((unsigned __int64)&v2[35] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkHomeFishpondConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[37] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[37] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[37].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[37].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[37], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 37,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      271);
    v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 37,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v42 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v41,
            (const char (*)[24])"checkHomeFishpondConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v42, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 37);
    *(_DWORD *)(((unsigned __int64)&v2[37] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkHomeFurnitureGroupConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[39] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[39] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[39].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[39].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[39], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 39,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      272);
    v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 39,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v44 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            v43,
            (const char (*)[30])"checkHomeFurnitureGroupConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v44, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 39);
    *(_DWORD *)(((unsigned __int64)&v2[39] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkHomeSceneAutoGenConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[41] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[41] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[41].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[41].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[41], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 41,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      273);
    v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 41,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v46 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            v45,
            (const char (*)[28])"checkHomeSceneAutoGenConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v46, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 41);
    *(_DWORD *)(((unsigned __int64)&v2[41] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkCustomGadgetConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[43] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[43] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[43].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[43].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[43], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 43,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      274);
    v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 43,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v48 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v47,
            (const char (*)[24])"checkCustomGadgetConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v48, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 43);
    *(_DWORD *)(((unsigned __int64)&v2[43] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkRegionalPlayConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[45] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[45] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[45].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[45].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[45], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 45,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      275);
    v49 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 45,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v50 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v49,
            (const char (*)[24])"checkRegionalPlayConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v50, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 45);
    *(_DWORD *)(((unsigned __int64)&v2[45] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkDeathZoneConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[47] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[47] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[47].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 96 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[47].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[47], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 47,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      276);
    v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 47,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v52 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v51,
            (const char (*)[21])"checkDeathZoneConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v52, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 47);
    *(_DWORD *)(((unsigned __int64)&v2[47] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkHomeFishtankConfig(this, config) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[49] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[49] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[49].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[49].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[49], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 49,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      277);
    v53 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 49,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v54 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v53,
            (const char (*)[24])"checkHomeFishtankConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v54, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 49);
    *(_DWORD *)(((unsigned __int64)&v2[49] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( JsonConfigMgr::checkLocalEntityConfig(this) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[51] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[51] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[51].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[51].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[51], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 51,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkConfig",
      278);
    v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 51,
            (const char (*)[16])"[CONFIG_ERROR] ");
    v56 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v55,
            (const char (*)[23])"checkLocalEntityConfig");
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v56, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 51);
  }
  if ( v59 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80C4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 204) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF80D0) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    __asan_stack_free_5(v2, 1696LL, v59);
  }
  return ret;
};

// Line 285: range 000000000F24294C-000000000F242D0D
int32_t __cdecl JsonConfigMgr::finalConfig(JsonConfigMgr *const this, const HK4EDesignConfig *prev_design_config_ptr)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t v5; // r14d
  int32_t result; // eax
  std::unordered_map<std::string,unsigned int>::size_type v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int ret; // [rsp+1Ch] [rbp-D4h]
  char v11[208]; // [rsp+20h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 32 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::finalConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -202116109;
  v5 = JsonConfigMgr::genAbilityDataHashCode(this, prev_design_config_ptr);
  ret = v5 | JsonConfigMgr::genAnimEventHashCode(this);
  if ( ret )
  {
    result = ret;
  }
  else
  {
    v7 = std::unordered_map<std::string,unsigned int>::size(&this->ability_str_hash_map_);
    if ( v7 == std::unordered_map<unsigned int,std::string>::size(&this->ability_hash_str_map_) )
    {
      if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "finalConfig",
        297);
      v9 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             (common::milog::MiLogStream *const)(v2 + 96),
             (const char (*)[32])"total_config_attack_info_count:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->total_config_attack_info_count_);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((unsigned __int64)&this->ability_string_hash_retcode_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ability_string_hash_retcode_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&this->ability_string_hash_retcode_);
      }
      result = this->ability_string_hash_retcode_;
    }
    else
    {
      if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 32, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 32),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "finalConfig",
        294);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 32),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v8, (const char (*)[45])byte_1A516AA0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
      result = -1;
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 305: range 000000000F242D0E-000000000F246E82
int32_t __cdecl JsonConfigMgr::loadScenePoint(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  unsigned int first; // ecx
  char v8; // al
  unsigned int v9; // esi
  __int64 v10; // rsi
  unsigned int v11; // esi
  common::milog::MiLogStream *v12; // rax
  int v13; // r15d
  unsigned __int64 v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  _BOOL4 v17; // r15d
  char *v18; // rsi
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  _BOOL4 v21; // r15d
  float v22; // xmm0_4
  uint32_t *p_tran_scene_id; // rsi
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  _BOOL4 v28; // eax
  std::shared_ptr<data::ConfigScenePoint> *v29; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false>,bool> v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  _BOOL4 v35; // r15d
  __int64 v36; // rsi
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rdx
  char v38; // cl
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v39; // rax
  int *v40; // rdx
  int v41; // ecx
  char v42; // al
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  int v49; // edx
  int v50; // r15d
  int v51; // r15d
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v52; // rax
  _DWORD *v53; // rdx
  char v54; // cl
  int v55; // edx
  uint32_t *v56; // rsi
  unsigned int v57; // ecx
  char v58; // al
  uint32_t *p_entry_point_id; // rdx
  uint32_t *v60; // rsi
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>> *p_point_map; // rax
  bool v62; // al
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // r14
  std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  _BOOL4 v68; // eax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // r14
  std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  int v74; // r15d
  char *v75; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v76; // rax
  int *v77; // rdx
  int v78; // ecx
  char v79; // al
  char *v80; // rsi
  uint32_t v81; // ecx
  char v82; // dl
  std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v83; // rax
  std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v84; // rax
  char v85; // dl
  __int64 v86; // rsi
  std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v87; // rdx
  uint32_t entry_point_id; // ecx
  char v89; // dl
  int v90; // r15d
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v91; // rax
  _DWORD *v92; // rdx
  char v93; // cl
  int v94; // r15d
  int v95; // edx
  char *v96; // rsi
  data::ConfigSceneArea *v97; // r8
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // rdx
  common::milog::MiLogStream *v100; // rax
  common::milog::MiLogStream *v101; // rax
  int v102; // eax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigSceneArea>,false,false>,bool> v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  __int64 v108; // rdx
  int v109; // edx
  char *v110; // rsi
  common::milog::MiLogStream *v111; // rax
  common::milog::MiLogStream *v112; // rdx
  common::milog::MiLogStream *v113; // rax
  common::milog::MiLogStream *v114; // rax
  _BOOL4 v115; // eax
  std::shared_ptr<data::ConfigForceField> *v116; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField> >,false,false>,bool> v117; // rax
  common::milog::MiLogStream *v118; // rax
  common::milog::MiLogStream *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // rax
  int v122; // r15d
  std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v123; // rdx
  char v124; // cl
  int v125; // edx
  common::milog::MiLogStream *v126; // rax
  common::milog::MiLogStream *v127; // rdx
  common::milog::MiLogStream *v128; // rax
  common::milog::MiLogStream *v129; // rax
  _BOOL4 v130; // eax
  std::shared_ptr<data::ConfigLocalEntity> *v131; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false,false>,bool> v132; // rax
  common::milog::MiLogStream *v133; // rax
  common::milog::MiLogStream *v134; // rax
  common::milog::MiLogStream *v135; // rax
  common::milog::MiLogStream *v136; // rax
  int v137; // r15d
  int v138; // edx
  int v139; // r15d
  int v140; // r15d
  int v141; // r15d
  unsigned __int64 v142; // rax
  int v143; // eax
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::mapped_type *v145; // [rsp+0h] [rbp-C60h]
  DungeonExcelConfigMgr *dungeon_config_mgr; // [rsp+28h] [rbp-C38h]
  data::SceneExcelConfigMap *__for_range; // [rsp+38h] [rbp-C28h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference p; // [rsp+40h] [rbp-C20h]
  SceneJsonConfig *scene_json_config; // [rsp+48h] [rbp-C18h]
  std::unordered_map<std::string,std::shared_ptr<data::ConfigScenePoint>> *__for_range_0; // [rsp+50h] [rbp-C10h]
  std::pair<const std::string,std::shared_ptr<data::ConfigScenePoint> > *p_0; // [rsp+58h] [rbp-C08h]
  data::UInt32Array *__for_range_1; // [rsp+60h] [rbp-C00h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false>::reference p_1; // [rsp+78h] [rbp-BE8h]
  data::UInt32Array *__for_range_3; // [rsp+88h] [rbp-BD8h]
  DungeonJsonConfig *dungeon_json_config; // [rsp+90h] [rbp-BD0h]
  std::unordered_map<std::string,data::ConfigSceneArea> *__for_range_4; // [rsp+98h] [rbp-BC8h]
  std::pair<const std::string,data::ConfigSceneArea> *p_2; // [rsp+A0h] [rbp-BC0h]
  std::unordered_map<std::string,std::shared_ptr<data::ConfigForceField>> *__for_range_5; // [rsp+B0h] [rbp-BB0h]
  std::pair<const std::string,std::shared_ptr<data::ConfigForceField> > *p_3; // [rsp+B8h] [rbp-BA8h]
  std::unordered_map<std::string,std::shared_ptr<data::ConfigLocalEntity>> *__for_range_6; // [rsp+C0h] [rbp-BA0h]
  std::pair<const std::string,std::shared_ptr<data::ConfigLocalEntity> > *p_4; // [rsp+C8h] [rbp-B98h]
  char v163[2960]; // [rsp+D0h] [rbp-B90h] BYREF

  v3 = (unsigned __int64)v163;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_6(2912LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "61 32 4 12 scene_id:310 48 4 12 point_id:336 64 4 14 dungeon_id:357 80 4 12 point_id:376 96 4 14"
                        " dungeon_id:393 112 4 11 area_id:406 128 4 12 force_id:423 144 4 13 entity_id:444 160 8 15 __for"
                        "_begin:308 192 8 13 __for_end:308 224 8 15 __for_begin:334 256 8 13 __for_end:334 288 8 15 __for"
                        "_begin:357 320 8 13 __for_end:357 352 8 15 __for_begin:374 384 8 13 __for_end:374 416 8 6 it:381"
                        " 448 8 9 <unknown> 480 8 15 __for_begin:393 512 8 13 __for_end:393 544 8 15 __for_begin:404 576 "
                        "8 13 __for_end:404 608 8 15 __for_begin:421 640 8 13 __for_end:421 672 8 15 __for_begin:442 704 "
                        "8 13 __for_end:442 736 12 9 <unknown> 768 12 9 <unknown> 800 16 20 config_point_ptr:342 832 16 1"
                        "9 trans_point_ptr:348 864 16 21 dungeon_entry_ptr:354 896 16 22 personal_point_ptr:368 928 16 20"
                        " dungeon_exit_ptr:378 960 16 21 dungeon_entry_ptr:387 992 16 20 config_force_ptr:429 1024 16 28 "
                        "config_airflow_field_ptr:435 1056 16 27 config_local_entity_ptr:450 1088 16 30 config_fishpond_e"
                        "ntity_ptr:452 1120 32 13 scene_dir:311 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 19 scene_"
                        "json_name:312 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 32 13 json_file:313 1568 32 9 <unknow"
                        "n> 1632 32 9 <unknown> 1696 32 9 <unknown> 1760 32 9 <unknown> 1824 32 9 <unknown> 1888 32 9 <un"
                        "known> 1952 32 9 <unknown> 2016 32 9 <unknown> 2080 32 9 <unknown> 2144 32 9 <unknown> 2208 32 9"
                        " <unknown> 2272 32 9 <unknown> 2336 32 9 <unknown> 2400 32 9 <unknown> 2464 40 8 root:320 2544 2"
                        "96 16 config_scene:327";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::loadScenePoint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -234556924;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -218959360;
  v5[536862732] = -218959360;
  v5[536862733] = -218959360;
  v5[536862734] = -218959360;
  v5[536862735] = -218959360;
  v5[536862736] = -218959360;
  v5[536862737] = -218959360;
  v5[536862738] = -218959360;
  v5[536862739] = -218959360;
  v5[536862740] = -218959360;
  v5[536862741] = -218959360;
  v5[536862742] = -218959360;
  v5[536862743] = -219020288;
  v5[536862744] = -219020288;
  v5[536862745] = -219021312;
  v5[536862746] = -219021312;
  v5[536862747] = -219021312;
  v5[536862748] = -219021312;
  v5[536862749] = -219021312;
  v5[536862750] = -219021312;
  v5[536862751] = -219021312;
  v5[536862752] = -219021312;
  v5[536862753] = -219021312;
  v5[536862754] = -219021312;
  v5[536862756] = -218959118;
  v5[536862758] = -218959118;
  v5[536862760] = -218959118;
  v5[536862762] = -218959118;
  v5[536862764] = -218959118;
  v5[536862766] = -218959118;
  v5[536862768] = -218959118;
  v5[536862770] = -218959118;
  v5[536862772] = -218959118;
  v5[536862774] = -218959118;
  v5[536862776] = -218959118;
  v5[536862778] = -218959118;
  v5[536862780] = -218959118;
  v5[536862782] = -218959118;
  v5[536862784] = -218959118;
  v5[536862786] = -218959118;
  v5[536862788] = -218959118;
  v5[536862790] = -218959118;
  v5[536862792] = -218959118;
  v5[536862794] = -218959118;
  v5[536862796] = -218959118;
  v5[536862798] = -218959360;
  v5[536862799] = 62194;
  v5[536862808] = -218103808;
  v5[536862809] = -202116109;
  v5[536862810] = -202116109;
  dungeon_config_mgr = &config->txt_config_mgr.dungeon_config_mgr;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 160, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 160) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 192, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 192) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 192);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 192)) )
      break;
    p = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 160));
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p);
    }
    first = p->first;
    v8 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
    if ( v8 != 0 && v8 <= 3 )
    {
      LOBYTE(v6) = v8 != 0;
      __asan_report_store4(v3 + 32, v6);
    }
    *(_DWORD *)(v3 + 32) = first;
    *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = 0;
    v9 = *(_DWORD *)(v3 + 32);
    if ( *(char *)(((v3 + 1184) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) )
    {
      v9 = 32;
      __asan_report_store_n(v3 + 1184, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v3 + 1184), v9);
    v10 = (__int64)config;
    if ( *(char *)(((v3 + 1248) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) )
    {
      v10 = 32LL;
      __asan_report_store_n(v3 + 1248, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 1248), (const std::string *)v10, (std::string *)(v3 + 1184));
    if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1120, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 1120), (std::string *)(v3 + 1248), "/");
    std::string::~string((void *)(v3 + 1248));
    *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v3 + 1184));
    *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 1440) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 32);
    v11 = *(_DWORD *)(v3 + 32);
    if ( *(char *)(((v3 + 1376) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) )
    {
      v11 = 32;
      __asan_report_store_n(v3 + 1376, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v3 + 1376), v11);
    if ( *(char *)(((v3 + 1440) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1471) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 1471) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1440, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 1440), "scene", (std::string *)(v3 + 1376));
    if ( *(char *)(((v3 + 1312) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1312, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 1312), (std::string *)(v3 + 1440), "_point.json");
    std::string::~string((void *)(v3 + 1440));
    *(_DWORD *)(((v3 + 1440) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v3 + 1376));
    *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 1504) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1504) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1535) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 1535) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1504, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 1504), (const std::string *)(v3 + 1120), (const std::string *)(v3 + 1312));
    if ( common::tools::FileUtils::fileExists((const std::string *)(v3 + 1504)) )
    {
      *(_DWORD *)(((v3 + 1568) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1568) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1599) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1599) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1568, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1568),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "loadScenePoint",
        316);
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              (common::milog::MiLogStream *const)(v3 + 1568),
              (const std::string *)(v3 + 1312));
      common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v12, (const char (*)[12])" not exist!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1568));
      *(_DWORD *)(((v3 + 1568) >> 3) + 0x7FFF8000) = -117901064;
      v13 = 0;
    }
    else
    {
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], v3 + 1504);
      v14 = ((v3 + 2464) >> 3) + 2147450880;
      *(_DWORD *)v14 = 0;
      *(_BYTE *)(v14 + 4) = 0;
      Json::Value::Value(v3 + 2464, 0LL);
      if ( !parseJsonFile((const std::string *)(v3 + 1504), (Json::Value *)(v3 + 2464)) )
      {
        *(_DWORD *)(((v3 + 1632) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 1632) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1663) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1663) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 1632, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 1632),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadScenePoint",
          323);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 1632),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                v15,
                (const char (*)[31])"parseJsonFile fails, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1632));
        *(_DWORD *)(((v3 + 1632) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v17 = 0;
      }
      else
      {
        scene_json_config = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                              &this->scene_json_config_map_,
                              (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v3 + 32));
        __asan_unpoison_stack_memory(v3 + 2544, 296LL);
        data::ConfigScene::ConfigScene((data::ConfigScene *const)(v3 + 2544));
        v18 = (char *)(v3 + 2464);
        if ( !data::ConfigScene::fromJson((data::ConfigScene *const)(v3 + 2544), (const Json::Value *)(v3 + 2464)) )
        {
          *(_DWORD *)(((v3 + 1696) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1696) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1727) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 1727) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1696, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1696),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadScenePoint",
            330);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1696),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  v19,
                  (const char (*)[26])"fromJson fails, scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1696));
          *(_DWORD *)(((v3 + 1696) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v21 = 0;
        }
        else
        {
          if ( *(_BYTE *)(((v3 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 2544) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v3 + 2544);
          v22 = *(float *)(v3 + 2544);
          if ( *(_BYTE *)(((unsigned __int64)&scene_json_config->trans_radius >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&scene_json_config->trans_radius >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&scene_json_config->trans_radius, v18);
          }
          scene_json_config->trans_radius = v22;
          __for_range_0 = (std::unordered_map<std::string,std::shared_ptr<data::ConfigScenePoint>> *)(v3 + 2552);
          *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 224, v18);
          *(std::unordered_map<std::string,std::shared_ptr<data::ConfigScenePoint>>::iterator *)(v3 + 224) = std::unordered_map<std::string,std::shared_ptr<data::ConfigScenePoint>>::begin(__for_range_0);
          *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 256, v18);
          *(std::unordered_map<std::string,std::shared_ptr<data::ConfigScenePoint>>::iterator *)(v3 + 256) = std::unordered_map<std::string,std::shared_ptr<data::ConfigScenePoint>>::end(__for_range_0);
          while ( 1 )
          {
            p_tran_scene_id = (uint32_t *)(v3 + 256);
            if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigScenePoint>>,true>(
                    (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigScenePoint> >,true> *)(v3 + 224),
                    (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigScenePoint> >,true> *)(v3 + 256)) )
              break;
            p_0 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigScenePoint>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigScenePoint> >,false,true> *const)(v3 + 224));
            *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 48, p_tran_scene_id);
            *(_DWORD *)(v3 + 48) = 0;
            if ( common::tools::StringUtils::strToNum<unsigned int>(&p_0->first, (unsigned int *)(v3 + 48), 1) )
            {
              *(_DWORD *)(((v3 + 1760) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1760) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1791) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 1791) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1760, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1760),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadScenePoint",
                339);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1760),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v24,
                      (const char (*)[16])"strToNum fails:");
              v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, &p_0->first);
              v27 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v26,
                      (const char (*)[12])", scene_id:");
              p_tran_scene_id = (uint32_t *)(v3 + 32);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v27,
                (const unsigned int *)(v3 + 32));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1760));
              *(_DWORD *)(((v3 + 1760) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v28 = 0;
            }
            else
            {
              *(_WORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
              std::shared_ptr<data::ConfigScenePoint>::shared_ptr(
                (std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 800),
                &p_0->second);
              v30 = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::emplace<unsigned int &,std::shared_ptr<data::ConfigScenePoint>&>(
                      &scene_json_config->point_map,
                      (unsigned int *)(v3 + 48),
                      (std::shared_ptr<data::ConfigScenePoint> *)(v3 + 800),
                      (unsigned int *)(v3 + 48),
                      v29);
              if ( !v30.second )
              {
                *(_DWORD *)(((v3 + 1824) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1824) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1855) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1855) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1824, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1824),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadScenePoint",
                  345);
                v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1824),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v32 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                        v31,
                        (const char (*)[20])"duplicate point_id:");
                v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v32,
                        (const unsigned int *)(v3 + 48));
                v34 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v33,
                        (const char (*)[12])", scene_id:");
                p_tran_scene_id = (uint32_t *)(v3 + 32);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v34,
                  (const unsigned int *)(v3 + 32));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1824));
                *(_DWORD *)(((v3 + 1824) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v35 = 0;
              }
              else
              {
                *(_WORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v3 + 832) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::SceneTransPoint,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 832));
                v36 = 0LL;
                if ( std::operator!=<data::SceneTransPoint>(
                       (const std::shared_ptr<data::SceneTransPoint> *)(v3 + 832),
                       0LL) )
                {
                  v37 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 832));
                  v38 = *(_BYTE *)(((unsigned __int64)&v37->unlocked >> 3) + 0x7FFF8000);
                  if ( v38 != 0 && (((unsigned __int8)v37 + 100) & 7) >= v38 )
                  {
                    LOBYTE(v36) = v38 != 0;
                    __asan_report_load1(&v37->unlocked, v36, v37);
                  }
                  if ( v37->unlocked )
                    std::unordered_set<unsigned int>::insert(
                      &scene_json_config->unlocked_point_set,
                      (const std::unordered_set<unsigned int>::value_type *)(v3 + 48));
                }
                *(_WORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v3 + 864) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::DungeonEntry,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 864));
                if ( !std::operator!=<data::DungeonEntry>((const std::shared_ptr<data::DungeonEntry> *)(v3 + 864), 0LL) )
                  goto LABEL_90;
                __for_range_1 = &std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 864))->dungeon_ids;
                *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 288, 0LL);
                *(std::vector<unsigned int>::iterator *)(v3 + 288) = std::vector<unsigned int>::begin(__for_range_1);
                *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 320, 0LL);
                *(std::vector<unsigned int>::iterator *)(v3 + 320) = std::vector<unsigned int>::end(__for_range_1);
                while ( 1 )
                {
                  p_tran_scene_id = (uint32_t *)(v3 + 320);
                  if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 288),
                          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 320)) )
                  {
                    v49 = 1;
                    goto LABEL_88;
                  }
                  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
                  v39 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 288));
                  v40 = (int *)v39;
                  if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(v39);
                  }
                  v41 = *v40;
                  v42 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
                  if ( v42 != 0 && v42 <= 3 )
                  {
                    LOBYTE(p_tran_scene_id) = v42 != 0;
                    __asan_report_store4(v3 + 64, p_tran_scene_id);
                  }
                  *(_DWORD *)(v3 + 64) = v41;
                  if ( !data::DungeonExcelConfigMgrBase::findDungeonExcelConfig(
                          dungeon_config_mgr,
                          *(_DWORD *)(v3 + 64)) )
                    break;
                  __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 288));
                }
                *(_DWORD *)(((v3 + 1888) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1888) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1919) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1919) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1888, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1888),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadScenePoint",
                  362);
                v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1888),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v44 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                        v43,
                        (const char (*)[32])"can't find dungeon, dungeon_id:");
                v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v44,
                        (const unsigned int *)(v3 + 64));
                v46 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v45,
                        (const char (*)[12])", point_id:");
                v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v46,
                        (const unsigned int *)(v3 + 48));
                v48 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                        v47,
                        (const char (*)[13])", scene_id: ");
                p_tran_scene_id = (uint32_t *)(v3 + 32);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v48,
                  (const unsigned int *)(v3 + 32));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1888));
                *(_DWORD *)(((v3 + 1888) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v49 = 0;
LABEL_88:
                *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
                if ( v49 == 1 )
                {
LABEL_90:
                  *(_WORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v3 + 896) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  std::dynamic_pointer_cast<data::PersonalSceneJumpPoint,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 896));
                  p_tran_scene_id = 0LL;
                  if ( std::operator!=<data::PersonalSceneJumpPoint>(
                         (const std::shared_ptr<data::PersonalSceneJumpPoint> *)(v3 + 896),
                         0LL) )
                  {
                    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(v3 + 48);
                    }
                    v51 = *(_DWORD *)(v3 + 48);
                    p_tran_scene_id = &std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 896))->tran_scene_id;
                    v52 = std::unordered_map<unsigned int,unsigned int>::operator[](
                            &scene_json_config->room_entry_map,
                            p_tran_scene_id);
                    v53 = v52;
                    v54 = *(_BYTE *)(((unsigned __int64)v52 >> 3) + 0x7FFF8000);
                    LOBYTE(p_tran_scene_id) = v54 != 0;
                    if ( v54 != 0 && (char)(((unsigned __int8)v52 & 7) + 3) >= v54 )
                      __asan_report_store4(v52, p_tran_scene_id);
                    *v53 = v51;
                  }
                  std::shared_ptr<data::PersonalSceneJumpPoint>::~shared_ptr((std::shared_ptr<data::PersonalSceneJumpPoint> *const)(v3 + 896));
                  v50 = 1;
                }
                else
                {
                  v50 = 0;
                }
                std::shared_ptr<data::DungeonEntry>::~shared_ptr((std::shared_ptr<data::DungeonEntry> *const)(v3 + 864));
                std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v3 + 832));
                v35 = v50 == 1;
              }
              std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 800));
              v28 = v35;
            }
            *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
            *(_WORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -1800;
            *(_WORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = -1800;
            *(_WORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -1800;
            *(_WORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = -1800;
            if ( !v28 )
            {
              v55 = 0;
              goto LABEL_105;
            }
            std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigScenePoint>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigScenePoint> >,false,true> *const)(v3 + 224));
          }
          v55 = 1;
LABEL_105:
          *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
          if ( v55 == 1 )
          {
            *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 352, p_tran_scene_id);
            *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::iterator *)(v3 + 352) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::begin(&scene_json_config->point_map);
            *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 384, p_tran_scene_id);
            *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::iterator *)(v3 + 384) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(&scene_json_config->point_map);
            while ( 1 )
            {
              v56 = (uint32_t *)(v3 + 384);
              if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 352),
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 384)) )
                break;
              p_1 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 352));
              *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
              if ( *(_BYTE *)(((unsigned __int64)p_1 >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)p_1 >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(p_1);
              }
              v57 = p_1->first;
              v58 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
              if ( v58 != 0 && v58 <= 3 )
              {
                LOBYTE(v56) = v58 != 0;
                __asan_report_store4(v3 + 80, v56);
              }
              *(_DWORD *)(v3 + 80) = v57;
              *(_WORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v3 + 928) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::DungeonExit,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 928));
              v56 = 0LL;
              if ( !std::operator!=<data::DungeonExit>((const std::shared_ptr<data::DungeonExit> *)(v3 + 928), 0LL) )
                goto LABEL_169;
              *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
              p_entry_point_id = &std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 928))->entry_point_id;
              if ( *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 416, 0LL);
              v60 = p_entry_point_id;
              *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::iterator *)(v3 + 416) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::find(&scene_json_config->point_map, p_entry_point_id);
              *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
              p_point_map = &scene_json_config->point_map;
              if ( *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) )
                p_point_map = (std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>> *)__asan_report_store8(v3 + 448, v60);
              *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::iterator *)(v3 + 448) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(p_point_map);
              v62 = std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 416),
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 448));
              *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = -8;
              if ( v62 )
              {
                *(_DWORD *)(((v3 + 1952) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1952) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1983) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 1983) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1952, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1952),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadScenePoint",
                  384);
                v63 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1952),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v64 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                        v63,
                        (const char (*)[32])"can't find dungeon entry point:");
                v65 = std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 928));
                v66 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v64, &v65->entry_point_id);
                v67 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v66,
                        (const char (*)[14])", point_id : ");
                v56 = (uint32_t *)(v3 + 80);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v67,
                  (const unsigned int *)(v3 + 80));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1952));
                *(_DWORD *)(((v3 + 1952) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v68 = 0;
              }
              else
              {
                *(_WORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = 0;
                std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 416));
                if ( *(_WORD *)(((v3 + 960) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::DungeonEntry,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 960));
                if ( std::operator==<data::DungeonEntry>((const std::shared_ptr<data::DungeonEntry> *)(v3 + 960), 0LL) )
                {
                  *(_DWORD *)(((v3 + 2016) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 2016) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 2047) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 2047) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 2016, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 2016),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "loadScenePoint",
                    390);
                  v69 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 2016),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v70 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                          v69,
                          (const char (*)[29])"invalid dungeon entry point:");
                  v71 = std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 928));
                  v72 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v70,
                          &v71->entry_point_id);
                  v73 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v72,
                          (const char (*)[14])", point_id : ");
                  v56 = (uint32_t *)(v3 + 80);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v73,
                    (const unsigned int *)(v3 + 80));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2016));
                  *(_DWORD *)(((v3 + 2016) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v74 = 0;
                }
                else
                {
                  __for_range_3 = &std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 960))->dungeon_ids;
                  *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v3 + 480, 0LL);
                  *(std::vector<unsigned int>::iterator *)(v3 + 480) = std::vector<unsigned int>::begin(__for_range_3);
                  *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v3 + 512, 0LL);
                  *(std::vector<unsigned int>::iterator *)(v3 + 512) = std::vector<unsigned int>::end(__for_range_3);
                  while ( 1 )
                  {
                    v75 = (char *)(v3 + 512);
                    if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 480),
                            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 512)) )
                      break;
                    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
                    v76 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 480));
                    v77 = (int *)v76;
                    if ( *(_BYTE *)(((unsigned __int64)v76 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v76 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v76 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v76);
                    }
                    v78 = *v77;
                    v79 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
                    if ( v79 != 0 && v79 <= 3 )
                    {
                      LOBYTE(v75) = v79 != 0;
                      __asan_report_store4(v3 + 96, v75);
                    }
                    *(_DWORD *)(v3 + 96) = v78;
                    v80 = (char *)(v3 + 96);
                    dungeon_json_config = std::unordered_map<unsigned int,DungeonJsonConfig>::operator[](
                                            &this->dungeon_json_config_map_,
                                            (const std::unordered_map<unsigned int,DungeonJsonConfig>::key_type *)(v3 + 96));
                    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(v3 + 32);
                    }
                    v81 = *(_DWORD *)(v3 + 32);
                    v82 = *(_BYTE *)(((unsigned __int64)dungeon_json_config >> 3) + 0x7FFF8000);
                    if ( v82 != 0 && (char)(((unsigned __int8)dungeon_json_config & 7) + 3) >= v82 )
                    {
                      LOBYTE(v80) = v82 != 0;
                      __asan_report_store4(dungeon_json_config, v80);
                    }
                    dungeon_json_config->exit_scene_id = v81;
                    *(_WORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 1024;
                    v83 = std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 928));
                    Vector3::Vector3((Vector3 *const)(v3 + 736), &v83->pos);
                    if ( (((unsigned __int8)dungeon_json_config + 4) & 7) >= *(_BYTE *)(((unsigned __int64)&dungeon_json_config->exit_pos >> 3)
                                                                                      + 0x7FFF8000)
                      && *(_BYTE *)(((unsigned __int64)&dungeon_json_config->exit_pos >> 3) + 0x7FFF8000) != 0
                      || *(_BYTE *)((((unsigned __int64)&dungeon_json_config->exit_pos.z + 3) >> 3) + 0x7FFF8000) != 0
                      && (((unsigned __int8)dungeon_json_config + 15) & 7) >= *(_BYTE *)((((unsigned __int64)&dungeon_json_config->exit_pos.z
                                                                                         + 3) >> 3)
                                                                                       + 0x7FFF8000) )
                    {
                      __asan_report_store_n(&dungeon_json_config->exit_pos, 12LL);
                    }
                    if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 747) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 - 21) & 7) >= *(_BYTE *)(((v3 + 747) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load_n(v3 + 736, 12LL);
                    }
                    *(_QWORD *)&dungeon_json_config->exit_pos.x = *(_QWORD *)(v3 + 736);
                    dungeon_json_config->exit_pos.z = *(float *)(v3 + 744);
                    *(_WORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -1800;
                    *(_WORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = 1024;
                    v84 = std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 928));
                    Vector3::Vector3((Vector3 *const)(v3 + 768), &v84->rot);
                    v85 = *(_BYTE *)((((unsigned __int64)&dungeon_json_config->exit_rot.z + 3) >> 3) + 0x7FFF8000);
                    v86 = v85 != 0;
                    if ( ((((unsigned __int8)dungeon_json_config + 16) & 7) >= *(_BYTE *)(((unsigned __int64)&dungeon_json_config->exit_rot >> 3)
                                                                                        + 0x7FFF8000)
                       && *(_BYTE *)(((unsigned __int64)&dungeon_json_config->exit_rot >> 3) + 0x7FFF8000) != 0) | (unsigned __int8)v86 & ((((unsigned __int8)dungeon_json_config + 27) & 7) >= v85) )
                    {
                      v86 = 12LL;
                      __asan_report_store_n(&dungeon_json_config->exit_rot, 12LL);
                    }
                    if ( *(char *)(((v3 + 768) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 779) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 11) & 7) >= *(_BYTE *)(((v3 + 779) >> 3) + 0x7FFF8000) )
                    {
                      v86 = 12LL;
                      __asan_report_load_n(v3 + 768, 12LL);
                    }
                    *(_QWORD *)&dungeon_json_config->exit_rot.x = *(_QWORD *)(v3 + 768);
                    dungeon_json_config->exit_rot.z = *(float *)(v3 + 776);
                    *(_WORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = -1800;
                    v87 = std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 928));
                    if ( *(_BYTE *)(((unsigned __int64)&v87->entry_point_id >> 3) + 0x7FFF8000) != 0
                      && (char)((((_BYTE)v87 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v87->entry_point_id >> 3)
                                                                          + 0x7FFF8000) )
                    {
                      __asan_report_load4(&v87->entry_point_id);
                    }
                    entry_point_id = v87->entry_point_id;
                    v89 = *(_BYTE *)(((unsigned __int64)&dungeon_json_config->entry_point_id >> 3) + 0x7FFF8000);
                    if ( v89 != 0 && (char)((((_BYTE)dungeon_json_config + 28) & 7) + 3) >= v89 )
                    {
                      LOBYTE(v86) = v89 != 0;
                      __asan_report_store4(&dungeon_json_config->entry_point_id, v86);
                    }
                    dungeon_json_config->entry_point_id = entry_point_id;
                    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 480));
                  }
                  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) = -8;
                  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v3 + 80);
                  v90 = *(_DWORD *)(v3 + 80);
                  v145 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::operator[](
                           &this->dungeon_entry_to_exit_map_,
                           (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::key_type *)(v3 + 32));
                  v56 = &std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonExit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 928))->entry_point_id;
                  v91 = std::unordered_map<unsigned int,unsigned int>::operator[](v145, v56);
                  v92 = v91;
                  v93 = *(_BYTE *)(((unsigned __int64)v91 >> 3) + 0x7FFF8000);
                  LOBYTE(v56) = v93 != 0;
                  if ( v93 != 0 && (char)(((unsigned __int8)v91 & 7) + 3) >= v93 )
                    __asan_report_store4(v91, v56);
                  *v92 = v90;
                  v74 = 1;
                }
                std::shared_ptr<data::DungeonEntry>::~shared_ptr((std::shared_ptr<data::DungeonEntry> *const)(v3 + 960));
                v68 = v74 == 1;
              }
              *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = -8;
              *(_WORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = -1800;
              if ( v68 )
LABEL_169:
                v94 = 1;
              else
                v94 = 0;
              std::shared_ptr<data::DungeonExit>::~shared_ptr((std::shared_ptr<data::DungeonExit> *const)(v3 + 928));
              *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
              *(_WORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -1800;
              if ( v94 != 1 )
              {
                v95 = 0;
                goto LABEL_174;
              }
              std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 352));
            }
            v95 = 1;
LABEL_174:
            *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = -8;
            if ( v95 == 1 )
            {
              __for_range_4 = (std::unordered_map<std::string,data::ConfigSceneArea> *)(v3 + 2608);
              *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 544, v56);
              *(std::unordered_map<std::string,data::ConfigSceneArea>::iterator *)(v3 + 544) = std::unordered_map<std::string,data::ConfigSceneArea>::begin(__for_range_4);
              *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 576, v56);
              *(std::unordered_map<std::string,data::ConfigSceneArea>::iterator *)(v3 + 576) = std::unordered_map<std::string,data::ConfigSceneArea>::end(__for_range_4);
              while ( 1 )
              {
                v96 = (char *)(v3 + 576);
                if ( !std::__detail::operator!=<std::pair<std::string const,data::ConfigSceneArea>,true>(
                        (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigSceneArea>,true> *)(v3 + 544),
                        (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigSceneArea>,true> *)(v3 + 576)) )
                  break;
                p_2 = std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigSceneArea>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigSceneArea>,false,true> *const)(v3 + 544));
                *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
                if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_store4(v3 + 112, v96);
                *(_DWORD *)(v3 + 112) = 0;
                if ( common::tools::StringUtils::strToNum<unsigned int>(&p_2->first, (unsigned int *)(v3 + 112), 1) )
                {
                  *(_DWORD *)(((v3 + 2080) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 2080) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 2111) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 2111) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 2080, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 2080),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "loadScenePoint",
                    409);
                  v98 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 2080),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v99 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          v98,
                          (const char (*)[16])"strToNum fails:");
                  v100 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v99, &p_2->first);
                  v101 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                           v100,
                           (const char (*)[12])", scene_id:");
                  v96 = (char *)(v3 + 32);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v101,
                    (const unsigned int *)(v3 + 32));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2080));
                  *(_DWORD *)(((v3 + 2080) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v102 = 0;
                }
                else
                {
                  v103 = std::unordered_map<unsigned int,data::ConfigSceneArea>::emplace<unsigned int &,data::ConfigSceneArea&>(
                           &scene_json_config->area_map,
                           (unsigned int *)(v3 + 112),
                           &p_2->second,
                           (unsigned int *)&scene_json_config->area_map,
                           v97);
                  if ( !v103.second )
                  {
                    *(_DWORD *)(((v3 + 2144) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 2144) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 2175) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 2175) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 2144, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 2144),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadScenePoint",
                      415);
                    v104 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v3 + 2144),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v105 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                             v104,
                             (const char (*)[19])"duplicate area_id:");
                    v106 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                             v105,
                             (const unsigned int *)(v3 + 112));
                    v107 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                             v106,
                             (const char (*)[12])", scene_id:");
                    v96 = (char *)(v3 + 32);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v107,
                      (const unsigned int *)(v3 + 32));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2144));
                    *(_DWORD *)(((v3 + 2144) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v102 = 0;
                  }
                  else
                  {
                    v96 = (char *)(((_BYTE)p_2 + 36) & 7);
                    v108 = (*(_BYTE *)(((unsigned __int64)&p_2->second.unlocked >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v96 >= *(_BYTE *)(((unsigned __int64)&p_2->second.unlocked >> 3) + 0x7FFF8000));
                    if ( (_BYTE)v108 )
                      __asan_report_load1(&p_2->second.unlocked, v96, v108);
                    if ( p_2->second.unlocked )
                    {
                      v96 = (char *)(v3 + 112);
                      std::unordered_set<unsigned int>::insert(
                        &scene_json_config->unlocked_area_set,
                        (const std::unordered_set<unsigned int>::value_type *)(v3 + 112));
                    }
                    v102 = 1;
                  }
                }
                *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
                if ( v102 != 1 )
                {
                  v109 = 0;
                  goto LABEL_201;
                }
                std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigSceneArea>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigSceneArea>,false,true> *const)(v3 + 544));
              }
              v109 = 1;
LABEL_201:
              *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) = -8;
              if ( v109 == 1 )
              {
                __for_range_5 = (std::unordered_map<std::string,std::shared_ptr<data::ConfigForceField>> *)(v3 + 2664);
                *(_BYTE *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 608) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 608, v96);
                *(std::unordered_map<std::string,std::shared_ptr<data::ConfigForceField>>::iterator *)(v3 + 608) = std::unordered_map<std::string,std::shared_ptr<data::ConfigForceField>>::begin(__for_range_5);
                *(_BYTE *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 640) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 640, v96);
                *(std::unordered_map<std::string,std::shared_ptr<data::ConfigForceField>>::iterator *)(v3 + 640) = std::unordered_map<std::string,std::shared_ptr<data::ConfigForceField>>::end(__for_range_5);
                while ( 1 )
                {
                  v110 = (char *)(v3 + 640);
                  if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigForceField>>,true>(
                          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigForceField> >,true> *)(v3 + 608),
                          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigForceField> >,true> *)(v3 + 640)) )
                    break;
                  p_3 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigForceField>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigForceField> >,false,true> *const)(v3 + 608));
                  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 4;
                  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_store4(v3 + 128, v110);
                  }
                  *(_DWORD *)(v3 + 128) = 0;
                  if ( common::tools::StringUtils::strToNum<unsigned int>(&p_3->first, (unsigned int *)(v3 + 128), 1) )
                  {
                    *(_DWORD *)(((v3 + 2208) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 2208) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 2239) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 2239) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 2208, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 2208),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadScenePoint",
                      426);
                    v111 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v3 + 2208),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v112 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             v111,
                             (const char (*)[16])"strToNum fails:");
                    v113 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v112, &p_3->first);
                    v114 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                             v113,
                             (const char (*)[12])", scene_id:");
                    v110 = (char *)(v3 + 32);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v114,
                      (const unsigned int *)(v3 + 32));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2208));
                    *(_DWORD *)(((v3 + 2208) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v115 = 0;
                  }
                  else
                  {
                    *(_WORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
                    std::shared_ptr<data::ConfigForceField>::shared_ptr(
                      (std::shared_ptr<data::ConfigForceField> *const)(v3 + 992),
                      &p_3->second);
                    v117 = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::emplace<unsigned int &,std::shared_ptr<data::ConfigForceField>&>(
                             &scene_json_config->force_map,
                             (unsigned int *)(v3 + 128),
                             (std::shared_ptr<data::ConfigForceField> *)(v3 + 992),
                             (unsigned int *)&scene_json_config->force_map,
                             v116);
                    if ( !v117.second )
                    {
                      *(_DWORD *)(((v3 + 2272) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v3 + 2272) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v3 + 2303) >> 3) + 0x7FFF8000) != 0
                        && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 2303) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v3 + 2272, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v3 + 2272),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_config_mgr.cpp",
                        "loadScenePoint",
                        432);
                      v118 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                               (common::milog::MiLogStream *const)(v3 + 2272),
                               (const char (*)[16])"[CONFIG_ERROR] ");
                      v119 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                               v118,
                               (const char (*)[20])"duplicate force_id:");
                      v120 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                               v119,
                               (const unsigned int *)(v3 + 128));
                      v121 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                               v120,
                               (const char (*)[12])", scene_id:");
                      v110 = (char *)(v3 + 32);
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v121,
                        (const unsigned int *)(v3 + 32));
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2272));
                      *(_DWORD *)(((v3 + 2272) >> 3) + 0x7FFF8000) = -117901064;
                      v2 = -1;
                      v122 = 0;
                    }
                    else
                    {
                      *(_WORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::dynamic_pointer_cast<data::ConfigAirflowField,data::ConfigForceField>((const std::shared_ptr<data::ConfigForceField> *)(v3 + 1024));
                      v110 = 0LL;
                      if ( std::operator!=<data::ConfigAirflowField>(
                             (const std::shared_ptr<data::ConfigAirflowField> *)(v3 + 1024),
                             0LL) )
                      {
                        v123 = std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 1024));
                        v124 = *(_BYTE *)(((unsigned __int64)&v123->unlocked >> 3) + 0x7FFF8000);
                        LOBYTE(v110) = v124 != 0;
                        if ( v124 != 0 && (((unsigned __int8)v123 + 100) & 7) >= v124 )
                          __asan_report_load1(&v123->unlocked, v110, v123);
                        if ( v123->unlocked )
                        {
                          v110 = (char *)(v3 + 128);
                          std::unordered_set<unsigned int>::insert(
                            &scene_json_config->unlocked_force_set,
                            (const std::unordered_set<unsigned int>::value_type *)(v3 + 128));
                        }
                      }
                      std::shared_ptr<data::ConfigAirflowField>::~shared_ptr((std::shared_ptr<data::ConfigAirflowField> *const)(v3 + 1024));
                      v122 = 1;
                    }
                    std::shared_ptr<data::ConfigForceField>::~shared_ptr((std::shared_ptr<data::ConfigForceField> *const)(v3 + 992));
                    v115 = v122 == 1;
                  }
                  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
                  *(_WORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -1800;
                  *(_WORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = -1800;
                  if ( !v115 )
                  {
                    v125 = 0;
                    goto LABEL_232;
                  }
                  std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigForceField>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigForceField> >,false,true> *const)(v3 + 608));
                }
                v125 = 1;
LABEL_232:
                *(_BYTE *)(((v3 + 608) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 640) >> 3) + 0x7FFF8000) = -8;
                if ( v125 == 1 )
                {
                  __for_range_6 = (std::unordered_map<std::string,std::shared_ptr<data::ConfigLocalEntity>> *)(v3 + 2720);
                  *(_BYTE *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v3 + 672) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v3 + 672, v110);
                  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigLocalEntity>>::iterator *)(v3 + 672) = std::unordered_map<std::string,std::shared_ptr<data::ConfigLocalEntity>>::begin(__for_range_6);
                  *(_BYTE *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v3 + 704) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v3 + 704, v110);
                  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigLocalEntity>>::iterator *)(v3 + 704) = std::unordered_map<std::string,std::shared_ptr<data::ConfigLocalEntity>>::end(__for_range_6);
                  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigLocalEntity>>,true>(
                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLocalEntity> >,true> *)(v3 + 672),
                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLocalEntity> >,true> *)(v3 + 704)) )
                  {
                    p_4 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigLocalEntity>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLocalEntity> >,false,true> *const)(v3 + 672));
                    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
                    if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_store4(v3 + 144, v3 + 704);
                    }
                    *(_DWORD *)(v3 + 144) = 0;
                    if ( common::tools::StringUtils::strToNum<unsigned int>(&p_4->first, (unsigned int *)(v3 + 144), 1) )
                    {
                      *(_DWORD *)(((v3 + 2336) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v3 + 2336) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v3 + 2367) >> 3) + 0x7FFF8000) != 0
                        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 2367) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v3 + 2336, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v3 + 2336),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_config_mgr.cpp",
                        "loadScenePoint",
                        447);
                      v126 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                               (common::milog::MiLogStream *const)(v3 + 2336),
                               (const char (*)[16])"[CONFIG_ERROR] ");
                      v127 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                               v126,
                               (const char (*)[16])"strToNum fails:");
                      v128 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v127, &p_4->first);
                      v129 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                               v128,
                               (const char (*)[12])", scene_id:");
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v129,
                        (const unsigned int *)(v3 + 32));
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2336));
                      *(_DWORD *)(((v3 + 2336) >> 3) + 0x7FFF8000) = -117901064;
                      v2 = -1;
                      v130 = 0;
                    }
                    else
                    {
                      *(_WORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
                      std::shared_ptr<data::ConfigLocalEntity>::shared_ptr(
                        (std::shared_ptr<data::ConfigLocalEntity> *const)(v3 + 1056),
                        &p_4->second);
                      *(_WORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::dynamic_pointer_cast<data::ConfigFishpondScenePoint,data::ConfigLocalEntity>((const std::shared_ptr<data::ConfigLocalEntity> *)(v3 + 1088));
                      if ( std::operator!=<data::ConfigFishpondScenePoint>(
                             (const std::shared_ptr<data::ConfigFishpondScenePoint> *)(v3 + 1088),
                             0LL)
                        && (v132 = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::emplace<unsigned int &,std::shared_ptr<data::ConfigLocalEntity>&>(
                                     &scene_json_config->local_entity_map,
                                     (unsigned int *)(v3 + 144),
                                     (std::shared_ptr<data::ConfigLocalEntity> *)(v3 + 1056),
                                     (unsigned int *)&scene_json_config->local_entity_map,
                                     v131),
                            !v132.second) )
                      {
                        *(_DWORD *)(((v3 + 2400) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v3 + 2400) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v3 + 2431) >> 3) + 0x7FFF8000) != 0
                          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 2431) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v3 + 2400, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v3 + 2400),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/json_config_mgr.cpp",
                          "loadScenePoint",
                          457);
                        v133 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                 (common::milog::MiLogStream *const)(v3 + 2400),
                                 (const char (*)[16])"[CONFIG_ERROR] ");
                        v134 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                                 v133,
                                 (const char (*)[21])"duplicate entity_id:");
                        v135 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                 v134,
                                 (const unsigned int *)(v3 + 144));
                        v136 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                 v135,
                                 (const char (*)[12])", scene_id:");
                        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v136,
                          (const unsigned int *)(v3 + 32));
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2400));
                        *(_DWORD *)(((v3 + 2400) >> 3) + 0x7FFF8000) = -117901064;
                        v2 = -1;
                        v137 = 0;
                      }
                      else
                      {
                        v137 = 1;
                      }
                      std::shared_ptr<data::ConfigFishpondScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigFishpondScenePoint> *const)(v3 + 1088));
                      std::shared_ptr<data::ConfigLocalEntity>::~shared_ptr((std::shared_ptr<data::ConfigLocalEntity> *const)(v3 + 1056));
                      v130 = v137 == 1;
                    }
                    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
                    *(_WORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -1800;
                    *(_WORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = -1800;
                    if ( !v130 )
                    {
                      v138 = 0;
                      goto LABEL_259;
                    }
                    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigLocalEntity>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLocalEntity> >,false,true> *const)(v3 + 672));
                  }
                  v138 = 1;
LABEL_259:
                  *(_BYTE *)(((v3 + 672) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v3 + 704) >> 3) + 0x7FFF8000) = -8;
                  v21 = v138 == 1;
                }
                else
                {
                  v21 = 0;
                }
              }
              else
              {
                v21 = 0;
              }
            }
            else
            {
              v21 = 0;
            }
          }
          else
          {
            v21 = 0;
          }
        }
        data::ConfigScene::~ConfigScene((data::ConfigScene *const)(v3 + 2544));
        v17 = v21;
      }
      Json::Value::~Value((Json::Value_0 *const)(v3 + 2464));
      if ( v17 )
        v13 = 2;
      else
        v13 = 1;
    }
    std::string::~string((void *)(v3 + 1504));
    if ( v13 )
    {
      if ( v13 == 2 )
        v139 = 2;
      else
        v139 = 1;
    }
    else
    {
      v139 = 0;
    }
    std::string::~string((void *)(v3 + 1312));
    if ( v139 )
    {
      if ( v139 == 2 )
        v140 = 2;
      else
        v140 = 1;
    }
    else
    {
      v140 = 0;
    }
    std::string::~string((void *)(v3 + 1120));
    if ( v140 )
    {
      if ( v140 == 2 )
        v141 = 2;
      else
        v141 = 1;
    }
    else
    {
      v141 = 0;
    }
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 1504) >> 3) + 0x7FFF8000) = -117901064;
    v142 = ((v3 + 2464) >> 3) + 2147450880;
    *(_DWORD *)v142 = -117901064;
    *(_BYTE *)(v142 + 4) = -8;
    __asan_poison_stack_memory(v3 + 2544, 296LL);
    if ( v141 && v141 != 2 )
    {
      v143 = 0;
      goto LABEL_284;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 160));
  }
  v143 = 1;
LABEL_284:
  if ( v143 == 1 )
    v2 = 0;
  if ( v163 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8164) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 364) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_6(v3, 2912LL, v163);
  }
  return v2;
};

// Line 468: range 000000000F246E84-000000000F249066
int32_t __cdecl JsonConfigMgr::loadSceneRoute(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int v6; // esi
  __int64 v7; // rsi
  unsigned __int64 v8; // rax
  bool v9; // r15
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // r15d
  unsigned __int64 v13; // rax
  int32_t AllFilesWithExtension; // edx
  char v15; // al
  char *v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  _BOOL4 v21; // r15d
  unsigned __int64 v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  int v25; // r15d
  unsigned __int64 v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rdx
  _BOOL4 v29; // r15d
  data::ConfigRoute *v30; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false>,bool> v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  int v36; // edx
  unsigned __int64 v37; // rax
  unsigned __int64 v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rdx
  _BOOL4 v41; // r15d
  char *v42; // rsi
  uint32_t point_array_id; // ecx
  char v44; // al
  unsigned __int64 v45; // rax
  data::ConfigPointList *p_platform_point_list; // rsi
  const data::ConfigPoint *v47; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigPoint>,false,false>,bool> v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rdx
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rdx
  int v55; // edx
  int v56; // r15d
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rdx
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // r15
  std::unordered_map<unsigned int,data::ConfigPoint>::size_type v62; // rax
  data::ConfigPointArray *v63; // rax
  unsigned int *v64; // rcx
  data::ConfigPointArray *v65; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigPointArray>,false,false>,bool> v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rdx
  unsigned __int64 v71; // rax
  int v72; // edx
  unsigned __int64 v73; // rax
  unsigned __int64 v74; // rax
  int v75; // edx
  int v76; // eax
  unsigned __int64 v77; // rdx
  int v78; // eax
  data::SceneExcelConfigMap *__for_range; // [rsp+30h] [rbp-700h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference __in; // [rsp+38h] [rbp-6F8h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+40h] [rbp-6F0h]
  std::vector<std::string> *__for_range_0; // [rsp+50h] [rbp-6E0h]
  std::string *file_path; // [rsp+58h] [rbp-6D8h]
  SceneJsonConfig *scene_json_config_0; // [rsp+60h] [rbp-6D0h]
  std::vector<data::ConfigPointArray> *__for_range_2; // [rsp+68h] [rbp-6C8h]
  __gnu_cxx::__normal_iterator<data::ConfigPointArray*,std::vector<data::ConfigPointArray> >::reference config_point_array; // [rsp+70h] [rbp-6C0h]
  std::vector<data::ConfigPoint> *__for_range_3; // [rsp+78h] [rbp-6B8h]
  __gnu_cxx::__normal_iterator<data::ConfigPoint*,std::vector<data::ConfigPoint> >::reference config_point; // [rsp+80h] [rbp-6B0h]
  SceneJsonConfig *scene_json_config; // [rsp+88h] [rbp-6A8h]
  std::vector<data::ConfigRoute> *__for_range_1; // [rsp+90h] [rbp-6A0h]
  __gnu_cxx::__normal_iterator<data::ConfigRoute*,std::vector<data::ConfigRoute> >::reference config_route; // [rsp+98h] [rbp-698h]
  char v94[1680]; // [rsp+A0h] [rbp-690h] BYREF

  v3 = (unsigned __int64)v94;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1632LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "32 32 1 9 <unknown> 48 4 7 ret:479 64 4 18 point_array_id:523 80 8 15 __for_begin:470 112 8 13 _"
                        "_for_end:470 144 8 15 __for_begin:485 176 8 13 __for_end:485 208 8 15 __for_begin:503 240 8 13 _"
                        "_for_end:503 272 8 15 __for_begin:521 304 8 13 __for_end:521 336 8 15 __for_begin:526 368 8 13 _"
                        "_for_end:526 400 8 9 <unknown> 432 24 12 file_vec:478 496 24 27 config_point_array_list:514 560 "
                        "24 20 config_point_vec:524 624 32 13 scene_dir:472 688 32 9 <unknown> 752 32 9 <unknown> 816 32 "
                        "9 <unknown> 880 32 9 <unknown> 944 32 9 <unknown> 1008 32 9 <unknown> 1072 32 9 <unknown> 1136 3"
                        "2 9 <unknown> 1200 32 9 <unknown> 1264 32 9 <unknown> 1328 32 9 <unknown> 1392 40 9 <unknown> 14"
                        "72 40 8 root:488 1552 40 15 level_route:496";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::loadSceneRoute;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = 62194;
  v5[536862727] = -234881024;
  v5[536862728] = 62194;
  v5[536862728] = -234881024;
  v5[536862729] = 62194;
  v5[536862729] = -234881024;
  v5[536862730] = 62194;
  v5[536862730] = -234881024;
  v5[536862731] = 62194;
  v5[536862731] = -234881024;
  v5[536862732] = 62194;
  v5[536862732] = -234881024;
  v5[536862733] = 62194;
  v5[536862734] = -218959360;
  v5[536862735] = 62194;
  v5[536862736] = -218959360;
  v5[536862737] = 62194;
  v5[536862738] = -218959360;
  v5[536862739] = 62194;
  v5[536862740] = -219021312;
  v5[536862741] = 62194;
  v5[536862742] = -219021312;
  v5[536862743] = 62194;
  v5[536862744] = -219021312;
  v5[536862745] = 62194;
  v5[536862746] = -219021312;
  v5[536862747] = 62194;
  v5[536862748] = -219021312;
  v5[536862749] = 62194;
  v5[536862750] = -219021312;
  v5[536862751] = 62194;
  v5[536862752] = -219021312;
  v5[536862753] = 62194;
  v5[536862754] = -219021312;
  v5[536862755] = 62194;
  v5[536862756] = -219021312;
  v5[536862757] = 62194;
  v5[536862758] = -219021312;
  v5[536862759] = 62194;
  v5[536862760] = -219021312;
  v5[536862761] = 62194;
  v5[536862762] = -219021312;
  v5[536862763] = 62194;
  v5[536862764] = -234881024;
  v5[536862765] = -218959118;
  v5[536862767] = -218959360;
  v5[536862768] = 62194;
  v5[536862769] = -218103808;
  v5[536862770] = -202116109;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 112, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 112) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 80),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 112)) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 80));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(__in);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(__in);
    *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v6 = *scene_id;
    if ( *(char *)(((v3 + 688) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) )
    {
      v6 = 32;
      __asan_report_store_n(v3 + 688, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v3 + 688), v6);
    v7 = (__int64)config;
    if ( *(char *)(((v3 + 624) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) )
    {
      v7 = 32LL;
      __asan_report_store_n(v3 + 624, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 624), (const std::string *)v7, (std::string *)(v3 + 688));
    std::string::~string((void *)(v3 + 688));
    *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = -117901064;
    v8 = ((v3 + 1392) >> 3) + 2147450880;
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 0;
    std::filesystem::__cxx11::path::path<std::string,std::filesystem::__cxx11::path>(
      (std::filesystem::__cxx11::path *const)(v3 + 1392),
      (const std::string *)(v3 + 624),
      auto_format);
    v9 = !std::filesystem::is_directory((const std::filesystem::__cxx11::path *)(v3 + 1392));
    std::filesystem::__cxx11::path::~path((std::filesystem::__cxx11::path *const)(v3 + 1392));
    v10 = ((v3 + 1392) >> 3) + 2147450880;
    *(_DWORD *)v10 = -117901064;
    *(_BYTE *)(v10 + 4) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 752) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 752, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 752),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "loadSceneRoute",
        475);
      v11 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              (common::milog::MiLogStream *const)(v3 + 752),
              (const char (*)[39])byte_1A517820);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v3 + 624));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 752));
      *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = -117901064;
      v12 = 0;
      goto LABEL_112;
    }
    v13 = ((v3 + 432) >> 3) + 2147450880;
    *(_WORD *)v13 = 0;
    *(_BYTE *)(v13 + 2) = 0;
    std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 432));
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
    *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v3 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v3 + 816),
      ".json",
      (const std::allocator<char> *)(v3 + 32));
    v16 = (char *)(v3 + 816);
    AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                              (const std::string *)(v3 + 624),
                              (const std::string *)(v3 + 816),
                              (std::vector<std::string> *)(v3 + 432));
    v15 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
    LOBYTE(v16) = v15 != 0;
    if ( v15 != 0 && v15 <= 3 )
      __asan_report_store4(v3 + 48, v16);
    *(_DWORD *)(v3 + 48) = AllFilesWithExtension;
    std::string::~string((void *)(v3 + 816));
    *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v3 + 32);
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 48);
    if ( *(_DWORD *)(v3 + 48) )
    {
      *(_DWORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 880) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 911) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 911) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 880, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 880),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadSceneRoute",
        482);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 880),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v17, (const char (*)[42])byte_1A5178C0);
      v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)(v3 + 624));
      v20 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v19, (const char (*)[7])" ret: ");
      common::milog::MiLogStream::operator<<<int,(int *)0>(v20, (const int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 880));
      *(_DWORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v21 = 0;
      goto LABEL_109;
    }
    __for_range_0 = (std::vector<std::string> *)(v3 + 432);
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 144, v16);
    *(std::vector<std::string>::iterator *)(v3 + 144) = std::vector<std::string>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 176, v16);
    *(std::vector<std::string>::iterator *)(v3 + 176) = std::vector<std::string>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 144),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 176)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 144));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v22 = ((v3 + 1472) >> 3) + 2147450880;
      *(_DWORD *)v22 = 0;
      *(_BYTE *)(v22 + 4) = 0;
      Json::Value::Value(v3 + 1472, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v3 + 1472)) )
      {
        *(_DWORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 944) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 975) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 975) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 944, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 944),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadSceneRoute",
          491);
        v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 944),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v24 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                v23,
                (const char (*)[31])"parseJsonFile fails, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, scene_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 944));
        *(_DWORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v25 = 0;
      }
      else
      {
        if ( std::string::find(file_path, "routes", 0LL) == -1 )
        {
          if ( std::string::find(file_path, "point_array", 0LL) != -1 )
          {
            v38 = ((v3 + 496) >> 3) + 2147450880;
            *(_WORD *)v38 = 0;
            *(_BYTE *)(v38 + 2) = 0;
            std::vector<data::ConfigPointArray>::vector((std::vector<data::ConfigPointArray> *const)(v3 + 496));
            if ( !data::vecFromJson((const Json::Value *)(v3 + 1472), (data::ConfigPointArrayList *)(v3 + 496)) )
            {
              *(_DWORD *)(((v3 + 1136) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1136) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1167) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 1167) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1136, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1136),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadSceneRoute",
                517);
              v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1136),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v40 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      v39,
                      (const char (*)[47])"ConfigPointArrayList fromJson fails, scene_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, scene_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1136));
              *(_DWORD *)(((v3 + 1136) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v41 = 0;
            }
            else
            {
              scene_json_config_0 = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                      &this->scene_json_config_map_,
                                      scene_id);
              __for_range_2 = (std::vector<data::ConfigPointArray> *)(v3 + 496);
              *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 272, scene_id);
              *(std::vector<data::ConfigPointArray>::iterator *)(v3 + 272) = std::vector<data::ConfigPointArray>::begin(__for_range_2);
              *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 304, scene_id);
              *(std::vector<data::ConfigPointArray>::iterator *)(v3 + 304) = std::vector<data::ConfigPointArray>::end(__for_range_2);
              while ( 1 )
              {
                v42 = (char *)(v3 + 304);
                if ( !__gnu_cxx::operator!=<data::ConfigPointArray *,std::vector<data::ConfigPointArray>>(
                        (const __gnu_cxx::__normal_iterator<data::ConfigPointArray*,std::vector<data::ConfigPointArray> > *)(v3 + 272),
                        (const __gnu_cxx::__normal_iterator<data::ConfigPointArray*,std::vector<data::ConfigPointArray> > *)(v3 + 304)) )
                  break;
                config_point_array = __gnu_cxx::__normal_iterator<data::ConfigPointArray *,std::vector<data::ConfigPointArray>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigPointArray*,std::vector<data::ConfigPointArray> > *const)(v3 + 272));
                *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
                if ( *(_BYTE *)(((unsigned __int64)config_point_array >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)config_point_array >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(config_point_array);
                }
                point_array_id = config_point_array->point_array_id;
                v44 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
                if ( v44 != 0 && v44 <= 3 )
                {
                  LOBYTE(v42) = v44 != 0;
                  __asan_report_store4(v3 + 64, v42);
                }
                *(_DWORD *)(v3 + 64) = point_array_id;
                v45 = ((v3 + 560) >> 3) + 2147450880;
                *(_WORD *)v45 = 0;
                *(_BYTE *)(v45 + 2) = 0;
                std::vector<data::ConfigPoint>::vector((std::vector<data::ConfigPoint> *const)(v3 + 560));
                p_platform_point_list = &config_point_array->platform_point_list;
                std::vector<data::ConfigPoint>::swap(
                  (std::vector<data::ConfigPoint> *const)(v3 + 560),
                  &config_point_array->platform_point_list);
                __for_range_3 = (std::vector<data::ConfigPoint> *)(v3 + 560);
                *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 336, p_platform_point_list);
                *(std::vector<data::ConfigPoint>::iterator *)(v3 + 336) = std::vector<data::ConfigPoint>::begin(__for_range_3);
                *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 368, p_platform_point_list);
                *(std::vector<data::ConfigPoint>::iterator *)(v3 + 368) = std::vector<data::ConfigPoint>::end(__for_range_3);
                while ( 1 )
                {
                  if ( !__gnu_cxx::operator!=<data::ConfigPoint *,std::vector<data::ConfigPoint>>(
                          (const __gnu_cxx::__normal_iterator<data::ConfigPoint*,std::vector<data::ConfigPoint> > *)(v3 + 336),
                          (const __gnu_cxx::__normal_iterator<data::ConfigPoint*,std::vector<data::ConfigPoint> > *)(v3 + 368)) )
                  {
                    v55 = 1;
                    goto LABEL_85;
                  }
                  config_point = __gnu_cxx::__normal_iterator<data::ConfigPoint *,std::vector<data::ConfigPoint>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigPoint*,std::vector<data::ConfigPoint> > *const)(v3 + 336));
                  v48 = std::unordered_map<unsigned int,data::ConfigPoint>::emplace<unsigned int const&,data::ConfigPoint const&>(
                          &config_point_array->config_point_map,
                          &config_point->point_id,
                          config_point,
                          (const unsigned int *)&config_point_array->config_point_map,
                          v47);
                  if ( !v48.second )
                    break;
                  __gnu_cxx::__normal_iterator<data::ConfigPoint *,std::vector<data::ConfigPoint>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigPoint*,std::vector<data::ConfigPoint> > *const)(v3 + 336));
                }
                *(_DWORD *)(((v3 + 1200) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1200) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1231) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 1231) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1200, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1200),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadSceneRoute",
                  530);
                v49 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1200),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v50 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                        v49,
                        (const char (*)[20])"duplicate point_id:");
                v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v50,
                        &config_point->point_id);
                v52 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                        v51,
                        (const char (*)[20])" in point_array_id:");
                v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v52,
                        (const unsigned int *)(v3 + 64));
                v54 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v53,
                        (const char (*)[11])" scene_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v54, scene_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1200));
                *(_DWORD *)(((v3 + 1200) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v55 = 0;
LABEL_85:
                *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) = -8;
                if ( v55 == 1 )
                {
                  *(_DWORD *)(((v3 + 1264) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 1264) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 1295) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 1295) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 1264, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 1264),
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/json_config_mgr.cpp",
                    "loadSceneRoute",
                    534);
                  v57 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                          (common::milog::MiLogStream *const)(v3 + 1264),
                          (const char (*)[18])"load point_array:");
                  v58 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v57,
                          (const unsigned int *)(v3 + 64));
                  v59 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                          v58,
                          (const char (*)[11])" scene_id:");
                  v60 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v59, scene_id);
                  v61 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v60, (const char (*)[7])" size:");
                  *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
                  v62 = std::unordered_map<unsigned int,data::ConfigPoint>::size(&config_point_array->config_point_map);
                  if ( *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) )
                    v62 = __asan_report_store8(v3 + 400, " size:");
                  *(_QWORD *)(v3 + 400) = v62;
                  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v61,
                    (const unsigned __int64 *)(v3 + 400));
                  *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) = -8;
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1264));
                  *(_DWORD *)(((v3 + 1264) >> 3) + 0x7FFF8000) = -117901064;
                  v63 = std::move<data::ConfigPointArray &>(config_point_array);
                  v66 = std::unordered_map<unsigned int,data::ConfigPointArray>::emplace<unsigned int &,data::ConfigPointArray>(
                          &scene_json_config_0->point_array_map,
                          (unsigned int *)(v3 + 64),
                          v63,
                          v64,
                          v65);
                  if ( !v66.second )
                  {
                    *(_DWORD *)(((v3 + 1328) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 1328) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 1359) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 1359) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 1328, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 1328),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadSceneRoute",
                      537);
                    v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v3 + 1328),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v68 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                            v67,
                            (const char (*)[26])"duplicate point_array_id:");
                    v69 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                            v68,
                            (const unsigned int *)(v3 + 64));
                    v70 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                            v69,
                            (const char (*)[11])" scene_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v70, scene_id);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1328));
                    *(_DWORD *)(((v3 + 1328) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v56 = 0;
                  }
                  else
                  {
                    v56 = 1;
                  }
                }
                else
                {
                  v56 = 0;
                }
                std::vector<data::ConfigPoint>::~vector((std::vector<data::ConfigPoint> *const)(v3 + 560));
                *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
                v71 = ((v3 + 560) >> 3) + 2147450880;
                *(_WORD *)v71 = -1800;
                *(_BYTE *)(v71 + 2) = -8;
                if ( v56 != 1 )
                {
                  v72 = 0;
                  goto LABEL_100;
                }
                __gnu_cxx::__normal_iterator<data::ConfigPointArray *,std::vector<data::ConfigPointArray>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigPointArray*,std::vector<data::ConfigPointArray> > *const)(v3 + 272));
              }
              v72 = 1;
LABEL_100:
              *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = -8;
              v41 = v72 == 1;
            }
            std::vector<data::ConfigPointArray>::~vector((std::vector<data::ConfigPointArray> *const)(v3 + 496));
            v73 = ((v3 + 496) >> 3) + 2147450880;
            *(_WORD *)v73 = -1800;
            *(_BYTE *)(v73 + 2) = -8;
            if ( !v41 )
            {
              v25 = 0;
              goto LABEL_104;
            }
          }
        }
        else
        {
          v26 = ((v3 + 1552) >> 3) + 2147450880;
          *(_DWORD *)v26 = 0;
          *(_BYTE *)(v26 + 4) = 0;
          data::ConfigLevelRoute::ConfigLevelRoute((data::ConfigLevelRoute *const)(v3 + 1552));
          if ( !data::ConfigLevelRoute::fromJson(
                  (data::ConfigLevelRoute *const)(v3 + 1552),
                  (const Json::Value *)(v3 + 1472)) )
          {
            *(_DWORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1008) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1039) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 1039) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1008, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1008),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadSceneRoute",
              499);
            v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1008),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v28 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    v27,
                    (const char (*)[26])"fromJson fails, scene_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, scene_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1008));
            *(_DWORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v29 = 0;
          }
          else
          {
            scene_json_config = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                  &this->scene_json_config_map_,
                                  scene_id);
            __for_range_1 = (std::vector<data::ConfigRoute> *)(v3 + 1560);
            *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 208, scene_id);
            *(std::vector<data::ConfigRoute>::iterator *)(v3 + 208) = std::vector<data::ConfigRoute>::begin(__for_range_1);
            *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 240, scene_id);
            *(std::vector<data::ConfigRoute>::iterator *)(v3 + 240) = std::vector<data::ConfigRoute>::end(__for_range_1);
            while ( 1 )
            {
              if ( !__gnu_cxx::operator!=<data::ConfigRoute *,std::vector<data::ConfigRoute>>(
                      (const __gnu_cxx::__normal_iterator<data::ConfigRoute*,std::vector<data::ConfigRoute> > *)(v3 + 208),
                      (const __gnu_cxx::__normal_iterator<data::ConfigRoute*,std::vector<data::ConfigRoute> > *)(v3 + 240)) )
              {
                v36 = 1;
                goto LABEL_55;
              }
              config_route = __gnu_cxx::__normal_iterator<data::ConfigRoute *,std::vector<data::ConfigRoute>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigRoute*,std::vector<data::ConfigRoute> > *const)(v3 + 208));
              v31 = std::unordered_map<unsigned int,data::ConfigRoute>::emplace<unsigned int &,data::ConfigRoute&>(
                      &scene_json_config->route_map,
                      &config_route->local_id,
                      config_route,
                      (unsigned int *)&scene_json_config->route_map,
                      v30);
              if ( !v31.second )
                break;
              __gnu_cxx::__normal_iterator<data::ConfigRoute *,std::vector<data::ConfigRoute>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigRoute*,std::vector<data::ConfigRoute> > *const)(v3 + 208));
            }
            *(_DWORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1072) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1103) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 1103) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1072, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1072),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadSceneRoute",
              507);
            v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1072),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v33 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v32,
                    (const char (*)[20])"duplicate route_id:");
            v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, &config_route->local_id);
            v35 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v34,
                    (const char (*)[12])", scene_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, scene_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1072));
            *(_DWORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v36 = 0;
LABEL_55:
            *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = -8;
            v29 = v36 == 1;
          }
          data::ConfigLevelRoute::~ConfigLevelRoute((data::ConfigLevelRoute *const)(v3 + 1552));
          v37 = ((v3 + 1552) >> 3) + 2147450880;
          *(_DWORD *)v37 = -117901064;
          *(_BYTE *)(v37 + 4) = -8;
          if ( !v29 )
          {
            v25 = 0;
            goto LABEL_104;
          }
        }
        v25 = 1;
      }
LABEL_104:
      Json::Value::~Value((Json::Value_0 *const)(v3 + 1472));
      v74 = ((v3 + 1472) >> 3) + 2147450880;
      *(_DWORD *)v74 = -117901064;
      *(_BYTE *)(v74 + 4) = -8;
      if ( v25 != 1 )
      {
        v75 = 0;
        goto LABEL_108;
      }
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 144));
    }
    v75 = 1;
LABEL_108:
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
    v21 = v75 == 1;
LABEL_109:
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 432));
    if ( v21 )
      v12 = 2;
    else
      v12 = 1;
LABEL_112:
    std::string::~string((void *)(v3 + 624));
    if ( v12 )
    {
      if ( v12 == 2 )
        v76 = 2;
      else
        v76 = 1;
    }
    else
    {
      v76 = 0;
    }
    *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = -117901064;
    v77 = ((v3 + 432) >> 3) + 2147450880;
    *(_WORD *)v77 = -1800;
    *(_BYTE *)(v77 + 2) = -8;
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v76 && v76 != 2 )
    {
      v78 = 0;
      goto LABEL_122;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 80));
  }
  v78 = 1;
LABEL_122:
  if ( v78 == 1 )
    v2 = 0;
  if ( v94 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80C4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 204) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1632LL, v94);
  }
  return v2;
};

// Line 549: range 000000000F249068-000000000F24AB86
int32_t __cdecl JsonConfigMgr::loadSceneEnvironmentZone(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int v5; // esi
  __int64 v6; // rsi
  unsigned int v7; // esi
  int v8; // r14d
  unsigned __int64 v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  _BOOL4 v12; // r14d
  unsigned __int64 v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  int v16; // r14d
  char *v17; // rsi
  uint32_t area_id; // ecx
  char v19; // al
  uint32_t v20; // edx
  char v21; // cl
  unsigned __int64 v22; // rax
  data::ConfigEnvironmentZone *v23; // rax
  float x; // xmm1_4
  double v25; // xmm0_8
  float y; // xmm1_4
  double v27; // xmm0_8
  float v28; // xmm1_4
  float v29; // xmm0_4
  float v30; // xmm1_4
  float v31; // xmm0_4
  __int64 v32; // rsi
  __gnu_cxx::__normal_iterator<data::EnvZoneEventType*,std::vector<data::EnvZoneEventType> >::reference v33; // rax
  data::EnvZoneEventType *v34; // rdx
  std::vector<ConfigRectZone> *v35; // r14
  ConfigRectZone *v36; // rax
  ConfigRectZone *v37; // rdx
  unsigned __int64 v38; // rax
  int v39; // r14d
  int v40; // r14d
  int v41; // eax
  unsigned __int64 v42; // rdx
  unsigned __int64 v43; // rdx
  int v44; // eax
  int32_t v46; // [rsp+Ch] [rbp-584h]
  uint32_t index; // [rsp+28h] [rbp-568h]
  data::EnvZoneEventType zone_type; // [rsp+2Ch] [rbp-564h]
  size_t idx; // [rsp+30h] [rbp-560h]
  data::SceneExcelConfigMap *__for_range; // [rsp+38h] [rbp-558h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v52; // [rsp+40h] [rbp-550h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+48h] [rbp-548h]
  SceneJsonConfig *scene_json_config; // [rsp+58h] [rbp-538h]
  std::vector<data::ConfigEnvironmentZone> *__for_range_0; // [rsp+60h] [rbp-530h]
  __gnu_cxx::__normal_iterator<data::ConfigEnvironmentZone*,std::vector<data::ConfigEnvironmentZone> >::reference env_zone_config; // [rsp+68h] [rbp-528h]
  std::vector<data::EnvZoneEventType> *__for_range_1; // [rsp+70h] [rbp-520h]
  std::vector<data::Point2D>::reference point; // [rsp+78h] [rbp-518h]
  char v59[1296]; // [rsp+80h] [rbp-510h] BYREF

  v2 = (unsigned __int64)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 32 4 11 area_id:577 48 8 15 __for_begin:550 80 8 13 __for_end:550 112 8 15 __for_begin:575 14"
                        "4 8 13 __for_end:575 176 8 15 __for_begin:601 208 8 13 __for_end:601 240 24 17 env_zone_list:566"
                        " 304 32 13 scene_dir:552 368 32 9 <unknown> 432 32 9 <unknown> 496 32 17 env_json_name:553 560 3"
                        "2 9 <unknown> 624 32 9 <unknown> 688 32 17 env_json_path:554 752 32 9 <unknown> 816 32 9 <unknow"
                        "n> 880 40 8 root:559 960 216 13 rect_zone:580";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadSceneEnvironmentZone;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862728] = -218959360;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862736] = -219021312;
  v4[536862737] = 62194;
  v4[536862738] = -219021312;
  v4[536862739] = 62194;
  v4[536862740] = -219021312;
  v4[536862741] = 62194;
  v4[536862742] = -219021312;
  v4[536862743] = 62194;
  v4[536862744] = -219021312;
  v4[536862745] = 62194;
  v4[536862746] = -219021312;
  v4[536862747] = 62194;
  v4[536862748] = -234881024;
  v4[536862749] = -218959118;
  v4[536862756] = -218103808;
  v4[536862757] = -202116109;
  v4[536862758] = -202116109;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 80)) )
  {
    v52 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v52);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(v52);
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v5 = *scene_id;
    if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
    {
      v5 = 32;
      __asan_report_store_n(v2 + 368, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 368), v5);
    v6 = (__int64)config;
    if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
    {
      v6 = 32LL;
      __asan_report_store_n(v2 + 432, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 432), (const std::string *)v6, (std::string *)(v2 + 368));
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 111) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 304, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 304), (std::string *)(v2 + 432), "/");
    std::string::~string((void *)(v2 + 432));
    *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v7 = *scene_id;
    if ( *(char *)(((v2 + 560) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 111) & 7) >= *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) )
    {
      v7 = 32;
      __asan_report_store_n(v2 + 560, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 560), v7);
    if ( *(char *)(((v2 + 624) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 624, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 624), "scene", (std::string *)(v2 + 560));
    if ( *(char *)(((v2 + 496) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 47) & 7) >= *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 496, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 496), (std::string *)(v2 + 624), "_environment.json");
    std::string::~string((void *)(v2 + 624));
    *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 560));
    *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 688) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 688, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 688), (const std::string *)(v2 + 304), (const std::string *)(v2 + 496));
    if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 688)) )
    {
      v8 = 0;
    }
    else
    {
      v9 = ((v2 + 880) >> 3) + 2147450880;
      *(_DWORD *)v9 = 0;
      *(_BYTE *)(v9 + 4) = 0;
      Json::Value::Value(v2 + 880, 0LL);
      if ( !parseJsonFile((const std::string *)(v2 + 688), (Json::Value *)(v2 + 880)) )
      {
        *(_DWORD *)(((v2 + 752) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 752) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 783) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 47) & 7) >= *(_BYTE *)(((v2 + 783) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 752, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 752),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadSceneEnvironmentZone",
          562);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 752),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v11 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                v10,
                (const char (*)[31])"parseJsonFile fails, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, scene_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 752));
        *(_DWORD *)(((v2 + 752) >> 3) + 0x7FFF8000) = -117901064;
        v46 = -1;
        v12 = 0;
      }
      else
      {
        v13 = ((v2 + 240) >> 3) + 2147450880;
        *(_WORD *)v13 = 0;
        *(_BYTE *)(v13 + 2) = 0;
        std::vector<data::ConfigEnvironmentZone>::vector((std::vector<data::ConfigEnvironmentZone> *const)(v2 + 240));
        if ( !data::vecFromJson((const Json::Value *)(v2 + 880), (data::ConfigEnvironmentZoneList *)(v2 + 240)) )
        {
          *(_DWORD *)(((v2 + 816) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 816) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 847) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 111) & 7) >= *(_BYTE *)(((v2 + 847) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 816, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 816),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadSceneEnvironmentZone",
            569);
          v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 816),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v15 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  v14,
                  (const char (*)[29])"mapFromJson fails, scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, scene_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 816));
          *(_DWORD *)(((v2 + 816) >> 3) + 0x7FFF8000) = -117901064;
          v46 = -1;
          v16 = 0;
        }
        else
        {
          scene_json_config = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                &this->scene_json_config_map_,
                                scene_id);
          index = 0;
          __for_range_0 = (std::vector<data::ConfigEnvironmentZone> *)(v2 + 240);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 112, scene_id);
          *(std::vector<data::ConfigEnvironmentZone>::iterator *)(v2 + 112) = std::vector<data::ConfigEnvironmentZone>::begin(__for_range_0);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 144, scene_id);
          *(std::vector<data::ConfigEnvironmentZone>::iterator *)(v2 + 144) = std::vector<data::ConfigEnvironmentZone>::end(__for_range_0);
          while ( 1 )
          {
            v17 = (char *)(v2 + 144);
            if ( !__gnu_cxx::operator!=<data::ConfigEnvironmentZone *,std::vector<data::ConfigEnvironmentZone>>(
                    (const __gnu_cxx::__normal_iterator<data::ConfigEnvironmentZone*,std::vector<data::ConfigEnvironmentZone> > *)(v2 + 112),
                    (const __gnu_cxx::__normal_iterator<data::ConfigEnvironmentZone*,std::vector<data::ConfigEnvironmentZone> > *)(v2 + 144)) )
              break;
            env_zone_config = __gnu_cxx::__normal_iterator<data::ConfigEnvironmentZone *,std::vector<data::ConfigEnvironmentZone>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEnvironmentZone*,std::vector<data::ConfigEnvironmentZone> > *const)(v2 + 112));
            *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)env_zone_config >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)env_zone_config >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(env_zone_config);
            }
            area_id = env_zone_config->area_id;
            v19 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
            if ( v19 != 0 && v19 <= 3 )
            {
              LOBYTE(v17) = v19 != 0;
              __asan_report_store4(v2 + 32, v17);
            }
            *(_DWORD *)(v2 + 32) = area_id;
            v20 = index++;
            v21 = *(_BYTE *)(((unsigned __int64)&env_zone_config->index >> 3) + 0x7FFF8000);
            if ( v21 != 0 && (char)((((_BYTE)env_zone_config + 52) & 7) + 3) >= v21 )
            {
              LOBYTE(v17) = v21 != 0;
              __asan_report_store4(&env_zone_config->index, v17);
            }
            env_zone_config->index = v20;
            v22 = ((v2 + 960) >> 3) + 2147450880;
            *(_DWORD *)v22 = 0;
            *(_DWORD *)(v22 + 4) = 0;
            *(_DWORD *)(v22 + 8) = 0;
            *(_DWORD *)(v22 + 12) = 0;
            *(_DWORD *)(v22 + 16) = 0;
            *(_DWORD *)(v22 + 20) = 0;
            *(_WORD *)(v22 + 24) = 0;
            *(_BYTE *)(v22 + 26) = 0;
            ConfigRectZone::ConfigRectZone((ConfigRectZone *const)(v2 + 960));
            v23 = std::move<data::ConfigEnvironmentZone &>(env_zone_config);
            data::ConfigEnvironmentZone::operator=((data::ConfigEnvironmentZone *const)(v2 + 960), v23);
            for ( idx = 0LL;
                  idx < std::vector<data::Point2D>::size((const std::vector<data::Point2D> *const)(v2 + 968));
                  ++idx )
            {
              point = std::vector<data::Point2D>::operator[]((std::vector<data::Point2D> *const)(v2 + 968), idx);
              if ( idx )
              {
                if ( *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)point & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(point);
                }
                x = point->x;
                if ( *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(v2 + 1152);
                }
                if ( *(float *)(v2 + 1152) <= x )
                {
                  if ( *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)point & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(point);
                  }
                  *(float *)&v25 = point->x;
                  if ( *(_BYTE *)(((v2 + 1164) >> 3) + 0x7FFF8000) != 0
                    && (char)(((v2 - 116) & 7) + 3) >= *(_BYTE *)(((v2 + 1164) >> 3) + 0x7FFF8000) )
                  {
                    v25 = __asan_report_load4(v2 + 1164);
                  }
                  if ( *(float *)&v25 > *(float *)(v2 + 1164) )
                    *(float *)(v2 + 1164) = point->x;
                }
                else
                {
                  *(float *)(v2 + 1152) = point->x;
                }
                if ( *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)point + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(&point->y);
                }
                y = point->y;
                if ( *(_BYTE *)(((v2 + 1156) >> 3) + 0x7FFF8000) != 0
                  && (char)(((v2 - 124) & 7) + 3) >= *(_BYTE *)(((v2 + 1156) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v2 + 1156);
                }
                if ( *(float *)(v2 + 1156) <= y )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)point + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point->y >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(&point->y);
                  }
                  *(float *)&v27 = point->y;
                  if ( *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) <= 3 )
                  {
                    v27 = __asan_report_load4(v2 + 1168);
                  }
                  if ( *(float *)&v27 > *(float *)(v2 + 1168) )
                    *(float *)(v2 + 1168) = point->y;
                }
                else
                {
                  *(float *)(v2 + 1156) = point->y;
                }
              }
              else
              {
                if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1163) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 117) & 7) >= *(_BYTE *)(((v2 + 1163) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1152, 12LL);
                }
                if ( ((unsigned __int8)point & 7) >= *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000)
                  && *(_BYTE *)(((unsigned __int64)point >> 3) + 0x7FFF8000) != 0
                  || *(_BYTE *)(((unsigned __int64)(&point->is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)point + 11) & 7) >= *(_BYTE *)(((unsigned __int64)(&point->is_json_loaded + 3) >> 3)
                                                                     + 0x7FFF8000) )
                {
                  __asan_report_load_n(point, 12LL);
                }
                *(_QWORD *)(v2 + 1152) = *(_QWORD *)&point->x;
                *(_DWORD *)(v2 + 1160) = *(_DWORD *)&point->is_json_loaded;
                if ( (char)((v2 - 116) & 7) >= *(_BYTE *)(((v2 + 1164) >> 3) + 0x7FFF8000)
                  && *(_BYTE *)(((v2 + 1164) >> 3) + 0x7FFF8000) != 0
                  || *(_BYTE *)(((v2 + 1175) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 105) & 7) >= *(_BYTE *)(((v2 + 1175) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1164, 12LL);
                }
                *(_QWORD *)(v2 + 1164) = *(_QWORD *)&point->x;
                *(_DWORD *)(v2 + 1172) = *(_DWORD *)&point->is_json_loaded;
              }
            }
            if ( *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v2 + 1152);
            v28 = *(float *)(v2 + 1152);
            if ( *(_BYTE *)(((v2 + 1164) >> 3) + 0x7FFF8000) != 0
              && (char)(((v2 - 116) & 7) + 3) >= *(_BYTE *)(((v2 + 1164) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v2 + 1164);
            }
            v29 = (float)(*(float *)(v2 + 1164) + v28) / 2.0;
            if ( *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v2 + 1072, (((_BYTE)v2 - 116) & 7u) + 3);
            *(float *)(v2 + 1072) = v29;
            if ( *(_BYTE *)(((v2 + 1156) >> 3) + 0x7FFF8000) != 0
              && (char)(((v2 - 124) & 7) + 3) >= *(_BYTE *)(((v2 + 1156) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v2 + 1156);
            }
            v30 = *(float *)(v2 + 1156);
            if ( *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v2 + 1168);
            v31 = (float)(*(float *)(v2 + 1168) + v30) / 2.0;
            v32 = (((_BYTE)v2 - 64 + 116) & 7u) + 3;
            if ( *(_BYTE *)(((v2 + 1076) >> 3) + 0x7FFF8000) != 0
              && (char)(((v2 - 64 + 116) & 7) + 3) >= *(_BYTE *)(((v2 + 1076) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v2 + 1076, v32);
            }
            *(float *)(v2 + 1076) = v31;
            __for_range_1 = (std::vector<data::EnvZoneEventType> *)(v2 + 1016);
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 176, v32);
            *(std::vector<data::EnvZoneEventType>::iterator *)(v2 + 176) = std::vector<data::EnvZoneEventType>::begin(__for_range_1);
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 208, v32);
            *(std::vector<data::EnvZoneEventType>::iterator *)(v2 + 208) = std::vector<data::EnvZoneEventType>::end(__for_range_1);
            while ( __gnu_cxx::operator!=<data::EnvZoneEventType *,std::vector<data::EnvZoneEventType>>(
                      (const __gnu_cxx::__normal_iterator<data::EnvZoneEventType*,std::vector<data::EnvZoneEventType> > *)(v2 + 176),
                      (const __gnu_cxx::__normal_iterator<data::EnvZoneEventType*,std::vector<data::EnvZoneEventType> > *)(v2 + 208)) )
            {
              v33 = __gnu_cxx::__normal_iterator<data::EnvZoneEventType *,std::vector<data::EnvZoneEventType>>::operator*((const __gnu_cxx::__normal_iterator<data::EnvZoneEventType*,std::vector<data::EnvZoneEventType> > *const)(v2 + 176));
              v34 = v33;
              if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v33);
              }
              zone_type = *v34;
              if ( *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v2 + 1088);
              *(_DWORD *)(v2 + 1088) |= zone_type;
              __gnu_cxx::__normal_iterator<data::EnvZoneEventType *,std::vector<data::EnvZoneEventType>>::operator++((__gnu_cxx::__normal_iterator<data::EnvZoneEventType*,std::vector<data::EnvZoneEventType> > *const)(v2 + 176));
            }
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
            if ( *(_BYTE *)(((v2 + 1084) >> 3) + 0x7FFF8000) != 0
              && (char)(((v2 - 64 + 124) & 7) + 3) >= *(_BYTE *)(((v2 + 1084) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v2 + 1084);
            }
            if ( !*(_DWORD *)(v2 + 1084) )
              *(_DWORD *)(v2 + 1084) = 1;
            v35 = std::map<unsigned int,std::vector<ConfigRectZone>>::operator[](
                    &scene_json_config->rect_zone_list_map,
                    (const std::map<unsigned int,std::vector<ConfigRectZone>>::key_type *)(v2 + 32));
            v36 = std::move<ConfigRectZone &>((ConfigRectZone *)(v2 + 960));
            std::vector<ConfigRectZone>::emplace_back<ConfigRectZone>(v35, v36, v37);
            ConfigRectZone::~ConfigRectZone((ConfigRectZone *const)(v2 + 960));
            *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
            v38 = ((v2 + 960) >> 3) + 2147450880;
            *(_DWORD *)v38 = -117901064;
            *(_DWORD *)(v38 + 4) = -117901064;
            *(_DWORD *)(v38 + 8) = -117901064;
            *(_DWORD *)(v38 + 12) = -117901064;
            *(_DWORD *)(v38 + 16) = -117901064;
            *(_DWORD *)(v38 + 20) = -117901064;
            *(_WORD *)(v38 + 24) = -1800;
            *(_BYTE *)(v38 + 26) = -8;
            __gnu_cxx::__normal_iterator<data::ConfigEnvironmentZone *,std::vector<data::ConfigEnvironmentZone>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEnvironmentZone*,std::vector<data::ConfigEnvironmentZone> > *const)(v2 + 112));
          }
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
          v16 = 1;
        }
        std::vector<data::ConfigEnvironmentZone>::~vector((std::vector<data::ConfigEnvironmentZone> *const)(v2 + 240));
        v12 = v16 == 1;
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 880));
      if ( v12 )
        v8 = 2;
      else
        v8 = 1;
    }
    std::string::~string((void *)(v2 + 688));
    if ( v8 )
    {
      if ( v8 == 2 )
        v39 = 2;
      else
        v39 = 1;
    }
    else
    {
      v39 = 0;
    }
    std::string::~string((void *)(v2 + 496));
    if ( v39 )
    {
      if ( v39 == 2 )
        v40 = 2;
      else
        v40 = 1;
    }
    else
    {
      v40 = 0;
    }
    std::string::~string((void *)(v2 + 304));
    if ( v40 )
    {
      if ( v40 == 2 )
        v41 = 2;
      else
        v41 = 1;
    }
    else
    {
      v41 = 0;
    }
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = -117901064;
    v42 = ((v2 + 880) >> 3) + 2147450880;
    *(_DWORD *)v42 = -117901064;
    *(_BYTE *)(v42 + 4) = -8;
    v43 = ((v2 + 240) >> 3) + 2147450880;
    *(_WORD *)v43 = -1800;
    *(_BYTE *)(v43 + 2) = -8;
    if ( v41 && v41 != 2 )
    {
      v44 = 0;
      goto LABEL_138;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
  }
  v44 = 1;
LABEL_138:
  if ( v44 == 1 )
    v46 = 0;
  if ( v59 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 156) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, v59);
  }
  return v46;
};

// Line 620: range 000000000F24AB88-000000000F24AD3B
const SceneJsonConfig *__fastcall JsonConfigMgr::findSceneJsonConfig(const JsonConfigMgr *const this, __int64 scene_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  const std::unordered_map<unsigned int,SceneJsonConfig> *v6; // rax
  bool v7; // al
  const SceneJsonConfig *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 12 scene_id:619 64 8 6 it:621 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findSceneJsonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = scene_id;
  p_scene_json_config_map = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    p_scene_json_config_map = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(
                                                                                          v2 + 64,
                                                                                          scene_id);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                                     p_scene_json_config_map,
                                                                                     (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v2 + 48));
  v6 = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    v6 = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v6);
  v7 = std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 64))->second;
  else
    result = 0LL;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 629: range 000000000F24AD3C-000000000F24AF70
const JsonConfigMgr *__fastcall JsonConfigMgr::findScenePoint(
        const JsonConfigMgr *const this,
        const JsonConfigMgr *scene_id,
        uint32_t point_id,
        int a4)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>> *p_point_map; // rax
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>> *v8; // rax
  bool v9; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false>::pointer v10; // rax
  int v11; // edx
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-A8h]
  char v16[160]; // [rsp+30h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 12 point_id:628 64 8 6 it:633 96 8 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findScenePoint;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 48) = a4;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(scene_id, point_id);
  if ( !scene_json_config_ptr )
    goto LABEL_13;
  p_point_map = &scene_json_config_ptr->point_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    p_point_map = (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>> *)__asan_report_store8(v4 + 64, point_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::find(p_point_map, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::key_type *)(v4 + 48));
  v8 = &scene_json_config_ptr->point_map;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    v8 = (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>> *)__asan_report_store8(
                                                                                             v4 + 96,
                                                                                             v4 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(v8);
  v9 = std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v4 + 64));
    std::shared_ptr<data::ConfigScenePoint>::shared_ptr(
      (std::shared_ptr<data::ConfigScenePoint> *const)this,
      &v10->second);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
LABEL_13:
    std::shared_ptr<data::ConfigScenePoint>::shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)this, 0LL);
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 642: range 000000000F24AF72-000000000F24B4A9
__int64 __fastcall JsonConfigMgr::findScenePointEntityType(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t point_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  uint32_t v6; // edx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  data::EntityType type; // r14d
  GadgetExcelConfigMgr *p_gadget_config_mgr; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rdx
  uint32_t *p_gadget_id; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  __int64 result; // rax
  const data::GadgetExcelConfig *gadget_config_ptr; // [rsp+18h] [rbp-118h]
  char v20[272]; // [rsp+20h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 12 scene_id:641 48 4 12 point_id:641 64 16 25 scene_trans_point_ptr:643 96 32 9 <unknown>"
                        " 160 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findScenePointEntityType;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = scene_id;
  *(_DWORD *)(v3 + 48) = point_id;
  v6 = *(_DWORD *)(v3 + 32);
  if ( *(_WORD *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  JsonConfigMgr::findScenePoint<data::SceneTransPoint>((const JsonConfigMgr *const)(v3 + 64), (uint32_t)this, v6);
  if ( std::operator==<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v3 + 64), 0LL) )
  {
    if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "findScenePointEntityType",
      646);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           v7,
           (const char (*)[32])"findScenePoint fails, scene_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])", point_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -117901064;
    type = None_10;
  }
  else
  {
    p_gadget_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
    v13 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    p_gadget_id = &v13->gadget_id;
    if ( *(_BYTE *)(((unsigned __int64)p_gadget_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_gadget_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_gadget_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_gadget_id);
    }
    gadget_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(p_gadget_config_mgr, v13->gadget_id);
    if ( gadget_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)gadget_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4(&gadget_config_ptr->type);
      }
      type = gadget_config_ptr->type;
    }
    else
    {
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "findScenePointEntityType",
        653);
      v15 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              (common::milog::MiLogStream *const)(v3 + 160),
              (const char (*)[40])"findGadgetExcelConfig fails, gadget_id:");
      v16 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &v16->gadget_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = -117901064;
      type = None_10;
    }
  }
  std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v3 + 64));
  result = (unsigned int)type;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 661: range 000000000F24B4AA-000000000F24B7D9
__int64 __fastcall JsonConfigMgr::findScenePointType(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t point_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  uint32_t v6; // edx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  data::ScenePointType type; // r14d
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  __int64 result; // rax
  char v15[208]; // [rsp+10h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 12 scene_id:660 48 4 12 point_id:660 64 16 25 scene_trans_point_ptr:662 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findScenePointType;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 32) = scene_id;
  *(_DWORD *)(v3 + 48) = point_id;
  v6 = *(_DWORD *)(v3 + 32);
  if ( *(_WORD *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  JsonConfigMgr::findScenePoint<data::SceneTransPoint>((const JsonConfigMgr *const)(v3 + 64), (uint32_t)this, v6);
  if ( std::operator==<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v3 + 64), 0LL) )
  {
    if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "findScenePointType",
      665);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           v7,
           (const char (*)[32])"findScenePoint fails, scene_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])", point_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -117901064;
    type = NORMAL_0;
  }
  else
  {
    v12 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v12->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v12->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v12->type);
    }
    type = v12->type;
  }
  std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v3 + 64));
  result = (unsigned int)type;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 673: range 000000000F24B7DA-000000000F24B9E4
const data::ConfigRoute *__fastcall JsonConfigMgr::findSceneRouteConfig(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t route_id)
{
  data::ConfigRoute *p_second; // r14
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::unordered_map<unsigned int,data::ConfigRoute> *p_route_map; // rdx
  const std::unordered_map<unsigned int,data::ConfigRoute> *v8; // rdx
  bool v9; // al
  int v10; // eax
  const data::ConfigRoute *result; // rax
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+18h] [rbp-B8h]
  char v14[176]; // [rsp+20h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 12 route_id:672 64 8 6 it:677 96 8 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findSceneRouteConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 48) = route_id;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, scene_id);
  if ( !scene_json_config_ptr )
    goto LABEL_13;
  p_route_map = &scene_json_config_ptr->route_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, scene_id);
  *(std::unordered_map<unsigned int,data::ConfigRoute>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,data::ConfigRoute>::find(
                                                                                       p_route_map,
                                                                                       (const std::unordered_map<unsigned int,data::ConfigRoute>::key_type *)(v4 + 48));
  v8 = &scene_json_config_ptr->route_map;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<unsigned int,data::ConfigRoute>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,data::ConfigRoute>::end(v8);
  v9 = std::__detail::operator!=<std::pair<unsigned int const,data::ConfigRoute>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigRoute>,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigRoute>,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    p_second = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false> *const)(v4 + 64))->second;
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  if ( v10 == 1 )
LABEL_13:
    p_second = 0LL;
  result = p_second;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 686: range 000000000F24B9E6-000000000F24C39D
__int64 __fastcall JsonConfigMgr::findScenePointArray(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t point_array_id,
        const std::vector<unsigned int> *point_id_vec,
        std::vector<data::ConfigPoint> *config_point_vec,
        uint32_t group_id)
{
  unsigned int v6; // r14d
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  __int64 v10; // rsi
  common::milog::MiLogStream *v11; // rax
  const std::unordered_map<unsigned int,data::ConfigPointArray> *p_point_array_map; // rdx
  const std::unordered_map<unsigned int,data::ConfigPointArray> *v13; // rdx
  bool v14; // al
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::vector<unsigned int>::size_type v18; // rsi
  char *v19; // rsi
  unsigned int *v20; // rax
  int *v21; // rdx
  int v22; // ecx
  char v23; // al
  bool v24; // al
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  int v32; // edx
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPoint>,false,false>::pointer v33; // rax
  int v34; // eax
  __int64 result; // rax
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+38h] [rbp-228h]
  data::ConfigPointMap *config_point_map; // [rsp+40h] [rbp-220h]
  char v42[528]; // [rsp+50h] [rbp-210h] BYREF

  v7 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_3(480LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "13 32 4 12 point_id:701 48 4 12 scene_id:685 64 4 18 point_array_id:685 80 4 12 group_id:685 96 "
                        "8 20 point_array_iter:693 128 8 9 <unknown> 160 8 15 __for_begin:701 192 8 13 __for_end:701 224 "
                        "8 8 iter:703 256 8 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v7 + 16) = JsonConfigMgr::findScenePointArray;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556924;
  v9[536862722] = -234556924;
  v9[536862723] = -218959360;
  v9[536862724] = -218959360;
  v9[536862725] = -218959360;
  v9[536862726] = -218959360;
  v9[536862727] = -218959360;
  v9[536862728] = -218959360;
  v9[536862730] = -218959118;
  v9[536862732] = -218959118;
  v9[536862734] = -202116109;
  *(_DWORD *)(v7 + 48) = scene_id;
  *(_DWORD *)(v7 + 64) = point_array_id;
  *(_DWORD *)(v7 + 80) = group_id;
  v10 = *(unsigned int *)(v7 + 48);
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, v10);
  if ( scene_json_config_ptr )
  {
    p_point_array_map = &scene_json_config_ptr->point_array_map;
    if ( *(_BYTE *)(((v7 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v7 + 96, v10);
    *(std::unordered_map<unsigned int,data::ConfigPointArray>::const_iterator *)(v7 + 96) = std::unordered_map<unsigned int,data::ConfigPointArray>::find(
                                                                                              p_point_array_map,
                                                                                              (const std::unordered_map<unsigned int,data::ConfigPointArray>::key_type *)(v7 + 64));
    v13 = &scene_json_config_ptr->point_array_map;
    if ( *(_BYTE *)(((v7 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v7 + 128, v7 + 64);
    *(std::unordered_map<unsigned int,data::ConfigPointArray>::const_iterator *)(v7 + 128) = std::unordered_map<unsigned int,data::ConfigPointArray>::end(v13);
    v14 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigPointArray>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPointArray>,false> *)(v7 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPointArray>,false> *)(v7 + 128));
    *(_BYTE *)(((v7 + 128) >> 3) + 0x7FFF8000) = -8;
    if ( v14 )
    {
      *(_DWORD *)(((v7 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v7 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v7 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v7 + 127) & 7) >= *(_BYTE *)(((v7 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v7 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v7 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "findScenePointArray",
        696);
      v15 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              (common::milog::MiLogStream *const)(v7 + 352),
              (const char (*)[33])"find point array fail, scene_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v7 + 48));
      v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v16, (const char (*)[17])" point_array_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v7 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 352));
      v6 = -1;
    }
    else
    {
      config_point_map = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPointArray>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPointArray>,false,false> *const)(v7 + 96))->second.config_point_map;
      v18 = std::vector<unsigned int>::size(point_id_vec);
      std::vector<data::ConfigPoint>::reserve(config_point_vec, v18);
      *(_BYTE *)(((v7 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v7 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v7 + 160, v18);
      *(std::vector<unsigned int>::const_iterator *)(v7 + 160) = std::vector<unsigned int>::begin(point_id_vec);
      *(_BYTE *)(((v7 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v7 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v7 + 192, v18);
      *(std::vector<unsigned int>::const_iterator *)(v7 + 192) = std::vector<unsigned int>::end(point_id_vec);
      while ( 1 )
      {
        v19 = (char *)(v7 + 192);
        if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v7 + 160),
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v7 + 192)) )
          break;
        *(_BYTE *)(((v7 + 32) >> 3) + 0x7FFF8000) = 4;
        v20 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v7 + 160));
        v21 = (int *)v20;
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v20);
        }
        v22 = *v21;
        v23 = *(_BYTE *)(((v7 + 32) >> 3) + 0x7FFF8000);
        LOBYTE(v19) = v23 != 0;
        if ( v23 != 0 && v23 <= 3 )
          __asan_report_store4(v7 + 32, v19);
        *(_DWORD *)(v7 + 32) = v22;
        *(_BYTE *)(((v7 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v7 + 224) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 224, v19);
        *(std::unordered_map<unsigned int,data::ConfigPoint>::const_iterator *)(v7 + 224) = std::unordered_map<unsigned int,data::ConfigPoint>::find(
                                                                                              config_point_map,
                                                                                              (const std::unordered_map<unsigned int,data::ConfigPoint>::key_type *)(v7 + 32));
        *(_BYTE *)(((v7 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v7 + 256) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 256, v7 + 32);
        *(std::unordered_map<unsigned int,data::ConfigPoint>::const_iterator *)(v7 + 256) = std::unordered_map<unsigned int,data::ConfigPoint>::end(config_point_map);
        v24 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigPoint>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPoint>,false> *)(v7 + 224),
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPoint>,false> *)(v7 + 256));
        *(_BYTE *)(((v7 + 256) >> 3) + 0x7FFF8000) = -8;
        if ( v24 )
        {
          *(_DWORD *)(((v7 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v7 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v7 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v7 - 96 + 31) & 7) >= *(_BYTE *)(((v7 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v7 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v7 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_config_mgr.cpp",
            "findScenePointArray",
            706);
          v25 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  (common::milog::MiLogStream *const)(v7 + 416),
                  (const char (*)[27])"find point fail, scene_id:");
          v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v25,
                  (const unsigned int *)(v7 + 48));
          v27 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v26,
                  (const char (*)[17])" point_array_id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v7 + 64));
          v29 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v28, (const char (*)[11])" point_id:");
          v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v29,
                  (const unsigned int *)(v7 + 32));
          v31 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v30, (const char (*)[11])" group_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v7 + 80));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 416));
          *(_DWORD *)(((v7 + 416) >> 3) + 0x7FFF8000) = -117901064;
          v6 = -1;
          v32 = 0;
        }
        else
        {
          v33 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPoint>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPoint>,false,false> *const)(v7 + 224));
          std::vector<data::ConfigPoint>::push_back(config_point_vec, &v33->second);
          v32 = 1;
        }
        *(_BYTE *)(((v7 + 224) >> 3) + 0x7FFF8000) = -8;
        if ( v32 != 1 )
        {
          v34 = 0;
          goto LABEL_39;
        }
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v7 + 160));
      }
      v34 = 1;
LABEL_39:
      if ( v34 == 1 )
        v6 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v7 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v7 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v7 - 32 + 95) & 7) >= *(_BYTE *)(((v7 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v7 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v7 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "findScenePointArray",
      690);
    v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v7 + 288),
            (const char (*)[36])"findSceneJsonConfig fail, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v7 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 288));
    v6 = -1;
  }
  result = v6;
  if ( v42 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 715: range 000000000F24C39E-000000000F24C958
__int64 __fastcall JsonConfigMgr::findScenePointArrayPoint(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t point_array_id,
        uint32_t point_id,
        unsigned __int64 pos,
        unsigned __int64 rot)
{
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  __int64 result; // rax
  const std::unordered_map<unsigned int,data::ConfigPointArray> *p_point_array_map; // rdx
  const std::unordered_map<unsigned int,data::ConfigPointArray> *v11; // rdx
  bool v12; // al
  bool v13; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPoint>,false,false>::pointer v14; // rax
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+38h] [rbp-138h]
  data::ConfigPointMap *config_point_map; // [rsp+40h] [rbp-130h]
  const data::ConfigPoint *config_point; // [rsp+48h] [rbp-128h]
  char v22[288]; // [rsp+50h] [rbp-120h] BYREF

  v6 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_2(256LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "8 32 4 18 point_array_id:714 48 4 12 point_id:714 64 8 20 point_array_iter:721 96 8 9 <unknown> "
                        "128 8 8 iter:727 160 8 9 <unknown> 192 12 9 <unknown> 224 12 9 <unknown>";
  *(_QWORD *)(v6 + 16) = JsonConfigMgr::findScenePointArrayPoint;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556924;
  v8[536862722] = -218959360;
  v8[536862723] = -218959360;
  v8[536862724] = -218959360;
  v8[536862725] = -218959360;
  v8[536862726] = -219020288;
  v8[536862727] = -202177536;
  *(_DWORD *)(v6 + 32) = point_array_id;
  *(_DWORD *)(v6 + 48) = point_id;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, scene_id);
  if ( scene_json_config_ptr )
  {
    p_point_array_map = &scene_json_config_ptr->point_array_map;
    if ( *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 64, scene_id);
    *(std::unordered_map<unsigned int,data::ConfigPointArray>::const_iterator *)(v6 + 64) = std::unordered_map<unsigned int,data::ConfigPointArray>::find(
                                                                                              p_point_array_map,
                                                                                              (const std::unordered_map<unsigned int,data::ConfigPointArray>::key_type *)(v6 + 32));
    v11 = &scene_json_config_ptr->point_array_map;
    if ( *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 96, v6 + 32);
    *(std::unordered_map<unsigned int,data::ConfigPointArray>::const_iterator *)(v6 + 96) = std::unordered_map<unsigned int,data::ConfigPointArray>::end(v11);
    v12 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigPointArray>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPointArray>,false> *)(v6 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPointArray>,false> *)(v6 + 96));
    *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v12 )
    {
      result = 0xFFFFFFFFLL;
    }
    else
    {
      config_point_map = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPointArray>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPointArray>,false,false> *const)(v6 + 64))->second.config_point_map;
      *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 128, v6 + 96);
      *(std::unordered_map<unsigned int,data::ConfigPoint>::const_iterator *)(v6 + 128) = std::unordered_map<unsigned int,data::ConfigPoint>::find(
                                                                                            config_point_map,
                                                                                            (const std::unordered_map<unsigned int,data::ConfigPoint>::key_type *)(v6 + 48));
      *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 160, v6 + 48);
      *(std::unordered_map<unsigned int,data::ConfigPoint>::const_iterator *)(v6 + 160) = std::unordered_map<unsigned int,data::ConfigPoint>::end(config_point_map);
      v13 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigPoint>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPoint>,false> *)(v6 + 128),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPoint>,false> *)(v6 + 160));
      *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( v13 )
      {
        result = 0xFFFFFFFFLL;
      }
      else
      {
        v14 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPoint>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPoint>,false,false> *const)(v6 + 128));
        config_point = &v14->second;
        *(_WORD *)(((v6 + 192) >> 3) + 0x7FFF8000) = 1024;
        Vector3::Vector3((Vector3 *const)(v6 + 192), &v14->second.position);
        if ( (char)(pos & 7) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) && *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((pos + 11) & 7) >= *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(pos, 12LL);
        }
        if ( *(char *)(((v6 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 203) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 64 + 11) & 7) >= *(_BYTE *)(((v6 + 203) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v6 + 192, 12LL);
        }
        *(_QWORD *)pos = *(_QWORD *)(v6 + 192);
        *(_DWORD *)(pos + 8) = *(_DWORD *)(v6 + 200);
        *(_WORD *)(((v6 + 192) >> 3) + 0x7FFF8000) = -1800;
        *(_WORD *)(((v6 + 224) >> 3) + 0x7FFF8000) = 1024;
        Vector3::Vector3((Vector3 *const)(v6 + 224), &config_point->rotation);
        if ( (char)(rot & 7) >= *(_BYTE *)((rot >> 3) + 0x7FFF8000) && *(_BYTE *)((rot >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((rot + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((rot + 11) & 7) >= *(_BYTE *)(((rot + 11) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(rot, 12LL);
        }
        if ( *(char *)(((v6 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 235) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 32 + 11) & 7) >= *(_BYTE *)(((v6 + 235) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v6 + 224, 12LL);
        }
        *(_QWORD *)rot = *(_QWORD *)(v6 + 224);
        *(_DWORD *)(rot + 8) = *(_DWORD *)(v6 + 232);
        result = 0LL;
      }
    }
  }
  else
  {
    result = 0xFFFFFFFFLL;
  }
  if ( v22 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 739: range 000000000F24C95A-000000000F24CB53
const data::ConfigPointArray *__fastcall JsonConfigMgr::findScenePointArrayConfig(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t point_array_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const data::ConfigPointArray *result; // rax
  const std::unordered_map<unsigned int,data::ConfigPointArray> *p_point_array_map; // rdx
  const std::unordered_map<unsigned int,data::ConfigPointArray> *v8; // rdx
  bool v9; // al
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+18h] [rbp-A8h]
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 18 point_array_id:738 64 8 20 point_array_iter:745 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findScenePointArrayConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = point_array_id;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, scene_id);
  if ( scene_json_config_ptr )
  {
    p_point_array_map = &scene_json_config_ptr->point_array_map;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 64, scene_id);
    *(std::unordered_map<unsigned int,data::ConfigPointArray>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::ConfigPointArray>::find(
                                                                                              p_point_array_map,
                                                                                              (const std::unordered_map<unsigned int,data::ConfigPointArray>::key_type *)(v3 + 48));
    v8 = &scene_json_config_ptr->point_array_map;
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, v3 + 48);
    *(std::unordered_map<unsigned int,data::ConfigPointArray>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::ConfigPointArray>::end(v8);
    v9 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigPointArray>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPointArray>,false> *)(v3 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigPointArray>,false> *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
      result = 0LL;
    else
      result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPointArray>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigPointArray>,false,false> *const)(v3 + 64))->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 755: range 000000000F24CB54-000000000F24CD96
const JsonConfigMgr *__fastcall JsonConfigMgr::findSceneForce(
        const JsonConfigMgr *const this,
        const JsonConfigMgr *scene_id,
        uint32_t force_id,
        int a4)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>> *p_force_map; // rdx
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>> *v8; // rdx
  bool v9; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField> >,false,false>::pointer v10; // rax
  int v11; // edx
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-A8h]
  char v16[160]; // [rsp+30h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 12 force_id:754 64 8 6 it:759 96 8 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findSceneForce;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 48) = a4;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(scene_id, force_id);
  if ( !scene_json_config_ptr )
    goto LABEL_13;
  p_force_map = &scene_json_config_ptr->force_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, force_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::find(p_force_map, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::key_type *)(v4 + 48));
  v8 = &scene_json_config_ptr->force_map;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::end(v8);
  v9 = std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField> >,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField> >,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField> >,false,false> *const)(v4 + 64));
    std::shared_ptr<data::ConfigForceField>::shared_ptr(
      (std::shared_ptr<data::ConfigForceField> *const)this,
      &v10->second);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
LABEL_13:
    std::shared_ptr<data::ConfigForceField>::shared_ptr((std::shared_ptr<data::ConfigForceField> *const)this, 0LL);
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 768: range 000000000F24CD98-000000000F24CF9C
const data::ConfigSceneArea *__fastcall JsonConfigMgr::findSceneArea(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t area_id)
{
  data::ConfigSceneArea *p_second; // r14
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::unordered_map<unsigned int,data::ConfigSceneArea> *p_area_map; // rdx
  const std::unordered_map<unsigned int,data::ConfigSceneArea> *v8; // rdx
  bool v9; // al
  int v10; // eax
  const data::ConfigSceneArea *result; // rax
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+18h] [rbp-B8h]
  char v14[176]; // [rsp+20h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 11 area_id:767 64 8 6 it:772 96 8 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findSceneArea;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 48) = area_id;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, scene_id);
  if ( !scene_json_config_ptr )
    goto LABEL_13;
  p_area_map = &scene_json_config_ptr->area_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, scene_id);
  *(std::unordered_map<unsigned int,data::ConfigSceneArea>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,data::ConfigSceneArea>::find(
                                                                                           p_area_map,
                                                                                           (const std::unordered_map<unsigned int,data::ConfigSceneArea>::key_type *)(v4 + 48));
  v8 = &scene_json_config_ptr->area_map;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<unsigned int,data::ConfigSceneArea>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,data::ConfigSceneArea>::end(v8);
  v9 = std::__detail::operator!=<std::pair<unsigned int const,data::ConfigSceneArea>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigSceneArea>,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigSceneArea>,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    p_second = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigSceneArea>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigSceneArea>,false,false> *const)(v4 + 64))->second;
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  if ( v10 == 1 )
LABEL_13:
    p_second = 0LL;
  result = p_second;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 781: range 000000000F24CF9E-000000000F24D159
const DungeonJsonConfig *__fastcall JsonConfigMgr::findDungeonJsonConfig(
        const JsonConfigMgr *const this,
        __int64 dungeon_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,DungeonJsonConfig> *p_dungeon_json_config_map; // rdx
  std::unordered_map<unsigned int,DungeonJsonConfig> *v6; // rdx
  bool v7; // al
  const DungeonJsonConfig *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 dungeon_id:780 64 8 6 it:782 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findDungeonJsonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = dungeon_id;
  p_dungeon_json_config_map = &this->dungeon_json_config_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, dungeon_id);
  *(std::unordered_map<unsigned int,DungeonJsonConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,DungeonJsonConfig>::find(
                                                                                       p_dungeon_json_config_map,
                                                                                       (const std::unordered_map<unsigned int,DungeonJsonConfig>::key_type *)(v2 + 48));
  v6 = &this->dungeon_json_config_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,DungeonJsonConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,DungeonJsonConfig>::end(v6);
  v7 = std::__detail::operator!=<std::pair<unsigned int const,DungeonJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,DungeonJsonConfig>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,DungeonJsonConfig>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,DungeonJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,DungeonJsonConfig>,false,false> *const)(v2 + 64))->second;
  else
    result = 0LL;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 790: range 000000000F24D15A-000000000F2534EB
int32_t __cdecl JsonConfigMgr::loadAllAbilityConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t AllFilesWithExtension; // edx
  char v7; // al
  char *v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  unsigned __int64 v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  _BOOL4 v16; // r15d
  unsigned __int64 v17; // rax
  char *v18; // rsi
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  _BOOL4 v21; // r15d
  char *v22; // rsi
  std::string *p_ability_name; // rsi
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  _BOOL4 v26; // r15d
  unsigned __int64 v27; // rax
  char *v28; // rsi
  unsigned __int64 v29; // rax
  unsigned __int64 v30; // rdx
  __int64 v31; // rsi
  std::string *p_modifier_name; // rdx
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true>::reference v33; // rsi
  int32_t StringHash; // edx
  const std::string *v35; // r8
  char v36; // al
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<int const,std::string >,false,false>,bool> >::type *v37; // rax
  char v38; // r15
  __int64 v39; // rdx
  std::string *p_second; // rdx
  char v41; // dl
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rdx
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  int v50; // edx
  int v51; // edx
  _BOOL4 v52; // edx
  unsigned __int64 v53; // rax
  int32_t v54; // edx
  char v55; // al
  std::pair<std::_Rb_tree_const_iterator<int>,bool> v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rdx
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  int v61; // edx
  _BOOL4 v62; // r15d
  unsigned __int64 v63; // rax
  int v64; // edx
  _BOOL4 v65; // r15d
  unsigned __int64 v66; // rax
  unsigned __int64 v67; // rax
  ConfigAbilityOverride *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rdx
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  int v73; // r15d
  unsigned __int64 v74; // rax
  int v75; // edx
  _BOOL4 v76; // r15d
  unsigned __int64 v77; // rax
  std::unordered_map<int,ConfigAbilityOverride> *v78; // rax
  std::unordered_map<int,std::string> *v79; // rax
  ConfigAbilityHashMap *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  int v83; // r15d
  unsigned __int64 v84; // rax
  unsigned __int64 v85; // rax
  unsigned __int64 v86; // rax
  int v87; // edx
  unsigned __int64 v88; // rax
  unsigned __int64 v89; // rax
  int v90; // edx
  char *v91; // rsi
  char *v92; // rsi
  common::milog::MiLogStream *v93; // rax
  common::milog::MiLogStream *v94; // rdx
  _BOOL4 v95; // r15d
  unsigned __int64 v96; // rax
  unsigned __int64 v97; // rax
  unsigned __int64 v98; // rdx
  void (__fastcall *v99)(unsigned __int64, unsigned __int64); // r8
  unsigned __int64 v100; // rsi
  const std::shared_ptr<data::BaseActionContainer> *v101; // rax
  data::ConfigAttackInfo *p_attack_info; // rdx
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rdx
  int v107; // r15d
  data::ConfigAttackInfo *v108; // rdx
  common::milog::MiLogStream *v109; // rax
  common::milog::MiLogStream *v110; // rax
  common::milog::MiLogStream *v111; // rax
  common::milog::MiLogStream *v112; // rdx
  int v113; // r15d
  data::ConfigAttackInfo *v114; // rdx
  common::milog::MiLogStream *v115; // rax
  common::milog::MiLogStream *v116; // rax
  common::milog::MiLogStream *v117; // rax
  common::milog::MiLogStream *v118; // rdx
  int v119; // edx
  int v120; // r15d
  data::ConfigAttackInfo *v121; // rdx
  common::milog::MiLogStream *v122; // rax
  common::milog::MiLogStream *v123; // rax
  common::milog::MiLogStream *v124; // rax
  common::milog::MiLogStream *v125; // rdx
  int v126; // r15d
  data::ConfigAttackInfo *v127; // rdx
  common::milog::MiLogStream *v128; // rax
  common::milog::MiLogStream *v129; // rax
  common::milog::MiLogStream *v130; // rax
  common::milog::MiLogStream *v131; // rdx
  int v132; // r15d
  int v133; // r15d
  int v134; // eax
  int v135; // r15d
  unsigned __int64 v136; // rax
  int v137; // edx
  int v138; // edx
  std::vector<std::string> *__for_range; // [rsp+28h] [rbp-20E8h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+30h] [rbp-20E0h]
  std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> *__for_range_0; // [rsp+38h] [rbp-20D8h]
  __gnu_cxx::__normal_iterator<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>*,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> >::reference ability_map; // [rsp+40h] [rbp-20D0h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true>::reference __in; // [rsp+50h] [rbp-20C0h]
  const std::string *override_name; // [rsp+58h] [rbp-20B8h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<data::ConfigAbility> > >::type *config_ability_ptr; // [rsp+60h] [rbp-20B0h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true>::reference v148; // [rsp+70h] [rbp-20A0h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<data::ConfigAbility> > >::type *config_ability_ptr_0; // [rsp+80h] [rbp-2090h]
  data::ConfigAbilityModifierMap *__for_range_3; // [rsp+88h] [rbp-2088h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true>::reference modifier_name; // [rsp+98h] [rbp-2078h]
  std::tuple_element<0,std::pair<std::__detail::_Node_iterator<std::pair<int const,std::string >,false,false>,bool> >::type *iter; // [rsp+A8h] [rbp-2068h]
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<int const,std::string >,false,false>,bool> >::type *inserted; // [rsp+B0h] [rbp-2060h]
  data::DynamicArgumentMap *__for_range_4; // [rsp+B8h] [rbp-2058h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true>::reference v155; // [rsp+C0h] [rbp-2050h]
  std::tuple_element<0,std::pair<const std::string,data::DynamicArgument> >::type *ability_special_name; // [rsp+C8h] [rbp-2048h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true>::reference v157; // [rsp+E0h] [rbp-2030h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigAbility> > >::type *override_name_1; // [rsp+E8h] [rbp-2028h]
  const std::shared_ptr<data::ConfigAbility> *config_ability_ptr_1; // [rsp+F0h] [rbp-2020h]
  std::unordered_map<int,ConfigAbilityHashMap> *__for_range_6; // [rsp+F8h] [rbp-2018h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::reference v161; // [rsp+100h] [rbp-2010h]
  std::tuple_element<1,std::pair<int const,ConfigAbilityHashMap> >::type *config_ability_hash_map; // [rsp+110h] [rbp-2000h]
  std::unordered_map<int,ConfigAbilityOverride> *__for_range_7; // [rsp+118h] [rbp-1FF8h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::reference v164; // [rsp+120h] [rbp-1FF0h]
  std::tuple_element<1,std::pair<int const,ConfigAbilityOverride> >::type *config_ability_override; // [rsp+130h] [rbp-1FE0h]
  std::vector<std::shared_ptr<data::BaseActionContainer>> *__for_range_8; // [rsp+138h] [rbp-1FD8h]
  data::ConfigAttackInfoTargetMap *__for_range_9; // [rsp+140h] [rbp-1FD0h]
  std::__detail::_Node_iterator<std::pair<const data::TargetType,data::ConfigAttackInfo>,false,false>::reference v168; // [rsp+148h] [rbp-1FC8h]
  char v169[8112]; // [rsp+160h] [rbp-1FB0h] BYREF

  v3 = (unsigned __int64)v169;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_7(8064LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "62 32 1 9 <unknown> 48 4 7 ret:792 64 4 22 modifier_name_hash:840 80 4 9 <unknown> 96 4 17 invok"
                        "e_index:1059 112 8 15 __for_begin:798 144 8 13 __for_end:798 176 8 15 __for_begin:813 208 8 13 _"
                        "_for_end:813 240 8 15 __for_begin:816 272 8 13 __for_end:816 304 8 15 __for_begin:831 336 8 13 _"
                        "_for_end:831 368 8 15 __for_begin:834 400 8 13 __for_end:834 432 8 9 <unknown> 464 8 15 __for_be"
                        "gin:852 496 8 13 __for_end:852 528 8 15 __for_begin:864 560 8 13 __for_end:864 592 8 16 __for_be"
                        "gin:1049 624 8 14 __for_end:1049 656 8 16 __for_begin:1051 688 8 14 __for_end:1051 720 8 16 __fo"
                        "r_begin:1060 752 8 14 __for_end:1060 784 8 16 __for_begin:1086 816 8 14 __for_end:1086 848 16 9 "
                        "<unknown> 880 16 23 config_ability_ptr:1053 912 16 20 invoke_site_ptr:1060 944 16 31 damage_by_a"
                        "ttack_value_ptr:1063 976 16 29 trigger_attack_event_ptr:1073 1008 16 33 trigger_attack_map_event"
                        "_ptr:1083 1040 16 33 tile_attack_manager_mxin_ptr:1096 1072 16 35 tile_complex_manager_mixin_ptr"
                        ":1106 1104 24 12 file_vec:791 1168 24 22 ability_group_list:807 1232 24 9 <unknown> 1296 32 9 <u"
                        "nknown> 1360 32 9 <unknown> 1424 32 9 <unknown> 1488 32 9 <unknown> 1552 32 16 ability_name:815 "
                        "1616 32 9 <unknown> 1680 32 9 <unknown> 1744 32 9 <unknown> 1808 32 9 <unknown> 1872 32 9 <unkno"
                        "wn> 1936 32 9 <unknown> 2000 32 9 <unknown> 2064 32 9 <unknown> 2128 32 9 <unknown> 2192 32 9 <u"
                        "nknown> 2256 32 9 <unknown> 2320 40 8 root:801 2400 48 33 ability_special_name_hash_set:851 2480"
                        " 48 27 config_ability_override:866 2560 56 26 modifier_name_hash_map:830 2656 56 31 config_abili"
                        "ty_override_map:863 2752 144 27 config_ability_hash_map:877 2960 4840 20 ability_property:892";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::loadAllAbilityConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = 61956;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = 62194;
  v5[536862727] = -234881024;
  v5[536862728] = 62194;
  v5[536862728] = -234881024;
  v5[536862729] = 62194;
  v5[536862729] = -234881024;
  v5[536862730] = 62194;
  v5[536862730] = -234881024;
  v5[536862731] = 62194;
  v5[536862731] = -234881024;
  v5[536862732] = 62194;
  v5[536862732] = -234881024;
  v5[536862733] = 62194;
  v5[536862733] = -234881024;
  v5[536862734] = 62194;
  v5[536862734] = -234881024;
  v5[536862735] = 62194;
  v5[536862735] = -234881024;
  v5[536862736] = 62194;
  v5[536862736] = -234881024;
  v5[536862737] = 62194;
  v5[536862737] = -234881024;
  v5[536862738] = 62194;
  v5[536862738] = -234881024;
  v5[536862739] = 62194;
  v5[536862739] = -234881024;
  v5[536862740] = 62194;
  v5[536862740] = -234881024;
  v5[536862741] = 62194;
  v5[536862741] = -234881024;
  v5[536862742] = 62194;
  v5[536862742] = -234881024;
  v5[536862743] = 62194;
  v5[536862743] = -234881024;
  v5[536862744] = 62194;
  v5[536862744] = -234881024;
  v5[536862745] = 62194;
  v5[536862745] = -234881024;
  v5[536862746] = 62194;
  v5[536862747] = 62194;
  v5[536862748] = 62194;
  v5[536862749] = 62194;
  v5[536862750] = 62194;
  v5[536862751] = 62194;
  v5[536862752] = 62194;
  v5[536862753] = 62194;
  v5[536862754] = 62194;
  v5[536862755] = -218959360;
  v5[536862756] = 62194;
  v5[536862757] = -218959360;
  v5[536862758] = 62194;
  v5[536862759] = -218959360;
  v5[536862760] = 62194;
  v5[536862761] = -219021312;
  v5[536862762] = 62194;
  v5[536862763] = -219021312;
  v5[536862764] = 62194;
  v5[536862765] = -219021312;
  v5[536862766] = 62194;
  v5[536862767] = -219021312;
  v5[536862768] = 62194;
  v5[536862769] = -219021312;
  v5[536862770] = 62194;
  v5[536862771] = -219021312;
  v5[536862772] = 62194;
  v5[536862773] = -219021312;
  v5[536862774] = 62194;
  v5[536862775] = -219021312;
  v5[536862776] = 62194;
  v5[536862777] = -219021312;
  v5[536862778] = 62194;
  v5[536862779] = -219021312;
  v5[536862780] = 62194;
  v5[536862781] = -219021312;
  v5[536862782] = 62194;
  v5[536862783] = -219021312;
  v5[536862784] = 62194;
  v5[536862785] = -219021312;
  v5[536862786] = 62194;
  v5[536862787] = -219021312;
  v5[536862788] = 62194;
  v5[536862789] = -219021312;
  v5[536862790] = 62194;
  v5[536862791] = -219021312;
  v5[536862792] = 62194;
  v5[536862793] = -234881024;
  v5[536862794] = -218959118;
  v5[536862796] = -219021312;
  v5[536862797] = 62194;
  v5[536862799] = -218959118;
  v5[536862801] = -234881024;
  v5[536862802] = -218959118;
  v5[536862804] = -234881024;
  v5[536862805] = -218959118;
  v5[536862810] = -219021312;
  v5[536862811] = -218959118;
  v5[536862812] = 62194;
  v5[536862963] = -218103808;
  v5[536862964] = -202116109;
  v5[536862965] = -202116109;
  v5[536862966] = -202116109;
  v5[536862967] = -202116109;
  v5[536862968] = -202116109;
  v5[536862969] = -202116109;
  v5[536862970] = -202116109;
  v5[536862971] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 1104));
  std::allocator<char>::allocator(v3 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v3 + 1296),
    ".json",
    (const std::allocator<char> *)(v3 + 32));
  v8 = (char *)(v3 + 1296);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->ability_json_base_dir,
                            (const std::string *)(v3 + 1296),
                            (std::vector<std::string> *)(v3 + 1104));
  v7 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v7 != 0;
  if ( v7 != 0 && v7 <= 3 )
    __asan_report_store4(v3 + 48, v8);
  *(_DWORD *)(v3 + 48) = AllFilesWithExtension;
  std::string::~string((void *)(v3 + 1296));
  *(_DWORD *)(((v3 + 1296) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v3 + 32);
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v3 + 48);
  if ( *(_DWORD *)(v3 + 48) )
  {
    *(_DWORD *)(((v3 + 1360) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1360) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1391) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 1391) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1360, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 1360),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllAbilityConfig",
      795);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 1360),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
            v9,
            (const char (*)[55])"getAllFilesWithExtension fails, ability_json_base_dir:");
    v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, &config->ability_json_base_dir);
    v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v12, (const int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1360));
    *(_DWORD *)(((v3 + 1360) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v3 + 1104);
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 112, v8);
    *(std::vector<std::string>::iterator *)(v3 + 112) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 144, v8);
    *(std::vector<std::string>::iterator *)(v3 + 144) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 112),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 144)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 112));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v13 = ((v3 + 2320) >> 3) + 2147450880;
      *(_DWORD *)v13 = 0;
      *(_BYTE *)(v13 + 4) = 0;
      Json::Value::Value(v3 + 2320, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v3 + 2320)) )
      {
        *(_DWORD *)(((v3 + 1424) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 1424) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1455) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 1455) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 1424, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 1424),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllAbilityConfig",
          804);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 1424),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v14,
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1424));
        *(_DWORD *)(((v3 + 1424) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v16 = 0;
      }
      else
      {
        v17 = ((v3 + 1168) >> 3) + 2147450880;
        *(_WORD *)v17 = 0;
        *(_BYTE *)(v17 + 2) = 0;
        std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>::vector((std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> *const)(v3 + 1168));
        v18 = (char *)(v3 + 1168);
        if ( !data::vecFromJson((const Json::Value *)(v3 + 2320), (data::ConfigAbilityGroupList *)(v3 + 1168)) )
        {
          *(_DWORD *)(((v3 + 1488) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1488) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1519) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 1519) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1488, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1488),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllAbilityConfig",
            810);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1488),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  v19,
                  (const char (*)[20])"vecFromJson fails: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, file_path);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1488));
          *(_DWORD *)(((v3 + 1488) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v21 = 0;
        }
        else
        {
          __for_range_0 = (std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> *)(v3 + 1168);
          *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 176, v18);
          *(std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>::iterator *)(v3 + 176) = std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>::begin(__for_range_0);
          *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 208, v18);
          *(std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>::iterator *)(v3 + 208) = std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>::end(__for_range_0);
          while ( 1 )
          {
            v22 = (char *)(v3 + 208);
            if ( !__gnu_cxx::operator!=<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>> *,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>>(
                    (const __gnu_cxx::__normal_iterator<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>*,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> > *)(v3 + 176),
                    (const __gnu_cxx::__normal_iterator<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>*,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> > *)(v3 + 208)) )
              break;
            ability_map = __gnu_cxx::__normal_iterator<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>> *,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>>::operator*((const __gnu_cxx::__normal_iterator<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>*,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> > *const)(v3 + 176));
            *(_DWORD *)(((v3 + 1552) >> 3) + 0x7FFF8000) = 0;
            std::string::basic_string(v3 + 1552);
            *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 240, v22);
            *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v3 + 240) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::begin(ability_map);
            *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 272, v22);
            *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v3 + 272) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::end(ability_map);
            while ( 1 )
            {
              p_ability_name = (std::string *)(v3 + 272);
              if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,true>(
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v3 + 240),
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v3 + 272)) )
                break;
              __in = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v3 + 240));
              override_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbility>>(__in);
              config_ability_ptr = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbility>>(__in);
              if ( std::operator==<char>(override_name, "Default") )
              {
                p_ability_name = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr)->ability_name;
                std::string::operator=(v3 + 1552, p_ability_name);
                break;
              }
              std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v3 + 240));
            }
            *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = -8;
            if ( (unsigned __int8)std::string::empty(v3 + 1552) )
            {
              *(_DWORD *)(((v3 + 1616) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1616) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1647) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 1647) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1616, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1616),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadAllAbilityConfig",
                826);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1616),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                      v24,
                      (const char (*)[29])"ability_name is empty, path:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, file_path);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1616));
              *(_DWORD *)(((v3 + 1616) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v26 = 0;
            }
            else
            {
              v27 = ((v3 + 2560) >> 3) + 2147450880;
              *(_DWORD *)v27 = 0;
              *(_WORD *)(v27 + 4) = 0;
              *(_BYTE *)(v27 + 6) = 0;
              std::unordered_map<int,std::string>::unordered_map((std::unordered_map<int,std::string> *const)(v3 + 2560));
              *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 304, p_ability_name);
              *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v3 + 304) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::begin(ability_map);
              *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 336, p_ability_name);
              *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v3 + 336) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::end(ability_map);
              while ( 1 )
              {
                v28 = (char *)(v3 + 336);
                if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,true>(
                        (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v3 + 304),
                        (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v3 + 336)) )
                  break;
                v148 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v3 + 304));
                std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbility>>(v148);
                config_ability_ptr_0 = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbility>>(v148);
                v29 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr_0);
                if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
                  v29 = __asan_report_load8(v29);
                v30 = *(_QWORD *)v29 + 56LL;
                v31 = *(unsigned __int8 *)((v30 >> 3) + 0x7FFF8000);
                if ( (_BYTE)v31 )
                  v29 = __asan_report_load8(*(_QWORD *)v29 + 56LL);
                (*(void (__fastcall **)(unsigned __int64))v30)(v29);
                __for_range_3 = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr_0)->modifiers;
                *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 368, v31);
                *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v3 + 368) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::begin(__for_range_3);
                *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 400, v31);
                *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v3 + 400) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::end(__for_range_3);
                while ( 1 )
                {
                  v28 = (char *)(v3 + 400);
                  if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,true>(
                          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v3 + 368),
                          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v3 + 400)) )
                    break;
                  modifier_name = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v3 + 368));
                  p_modifier_name = &std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&modifier_name->second)->modifier_name;
                  v33 = modifier_name;
                  std::string::operator=(p_modifier_name, modifier_name);
                  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
                  StringHash = getStringHash(&modifier_name->first);
                  v36 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
                  if ( v36 != 0 && v36 <= 3 )
                  {
                    LOBYTE(v33) = v36 != 0;
                    __asan_report_store4(v3 + 64, v33);
                  }
                  *(_DWORD *)(v3 + 64) = StringHash;
                  *(_WORD *)(((v3 + 848) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v3 + 848) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  *(std::pair<std::__detail::_Node_iterator<std::pair<int const,std::string >,false,false>,bool> *)(v3 + 848) = std::unordered_map<int,std::string>::emplace<int &,std::string const&>((std::unordered_map<int,std::string> *const)(v3 + 2560), (int *)(v3 + 64), &modifier_name->first, (int *)(v3 + 64), v35);
                  iter = std::get<0ul,std::__detail::_Node_iterator<std::pair<int const,std::string>,false,false>,bool>((std::pair<std::__detail::_Node_iterator<std::pair<int const,std::string >,false,false>,bool> *)(v3 + 848));
                  v37 = std::get<1ul,std::__detail::_Node_iterator<std::pair<int const,std::string>,false,false>,bool>((std::pair<std::__detail::_Node_iterator<std::pair<int const,std::string >,false,false>,bool> *)(v3 + 848));
                  inserted = v37;
                  v38 = 0;
                  v28 = (char *)((unsigned __int8)v37 & 7);
                  v39 = (*(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v28 >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000));
                  if ( (_BYTE)v39 )
                    __asan_report_load1(v37, v28, v39);
                  if ( *inserted )
                    goto LABEL_73;
                  *(_BYTE *)(((v3 + 432) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v3 + 432) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v3 + 432, v28);
                  *(std::unordered_map<int,std::string>::iterator *)(v3 + 432) = std::unordered_map<int,std::string>::end((std::unordered_map<int,std::string> *const)(v3 + 2560));
                  v38 = 1;
                  v28 = (char *)(v3 + 432);
                  if ( std::__detail::operator==<std::pair<int const,std::string>,false>(
                         iter,
                         (const std::__detail::_Node_iterator_base<std::pair<int const,std::string >,false> *)(v3 + 432))
                    || (p_second = &std::__detail::_Node_iterator<std::pair<int const,std::string>,false,false>::operator->(iter)->second,
                        v28 = (char *)modifier_name,
                        std::operator!=<char>(p_second, &modifier_name->first)) )
                  {
                    v41 = 1;
                  }
                  else
                  {
LABEL_73:
                    v41 = 0;
                  }
                  if ( v38 )
                    *(_BYTE *)(((v3 + 432) >> 3) + 0x7FFF8000) = -8;
                  if ( v41 )
                  {
                    *(_DWORD *)(((v3 + 1680) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 1680) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 1711) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 1711) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 1680, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 1680),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadAllAbilityConfig",
                      844);
                    v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v3 + 1680),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v43 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                            v42,
                            (const char (*)[30])"duplicate modifier_name_hash:");
                    v44 = common::milog::MiLogStream::operator<<<int,(int *)0>(v43, (const int *)(v3 + 64));
                    v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            v44,
                            (const char (*)[16])" modifier_name:");
                    v46 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                            v45,
                            &modifier_name->first);
                    v47 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                            v46,
                            (const char (*)[13])" in ability:");
                    v48 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                            v47,
                            (const std::string *)(v3 + 1552));
                    v49 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                            v48,
                            (const char (*)[25])" modifier_name_hash_map:");
                    v28 = (char *)(v3 + 2560);
                    common::milog::MiLogStream::operator<<<int,std::string>(
                      v49,
                      (const std::unordered_map<int,std::string> *)(v3 + 2560));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1680));
                    *(_DWORD *)(((v3 + 1680) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v50 = 0;
                  }
                  else
                  {
                    v50 = 1;
                  }
                  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
                  *(_WORD *)(((v3 + 848) >> 3) + 0x7FFF8000) = -1800;
                  if ( v50 != 1 )
                  {
                    v51 = 0;
                    goto LABEL_85;
                  }
                  std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v3 + 368));
                }
                v51 = 1;
LABEL_85:
                *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) = -8;
                if ( v51 == 1 )
                {
                  v53 = ((v3 + 2400) >> 3) + 2147450880;
                  *(_DWORD *)v53 = 0;
                  *(_WORD *)(v53 + 4) = 0;
                  std::set<int>::set((std::set<int> *const)(v3 + 2400));
                  __for_range_4 = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr_0)->ability_specials;
                  *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v3 + 464, v28);
                  *(std::unordered_map<std::string,data::DynamicArgument>::iterator *)(v3 + 464) = std::unordered_map<std::string,data::DynamicArgument>::begin(__for_range_4);
                  *(_BYTE *)(((v3 + 496) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v3 + 496) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v3 + 496, v28);
                  *(std::unordered_map<std::string,data::DynamicArgument>::iterator *)(v3 + 496) = std::unordered_map<std::string,data::DynamicArgument>::end(__for_range_4);
                  while ( 1 )
                  {
                    v28 = (char *)(v3 + 496);
                    if ( !std::__detail::operator!=<std::pair<std::string const,data::DynamicArgument>,true>(
                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicArgument>,true> *)(v3 + 464),
                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicArgument>,true> *)(v3 + 496)) )
                    {
                      v61 = 1;
                      goto LABEL_101;
                    }
                    v155 = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true> *const)(v3 + 464));
                    ability_special_name = std::get<0ul,std::string const,data::DynamicArgument>(v155);
                    std::get<1ul,std::string const,data::DynamicArgument>(v155);
                    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
                    v54 = getStringHash(ability_special_name);
                    v55 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
                    if ( v55 != 0 && v55 <= 3 )
                    {
                      LOBYTE(v28) = v55 != 0;
                      __asan_report_store4(v3 + 80, v28);
                    }
                    *(_DWORD *)(v3 + 80) = v54;
                    v56 = std::set<int>::insert(
                            (std::set<int> *const)(v3 + 2400),
                            (std::set<int>::value_type *)(v3 + 80));
                    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
                    if ( !v56.second )
                      break;
                    std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true> *const)(v3 + 464));
                  }
                  *(_DWORD *)(((v3 + 1744) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 1744) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 1775) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 1775) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 1744, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 1744),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "loadAllAbilityConfig",
                    856);
                  v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 1744),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v58 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                          v57,
                          (const char (*)[32])"duplicate ability_special_name:");
                  v59 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v58, ability_special_name);
                  v60 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                          v59,
                          (const char (*)[15])" ability_name:");
                  v28 = (char *)(v3 + 1552);
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v60,
                    (const std::string *)(v3 + 1552));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1744));
                  *(_DWORD *)(((v3 + 1744) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v61 = 0;
LABEL_101:
                  *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v3 + 496) >> 3) + 0x7FFF8000) = -8;
                  v62 = v61 == 1;
                  std::set<int>::~set((std::set<int> *const)(v3 + 2400));
                  v52 = v62;
                }
                else
                {
                  v52 = 0;
                }
                v63 = ((v3 + 2400) >> 3) + 2147450880;
                *(_DWORD *)v63 = -117901064;
                *(_WORD *)(v63 + 4) = -1800;
                if ( !v52 )
                {
                  v64 = 0;
                  goto LABEL_106;
                }
                std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v3 + 304));
              }
              v64 = 1;
LABEL_106:
              *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = -8;
              if ( v64 == 1 )
              {
                v66 = ((v3 + 2656) >> 3) + 2147450880;
                *(_DWORD *)v66 = 0;
                *(_WORD *)(v66 + 4) = 0;
                *(_BYTE *)(v66 + 6) = 0;
                std::unordered_map<int,ConfigAbilityOverride>::unordered_map((std::unordered_map<int,ConfigAbilityOverride> *const)(v3 + 2656));
                *(_BYTE *)(((v3 + 528) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 528) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 528, v28);
                *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v3 + 528) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::begin(ability_map);
                *(_BYTE *)(((v3 + 560) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 560) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 560, v28);
                *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v3 + 560) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::end(ability_map);
                while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,true>(
                          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v3 + 528),
                          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v3 + 560)) )
                {
                  v157 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v3 + 528));
                  override_name_1 = std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbility>>(v157);
                  config_ability_ptr_1 = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbility>>(v157);
                  v67 = ((v3 + 2480) >> 3) + 2147450880;
                  *(_DWORD *)v67 = 0;
                  *(_WORD *)(v67 + 4) = 0;
                  ConfigAbilityOverride::ConfigAbilityOverride((ConfigAbilityOverride *const)(v3 + 2480));
                  std::string::operator=(v3 + 2480, override_name_1);
                  std::shared_ptr<data::ConfigAbility>::operator=(
                    (std::shared_ptr<data::ConfigAbility> *const)(v3 + 2512),
                    config_ability_ptr_1);
                  v68 = std::move<ConfigAbilityOverride &>((ConfigAbilityOverride *)(v3 + 2480));
                  if ( insertToHashMap<std::unordered_map<int,ConfigAbilityOverride>,ConfigAbilityOverride,std::string ConfigAbilityOverride::*>(
                         (std::unordered_map<int,ConfigAbilityOverride> *)(v3 + 2656),
                         override_name_1,
                         v68,
                         0LL) )
                  {
                    *(_DWORD *)(((v3 + 1808) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 1808) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 1839) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 1839) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 1808, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 1808),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadAllAbilityConfig",
                      872);
                    v69 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v3 + 1808),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v70 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                            v69,
                            (const char (*)[25])"duplicate override_name:");
                    v71 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v70, override_name_1);
                    v72 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                            v71,
                            (const char (*)[18])" in ability_name:");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v72,
                      (const std::string *)(v3 + 1552));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1808));
                    *(_DWORD *)(((v3 + 1808) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v73 = 0;
                  }
                  else
                  {
                    v73 = 1;
                  }
                  ConfigAbilityOverride::~ConfigAbilityOverride((ConfigAbilityOverride *const)(v3 + 2480));
                  v74 = ((v3 + 2480) >> 3) + 2147450880;
                  *(_DWORD *)v74 = -117901064;
                  *(_WORD *)(v74 + 4) = -1800;
                  if ( v73 != 1 )
                  {
                    v75 = 0;
                    goto LABEL_123;
                  }
                  std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v3 + 528));
                }
                v75 = 1;
LABEL_123:
                *(_BYTE *)(((v3 + 528) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 560) >> 3) + 0x7FFF8000) = -8;
                if ( v75 == 1 )
                {
                  v77 = ((v3 + 2752) >> 3) + 2147450880;
                  *(_DWORD *)v77 = 0;
                  *(_DWORD *)(v77 + 4) = 0;
                  *(_DWORD *)(v77 + 8) = 0;
                  *(_DWORD *)(v77 + 12) = 0;
                  *(_WORD *)(v77 + 16) = 0;
                  ConfigAbilityHashMap::ConfigAbilityHashMap((ConfigAbilityHashMap *const)(v3 + 2752));
                  std::string::operator=(v3 + 2752, v3 + 1552);
                  v78 = std::move<std::unordered_map<int,ConfigAbilityOverride> &>((std::unordered_map<int,ConfigAbilityOverride> *)(v3 + 2656));
                  std::unordered_map<int,ConfigAbilityOverride>::operator=(
                    (std::unordered_map<int,ConfigAbilityOverride> *const)(v3 + 2840),
                    v78);
                  v79 = std::move<std::unordered_map<int,std::string> &>((std::unordered_map<int,std::string> *)(v3 + 2560));
                  std::unordered_map<int,std::string>::operator=(
                    (std::unordered_map<int,std::string> *const)(v3 + 2784),
                    v79);
                  v80 = std::move<ConfigAbilityHashMap &>((ConfigAbilityHashMap *)(v3 + 2752));
                  if ( insertToHashMap<std::unordered_map<int,ConfigAbilityHashMap>,ConfigAbilityHashMap,std::string ConfigAbilityHashMap::*>(
                         &this->ability_config_group_map_,
                         (const std::string *)(v3 + 1552),
                         v80,
                         0LL) )
                  {
                    *(_DWORD *)(((v3 + 1872) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 1872) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 1903) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 1903) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 1872, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 1872),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadAllAbilityConfig",
                      884);
                    v81 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v3 + 1872),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v82 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                            v81,
                            (const char (*)[24])"duplicate ability name:");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v82,
                      (const std::string *)(v3 + 1552));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1872));
                    *(_DWORD *)(((v3 + 1872) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v83 = 0;
                  }
                  else
                  {
                    v83 = 1;
                  }
                  ConfigAbilityHashMap::~ConfigAbilityHashMap((ConfigAbilityHashMap *const)(v3 + 2752));
                  v76 = v83 == 1;
                }
                else
                {
                  v76 = 0;
                }
                std::unordered_map<int,ConfigAbilityOverride>::~unordered_map((std::unordered_map<int,ConfigAbilityOverride> *const)(v3 + 2656));
                v65 = v76;
              }
              else
              {
                v65 = 0;
              }
              std::unordered_map<int,std::string>::~unordered_map((std::unordered_map<int,std::string> *const)(v3 + 2560));
              v26 = v65;
            }
            std::string::~string((void *)(v3 + 1552));
            *(_DWORD *)(((v3 + 1552) >> 3) + 0x7FFF8000) = -117901064;
            v84 = ((v3 + 2560) >> 3) + 2147450880;
            *(_DWORD *)v84 = -117901064;
            *(_WORD *)(v84 + 4) = -1800;
            *(_BYTE *)(v84 + 6) = -8;
            v85 = ((v3 + 2656) >> 3) + 2147450880;
            *(_DWORD *)v85 = -117901064;
            *(_WORD *)(v85 + 4) = -1800;
            *(_BYTE *)(v85 + 6) = -8;
            v86 = ((v3 + 2752) >> 3) + 2147450880;
            *(_DWORD *)v86 = -117901064;
            *(_DWORD *)(v86 + 4) = -117901064;
            *(_DWORD *)(v86 + 8) = -117901064;
            *(_DWORD *)(v86 + 12) = -117901064;
            *(_WORD *)(v86 + 16) = -1800;
            if ( !v26 )
            {
              v87 = 0;
              goto LABEL_137;
            }
            __gnu_cxx::__normal_iterator<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>> *,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>>::operator++((__gnu_cxx::__normal_iterator<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>*,std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> > *const)(v3 + 176));
          }
          v87 = 1;
LABEL_137:
          *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
          v21 = v87 == 1;
        }
        std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>::~vector((std::vector<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>> *const)(v3 + 1168));
        v16 = v21;
      }
      Json::Value::~Value((Json::Value_0 *const)(v3 + 2320));
      v88 = ((v3 + 2320) >> 3) + 2147450880;
      *(_DWORD *)v88 = -117901064;
      *(_BYTE *)(v88 + 4) = -8;
      v89 = ((v3 + 1168) >> 3) + 2147450880;
      *(_WORD *)v89 = -1800;
      *(_BYTE *)(v89 + 2) = -8;
      if ( !v16 )
      {
        v90 = 0;
        goto LABEL_143;
      }
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 112));
    }
    v90 = 1;
LABEL_143:
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v90 == 1 )
    {
      __asan_unpoison_stack_memory(v3 + 2960, 4840LL);
      data::AbilityProperty::AbilityProperty((data::AbilityProperty *const)(v3 + 2960));
      JsonConfigMgr::defineEntityProperty(this, (const std::string *)(v3 + 2968), 0.0, Sum, -0.80000001, 10.0, 0);
      JsonConfigMgr::defineEntityProperty(this, (const std::string *)(v3 + 3000), 0.0, Sum, 0.0, 10000.0, 0);
      JsonConfigMgr::defineEntityProperty(this, (const std::string *)(v3 + 3032), 0.0, Sum, 0.0, 10000.0, 0);
      JsonConfigMgr::defineEntityProperty(
        this,
        (const std::string *)(v3 + 3064),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineEntityProperty(this, (const std::string *)(v3 + 3096), 0.0, Sum, -1.0, 10.0, 0);
      JsonConfigMgr::defineEntityProperty(
        this,
        (const std::string *)(v3 + 3128),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineEntityProperty(
        this,
        (const std::string *)(v3 + 3160),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineEntityProperty(
        this,
        (const std::string *)(v3 + 3192),
        1.0,
        Multiplied,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3224),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3256),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3320),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3288),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3352),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3384),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3416),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3448),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3480),
        1.0,
        OneMinusMultiplied,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3512),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3544),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3576),
        1.0,
        Multiplied,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3608),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3640),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3672),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3704),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3736),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3768),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3832),
        0.0,
        Top,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3864),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3896),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3928),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3960),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3992),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4024),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4056),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4088),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4120),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4152),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4184),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4216),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4248),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4280),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4312),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4344),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4376),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4408),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4440),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        1);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4472),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4504),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4536),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4568),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4600),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4632),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4664),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4696),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4728),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4760),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4792),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4824),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4856),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4888),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4920),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5016),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5048),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5080),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5112),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5144),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5176),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5208),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5240),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5272),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5304),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5336),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5368),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5400),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5432),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5464),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5496),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5528),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5560),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5592),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5624),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5656),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5688),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5752),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5784),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5816),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5848),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5880),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5912),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5944),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 5976),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6008),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4952),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 4984),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 3800),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6040),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6072),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6104),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6136),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6168),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6200),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6232),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6264),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6296),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6328),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6360),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6392),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6424),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6456),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6488),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6520),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6552),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7128),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6584),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6616),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6648),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6680),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6712),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6744),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6808),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6776),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6840),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6872),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6904),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6936),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 6968),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7032),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7000),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7064),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7096),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7160),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7192),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7224),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7256),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7288),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7320),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7352),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7384),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7416),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7448),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7480),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7512),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7544),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7576),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7608),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7640),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7672),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7704),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7736),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      v91 = (char *)(v3 + 7768);
      JsonConfigMgr::defineActorProperty(
        this,
        (const std::string *)(v3 + 7768),
        0.0,
        Sum,
        -3.4028235e38,
        3.4028235e38,
        0);
      __for_range_6 = &this->ability_config_group_map_;
      *(_BYTE *)(((v3 + 592) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 592) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 592, v91);
      *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v3 + 592) = std::unordered_map<int,ConfigAbilityHashMap>::begin(__for_range_6);
      *(_BYTE *)(((v3 + 624) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 624) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 624, v91);
      *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v3 + 624) = std::unordered_map<int,ConfigAbilityHashMap>::end(__for_range_6);
      while ( 1 )
      {
        v92 = (char *)(v3 + 624);
        if ( !std::__detail::operator!=<std::pair<int const,ConfigAbilityHashMap>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v3 + 592),
                (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v3 + 624)) )
          break;
        v161 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v3 + 592));
        std::get<0ul,int const,ConfigAbilityHashMap>(v161);
        config_ability_hash_map = std::get<1ul,int const,ConfigAbilityHashMap>(v161);
        __for_range_7 = &config_ability_hash_map->config_ability_override_map;
        *(_BYTE *)(((v3 + 656) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 656) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 656, v92);
        *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v3 + 656) = std::unordered_map<int,ConfigAbilityOverride>::begin(__for_range_7);
        *(_BYTE *)(((v3 + 688) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 688) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 688, v92);
        *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v3 + 688) = std::unordered_map<int,ConfigAbilityOverride>::end(__for_range_7);
        while ( std::__detail::operator!=<std::pair<int const,ConfigAbilityOverride>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v3 + 656),
                  (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v3 + 688)) )
        {
          v164 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v3 + 656));
          std::get<0ul,int const,ConfigAbilityOverride>(v164);
          config_ability_override = std::get<1ul,int const,ConfigAbilityOverride>(v164);
          *(_WORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = 0;
          std::shared_ptr<data::ConfigAbility>::shared_ptr(
            (std::shared_ptr<data::ConfigAbility> *const)(v3 + 880),
            &config_ability_override->config_ability_ptr);
          if ( std::operator==<data::ConfigAbility>(0LL, (const std::shared_ptr<data::ConfigAbility> *)(v3 + 880)) )
          {
            *(_DWORD *)(((v3 + 1936) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1936) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1967) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 1967) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1936, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1936),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadAllAbilityConfig",
              1056);
            v93 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1936),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v94 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                    v93,
                    (const char (*)[42])"config_ability_ptr is null, ability_name:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              v94,
              &config_ability_hash_map->ability_name);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1936));
            *(_DWORD *)(((v3 + 1936) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v95 = 0;
          }
          else
          {
            *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 96, v3 + 880);
            *(_DWORD *)(v3 + 96) = 0;
            v96 = ((v3 + 1232) >> 3) + 2147450880;
            *(_WORD *)v96 = 0;
            *(_BYTE *)(v96 + 2) = 0;
            v97 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 880));
            if ( *(_BYTE *)((v97 >> 3) + 0x7FFF8000) )
              v97 = __asan_report_load8(v97);
            v98 = *(_QWORD *)v97 + 72LL;
            if ( *(_BYTE *)((v98 >> 3) + 0x7FFF8000) )
              v97 = __asan_report_load8(*(_QWORD *)v97 + 72LL);
            v99 = *(void (__fastcall **)(unsigned __int64, unsigned __int64))v98;
            if ( *(char *)(((v3 + 1232) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1255) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 25) & 7) >= *(_BYTE *)(((v3 + 1255) >> 3) + 0x7FFF8000) )
            {
              v97 = __asan_report_store_n(v3 + 1232, 24LL);
            }
            v100 = v97;
            v99(v3 + 1232, v97);
            __for_range_8 = (std::vector<std::shared_ptr<data::BaseActionContainer>> *)(v3 + 1232);
            *(_BYTE *)(((v3 + 720) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 720) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 720, v100);
            *(std::vector<std::shared_ptr<data::BaseActionContainer>>::iterator *)(v3 + 720) = std::vector<std::shared_ptr<data::BaseActionContainer>>::begin(__for_range_8);
            *(_BYTE *)(((v3 + 752) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 752) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 752, v100);
            *(std::vector<std::shared_ptr<data::BaseActionContainer>>::iterator *)(v3 + 752) = std::vector<std::shared_ptr<data::BaseActionContainer>>::end(__for_range_8);
            while ( __gnu_cxx::operator!=<std::shared_ptr<data::BaseActionContainer> *,std::vector<std::shared_ptr<data::BaseActionContainer>>>(
                      (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *)(v3 + 720),
                      (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *)(v3 + 752)) )
            {
              *(_WORD *)(((v3 + 912) >> 3) + 0x7FFF8000) = 0;
              v101 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer> *,std::vector<std::shared_ptr<data::BaseActionContainer>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *const)(v3 + 720));
              std::shared_ptr<data::BaseActionContainer>::shared_ptr(
                (std::shared_ptr<data::BaseActionContainer> *const)(v3 + 912),
                v101);
              if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v3 + 96);
              ++*(_DWORD *)(v3 + 96);
              *(_WORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v3 + 944) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::DamageByAttackValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v3 + 944));
              if ( std::operator!=<data::DamageByAttackValue>(
                     (const std::shared_ptr<data::DamageByAttackValue> *)(v3 + 944),
                     0LL) )
              {
                p_attack_info = &std::__shared_ptr_access<data::DamageByAttackValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DamageByAttackValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 944))->attack_info;
                if ( JsonConfigMgr::assignAttackIdToConfigAttackInfo(this, p_attack_info) )
                {
                  *(_DWORD *)(((v3 + 2000) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 2000) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 2031) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 2031) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 2000, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 2000),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "loadAllAbilityConfig",
                    1068);
                  v103 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v3 + 2000),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v104 = common::milog::MiLogStream::operator<<<char [95],(char *[95])0>(
                           v103,
                           (const char (*)[95])"assignAttackIdToConfigAttackInfo to damage_by_attack_value_ptr->attack_in"
                                               "fo fail, inoke_index:");
                  v105 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                           v104,
                           (const unsigned int *)(v3 + 96));
                  v106 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                           v105,
                           (const char (*)[15])" ability_name:");
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v106,
                    &config_ability_hash_map->ability_name);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2000));
                  *(_DWORD *)(((v3 + 2000) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v107 = 0;
                }
                else
                {
                  v107 = 1;
                }
              }
              else
              {
                *(_WORD *)(((v3 + 976) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v3 + 976) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::TriggerAttackEvent,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v3 + 976));
                if ( std::operator!=<data::TriggerAttackEvent>(
                       (const std::shared_ptr<data::TriggerAttackEvent> *)(v3 + 976),
                       0LL) )
                {
                  v108 = &std::__shared_ptr_access<data::TriggerAttackEvent,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::TriggerAttackEvent,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 976))->attack_event.attack_info;
                  if ( JsonConfigMgr::assignAttackIdToConfigAttackInfo(this, v108) )
                  {
                    *(_DWORD *)(((v3 + 2064) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 2064) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 2095) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 2095) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 2064, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 2064),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadAllAbilityConfig",
                      1078);
                    v109 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v3 + 2064),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v110 = common::milog::MiLogStream::operator<<<char [106],(char *[106])0>(
                             v109,
                             (const char (*)[106])"assignAttackIdToConfigAttackInfo to trigger_attack_event_ptr->attack_e"
                                                  "vent.attack_info fail, inoke_index:");
                    v111 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                             v110,
                             (const unsigned int *)(v3 + 96));
                    v112 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                             v111,
                             (const char (*)[15])" ability_name:");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v112,
                      &config_ability_hash_map->ability_name);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2064));
                    *(_DWORD *)(((v3 + 2064) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v113 = 0;
                  }
                  else
                  {
                    v113 = 1;
                  }
                }
                else
                {
                  *(_WORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  std::dynamic_pointer_cast<data::TriggerAttackTargetMapEvent,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v3 + 1008));
                  if ( std::operator!=<data::TriggerAttackTargetMapEvent>(
                         (const std::shared_ptr<data::TriggerAttackTargetMapEvent> *)(v3 + 1008),
                         0LL) )
                  {
                    __for_range_9 = &std::__shared_ptr_access<data::TriggerAttackTargetMapEvent,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::TriggerAttackTargetMapEvent,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 1008))->attack_target_map_event.attack_info_map;
                    *(_BYTE *)(((v3 + 784) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v3 + 784) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v3 + 784, 0LL);
                    *(std::unordered_map<data::TargetType,data::ConfigAttackInfo>::iterator *)(v3 + 784) = std::unordered_map<data::TargetType,data::ConfigAttackInfo>::begin(__for_range_9);
                    *(_BYTE *)(((v3 + 816) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v3 + 816) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v3 + 816, 0LL);
                    *(std::unordered_map<data::TargetType,data::ConfigAttackInfo>::iterator *)(v3 + 816) = std::unordered_map<data::TargetType,data::ConfigAttackInfo>::end(__for_range_9);
                    while ( 1 )
                    {
                      if ( !std::__detail::operator!=<std::pair<data::TargetType const,data::ConfigAttackInfo>,false>(
                              (const std::__detail::_Node_iterator_base<std::pair<const data::TargetType,data::ConfigAttackInfo>,false> *)(v3 + 784),
                              (const std::__detail::_Node_iterator_base<std::pair<const data::TargetType,data::ConfigAttackInfo>,false> *)(v3 + 816)) )
                      {
                        v119 = 1;
                        goto LABEL_207;
                      }
                      v168 = std::__detail::_Node_iterator<std::pair<data::TargetType const,data::ConfigAttackInfo>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<const data::TargetType,data::ConfigAttackInfo>,false,false> *const)(v3 + 784));
                      std::get<0ul,data::TargetType const,data::ConfigAttackInfo>(v168);
                      v114 = std::get<1ul,data::TargetType const,data::ConfigAttackInfo>(v168);
                      if ( JsonConfigMgr::assignAttackIdToConfigAttackInfo(this, v114) )
                        break;
                      std::__detail::_Node_iterator<std::pair<data::TargetType const,data::ConfigAttackInfo>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<const data::TargetType,data::ConfigAttackInfo>,false,false> *const)(v3 + 784));
                    }
                    *(_DWORD *)(((v3 + 2128) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 2128) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 2159) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 2159) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 2128, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 2128),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadAllAbilityConfig",
                      1090);
                    v115 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v3 + 2128),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v116 = common::milog::MiLogStream::operator<<<char [125],(char *[125])0>(
                             v115,
                             (const char (*)[125])"assignAttackIdToConfigAttackInfo to trigger_attack_map_event_ptr->atta"
                                                  "ck_target_map_event.attack_info_map fail, inoke_index:");
                    v117 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                             v116,
                             (const unsigned int *)(v3 + 96));
                    v118 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                             v117,
                             (const char (*)[15])" ability_name:");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v118,
                      &config_ability_hash_map->ability_name);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2128));
                    *(_DWORD *)(((v3 + 2128) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v119 = 0;
LABEL_207:
                    *(_BYTE *)(((v3 + 784) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v3 + 816) >> 3) + 0x7FFF8000) = -8;
                    v120 = v119 == 1;
                  }
                  else
                  {
                    *(_WORD *)(((v3 + 1040) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_WORD *)(((v3 + 1040) >> 3) + 0x7FFF8000) )
                      __asan_report_store16();
                    std::dynamic_pointer_cast<data::TileAttackManagerMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v3 + 1040));
                    if ( std::operator!=<data::TileAttackManagerMixin>(
                           (const std::shared_ptr<data::TileAttackManagerMixin> *)(v3 + 1040),
                           0LL) )
                    {
                      v121 = &std::__shared_ptr_access<data::TileAttackManagerMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::TileAttackManagerMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 1040))->attack_info;
                      if ( JsonConfigMgr::assignAttackIdToConfigAttackInfo(this, v121) )
                      {
                        *(_DWORD *)(((v3 + 2192) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v3 + 2192) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v3 + 2223) >> 3) + 0x7FFF8000) != 0
                          && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 2223) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v3 + 2192, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v3 + 2192),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/json_config_mgr.cpp",
                          "loadAllAbilityConfig",
                          1101);
                        v122 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                 (common::milog::MiLogStream *const)(v3 + 2192),
                                 (const char (*)[16])"[CONFIG_ERROR] ");
                        v123 = common::milog::MiLogStream::operator<<<char [97],(char *[97])0>(
                                 v122,
                                 (const char (*)[97])"assignAttackIdToConfigAttackInfo to tile_attack_manager_mxin_ptr->a"
                                                     "ttack_info fail, inoke_index:");
                        v124 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                 v123,
                                 (const unsigned int *)(v3 + 96));
                        v125 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                 v124,
                                 (const char (*)[15])" ability_name:");
                        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                          v125,
                          &config_ability_hash_map->ability_name);
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2192));
                        *(_DWORD *)(((v3 + 2192) >> 3) + 0x7FFF8000) = -117901064;
                        v2 = -1;
                        v126 = 0;
                      }
                      else
                      {
                        v126 = 1;
                      }
                    }
                    else
                    {
                      *(_WORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::dynamic_pointer_cast<data::TileComplexManagerMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v3 + 1072));
                      if ( std::operator!=<data::TileComplexManagerMixin>(
                             (const std::shared_ptr<data::TileComplexManagerMixin> *)(v3 + 1072),
                             0LL) )
                      {
                        v127 = &std::__shared_ptr_access<data::TileComplexManagerMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::TileComplexManagerMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 1072))->attack_info;
                        if ( JsonConfigMgr::assignAttackIdToConfigAttackInfo(this, v127) )
                        {
                          *(_DWORD *)(((v3 + 2256) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v3 + 2256) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v3 + 2287) >> 3) + 0x7FFF8000) != 0
                            && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 2287) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v3 + 2256, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v3 + 2256),
                            &common::milog::MiLogDefault::default_log_obj_,
                            4u,
                            "./src/json_config_mgr.cpp",
                            "loadAllAbilityConfig",
                            1111);
                          v128 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                   (common::milog::MiLogStream *const)(v3 + 2256),
                                   (const char (*)[16])"[CONFIG_ERROR] ");
                          v129 = common::milog::MiLogStream::operator<<<char [99],(char *[99])0>(
                                   v128,
                                   (const char (*)[99])"assignAttackIdToConfigAttackInfo to tile_complex_manager_mixin_pt"
                                                       "r->attack_info fail, inoke_index:");
                          v130 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                   v129,
                                   (const unsigned int *)(v3 + 96));
                          v131 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                   v130,
                                   (const char (*)[15])" ability_name:");
                          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                            v131,
                            &config_ability_hash_map->ability_name);
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2256));
                          *(_DWORD *)(((v3 + 2256) >> 3) + 0x7FFF8000) = -117901064;
                          v2 = -1;
                          v132 = 0;
                        }
                        else
                        {
                          v132 = 1;
                        }
                      }
                      else
                      {
                        v132 = 2;
                      }
                      std::shared_ptr<data::TileComplexManagerMixin>::~shared_ptr((std::shared_ptr<data::TileComplexManagerMixin> *const)(v3 + 1072));
                      if ( v132 )
                      {
                        if ( v132 == 2 )
                          v126 = 2;
                        else
                          v126 = 1;
                      }
                      else
                      {
                        v126 = 0;
                      }
                    }
                    std::shared_ptr<data::TileAttackManagerMixin>::~shared_ptr((std::shared_ptr<data::TileAttackManagerMixin> *const)(v3 + 1040));
                    if ( v126 )
                    {
                      if ( v126 == 2 )
                        v120 = 2;
                      else
                        v120 = 1;
                    }
                    else
                    {
                      v120 = 0;
                    }
                  }
                  std::shared_ptr<data::TriggerAttackTargetMapEvent>::~shared_ptr((std::shared_ptr<data::TriggerAttackTargetMapEvent> *const)(v3 + 1008));
                  if ( v120 )
                  {
                    if ( v120 == 2 )
                      v113 = 2;
                    else
                      v113 = 1;
                  }
                  else
                  {
                    v113 = 0;
                  }
                }
                std::shared_ptr<data::TriggerAttackEvent>::~shared_ptr((std::shared_ptr<data::TriggerAttackEvent> *const)(v3 + 976));
                if ( v113 )
                {
                  if ( v113 == 2 )
                    v107 = 2;
                  else
                    v107 = 1;
                }
                else
                {
                  v107 = 0;
                }
              }
              std::shared_ptr<data::DamageByAttackValue>::~shared_ptr((std::shared_ptr<data::DamageByAttackValue> *const)(v3 + 944));
              if ( v107 )
              {
                if ( v107 == 2 )
                  v133 = 2;
                else
                  v133 = 1;
              }
              else
              {
                v133 = 0;
              }
              std::shared_ptr<data::BaseActionContainer>::~shared_ptr((std::shared_ptr<data::BaseActionContainer> *const)(v3 + 912));
              if ( v133 )
              {
                if ( v133 == 2 )
                  v134 = 2;
                else
                  v134 = 1;
              }
              else
              {
                v134 = 0;
              }
              *(_WORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = -1800;
              *(_WORD *)(((v3 + 976) >> 3) + 0x7FFF8000) = -1800;
              *(_WORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = -1800;
              *(_WORD *)(((v3 + 1040) >> 3) + 0x7FFF8000) = -1800;
              *(_WORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = -1800;
              if ( !v134 )
              {
                v135 = 0;
                goto LABEL_259;
              }
              __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer> *,std::vector<std::shared_ptr<data::BaseActionContainer>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *const)(v3 + 720));
            }
            v135 = 1;
LABEL_259:
            std::vector<std::shared_ptr<data::BaseActionContainer>>::~vector((std::vector<std::shared_ptr<data::BaseActionContainer>> *const)(v3 + 1232));
            *(_WORD *)(((v3 + 912) >> 3) + 0x7FFF8000) = -1800;
            v136 = ((v3 + 1232) >> 3) + 2147450880;
            *(_WORD *)v136 = -1800;
            *(_BYTE *)(v136 + 2) = -8;
            *(_BYTE *)(((v3 + 720) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v3 + 752) >> 3) + 0x7FFF8000) = -8;
            v95 = v135 == 1;
          }
          std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v3 + 880));
          *(_WORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = -1800;
          *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( !v95 )
          {
            v137 = 0;
            goto LABEL_264;
          }
          std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v3 + 656));
        }
        v137 = 1;
LABEL_264:
        *(_BYTE *)(((v3 + 656) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 688) >> 3) + 0x7FFF8000) = -8;
        if ( v137 != 1 )
        {
          v138 = 0;
          goto LABEL_268;
        }
        std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v3 + 592));
      }
      v138 = 1;
LABEL_268:
      *(_BYTE *)(((v3 + 592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 624) >> 3) + 0x7FFF8000) = -8;
      if ( v138 == 1 )
        v2 = 0;
      data::AbilityProperty::~AbilityProperty((data::AbilityProperty *const)(v3 + 2960));
    }
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 1104));
  if ( v169 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF816C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 372) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF83CC) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF83D4) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF83DC) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF83E4) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF83EC) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_7(v3, 8064LL, v169);
  }
  return v2;
};

// Line 1125: range 000000000F2534EC-000000000F25354D
void __cdecl JsonConfigMgr::defineEntityProperty(
        JsonConfigMgr *const this,
        const std::string *prop_key,
        float default_value,
        data::StackMethod stack_method,
        float floor,
        float ceiling,
        bool succeed)
{
  JsonConfigMgr::defineProperty(this, prop_key, default_value, Entity, stack_method, floor, ceiling, succeed);
};

// Line 1131: range 000000000F25354E-000000000F2535AF
void __cdecl JsonConfigMgr::defineActorProperty(
        JsonConfigMgr *const this,
        const std::string *prop_key,
        float default_value,
        data::StackMethod stack_method,
        float floor,
        float ceiling,
        bool succeed)
{
  JsonConfigMgr::defineProperty(this, prop_key, default_value, Actor, stack_method, floor, ceiling, succeed);
};

// Line 1137: range 000000000F2535B0-000000000F253AF0
// local variable allocation has failed, the output may be wrong!
void __cdecl JsonConfigMgr::defineProperty(
        JsonConfigMgr *const this,
        const std::string *prop_key,
        float default_value,
        data::PropertyType type,
        data::StackMethod stack_method,
        float floor,
        float ceiling,
        bool succeed)
{
  unsigned __int64 v8; // r13
  __int64 v9; // rax
  _DWORD *v10; // r12
  __int64 v11; // rsi
  __int64 v12; // rsi
  __int64 v13; // rsi
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 v16; // rdx
  __int64 v17; // rsi
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAbilityPropertyEntry>,false,true>,bool> v18; // rax
  common::milog::MiLogStream *v19; // rdx
  char v24[224]; // [rsp+30h] [rbp-E0h] BYREF

  v8 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v9 = __asan_stack_malloc_2(192LL);
    if ( v9 )
      v8 = v9;
  }
  *(_QWORD *)v8 = 1102416563LL;
  *(_QWORD *)(v8 + 8) = "2 48 32 9 <unknown> 112 36 10 entry:1138";
  *(_QWORD *)(v8 + 16) = JsonConfigMgr::defineProperty;
  v10 = (_DWORD *)(v8 >> 3);
  v10[536862720] = -235802127;
  v10[536862721] = 61937;
  v10[536862722] = -219021312;
  v10[536862723] = 62194;
  v10[536862724] = -217841664;
  v10[536862725] = -202116109;
  if ( *(_BYTE *)(((v8 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v8 + 112) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v8 + 112, prop_key);
  *(_DWORD *)(v8 + 112) = 0;
  v11 = (((_BYTE)v8 + 116) & 7u) + 3;
  if ( *(_BYTE *)(((v8 + 116) >> 3) + 0x7FFF8000) != 0
    && (char)(((v8 + 116) & 7) + 3) >= *(_BYTE *)(((v8 + 116) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v8 + 116, v11);
  }
  *(_DWORD *)(v8 + 116) = 0;
  if ( *(_BYTE *)(((v8 + 120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v8 + 120) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v8 + 120, v11);
  *(_DWORD *)(v8 + 120) = 2139095039;
  v12 = (((_BYTE)v8 + 124) & 7u) + 3;
  if ( *(_BYTE *)(((v8 + 124) >> 3) + 0x7FFF8000) != 0
    && (char)(((v8 + 124) & 7) + 3) >= *(_BYTE *)(((v8 + 124) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v8 + 124, v12);
  }
  *(_DWORD *)(v8 + 124) = -8388609;
  if ( *(_BYTE *)(((v8 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v8 + 128) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v8 + 128, v12);
  *(_DWORD *)(v8 + 128) = 1;
  v13 = ((_BYTE)v8 - 124) & 7;
  v14 = (*(_BYTE *)(((v8 + 132) >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((v8 + 132) >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_store1(v8 + 132, v13, v14);
  *(_BYTE *)(v8 + 132) = 0;
  v15 = ((_BYTE)v8 - 123) & 7;
  v16 = (*(_BYTE *)(((v8 + 133) >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((v8 + 133) >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_store1(v8 + 133, v15, v16);
  *(_BYTE *)(v8 + 133) = 0;
  if ( *(_BYTE *)(((v8 + 136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v8 + 136) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v8 + 136, v15);
  *(_DWORD *)(v8 + 136) = 2139095039;
  v17 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((v8 + 140) >> 3) + 0x7FFF8000) != 0
    && (char)(((v8 - 116) & 7) + 3) >= *(_BYTE *)(((v8 + 140) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v8 + 140, v17);
  }
  *(_DWORD *)(v8 + 140) = -8388609;
  if ( *(char *)(((v8 + 144) >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(v8 + 144, v17, v8 + 144);
  *(_BYTE *)(v8 + 144) = 0;
  *(_DWORD *)(v8 + 112) = type;
  *(float *)(v8 + 116) = default_value;
  *(float *)(v8 + 120) = ceiling;
  *(float *)(v8 + 124) = floor;
  *(_DWORD *)(v8 + 128) = stack_method;
  *(_BYTE *)(v8 + 132) = succeed;
  v18 = std::unordered_map<std::string,data::ConfigAbilityPropertyEntry>::emplace<std::string const&,data::ConfigAbilityPropertyEntry&>(
          &this->property_map_,
          prop_key,
          (data::ConfigAbilityPropertyEntry *)(v8 + 112),
          (const std::string *)&this->property_map_,
          (data::ConfigAbilityPropertyEntry *)succeed);
  if ( !v18.second )
  {
    if ( *(char *)(((v8 + 48) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v8 + 79) >> 3) + 0x7FFF8000) != 0
      && (char)((v8 + 79) & 7) >= *(_BYTE *)(((v8 + 79) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v8 + 48, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v8 + 48),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "defineProperty",
      1147);
    v19 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            (common::milog::MiLogStream *const)(v8 + 48),
            (const char (*)[20])"duplicate prop_key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, prop_key);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v8 + 48));
  }
  if ( v24 == (char *)v8 )
  {
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v8 = 1172321806LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1153: range 000000000F253AF2-000000000F253CD2
data::ConfigAbilityPtr __cdecl JsonConfigMgr::findAbilityConfig(
        const JsonConfigMgr *const this,
        const std::string *ability_name)
{
  const std::string *v2; // rdx
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  data::ConfigAbilityPtr result; // rax
  const std::string *ability_namea; // [rsp+8h] [rbp-B8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  ability_namea = v2;
  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findAbilityConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862723] = -202116109;
  std::allocator<char>::allocator(v3 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v3 + 64),
    "Default",
    (const std::allocator<char> *)(v3 + 48));
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  JsonConfigMgr::findAbilityConfig(this, ability_name, ability_namea);
  std::string::~string((void *)(v3 + 64));
  *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v3 + 48);
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1158: range 000000000F253CD4-000000000F253D47
data::ConfigAbilityPtr __cdecl JsonConfigMgr::findAbilityConfig(
        const JsonConfigMgr *const this,
        const std::string *ability_name,
        const std::string *override_name)
{
  const std::string *v3; // rcx
  data::ConfigAbilityPtr result; // rax
  const std::string *override_namea; // [rsp+0h] [rbp-30h]
  int32_t ability_name_hash; // [rsp+28h] [rbp-8h]

  override_namea = v3;
  ability_name_hash = getStringHash(override_name);
  getStringHash(override_namea);
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = JsonConfigMgr::findAbilityConfig(this, (uint32_t)ability_name, ability_name_hash);
  result._M_ptr = (std::__shared_ptr<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1165: range 000000000F253D48-000000000F2545D5
const JsonConfigMgr *__fastcall JsonConfigMgr::findAbilityConfig(
        const JsonConfigMgr *const this,
        const char *ability_name_hash,
        uint32_t override_name_hash,
        int a4)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::unordered_map<int,ConfigAbilityHashMap> *p_ability_config_group_map; // rcx
  int v8; // edi
  char v9; // al
  const std::unordered_map<int,ConfigAbilityHashMap> *v10; // rdx
  bool v11; // al
  common::milog::MiLogStream *v12; // rax
  __int64 v13; // rsi
  bool v14; // al
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::pointer v18; // rax
  const JsonConfigMgr *thisa; // [rsp+10h] [rbp-210h]
  std::unordered_map<int,ConfigAbilityOverride> *config_ability_override_map; // [rsp+28h] [rbp-1F8h]
  char v25[496]; // [rsp+30h] [rbp-1F0h] BYREF

  thisa = (const JsonConfigMgr *)ability_name_hash;
  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(448LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 22 ability_name_hash:1164 112 4 23 ov"
                        "erride_name_hash:1164 128 8 13 it_group:1167 160 8 9 <unknown> 192 8 15 it_ability:1178 224 8 9 "
                        "<unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findAbilityConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -218959360;
  v6[536862725] = -218959360;
  v6[536862726] = -218959360;
  v6[536862727] = -218959360;
  v6[536862729] = -218959118;
  v6[536862731] = -218959118;
  v6[536862733] = -202116109;
  *(_DWORD *)(v4 + 96) = override_name_hash;
  *(_DWORD *)(v4 + 112) = a4;
  if ( !(_BYTE)`guard variable for'JsonConfigMgr::findAbilityConfig(unsigned int,unsigned int)::default_override_name_hash
    && __cxa_guard_acquire(&`guard variable for'JsonConfigMgr::findAbilityConfig(unsigned int,unsigned int)::default_override_name_hash) )
  {
    std::allocator<char>::allocator(v4 + 48);
    ability_name_hash = "Default";
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v4 + 256),
      "Default",
      (const std::allocator<char> *)(v4 + 48));
    JsonConfigMgr::findAbilityConfig(unsigned int,unsigned int)const::default_override_name_hash = getStringHash((const std::string *)(v4 + 256));
    __cxa_guard_release(&`guard variable for'JsonConfigMgr::findAbilityConfig(unsigned int,unsigned int)::default_override_name_hash);
    std::string::~string((void *)(v4 + 256));
    *(_DWORD *)(((v4 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v4 + 48);
    *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
  }
  *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
  p_ability_config_group_map = &thisa->ability_config_group_map_;
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 4;
  v8 = *(_DWORD *)(v4 + 96);
  v9 = *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000);
  LOBYTE(ability_name_hash) = v9 != 0;
  if ( v9 != 0 && v9 <= 3 )
  {
    v8 = v4 + 64;
    __asan_report_store4(v4 + 64, ability_name_hash);
  }
  *(_DWORD *)(v4 + 64) = v8;
  if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 128, ability_name_hash);
  *(std::unordered_map<int,ConfigAbilityHashMap>::const_iterator *)(v4 + 128) = std::unordered_map<int,ConfigAbilityHashMap>::find(
                                                                                  p_ability_config_group_map,
                                                                                  (const std::unordered_map<int,ConfigAbilityHashMap>::key_type *)(v4 + 64));
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
  v10 = &thisa->ability_config_group_map_;
  if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 160, v4 + 64);
  *(std::unordered_map<int,ConfigAbilityHashMap>::const_iterator *)(v4 + 160) = std::unordered_map<int,ConfigAbilityHashMap>::end(v10);
  v11 = std::__detail::operator==<std::pair<int const,ConfigAbilityHashMap>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v4 + 128),
          (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v4 + 160));
  *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
  if ( v11 )
  {
    *(_DWORD *)(((v4 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v4 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 320),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "findAbilityConfig",
      1170);
    v12 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            (common::milog::MiLogStream *const)(v4 + 320),
            (const char (*)[30])"can't find ability_name_hash:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 96));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 320));
    *(_DWORD *)(((v4 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigAbility>::shared_ptr((std::shared_ptr<data::ConfigAbility> *const)this, 0LL);
  }
  else
  {
    config_ability_override_map = &std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v4 + 128))->second.config_ability_override_map;
    if ( !*(_DWORD *)(v4 + 112) )
      *(_DWORD *)(v4 + 112) = JsonConfigMgr::findAbilityConfig(unsigned int,unsigned int)const::default_override_name_hash;
    *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 4;
    v13 = *(unsigned int *)(v4 + 112);
    if ( *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 80, v13);
    *(_DWORD *)(v4 + 80) = v13;
    if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 192, v13);
    *(std::unordered_map<int,ConfigAbilityOverride>::const_iterator *)(v4 + 192) = std::unordered_map<int,ConfigAbilityOverride>::find(
                                                                                     config_ability_override_map,
                                                                                     (const std::unordered_map<int,ConfigAbilityOverride>::key_type *)(v4 + 80));
    *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 224, v4 + 80);
    *(std::unordered_map<int,ConfigAbilityOverride>::const_iterator *)(v4 + 224) = std::unordered_map<int,ConfigAbilityOverride>::end(config_ability_override_map);
    v14 = std::__detail::operator==<std::pair<int const,ConfigAbilityOverride>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v4 + 192),
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v4 + 224));
    *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = -8;
    if ( v14 )
    {
      *(_DWORD *)(((v4 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "findAbilityConfig",
        1181);
      v15 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              (common::milog::MiLogStream *const)(v4 + 384),
              (const char (*)[40])"can't find override override_name_hash:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v15,
              (const unsigned int *)(v4 + 112));
      v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v16,
              (const char (*)[20])" ability_name_hash:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 96));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 384));
      *(_DWORD *)(((v4 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigAbility>::shared_ptr((std::shared_ptr<data::ConfigAbility> *const)this, 0LL);
    }
    else
    {
      v18 = std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v4 + 192));
      std::shared_ptr<data::ConfigAbility>::shared_ptr(
        (std::shared_ptr<data::ConfigAbility> *const)this,
        &v18->second.config_ability_ptr);
    }
  }
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 1188: range 000000000F2545D6-000000000F254884
std::pair<int,int> __fastcall JsonConfigMgr::findAbilityConfigHash(
        const JsonConfigMgr *const this,
        uint64_t ability_combined_hash)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::unordered_map<long unsigned int,std::pair<int,int>> *p_ability_config_hash_value_map; // rdx
  std::unordered_map<long unsigned int,std::pair<int,int>> *v6; // rdx
  char *v7; // rsi
  bool v8; // al
  std::pair<int,int> result; // rax
  std::__detail::_Node_const_iterator<std::pair<long unsigned int const,std::pair<int,int> >,false,false>::pointer v10; // rax
  char v11[192]; // [rsp+10h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 9 <unknown> 64 8 9 iter:1189 96 8 9 <unknown> 128 8 26 ability_combined_hash:1187";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findAbilityConfigHash;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -202116352;
  *(_QWORD *)(v2 + 128) = ability_combined_hash;
  p_ability_config_hash_value_map = &this->ability_config_hash_value_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, ability_combined_hash);
  *(std::unordered_map<long unsigned int,std::pair<int,int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned long,std::pair<int,int>>::find(
                                                                                             p_ability_config_hash_value_map,
                                                                                             (const std::unordered_map<long unsigned int,std::pair<int,int>>::key_type *)(v2 + 128));
  v6 = &this->ability_config_hash_value_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 128);
  *(std::unordered_map<long unsigned int,std::pair<int,int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned long,std::pair<int,int>>::end(v6);
  v7 = (char *)(v2 + 96);
  v8 = std::__detail::operator==<std::pair<unsigned long const,std::pair<int,int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<long unsigned int const,std::pair<int,int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<long unsigned int const,std::pair<int,int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 48, v7);
    *(_DWORD *)(v2 + 48) = 0;
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 32, v7);
    *(_DWORD *)(v2 + 32) = 0;
    result = std::make_pair<int,int>((int *)(v2 + 32), (int *)(v2 + 48));
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned long const,std::pair<int,int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<long unsigned int const,std::pair<int,int> >,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) )
      v10 = (std::__detail::_Node_const_iterator<std::pair<long unsigned int const,std::pair<int,int> >,false,false>::pointer)__asan_report_load8(&v10->second);
    result = v10->second;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1198: range 000000000F254886-000000000F254EA7
std::string *__fastcall JsonConfigMgr::findModifierName[abi:cxx11](
        std::string *retstr,
        const JsonConfigMgr *const this,
        uint32_t ability_name_hash,
        uint32_t modifier_name_hash)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::unordered_map<int,ConfigAbilityHashMap> *p_ability_config_group_map; // rcx
  int v8; // edi
  char v9; // al
  const std::unordered_map<int,ConfigAbilityHashMap> *v10; // rdx
  bool v11; // al
  common::milog::MiLogStream *v12; // rax
  const char *v13; // rsi
  uint32_t v14; // ecx
  char v15; // al
  std::unordered_map<int,std::string> *p_modifier_name_hash_map; // rsi
  const JsonConfigMgr *thisa; // [rsp+10h] [rbp-170h]
  char v22[352]; // [rsp+20h] [rbp-160h] BYREF

  thisa = this;
  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 22 ability_name_hash"
                        ":1197 128 8 13 it_group:1199 160 8 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findModifierName[abi:cxx11];
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556927;
  v6[536862723] = -234556924;
  v6[536862724] = -218959360;
  v6[536862725] = -218959360;
  v6[536862727] = -218959118;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 112) = ability_name_hash;
  p_ability_config_group_map = &this->ability_config_group_map_;
  v8 = *(_DWORD *)(v4 + 112);
  v9 = *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000);
  LOBYTE(this) = v9 != 0;
  if ( v9 != 0 && v9 <= 3 )
  {
    v8 = v4 + 80;
    __asan_report_store4(v4 + 80, this);
  }
  *(_DWORD *)(v4 + 80) = v8;
  if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 128, this);
  *(std::unordered_map<int,ConfigAbilityHashMap>::const_iterator *)(v4 + 128) = std::unordered_map<int,ConfigAbilityHashMap>::find(
                                                                                  p_ability_config_group_map,
                                                                                  (const std::unordered_map<int,ConfigAbilityHashMap>::key_type *)(v4 + 80));
  *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
  v10 = &thisa->ability_config_group_map_;
  if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 160, v4 + 80);
  *(std::unordered_map<int,ConfigAbilityHashMap>::const_iterator *)(v4 + 160) = std::unordered_map<int,ConfigAbilityHashMap>::end(v10);
  v11 = std::__detail::operator==<std::pair<int const,ConfigAbilityHashMap>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v4 + 128),
          (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v4 + 160));
  *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
  if ( v11 )
  {
    *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "findModifierName",
      1202);
    v12 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            (common::milog::MiLogStream *const)(v4 + 192),
            (const char (*)[30])"can't find ability_name_hash:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 112));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
    *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
    *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v4 + 48);
    std::string::basic_string<std::allocator<char>>(retstr, byte_1A4C6700, (const std::allocator<char> *)(v4 + 48));
    std::allocator<char>::~allocator(v4 + 48);
  }
  else
  {
    *(_DWORD *)(((v4 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v4 + 64);
    v13 = byte_1A4C6700;
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v4 + 256),
      byte_1A4C6700,
      (const std::allocator<char> *)(v4 + 64));
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = 4;
    v14 = modifier_name_hash;
    v15 = *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000);
    if ( v15 != 0 && v15 <= 3 )
    {
      LOBYTE(v13) = v15 != 0;
      __asan_report_store4(v4 + 96, v13);
    }
    *(_DWORD *)(v4 + 96) = v14;
    p_modifier_name_hash_map = &std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v4 + 128))->second.modifier_name_hash_map;
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                            + 15) >> 3)
                                                          + 0x7FFF8000) )
    {
      p_modifier_name_hash_map = (std::unordered_map<int,std::string> *)32;
      __asan_report_store_n(retstr, 32LL);
    }
    common::tools::MiscUtils::findMapWithDefaultValue<std::unordered_map<int,std::string>>(
      retstr,
      p_modifier_name_hash_map,
      (const std::unordered_map<int,std::string>::key_type *)(v4 + 96),
      (std::unordered_map<int,std::string>::mapped_type *)(v4 + 256));
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
    std::string::~string((void *)(v4 + 256));
    *(_DWORD *)(((v4 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v4 + 64);
  }
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 1209: range 000000000F254EA8-000000000F25509E
const JsonConfigMgr *__fastcall JsonConfigMgr::findWidgetNewConfig(
        const JsonConfigMgr *const this,
        __int64 material_id,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  bool v6; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false>::pointer v7; // rax
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>> *config_map; // [rsp+28h] [rbp-A8h]
  char v11[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 16 material_id:1208 64 8 9 iter:1211 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findWidgetNewConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  config_map = (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>> *)(material_id + 6568);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, material_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::find(config_map, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::key_type *)(v3 + 48));
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::cend(config_map);
  v6 = std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v6 )
  {
    v7 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false> *const)(v3 + 64));
    std::shared_ptr<data::ConfigBaseWidgetToy>::shared_ptr(
      (std::shared_ptr<data::ConfigBaseWidgetToy> *const)this,
      &v7->second);
  }
  else
  {
    std::shared_ptr<data::ConfigBaseWidgetToy>::shared_ptr((std::shared_ptr<data::ConfigBaseWidgetToy> *const)this, 0LL);
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 1220: range 000000000F2550A0-000000000F2552DC
const JsonConfigMgr *__fastcall JsonConfigMgr::findWidgetToyCreateGadgetConfig(
        const JsonConfigMgr *const this,
        __int64 material_id,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  bool v6; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false>::pointer v7; // rax
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>> *config_map; // [rsp+28h] [rbp-A8h]
  char v11[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 16 material_id:1219 64 8 9 iter:1222 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findWidgetToyCreateGadgetConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  config_map = (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>> *)(material_id + 6568);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, material_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::find(config_map, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::key_type *)(v3 + 48));
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::cend(config_map);
  v6 = std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v6
    && (v7 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false> *const)(v3 + 64)),
        std::operator!=<data::ConfigBaseWidgetToy>(&v7->second, 0LL)) )
  {
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false> *const)(v3 + 64));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigWidgetToyCreateGadgetBase,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)this);
  }
  else
  {
    std::shared_ptr<data::ConfigWidgetToyCreateGadgetBase>::shared_ptr(
      (std::shared_ptr<data::ConfigWidgetToyCreateGadgetBase> *const)this,
      0LL);
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 1235: range 000000000F2552DE-000000000F2554A5
const data::ConfigWidgetGadget *__fastcall JsonConfigMgr::findWidgetGadgetConfig(
        const JsonConfigMgr *const this,
        __int64 gadget_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  const data::ConfigWidgetGadget *result; // rax
  WidgetJsonNewConfig *gadget_config_map; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 gadget_id:1234 64 8 9 iter:1237 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findWidgetGadgetConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = gadget_id;
  gadget_config_map = &this->widget_json_new_config_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, gadget_id);
  *(std::unordered_map<unsigned int,data::ConfigWidgetGadget>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::ConfigWidgetGadget>::find(
                                                                                              &gadget_config_map->config_main_widget_toy.gadget_config_map,
                                                                                              (const std::unordered_map<unsigned int,data::ConfigWidgetGadget>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,data::ConfigWidgetGadget>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::ConfigWidgetGadget>::end(&gadget_config_map->config_main_widget_toy.gadget_config_map);
  v5 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigWidgetGadget>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigWidgetGadget>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigWidgetGadget>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigWidgetGadget>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigWidgetGadget>,false,false> *const)(v2 + 64))->second;
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1247: range 000000000F2554A6-000000000F2555B5
bool __cdecl JsonConfigMgr::checkAbilityName(JsonConfigMgr *const this, const std::string *ability_name)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  __int64 StringHash; // rsi
  bool result; // al
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 22 ability_name_hash:1248";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkAbilityName;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  StringHash = (unsigned int)getStringHash(ability_name);
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, StringHash);
  *(_DWORD *)(v2 + 32) = StringHash;
  result = common::tools::MiscUtils::isContains<std::unordered_map<int,ConfigAbilityHashMap>,unsigned int>(
             &this->ability_config_group_map_,
             (const unsigned int *)(v2 + 32));
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1254: range 000000000F2555B6-000000000F25580D
data::ConfigAbilityModifierPtr __cdecl JsonConfigMgr::findModifierConfig(
        data::ConfigAbility *config_ability,
        const std::string *modifier_name)
{
  const std::string *v2; // rdx
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  data::ConfigAbilityModifierPtr result; // rax
  const std::string *modifier_namea; // [rsp+8h] [rbp-B8h]
  std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *__for_range; // [rsp+20h] [rbp-A0h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true>::reference __in; // [rsp+28h] [rbp-98h]
  const std::string *name; // [rsp+30h] [rbp-90h]
  const std::shared_ptr<data::ConfigAbilityModifier> *config_modifier_ptr; // [rsp+38h] [rbp-88h]
  char v12[128]; // [rsp+40h] [rbp-80h] BYREF

  modifier_namea = v2;
  v3 = (std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *)v4;
  }
  v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true>::__node_type *)1102416563;
  v3[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true>::__node_type *)"2 32 8 16 __for_begin:1255 64 8 14 __for_end:1255";
  v3[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true>::__node_type *)JsonConfigMgr::findModifierConfig;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  __for_range = (std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *)&modifier_name[4]._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[4], modifier_name);
  v3[4]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::begin(__for_range)._M_cur;
  if ( *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[8], modifier_name);
  v3[8]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,true>(
            v3 + 4,
            v3 + 8) )
  {
    __in = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator*(v3 + 4);
    name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(__in);
    config_modifier_ptr = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(__in);
    if ( std::operator==<char>(modifier_namea, name) )
    {
      std::shared_ptr<data::ConfigAbilityModifier>::shared_ptr(
        (std::shared_ptr<data::ConfigAbilityModifier> *const)config_ability,
        config_modifier_ptr);
      result._M_refcount._M_pi = 0LL;
      goto LABEL_14;
    }
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator++(v3 + 4);
  }
  result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)1;
LABEL_14:
  *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) = -8;
  if ( LODWORD(result._M_refcount._M_pi) == 1 )
    std::shared_ptr<data::ConfigAbilityModifier>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityModifier> *const)config_ability,
      0LL);
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)config_ability;
  return result;
};

// Line 1266: range 000000000F25580E-000000000F255AA4
data::ConfigAbilityModifierPtr __cdecl JsonConfigMgr::findModifierConfig(
        const JsonConfigMgr *const this,
        const std::string *ability_name,
        const std::string *modifier_name)
{
  const std::string *v3; // rcx
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *p_modifiers; // rdx
  std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *v8; // rdx
  bool v9; // al
  std::shared_ptr<data::ConfigAbilityModifier> *p_second; // rdx
  data::ConfigAbilityModifierPtr result; // rax
  const std::string *modifier_namea; // [rsp+0h] [rbp-C0h]
  char v13[160]; // [rsp+20h] [rbp-A0h] BYREF

  modifier_namea = v3;
  v4 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 8 9 iter:1272 64 8 9 <unknown> 96 16 23 config_ability_ptr:1267";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findModifierConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -218959360;
  v6[536862723] = -202178560;
  if ( *(_WORD *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  JsonConfigMgr::findAbilityConfig((const JsonConfigMgr *const)(v4 + 96), ability_name);
  if ( std::operator==<data::ConfigAbility>(0LL, (const std::shared_ptr<data::ConfigAbility> *)(v4 + 96)) )
    goto LABEL_7;
  p_modifiers = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96))->modifiers;
  if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 32, v4 + 96);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v4 + 32) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::find(p_modifiers, modifier_namea);
  v8 = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96))->modifiers;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, modifier_namea);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v4 + 64) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::end(v8);
  v9 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v4 + 32),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v4 + 64));
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
LABEL_7:
    std::shared_ptr<data::ConfigAbilityModifier>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityModifier> *const)this,
      0LL);
  }
  else
  {
    p_second = &std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v4 + 32))->second;
    std::shared_ptr<data::ConfigAbilityModifier>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityModifier> *const)this,
      p_second);
  }
  std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v4 + 96));
  if ( v13 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1282: range 000000000F255AA6-000000000F2569FD
int32_t __cdecl JsonConfigMgr::loadAllAvatarConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  unsigned int first; // ecx
  char v7; // al
  const std::string *p_combat_config; // rdi
  std::string *p_avatar_json_base_dir; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  int32_t HashValue; // r14d
  char *v17; // rsi
  std::map<unsigned int,int>::mapped_type *v18; // rax
  int32_t *v19; // rdx
  char v20; // cl
  data::ConfigCombat *p_combat; // rdx
  std::shared_ptr<data::ConfigAvatar> *v22; // r8
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false>,bool> v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  unsigned __int64 v28; // rax
  common::milog::MiLogStream *v29; // rax
  int32_t ret; // [rsp+1Ch] [rbp-354h]
  data::AvatarExcelConfigMap *__for_range; // [rsp+28h] [rbp-348h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::AvatarExcelConfig>,false,false>::reference p; // [rsp+30h] [rbp-340h]
  char v36[816]; // [rsp+40h] [rbp-330h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(768LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 48 4 14 avatar_id:1288 64 8 16 __for_begin:1286 96 8 14 __for_end:1286 128 16 22 config_avata"
                        "r_ptr:1299 160 32 23 avatar_config_path:1290 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unk"
                        "nown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 40 9 root:1292 688 48 27 avat"
                        "ar_combat_hash_map:1285";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadAllAvatarConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -219021312;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959360;
  v4[536862741] = 62194;
  v4[536862743] = -202116109;
  ret = 0;
  std::map<unsigned int,int>::map((std::map<unsigned int,int> *const)(v2 + 688));
  __for_range = &config->txt_config_mgr.avatar_config_mgr.avatar_excel_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,data::AvatarExcelConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::AvatarExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::unordered_map<unsigned int,data::AvatarExcelConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::AvatarExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::AvatarExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::AvatarExcelConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::AvatarExcelConfig>,false> *)(v2 + 96)) )
      break;
    p = std::__detail::_Node_iterator<std::pair<unsigned int const,data::AvatarExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::AvatarExcelConfig>,false,false> *const)(v2 + 64));
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p);
    }
    first = p->first;
    v7 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(v2 + 48, v5);
    }
    *(_DWORD *)(v2 + 48) = first;
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    p_combat_config = &p->second.combat_config;
    p_avatar_json_base_dir = &config->avatar_json_base_dir;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      p_avatar_json_base_dir = (std::string *)32;
      p_combat_config = (const std::string *)(v2 + 224);
      __asan_report_store_n(v2 + 224, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 224), p_avatar_json_base_dir, p_combat_config);
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 160), (std::string *)(v2 + 224), ".json");
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], v2 + 160);
    v10 = ((v2 + 608) >> 3) + 2147450880;
    *(_DWORD *)v10 = 0;
    *(_BYTE *)(v10 + 4) = 0;
    Json::Value::Value(v2 + 608, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 160), (Json::Value *)(v2 + 608)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadAllAvatarConfig",
        1295);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              v11,
              (const char (*)[27])"parseJsonFile fails, path:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v2 + 160));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigAvatar::parseFromJson((const Json::Value *)(v2 + 128));
      if ( std::operator==<data::ConfigAvatar>((const std::shared_ptr<data::ConfigAvatar> *)(v2 + 128), 0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllAvatarConfig",
          1302);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 352),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v13,
                (const char (*)[27])"parseFromJson fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v2 + 160));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        v15 = std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
        HashValue = data::ConfigCombat::getHashValue(&v15->combat);
        v17 = (char *)(v2 + 48);
        v18 = std::map<unsigned int,int>::operator[](
                (std::map<unsigned int,int> *const)(v2 + 688),
                (const std::map<unsigned int,int>::key_type *)(v2 + 48));
        v19 = v18;
        v20 = *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000);
        if ( v20 != 0 && (char)(((unsigned __int8)v18 & 7) + 3) >= v20 )
        {
          LOBYTE(v17) = v20 != 0;
          __asan_report_store4(v18, v17);
        }
        *v19 = HashValue;
        p_combat = &std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128))->combat;
        if ( JsonConfigMgr::assignAttackIdToAllConfigAttackInfoInConfigCombat(this, p_combat) )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllAvatarConfig",
            1309);
          v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 416),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v24 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                  v23,
                  (const char (*)[67])"assignAttackIdToAllConfigAttackInfoInConfigCombat fail, avatar_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        v25 = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::emplace<unsigned int &,std::shared_ptr<data::ConfigAvatar>&>(
                &this->config_avatar_map_,
                (unsigned int *)(v2 + 48),
                (std::shared_ptr<data::ConfigAvatar> *)(v2 + 128),
                (unsigned int *)&this->config_avatar_map_,
                v22);
        if ( !v25.second )
        {
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllAvatarConfig",
            1314);
          v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 480),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v27 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  v26,
                  (const char (*)[21])"duplicate avatar_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      std::shared_ptr<data::ConfigAvatar>::~shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)(v2 + 128));
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 608));
    std::string::~string((void *)(v2 + 160));
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    v28 = ((v2 + 608) >> 3) + 2147450880;
    *(_DWORD *)v28 = -117901064;
    *(_BYTE *)(v28 + 4) = -8;
    *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -1800;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::AvatarExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::AvatarExcelConfig>,false,false> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 544, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 544),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/json_config_mgr.cpp",
    "loadAllAvatarConfig",
    1318);
  v29 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          (common::milog::MiLogStream *const)(v2 + 544),
          (const char (*)[22])"[AVATAR_COMBAT_HASH] ");
  common::milog::MiLogStream::operator<<<unsigned int,int>(v29, (const std::map<unsigned int,int> *)(v2 + 688));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
  *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
  std::map<unsigned int,int>::~map((std::map<unsigned int,int> *const)(v2 + 688));
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return ret;
};

// Line 1324: range 000000000F2569FE-000000000F2576E1
int32_t __cdecl JsonConfigMgr::loadAllMonsterConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  unsigned int first; // ecx
  char v7; // al
  const std::string *p_combat_config; // rdi
  std::string *p_monster_json_base_dir; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  data::ConfigCombat *p_combat; // rdx
  std::shared_ptr<data::ConfigMonster> *v16; // r8
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false>,bool> v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  unsigned __int64 v22; // rax
  int32_t ret; // [rsp+1Ch] [rbp-2B4h]
  data::MonsterExcelConfigMap *__for_range; // [rsp+28h] [rbp-2A8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::MonsterExcelConfig>,false,false>::reference p; // [rsp+30h] [rbp-2A0h]
  char v29[656]; // [rsp+40h] [rbp-290h] BYREF

  v2 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 32 4 15 monster_id:1329 48 8 16 __for_begin:1327 80 8 14 __for_end:1327 112 16 23 config_mons"
                        "ter_ptr:1340 144 32 24 monster_config_path:1331 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <"
                        "unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 40 9 root:1333";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadAllMonsterConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862724] = 62194;
  v4[536862725] = -219021312;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -219021312;
  v4[536862736] = 62194;
  v4[536862737] = -218103808;
  v4[536862738] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.monster_config_mgr.monster_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::MonsterExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::MonsterExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::MonsterExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::MonsterExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 80);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::MonsterExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MonsterExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MonsterExcelConfig>,false> *)(v2 + 80)) )
      break;
    p = std::__detail::_Node_iterator<std::pair<unsigned int const,data::MonsterExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::MonsterExcelConfig>,false,false> *const)(v2 + 48));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p);
    }
    first = p->first;
    v7 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(v2 + 32, v5);
    }
    *(_DWORD *)(v2 + 32) = first;
    *(_DWORD *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    p_combat_config = &p->second.combat_config;
    p_monster_json_base_dir = &config->monster_json_base_dir;
    if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 17) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
    {
      p_monster_json_base_dir = (std::string *)32;
      p_combat_config = (const std::string *)(v2 + 208);
      __asan_report_store_n(v2 + 208, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 208), p_monster_json_base_dir, p_combat_config);
    if ( *(char *)(((v2 + 144) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 175) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 175) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 144, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 144), (std::string *)(v2 + 208), ".json");
    std::string::~string((void *)(v2 + 208));
    *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
    std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], v2 + 144);
    v10 = ((v2 + 528) >> 3) + 2147450880;
    *(_DWORD *)v10 = 0;
    *(_BYTE *)(v10 + 4) = 0;
    Json::Value::Value(v2 + 528, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 144), (Json::Value *)(v2 + 528)) )
    {
      *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 272, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadAllMonsterConfig",
        1336);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 272),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              v11,
              (const char (*)[27])"parseJsonFile fails, path:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v2 + 144));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
      *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      *(_WORD *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 112) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigMonster::parseFromJson((const Json::Value *)(v2 + 112));
      if ( std::operator==<data::ConfigMonster>((const std::shared_ptr<data::ConfigMonster> *)(v2 + 112), 0LL) )
      {
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllMonsterConfig",
          1343);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v13,
                (const char (*)[27])"parseFromJson fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v2 + 144));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        p_combat = &std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112))->combat;
        if ( JsonConfigMgr::assignAttackIdToAllConfigAttackInfoInConfigCombat(this, p_combat) )
        {
          *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllMonsterConfig",
            1349);
          v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 400),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v18 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
                  v17,
                  (const char (*)[68])"assignAttackIdToAllConfigAttackInfoInConfigCombat fail, monster_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
          *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        v19 = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::emplace<unsigned int &,std::shared_ptr<data::ConfigMonster>&>(
                &this->config_monster_map_,
                (unsigned int *)(v2 + 32),
                (std::shared_ptr<data::ConfigMonster> *)(v2 + 112),
                (unsigned int *)&this->config_monster_map_,
                v16);
        if ( !v19.second )
        {
          *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 464) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 17) & 7) >= *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 464, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 464),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllMonsterConfig",
            1354);
          v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 464),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v21 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v20,
                  (const char (*)[22])"duplicate monster_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v2 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 464));
          *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      std::shared_ptr<data::ConfigMonster>::~shared_ptr((std::shared_ptr<data::ConfigMonster> *const)(v2 + 112));
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 528));
    std::string::~string((void *)(v2 + 144));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v2 + 144) >> 3) + 0x7FFF8000) = -117901064;
    v22 = ((v2 + 528) >> 3) + 2147450880;
    *(_DWORD *)v22 = -117901064;
    *(_BYTE *)(v22 + 4) = -8;
    *(_WORD *)(((v2 + 112) >> 3) + 0x7FFF8000) = -1800;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::MonsterExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::MonsterExcelConfig>,false,false> *const)(v2 + 48));
  }
  if ( v29 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return ret;
};

// Line 1363: range 000000000F2576E2-000000000F259CD7
int32_t __cdecl JsonConfigMgr::loadAllGadgetConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t AllFilesWithExtension; // edx
  char v7; // al
  char *v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  char *v13; // rsi
  unsigned __int64 v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  unsigned __int64 v19; // rax
  char *p_combat; // rsi
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  int v24; // eax
  char *v25; // rsi
  const std::shared_ptr<data::ConfigBaseGadgetTriggerAction> *v26; // rax
  data::ConfigAttackInfo *p_attack_info; // rdx
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  std::string *p_combat_template; // rdx
  std::string *v33; // rsi
  bool v34; // al
  common::milog::MiLogStream *v35; // rax
  int v36; // edx
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rdx
  char v39; // cl
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rdx
  char v42; // cl
  char v43; // al
  bool v44; // al
  common::milog::MiLogStream *v45; // rax
  int v46; // edx
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rdx
  int v50; // edx
  char *v51; // rsi
  unsigned int first; // ecx
  char v53; // al
  std::shared_ptr<data::ConfigGadget> *v54; // r8
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false>,bool> v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v62; // [rsp+8h] [rbp-6D8h]
  data::ConfigCombat *p_second; // [rsp+8h] [rbp-6D8h]
  int v64; // [rsp+8h] [rbp-6D8h]
  data::ConfigCombat *v65; // [rsp+8h] [rbp-6D8h]
  data::ConfigBaseGadgetTriggerActionList *action_list_ptr; // [rsp+28h] [rbp-6B8h]
  std::vector<std::string> *__for_range; // [rsp+30h] [rbp-6B0h]
  data::ConfigGadgetMap *__for_range_0; // [rsp+38h] [rbp-6A8h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true>::reference __in; // [rsp+40h] [rbp-6A0h]
  const std::string *json_name; // [rsp+48h] [rbp-698h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *config_gadget_ptr; // [rsp+50h] [rbp-690h]
  data::ConfigCombatMap *global_combat_template_map; // [rsp+60h] [rbp-680h]
  data::GadgetExcelConfigMap *__for_range_2; // [rsp+70h] [rbp-670h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::GadgetExcelConfig>,false,false>::reference p; // [rsp+78h] [rbp-668h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+88h] [rbp-658h]
  char v77[1616]; // [rsp+90h] [rbp-650h] BYREF

  v3 = (unsigned __int64)v77;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1568LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "35 48 1 9 <unknown> 64 1 9 <unknown> 80 4 8 ret:1365 96 4 14 gadget_id:1457 112 8 16 __for_begin"
                        ":1372 144 8 14 __for_end:1372 176 8 16 __for_begin:1388 208 8 14 __for_end:1388 240 8 16 __for_b"
                        "egin:1411 272 8 14 __for_end:1411 304 8 7 it:1427 336 8 9 <unknown> 368 8 7 it:1438 400 8 9 <unk"
                        "nown> 432 8 16 __for_begin:1455 464 8 14 __for_end:1455 496 16 30 config_bullet_pattern_ptr:1396"
                        " 528 16 32 config_collided_pattern_ptr:1403 560 16 22 config_action_ptr:1411 592 16 38 config_da"
                        "mage_by_attack_value_ptr:1413 624 16 22 config_gadget_ptr:1463 656 24 13 file_vec:1364 720 32 9 "
                        "<unknown> 784 32 9 <unknown> 848 32 9 <unknown> 912 32 9 <unknown> 976 32 9 <unknown> 1040 32 9 "
                        "<unknown> 1104 32 9 <unknown> 1168 32 9 <unknown> 1232 32 9 <unknown> 1296 32 9 <unknown> 1360 3"
                        "2 9 <unknown> 1424 32 9 <unknown> 1488 40 9 root:1375";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::loadAllGadgetConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556927;
  v5[536862723] = 61956;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = 62194;
  v5[536862727] = -234881024;
  v5[536862728] = 62194;
  v5[536862728] = -234881024;
  v5[536862729] = 62194;
  v5[536862729] = -234881024;
  v5[536862730] = 62194;
  v5[536862730] = -234881024;
  v5[536862731] = 62194;
  v5[536862731] = -234881024;
  v5[536862732] = 62194;
  v5[536862732] = -234881024;
  v5[536862733] = 62194;
  v5[536862733] = -234881024;
  v5[536862734] = 62194;
  v5[536862734] = -234881024;
  v5[536862735] = 62194;
  v5[536862736] = 62194;
  v5[536862737] = 62194;
  v5[536862738] = 62194;
  v5[536862739] = 62194;
  v5[536862740] = 62194;
  v5[536862741] = -218959360;
  v5[536862742] = 62194;
  v5[536862743] = -219021312;
  v5[536862744] = 62194;
  v5[536862745] = -219021312;
  v5[536862746] = 62194;
  v5[536862747] = -219021312;
  v5[536862748] = 62194;
  v5[536862749] = -219021312;
  v5[536862750] = 62194;
  v5[536862751] = -219021312;
  v5[536862752] = 62194;
  v5[536862753] = -219021312;
  v5[536862754] = 62194;
  v5[536862755] = -219021312;
  v5[536862756] = 62194;
  v5[536862757] = -219021312;
  v5[536862758] = 62194;
  v5[536862759] = -219021312;
  v5[536862760] = 62194;
  v5[536862761] = -219021312;
  v5[536862762] = 62194;
  v5[536862763] = -219021312;
  v5[536862764] = 62194;
  v5[536862765] = -219021312;
  v5[536862766] = 62194;
  v5[536862767] = -218103808;
  v5[536862768] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 656));
  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 80, config);
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(v3 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v3 + 720),
    ".json",
    (const std::allocator<char> *)(v3 + 48));
  v8 = (char *)(v3 + 720);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->gadget_json_base_dir,
                            (const std::string *)(v3 + 720),
                            (std::vector<std::string> *)(v3 + 656));
  v7 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v7 != 0;
  if ( v7 != 0 && v7 <= 3 )
    __asan_report_store4(v3 + 80, v8);
  *(_DWORD *)(v3 + 80) = AllFilesWithExtension;
  std::string::~string((void *)(v3 + 720));
  *(_DWORD *)(((v3 + 720) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v3 + 48);
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v3 + 80);
  if ( *(_DWORD *)(v3 + 80) )
  {
    *(_DWORD *)(((v3 + 784) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 784) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 815) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 815) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 784, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 784),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllGadgetConfig",
      1369);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 784),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
            v9,
            (const char (*)[54])"getAllFilesWithExtension fails, gadget_json_base_dir:");
    v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, &config->gadget_json_base_dir);
    v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v12, (const int *)(v3 + 80));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 784));
    *(_DWORD *)(((v3 + 784) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    goto LABEL_153;
  }
  __for_range = (std::vector<std::string> *)(v3 + 656);
  *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 112, v8);
  *(std::vector<std::string>::iterator *)(v3 + 112) = std::vector<std::string>::begin(__for_range);
  *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 144, v8);
  *(std::vector<std::string>::iterator *)(v3 + 144) = std::vector<std::string>::end(__for_range);
  while ( 1 )
  {
    v13 = (char *)(v3 + 144);
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 112),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 144)) )
      break;
    file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 112));
    std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
    v14 = ((v3 + 1488) >> 3) + 2147450880;
    *(_DWORD *)v14 = 0;
    *(_BYTE *)(v14 + 4) = 0;
    Json::Value::Value(v3 + 1488, 0LL);
    if ( !parseJsonFile(file_path, (Json::Value *)(v3 + 1488)) )
    {
      *(_DWORD *)(((v3 + 848) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 848) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 879) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 879) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 848, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 848),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadAllGadgetConfig",
        1378);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 848),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v16 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              v15,
              (const char (*)[27])"parseJsonFile fails, path:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, file_path);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 848));
      *(_DWORD *)(((v3 + 848) >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 80, file_path);
      *(_DWORD *)(v3 + 80) = -1;
    }
    else if ( !data::mapFromJson((const Json::Value *)(v3 + 1488), &this->config_gadget_map_) )
    {
      *(_DWORD *)(((v3 + 912) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 912) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 943) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 943) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 912, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 912),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadAllGadgetConfig",
        1384);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 912),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v17,
              (const char (*)[25])"mapFromJson fails, path:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, file_path);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 912));
      *(_DWORD *)(((v3 + 912) >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 80, file_path);
      *(_DWORD *)(v3 + 80) = -1;
    }
    Json::Value::~Value((Json::Value_0 *const)(v3 + 1488));
    v19 = ((v3 + 1488) >> 3) + 2147450880;
    *(_DWORD *)v19 = -117901064;
    *(_BYTE *)(v19 + 4) = -8;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 112));
  }
  *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
  __for_range_0 = &this->config_gadget_map_;
  *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 176, v13);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::iterator *)(v3 + 176) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::begin(__for_range_0);
  *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 208, v13);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::iterator *)(v3 + 208) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::end(__for_range_0);
  while ( 1 )
  {
    p_combat = (char *)(v3 + 208);
    if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v3 + 176),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v3 + 208)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v3 + 176));
    json_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigGadget>>(__in);
    config_gadget_ptr = std::get<1ul,std::string const,std::shared_ptr<data::ConfigGadget>>(__in);
    if ( !std::operator==<data::ConfigGadget>(0LL, config_gadget_ptr) )
    {
      action_list_ptr = 0LL;
      *(_WORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = 0;
      std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
      if ( *(_WORD *)(((v3 + 496) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigBulletPattern,data::ConfigGadgetPattern>((const std::shared_ptr<data::ConfigGadgetPattern> *)(v3 + 496));
      v25 = (char *)(v3 + 496);
      if ( std::operator!=<data::ConfigBulletPattern>(
             0LL,
             (const std::shared_ptr<data::ConfigBulletPattern> *)(v3 + 496)) )
      {
        action_list_ptr = &std::__shared_ptr_access<data::ConfigBulletPattern,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBulletPattern,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 496))->trigger_actions;
      }
      else
      {
        *(_WORD *)(((v3 + 528) >> 3) + 0x7FFF8000) = 0;
        std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
        if ( *(_WORD *)(((v3 + 528) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetCollidedPattern,data::ConfigGadgetPattern>((const std::shared_ptr<data::ConfigGadgetPattern> *)(v3 + 528));
        v25 = (char *)(v3 + 528);
        if ( std::operator!=<data::ConfigGadgetCollidedPattern>(
               0LL,
               (const std::shared_ptr<data::ConfigGadgetCollidedPattern> *)(v3 + 528)) )
        {
          action_list_ptr = &std::__shared_ptr_access<data::ConfigGadgetCollidedPattern,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetCollidedPattern,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 528))->collision_actions;
        }
        std::shared_ptr<data::ConfigGadgetCollidedPattern>::~shared_ptr((std::shared_ptr<data::ConfigGadgetCollidedPattern> *const)(v3 + 528));
        *(_WORD *)(((v3 + 528) >> 3) + 0x7FFF8000) = -1800;
      }
      if ( action_list_ptr )
      {
        *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 240, v25);
        *(std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>>::const_iterator *)(v3 + 240) = std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>>::begin(action_list_ptr);
        *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 272, v25);
        *(std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>>::const_iterator *)(v3 + 272) = std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>>::end(action_list_ptr);
        while ( 1 )
        {
          v25 = (char *)(v3 + 272);
          if ( !__gnu_cxx::operator!=<std::shared_ptr<data::ConfigBaseGadgetTriggerAction> const*,std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>>>(
                  (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigBaseGadgetTriggerAction>*,std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>> > *)(v3 + 240),
                  (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigBaseGadgetTriggerAction>*,std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>> > *)(v3 + 272)) )
            break;
          *(_WORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = 0;
          v26 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigBaseGadgetTriggerAction> const*,std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigBaseGadgetTriggerAction>*,std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>> > *const)(v3 + 240));
          std::shared_ptr<data::ConfigBaseGadgetTriggerAction>::shared_ptr(
            (std::shared_ptr<data::ConfigBaseGadgetTriggerAction> *const)(v3 + 560),
            v26);
          *(_WORD *)(((v3 + 592) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v3 + 592) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ConfigGadgetDamageByAttackValue,data::ConfigBaseGadgetTriggerAction>((const std::shared_ptr<data::ConfigBaseGadgetTriggerAction> *)(v3 + 592));
          if ( std::operator!=<data::ConfigGadgetDamageByAttackValue>(
                 0LL,
                 (const std::shared_ptr<data::ConfigGadgetDamageByAttackValue> *)(v3 + 592)) )
          {
            p_attack_info = &std::__shared_ptr_access<data::ConfigGadgetDamageByAttackValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetDamageByAttackValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 592))->attack_info;
            if ( JsonConfigMgr::assignAttackIdToConfigAttackInfo(this, p_attack_info) )
            {
              *(_DWORD *)(((v3 + 1040) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1040) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1071) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 1071) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1040, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1040),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadAllGadgetConfig",
                1416);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1040),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                      v29,
                      (const char (*)[50])"assignAttackIdToConfigAttackInfo fail, json_name:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, json_name);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1040));
              *(_DWORD *)(((v3 + 1040) >> 3) + 0x7FFF8000) = -117901064;
              if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 80, json_name);
              *(_DWORD *)(v3 + 80) = -1;
            }
          }
          std::shared_ptr<data::ConfigGadgetDamageByAttackValue>::~shared_ptr((std::shared_ptr<data::ConfigGadgetDamageByAttackValue> *const)(v3 + 592));
          std::shared_ptr<data::ConfigBaseGadgetTriggerAction>::~shared_ptr((std::shared_ptr<data::ConfigBaseGadgetTriggerAction> *const)(v3 + 560));
          *(_WORD *)(((v3 + 592) >> 3) + 0x7FFF8000) = -1800;
          __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigBaseGadgetTriggerAction> const*,std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigBaseGadgetTriggerAction>*,std::vector<std::shared_ptr<data::ConfigBaseGadgetTriggerAction>> > *const)(v3 + 240));
        }
        *(_WORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = -1800;
        *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = -8;
      }
      global_combat_template_map = &this->config_global_combat_.combat_template;
      v31 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
      if ( (unsigned __int8)std::string::empty(&v31->combat_template) != 1 )
      {
        *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
        p_combat_template = &std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr)->combat_template;
        if ( *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 304, v25);
        v33 = p_combat_template;
        *(std::unordered_map<std::string,data::ConfigCombat>::iterator *)(v3 + 304) = std::unordered_map<std::string,data::ConfigCombat>::find(
                                                                                        global_combat_template_map,
                                                                                        p_combat_template);
        *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 336, v33);
        *(std::unordered_map<std::string,data::ConfigCombat>::iterator *)(v3 + 336) = std::unordered_map<std::string,data::ConfigCombat>::end(global_combat_template_map);
        v34 = std::__detail::operator==<std::pair<std::string const,data::ConfigCombat>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigCombat>,true> *)(v3 + 304),
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigCombat>,true> *)(v3 + 336));
        *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = -8;
        if ( v34 )
        {
          *(_DWORD *)(((v3 + 1104) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1104) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1135) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 1135) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1104, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1104),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllGadgetConfig",
            1430);
          v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1104),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v62 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  v35,
                  (const char (*)[27])"combat_template not found:");
          p_combat = (char *)&std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr)->combat_template;
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v62, (const std::string *)p_combat);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1104));
          *(_DWORD *)(((v3 + 1104) >> 3) + 0x7FFF8000) = -117901064;
          if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 80, p_combat);
          *(_DWORD *)(v3 + 80) = -1;
          v36 = 0;
        }
        else
        {
          p_second = &std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigCombat>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigCombat>,false,true> *const)(v3 + 304))->second;
          v37 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
          p_combat = (char *)p_second;
          data::ConfigCombat::operator=(&v37->combat, p_second);
          v36 = 1;
        }
        *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = -8;
        if ( v36 != 1 )
        {
          v64 = 0;
          goto LABEL_117;
        }
      }
      else
      {
        v38 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
        v39 = *(_BYTE *)(((unsigned __int64)&v38->has_ability >> 3) + 0x7FFF8000);
        if ( v39 != 0 && (((unsigned __int8)v38 + 116) & 7) >= v39 )
        {
          LOBYTE(v25) = v39 != 0;
          __asan_report_load1(&v38->has_ability, v25, v38);
        }
        if ( !v38->has_ability )
        {
          v40 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
          if ( std::vector<data::ConfigEntityAbilityEntry>::empty(&v40->abilities) )
            goto LABEL_95;
        }
        v41 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
        v42 = *(_BYTE *)(((unsigned __int64)&v41->combat.is_json_loaded >> 3) + 0x7FFF8000);
        if ( v42 != 0 && (((unsigned __int8)v41 + 52) & 7) >= v42 )
        {
          LOBYTE(v25) = v42 != 0;
          __asan_report_load1(&v41->combat.is_json_loaded, v25, v41);
        }
        if ( !v41->combat.is_json_loaded )
          v43 = 1;
        else
LABEL_95:
          v43 = 0;
        if ( v43 )
        {
          *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
          *(_DWORD *)(((v3 + 1168) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v3 + 64);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v3 + 1168),
            "default",
            (const std::allocator<char> *)(v3 + 64));
          if ( *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 368, "default");
          *(std::unordered_map<std::string,data::ConfigCombat>::iterator *)(v3 + 368) = std::unordered_map<std::string,data::ConfigCombat>::find(
                                                                                          global_combat_template_map,
                                                                                          (const std::unordered_map<std::string,data::ConfigCombat>::key_type *)(v3 + 1168));
          std::string::~string((void *)(v3 + 1168));
          *(_DWORD *)(((v3 + 1168) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v3 + 64);
          *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 400, v3 + 1168);
          *(std::unordered_map<std::string,data::ConfigCombat>::iterator *)(v3 + 400) = std::unordered_map<std::string,data::ConfigCombat>::end(global_combat_template_map);
          v44 = std::__detail::operator==<std::pair<std::string const,data::ConfigCombat>,true>(
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigCombat>,true> *)(v3 + 368),
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigCombat>,true> *)(v3 + 400));
          *(_BYTE *)(((v3 + 400) >> 3) + 0x7FFF8000) = -8;
          if ( v44 )
          {
            *(_DWORD *)(((v3 + 1232) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1232) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1263) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 1263) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1232, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1232),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadAllGadgetConfig",
              1441);
            v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1232),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            p_combat = "default combat_template not found";
            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v45,
              (const char (*)[34])"default combat_template not found");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1232));
            *(_DWORD *)(((v3 + 1232) >> 3) + 0x7FFF8000) = -117901064;
            if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 80, "default combat_template not found");
            *(_DWORD *)(v3 + 80) = -1;
            v46 = 0;
          }
          else
          {
            v65 = &std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigCombat>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigCombat>,false,true> *const)(v3 + 368))->second;
            v47 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
            p_combat = (char *)v65;
            data::ConfigCombat::operator=(&v47->combat, v65);
            v46 = 1;
          }
          *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) = -8;
          if ( v46 != 1 )
          {
            v64 = 0;
LABEL_117:
            std::shared_ptr<data::ConfigBulletPattern>::~shared_ptr((std::shared_ptr<data::ConfigBulletPattern> *const)(v3 + 496));
            if ( v64 == 1 )
              v24 = 2;
            else
              v24 = 1;
            goto LABEL_120;
          }
        }
      }
      p_combat = (char *)&std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr)->combat;
      if ( JsonConfigMgr::assignAttackIdToAllConfigAttackInfoInConfigCombat(this, (data::ConfigCombat *)p_combat) )
      {
        *(_DWORD *)(((v3 + 1296) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 1296) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1327) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 1327) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 1296, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 1296),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllGadgetConfig",
          1450);
        v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 1296),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v49 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                v48,
                (const char (*)[67])"assignAttackIdToAllConfigAttackInfoInConfigCombat fail, json_name:");
        p_combat = (char *)json_name;
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v49, json_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1296));
        *(_DWORD *)(((v3 + 1296) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 80, json_name);
        *(_DWORD *)(v3 + 80) = -1;
      }
      v64 = 1;
      goto LABEL_117;
    }
    *(_DWORD *)(((v3 + 976) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 976) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1007) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 1007) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 976, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 976),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllGadgetConfig",
      1392);
    v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 976),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v22 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v21, (const char (*)[11])"json_name:");
    v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, json_name);
    p_combat = " config_gadget_ptr is null";
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      v23,
      (const char (*)[27])" config_gadget_ptr is null");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 976));
    *(_DWORD *)(((v3 + 976) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v24 = 0;
LABEL_120:
    *(_WORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = -1800;
    if ( !v24 )
    {
      v50 = 0;
      goto LABEL_124;
    }
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v3 + 176));
  }
  v50 = 1;
LABEL_124:
  *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
  if ( v50 == 1 )
  {
    __for_range_2 = &config->txt_config_mgr.gadget_config_mgr.gadget_excel_config_map;
    *(_BYTE *)(((v3 + 432) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 432) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 432, p_combat);
    *(std::unordered_map<unsigned int,data::GadgetExcelConfig>::iterator *)(v3 + 432) = std::unordered_map<unsigned int,data::GadgetExcelConfig>::begin(__for_range_2);
    *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 464, p_combat);
    *(std::unordered_map<unsigned int,data::GadgetExcelConfig>::iterator *)(v3 + 464) = std::unordered_map<unsigned int,data::GadgetExcelConfig>::end(__for_range_2);
    while ( 1 )
    {
      v51 = (char *)(v3 + 464);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,data::GadgetExcelConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::GadgetExcelConfig>,false> *)(v3 + 432),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::GadgetExcelConfig>,false> *)(v3 + 464)) )
        break;
      p = std::__detail::_Node_iterator<std::pair<unsigned int const,data::GadgetExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::GadgetExcelConfig>,false,false> *const)(v3 + 432));
      *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(p);
      }
      first = p->first;
      v53 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
      if ( v53 != 0 && v53 <= 3 )
      {
        LOBYTE(v51) = v53 != 0;
        __asan_report_store4(v3 + 96, v51);
      }
      *(_DWORD *)(v3 + 96) = first;
      if ( !(unsigned __int8)std::string::empty(&p->second.json_name) )
      {
        *(_WORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v3 + 624) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        JsonConfigMgr::findGadgetConfig((const JsonConfigMgr *const)(v3 + 624), (const std::string *)this);
        if ( std::operator==<data::ConfigGadget>((const std::shared_ptr<data::ConfigGadget> *)(v3 + 624), 0LL) )
        {
          *(_DWORD *)(((v3 + 1360) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1360) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1391) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 1391) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1360, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1360),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "loadAllGadgetConfig",
            1466);
          v55 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  (common::milog::MiLogStream *const)(v3 + 1360),
                  (const char (*)[24])"can't find gadget json:");
          v56 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v55, &p->second.json_name);
          v57 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v56, (const char (*)[13])", gadget_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v57, (const unsigned int *)(v3 + 96));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1360));
          *(_DWORD *)(((v3 + 1360) >> 3) + 0x7FFF8000) = -117901064;
        }
        else
        {
          v58 = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::emplace<unsigned int &,std::shared_ptr<data::ConfigGadget>&>(
                  &this->config_id_gadget_map_,
                  (unsigned int *)(v3 + 96),
                  (std::shared_ptr<data::ConfigGadget> *)(v3 + 624),
                  (unsigned int *)&this->config_id_gadget_map_,
                  v54);
          if ( !v58.second )
          {
            *(_DWORD *)(((v3 + 1424) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1424) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1455) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 1455) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1424, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1424),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadAllGadgetConfig",
              1471);
            v59 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1424),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v60 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                    v59,
                    (const char (*)[21])"duplicate gadget_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, (const unsigned int *)(v3 + 96));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1424));
            *(_DWORD *)(((v3 + 1424) >> 3) + 0x7FFF8000) = -117901064;
            if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 80, v3 + 96);
            *(_DWORD *)(v3 + 80) = -1;
          }
        }
        std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v3 + 624));
      }
      *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = -1800;
      std::__detail::_Node_iterator<std::pair<unsigned int const,data::GadgetExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::GadgetExcelConfig>,false,false> *const)(v3 + 432));
    }
    *(_BYTE *)(((v3 + 432) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 80);
    v2 = *(_DWORD *)(v3 + 80);
  }
LABEL_153:
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 656));
  if ( v77 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80BC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 196) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1568LL, v77);
  }
  return v2;
};

// Line 1480: range 000000000F259CD8-000000000F25A836
int32_t __cdecl JsonConfigMgr::loadAllTalentConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t AllFilesWithExtension; // edx
  char v6; // al
  char *v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int32_t v12; // r14d
  unsigned __int64 v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  unsigned __int64 v18; // rax
  int32_t result; // eax
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-260h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+18h] [rbp-258h]
  char v23[592]; // [rsp+20h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 4 8 ret:1482 80 8 16 __for_begin:1489 112 8 14 __for_end:1489 144 24 13 f"
                        "ile_vec:1481 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 40 9 root:1492";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadAllTalentConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862725] = -218959360;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 144));
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, config);
  *(_DWORD *)(v2 + 64) = 0;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 208),
    ".json",
    (const std::allocator<char> *)(v2 + 48));
  v7 = (char *)(v2 + 208);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->talent_json_base_dir,
                            (const std::string *)(v2 + 208),
                            (std::vector<std::string> *)(v2 + 144));
  v6 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v6 != 0;
  if ( v6 != 0 && v6 <= 3 )
    __asan_report_store4(v2 + 64, v7);
  *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 208));
  *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 64);
  if ( *(_DWORD *)(v2 + 64) )
  {
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 272, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllTalentConfig",
      1486);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 272),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
           v8,
           (const char (*)[54])"getAllFilesWithExtension fails, talent_json_base_dir:");
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, &config->talent_json_base_dir);
    v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v11, (const int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    v12 = *(_DWORD *)(v2 + 64);
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v2 + 144);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 80, v7);
    *(std::vector<std::string>::iterator *)(v2 + 80) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v7);
    *(std::vector<std::string>::iterator *)(v2 + 112) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 80),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 112)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v13 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v13 = 0;
      *(_BYTE *)(v13 + 4) = 0;
      Json::Value::Value(v2 + 464, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 464)) )
      {
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllTalentConfig",
          1495);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v14,
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      else if ( !data::mapFromJson((const Json::Value *)(v2 + 464), &this->config_talent_map_) )
      {
        *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 400, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 400),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllTalentConfig",
          1501);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 400),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v17 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v16,
                (const char (*)[25])"mapFromJson fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
        *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 464));
      v18 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v18 = -117901064;
      *(_BYTE *)(v18 + 4) = -8;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    v12 = *(_DWORD *)(v2 + 64);
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 144));
  result = v12;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 1510: range 000000000F25A838-000000000F25B0F5
int32_t __cdecl JsonConfigMgr::loadGlobalCombatConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  int32_t AllFilesWithExtension; // edx
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int32_t v12; // r14d
  unsigned __int64 v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  int32_t result; // eax
  std::vector<std::string>::reference file_path; // [rsp+18h] [rbp-218h]
  char v21[528]; // [rsp+20h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 4 8 ret:1512 80 24 13 file_vec:1511 144 32 9 <unknown> 208 32 9 <unknown> "
                        "272 32 9 <unknown> 336 32 9 <unknown> 400 40 9 root:1524";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadGlobalCombatConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 61956;
  v4[536862723] = -218959360;
  v4[536862724] = 62194;
  v4[536862725] = -219021312;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 80));
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 144),
    ".json",
    (const std::allocator<char> *)(v2 + 48));
  v5 = (char *)(v2 + 144);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->common_combat_json_base_dir,
                            (const std::string *)(v2 + 144),
                            (std::vector<std::string> *)(v2 + 80));
  v7 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(v2 + 64, v5);
  }
  *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 144));
  *(_DWORD *)(((v2 + 144) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 64);
  if ( *(_DWORD *)(v2 + 64) )
  {
    *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadGlobalCombatConfig",
      1515);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 208),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
           v8,
           (const char (*)[61])"getAllFilesWithExtension fails, common_combat_json_base_dir:");
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, &config->common_combat_json_base_dir);
    v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v11, (const int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
    *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
    v12 = -1;
  }
  else if ( std::vector<std::string>::empty((const std::vector<std::string> *const)(v2 + 80)) )
  {
    v12 = 0;
  }
  else
  {
    file_path = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v2 + 80), 0LL);
    std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
    v13 = ((v2 + 400) >> 3) + 2147450880;
    *(_DWORD *)v13 = 0;
    *(_BYTE *)(v13 + 4) = 0;
    Json::Value::Value(v2 + 400, 0LL);
    if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 400)) )
    {
      *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 272, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadGlobalCombatConfig",
        1527);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 272),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              v14,
              (const char (*)[27])"parseJsonFile fails, path:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, file_path);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
      *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
      v12 = -1;
    }
    else if ( !data::ConfigGlobalCombat::fromJson(&this->config_global_combat_, (const Json::Value *)(v2 + 400)) )
    {
      *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadGlobalCombatConfig",
        1532);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 336),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v16, (const char (*)[16])"fromJson fails:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, file_path);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
      *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
      v12 = -1;
    }
    else
    {
      v12 = 0;
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 400));
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 80));
  result = v12;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 1540: range 000000000F25B0F6-000000000F25BC54
int32_t __cdecl JsonConfigMgr::loadLevelEntityConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t AllFilesWithExtension; // edx
  char v6; // al
  char *v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int32_t v12; // r14d
  unsigned __int64 v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  unsigned __int64 v18; // rax
  int32_t result; // eax
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-260h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+18h] [rbp-258h]
  char v23[592]; // [rsp+20h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 4 8 ret:1542 80 8 16 __for_begin:1549 112 8 14 __for_end:1549 144 24 13 f"
                        "ile_vec:1541 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 40 9 root:1552";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadLevelEntityConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862725] = -218959360;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 144));
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, config);
  *(_DWORD *)(v2 + 64) = 0;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 208),
    ".json",
    (const std::allocator<char> *)(v2 + 48));
  v7 = (char *)(v2 + 208);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->level_json_base_dir,
                            (const std::string *)(v2 + 208),
                            (std::vector<std::string> *)(v2 + 144));
  v6 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v6 != 0;
  if ( v6 != 0 && v6 <= 3 )
    __asan_report_store4(v2 + 64, v7);
  *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 208));
  *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 64);
  if ( *(_DWORD *)(v2 + 64) )
  {
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 272, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadLevelEntityConfig",
      1546);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 272),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
           v8,
           (const char (*)[53])"getAllFilesWithExtension fails, level_json_base_dir:");
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, &config->level_json_base_dir);
    v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v11, (const int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    v12 = *(_DWORD *)(v2 + 64);
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v2 + 144);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 80, v7);
    *(std::vector<std::string>::iterator *)(v2 + 80) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v7);
    *(std::vector<std::string>::iterator *)(v2 + 112) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 80),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 112)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v13 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v13 = 0;
      *(_BYTE *)(v13 + 4) = 0;
      Json::Value::Value(v2 + 464, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 464)) )
      {
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadLevelEntityConfig",
          1555);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v14,
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      else if ( !data::mapFromJson((const Json::Value *)(v2 + 464), &this->config_level_entity_map_) )
      {
        *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 400, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 400),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadLevelEntityConfig",
          1561);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 400),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v17 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v16,
                (const char (*)[25])"mapFromJson fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
        *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 464));
      v18 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v18 = -117901064;
      *(_BYTE *)(v18 + 4) = -8;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    v12 = *(_DWORD *)(v2 + 64);
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 144));
  result = v12;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 1570: range 000000000F25BC56-000000000F25D02C
int32_t __cdecl JsonConfigMgr::loadWeatherAreaConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int v6; // esi
  __int64 v7; // rsi
  unsigned int v8; // esi
  int v9; // r14d
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  int v13; // r14d
  unsigned __int64 v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int v17; // r14d
  char *v18; // rsi
  uint32_t area_id; // ecx
  char v20; // al
  _DWORD *v21; // rax
  data::ConfigWeatherArea *v22; // rax
  ConfigSceneWeatherArea *v23; // rax
  unsigned int *v24; // rcx
  ConfigSceneWeatherArea *v25; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false>,bool> v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  int v31; // r14d
  _DWORD *v32; // rax
  int v33; // edx
  int v34; // r14d
  int v35; // r14d
  int v36; // eax
  unsigned __int64 v37; // rdx
  unsigned __int64 v38; // rdx
  int v39; // eax
  data::SceneExcelConfigMap *__for_range; // [rsp+28h] [rbp-488h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v43; // [rsp+30h] [rbp-480h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+38h] [rbp-478h]
  SceneJsonConfig *scene_json_config; // [rsp+48h] [rbp-468h]
  std::vector<data::ConfigWeatherArea> *__for_range_0; // [rsp+50h] [rbp-460h]
  __gnu_cxx::__normal_iterator<data::ConfigWeatherArea*,std::vector<data::ConfigWeatherArea> >::reference config_weather_area; // [rsp+58h] [rbp-458h]
  char v48[1104]; // [rsp+60h] [rbp-450h] BYREF

  v3 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1056LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "18 32 4 20 weather_area_id:1604 48 8 16 __for_begin:1571 80 8 14 __for_end:1571 112 8 16 __for_b"
                        "egin:1602 144 8 14 __for_end:1602 176 24 28 config_weather_area_vec:1589 240 32 14 scene_dir:157"
                        "3 304 32 9 <unknown> 368 32 9 <unknown> 432 32 27 weather_area_json_name:1574 496 32 9 <unknown>"
                        " 560 32 9 <unknown> 624 32 27 weather_area_json_path:1575 688 32 9 <unknown> 752 32 9 <unknown> "
                        "816 32 9 <unknown> 880 40 9 root:1582 960 64 30 config_scene_weather_area:1605";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::loadWeatherAreaConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862726] = -218959360;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862730] = -219021312;
  v5[536862731] = 62194;
  v5[536862732] = -219021312;
  v5[536862733] = 62194;
  v5[536862734] = -219021312;
  v5[536862735] = 62194;
  v5[536862736] = -219021312;
  v5[536862737] = 62194;
  v5[536862738] = -219021312;
  v5[536862739] = 62194;
  v5[536862740] = -219021312;
  v5[536862741] = 62194;
  v5[536862742] = -219021312;
  v5[536862743] = 62194;
  v5[536862744] = -219021312;
  v5[536862745] = 62194;
  v5[536862746] = -219021312;
  v5[536862747] = 62194;
  v5[536862748] = -234881024;
  v5[536862749] = -218959118;
  v5[536862752] = -202116109;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 48, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 48) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 80)) )
  {
    v43 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 48));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v43);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(v43);
    *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v6 = *scene_id;
    if ( *(char *)(((v3 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) )
    {
      v6 = 32;
      __asan_report_store_n(v3 + 304, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v3 + 304), v6);
    v7 = (__int64)config;
    if ( *(char *)(((v3 + 368) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) )
    {
      v7 = 32LL;
      __asan_report_store_n(v3 + 368, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 368), (const std::string *)v7, (std::string *)(v3 + 304));
    if ( *(char *)(((v3 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 240, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 240), (std::string *)(v3 + 368), "/");
    std::string::~string((void *)(v3 + 368));
    *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v3 + 304));
    *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v8 = *scene_id;
    if ( *(char *)(((v3 + 496) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) )
    {
      v8 = 32;
      __asan_report_store_n(v3 + 496, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v3 + 496), v8);
    if ( *(char *)(((v3 + 560) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 560, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 560), "scene", (std::string *)(v3 + 496));
    if ( *(char *)(((v3 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 80 + 31) & 7) >= *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 432, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 432), (std::string *)(v3 + 560), "_weather_areas.json");
    std::string::~string((void *)(v3 + 560));
    *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v3 + 496));
    *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 624) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 624, 32LL);
    }
    std::operator+<char>((std::string *)(v3 + 624), (const std::string *)(v3 + 240), (const std::string *)(v3 + 432));
    if ( common::tools::FileUtils::fileExists((const std::string *)(v3 + 624)) )
    {
      v9 = 0;
    }
    else
    {
      v10 = ((v3 + 880) >> 3) + 2147450880;
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 0;
      Json::Value::Value(v3 + 880, 0LL);
      if ( !parseJsonFile((const std::string *)(v3 + 624), (Json::Value *)(v3 + 880)) )
      {
        *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 688) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 80 + 31) & 7) >= *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 688, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 688),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadWeatherAreaConfig",
          1585);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 688),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                v11,
                (const char (*)[44])"parseJsonFile fail, weather_area_json_path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v3 + 624));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 688));
        *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v13 = 0;
      }
      else
      {
        v14 = ((v3 + 176) >> 3) + 2147450880;
        *(_WORD *)v14 = 0;
        *(_BYTE *)(v14 + 2) = 0;
        std::vector<data::ConfigWeatherArea>::vector((std::vector<data::ConfigWeatherArea> *const)(v3 + 176));
        if ( !data::vecFromJson((const Json::Value *)(v3 + 880), (data::ConfigWeatherAreaList *)(v3 + 176)) )
        {
          *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 752) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 752, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 752),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadWeatherAreaConfig",
            1592);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 752),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v16 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  v15,
                  (const char (*)[42])"vecFromJson fail, weather_area_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v3 + 624));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 752));
          *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v17 = 0;
        }
        else if ( std::vector<data::ConfigWeatherArea>::empty((const std::vector<data::ConfigWeatherArea> *const)(v3 + 176)) )
        {
          v17 = 1;
        }
        else
        {
          scene_json_config = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                &this->scene_json_config_map_,
                                scene_id);
          __for_range_0 = (std::vector<data::ConfigWeatherArea> *)(v3 + 176);
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 112, scene_id);
          *(std::vector<data::ConfigWeatherArea>::iterator *)(v3 + 112) = std::vector<data::ConfigWeatherArea>::begin(__for_range_0);
          *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 144, scene_id);
          *(std::vector<data::ConfigWeatherArea>::iterator *)(v3 + 144) = std::vector<data::ConfigWeatherArea>::end(__for_range_0);
          while ( 1 )
          {
            v18 = (char *)(v3 + 144);
            if ( !__gnu_cxx::operator!=<data::ConfigWeatherArea *,std::vector<data::ConfigWeatherArea>>(
                    (const __gnu_cxx::__normal_iterator<data::ConfigWeatherArea*,std::vector<data::ConfigWeatherArea> > *)(v3 + 112),
                    (const __gnu_cxx::__normal_iterator<data::ConfigWeatherArea*,std::vector<data::ConfigWeatherArea> > *)(v3 + 144)) )
              break;
            config_weather_area = __gnu_cxx::__normal_iterator<data::ConfigWeatherArea *,std::vector<data::ConfigWeatherArea>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigWeatherArea*,std::vector<data::ConfigWeatherArea> > *const)(v3 + 112));
            *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)config_weather_area >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)config_weather_area >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(config_weather_area);
            }
            area_id = config_weather_area->area_id;
            v20 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
            if ( v20 != 0 && v20 <= 3 )
            {
              LOBYTE(v18) = v20 != 0;
              __asan_report_store4(v3 + 32, v18);
            }
            *(_DWORD *)(v3 + 32) = area_id;
            v21 = (_DWORD *)(((v3 + 960) >> 3) + 2147450880);
            *v21 = 0;
            v21[1] = 0;
            ConfigSceneWeatherArea::ConfigSceneWeatherArea((ConfigSceneWeatherArea *const)(v3 + 960));
            v22 = std::move<data::ConfigWeatherArea &>(config_weather_area);
            data::ConfigWeatherArea::operator=((data::ConfigWeatherArea *const)(v3 + 960), v22);
            v23 = std::move<ConfigSceneWeatherArea &>((ConfigSceneWeatherArea *)(v3 + 960));
            v26 = std::unordered_map<unsigned int,ConfigSceneWeatherArea>::emplace<unsigned int &,ConfigSceneWeatherArea>(
                    &scene_json_config->config_scene_weather_area_map,
                    (unsigned int *)(v3 + 32),
                    v23,
                    v24,
                    v25);
            if ( !v26.second )
            {
              *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 816) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 847) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 847) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 816, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 816),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadWeatherAreaConfig",
                1609);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 816),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                      v27,
                      (const char (*)[27])"duplicate weather_area_id:");
              v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v28,
                      (const unsigned int *)(v3 + 32));
              v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v29,
                      (const char (*)[11])" in scene:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, scene_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 816));
              *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v31 = 0;
            }
            else
            {
              v31 = 1;
            }
            ConfigSceneWeatherArea::~ConfigSceneWeatherArea((ConfigSceneWeatherArea *const)(v3 + 960));
            *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
            v32 = (_DWORD *)(((v3 + 960) >> 3) + 2147450880);
            *v32 = -117901064;
            v32[1] = -117901064;
            if ( v31 != 1 )
            {
              v33 = 0;
              goto LABEL_59;
            }
            __gnu_cxx::__normal_iterator<data::ConfigWeatherArea *,std::vector<data::ConfigWeatherArea>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigWeatherArea*,std::vector<data::ConfigWeatherArea> > *const)(v3 + 112));
          }
          v33 = 1;
LABEL_59:
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
          if ( v33 == 1 )
            v17 = 2;
          else
            v17 = 0;
        }
        std::vector<data::ConfigWeatherArea>::~vector((std::vector<data::ConfigWeatherArea> *const)(v3 + 176));
        if ( v17 )
        {
          if ( v17 == 2 )
            v13 = 2;
          else
            v13 = 1;
        }
        else
        {
          v13 = 0;
        }
      }
      Json::Value::~Value((Json::Value_0 *const)(v3 + 880));
      if ( v13 )
      {
        if ( v13 == 2 )
          v9 = 2;
        else
          v9 = 0;
      }
      else
      {
        v9 = 1;
      }
    }
    std::string::~string((void *)(v3 + 624));
    if ( v9 )
    {
      if ( v9 == 2 )
        v34 = 2;
      else
        v34 = 1;
    }
    else
    {
      v34 = 0;
    }
    std::string::~string((void *)(v3 + 432));
    if ( v34 )
    {
      if ( v34 == 2 )
        v35 = 2;
      else
        v35 = 1;
    }
    else
    {
      v35 = 0;
    }
    std::string::~string((void *)(v3 + 240));
    if ( v35 )
    {
      if ( v35 == 2 )
        v36 = 2;
      else
        v36 = 1;
    }
    else
    {
      v36 = 0;
    }
    *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = -117901064;
    v37 = ((v3 + 880) >> 3) + 2147450880;
    *(_DWORD *)v37 = -117901064;
    *(_BYTE *)(v37 + 4) = -8;
    v38 = ((v3 + 176) >> 3) + 2147450880;
    *(_WORD *)v38 = -1800;
    *(_BYTE *)(v38 + 2) = -8;
    if ( v36 && v36 != 2 )
    {
      v39 = 0;
      goto LABEL_92;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 48));
  }
  v39 = 1;
LABEL_92:
  if ( v39 == 1 )
    v2 = 0;
  if ( v48 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF807C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 132) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1056LL, v48);
  }
  return v2;
};

// Line 1620: range 000000000F25D02E-000000000F25DFDD
int32_t __cdecl JsonConfigMgr::loadOpenAreaPointConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  std::unordered_map<unsigned int,SceneJsonConfig> *v7; // rax
  bool v8; // al
  int v9; // eax
  unsigned int v10; // esi
  __int64 v11; // rsi
  unsigned int v12; // esi
  int v13; // r14d
  unsigned __int64 v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int v17; // r14d
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  int v20; // r14d
  unsigned __int64 v21; // rdx
  int v22; // eax
  data::SceneExcelConfigMap *__for_range; // [rsp+28h] [rbp-398h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v26; // [rsp+30h] [rbp-390h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+38h] [rbp-388h]
  std::vector<data::Point2D> *open_area_point_vec; // [rsp+48h] [rbp-378h]
  char v29[880]; // [rsp+50h] [rbp-370h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(832LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 8 16 __for_begin:1621 80 8 14 __for_end:1621 112 8 9 iter:1623 144 8 9 <unknown> 176 32 14"
                        " scene_dir:1628 240 32 9 <unknown> 304 32 9 <unknown> 368 32 14 json_name:1629 432 32 9 <unknown"
                        "> 496 32 9 <unknown> 560 32 9 <unknown> 624 32 9 <unknown> 688 32 9 <unknown> 752 40 9 root:1634";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::loadOpenAreaPointConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862730] = -219021312;
  v5[536862731] = 62194;
  v5[536862732] = -219021312;
  v5[536862733] = 62194;
  v5[536862734] = -219021312;
  v5[536862735] = 62194;
  v5[536862736] = -219021312;
  v5[536862737] = 62194;
  v5[536862738] = -219021312;
  v5[536862739] = 62194;
  v5[536862740] = -219021312;
  v5[536862741] = 62194;
  v5[536862742] = -219021312;
  v5[536862743] = 62194;
  v5[536862744] = -218103808;
  v5[536862745] = -202116109;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 48, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 48) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v3 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v3 + 80)) )
  {
    v26 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 48));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v26);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(v26);
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    p_scene_json_config_map = &this->scene_json_config_map_;
    if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
      p_scene_json_config_map = (std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(
                                                                                      v3 + 112,
                                                                                      v3 + 80);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 112) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                                  p_scene_json_config_map,
                                                                                  scene_id);
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    v7 = &this->scene_json_config_map_;
    if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
      v7 = (std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v3 + 144, scene_id);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 144) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v7);
    v8 = std::__detail::operator==<std::pair<unsigned int const,SceneJsonConfig>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 112),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 144));
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(scene_id);
      }
      v10 = *scene_id;
      if ( *(char *)(((v3 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) )
      {
        v10 = 32;
        __asan_report_store_n(v3 + 240, 32LL);
      }
      common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v3 + 240), v10);
      v11 = (__int64)config;
      if ( *(char *)(((v3 + 304) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) )
      {
        v11 = 32LL;
        __asan_report_store_n(v3 + 304, 32LL);
      }
      std::operator+<char>((std::string *)(v3 + 304), (const std::string *)v11, (std::string *)(v3 + 240));
      if ( *(char *)(((v3 + 176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 207) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 176, 32LL);
      }
      std::operator+<char>((std::string *)(v3 + 176), (std::string *)(v3 + 304), "/");
      std::string::~string((void *)(v3 + 304));
      *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = -117901064;
      std::string::~string((void *)(v3 + 240));
      *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = -117901064;
      *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(scene_id);
      }
      v12 = *scene_id;
      if ( *(char *)(((v3 + 496) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) )
      {
        v12 = 32;
        __asan_report_store_n(v3 + 496, 32LL);
      }
      common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v3 + 496), v12);
      *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 432) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 432, 32LL);
      }
      std::operator+<char>((std::string *)(v3 + 432), (const std::string *)(v3 + 176), "scene");
      if ( *(char *)(((v3 + 560) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 560, 32LL);
      }
      std::operator+<char>((std::string *)(v3 + 560), (std::string *)(v3 + 432), (std::string *)(v3 + 496));
      if ( *(char *)(((v3 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 368, 32LL);
      }
      std::operator+<char>((std::string *)(v3 + 368), (std::string *)(v3 + 560), "_open_area.json");
      std::string::~string((void *)(v3 + 560));
      *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = -117901064;
      std::string::~string((void *)(v3 + 432));
      *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = -117901064;
      std::string::~string((void *)(v3 + 496));
      *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = -117901064;
      if ( common::tools::FileUtils::fileExists((const std::string *)(v3 + 368)) )
      {
        v13 = 0;
      }
      else
      {
        v14 = ((v3 + 752) >> 3) + 2147450880;
        *(_DWORD *)v14 = 0;
        *(_BYTE *)(v14 + 4) = 0;
        Json::Value::Value(v3 + 752, 0LL);
        if ( !parseJsonFile((const std::string *)(v3 + 368), (Json::Value *)(v3 + 752)) )
        {
          *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 624) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 624, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 624),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadOpenAreaPointConfig",
            1637);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 624),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v16 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  v15,
                  (const char (*)[31])"parseJsonFile fail, json_name:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v3 + 368));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 624));
          *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v17 = 0;
        }
        else
        {
          open_area_point_vec = &std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 112))->second.open_area_point_vec;
          if ( !data::vecFromJson((const Json::Value *)(v3 + 752), open_area_point_vec) )
          {
            *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 688) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 688, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 688),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadOpenAreaPointConfig",
              1643);
            v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 688),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v19 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    v18,
                    (const char (*)[29])"vecFromJson fail, json_name:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, (const std::string *)(v3 + 368));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 688));
            *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v17 = 0;
          }
          else
          {
            v17 = 1;
          }
        }
        Json::Value::~Value((Json::Value_0 *const)(v3 + 752));
        if ( v17 == 1 )
          v13 = 2;
        else
          v13 = 1;
      }
      std::string::~string((void *)(v3 + 368));
      if ( v13 )
      {
        if ( v13 == 2 )
          v20 = 2;
        else
          v20 = 1;
      }
      else
      {
        v20 = 0;
      }
      std::string::~string((void *)(v3 + 176));
      if ( v20 )
      {
        if ( v20 == 2 )
          v9 = 2;
        else
          v9 = 1;
      }
      else
      {
        v9 = 0;
      }
    }
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = -117901064;
    v21 = ((v3 + 752) >> 3) + 2147450880;
    *(_DWORD *)v21 = -117901064;
    *(_BYTE *)(v21 + 4) = -8;
    if ( v9 && v9 != 2 )
    {
      v22 = 0;
      goto LABEL_63;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v3 + 48));
  }
  v22 = 1;
LABEL_63:
  if ( v22 == 1 )
    v2 = 0;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 104) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 1652: range 000000000F25DFDE-000000000F25EBBC
int32_t __cdecl JsonConfigMgr::loadNpcBornConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t AllFilesWithExtension; // edx
  char v6; // al
  char *v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t v11; // r14d
  unsigned __int64 v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  _DWORD *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  unsigned __int64 v18; // rax
  _DWORD *v19; // rax
  int32_t result; // eax
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-2C0h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+18h] [rbp-2B8h]
  char v24[688]; // [rsp+20h] [rbp-2B0h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(640LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 48 1 9 <unknown> 64 4 8 ret:1654 80 8 16 __for_begin:1661 112 8 14 __for_end:1661 144 24 13 f"
                        "ile_vec:1653 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 40 "
                        "9 root:1664 544 64 20 npc_born_config:1671";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadNpcBornConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862725] = -218959360;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -234881024;
  v4[536862736] = -218959118;
  v4[536862739] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 144));
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, config);
  *(_DWORD *)(v2 + 64) = 0;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 208),
    ".json",
    (const std::allocator<char> *)(v2 + 48));
  v7 = (char *)(v2 + 208);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->scene_npc_born_json_base_dir,
                            (const std::string *)(v2 + 208),
                            (std::vector<std::string> *)(v2 + 144));
  v6 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v6 != 0;
  if ( v6 != 0 && v6 <= 3 )
    __asan_report_store4(v2 + 64, v7);
  *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 208));
  *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 64);
  if ( *(_DWORD *)(v2 + 64) )
  {
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 272, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "loadNpcBornConfig",
      1658);
    v8 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
           (common::milog::MiLogStream *const)(v2 + 272),
           (const char (*)[62])"getAllFilesWithExtension fails, scene_npc_born_json_base_dir:");
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &config->scene_npc_born_json_base_dir);
    v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v10, (const int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    v11 = -1;
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v2 + 144);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 80, v7);
    *(std::vector<std::string>::iterator *)(v2 + 80) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v7);
    *(std::vector<std::string>::iterator *)(v2 + 112) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 80),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 112)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v12 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v12 = 0;
      *(_BYTE *)(v12 + 4) = 0;
      Json::Value::Value(v2 + 464, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 464)) )
      {
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadNpcBornConfig",
          1667);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v13,
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      else
      {
        v15 = (_DWORD *)(((v2 + 544) >> 3) + 2147450880);
        *v15 = 0;
        v15[1] = 0;
        data::ConfigLevelNpcBornPos::ConfigLevelNpcBornPos((data::ConfigLevelNpcBornPos *const)(v2 + 544));
        if ( !data::ConfigLevelNpcBornPos::fromJson(
                (data::ConfigLevelNpcBornPos *const)(v2 + 544),
                (const Json::Value *)(v2 + 464)) )
        {
          *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadNpcBornConfig",
            1674);
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 400),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v17 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v16,
                  (const char (*)[25])"mapFromJson fails, path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, file_path);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
          *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
          if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 64, file_path);
          *(_DWORD *)(v2 + 64) = -1;
        }
        std::vector<data::ConfigLevelNpcBornPos>::push_back(
          &this->npc_born_vec,
          (const std::vector<data::ConfigLevelNpcBornPos>::value_type *)(v2 + 544));
        data::ConfigLevelNpcBornPos::~ConfigLevelNpcBornPos((data::ConfigLevelNpcBornPos *const)(v2 + 544));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 464));
      v18 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v18 = -117901064;
      *(_BYTE *)(v18 + 4) = -8;
      v19 = (_DWORD *)(((v2 + 544) >> 3) + 2147450880);
      *v19 = -117901064;
      v19[1] = -117901064;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    v11 = *(_DWORD *)(v2 + 64);
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 144));
  result = v11;
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1684: range 000000000F25EBBE-000000000F25F919
int32_t __cdecl JsonConfigMgr::loadClimateConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::string *p_json_config_base_dir; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  char *v12; // rsi
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // r14d
  std::__shared_ptr_access<data::ConfigClimateInfo,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rdx
  std::shared_ptr<data::ConfigClimateInfo> *v17; // r8
  data::JsonClimateType *p_climate_type; // rax
  __int64 climate_type; // rsi
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigClimateInfo> >,false,false>,bool> v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  int v26; // eax
  int v27; // edx
  data::ConfigClimateInfoMap *__for_range; // [rsp+20h] [rbp-2B0h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigClimateInfoBase> >,false,true>::reference v30; // [rsp+28h] [rbp-2A8h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigClimateInfoBase> > >::type *climate_template_name; // [rsp+30h] [rbp-2A0h]
  char v32[656]; // [rsp+40h] [rbp-290h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 32 4 17 climate_type:1709 48 8 16 __for_begin:1702 80 8 14 __for_end:1702 112 16 28 config_cl"
                        "imate_info_ptr:1704 144 32 24 config_climate_path:1685 208 32 9 <unknown> 272 32 9 <unknown> 336"
                        " 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 40 9 root:1691";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::loadClimateConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862737] = -218103808;
  v5[536862738] = -202116109;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v3 + 144) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 175) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 175) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v3 + 144, 32LL);
  }
  std::operator+<char>((std::string *)(v3 + 144), p_json_config_base_dir, "climate/ConfigClimate.json");
  if ( common::tools::FileUtils::fileExists((const std::string *)(v3 + 144)) )
  {
    if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadClimateConfig",
      1688);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 208),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v7, (const char (*)[18])"json config file:");
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 144));
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])" not found!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
    *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
  }
  else
  {
    Json::Value::Value(v3 + 528, 0LL);
    if ( !parseJsonFile((const std::string *)(v3 + 144), (Json::Value *)(v3 + 528)) )
    {
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadClimateConfig",
        1694);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 272),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              v10,
              (const char (*)[42])"parseJsonFile fails, config_climate_path:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v3 + 144));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
    }
    else
    {
      v12 = (char *)(v3 + 528);
      if ( !data::ConfigClimate::fromJson(&this->config_climate_, (const Json::Value *)(v3 + 528)) )
      {
        if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadClimateConfig",
          1699);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v13,
                (const char (*)[36])"fromJson fail, config_climate_path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v3 + 144));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
      }
      else
      {
        __for_range = &this->config_climate_.templates;
        if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 48, v12);
        *(std::unordered_map<std::string,std::shared_ptr<data::ConfigClimateInfoBase>>::iterator *)(v3 + 48) = std::unordered_map<std::string,std::shared_ptr<data::ConfigClimateInfoBase>>::begin(__for_range);
        if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 80, v12);
        *(std::unordered_map<std::string,std::shared_ptr<data::ConfigClimateInfoBase>>::iterator *)(v3 + 80) = std::unordered_map<std::string,std::shared_ptr<data::ConfigClimateInfoBase>>::end(__for_range);
        while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigClimateInfoBase>>,true>(
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigClimateInfoBase> >,true> *)(v3 + 48),
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigClimateInfoBase> >,true> *)(v3 + 80)) )
        {
          v30 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigClimateInfoBase>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigClimateInfoBase> >,false,true> *const)(v3 + 48));
          climate_template_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigClimateInfoBase>>(v30);
          std::get<1ul,std::string const,std::shared_ptr<data::ConfigClimateInfoBase>>(v30);
          *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ConfigClimateInfo,data::ConfigClimateInfoBase>((const std::shared_ptr<data::ConfigClimateInfoBase> *)(v3 + 112));
          if ( std::operator==<data::ConfigClimateInfo>(
                 (const std::shared_ptr<data::ConfigClimateInfo> *)(v3 + 112),
                 0LL) )
          {
            v15 = 0;
          }
          else
          {
            *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
            v16 = std::__shared_ptr_access<data::ConfigClimateInfo,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigClimateInfo,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            p_climate_type = &v16->climate_type;
            if ( *(_BYTE *)(((unsigned __int64)p_climate_type >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)p_climate_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_climate_type >> 3)
                                                                               + 0x7FFF8000) )
            {
              __asan_report_load4(p_climate_type);
            }
            climate_type = (unsigned int)v16->climate_type;
            if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 32, climate_type);
            *(_DWORD *)(v3 + 32) = climate_type;
            v20 = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>>::emplace<unsigned int &,std::shared_ptr<data::ConfigClimateInfo>&>(
                    &this->config_climate_info_map_,
                    (unsigned int *)(v3 + 32),
                    (std::shared_ptr<data::ConfigClimateInfo> *)(v3 + 112),
                    (unsigned int *)&this->config_climate_info_map_,
                    v17);
            if ( !v20.second )
            {
              *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 400, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 400),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadClimateConfig",
                1712);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 400),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                      v21,
                      (const char (*)[57])"same climate_type not supported yet, json_climate_type: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v3 + 32));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
              *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v15 = 1;
            }
            else
            {
              *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 464) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 464, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 464),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/json_config_mgr.cpp",
                "loadClimateConfig",
                1715);
              v23 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      (common::milog::MiLogStream *const)(v3 + 464),
                      (const char (*)[14])"climate_type:");
              v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v23,
                      (const unsigned int *)(v3 + 32));
              v25 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      v24,
                      (const char (*)[24])" climate_template_name:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, climate_template_name);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 464));
              *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = -117901064;
              v15 = 2;
            }
          }
          std::shared_ptr<data::ConfigClimateInfo>::~shared_ptr((std::shared_ptr<data::ConfigClimateInfo> *const)(v3 + 112));
          if ( v15 )
          {
            if ( v15 == 2 )
              v26 = 2;
            else
              v26 = 1;
          }
          else
          {
            v26 = 0;
          }
          *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -1800;
          *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
          if ( v26 && v26 != 2 )
          {
            v27 = 0;
            goto LABEL_49;
          }
          std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigClimateInfoBase>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigClimateInfoBase> >,false,true> *const)(v3 + 48));
        }
        v27 = 1;
LABEL_49:
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( v27 == 1 )
          v2 = 0;
      }
    }
    Json::Value::~Value((Json::Value_0 *const)(v3 + 528));
  }
  std::string::~string((void *)(v3 + 144));
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return v2;
};

// Line 1722: range 000000000F25F91A-000000000F260469
int32_t __cdecl JsonConfigMgr::loadAllAbilityGroupConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t AllFilesWithExtension; // edx
  char v6; // al
  char *v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t v11; // r14d
  unsigned __int64 v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  unsigned __int64 v17; // rax
  int32_t result; // eax
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-260h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+18h] [rbp-258h]
  char v22[592]; // [rsp+20h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 4 8 ret:1724 80 8 16 __for_begin:1731 112 8 14 __for_end:1731 144 24 13 f"
                        "ile_vec:1723 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 40 9 root:1734";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadAllAbilityGroupConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862725] = -218959360;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 144));
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, config);
  *(_DWORD *)(v2 + 64) = 0;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 208),
    ".json",
    (const std::allocator<char> *)(v2 + 48));
  v7 = (char *)(v2 + 208);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->ability_group_json_base_dir,
                            (const std::string *)(v2 + 208),
                            (std::vector<std::string> *)(v2 + 144));
  v6 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v6 != 0;
  if ( v6 != 0 && v6 <= 3 )
    __asan_report_store4(v2 + 64, v7);
  *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 208));
  *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 64);
  if ( *(_DWORD *)(v2 + 64) )
  {
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 272, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllAbilityGroupConfig",
      1728);
    v8 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
           (common::milog::MiLogStream *const)(v2 + 272),
           (const char (*)[61])"getAllFilesWithExtension fails, ability_group_json_base_dir:");
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &config->ability_group_json_base_dir);
    v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v10, (const int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    v11 = *(_DWORD *)(v2 + 64);
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v2 + 144);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 80, v7);
    *(std::vector<std::string>::iterator *)(v2 + 80) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v7);
    *(std::vector<std::string>::iterator *)(v2 + 112) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 80),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 112)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v12 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v12 = 0;
      *(_BYTE *)(v12 + 4) = 0;
      Json::Value::Value(v2 + 464, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 464)) )
      {
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllAbilityGroupConfig",
          1737);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v13,
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
        *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      else if ( !data::mapFromJson((const Json::Value *)(v2 + 464), &this->config_ability_group_map_) )
      {
        *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 400, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 400),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllAbilityGroupConfig",
          1743);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 400),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v15,
                (const char (*)[25])"mapFromJson fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
        *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 464));
      v17 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v17 = -117901064;
      *(_BYTE *)(v17 + 4) = -8;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    v11 = *(_DWORD *)(v2 + 64);
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 144));
  result = v11;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 1752: range 000000000F26046A-000000000F260B24
int32_t __cdecl JsonConfigMgr::loadWidgetConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  char v15[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 32 27 config_widget_path_str:1753 112 32 9 <unknown> 176 32 9 <unknown> 240 32 9 <unknown> "
                        "304 40 9 root:1759";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadWidgetConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862724] = -219021312;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -218103808;
  v4[536862731] = -202116109;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 48, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 48), p_json_config_base_dir, "widget/ConfigWidget.json");
  if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 48)) )
  {
    if ( *(char *)(((v2 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadWidgetConfig",
      1756);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 112),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v6, (const char (*)[18])"json config file:");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, (const std::string *)(v2 + 48));
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])" not found!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 112));
    *(_DWORD *)(((v2 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v9 = -1;
  }
  else
  {
    Json::Value::Value(v2 + 304, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 48), (Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 176, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadWidgetConfig",
        1762);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 176),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              v10,
              (const char (*)[45])"parseJsonFile fails, config_widget_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
      *(_DWORD *)(((v2 + 176) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else if ( !data::ConfigWidget::fromJson(&this->widget_json_config_.config_widget, (const Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadWidgetConfig",
        1767);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              v12,
              (const char (*)[39])"fromJson fail, config_widget_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 304));
  }
  std::string::~string((void *)(v2 + 48));
  result = v9;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1775: range 000000000F260B26-000000000F2611E0
int32_t __cdecl JsonConfigMgr::loadWidgetNewConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  char v15[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 32 27 config_widget_path_str:1776 112 32 9 <unknown> 176 32 9 <unknown> 240 32 9 <unknown> "
                        "304 40 9 root:1782";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadWidgetNewConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862724] = -219021312;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -218103808;
  v4[536862731] = -202116109;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 48, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 48), p_json_config_base_dir, "widget_new/ConfigWidgetNew.json");
  if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 48)) )
  {
    if ( *(char *)(((v2 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadWidgetNewConfig",
      1779);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 112),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v6, (const char (*)[18])"json config file:");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, (const std::string *)(v2 + 48));
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])" not found!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 112));
    *(_DWORD *)(((v2 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v9 = -1;
  }
  else
  {
    Json::Value::Value(v2 + 304, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 48), (Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 176, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadWidgetNewConfig",
        1785);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 176),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              v10,
              (const char (*)[45])"parseJsonFile fails, config_widget_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
      *(_DWORD *)(((v2 + 176) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else if ( !data::ConfigMainWidgetToy::fromJson(
                 &this->widget_json_new_config_.config_main_widget_toy,
                 (const Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadWidgetNewConfig",
        1790);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              v12,
              (const char (*)[39])"fromJson fail, config_widget_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 304));
  }
  std::string::~string((void *)(v2 + 48));
  result = v9;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1798: range 000000000F2611E2-000000000F263A0D
__int64 __fastcall JsonConfigMgr::calcCoveredCoordinateByPolygon(
        JsonConfigMgr *const this,
        __int64 config,
        uint32_t scene_id,
        data::VisionLevelType vision_level,
        const data::Point2DList *point_vec,
        std::set<Coordinate> *border_coord_set,
        std::set<Coordinate> *inner_coord_set)
{
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  char v10; // dl
  __int64 v11; // rsi
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  bool v14; // al
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::_Rb_tree_const_iterator<Coordinate> v17; // rsi
  std::vector<data::Point2D>::size_type v18; // rax
  float x; // ecx
  float v20; // ecx
  unsigned __int64 v21; // rax
  unsigned __int64 v22; // rax
  std::vector<data::Point2D>::const_reference v23; // rdx
  float *p_y; // rax
  std::vector<data::Point2D>::const_reference v25; // rax
  float *p_x; // rdx
  char v27; // cl
  size_t v28; // rsi
  const std::set<Coordinate>::value_type *v29; // rax
  std::queue<Coordinate>::reference v30; // rax
  _QWORD *v31; // rdx
  __int64 v32; // rsi
  __gnu_cxx::__normal_iterator<const std::pair<int,int>*,std::vector<std::pair<int,int>> >::reference v33; // rax
  int v34; // ecx
  int32_t v35; // ecx
  int v36; // esi
  float v37; // xmm1_4
  double v38; // xmm0_8
  float y; // xmm2_4
  double v40; // xmm0_8
  std::_Rb_tree_const_iterator<Coordinate>::_Base_ptr M_node; // r14
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int v44; // r14d
  unsigned __int64 v45; // rax
  unsigned __int64 v46; // rax
  unsigned __int64 v47; // rax
  char *v48; // rsi
  std::set<int> *v49; // rax
  common::milog::MiLogStream *v50; // rax
  _BOOL4 v51; // eax
  std::_Rb_tree_const_iterator<int>::_Base_ptr v52; // rcx
  char *v53; // rsi
  bool v54; // al
  common::milog::MiLogStream *v55; // rax
  int *v56; // rax
  int32_t *v57; // rdx
  int *v58; // rax
  int32_t *v59; // rdx
  int v60; // ecx
  char v61; // al
  const int *v62; // rcx
  int *v63; // r8
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  int v66; // edx
  int v67; // edx
  unsigned __int64 v68; // rax
  const data::Point2DList *v69; // rsi
  common::milog::MiLogStream *v70; // rax
  bool v71; // al
  std::_Rb_tree_const_iterator<Coordinate>::reference v72; // rax
  _QWORD *v73; // rdx
  float v74; // xmm3_4
  float y_; // [rsp+10h] [rbp-7A0h]
  unsigned int v77; // [rsp+14h] [rbp-79Ch]
  HK4EDesignConfig *configa; // [rsp+30h] [rbp-780h]
  float grid_width; // [rsp+44h] [rbp-76Ch]
  int32_t y_coord_begin; // [rsp+48h] [rbp-768h]
  int32_t y_coord_end; // [rsp+4Ch] [rbp-764h]
  size_t i; // [rsp+50h] [rbp-760h]
  std::unordered_map<unsigned int,SceneScriptConfig> *scene_script_config_map; // [rsp+58h] [rbp-758h]
  SceneScriptConfig *scene_script_config; // [rsp+60h] [rbp-750h]
  const Vector2 *begin_pos; // [rsp+68h] [rbp-748h]
  std::map<int,std::set<int>> *__for_range_1; // [rsp+78h] [rbp-738h]
  std::_Rb_tree_iterator<std::pair<int const,std::set<int> > >::reference v91; // [rsp+80h] [rbp-730h]
  std::tuple_element<0,std::pair<int const,std::set<int> > >::type *x_coord; // [rsp+88h] [rbp-728h]
  std::tuple_element<1,const std::pair<int const,std::set<int> > >::type *y_coord_set; // [rsp+90h] [rbp-720h]
  const Coordinate *coord; // [rsp+98h] [rbp-718h]
  std::vector<data::Point2D>::const_reference p1; // [rsp+A0h] [rbp-710h]
  std::vector<data::Point2D>::const_reference p2; // [rsp+A8h] [rbp-708h]
  const std::vector<std::pair<int,int>> *__for_range; // [rsp+B0h] [rbp-700h]
  const std::pair<int,int> *pr; // [rsp+B8h] [rbp-6F8h]
  char v99[1776]; // [rsp+C0h] [rbp-6F0h] BYREF
  Vector2 v100; // 0:xmm0_8.8

  configa = (HK4EDesignConfig *)config;
  v7 = (unsigned __int64)v99;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_5(1728LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "39 32 1 9 <unknown> 48 4 12 y_coord:1908 64 4 13 scene_id:1796 80 8 15 scene_iter:1821 112 8 9 <"
                        "unknown> 144 8 11 point1:1840 176 8 11 point2:1841 208 8 9 <unknown> 240 8 9 <unknown> 272 8 16 "
                        "__for_begin:1855 304 8 14 __for_end:1855 336 8 15 next_coord:1857 368 8 13 low_left:1863 400 8 1"
                        "5 high_right:1864 432 8 16 __for_begin:1885 464 8 14 __for_end:1885 496 8 16 __for_begin:1891 52"
                        "8 8 14 __for_end:1891 560 8 14 last_iter:1899 592 8 9 <unknown> 624 8 9 <unknown> 656 8 9 iter:1"
                        "931 688 8 9 <unknown> 720 8 10 point:1935 752 8 10 coord:1852 784 8 10 coord:1933 816 24 18 dire"
                        "ction_vec:1804 880 24 12 polygon:1925 944 32 9 <unknown> 1008 32 9 <unknown> 1072 32 9 <unknown>"
                        " 1136 32 9 <unknown> 1200 32 9 <unknown> 1264 32 9 <unknown> 1328 32 9 <unknown> 1392 32 9 <unkn"
                        "own> 1456 48 14 coord_set:1845 1536 48 14 coord_map:1884 1616 80 14 coord_que:1844";
  *(_QWORD *)(v7 + 16) = JsonConfigMgr::calcCoveredCoordinateByPolygon;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556927;
  v9[536862722] = 61956;
  v9[536862722] = -234881024;
  v9[536862723] = 62194;
  v9[536862723] = -234881024;
  v9[536862724] = 62194;
  v9[536862724] = -234881024;
  v9[536862725] = 62194;
  v9[536862725] = -234881024;
  v9[536862726] = 62194;
  v9[536862726] = -234881024;
  v9[536862727] = 62194;
  v9[536862727] = -234881024;
  v9[536862728] = 62194;
  v9[536862728] = -234881024;
  v9[536862729] = 62194;
  v9[536862729] = -234881024;
  v9[536862730] = 62194;
  v9[536862730] = -234881024;
  v9[536862731] = 62194;
  v9[536862731] = -234881024;
  v9[536862732] = 62194;
  v9[536862732] = -234881024;
  v9[536862733] = 62194;
  v9[536862733] = -234881024;
  v9[536862734] = 62194;
  v9[536862734] = -234881024;
  v9[536862735] = 62194;
  v9[536862735] = -234881024;
  v9[536862736] = 62194;
  v9[536862736] = -234881024;
  v9[536862737] = 62194;
  v9[536862737] = -234881024;
  v9[536862738] = 62194;
  v9[536862738] = -234881024;
  v9[536862739] = 62194;
  v9[536862739] = -234881024;
  v9[536862740] = 62194;
  v9[536862740] = -234881024;
  v9[536862741] = 62194;
  v9[536862741] = -234881024;
  v9[536862742] = 62194;
  v9[536862742] = -234881024;
  v9[536862743] = 62194;
  v9[536862743] = -234881024;
  v9[536862744] = 62194;
  v9[536862744] = -234881024;
  v9[536862745] = 62194;
  v9[536862746] = -218959360;
  v9[536862747] = 62194;
  v9[536862748] = -218959360;
  v9[536862749] = 62194;
  v9[536862750] = -219021312;
  v9[536862751] = 62194;
  v9[536862752] = -219021312;
  v9[536862753] = 62194;
  v9[536862754] = -219021312;
  v9[536862755] = 62194;
  v9[536862756] = -219021312;
  v9[536862757] = 62194;
  v9[536862758] = -219021312;
  v9[536862759] = 62194;
  v9[536862760] = -219021312;
  v9[536862761] = 62194;
  v9[536862762] = -219021312;
  v9[536862763] = 62194;
  v9[536862764] = -219021312;
  v9[536862765] = 62194;
  v9[536862767] = -218959118;
  v9[536862769] = -219021312;
  v9[536862770] = 62194;
  v9[536862773] = -202116109;
  *(_DWORD *)(v7 + 64) = scene_id;
  if ( !HK4EDesignConfig::isCreateStaticMesh((HK4EDesignConfig *const)config) )
  {
    v77 = 0;
  }
  else
  {
    v10 = *(_BYTE *)(((v7 + 975) >> 3) + 0x7FFF8000);
    LOBYTE(config) = v10 != 0;
    if ( *(char *)(((v7 + 944) >> 3) + 0x7FFF8000) < 0 || v10 != 0 && (char)((v7 - 80 + 31) & 7) >= v10 )
    {
      config = 32LL;
      __asan_report_store_n(v7 + 944, 32LL);
    }
    *(_QWORD *)(v7 + 944) = 0LL;
    *(_QWORD *)(v7 + 952) = 0LL;
    *(_QWORD *)(v7 + 960) = 0LL;
    *(_QWORD *)(v7 + 968) = 0LL;
    if ( *(_BYTE *)(((v7 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v7 + 944, config);
    *(_DWORD *)(v7 + 944) = -1;
    if ( *(_BYTE *)(((v7 + 956) >> 3) + 0x7FFF8000) != 0
      && (char)(((v7 - 80 + 12) & 7) + 3) >= *(_BYTE *)(((v7 + 956) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v7 + 956, (((_BYTE)v7 - 80 + 12) & 7u) + 3);
    }
    *(_DWORD *)(v7 + 956) = -1;
    v11 = (((_BYTE)v7 - 80 + 20) & 7u) + 3;
    if ( *(_BYTE *)(((v7 + 964) >> 3) + 0x7FFF8000) != 0
      && (char)(((v7 - 80 + 20) & 7) + 3) >= *(_BYTE *)(((v7 + 964) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v7 + 964, v11);
    }
    *(_DWORD *)(v7 + 964) = 1;
    if ( *(_BYTE *)(((v7 + 968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v7 + 968, v11);
    *(_DWORD *)(v7 + 968) = 1;
    std::allocator<std::pair<int,int>>::allocator((std::allocator<std::pair<int,int> > *const)(v7 + 32));
    std::vector<std::pair<int,int>>::vector(
      (std::vector<std::pair<int,int>> *const)(v7 + 816),
      (std::initializer_list<std::pair<int,int> >)__PAIR128__(4LL, v7 + 944),
      (const std::vector<std::pair<int,int>>::allocator_type *)(v7 + 32));
    std::allocator<std::pair<int,int>>::~allocator((std::allocator<std::pair<int,int> > *const)(v7 + 32));
    *(_BYTE *)(((v7 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v7 + 944) >> 3) + 0x7FFF8000) = -117901064;
    if ( std::vector<data::Point2D>::empty(point_vec) )
    {
      *(_DWORD *)(((v7 + 1008) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v7 + 1008) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v7 + 1039) >> 3) + 0x7FFF8000) != 0
        && (char)((v7 - 64 + 79) & 7) >= *(_BYTE *)(((v7 + 1039) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v7 + 1008, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v7 + 1008),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "calcCoveredCoordinateByPolygon",
        1815);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v7 + 1008),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              v12,
              (const char (*)[30])"point_vec is empty, scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v7 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 1008));
      *(_DWORD *)(((v7 + 1008) >> 3) + 0x7FFF8000) = -117901064;
      v77 = -1;
    }
    else
    {
      scene_script_config_map = &configa->lua_config_mgr.scene_script_config_map;
      *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v7 + 80, v7 + 944);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v7 + 80) = std::unordered_map<unsigned int,SceneScriptConfig>::find(
                                                                                     scene_script_config_map,
                                                                                     (const std::unordered_map<unsigned int,SceneScriptConfig>::key_type *)(v7 + 64));
      *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v7 + 112, v7 + 64);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v7 + 112) = std::unordered_map<unsigned int,SceneScriptConfig>::end(scene_script_config_map);
      v14 = std::__detail::operator==<std::pair<unsigned int const,SceneScriptConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v7 + 80),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v7 + 112));
      *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) = -8;
      if ( v14 )
      {
        *(_DWORD *)(((v7 + 1072) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v7 + 1072) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v7 + 1103) >> 3) + 0x7FFF8000) != 0
          && (char)((v7 + 79) & 7) >= *(_BYTE *)(((v7 + 1103) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v7 + 1072, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v7 + 1072),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "calcCoveredCoordinateByPolygon",
          1824);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v7 + 1072),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                v15,
                (const char (*)[62])"scene_json_config not found in scene_script_config, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v7 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 1072));
        *(_DWORD *)(((v7 + 1072) >> 3) + 0x7FFF8000) = -117901064;
        v77 = -1;
      }
      else
      {
        scene_script_config = &std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false> *const)(v7 + 80))->second;
        v17._M_node = (std::_Rb_tree_const_iterator<Coordinate>::_Base_ptr)(unsigned int)vision_level;
        grid_width = (float)(int)HK4EDesignConfig::findGridWidth(configa, vision_level);
        begin_pos = &scene_script_config->grid_map_begin_pos;
        std::set<Coordinate>::clear(border_coord_set);
        for ( i = 0LL; i < std::vector<data::Point2D>::size(point_vec); ++i )
        {
          p1 = std::vector<data::Point2D>::operator[](point_vec, i);
          v18 = std::vector<data::Point2D>::size(point_vec);
          p2 = std::vector<data::Point2D>::operator[](point_vec, (i + 1) % v18);
          *(_BYTE *)(((v7 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)p1 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p1 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(p1);
          }
          x = p1->x;
          if ( *(_BYTE *)(((unsigned __int64)&p1->y >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p1 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p1->y >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&p1->y);
          }
          Vector2::Vector2((Vector2 *const)(v7 + 144), x, p1->y);
          *(_BYTE *)(((v7 + 176) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)p2 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p2 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(p2);
          }
          v20 = p2->x;
          if ( *(_BYTE *)(((unsigned __int64)&p2->y >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p2 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p2->y >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&p2->y);
          }
          Vector2::Vector2((Vector2 *const)(v7 + 176), v20, p2->y);
          v21 = ((v7 + 1616) >> 3) + 2147450880;
          *(_DWORD *)v21 = 0;
          *(_DWORD *)(v21 + 4) = 0;
          *(_WORD *)(v21 + 8) = 0;
          std::queue<Coordinate>::queue<std::deque<Coordinate>,void>((std::queue<Coordinate> *const)(v7 + 1616));
          v22 = ((v7 + 1456) >> 3) + 2147450880;
          *(_DWORD *)v22 = 0;
          *(_WORD *)(v22 + 4) = 0;
          std::set<Coordinate>::set((std::set<Coordinate> *const)(v7 + 1456));
          *(_BYTE *)(((v7 + 240) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v7 + 208) >> 3) + 0x7FFF8000) = 0;
          v23 = std::vector<data::Point2D>::operator[](point_vec, i);
          p_y = &v23->y;
          if ( *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_y & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(p_y);
          }
          y_ = v23->y;
          v28 = i;
          v25 = std::vector<data::Point2D>::operator[](point_vec, i);
          p_x = &v25->x;
          v27 = *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000);
          LOBYTE(v28) = v27 != 0;
          if ( v27 != 0 && (char)(((unsigned __int8)v25 & 7) + 3) >= v27 )
            __asan_report_load4(v25);
          Vector2::Vector2((Vector2 *const)(v7 + 208), *p_x, y_);
          if ( *(_BYTE *)(((v7 + 240) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v7 + 240, v28);
          if ( *(_BYTE *)(((v7 + 208) >> 3) + 0x7FFF8000) )
            __asan_report_load8(v7 + 208);
          v100 = *(Vector2 *)(v7 + 208);
          *(Coordinate *)(v7 + 240) = SceneScriptConfig::getCoordinate(scene_script_config, vision_level, v100);
          std::queue<Coordinate>::push(
            (std::queue<Coordinate> *const)(v7 + 1616),
            (std::queue<Coordinate>::value_type *)(v7 + 240));
          *(_BYTE *)(((v7 + 240) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v7 + 208) >> 3) + 0x7FFF8000) = -8;
          v29 = std::queue<Coordinate>::front((std::queue<Coordinate> *const)(v7 + 1616));
          std::set<Coordinate>::insert((std::set<Coordinate> *const)(v7 + 1456), v29);
          while ( !std::queue<Coordinate>::empty((const std::queue<Coordinate> *const)(v7 + 1616)) )
          {
            v30 = std::queue<Coordinate>::front((std::queue<Coordinate> *const)(v7 + 1616));
            v31 = v30;
            v32 = ((_DWORD)v30 + 7) & 7;
            if ( ((unsigned __int8)v30 & 7) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000)
              && *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)((((unsigned __int64)&v30->y + 3) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)v30 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v30->y + 3) >> 3) + 0x7FFF8000) )
            {
              v32 = 8LL;
              __asan_report_load_n(v30, 8LL);
            }
            *(_QWORD *)(v7 + 752) = *v31;
            std::queue<Coordinate>::pop((std::queue<Coordinate> *const)(v7 + 1616));
            __for_range = (const std::vector<std::pair<int,int>> *)(v7 + 816);
            *(_BYTE *)(((v7 + 272) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v7 + 272) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 272, v32);
            *(std::vector<std::pair<int,int>>::const_iterator *)(v7 + 272) = std::vector<std::pair<int,int>>::begin(__for_range);
            *(_BYTE *)(((v7 + 304) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v7 + 304) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 304, v32);
            *(std::vector<std::pair<int,int>>::const_iterator *)(v7 + 304) = std::vector<std::pair<int,int>>::end(__for_range);
            while ( __gnu_cxx::operator!=<std::pair<int,int> const*,std::vector<std::pair<int,int>>>(
                      (const __gnu_cxx::__normal_iterator<const std::pair<int,int>*,std::vector<std::pair<int,int>> > *)(v7 + 272),
                      (const __gnu_cxx::__normal_iterator<const std::pair<int,int>*,std::vector<std::pair<int,int>> > *)(v7 + 304)) )
            {
              v33 = __gnu_cxx::__normal_iterator<std::pair<int,int> const*,std::vector<std::pair<int,int>>>::operator*((const __gnu_cxx::__normal_iterator<const std::pair<int,int>*,std::vector<std::pair<int,int>> > *const)(v7 + 272));
              pr = v33;
              *(_BYTE *)(((v7 + 336) >> 3) + 0x7FFF8000) = 0;
              v34 = *(_DWORD *)(v7 + 752);
              if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v33);
              }
              v35 = pr->first + v34;
              v36 = *(_DWORD *)(v7 + 756);
              if ( *(_BYTE *)(((unsigned __int64)&pr->second >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)pr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pr->second >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(&pr->second);
              }
              Coordinate::Coordinate((Coordinate *const)(v7 + 336), v35, v36 + pr->second);
              if ( !common::tools::MiscUtils::isContains<std::set<Coordinate>,Coordinate>(
                      (std::set<Coordinate> *)(v7 + 1456),
                      (const Coordinate *)(v7 + 336)) )
              {
                *(_BYTE *)(((v7 + 368) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)scene_script_config - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos >> 3)
                                                                                     + 0x7FFF8000) )
                {
                  __asan_report_load4(begin_pos);
                }
                v37 = begin_pos->x;
                if ( *(_BYTE *)(((v7 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 336) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v7 + 336);
                *(float *)&v38 = (float)((float)*(int *)(v7 + 336) * grid_width) + v37;
                if ( *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos.y >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)scene_script_config - 68 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos.y >> 3)
                                                                                         + 0x7FFF8000) )
                {
                  v38 = __asan_report_load4(&scene_script_config->grid_map_begin_pos.y);
                }
                y = scene_script_config->grid_map_begin_pos.y;
                if ( *(_BYTE *)(((v7 + 340) >> 3) + 0x7FFF8000) != 0
                  && (char)(((v7 + 84) & 7) + 3) >= *(_BYTE *)(((v7 + 340) >> 3) + 0x7FFF8000) )
                {
                  v38 = __asan_report_load4(v7 + 340);
                }
                Vector2::Vector2(
                  (Vector2 *const)(v7 + 368),
                  *(float *)&v38,
                  (float)((float)*(int *)(v7 + 340) * grid_width) + y);
                *(_BYTE *)(((v7 + 400) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v7 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 368) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v7 + 368);
                *(float *)&v40 = *(float *)(v7 + 368) + grid_width;
                if ( *(_BYTE *)(((v7 + 372) >> 3) + 0x7FFF8000) != 0
                  && (char)(((v7 + 116) & 7) + 3) >= *(_BYTE *)(((v7 + 372) >> 3) + 0x7FFF8000) )
                {
                  v40 = __asan_report_load4(v7 + 372);
                }
                Vector2::Vector2((Vector2 *const)(v7 + 400), *(float *)&v40, *(float *)(v7 + 372) + grid_width);
                if ( isGridIntersectLineSegment(
                       (const Vector2 *)(v7 + 368),
                       (const Vector2 *)(v7 + 400),
                       (const Vector2 *)(v7 + 144),
                       (const Vector2 *)(v7 + 176)) )
                {
                  std::queue<Coordinate>::push(
                    (std::queue<Coordinate> *const)(v7 + 1616),
                    (const std::queue<Coordinate>::value_type *)(v7 + 336));
                  std::set<Coordinate>::insert(
                    (std::set<Coordinate> *const)(v7 + 1456),
                    (const std::set<Coordinate>::value_type *)(v7 + 336));
                }
              }
              *(_BYTE *)(((v7 + 336) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v7 + 368) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v7 + 400) >> 3) + 0x7FFF8000) = -8;
              __gnu_cxx::__normal_iterator<std::pair<int,int> const*,std::vector<std::pair<int,int>>>::operator++((__gnu_cxx::__normal_iterator<const std::pair<int,int>*,std::vector<std::pair<int,int>> > *const)(v7 + 272));
            }
            *(_BYTE *)(((v7 + 272) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v7 + 304) >> 3) + 0x7FFF8000) = -8;
          }
          M_node = std::set<Coordinate>::end((const std::set<Coordinate> *const)(v7 + 1456))._M_node;
          v17._M_node = std::set<Coordinate>::begin((const std::set<Coordinate> *const)(v7 + 1456))._M_node;
          std::set<Coordinate>::insert<std::_Rb_tree_const_iterator<Coordinate>>(
            border_coord_set,
            v17,
            (std::_Rb_tree_const_iterator<Coordinate>)M_node);
          if ( std::set<Coordinate>::size(border_coord_set) <= 0xF4240 )
          {
            v44 = 1;
          }
          else
          {
            *(_DWORD *)(((v7 + 1136) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v7 + 1136) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v7 + 1167) >> 3) + 0x7FFF8000) != 0
              && (char)((v7 - 113) & 7) >= *(_BYTE *)(((v7 + 1167) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v7 + 1136, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v7 + 1136),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "calcCoveredCoordinateByPolygon",
              1878);
            v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v7 + 1136),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v43 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                    v42,
                    (const char (*)[35])"weather area is too big, scene_id:");
            v17._M_node = (std::_Rb_tree_const_iterator<Coordinate>::_Base_ptr)(v7 + 64);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, (const unsigned int *)(v7 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 1136));
            *(_DWORD *)(((v7 + 1136) >> 3) + 0x7FFF8000) = -117901064;
            v77 = -1;
            v44 = 0;
          }
          std::set<Coordinate>::~set((std::set<Coordinate> *const)(v7 + 1456));
          std::queue<Coordinate>::~queue((std::queue<Coordinate> *const)(v7 + 1616));
          *(_BYTE *)(((v7 + 144) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v7 + 176) >> 3) + 0x7FFF8000) = -8;
          v45 = ((v7 + 1616) >> 3) + 2147450880;
          *(_DWORD *)v45 = -117901064;
          *(_DWORD *)(v45 + 4) = -117901064;
          *(_WORD *)(v45 + 8) = -1800;
          v46 = ((v7 + 1456) >> 3) + 2147450880;
          *(_DWORD *)v46 = -117901064;
          *(_WORD *)(v46 + 4) = -1800;
          if ( v44 != 1 )
            goto LABEL_161;
        }
        v47 = ((v7 + 1536) >> 3) + 2147450880;
        *(_DWORD *)v47 = 0;
        *(_WORD *)(v47 + 4) = 0;
        std::map<int,std::set<int>>::map((std::map<int,std::set<int>> *const)(v7 + 1536));
        *(_BYTE *)(((v7 + 432) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v7 + 432) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 432, v17._M_node);
        *(std::set<Coordinate>::iterator *)(v7 + 432) = std::set<Coordinate>::begin(border_coord_set);
        *(_BYTE *)(((v7 + 464) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v7 + 464) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 464, v17._M_node);
        *(std::set<Coordinate>::iterator *)(v7 + 464) = std::set<Coordinate>::end(border_coord_set);
        while ( 1 )
        {
          v48 = (char *)(v7 + 464);
          if ( !std::operator!=(
                  (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v7 + 432),
                  (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v7 + 464)) )
            break;
          coord = std::_Rb_tree_const_iterator<Coordinate>::operator*((const std::_Rb_tree_const_iterator<Coordinate> *const)(v7 + 432));
          v49 = std::map<int,std::set<int>>::operator[](
                  (std::map<int,std::set<int>> *const)(v7 + 1536),
                  (const std::map<int,std::set<int>>::key_type *)coord);
          std::set<int>::insert(v49, &coord->y);
          std::_Rb_tree_const_iterator<Coordinate>::operator++((std::_Rb_tree_const_iterator<Coordinate> *const)(v7 + 432));
        }
        *(_BYTE *)(((v7 + 432) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v7 + 464) >> 3) + 0x7FFF8000) = -8;
        std::set<Coordinate>::clear(inner_coord_set);
        __for_range_1 = (std::map<int,std::set<int>> *)(v7 + 1536);
        *(_BYTE *)(((v7 + 496) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v7 + 496) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 496, v48);
        *(std::map<int,std::set<int>>::iterator *)(v7 + 496) = std::map<int,std::set<int>>::begin(__for_range_1);
        *(_BYTE *)(((v7 + 528) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v7 + 528) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 528, v48);
        *(std::map<int,std::set<int>>::iterator *)(v7 + 528) = std::map<int,std::set<int>>::end(__for_range_1);
        while ( std::operator!=(
                  (const std::_Rb_tree_iterator<std::pair<int const,std::set<int> > >::_Self *)(v7 + 496),
                  (const std::_Rb_tree_iterator<std::pair<int const,std::set<int> > >::_Self *)(v7 + 528)) )
        {
          v91 = std::_Rb_tree_iterator<std::pair<int const,std::set<int>>>::operator*((const std::_Rb_tree_iterator<std::pair<int const,std::set<int> > > *const)(v7 + 496));
          x_coord = std::get<0ul,int const,std::set<int>>(v91);
          y_coord_set = (std::tuple_element<1,const std::pair<int const,std::set<int> > >::type *)std::get<1ul,int const,std::set<int>>(v91);
          if ( std::set<int>::empty(y_coord_set) )
          {
            *(_DWORD *)(((v7 + 1200) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v7 + 1200) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v7 + 1231) >> 3) + 0x7FFF8000) != 0
              && (char)((v7 - 80 + 31) & 7) >= *(_BYTE *)(((v7 + 1231) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v7 + 1200, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v7 + 1200),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "calcCoveredCoordinateByPolygon",
              1895);
            v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v7 + 1200),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v50, (const char (*)[13])"invalid area");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 1200));
            *(_DWORD *)(((v7 + 1200) >> 3) + 0x7FFF8000) = -117901064;
            v77 = -1;
            v51 = 0;
          }
          else
          {
            *(_BYTE *)(((v7 + 560) >> 3) + 0x7FFF8000) = 0;
            v52 = std::set<int>::end(y_coord_set)._M_node;
            if ( *(_BYTE *)(((v7 + 560) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 560, v7 + 528);
            *(std::_Rb_tree_const_iterator<int> *)(v7 + 560) = std::prev<std::_Rb_tree_const_iterator<int>>(
                                                                 (std::_Rb_tree_const_iterator<int>)v52,
                                                                 1LL);
            *(_BYTE *)(((v7 + 592) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v7 + 592) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 592, 1LL);
            *(std::set<int>::iterator *)(v7 + 592) = std::set<int>::end(y_coord_set);
            v53 = (char *)(v7 + 592);
            v54 = std::operator==(
                    (const std::_Rb_tree_const_iterator<int>::_Self *)(v7 + 560),
                    (const std::_Rb_tree_const_iterator<int>::_Self *)(v7 + 592));
            *(_BYTE *)(((v7 + 592) >> 3) + 0x7FFF8000) = -8;
            if ( v54 )
            {
              *(_DWORD *)(((v7 + 1264) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v7 + 1264) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v7 + 1295) >> 3) + 0x7FFF8000) != 0
                && (char)((v7 - 64 + 79) & 7) >= *(_BYTE *)(((v7 + 1295) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v7 + 1264, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v7 + 1264),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "calcCoveredCoordinateByPolygon",
                1902);
              v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v7 + 1264),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                v55,
                (const char (*)[38])"set is not empty but last_iter is end");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 1264));
              *(_DWORD *)(((v7 + 1264) >> 3) + 0x7FFF8000) = -117901064;
              v77 = -1;
              v51 = 0;
            }
            else
            {
              *(_BYTE *)(((v7 + 624) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v7 + 624) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v7 + 624, v53);
              *(std::set<int>::iterator *)(v7 + 624) = std::set<int>::begin(y_coord_set);
              v56 = (int *)std::_Rb_tree_const_iterator<int>::operator*((const std::_Rb_tree_const_iterator<int> *const)(v7 + 624));
              v57 = v56;
              if ( *(_BYTE *)(((unsigned __int64)v56 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v56 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v56 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v56);
              }
              y_coord_begin = *v57;
              *(_BYTE *)(((v7 + 624) >> 3) + 0x7FFF8000) = -8;
              v58 = (int *)std::_Rb_tree_const_iterator<int>::operator*((const std::_Rb_tree_const_iterator<int> *const)(v7 + 560));
              v59 = v58;
              if ( *(_BYTE *)(((unsigned __int64)v58 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v58 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v58 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v58);
              }
              y_coord_end = *v59;
              *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) = 4;
              v60 = y_coord_begin + 1;
              v61 = *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000);
              if ( v61 != 0 && v61 <= 3 )
              {
                LOBYTE(v53) = v61 != 0;
                __asan_report_store4(v7 + 48, v53);
              }
              for ( *(_DWORD *)(v7 + 48) = v60; ; ++*(_DWORD *)(v7 + 48) )
              {
                if ( *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v7 + 48);
                if ( y_coord_end <= *(_DWORD *)(v7 + 48) )
                {
                  v66 = 1;
                  goto LABEL_130;
                }
                if ( !common::tools::MiscUtils::isContains<std::set<int> const,int>(y_coord_set, (const int *)(v7 + 48)) )
                {
                  std::set<Coordinate>::emplace<int const&,int &>(inner_coord_set, x_coord, (int *)(v7 + 48), v62, v63);
                  if ( std::set<Coordinate>::size(inner_coord_set) > 0xF4240 )
                    break;
                }
                if ( *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v7 + 48);
              }
              *(_DWORD *)(((v7 + 1328) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v7 + 1328) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v7 + 1359) >> 3) + 0x7FFF8000) != 0
                && (char)((v7 + 79) & 7) >= *(_BYTE *)(((v7 + 1359) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v7 + 1328, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v7 + 1328),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "calcCoveredCoordinateByPolygon",
                1919);
              v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v7 + 1328),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v65 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                      v64,
                      (const char (*)[35])"weather area is too big, scene_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v65,
                (const unsigned int *)(v7 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 1328));
              *(_DWORD *)(((v7 + 1328) >> 3) + 0x7FFF8000) = -117901064;
              v77 = -1;
              v66 = 0;
LABEL_130:
              *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) = -8;
              v51 = v66 == 1;
            }
          }
          *(_BYTE *)(((v7 + 560) >> 3) + 0x7FFF8000) = -8;
          if ( !v51 )
          {
            v67 = 0;
            goto LABEL_135;
          }
          std::_Rb_tree_iterator<std::pair<int const,std::set<int>>>::operator++((std::_Rb_tree_iterator<std::pair<int const,std::set<int> > > *const)(v7 + 496));
        }
        v67 = 1;
LABEL_135:
        *(_BYTE *)(((v7 + 496) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v7 + 528) >> 3) + 0x7FFF8000) = -8;
        if ( v67 == 1 )
        {
          v68 = ((v7 + 880) >> 3) + 2147450880;
          *(_WORD *)v68 = 0;
          *(_BYTE *)(v68 + 2) = 0;
          InteriorCheckablePolygon::InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v7 + 880));
          v69 = point_vec;
          if ( InteriorCheckablePolygon::initByPointVec((InteriorCheckablePolygon *const)(v7 + 880), point_vec) )
          {
            *(_DWORD *)(((v7 + 1392) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v7 + 1392) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v7 + 1423) >> 3) + 0x7FFF8000) != 0
              && (char)((v7 - 113) & 7) >= *(_BYTE *)(((v7 + 1423) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v7 + 1392, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v7 + 1392),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "calcCoveredCoordinateByPolygon",
              1928);
            v70 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v7 + 1392),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v70,
              (const char (*)[20])"initByPointVec fail");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 1392));
            *(_DWORD *)(((v7 + 1392) >> 3) + 0x7FFF8000) = -117901064;
            v77 = -1;
          }
          else
          {
            *(_BYTE *)(((v7 + 656) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v7 + 656) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 656, point_vec);
            *(std::set<Coordinate>::iterator *)(v7 + 656) = std::set<Coordinate>::begin(inner_coord_set);
            while ( 1 )
            {
              *(_BYTE *)(((v7 + 688) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v7 + 688) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v7 + 688, v69);
              *(std::set<Coordinate>::iterator *)(v7 + 688) = std::set<Coordinate>::end(inner_coord_set);
              v71 = std::operator!=(
                      (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v7 + 656),
                      (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v7 + 688));
              *(_BYTE *)(((v7 + 688) >> 3) + 0x7FFF8000) = -8;
              if ( !v71 )
                break;
              v72 = std::_Rb_tree_const_iterator<Coordinate>::operator*((const std::_Rb_tree_const_iterator<Coordinate> *const)(v7 + 656));
              v73 = v72;
              if ( ((unsigned __int8)v72 & 7) >= *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&v72->y + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)v72 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v72->y + 3) >> 3) + 0x7FFF8000) )
              {
                __asan_report_load_n(v72, 8LL);
              }
              *(_QWORD *)(v7 + 784) = *v73;
              *(_BYTE *)(((v7 + 720) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos.y >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)scene_script_config - 68 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos.y >> 3)
                                                                                       + 0x7FFF8000) )
              {
                __asan_report_load4(&scene_script_config->grid_map_begin_pos.y);
              }
              v74 = scene_script_config->grid_map_begin_pos.y
                  + (float)((float)((float)*(int *)(v7 + 788) + 0.5) * grid_width);
              if ( *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)scene_script_config - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_script_config->grid_map_begin_pos >> 3)
                                                                                   + 0x7FFF8000) )
              {
                __asan_report_load4(begin_pos);
              }
              Vector2::Vector2(
                (Vector2 *const)(v7 + 720),
                (float)((float)((float)*(int *)(v7 + 784) + 0.5) * grid_width) + begin_pos->x,
                v74);
              v69 = (const data::Point2DList *)(v7 + 720);
              if ( !InteriorCheckablePolygon::isPointInsidePolygon(
                      (const InteriorCheckablePolygon *const)(v7 + 880),
                      (const Vector2 *)(v7 + 720)) )
              {
                if ( *(_BYTE *)(((v7 + 656) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v7 + 656, v69);
                v69 = *(const data::Point2DList **)(v7 + 656);
                *(std::set<Coordinate>::iterator *)(v7 + 656) = std::set<Coordinate>::erase[abi:cxx11](
                                                                  inner_coord_set,
                                                                  (std::set<Coordinate>::const_iterator)v69);
              }
              else
              {
                std::_Rb_tree_const_iterator<Coordinate>::operator++((std::_Rb_tree_const_iterator<Coordinate> *const)(v7 + 656));
              }
              *(_BYTE *)(((v7 + 720) >> 3) + 0x7FFF8000) = -8;
            }
            *(_BYTE *)(((v7 + 656) >> 3) + 0x7FFF8000) = -8;
            v77 = 0;
          }
          InteriorCheckablePolygon::~InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v7 + 880));
        }
        std::map<int,std::set<int>>::~map((std::map<int,std::set<int>> *const)(v7 + 1536));
      }
    }
LABEL_161:
    std::vector<std::pair<int,int>>::~vector((std::vector<std::pair<int,int>> *const)(v7 + 816));
  }
  if ( v99 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF80B8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v9 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v9 + 2147450880 - (((_DWORD)v9 + 2147450888) & 0xFFFFFFF8) + 192) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v7 >> 3) + 0x7FFF80C4) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF80CC) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF80D4) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    __asan_stack_free_5(v7, 1728LL, v99);
  }
  return v77;
};

// Line 1951: range 000000000F263A0E-000000000F264F14
int32_t __cdecl JsonConfigMgr::loadClimateAreaConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int v5; // esi
  __int64 v6; // rsi
  unsigned int v7; // esi
  unsigned __int64 v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  unsigned __int64 v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  char *v15; // rsi
  uint32_t area_id; // ecx
  char v17; // al
  data::ConfigClimateArea *v18; // rdx
  data::ConfigClimateArea *v19; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>,bool> v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // rax
  unsigned __int64 v26; // rax
  unsigned __int64 v27; // rax
  int32_t ret; // [rsp+14h] [rbp-4ACh]
  data::SceneExcelConfigMap *__for_range; // [rsp+18h] [rbp-4A8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v32; // [rsp+20h] [rbp-4A0h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+28h] [rbp-498h]
  std::unordered_map<unsigned int,data::ConfigClimateArea> *config_climate_area_map; // [rsp+38h] [rbp-488h]
  std::vector<data::ConfigClimateArea> *__for_range_0; // [rsp+40h] [rbp-480h]
  __gnu_cxx::__normal_iterator<data::ConfigClimateArea*,std::vector<data::ConfigClimateArea> >::reference config_climate_area; // [rsp+48h] [rbp-478h]
  char v37[1136]; // [rsp+50h] [rbp-470h] BYREF

  v2 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1088LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 32 4 12 area_id:1987 48 8 16 __for_begin:1953 80 8 14 __for_end:1953 112 8 16 __for_begin:198"
                        "5 144 8 14 __for_end:1985 176 24 28 config_climate_area_vec:1971 240 32 14 scene_dir:1955 304 32"
                        " 9 <unknown> 368 32 9 <unknown> 432 32 27 climate_area_json_name:1956 496 32 9 <unknown> 560 32 "
                        "9 <unknown> 624 32 27 climate_area_json_path:1957 688 32 9 <unknown> 752 32 9 <unknown> 816 32 9"
                        " <unknown> 880 32 9 <unknown> 944 32 9 <unknown> 1008 40 9 root:1963";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadClimateAreaConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -218959360;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862736] = -219021312;
  v4[536862737] = 62194;
  v4[536862738] = -219021312;
  v4[536862739] = 62194;
  v4[536862740] = -219021312;
  v4[536862741] = 62194;
  v4[536862742] = -219021312;
  v4[536862743] = 62194;
  v4[536862744] = -219021312;
  v4[536862745] = 62194;
  v4[536862746] = -219021312;
  v4[536862747] = 62194;
  v4[536862748] = -219021312;
  v4[536862749] = 62194;
  v4[536862750] = -219021312;
  v4[536862751] = 62194;
  v4[536862752] = -218103808;
  v4[536862753] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 80)) )
  {
    v32 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v32);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(v32);
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v5 = *scene_id;
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      v5 = 32;
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 304), v5);
    v6 = (__int64)config;
    if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
    {
      v6 = 32LL;
      __asan_report_store_n(v2 + 368, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 368), (const std::string *)v6, (std::string *)(v2 + 304));
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 240), (std::string *)(v2 + 368), "/");
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 304));
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v7 = *scene_id;
    if ( *(char *)(((v2 + 496) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) )
    {
      v7 = 32;
      __asan_report_store_n(v2 + 496, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 496), v7);
    if ( *(char *)(((v2 + 560) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 560, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 560), "scene", (std::string *)(v2 + 496));
    if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 432, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 432), (std::string *)(v2 + 560), "_climate_areas.json");
    std::string::~string((void *)(v2 + 560));
    *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 496));
    *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 624) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 624, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 624), (const std::string *)(v2 + 240), (const std::string *)(v2 + 432));
    if ( !common::tools::FileUtils::fileExists((const std::string *)(v2 + 624)) )
    {
      v8 = ((v2 + 1008) >> 3) + 2147450880;
      *(_DWORD *)v8 = 0;
      *(_BYTE *)(v8 + 4) = 0;
      Json::Value::Value(v2 + 1008, 0LL);
      if ( !parseJsonFile((const std::string *)(v2 + 624), (Json::Value *)(v2 + 1008)) )
      {
        *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 688) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 688, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 688),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadClimateAreaConfig",
          1966);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 688),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                v9,
                (const char (*)[44])"parseJsonFile fail, climate_area_json_path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v2 + 624));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 688));
        *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        v11 = ((v2 + 176) >> 3) + 2147450880;
        *(_WORD *)v11 = 0;
        *(_BYTE *)(v11 + 2) = 0;
        std::vector<data::ConfigClimateArea>::vector((std::vector<data::ConfigClimateArea> *const)(v2 + 176));
        if ( !data::vecFromJson((const Json::Value *)(v2 + 1008), (data::ConfigClimateAreaList *)(v2 + 176)) )
        {
          *(_DWORD *)(((v2 + 752) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 752) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 783) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 783) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 752, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 752),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadClimateAreaConfig",
            1974);
          v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 752),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v13 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  v12,
                  (const char (*)[42])"vecFromJson fail, climate_area_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 624));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 752));
          *(_DWORD *)(((v2 + 752) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else if ( std::vector<data::ConfigClimateArea>::empty((const std::vector<data::ConfigClimateArea> *const)(v2 + 176)) )
        {
          *(_DWORD *)(((v2 + 816) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 816) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 847) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 847) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 816, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 816),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "loadClimateAreaConfig",
            1980);
          v14 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
                  (common::milog::MiLogStream *const)(v2 + 816),
                  (const char (*)[58])"config_climate_area_vec is empty, climate_area_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v2 + 624));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 816));
          *(_DWORD *)(((v2 + 816) >> 3) + 0x7FFF8000) = -117901064;
        }
        else
        {
          config_climate_area_map = &std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                       &this->scene_json_config_map_,
                                       scene_id)->config_climate_area_map;
          __for_range_0 = (std::vector<data::ConfigClimateArea> *)(v2 + 176);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 112, scene_id);
          *(std::vector<data::ConfigClimateArea>::iterator *)(v2 + 112) = std::vector<data::ConfigClimateArea>::begin(__for_range_0);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 144, scene_id);
          *(std::vector<data::ConfigClimateArea>::iterator *)(v2 + 144) = std::vector<data::ConfigClimateArea>::end(__for_range_0);
          while ( 1 )
          {
            v15 = (char *)(v2 + 144);
            if ( !__gnu_cxx::operator!=<data::ConfigClimateArea *,std::vector<data::ConfigClimateArea>>(
                    (const __gnu_cxx::__normal_iterator<data::ConfigClimateArea*,std::vector<data::ConfigClimateArea> > *)(v2 + 112),
                    (const __gnu_cxx::__normal_iterator<data::ConfigClimateArea*,std::vector<data::ConfigClimateArea> > *)(v2 + 144)) )
              break;
            config_climate_area = __gnu_cxx::__normal_iterator<data::ConfigClimateArea *,std::vector<data::ConfigClimateArea>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigClimateArea*,std::vector<data::ConfigClimateArea> > *const)(v2 + 112));
            *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)config_climate_area >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)config_climate_area >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(config_climate_area);
            }
            area_id = config_climate_area->area_id;
            v17 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
            if ( v17 != 0 && v17 <= 3 )
            {
              LOBYTE(v15) = v17 != 0;
              __asan_report_store4(v2 + 32, v15);
            }
            *(_DWORD *)(v2 + 32) = area_id;
            v18 = std::move<data::ConfigClimateArea &>(config_climate_area);
            v20 = std::unordered_map<unsigned int,data::ConfigClimateArea>::emplace<unsigned int &,data::ConfigClimateArea>(
                    config_climate_area_map,
                    (unsigned int *)(v2 + 32),
                    v18,
                    (unsigned int *)(v2 + 32),
                    v19);
            if ( !v20.second )
            {
              *(_DWORD *)(((v2 + 880) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 880) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 911) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 911) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 880, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 880),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadClimateAreaConfig",
                1990);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 880),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                      v21,
                      (const char (*)[27])"duplicate climate_area_id:");
              v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v22,
                      (const unsigned int *)(v2 + 32));
              v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v23,
                      (const char (*)[11])" scene_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, scene_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 880));
              *(_DWORD *)(((v2 + 880) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
            __gnu_cxx::__normal_iterator<data::ConfigClimateArea *,std::vector<data::ConfigClimateArea>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigClimateArea*,std::vector<data::ConfigClimateArea> > *const)(v2 + 112));
          }
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
          *(_DWORD *)(((v2 + 944) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 944) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 975) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 975) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 944, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 944),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "loadClimateAreaConfig",
            1996);
          v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  (common::milog::MiLogStream *const)(v2 + 944),
                  (const std::string *)(v2 + 624));
          common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v25, (const char (*)[11])" load succ");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 944));
          *(_DWORD *)(((v2 + 944) >> 3) + 0x7FFF8000) = -117901064;
        }
        std::vector<data::ConfigClimateArea>::~vector((std::vector<data::ConfigClimateArea> *const)(v2 + 176));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 1008));
    }
    std::string::~string((void *)(v2 + 624));
    std::string::~string((void *)(v2 + 432));
    std::string::~string((void *)(v2 + 240));
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = -117901064;
    v26 = ((v2 + 1008) >> 3) + 2147450880;
    *(_DWORD *)v26 = -117901064;
    *(_BYTE *)(v26 + 4) = -8;
    v27 = ((v2 + 176) >> 3) + 2147450880;
    *(_WORD *)v27 = -1800;
    *(_BYTE *)(v27 + 2) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
  }
  if ( v37 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8080) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 136) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1088LL, v37);
  }
  return ret;
};

// Line 2004: range 000000000F264F16-000000000F266615
int32_t __cdecl JsonConfigMgr::loadPolygonConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int v5; // esi
  __int64 v6; // rsi
  unsigned int v7; // esi
  unsigned __int64 v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  unsigned __int64 v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  char *v15; // rsi
  uint32_t polygon_id; // ecx
  char v17; // al
  std::remove_reference<const data::ConfigCommonPolygon&>::type *v18; // rdx
  const data::ConfigCommonPolygon *v19; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false>,bool> v20; // rax
  const unsigned int *v21; // r8
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rdx
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // r15
  std::map<unsigned int,unsigned int>::mapped_type *v33; // rax
  common::milog::MiLogStream *v34; // rax
  unsigned __int64 v35; // rax
  unsigned __int64 v36; // rax
  int32_t ret; // [rsp+14h] [rbp-4ECh]
  data::SceneExcelConfigMap *__for_range; // [rsp+18h] [rbp-4E8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v41; // [rsp+20h] [rbp-4E0h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+28h] [rbp-4D8h]
  std::unordered_map<unsigned int,data::ConfigCommonPolygon> *config_common_polygon_map; // [rsp+38h] [rbp-4C8h]
  std::vector<data::ConfigCommonPolygon> *__for_range_0; // [rsp+40h] [rbp-4C0h]
  __gnu_cxx::__normal_iterator<data::ConfigCommonPolygon*,std::vector<data::ConfigCommonPolygon> >::reference config_common_polygon; // [rsp+48h] [rbp-4B8h]
  char v46[1200]; // [rsp+50h] [rbp-4B0h] BYREF

  v2 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1152LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "20 32 4 15 polygon_id:2040 48 8 16 __for_begin:2006 80 8 14 __for_end:2006 112 8 16 __for_begin:"
                        "2038 144 8 14 __for_end:2038 176 24 30 config_common_polygon_vec:2024 240 32 14 scene_dir:2008 3"
                        "04 32 9 <unknown> 368 32 9 <unknown> 432 32 22 polygon_json_name:2009 496 32 9 <unknown> 560 32 "
                        "9 <unknown> 624 32 22 polygon_json_path:2010 688 32 9 <unknown> 752 32 9 <unknown> 816 32 9 <unk"
                        "nown> 880 32 9 <unknown> 944 32 9 <unknown> 1008 32 9 <unknown> 1072 40 9 root:2016";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadPolygonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -218959360;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862736] = -219021312;
  v4[536862737] = 62194;
  v4[536862738] = -219021312;
  v4[536862739] = 62194;
  v4[536862740] = -219021312;
  v4[536862741] = 62194;
  v4[536862742] = -219021312;
  v4[536862743] = 62194;
  v4[536862744] = -219021312;
  v4[536862745] = 62194;
  v4[536862746] = -219021312;
  v4[536862747] = 62194;
  v4[536862748] = -219021312;
  v4[536862749] = 62194;
  v4[536862750] = -219021312;
  v4[536862751] = 62194;
  v4[536862752] = -219021312;
  v4[536862753] = 62194;
  v4[536862754] = -218103808;
  v4[536862755] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 80)) )
  {
    v41 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v41);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(v41);
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v5 = *scene_id;
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      v5 = 32;
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 304), v5);
    v6 = (__int64)config;
    if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
    {
      v6 = 32LL;
      __asan_report_store_n(v2 + 368, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 368), (const std::string *)v6, (std::string *)(v2 + 304));
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 240), (std::string *)(v2 + 368), "/");
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 304));
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v7 = *scene_id;
    if ( *(char *)(((v2 + 496) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) )
    {
      v7 = 32;
      __asan_report_store_n(v2 + 496, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 496), v7);
    if ( *(char *)(((v2 + 560) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 560, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 560), "scene", (std::string *)(v2 + 496));
    if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 432, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 432), (std::string *)(v2 + 560), "_common_polygons.json");
    std::string::~string((void *)(v2 + 560));
    *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 496));
    *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 624) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 624, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 624), (const std::string *)(v2 + 240), (const std::string *)(v2 + 432));
    if ( !common::tools::FileUtils::fileExists((const std::string *)(v2 + 624)) )
    {
      v8 = ((v2 + 1072) >> 3) + 2147450880;
      *(_DWORD *)v8 = 0;
      *(_BYTE *)(v8 + 4) = 0;
      Json::Value::Value(v2 + 1072, 0LL);
      if ( !parseJsonFile((const std::string *)(v2 + 624), (Json::Value *)(v2 + 1072)) )
      {
        *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 688) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 688, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 688),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadPolygonConfig",
          2019);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 688),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                v9,
                (const char (*)[39])"parseJsonFile fail, polygon_json_path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v2 + 624));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 688));
        *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        v11 = ((v2 + 176) >> 3) + 2147450880;
        *(_WORD *)v11 = 0;
        *(_BYTE *)(v11 + 2) = 0;
        std::vector<data::ConfigCommonPolygon>::vector((std::vector<data::ConfigCommonPolygon> *const)(v2 + 176));
        if ( !data::vecFromJson((const Json::Value *)(v2 + 1072), (data::ConfigCommonPolygonList *)(v2 + 176)) )
        {
          *(_DWORD *)(((v2 + 752) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 752) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 783) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 783) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 752, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 752),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadPolygonConfig",
            2027);
          v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 752),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v13 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  v12,
                  (const char (*)[37])"vecFromJson fail, polygon_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 624));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 752));
          *(_DWORD *)(((v2 + 752) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else if ( std::vector<data::ConfigCommonPolygon>::empty((const std::vector<data::ConfigCommonPolygon> *const)(v2 + 176)) )
        {
          *(_DWORD *)(((v2 + 816) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 816) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 847) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 847) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 816, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 816),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "loadPolygonConfig",
            2033);
          v14 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                  (common::milog::MiLogStream *const)(v2 + 816),
                  (const char (*)[55])"config_common_polygon_vec is empty, polygon_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v2 + 624));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 816));
          *(_DWORD *)(((v2 + 816) >> 3) + 0x7FFF8000) = -117901064;
        }
        else
        {
          config_common_polygon_map = &std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                         &this->scene_json_config_map_,
                                         scene_id)->config_common_polygon_map;
          __for_range_0 = (std::vector<data::ConfigCommonPolygon> *)(v2 + 176);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 112, scene_id);
          *(std::vector<data::ConfigCommonPolygon>::iterator *)(v2 + 112) = std::vector<data::ConfigCommonPolygon>::begin(__for_range_0);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 144, scene_id);
          *(std::vector<data::ConfigCommonPolygon>::iterator *)(v2 + 144) = std::vector<data::ConfigCommonPolygon>::end(__for_range_0);
          while ( 1 )
          {
            v15 = (char *)(v2 + 144);
            if ( !__gnu_cxx::operator!=<data::ConfigCommonPolygon *,std::vector<data::ConfigCommonPolygon>>(
                    (const __gnu_cxx::__normal_iterator<data::ConfigCommonPolygon*,std::vector<data::ConfigCommonPolygon> > *)(v2 + 112),
                    (const __gnu_cxx::__normal_iterator<data::ConfigCommonPolygon*,std::vector<data::ConfigCommonPolygon> > *)(v2 + 144)) )
              break;
            config_common_polygon = __gnu_cxx::__normal_iterator<data::ConfigCommonPolygon *,std::vector<data::ConfigCommonPolygon>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigCommonPolygon*,std::vector<data::ConfigCommonPolygon> > *const)(v2 + 112));
            *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)config_common_polygon >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)config_common_polygon >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(config_common_polygon);
            }
            polygon_id = config_common_polygon->polygon_id;
            v17 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
            if ( v17 != 0 && v17 <= 3 )
            {
              LOBYTE(v15) = v17 != 0;
              __asan_report_store4(v2 + 32, v15);
            }
            *(_DWORD *)(v2 + 32) = polygon_id;
            v18 = std::move<data::ConfigCommonPolygon const&>(config_common_polygon);
            v20 = std::unordered_map<unsigned int,data::ConfigCommonPolygon>::emplace<unsigned int &,data::ConfigCommonPolygon const>(
                    config_common_polygon_map,
                    (unsigned int *)(v2 + 32),
                    v18,
                    (unsigned int *)(v2 + 32),
                    v19);
            if ( !v20.second )
            {
              *(_DWORD *)(((v2 + 880) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 880) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 911) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 911) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 880, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 880),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadPolygonConfig",
                2043);
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 880),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v23 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                      v22,
                      (const char (*)[22])"duplicate polygon_id:");
              v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v23,
                      (const unsigned int *)(v2 + 32));
              v25 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v24,
                      (const char (*)[11])" scene_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, scene_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 880));
              *(_DWORD *)(((v2 + 880) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            else
            {
              v26 = std::map<unsigned int,unsigned int>::emplace<unsigned int &,unsigned int const&>(
                      &this->common_polygon_2_scene_map_,
                      (unsigned int *)(v2 + 32),
                      scene_id,
                      (unsigned int *)&this->common_polygon_2_scene_map_,
                      v21);
              if ( !v26.second )
              {
                *(_DWORD *)(((v2 + 944) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 944) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 975) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 975) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 944, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 944),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadPolygonConfig",
                  2049);
                v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 944),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v28 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v27,
                        (const char (*)[11])"scene_id: ");
                v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, scene_id);
                v30 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                        v29,
                        (const char (*)[25])" can not use polygon_id:");
                v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v30,
                        (const unsigned int *)(v2 + 32));
                v32 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                        v31,
                        (const char (*)[32])" ,it has been used in scene_id:");
                v33 = std::map<unsigned int,unsigned int>::operator[](
                        &this->common_polygon_2_scene_map_,
                        (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32));
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, v33);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 944));
                *(_DWORD *)(((v2 + 944) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
            }
            *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
            __gnu_cxx::__normal_iterator<data::ConfigCommonPolygon *,std::vector<data::ConfigCommonPolygon>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigCommonPolygon*,std::vector<data::ConfigCommonPolygon> > *const)(v2 + 112));
          }
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
          *(_DWORD *)(((v2 + 1008) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1008) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1039) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 1039) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1008, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1008),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "loadPolygonConfig",
            2055);
          v34 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  (common::milog::MiLogStream *const)(v2 + 1008),
                  (const std::string *)(v2 + 624));
          common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v34, (const char (*)[11])" load succ");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1008));
          *(_DWORD *)(((v2 + 1008) >> 3) + 0x7FFF8000) = -117901064;
        }
        std::vector<data::ConfigCommonPolygon>::~vector((std::vector<data::ConfigCommonPolygon> *const)(v2 + 176));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 1072));
    }
    std::string::~string((void *)(v2 + 624));
    std::string::~string((void *)(v2 + 432));
    std::string::~string((void *)(v2 + 240));
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = -117901064;
    v35 = ((v2 + 1072) >> 3) + 2147450880;
    *(_DWORD *)v35 = -117901064;
    *(_BYTE *)(v35 + 4) = -8;
    v36 = ((v2 + 176) >> 3) + 2147450880;
    *(_WORD *)v36 = -1800;
    *(_BYTE *)(v36 + 2) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
  }
  if ( v46 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8088) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 144) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1152LL, v46);
  }
  return ret;
};

// Line 2063: range 000000000F266616-000000000F267E74
int32_t __cdecl JsonConfigMgr::loadWorldAreaJsonConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int v5; // esi
  __int64 v6; // rsi
  unsigned int v7; // esi
  unsigned __int64 v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  unsigned __int64 v13; // rax
  std::vector<data::Point2D>::size_type v14; // rsi
  float x; // xmm0_4
  float z; // xmm0_4
  unsigned __int64 v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  InteriorCheckablePolygon *v22; // rdx
  const unsigned int *v23; // rcx
  InteriorCheckablePolygon *v24; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>,bool> v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  unsigned __int64 v30; // rax
  unsigned __int64 v31; // rax
  unsigned __int64 v32; // rax
  int32_t ret; // [rsp+1Ch] [rbp-564h]
  data::SceneExcelConfigMap *__for_range; // [rsp+20h] [rbp-560h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v37; // [rsp+28h] [rbp-558h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+30h] [rbp-550h]
  SceneJsonConfig *scene_json_config; // [rsp+40h] [rbp-540h]
  std::vector<data::ConfigLevel1WorldArea> *__for_range_0; // [rsp+48h] [rbp-538h]
  __gnu_cxx::__normal_iterator<data::ConfigLevel1WorldArea*,std::vector<data::ConfigLevel1WorldArea> >::reference world_area_config; // [rsp+58h] [rbp-528h]
  const std::vector<data::Vector> *__for_range_1; // [rsp+60h] [rbp-520h]
  __gnu_cxx::__normal_iterator<const data::Vector*,std::vector<data::Vector> >::reference point3d; // [rsp+68h] [rbp-518h]
  char v44[1296]; // [rsp+70h] [rbp-510h] BYREF

  v2 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "22 48 8 16 __for_begin:2065 80 8 14 __for_end:2065 112 8 16 __for_begin:2092 144 8 14 __for_end:"
                        "2092 176 8 16 __for_begin:2097 208 8 14 __for_end:2097 240 12 12 point2d:2099 272 24 14 point_ve"
                        "c:2095 336 24 12 polygon:2102 400 32 14 scene_dir:2067 464 32 9 <unknown> 528 32 9 <unknown> 592"
                        " 32 25 world_area_json_name:2068 656 32 9 <unknown> 720 32 9 <unknown> 784 32 25 world_area_json"
                        "_path:2069 848 32 9 <unknown> 912 32 29 config_world_area_layout:2083 976 32 9 <unknown> 1040 32"
                        " 9 <unknown> 1104 32 9 <unknown> 1168 40 9 root:2075";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadWorldAreaJsonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = 0x4000000;
  v4[536862728] = 62194;
  v4[536862729] = -218959360;
  v4[536862730] = 62194;
  v4[536862731] = -218959360;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -219021312;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -219021312;
  v4[536862752] = 62194;
  v4[536862753] = -219021312;
  v4[536862754] = 62194;
  v4[536862755] = -219021312;
  v4[536862756] = 62194;
  v4[536862757] = -218103808;
  v4[536862758] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 80)) )
  {
    v37 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v37);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(v37);
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v5 = *scene_id;
    if ( *(char *)(((v2 + 464) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) )
    {
      v5 = 32;
      __asan_report_store_n(v2 + 464, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 464), v5);
    v6 = (__int64)config;
    if ( *(char *)(((v2 + 528) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) )
    {
      v6 = 32LL;
      __asan_report_store_n(v2 + 528, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 528), (const std::string *)v6, (std::string *)(v2 + 464));
    if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 400, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 400), (std::string *)(v2 + 528), "/");
    std::string::~string((void *)(v2 + 528));
    *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 464));
    *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v7 = *scene_id;
    if ( *(char *)(((v2 + 656) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) )
    {
      v7 = 32;
      __asan_report_store_n(v2 + 656, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 656), v7);
    if ( *(char *)(((v2 + 720) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 720, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 720), "scene", (std::string *)(v2 + 656));
    if ( *(char *)(((v2 + 592) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 592, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 592), (std::string *)(v2 + 720), "_world_areas.json");
    std::string::~string((void *)(v2 + 720));
    *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 656));
    *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 784) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 784, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 784), (const std::string *)(v2 + 400), (const std::string *)(v2 + 592));
    if ( !common::tools::FileUtils::fileExists((const std::string *)(v2 + 784)) )
    {
      v8 = ((v2 + 1168) >> 3) + 2147450880;
      *(_DWORD *)v8 = 0;
      *(_BYTE *)(v8 + 4) = 0;
      Json::Value::Value(v2 + 1168, 0LL);
      if ( !parseJsonFile((const std::string *)(v2 + 784), (Json::Value *)(v2 + 1168)) )
      {
        *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 848) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 848, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 848),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadWorldAreaJsonConfig",
          2078);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 848),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v10 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v9,
                (const char (*)[42])"parseJsonFile fail, world_area_json_path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v2 + 784));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 848));
        *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = 0;
        data::ConfigWorldAreaLayout::ConfigWorldAreaLayout((data::ConfigWorldAreaLayout *const)(v2 + 912));
        if ( !data::ConfigWorldAreaLayout::fromJson(
                (data::ConfigWorldAreaLayout *const)(v2 + 912),
                (const Json::Value *)(v2 + 1168)) )
        {
          *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 976) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 976, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 976),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadWorldAreaJsonConfig",
            2086);
          v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 976),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v12 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  v11,
                  (const char (*)[37])"fromJson fail, world_area_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v2 + 784));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 976));
          *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          scene_json_config = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                &this->scene_json_config_map_,
                                scene_id);
          __for_range_0 = (std::vector<data::ConfigLevel1WorldArea> *)(v2 + 912);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 112, scene_id);
          *(std::vector<data::ConfigLevel1WorldArea>::iterator *)(v2 + 112) = std::vector<data::ConfigLevel1WorldArea>::begin(__for_range_0);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 144, scene_id);
          *(std::vector<data::ConfigLevel1WorldArea>::iterator *)(v2 + 144) = std::vector<data::ConfigLevel1WorldArea>::end(__for_range_0);
          while ( __gnu_cxx::operator!=<data::ConfigLevel1WorldArea *,std::vector<data::ConfigLevel1WorldArea>>(
                    (const __gnu_cxx::__normal_iterator<data::ConfigLevel1WorldArea*,std::vector<data::ConfigLevel1WorldArea> > *)(v2 + 112),
                    (const __gnu_cxx::__normal_iterator<data::ConfigLevel1WorldArea*,std::vector<data::ConfigLevel1WorldArea> > *)(v2 + 144)) )
          {
            world_area_config = __gnu_cxx::__normal_iterator<data::ConfigLevel1WorldArea *,std::vector<data::ConfigLevel1WorldArea>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigLevel1WorldArea*,std::vector<data::ConfigLevel1WorldArea> > *const)(v2 + 112));
            v13 = ((v2 + 272) >> 3) + 2147450880;
            *(_WORD *)v13 = 0;
            *(_BYTE *)(v13 + 2) = 0;
            std::vector<data::Point2D>::vector((std::vector<data::Point2D> *const)(v2 + 272));
            v14 = std::vector<data::Vector>::size(&world_area_config->level1_area.polygon_data.road_points);
            std::vector<data::Point2D>::reserve((std::vector<data::Point2D> *const)(v2 + 272), v14);
            __for_range_1 = &world_area_config->level1_area.polygon_data.road_points;
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 176, v14);
            *(std::vector<data::Vector>::const_iterator *)(v2 + 176) = std::vector<data::Vector>::begin(__for_range_1);
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 208, v14);
            *(std::vector<data::Vector>::const_iterator *)(v2 + 208) = std::vector<data::Vector>::end(__for_range_1);
            while ( __gnu_cxx::operator!=<data::Vector const*,std::vector<data::Vector>>(
                      (const __gnu_cxx::__normal_iterator<const data::Vector*,std::vector<data::Vector> > *)(v2 + 176),
                      (const __gnu_cxx::__normal_iterator<const data::Vector*,std::vector<data::Vector> > *)(v2 + 208)) )
            {
              point3d = __gnu_cxx::__normal_iterator<data::Vector const*,std::vector<data::Vector>>::operator*((const __gnu_cxx::__normal_iterator<const data::Vector*,std::vector<data::Vector> > *const)(v2 + 176));
              *(_WORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1024;
              if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 251) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 27) & 7) >= *(_BYTE *)(((v2 + 251) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 240, 12LL);
              }
              *(_QWORD *)(v2 + 240) = 0LL;
              *(_DWORD *)(v2 + 248) = 0;
              if ( *(_BYTE *)(((unsigned __int64)point3d >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)point3d & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point3d >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(point3d);
              }
              x = point3d->x;
              if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v2 + 240, ((unsigned __int8)point3d & 7u) + 3);
              *(float *)(v2 + 240) = x;
              if ( *(_BYTE *)(((unsigned __int64)&point3d->z >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)point3d + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point3d->z >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(&point3d->z);
              }
              z = point3d->z;
              if ( *(_BYTE *)(((v2 + 244) >> 3) + 0x7FFF8000) != 0
                && (char)(((v2 - 32 + 20) & 7) + 3) >= *(_BYTE *)(((v2 + 244) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store4(v2 + 244, (((_BYTE)v2 - 32 + 20) & 7u) + 3);
              }
              *(float *)(v2 + 244) = z;
              std::vector<data::Point2D>::push_back(
                (std::vector<data::Point2D> *const)(v2 + 272),
                (const std::vector<data::Point2D>::value_type *)(v2 + 240));
              *(_WORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -1800;
              __gnu_cxx::__normal_iterator<data::Vector const*,std::vector<data::Vector>>::operator++((__gnu_cxx::__normal_iterator<const data::Vector*,std::vector<data::Vector> > *const)(v2 + 176));
            }
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
            v17 = ((v2 + 336) >> 3) + 2147450880;
            *(_WORD *)v17 = 0;
            *(_BYTE *)(v17 + 2) = 0;
            InteriorCheckablePolygon::InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v2 + 336));
            if ( InteriorCheckablePolygon::initByPointVec(
                   (InteriorCheckablePolygon *const)(v2 + 336),
                   (const data::Point2DList *)(v2 + 272)) )
            {
              *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1040) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1040, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1040),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadWorldAreaJsonConfig",
                2105);
              v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1040),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v19 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                      v18,
                      (const char (*)[45])"init InteriorCheckablePolygon fail, area_id:");
              v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v19,
                      &world_area_config->level1_area.id1);
              v21 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      v20,
                      (const char (*)[24])", world_area_json_path:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, (const std::string *)(v2 + 784));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1040));
              *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            else
            {
              v22 = std::move<InteriorCheckablePolygon &>((InteriorCheckablePolygon *)(v2 + 336));
              v25 = std::unordered_map<unsigned int,InteriorCheckablePolygon>::emplace<unsigned int const&,InteriorCheckablePolygon>(
                      &scene_json_config->level1_area_polygon_map,
                      &world_area_config->level1_area.id1,
                      v22,
                      v23,
                      v24);
              if ( !v25.second )
              {
                *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1104) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1104, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1104),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadWorldAreaJsonConfig",
                  2111);
                v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1104),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v27 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                        v26,
                        (const char (*)[26])"duplicate level1 area_id:");
                v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v27,
                        &world_area_config->level1_area.id1);
                v29 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                        v28,
                        (const char (*)[24])", world_area_json_path:");
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v29,
                  (const std::string *)(v2 + 784));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1104));
                *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
            }
            InteriorCheckablePolygon::~InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v2 + 336));
            std::vector<data::Point2D>::~vector((std::vector<data::Point2D> *const)(v2 + 272));
            v30 = ((v2 + 272) >> 3) + 2147450880;
            *(_WORD *)v30 = -1800;
            *(_BYTE *)(v30 + 2) = -8;
            v31 = ((v2 + 336) >> 3) + 2147450880;
            *(_WORD *)v31 = -1800;
            *(_BYTE *)(v31 + 2) = -8;
            __gnu_cxx::__normal_iterator<data::ConfigLevel1WorldArea *,std::vector<data::ConfigLevel1WorldArea>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigLevel1WorldArea*,std::vector<data::ConfigLevel1WorldArea> > *const)(v2 + 112));
          }
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
        }
        data::ConfigWorldAreaLayout::~ConfigWorldAreaLayout((data::ConfigWorldAreaLayout *const)(v2 + 912));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 1168));
    }
    std::string::~string((void *)(v2 + 784));
    std::string::~string((void *)(v2 + 592));
    std::string::~string((void *)(v2 + 400));
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = -117901064;
    v32 = ((v2 + 1168) >> 3) + 2147450880;
    *(_DWORD *)v32 = -117901064;
    *(_BYTE *)(v32 + 4) = -8;
    *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = -117901064;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
  }
  if ( v44 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 156) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, v44);
  }
  return ret;
};

// Line 2125: range 000000000F267E76-000000000F269825
int32_t __cdecl JsonConfigMgr::loadLevelLayoutJsonConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  unsigned int v6; // esi
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  char *v13; // rsi
  const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *v14; // rax
  std::unordered_map<unsigned int,InteriorCheckablePolygon> *p_level_layout_area_polygon_map; // rcx
  __int64 v16; // rsi
  const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *v17; // rsi
  std::unordered_map<unsigned int,InteriorCheckablePolygon> *v18; // rdx
  bool v19; // al
  unsigned __int64 v20; // rax
  std::vector<data::Point2D>::size_type v21; // rsi
  float x; // xmm0_4
  float z; // xmm0_4
  unsigned __int64 v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  InteriorCheckablePolygon *v29; // rdx
  unsigned int *v30; // rcx
  InteriorCheckablePolygon *v31; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>,bool> v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rdx
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  unsigned __int64 v37; // rax
  unsigned __int64 v38; // rax
  common::milog::MiLogStream *v39; // rdx
  unsigned __int64 v40; // rax
  int32_t ret; // [rsp+14h] [rbp-56Ch]
  data::SceneExcelConfigMap *__for_range; // [rsp+18h] [rbp-568h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v45; // [rsp+20h] [rbp-560h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+28h] [rbp-558h]
  SceneJsonConfig *scene_json_config; // [rsp+38h] [rbp-548h]
  std::vector<data::ConfigLevelBlock> *__for_range_0; // [rsp+40h] [rbp-540h]
  data::ConfigLevelAreaList *__for_range_1; // [rsp+50h] [rbp-530h]
  data::ConfigLevelArea *level_area; // [rsp+58h] [rbp-528h]
  std::vector<data::Vector> *__for_range_2; // [rsp+60h] [rbp-520h]
  __gnu_cxx::__normal_iterator<data::Vector*,std::vector<data::Vector> >::reference point3d; // [rsp+68h] [rbp-518h]
  char v53[1296]; // [rsp+70h] [rbp-510h] BYREF

  v2 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "24 48 8 16 __for_begin:2127 80 8 14 __for_end:2127 112 8 16 __for_begin:2151 144 8 14 __for_end:"
                        "2151 176 8 16 __for_begin:2153 208 8 14 __for_end:2153 240 8 9 iter:2155 272 8 9 <unknown> 304 8"
                        " 16 __for_begin:2163 336 8 14 __for_end:2163 368 12 12 point2d:2165 400 24 14 point_vec:2161 464"
                        " 24 12 polygon:2168 528 32 14 scene_dir:2129 592 32 27 level_layout_json_name:2130 656 32 9 <unk"
                        "nown> 720 32 9 <unknown> 784 32 27 level_layout_json_path:2131 848 32 9 <unknown> 912 32 9 <unkn"
                        "own> 976 32 9 <unknown> 1040 32 9 <unknown> 1104 32 9 <unknown> 1168 40 9 root:2136";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadLevelLayoutJsonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862729] = -234881024;
  v4[536862730] = 62194;
  v4[536862730] = -234881024;
  v4[536862731] = 62194;
  v4[536862731] = 0x4000000;
  v4[536862732] = 62194;
  v4[536862733] = -218959360;
  v4[536862734] = 62194;
  v4[536862735] = -218959360;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -219021312;
  v4[536862752] = 62194;
  v4[536862753] = -219021312;
  v4[536862754] = 62194;
  v4[536862755] = -219021312;
  v4[536862756] = 62194;
  v4[536862757] = -218103808;
  v4[536862758] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 80)) )
  {
    v45 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v45);
    std::get<1ul,unsigned int const,data::SceneExcelConfig>(v45);
    *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
    p_json_config_base_dir = &config->json_config_base_dir;
    if ( *(char *)(((v2 + 528) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) )
    {
      p_json_config_base_dir = (std::string *)32;
      __asan_report_store_n(v2 + 528, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 528), p_json_config_base_dir, "scene_level_layout/");
    *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    v6 = *scene_id;
    if ( *(char *)(((v2 + 656) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) )
    {
      v6 = 32;
      __asan_report_store_n(v2 + 656, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 656), v6);
    if ( *(char *)(((v2 + 720) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 720, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 720), "scene", (std::string *)(v2 + 656));
    if ( *(char *)(((v2 + 592) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 592, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 592), (std::string *)(v2 + 720), "_levelLayout.json");
    std::string::~string((void *)(v2 + 720));
    *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 656));
    *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 784) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 784, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 784), (const std::string *)(v2 + 528), (const std::string *)(v2 + 592));
    if ( !common::tools::FileUtils::fileExists((const std::string *)(v2 + 784)) )
    {
      v7 = ((v2 + 1168) >> 3) + 2147450880;
      *(_DWORD *)v7 = 0;
      *(_BYTE *)(v7 + 4) = 0;
      Json::Value::Value(v2 + 1168, 0LL);
      if ( !parseJsonFile((const std::string *)(v2 + 784), (Json::Value *)(v2 + 1168)) )
      {
        *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 848) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 848, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 848),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadLevelLayoutJsonConfig",
          2139);
        v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 848),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v9 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               v8,
               (const char (*)[44])"parseJsonFile fail, level_layout_json_path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v2 + 784));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 848));
        *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        scene_json_config = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                              &this->scene_json_config_map_,
                              scene_id);
        v10 = (char *)(v2 + 1168);
        if ( !data::ConfigLevelLayout::fromJson(&scene_json_config->level_layout, (const Json::Value *)(v2 + 1168)) )
        {
          *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 912) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 912, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 912),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadLevelLayoutJsonConfig",
            2146);
          v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 912),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v12 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  v11,
                  (const char (*)[39])"fromJson fail, level_layout_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v2 + 784));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 912));
          *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          __for_range_0 = &scene_json_config->level_layout.blocks;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 112, v10);
          *(std::vector<data::ConfigLevelBlock>::iterator *)(v2 + 112) = std::vector<data::ConfigLevelBlock>::begin(__for_range_0);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 144, v10);
          *(std::vector<data::ConfigLevelBlock>::iterator *)(v2 + 144) = std::vector<data::ConfigLevelBlock>::end(__for_range_0);
          while ( 1 )
          {
            v13 = (char *)(v2 + 144);
            if ( !__gnu_cxx::operator!=<data::ConfigLevelBlock *,std::vector<data::ConfigLevelBlock>>(
                    (const __gnu_cxx::__normal_iterator<data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *)(v2 + 112),
                    (const __gnu_cxx::__normal_iterator<data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *)(v2 + 144)) )
              break;
            __for_range_1 = &__gnu_cxx::__normal_iterator<data::ConfigLevelBlock *,std::vector<data::ConfigLevelBlock>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *const)(v2 + 112))->level_areas;
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 176, v13);
            *(std::vector<data::ConfigLevelArea>::iterator *)(v2 + 176) = std::vector<data::ConfigLevelArea>::begin(__for_range_1);
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 208, v13);
            *(std::vector<data::ConfigLevelArea>::iterator *)(v2 + 208) = std::vector<data::ConfigLevelArea>::end(__for_range_1);
            while ( __gnu_cxx::operator!=<data::ConfigLevelArea *,std::vector<data::ConfigLevelArea>>(
                      (const __gnu_cxx::__normal_iterator<data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *)(v2 + 176),
                      (const __gnu_cxx::__normal_iterator<data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *)(v2 + 208)) )
            {
              v14 = (const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *)__gnu_cxx::__normal_iterator<data::ConfigLevelArea *,std::vector<data::ConfigLevelArea>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *const)(v2 + 176));
              level_area = (data::ConfigLevelArea *)v14;
              *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
              p_level_layout_area_polygon_map = &scene_json_config->level_layout_area_polygon_map;
              v16 = *(unsigned __int8 *)(((v2 + 240) >> 3) + 0x7FFF8000);
              if ( (_BYTE)v16 )
                v14 = (const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *)__asan_report_store8(
                                                                                                     v2 + 240,
                                                                                                     v16);
              v17 = v14;
              *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::iterator *)(v2 + 240) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::find(
                                                                                                     p_level_layout_area_polygon_map,
                                                                                                     v14);
              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
              v18 = &scene_json_config->level_layout_area_polygon_map;
              if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 272, v17);
              *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::iterator *)(v2 + 272) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::end(v18);
              v19 = std::__detail::operator!=<std::pair<unsigned int const,InteriorCheckablePolygon>,false>(
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v2 + 240),
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v2 + 272));
              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
              if ( !v19 )
              {
                v20 = ((v2 + 400) >> 3) + 2147450880;
                *(_WORD *)v20 = 0;
                *(_BYTE *)(v20 + 2) = 0;
                std::vector<data::Point2D>::vector((std::vector<data::Point2D> *const)(v2 + 400));
                v21 = std::vector<data::Vector>::size(&level_area->polygon_data.road_points);
                std::vector<data::Point2D>::reserve((std::vector<data::Point2D> *const)(v2 + 400), v21);
                __for_range_2 = &level_area->polygon_data.road_points;
                *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v2 + 304, v21);
                *(std::vector<data::Vector>::iterator *)(v2 + 304) = std::vector<data::Vector>::begin(__for_range_2);
                *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v2 + 336, v21);
                *(std::vector<data::Vector>::iterator *)(v2 + 336) = std::vector<data::Vector>::end(__for_range_2);
                while ( __gnu_cxx::operator!=<data::Vector *,std::vector<data::Vector>>(
                          (const __gnu_cxx::__normal_iterator<data::Vector*,std::vector<data::Vector> > *)(v2 + 304),
                          (const __gnu_cxx::__normal_iterator<data::Vector*,std::vector<data::Vector> > *)(v2 + 336)) )
                {
                  point3d = __gnu_cxx::__normal_iterator<data::Vector *,std::vector<data::Vector>>::operator*((const __gnu_cxx::__normal_iterator<data::Vector*,std::vector<data::Vector> > *const)(v2 + 304));
                  *(_WORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 1024;
                  if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 379) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 123) & 7) >= *(_BYTE *)(((v2 + 379) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 368, 12LL);
                  }
                  *(_QWORD *)(v2 + 368) = 0LL;
                  *(_DWORD *)(v2 + 376) = 0;
                  if ( *(_BYTE *)(((unsigned __int64)point3d >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)point3d & 7) + 3) >= *(_BYTE *)(((unsigned __int64)point3d >> 3)
                                                                              + 0x7FFF8000) )
                  {
                    __asan_report_load4(point3d);
                  }
                  x = point3d->x;
                  if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_store4(v2 + 368, ((unsigned __int8)point3d & 7u) + 3);
                  }
                  *(float *)(v2 + 368) = x;
                  if ( *(_BYTE *)(((unsigned __int64)&point3d->z >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)point3d + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&point3d->z >> 3)
                                                                          + 0x7FFF8000) )
                  {
                    __asan_report_load4(&point3d->z);
                  }
                  z = point3d->z;
                  if ( *(_BYTE *)(((v2 + 372) >> 3) + 0x7FFF8000) != 0
                    && (char)(((v2 + 116) & 7) + 3) >= *(_BYTE *)(((v2 + 372) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store4(v2 + 372, (((_BYTE)v2 + 116) & 7u) + 3);
                  }
                  *(float *)(v2 + 372) = z;
                  std::vector<data::Point2D>::push_back(
                    (std::vector<data::Point2D> *const)(v2 + 400),
                    (const std::vector<data::Point2D>::value_type *)(v2 + 368));
                  *(_WORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -1800;
                  __gnu_cxx::__normal_iterator<data::Vector *,std::vector<data::Vector>>::operator++((__gnu_cxx::__normal_iterator<data::Vector*,std::vector<data::Vector> > *const)(v2 + 304));
                }
                *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
                v24 = ((v2 + 464) >> 3) + 2147450880;
                *(_WORD *)v24 = 0;
                *(_BYTE *)(v24 + 2) = 0;
                InteriorCheckablePolygon::InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v2 + 464));
                if ( InteriorCheckablePolygon::initByPointVec(
                       (InteriorCheckablePolygon *const)(v2 + 464),
                       (const data::Point2DList *)(v2 + 400)) )
                {
                  *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 976) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 976, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 976),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "loadLevelLayoutJsonConfig",
                    2171);
                  v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 976),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v26 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                          v25,
                          (const char (*)[45])"init InteriorCheckablePolygon fail, area_id:");
                  v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &level_area->id);
                  v28 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                          v27,
                          (const char (*)[26])", level_layout_json_path:");
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v28,
                    (const std::string *)(v2 + 784));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 976));
                  *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = -117901064;
                  ret = -1;
                }
                else
                {
                  v29 = std::move<InteriorCheckablePolygon &>((InteriorCheckablePolygon *)(v2 + 464));
                  v32 = std::unordered_map<unsigned int,InteriorCheckablePolygon>::emplace<unsigned int &,InteriorCheckablePolygon>(
                          &scene_json_config->level_layout_area_polygon_map,
                          &level_area->id,
                          v29,
                          v30,
                          v31);
                  if ( !v32.second )
                  {
                    *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1040) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1040, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1040),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "loadLevelLayoutJsonConfig",
                      2177);
                    v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 1040),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v34 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                            v33,
                            (const char (*)[25])"duplicate level area_id:");
                    v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &level_area->id);
                    v36 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                            v35,
                            (const char (*)[26])", level_layout_json_path:");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v36,
                      (const std::string *)(v2 + 784));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1040));
                    *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -117901064;
                    ret = -1;
                  }
                }
                InteriorCheckablePolygon::~InteriorCheckablePolygon((InteriorCheckablePolygon *const)(v2 + 464));
                std::vector<data::Point2D>::~vector((std::vector<data::Point2D> *const)(v2 + 400));
              }
              *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
              v37 = ((v2 + 400) >> 3) + 2147450880;
              *(_WORD *)v37 = -1800;
              *(_BYTE *)(v37 + 2) = -8;
              v38 = ((v2 + 464) >> 3) + 2147450880;
              *(_WORD *)v38 = -1800;
              *(_BYTE *)(v38 + 2) = -8;
              __gnu_cxx::__normal_iterator<data::ConfigLevelArea *,std::vector<data::ConfigLevelArea>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *const)(v2 + 176));
            }
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
            __gnu_cxx::__normal_iterator<data::ConfigLevelBlock *,std::vector<data::ConfigLevelBlock>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *const)(v2 + 112));
          }
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
          *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1104) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1104, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1104),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "loadLevelLayoutJsonConfig",
            2184);
          v39 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  (common::milog::MiLogStream *const)(v2 + 1104),
                  (const char (*)[33])"load level layout succ scene_id=");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, scene_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1104));
          *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -117901064;
        }
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 1168));
    }
    std::string::~string((void *)(v2 + 784));
    std::string::~string((void *)(v2 + 592));
    std::string::~string((void *)(v2 + 528));
    *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = -117901064;
    v40 = ((v2 + 1168) >> 3) + 2147450880;
    *(_DWORD *)v40 = -117901064;
    *(_BYTE *)(v40 + 4) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 48));
  }
  if ( v53 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 156) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, v53);
  }
  return ret;
};

// Line 2191: range 000000000F269826-000000000F26AB27
int32_t __cdecl JsonConfigMgr::loadSceneHomeConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::SceneType *p_type; // rax
  unsigned int v6; // esi
  __int64 v7; // rsi
  unsigned __int64 v8; // rax
  bool v9; // r14
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned int v12; // esi
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned __int64 v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  unsigned __int64 v23; // rax
  int32_t ret; // [rsp+14h] [rbp-45Ch]
  data::SceneExcelConfigMap *__for_range; // [rsp+18h] [rbp-458h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::reference v28; // [rsp+20h] [rbp-450h]
  std::tuple_element<0,std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_id; // [rsp+28h] [rbp-448h]
  std::tuple_element<1,const std::pair<unsigned int const,data::SceneExcelConfig> >::type *scene_config; // [rsp+30h] [rbp-440h]
  SceneJsonConfig *scene_json_config; // [rsp+38h] [rbp-438h]
  char v32[1072]; // [rsp+40h] [rbp-430h] BYREF

  v2 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(1024LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "16 32 8 16 __for_begin:2193 64 8 14 __for_end:2193 96 32 14 scene_dir:2200 160 32 9 <unknown> 22"
                        "4 32 9 <unknown> 288 32 9 <unknown> 352 32 26 home_config_json_name:2206 416 32 9 <unknown> 480 "
                        "32 9 <unknown> 544 32 26 home_config_json_path:2207 608 32 9 <unknown> 672 32 9 <unknown> 736 32"
                        " 9 <unknown> 800 32 9 <unknown> 864 40 9 <unknown> 944 40 9 root:2215";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadSceneHomeConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959360;
  v4[536862749] = 62194;
  v4[536862750] = -218103808;
  v4[536862751] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.scene_config_mgr.scene_excel_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::SceneExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,data::SceneExcelConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::SceneExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::SceneExcelConfig>,false> *)(v2 + 64)) )
  {
    v28 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 32));
    scene_id = std::get<0ul,unsigned int const,data::SceneExcelConfig>(v28);
    scene_config = (std::tuple_element<1,const std::pair<unsigned int const,data::SceneExcelConfig> >::type *)std::get<1ul,unsigned int const,data::SceneExcelConfig>(v28);
    p_type = &scene_config->type;
    if ( *(_BYTE *)(((unsigned __int64)p_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_type);
    }
    if ( SceneExcelConfigMgr::isHomeScene(scene_config->type) )
    {
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(scene_id);
      }
      v6 = *scene_id;
      if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
      {
        v6 = 32;
        __asan_report_store_n(v2 + 160, 32LL);
      }
      common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 160), v6);
      v7 = (__int64)config;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        v7 = 32LL;
        __asan_report_store_n(v2 + 224, 32LL);
      }
      std::operator+<char>((std::string *)(v2 + 224), (const std::string *)v7, (std::string *)(v2 + 160));
      if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 96, 32LL);
      }
      std::operator+<char>((std::string *)(v2 + 96), (std::string *)(v2 + 224), "/");
      std::string::~string((void *)(v2 + 224));
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
      std::string::~string((void *)(v2 + 160));
      *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
      v8 = ((v2 + 864) >> 3) + 2147450880;
      *(_DWORD *)v8 = 0;
      *(_BYTE *)(v8 + 4) = 0;
      std::filesystem::__cxx11::path::path<std::string,std::filesystem::__cxx11::path>(
        (std::filesystem::__cxx11::path *const)(v2 + 864),
        (const std::string *)(v2 + 96),
        auto_format);
      v9 = !std::filesystem::is_directory((const std::filesystem::__cxx11::path *)(v2 + 864));
      std::filesystem::__cxx11::path::~path((std::filesystem::__cxx11::path *const)(v2 + 864));
      v10 = ((v2 + 864) >> 3) + 2147450880;
      *(_DWORD *)v10 = -117901064;
      *(_BYTE *)(v10 + 4) = -8;
      if ( v9 )
      {
        *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 288, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 288),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_config_mgr.cpp",
          "loadSceneHomeConfig",
          2203);
        v11 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                (common::milog::MiLogStream *const)(v2 + 288),
                (const char (*)[33])byte_1A520120);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 96));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
        *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      }
      else
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(scene_id);
        }
        v12 = *scene_id;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          v12 = 32;
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 416), v12);
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        std::operator+<char>((std::string *)(v2 + 480), "scene", (std::string *)(v2 + 416));
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        std::operator+<char>((std::string *)(v2 + 352), (std::string *)(v2 + 480), "_home_config.json");
        std::string::~string((void *)(v2 + 480));
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        std::string::~string((void *)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 544, 32LL);
        }
        std::operator+<char>((std::string *)(v2 + 544), (const std::string *)(v2 + 96), (const std::string *)(v2 + 352));
        if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 544)) )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadSceneHomeConfig",
            2210);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 608),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v14 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  v13,
                  (const char (*)[39])"file not exist, home_config_json_path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v2 + 544));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          v15 = ((v2 + 944) >> 3) + 2147450880;
          *(_DWORD *)v15 = 0;
          *(_BYTE *)(v15 + 4) = 0;
          Json::Value::Value(v2 + 944, 0LL);
          if ( !parseJsonFile((const std::string *)(v2 + 544), (Json::Value *)(v2 + 944)) )
          {
            *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 672, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 672),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadSceneHomeConfig",
              2218);
            v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 672),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v17 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                    v16,
                    (const char (*)[43])"parseJsonFile fail, home_config_json_path:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v2 + 544));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
            *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            scene_json_config = std::unordered_map<unsigned int,SceneJsonConfig>::operator[](
                                  &this->scene_json_config_map_,
                                  scene_id);
            if ( !data::ConfigSceneHomeInfo::fromJson(&scene_json_config->home_config, (const Json::Value *)(v2 + 944)) )
            {
              *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 736, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 736),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadSceneHomeConfig",
                2225);
              v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 736),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v19 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                      v18,
                      (const char (*)[38])"fromJson fail, home_config_json_path:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, (const std::string *)(v2 + 544));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
              *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            else
            {
              *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 800, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 800),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/json_config_mgr.cpp",
                "loadSceneHomeConfig",
                2230);
              v20 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      (common::milog::MiLogStream *const)(v2 + 800),
                      (const char (*)[32])"load home config succ scene_id=");
              v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, scene_id);
              v22 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                      v21,
                      (const char (*)[23])" json_config.scene_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                &scene_json_config->home_config.scene_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
              *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
          Json::Value::~Value((Json::Value_0 *const)(v2 + 944));
        }
        std::string::~string((void *)(v2 + 544));
        std::string::~string((void *)(v2 + 352));
      }
      std::string::~string((void *)(v2 + 96));
    }
    *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
    *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
    v23 = ((v2 + 944) >> 3) + 2147450880;
    *(_DWORD *)v23 = -117901064;
    *(_BYTE *)(v23 + 4) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::SceneExcelConfig>,false,false> *const)(v2 + 32));
  }
  if ( v32 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 128) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return ret;
};

// Line 2238: range 000000000F26AB28-000000000F26B9CF
int32_t __cdecl JsonConfigMgr::loadHomeFurnitureSuite(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::string *p_json_name; // rdi
  std::string *p_furniture_suite_json_base_dir; // rsi
  common::milog::MiLogStream *v7; // r15
  unsigned int v8; // r14d
  const char *v9; // rax
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  _DWORD *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  __int64 v20; // rsi
  unsigned int v21; // ecx
  char v22; // al
  float v23; // xmm0_4
  __int64 v24; // rsi
  float v25; // xmm0_4
  std::map<unsigned int,unsigned int>::mapped_type *v26; // rax
  unsigned __int64 v27; // rax
  _DWORD *v28; // rax
  int32_t ret; // [rsp+2Ch] [rbp-314h]
  data::FurnitureSuiteExcelConfigMap *__for_range; // [rsp+38h] [rbp-308h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false,false>::reference __in; // [rsp+40h] [rbp-300h]
  std::tuple_element<0,std::pair<unsigned int const,data::FurnitureSuiteExcelConfig> >::type *suite_id; // [rsp+48h] [rbp-2F8h]
  std::tuple_element<1,std::pair<unsigned int const,data::FurnitureSuiteExcelConfig> >::type *suite_config; // [rsp+50h] [rbp-2F0h]
  FurnitureSuiteJsonConfig *json_config; // [rsp+58h] [rbp-2E8h]
  std::vector<data::ConfigHomeworldFurnitureUnit> *__for_range_0; // [rsp+60h] [rbp-2E0h]
  data::ConfigHomeworldFurnitureUnit *furniture_unit; // [rsp+68h] [rbp-2D8h]
  char v40[720]; // [rsp+70h] [rbp-2D0h] BYREF

  v2 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(672LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 48 8 16 __for_begin:2241 80 8 14 __for_end:2241 112 8 16 __for_begin:2273 144 8 14 __for_end:"
                        "2273 176 32 30 furniture_suite_json_path:2243 240 32 9 <unknown> 304 32 9 <unknown> 368 32 9 <un"
                        "known> 432 32 9 <unknown> 496 40 9 root:2252 576 64 20 json_config_raw:2260";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadHomeFurnitureSuite;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862736] = -234881024;
  v4[536862737] = -218959118;
  v4[536862740] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.home_config_mgr.furniture_suite_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::FurnitureSuiteExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::FurnitureSuiteExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::FurnitureSuiteExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::FurnitureSuiteExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false> *)(v2 + 80)) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false,false> *const)(v2 + 48));
    suite_id = std::get<0ul,unsigned int const,data::FurnitureSuiteExcelConfig>(__in);
    suite_config = std::get<1ul,unsigned int const,data::FurnitureSuiteExcelConfig>(__in);
    *(_DWORD *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    p_json_name = &suite_config->json_name;
    p_furniture_suite_json_base_dir = &config->furniture_suite_json_base_dir;
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 111) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      p_furniture_suite_json_base_dir = (std::string *)32;
      p_json_name = (const std::string *)(v2 + 240);
      __asan_report_store_n(v2 + 240, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 240), p_furniture_suite_json_base_dir, p_json_name);
    if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 176, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 176), (std::string *)(v2 + 240), ".json");
    std::string::~string((void *)(v2 + 240));
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
    if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 176)) )
    {
      *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 304, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 304),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadHomeFurnitureSuite",
        2246);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 304),
             (const char (*)[16])"[CONFIG_ERROR] ");
      if ( *(_BYTE *)(((unsigned __int64)suite_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)suite_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)suite_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(suite_id);
      }
      v8 = *suite_id;
      v9 = (const char *)std::string::c_str(v2 + 176);
      common::milog::MiLogStream::operator()(
        v7,
        "furniture_suite_json_path:%s file does not exist. suite_id:%u",
        v9,
        v8);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
      *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      v10 = ((v2 + 496) >> 3) + 2147450880;
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 0;
      Json::Value::Value(v2 + 496, 0LL);
      if ( !parseJsonFile((const std::string *)(v2 + 176), (Json::Value *)(v2 + 496)) )
      {
        *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 368, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 368),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadHomeFurnitureSuite",
          2255);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 368),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                v11,
                (const char (*)[47])"parseJsonFile fail, furniture_suite_json_path:");
        v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v2 + 176));
        v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v13, (const char (*)[11])" suite_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, suite_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
        *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        v15 = (_DWORD *)(((v2 + 576) >> 3) + 2147450880);
        *v15 = 0;
        v15[1] = 0;
        data::ConfigHomeworldFurnitureSet::ConfigHomeworldFurnitureSet((data::ConfigHomeworldFurnitureSet *const)(v2 + 576));
        if ( !data::ConfigHomeworldFurnitureSet::fromJson(
                (data::ConfigHomeworldFurnitureSet *const)(v2 + 576),
                (const Json::Value *)(v2 + 496)) )
        {
          *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 432, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 432),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadHomeFurnitureSuite",
            2263);
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 432),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v17 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  v16,
                  (const char (*)[42])"fromJson fail, furniture_suite_json_path:");
          v18 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v17,
                  (const std::string *)(v2 + 176));
          v19 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v18, (const char (*)[11])" suite_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, suite_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
          *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          json_config = std::unordered_map<unsigned int,FurnitureSuiteJsonConfig>::operator[](
                          &this->furniture_suite_map_,
                          suite_id);
          v20 = ((unsigned __int8)suite_id & 7u) + 3;
          if ( *(_BYTE *)(((unsigned __int64)suite_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)suite_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)suite_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(suite_id);
          }
          v21 = *suite_id;
          v22 = *(_BYTE *)(((unsigned __int64)json_config >> 3) + 0x7FFF8000);
          if ( v22 != 0 && v22 <= 3 )
          {
            LOBYTE(v20) = v22 != 0;
            __asan_report_store4(json_config, v20);
          }
          json_config->suite_id = v21;
          if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 576);
          v23 = *(float *)(v2 + 576);
          if ( *(_BYTE *)(((unsigned __int64)&json_config->radius >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)json_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&json_config->radius >> 3)
                                                                      + 0x7FFF8000) )
          {
            __asan_report_store4(&json_config->radius, (((_BYTE)json_config + 4) & 7u) + 3);
          }
          json_config->radius = v23;
          v24 = (((_BYTE)v2 + 68) & 7u) + 3;
          if ( *(_BYTE *)(((v2 + 580) >> 3) + 0x7FFF8000) != 0
            && (char)(((v2 + 68) & 7) + 3) >= *(_BYTE *)(((v2 + 580) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v2 + 580);
          }
          v25 = *(float *)(v2 + 580);
          if ( *(_BYTE *)(((unsigned __int64)&json_config->height >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&json_config->height >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&json_config->height, v24);
          }
          json_config->height = v25;
          __for_range_0 = (std::vector<data::ConfigHomeworldFurnitureUnit> *)(v2 + 584);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 112, v24);
          *(std::vector<data::ConfigHomeworldFurnitureUnit>::iterator *)(v2 + 112) = std::vector<data::ConfigHomeworldFurnitureUnit>::begin(__for_range_0);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 144, v24);
          *(std::vector<data::ConfigHomeworldFurnitureUnit>::iterator *)(v2 + 144) = std::vector<data::ConfigHomeworldFurnitureUnit>::end(__for_range_0);
          while ( __gnu_cxx::operator!=<data::ConfigHomeworldFurnitureUnit *,std::vector<data::ConfigHomeworldFurnitureUnit>>(
                    (const __gnu_cxx::__normal_iterator<data::ConfigHomeworldFurnitureUnit*,std::vector<data::ConfigHomeworldFurnitureUnit> > *)(v2 + 112),
                    (const __gnu_cxx::__normal_iterator<data::ConfigHomeworldFurnitureUnit*,std::vector<data::ConfigHomeworldFurnitureUnit> > *)(v2 + 144)) )
          {
            furniture_unit = __gnu_cxx::__normal_iterator<data::ConfigHomeworldFurnitureUnit *,std::vector<data::ConfigHomeworldFurnitureUnit>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigHomeworldFurnitureUnit*,std::vector<data::ConfigHomeworldFurnitureUnit> > *const)(v2 + 112));
            v26 = std::map<unsigned int,unsigned int>::operator[](
                    &json_config->included_furnite_id_count_map,
                    &furniture_unit->furniture_id);
            if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v26);
            }
            ++*v26;
            __gnu_cxx::__normal_iterator<data::ConfigHomeworldFurnitureUnit *,std::vector<data::ConfigHomeworldFurnitureUnit>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigHomeworldFurnitureUnit*,std::vector<data::ConfigHomeworldFurnitureUnit> > *const)(v2 + 112));
          }
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
        }
        data::ConfigHomeworldFurnitureSet::~ConfigHomeworldFurnitureSet((data::ConfigHomeworldFurnitureSet *const)(v2 + 576));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 496));
    }
    std::string::~string((void *)(v2 + 176));
    *(_DWORD *)(((v2 + 176) >> 3) + 0x7FFF8000) = -117901064;
    v27 = ((v2 + 496) >> 3) + 2147450880;
    *(_DWORD *)v27 = -117901064;
    *(_BYTE *)(v27 + 4) = -8;
    v28 = (_DWORD *)(((v2 + 576) >> 3) + 2147450880);
    *v28 = -117901064;
    v28[1] = -117901064;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::FurnitureSuiteExcelConfig>,false,false> *const)(v2 + 48));
  }
  if ( v40 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 84) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = -168430091;
  }
  return ret;
};

// Line 2283: range 000000000F26B9D0-000000000F26C08A
int32_t __cdecl JsonConfigMgr::loadHomeFishpondConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  char v15[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 32 29 config_fishpond_path_str:2284 112 32 9 <unknown> 176 32 9 <unknown> 240 32 9 <unknown"
                        "> 304 40 9 root:2290";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadHomeFishpondConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862724] = -219021312;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -218103808;
  v4[536862731] = -202116109;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 48, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 48), p_json_config_base_dir, "home_furniture/Fishpond/Fishpond.json");
  if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 48)) )
  {
    if ( *(char *)(((v2 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadHomeFishpondConfig",
      2287);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 112),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v6, (const char (*)[18])"json config file:");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, (const std::string *)(v2 + 48));
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])" not found!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 112));
    *(_DWORD *)(((v2 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v9 = -1;
  }
  else
  {
    Json::Value::Value(v2 + 304, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 48), (Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 176, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadHomeFishpondConfig",
        2293);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 176),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
              v10,
              (const char (*)[47])"parseJsonFile fails, config_fishpond_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
      *(_DWORD *)(((v2 + 176) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else if ( !data::ConfigHomeFishpondSet::fromJson(&this->fishpond_json_config_, (const Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadHomeFishpondConfig",
        2298);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              v12,
              (const char (*)[41])"fromJson fail, config_fishpond_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 304));
  }
  std::string::~string((void *)(v2 + 48));
  result = v9;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2306: range 000000000F26C08C-000000000F26C746
int32_t __cdecl JsonConfigMgr::loadHomeFishtankConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  char v15[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 32 29 config_fishtank_path_str:2307 112 32 9 <unknown> 176 32 9 <unknown> 240 32 9 <unknown"
                        "> 304 40 9 root:2313";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadHomeFishtankConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862724] = -219021312;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -218103808;
  v4[536862731] = -202116109;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 48, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 48), p_json_config_base_dir, "home_furniture/Fishtank/Fishtank.json");
  if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 48)) )
  {
    if ( *(char *)(((v2 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadHomeFishtankConfig",
      2310);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 112),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v6, (const char (*)[18])"json config file:");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, (const std::string *)(v2 + 48));
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])" not found!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 112));
    *(_DWORD *)(((v2 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v9 = -1;
  }
  else
  {
    Json::Value::Value(v2 + 304, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 48), (Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 176, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadHomeFishtankConfig",
        2316);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 176),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
              v10,
              (const char (*)[47])"parseJsonFile fails, config_fishtank_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
      *(_DWORD *)(((v2 + 176) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else if ( !data::ConfigHomeFishtankSet::fromJson(&this->fishtank_json_config_, (const Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadHomeFishtankConfig",
        2321);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              v12,
              (const char (*)[41])"fromJson fail, config_fishtank_path_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 304));
  }
  std::string::~string((void *)(v2 + 48));
  result = v9;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2329: range 000000000F26C748-000000000F26DC75
int32_t __cdecl JsonConfigMgr::loadHomeFurnitureGroupConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::string *p_json_name; // rdi
  std::string *p_furniture_group_json_base_dir; // rsi
  common::milog::MiLogStream *v7; // r15
  unsigned int v8; // r14d
  const char *v9; // rax
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  _DWORD *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  float v20; // xmm0_4
  float v21; // xmm0_4
  char *v22; // rsi
  char *v23; // rsi
  const unsigned int *v24; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  const unsigned int *v30; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>,bool> v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  unsigned __int64 v36; // rax
  _DWORD *v37; // rax
  common::milog::MiLogStream *v39; // rax
  int32_t ret; // [rsp+2Ch] [rbp-454h]
  data::HomeWorldFurnitureExcelConfigMap *__for_range; // [rsp+38h] [rbp-448h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false>::reference v45; // [rsp+40h] [rbp-440h]
  std::tuple_element<0,std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig> >::type *furniture_id; // [rsp+48h] [rbp-438h]
  std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig> >::type *furniture_confg; // [rsp+50h] [rbp-430h]
  FurnitureGroupJsonConfig *home_group_json_config; // [rsp+58h] [rbp-428h]
  std::unordered_map<unsigned int,unsigned int> *__for_range_0; // [rsp+60h] [rbp-420h]
  std::vector<data::ConfigHomeworldGroupUnit> *__for_range_1; // [rsp+68h] [rbp-418h]
  const data::ConfigHomeworldGroupUnit *group_entity_config; // [rsp+70h] [rbp-410h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference v52; // [rsp+78h] [rbp-408h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *group_id; // [rsp+88h] [rbp-3F8h]
  char v54[1008]; // [rsp+90h] [rbp-3F0h] BYREF

  v2 = (unsigned __int64)v54;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(960LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "16 48 8 16 __for_begin:2332 80 8 14 __for_end:2332 112 8 16 __for_begin:2367 144 8 14 __for_end:"
                        "2367 176 8 16 __for_begin:2377 208 8 14 __for_end:2377 240 32 30 furniture_group_json_path:2338 "
                        "304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496 32 9 <unknown> 560 32 9 <unknown> 6"
                        "24 32 9 <unknown> 688 32 9 <unknown> 752 40 9 root:2347 832 96 20 json_config_raw:2355";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadHomeFurnitureGroupConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862736] = -219021312;
  v4[536862737] = 62194;
  v4[536862738] = -219021312;
  v4[536862739] = 62194;
  v4[536862740] = -219021312;
  v4[536862741] = 62194;
  v4[536862742] = -219021312;
  v4[536862743] = 62194;
  v4[536862744] = -234881024;
  v4[536862745] = -218959118;
  v4[536862749] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.home_config_mgr.home_world_furniture_excel_config_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,data::HomeWorldFurnitureExcelConfig>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,data::HomeWorldFurnitureExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,data::HomeWorldFurnitureExcelConfig>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::HomeWorldFurnitureExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false> *)(v2 + 80)) )
  {
    v45 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false> *const)(v2 + 48));
    furniture_id = std::get<0ul,unsigned int const,data::HomeWorldFurnitureExcelConfig>(v45);
    furniture_confg = (std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig> >::type *)std::get<1ul,unsigned int const,data::HomeWorldFurnitureExcelConfig>(v45);
    if ( *(_BYTE *)(((unsigned __int64)&furniture_confg->special_furniture_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&furniture_confg->special_furniture_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&furniture_confg->special_furniture_type);
    }
    if ( furniture_confg->special_furniture_type == GroupFurnitrue )
    {
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
      p_json_name = &furniture_confg->json_name;
      p_furniture_group_json_base_dir = &config->furniture_group_json_base_dir;
      if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
      {
        p_furniture_group_json_base_dir = (std::string *)32;
        p_json_name = (const std::string *)(v2 + 304);
        __asan_report_store_n(v2 + 304, 32LL);
      }
      std::operator+<char>((std::string *)(v2 + 304), p_furniture_group_json_base_dir, p_json_name);
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 79) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      std::operator+<char>((std::string *)(v2 + 240), (std::string *)(v2 + 304), ".json");
      std::string::~string((void *)(v2 + 304));
      *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
      if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 240)) )
      {
        *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 368, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 368),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadHomeFurnitureGroupConfig",
          2341);
        v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 368),
               (const char (*)[16])"[CONFIG_ERROR] ");
        if ( *(_BYTE *)(((unsigned __int64)furniture_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)furniture_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)furniture_id >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(furniture_id);
        }
        v8 = *furniture_id;
        v9 = (const char *)std::string::c_str(v2 + 240);
        common::milog::MiLogStream::operator()(
          v7,
          "furniture_group_json_path:%s file does not exist. furniture_id:%u",
          v9,
          v8);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
        *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        v10 = ((v2 + 752) >> 3) + 2147450880;
        *(_DWORD *)v10 = 0;
        *(_BYTE *)(v10 + 4) = 0;
        Json::Value::Value(v2 + 752, 0LL);
        if ( !parseJsonFile((const std::string *)(v2 + 240), (Json::Value *)(v2 + 752)) )
        {
          *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 432, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 432),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadHomeFurnitureGroupConfig",
            2350);
          v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 432),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v12 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                  v11,
                  (const char (*)[47])"parseJsonFile fail, furniture_group_json_path:");
          v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v12,
                  (const std::string *)(v2 + 240));
          v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v13,
                  (const char (*)[15])" furniture_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, furniture_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
          *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          v15 = (_DWORD *)(((v2 + 832) >> 3) + 2147450880);
          *v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
          data::ConfigHomeworldGroup::ConfigHomeworldGroup((data::ConfigHomeworldGroup *const)(v2 + 832));
          if ( !data::ConfigHomeworldGroup::fromJson(
                  (data::ConfigHomeworldGroup *const)(v2 + 832),
                  (const Json::Value *)(v2 + 752)) )
          {
            *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 496) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 79) & 7) >= *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 496, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 496),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadHomeFurnitureGroupConfig",
              2358);
            v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 496),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v17 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                    v16,
                    (const char (*)[42])"fromJson fail, furniture_group_json_path:");
            v18 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v17,
                    (const std::string *)(v2 + 240));
            v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    v18,
                    (const char (*)[15])" furniture_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, furniture_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 496));
            *(_DWORD *)(((v2 + 496) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            home_group_json_config = std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::operator[](
                                       &this->home_furniture_group_config_map_,
                                       furniture_id);
            if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v2 + 832);
            v20 = *(float *)(v2 + 832);
            if ( *(_BYTE *)(((unsigned __int64)home_group_json_config >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)home_group_json_config >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_store4(home_group_json_config, furniture_id);
            }
            home_group_json_config->radius = v20;
            if ( *(_BYTE *)(((v2 + 836) >> 3) + 0x7FFF8000) != 0
              && (char)(((v2 + 68) & 7) + 3) >= *(_BYTE *)(((v2 + 836) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v2 + 836);
            }
            v21 = *(float *)(v2 + 836);
            if ( *(_BYTE *)(((unsigned __int64)&home_group_json_config->height >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)home_group_json_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&home_group_json_config->height >> 3)
                                                                                   + 0x7FFF8000) )
            {
              __asan_report_store4(&home_group_json_config->height, (((_BYTE)home_group_json_config + 4) & 7u) + 3);
            }
            home_group_json_config->height = v21;
            v22 = (char *)(v2 + 840);
            std::unordered_map<unsigned int,unsigned int>::operator=(
              &home_group_json_config->scene_group_map,
              (const std::unordered_map<unsigned int,unsigned int> *)(v2 + 840));
            __for_range_0 = &home_group_json_config->scene_group_map;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 112, v22);
            *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v2 + 112) = std::unordered_map<unsigned int,unsigned int>::begin(__for_range_0);
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 144, v22);
            *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v2 + 144) = std::unordered_map<unsigned int,unsigned int>::end(__for_range_0);
            while ( 1 )
            {
              v23 = (char *)(v2 + 144);
              if ( !std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 112),
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 144)) )
                break;
              v52 = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 112));
              std::get<0ul,unsigned int const,unsigned int>(v52);
              group_id = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v52);
              v25 = std::map<unsigned int,unsigned int>::emplace<unsigned int const&,unsigned int const&>(
                      &this->groupid_to_furnitureid_map_,
                      group_id,
                      furniture_id,
                      (const unsigned int *)&this->groupid_to_furnitureid_map_,
                      v24);
              if ( !v25.second )
              {
                *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 560) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 560, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 560),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadHomeFurnitureGroupConfig",
                  2371);
                v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 560),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v27 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                        v26,
                        (const char (*)[31])"duplicate group_id , group_id:");
                v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, group_id);
                v29 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        v28,
                        (const char (*)[15])" furniture_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, furniture_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 560));
                *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
              std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 112));
            }
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
            __for_range_1 = (std::vector<data::ConfigHomeworldGroupUnit> *)(v2 + 896);
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 176, v23);
            *(std::vector<data::ConfigHomeworldGroupUnit>::iterator *)(v2 + 176) = std::vector<data::ConfigHomeworldGroupUnit>::begin(__for_range_1);
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 208, v23);
            *(std::vector<data::ConfigHomeworldGroupUnit>::iterator *)(v2 + 208) = std::vector<data::ConfigHomeworldGroupUnit>::end(__for_range_1);
            while ( __gnu_cxx::operator!=<data::ConfigHomeworldGroupUnit *,std::vector<data::ConfigHomeworldGroupUnit>>(
                      (const __gnu_cxx::__normal_iterator<data::ConfigHomeworldGroupUnit*,std::vector<data::ConfigHomeworldGroupUnit> > *)(v2 + 176),
                      (const __gnu_cxx::__normal_iterator<data::ConfigHomeworldGroupUnit*,std::vector<data::ConfigHomeworldGroupUnit> > *)(v2 + 208)) )
            {
              group_entity_config = __gnu_cxx::__normal_iterator<data::ConfigHomeworldGroupUnit *,std::vector<data::ConfigHomeworldGroupUnit>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigHomeworldGroupUnit*,std::vector<data::ConfigHomeworldGroupUnit> > *const)(v2 + 176));
              v31 = std::unordered_map<unsigned int,unsigned int>::emplace<unsigned int const&,unsigned int const&>(
                      &home_group_json_config->furniture_group_config_map,
                      &group_entity_config->furniture_id,
                      &group_entity_config->group_config_id,
                      (const unsigned int *)&home_group_json_config->furniture_group_config_map,
                      v30);
              if ( !v31.second )
              {
                *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 624) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 624, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 624),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "loadHomeFurnitureGroupConfig",
                  2381);
                v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 624),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v33 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                        v32,
                        (const char (*)[24])"duplicate furniture_id:");
                v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v33,
                        &group_entity_config->furniture_id);
                v35 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                        v34,
                        (const char (*)[29])", furniture_group_json_path:");
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v35,
                  (const std::string *)(v2 + 240));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 624));
                *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
              __gnu_cxx::__normal_iterator<data::ConfigHomeworldGroupUnit *,std::vector<data::ConfigHomeworldGroupUnit>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigHomeworldGroupUnit*,std::vector<data::ConfigHomeworldGroupUnit> > *const)(v2 + 176));
            }
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
          }
          data::ConfigHomeworldGroup::~ConfigHomeworldGroup((data::ConfigHomeworldGroup *const)(v2 + 832));
        }
        Json::Value::~Value((Json::Value_0 *const)(v2 + 752));
      }
      std::string::~string((void *)(v2 + 240));
    }
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
    v36 = ((v2 + 752) >> 3) + 2147450880;
    *(_DWORD *)v36 = -117901064;
    *(_BYTE *)(v36 + 4) = -8;
    v37 = (_DWORD *)(((v2 + 832) >> 3) + 2147450880);
    *v37 = -117901064;
    v37[1] = -117901064;
    v37[2] = -117901064;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false> *const)(v2 + 48));
  }
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
  if ( std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::size(&this->home_furniture_group_config_map_) > 2
    && ConstValueExcelConfigMgr::getHomeEditModeCD(&config->txt_config_mgr.const_value_config_mgr) <= 9 )
  {
    *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 688) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 688, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 688),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadHomeFurnitureGroupConfig",
      2389);
    v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v2 + 688),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v39, (const char (*)[23])"need editor mode cd 10");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 688));
    ret = -1;
  }
  if ( v54 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 120) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return ret;
};

// Line 2396: range 000000000F26DC76-000000000F26E99A
int32_t __cdecl JsonConfigMgr::loadHomeSceneAutoGenConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t AllFilesWithExtension; // edx
  char v6; // al
  char *v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t v11; // r14d
  unsigned __int64 v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  unsigned __int64 v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  data::ConfigHomeworldSceneAutoGen *v18; // rax
  unsigned int *v19; // rcx
  data::ConfigHomeworldSceneAutoGen *v20; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeworldSceneAutoGen>,false,false>,bool> v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  unsigned __int64 v24; // rax
  unsigned __int64 v25; // rax
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-2E0h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+18h] [rbp-2D8h]
  char v30[720]; // [rsp+20h] [rbp-2D0h] BYREF

  v2 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(672LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 4 8 ret:2398 64 8 16 __for_begin:2405 96 8 14 __for_end:2405 128 24 13 fi"
                        "le_vec:2397 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9"
                        " <unknown> 512 40 9 root:2408 592 40 31 home_scene_auto_gen_config:2415";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadHomeSceneAutoGenConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556927;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -234881024;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959360;
  v4[536862738] = 62194;
  v4[536862739] = -218103808;
  v4[536862740] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 128));
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, config);
  *(_DWORD *)(v2 + 48) = 0;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 192),
    ".json",
    (const std::allocator<char> *)(v2 + 32));
  v7 = (char *)(v2 + 192);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            &config->home_scene_auto_gen_json_base_dir,
                            (const std::string *)(v2 + 192),
                            (std::vector<std::string> *)(v2 + 128));
  v6 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v6 != 0;
  if ( v6 != 0 && v6 <= 3 )
    __asan_report_store4(v2 + 48, v7);
  *(_DWORD *)(v2 + 48) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  if ( *(_DWORD *)(v2 + 48) )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 127) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "loadHomeSceneAutoGenConfig",
      2402);
    v8 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
           (common::milog::MiLogStream *const)(v2 + 256),
           (const char (*)[67])"getAllFilesWithExtension fails, home_scene_auto_gen_json_base_dir:");
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
           v8,
           &config->home_scene_auto_gen_json_base_dir);
    v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v10, (const int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    v11 = -1;
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v2 + 128);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v7);
    *(std::vector<std::string>::iterator *)(v2 + 64) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v7);
    *(std::vector<std::string>::iterator *)(v2 + 96) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 64),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 96)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 64));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v12 = ((v2 + 512) >> 3) + 2147450880;
      *(_DWORD *)v12 = 0;
      *(_BYTE *)(v12 + 4) = 0;
      Json::Value::Value(v2 + 512, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 512)) )
      {
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadHomeSceneAutoGenConfig",
          2411);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 320),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v13,
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 48, file_path);
        *(_DWORD *)(v2 + 48) = -1;
      }
      else
      {
        v15 = ((v2 + 592) >> 3) + 2147450880;
        *(_DWORD *)v15 = 0;
        *(_BYTE *)(v15 + 4) = 0;
        data::ConfigHomeworldSceneAutoGen::ConfigHomeworldSceneAutoGen((data::ConfigHomeworldSceneAutoGen *const)(v2 + 592));
        if ( !data::ConfigHomeworldSceneAutoGen::fromJson(
                (data::ConfigHomeworldSceneAutoGen *const)(v2 + 592),
                (const Json::Value *)(v2 + 512)) )
        {
          *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 384, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 384),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadHomeSceneAutoGenConfig",
            2418);
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 384),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v17 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v16,
                  (const char (*)[25])"mapFromJson fails, path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, file_path);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
          *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
          if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 48, file_path);
          *(_DWORD *)(v2 + 48) = -1;
        }
        else
        {
          v18 = std::move<data::ConfigHomeworldSceneAutoGen &>((data::ConfigHomeworldSceneAutoGen *)(v2 + 592));
          v21 = std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen>::emplace<unsigned int &,data::ConfigHomeworldSceneAutoGen>(
                  &this->home_scene_auto_gen_json_config_map_,
                  (unsigned int *)(v2 + 592),
                  v18,
                  v19,
                  v20);
          if ( !v21.second )
          {
            *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 63) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 448, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 448),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadHomeSceneAutoGenConfig",
              2425);
            v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 448),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v23 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                    v22,
                    (const char (*)[45])byte_1A520EC0);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v23,
              (const unsigned int *)(v2 + 592));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
            *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
            if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v2 + 48, v2 + 592);
            *(_DWORD *)(v2 + 48) = -1;
          }
        }
        data::ConfigHomeworldSceneAutoGen::~ConfigHomeworldSceneAutoGen((data::ConfigHomeworldSceneAutoGen *const)(v2 + 592));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 512));
      v24 = ((v2 + 512) >> 3) + 2147450880;
      *(_DWORD *)v24 = -117901064;
      *(_BYTE *)(v24 + 4) = -8;
      v25 = ((v2 + 592) >> 3) + 2147450880;
      *(_DWORD *)v25 = -117901064;
      *(_BYTE *)(v25 + 4) = -8;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 64));
    }
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 48);
    v11 = *(_DWORD *)(v2 + 48);
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 128));
  if ( v30 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 84) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = -168430091;
  }
  return v11;
};

// Line 2434: range 000000000F26E99C-000000000F27079C
int32_t __cdecl JsonConfigMgr::loadAllCustomDungeonConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  int32_t AllFilesWithExtension; // edx
  char v7; // al
  char *v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t v11; // r14d
  unsigned __int64 v12; // rax
  char *v13; // rsi
  unsigned __int64 v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  unsigned __int64 v19; // rax
  char *v20; // rsi
  common::milog::MiLogStream *v21; // rdx
  common::milog::MiLogStream *v22; // rax
  const std::unordered_map<std::string,data::ConfigCustomLevelBrick>::key_type *p_brick_name; // rdx
  const std::unordered_map<std::string,data::ConfigCustomLevelBrick>::key_type *v24; // rsi
  bool v25; // al
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  data::ConfigCustomLevelBrick *p_second; // r14
  data::ConfigCustomLevelBrick *v31; // rax
  uint32_t server_gadget_id; // r14d
  std::tuple_element<0,std::pair<unsigned int const,data::CustomLevelComponentConfig> >::type *v33; // rsi
  __int64 v34; // rax
  char v35; // dl
  uint32_t config_level; // r14d
  std::tuple_element<0,std::pair<unsigned int const,data::CustomLevelComponentConfig> >::type *v37; // rsi
  std::map<unsigned int,data::ConfigCustomLevelBrick>::mapped_type *v38; // rdx
  char v39; // cl
  std::string *v40; // rsi
  unsigned __int64 v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  unsigned __int64 v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  data::ConfigCustomLevelDungeon *v47; // rax
  unsigned __int64 v48; // rax
  unsigned __int64 v49; // rax
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-660h]
  data::CustomLevelComponentConfigMap *__for_range_0; // [rsp+18h] [rbp-658h]
  data::CustomLevelDungeonConfigMap *__for_range_1; // [rsp+20h] [rbp-650h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false,false>::reference v55; // [rsp+28h] [rbp-648h]
  std::tuple_element<0,std::pair<unsigned int const,data::CustomLevelDungeonConfig> >::type *id_0; // [rsp+30h] [rbp-640h]
  std::tuple_element<1,const std::pair<unsigned int const,data::CustomLevelDungeonConfig> >::type *dungeon_config; // [rsp+38h] [rbp-638h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false,false>::reference v58; // [rsp+40h] [rbp-630h]
  std::tuple_element<0,std::pair<unsigned int const,data::CustomLevelComponentConfig> >::type *id; // [rsp+48h] [rbp-628h]
  std::tuple_element<1,const std::pair<unsigned int const,data::CustomLevelComponentConfig> >::type *comp_config; // [rsp+50h] [rbp-620h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+58h] [rbp-618h]
  char v62[1552]; // [rsp+60h] [rbp-610h] BYREF

  v2 = (unsigned __int64)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1504LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "27 48 1 9 <unknown> 64 4 8 ret:2436 80 8 16 __for_begin:2444 112 8 14 __for_end:2444 144 8 16 __"
                        "for_begin:2461 176 8 14 __for_end:2461 208 8 9 iter:2468 240 8 9 <unknown> 272 8 16 __for_begin:"
                        "2481 304 8 14 __for_end:2481 336 24 13 file_vec:2435 400 32 9 <unknown> 464 32 9 <unknown> 528 3"
                        "2 9 <unknown> 592 32 9 <unknown> 656 32 9 <unknown> 720 32 9 <unknown> 784 32 9 <unknown> 848 32"
                        " 14 json_path:2483 912 32 9 <unknown> 976 32 9 <unknown> 1040 32 9 <unknown> 1104 32 9 <unknown>"
                        " 1168 40 9 root:2447 1248 40 9 root:2484 1328 40 19 custom_dungeon:2491 1408 56 14 brick_map:2443";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadAllCustomDungeonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862729] = -234881024;
  v4[536862730] = 62194;
  v4[536862731] = -218959360;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -219021312;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -219021312;
  v4[536862752] = 62194;
  v4[536862753] = -219021312;
  v4[536862754] = 62194;
  v4[536862755] = -219021312;
  v4[536862756] = 62194;
  v4[536862757] = -234881024;
  v4[536862758] = -218959118;
  v4[536862760] = -218959360;
  v4[536862761] = 62194;
  v4[536862762] = -234881024;
  v4[536862763] = -218959118;
  v4[536862765] = -218103808;
  v4[536862766] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 336));
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, config);
  *(_DWORD *)(v2 + 64) = 0;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 464),
    ".json",
    (const std::allocator<char> *)(v2 + 48));
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 400, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 400), p_json_config_base_dir, "custom_level_brick/");
  v8 = (char *)(v2 + 464);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            (const std::string *)(v2 + 400),
                            (const std::string *)(v2 + 464),
                            (std::vector<std::string> *)(v2 + 336));
  v7 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v7 != 0;
  if ( v7 != 0 && v7 <= 3 )
    __asan_report_store4(v2 + 64, v8);
  *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 400));
  *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
  std::string::~string((void *)(v2 + 464));
  *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 64);
  if ( *(_DWORD *)(v2 + 64) )
  {
    *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 528) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 528, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 528),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadAllCustomDungeonConfig",
      2440);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 528),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v9, (const char (*)[37])byte_1A5211C0);
    common::milog::MiLogStream::operator<<<int,(int *)0>(v10, (const int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 528));
    *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = -117901064;
    v11 = -1;
  }
  else
  {
    v12 = ((v2 + 1408) >> 3) + 2147450880;
    *(_DWORD *)v12 = 0;
    *(_WORD *)(v12 + 4) = 0;
    *(_BYTE *)(v12 + 6) = 0;
    std::unordered_map<std::string,data::ConfigCustomLevelBrick>::unordered_map((std::unordered_map<std::string,data::ConfigCustomLevelBrick> *const)(v2 + 1408));
    __for_range = (std::vector<std::string> *)(v2 + 336);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 80, v8);
    *(std::vector<std::string>::iterator *)(v2 + 80) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v8);
    *(std::vector<std::string>::iterator *)(v2 + 112) = std::vector<std::string>::end(__for_range);
    while ( 1 )
    {
      v13 = (char *)(v2 + 112);
      if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 80),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 112)) )
        break;
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v14 = ((v2 + 1168) >> 3) + 2147450880;
      *(_DWORD *)v14 = 0;
      *(_BYTE *)(v14 + 4) = 0;
      Json::Value::Value(v2 + 1168, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 1168)) )
      {
        *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 592) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 592, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 592),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllCustomDungeonConfig",
          2450);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 592),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v15,
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 592));
        *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      else if ( !data::mapFromJson((const Json::Value *)(v2 + 1168), (data::ConfigCustomLevelBrickMap *)(v2 + 1408)) )
      {
        *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 656) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 656, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 656),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllCustomDungeonConfig",
          2456);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 656),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v17,
                (const char (*)[25])"mapFromJson fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 656));
        *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, file_path);
        *(_DWORD *)(v2 + 64) = -1;
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 1168));
      v19 = ((v2 + 1168) >> 3) + 2147450880;
      *(_DWORD *)v19 = -117901064;
      *(_BYTE *)(v19 + 4) = -8;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    __for_range_0 = &config->txt_config_mgr.custom_dungeon_config_mgr.custom_level_component_config_map;
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v13);
    *(std::unordered_map<unsigned int,data::CustomLevelComponentConfig>::iterator *)(v2 + 144) = std::unordered_map<unsigned int,data::CustomLevelComponentConfig>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 176, v13);
    *(std::unordered_map<unsigned int,data::CustomLevelComponentConfig>::iterator *)(v2 + 176) = std::unordered_map<unsigned int,data::CustomLevelComponentConfig>::end(__for_range_0);
    while ( 1 )
    {
      v20 = (char *)(v2 + 176);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false> *)(v2 + 144),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false> *)(v2 + 176)) )
        break;
      v58 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false,false> *const)(v2 + 144));
      id = std::get<0ul,unsigned int const,data::CustomLevelComponentConfig>(v58);
      comp_config = (std::tuple_element<1,const std::pair<unsigned int const,data::CustomLevelComponentConfig> >::type *)std::get<1ul,unsigned int const,data::CustomLevelComponentConfig>(v58);
      if ( (unsigned __int8)std::string::empty(&comp_config->brick_name) )
      {
        *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 720) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 720, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 720),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_config_mgr.cpp",
          "loadAllCustomDungeonConfig",
          2465);
        v21 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                (common::milog::MiLogStream *const)(v2 + 720),
                (const char (*)[26])"CustomLevel component_id=");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, id);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v22, (const char (*)[17])" brick not found");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 720));
        *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = -117901064;
      }
      else
      {
        *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
        p_brick_name = &comp_config->brick_name;
        if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 208, v20);
        v24 = p_brick_name;
        *(std::unordered_map<std::string,data::ConfigCustomLevelBrick>::iterator *)(v2 + 208) = std::unordered_map<std::string,data::ConfigCustomLevelBrick>::find(
                                                                                                  (std::unordered_map<std::string,data::ConfigCustomLevelBrick> *const)(v2 + 1408),
                                                                                                  p_brick_name);
        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 240, v24);
        *(std::unordered_map<std::string,data::ConfigCustomLevelBrick>::iterator *)(v2 + 240) = std::unordered_map<std::string,data::ConfigCustomLevelBrick>::end((std::unordered_map<std::string,data::ConfigCustomLevelBrick> *const)(v2 + 1408));
        v25 = std::__detail::operator==<std::pair<std::string const,data::ConfigCustomLevelBrick>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigCustomLevelBrick>,true> *)(v2 + 208),
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigCustomLevelBrick>,true> *)(v2 + 240));
        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
        if ( v25 )
        {
          *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 784) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 784, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 784),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllCustomDungeonConfig",
            2471);
          v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 784),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v27 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  v26,
                  (const char (*)[26])"CustomLevel component_id=");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, id);
          v29 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v28,
                  (const char (*)[25])" brick config not found:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, &comp_config->brick_name);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 784));
          *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = -117901064;
          if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 64, &comp_config->brick_name);
          *(_DWORD *)(v2 + 64) = -1;
        }
        else
        {
          p_second = &std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigCustomLevelBrick>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigCustomLevelBrick>,false,true> *const)(v2 + 208))->second;
          v31 = std::map<unsigned int,data::ConfigCustomLevelBrick>::operator[](&this->custom_dungeon_brick_map_, id);
          data::ConfigCustomLevelBrick::operator=(v31, p_second);
          if ( *(_BYTE *)(((unsigned __int64)&comp_config->server_gadget_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)comp_config + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&comp_config->server_gadget_id >> 3)
                                                                       + 0x7FFF8000) )
          {
            __asan_report_load4(&comp_config->server_gadget_id);
          }
          server_gadget_id = comp_config->server_gadget_id;
          v33 = id;
          v34 = (__int64)std::map<unsigned int,data::ConfigCustomLevelBrick>::operator[](
                           &this->custom_dungeon_brick_map_,
                           id);
          v35 = *(_BYTE *)(((unsigned __int64)(v34 + 56) >> 3) + 0x7FFF8000);
          if ( v35 != 0 && v35 <= 3 )
          {
            LOBYTE(v33) = v35 != 0;
            v34 = __asan_report_store4(v34 + 56, v33);
          }
          *(_DWORD *)(v34 + 56) = server_gadget_id;
          if ( *(_BYTE *)(((unsigned __int64)&comp_config->config_level >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&comp_config->config_level >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&comp_config->config_level);
          }
          config_level = comp_config->config_level;
          v37 = id;
          v38 = std::map<unsigned int,data::ConfigCustomLevelBrick>::operator[](&this->custom_dungeon_brick_map_, id);
          v39 = *(_BYTE *)(((unsigned __int64)&v38->config_level >> 3) + 0x7FFF8000);
          if ( v39 != 0 && (char)((((_BYTE)v38 + 60) & 7) + 3) >= v39 )
          {
            LOBYTE(v37) = v39 != 0;
            __asan_report_store4(&v38->config_level, v37);
          }
          v38->config_level = config_level;
        }
      }
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelComponentConfig>,false,false> *const)(v2 + 144));
    }
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &config->txt_config_mgr.custom_dungeon_config_mgr.custom_level_dungeon_config_map;
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 272, v20);
    *(std::unordered_map<unsigned int,data::CustomLevelDungeonConfig>::iterator *)(v2 + 272) = std::unordered_map<unsigned int,data::CustomLevelDungeonConfig>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 304, v20);
    *(std::unordered_map<unsigned int,data::CustomLevelDungeonConfig>::iterator *)(v2 + 304) = std::unordered_map<unsigned int,data::CustomLevelDungeonConfig>::end(__for_range_1);
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false> *)(v2 + 272),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false> *)(v2 + 304)) )
    {
      v55 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false,false> *const)(v2 + 272));
      id_0 = std::get<0ul,unsigned int const,data::CustomLevelDungeonConfig>(v55);
      dungeon_config = (std::tuple_element<1,const std::pair<unsigned int const,data::CustomLevelDungeonConfig> >::type *)std::get<1ul,unsigned int const,data::CustomLevelDungeonConfig>(v55);
      *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = 0;
      v40 = &config->json_config_base_dir;
      if ( *(char *)(((v2 + 912) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) )
      {
        v40 = (std::string *)32;
        __asan_report_store_n(v2 + 912, 32LL);
      }
      std::operator+<char>((std::string *)(v2 + 912), v40, "custom_level_dungeon/");
      if ( *(char *)(((v2 + 848) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 848, 32LL);
      }
      std::operator+<char>((std::string *)(v2 + 848), (std::string *)(v2 + 912), &dungeon_config->json_path);
      std::string::~string((void *)(v2 + 912));
      *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = -117901064;
      v41 = ((v2 + 1248) >> 3) + 2147450880;
      *(_DWORD *)v41 = 0;
      *(_BYTE *)(v41 + 4) = 0;
      Json::Value::Value(v2 + 1248, 0LL);
      if ( !parseJsonFile((const std::string *)(v2 + 848), (Json::Value *)(v2 + 1248)) )
      {
        *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 976) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 976, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 976),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadAllCustomDungeonConfig",
          2487);
        v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 976),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v43 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                v42,
                (const char (*)[41])"parseJsonFile fail, custom_dungeon file:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, (const std::string *)(v2 + 848));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 976));
        *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = -117901064;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, v2 + 848);
        *(_DWORD *)(v2 + 64) = -1;
      }
      else
      {
        v44 = ((v2 + 1328) >> 3) + 2147450880;
        *(_DWORD *)v44 = 0;
        *(_BYTE *)(v44 + 4) = 0;
        data::ConfigCustomLevelDungeon::ConfigCustomLevelDungeon((data::ConfigCustomLevelDungeon *const)(v2 + 1328));
        if ( !data::ConfigCustomLevelDungeon::fromJson(
                (data::ConfigCustomLevelDungeon *const)(v2 + 1328),
                (const Json::Value *)(v2 + 1248)) )
        {
          *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1040) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1040, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1040),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadAllCustomDungeonConfig",
            2494);
          v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1040),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v46 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  v45,
                  (const char (*)[37])"fromJson fails, custom_dungeon file:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v46, (const std::string *)(v2 + 848));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1040));
          *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -117901064;
          if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 64, v2 + 848);
          *(_DWORD *)(v2 + 64) = -1;
        }
        else
        {
          v47 = std::map<unsigned int,data::ConfigCustomLevelDungeon>::operator[](&this->custom_dungeon_map_, id_0);
          data::ConfigCustomLevelDungeon::operator=(v47, (const data::ConfigCustomLevelDungeon *)(v2 + 1328));
        }
        data::ConfigCustomLevelDungeon::~ConfigCustomLevelDungeon((data::ConfigCustomLevelDungeon *const)(v2 + 1328));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 1248));
      std::string::~string((void *)(v2 + 848));
      *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = -117901064;
      v48 = ((v2 + 1248) >> 3) + 2147450880;
      *(_DWORD *)v48 = -117901064;
      *(_BYTE *)(v48 + 4) = -8;
      v49 = ((v2 + 1328) >> 3) + 2147450880;
      *(_DWORD *)v49 = -117901064;
      *(_BYTE *)(v49 + 4) = -8;
      std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::CustomLevelDungeonConfig>,false,false> *const)(v2 + 272));
    }
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    if ( *(_DWORD *)(v2 + 64) )
    {
      v11 = *(_DWORD *)(v2 + 64);
    }
    else if ( JsonConfigMgr::loadCustomDungeonAdventureConfig(this, config) )
    {
      *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1104) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1104, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1104),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "loadAllCustomDungeonConfig",
        2506);
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        (common::milog::MiLogStream *const)(v2 + 1104),
        (const char (*)[37])byte_1A5213E0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1104));
      *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -117901064;
      v11 = -1;
    }
    else
    {
      v11 = 0;
    }
    std::unordered_map<std::string,data::ConfigCustomLevelBrick>::~unordered_map((std::unordered_map<std::string,data::ConfigCustomLevelBrick> *const)(v2 + 1408));
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 336));
  if ( v62 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 176) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B4) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1504LL, v62);
  }
  return v11;
};

// Line 2513: range 000000000F27079E-000000000F270E58
int32_t __cdecl JsonConfigMgr::loadRegionalPlayConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  char v15[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 32 14 file_path:2514 112 32 9 <unknown> 176 32 9 <unknown> 240 32 9 <unknown> 304 40 9 root:2521";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadRegionalPlayConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862724] = -219021312;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -218103808;
  v4[536862731] = -202116109;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 48, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 48), p_json_config_base_dir, "regional_play/ConfigRegionalPlay.json");
  if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 48)) )
  {
    if ( *(char *)(((v2 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadRegionalPlayConfig",
      2517);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 112),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v6, (const char (*)[19])"json config file: ");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, (const std::string *)(v2 + 48));
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])" not found!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 112));
    *(_DWORD *)(((v2 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v9 = -1;
  }
  else
  {
    Json::Value::Value(v2 + 304, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 48), (Json::Value *)(v2 + 304)) )
    {
      if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 176, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadRegionalPlayConfig",
        2524);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 176),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v10,
              (const char (*)[28])"parseJsonFile fails, path: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
      *(_DWORD *)(((v2 + 176) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else if ( !data::mapFromJson((const Json::Value *)(v2 + 304), &this->config_regional_play_map_) )
    {
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 15) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadRegionalPlayConfig",
        2530);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v12,
              (const char (*)[26])"mapFromJson fails, path: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 304));
  }
  std::string::~string((void *)(v2 + 48));
  result = v9;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2538: range 000000000F270E5A-000000000F271956
int32_t __cdecl JsonConfigMgr::loadDeathZoneConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  char *v12; // rsi
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  char *v15; // rsi
  uint32_t id; // ecx
  char v17; // al
  std::remove_reference<const data::ConfigDeathZone&>::type *v18; // rax
  unsigned int *v19; // rcx
  const data::ConfigDeathZone *v20; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >,bool> v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-284h]
  std::vector<data::ConfigDeathZone> *__for_range; // [rsp+20h] [rbp-280h]
  __gnu_cxx::__normal_iterator<data::ConfigDeathZone*,std::vector<data::ConfigDeathZone> >::reference config_death_zone; // [rsp+28h] [rbp-278h]
  char v28[624]; // [rsp+30h] [rbp-270h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 32 4 18 death_zone_id:2563 48 8 16 __for_begin:2561 80 8 14 __for_end:2561 112 24 26 config_d"
                        "eath_zone_vec:2553 176 32 14 file_path:2539 240 32 9 <unknown> 304 32 9 <unknown> 368 32 9 <unkn"
                        "own> 432 32 9 <unknown> 496 40 9 root:2546";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadDeathZoneConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862724] = -218959360;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862736] = -218103808;
  v4[536862737] = -202116109;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 176, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 176), p_json_config_base_dir, "death_zone/ConfigDeathZone.json");
  if ( common::tools::FileUtils::fileExists((const std::string *)(v2 + 176)) )
  {
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 240),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadDeathZoneConfig",
      2542);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 240),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v6, (const char (*)[19])"json config file: ");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, (const std::string *)(v2 + 176));
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v8, (const char (*)[37])byte_1A521720);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
    *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = -117901064;
    v9 = 0;
  }
  else
  {
    Json::Value::Value(v2 + 496, 0LL);
    if ( !parseJsonFile((const std::string *)(v2 + 176), (Json::Value *)(v2 + 496)) )
    {
      if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 304, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 304),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadDeathZoneConfig",
        2549);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 304),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v10,
              (const char (*)[28])"parseJsonFile fails, path: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
      *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      std::vector<data::ConfigDeathZone>::vector((std::vector<data::ConfigDeathZone> *const)(v2 + 112));
      v12 = (char *)(v2 + 112);
      if ( !data::vecFromJson((const Json::Value *)(v2 + 496), (data::ConfigDeathZoneList *)(v2 + 112)) )
      {
        if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 368, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 368),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "loadDeathZoneConfig",
          2556);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 368),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                v13,
                (const char (*)[29])"vecFromJson fail, file_path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v2 + 176));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
        *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
        ret = 0;
        __for_range = (std::vector<data::ConfigDeathZone> *)(v2 + 112);
        if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 48, v12);
        *(std::vector<data::ConfigDeathZone>::iterator *)(v2 + 48) = std::vector<data::ConfigDeathZone>::begin(__for_range);
        if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 80, v12);
        *(std::vector<data::ConfigDeathZone>::iterator *)(v2 + 80) = std::vector<data::ConfigDeathZone>::end(__for_range);
        while ( 1 )
        {
          v15 = (char *)(v2 + 80);
          if ( !__gnu_cxx::operator!=<data::ConfigDeathZone *,std::vector<data::ConfigDeathZone>>(
                  (const __gnu_cxx::__normal_iterator<data::ConfigDeathZone*,std::vector<data::ConfigDeathZone> > *)(v2 + 48),
                  (const __gnu_cxx::__normal_iterator<data::ConfigDeathZone*,std::vector<data::ConfigDeathZone> > *)(v2 + 80)) )
            break;
          config_death_zone = __gnu_cxx::__normal_iterator<data::ConfigDeathZone *,std::vector<data::ConfigDeathZone>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigDeathZone*,std::vector<data::ConfigDeathZone> > *const)(v2 + 48));
          *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)config_death_zone >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)config_death_zone >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(config_death_zone);
          }
          id = config_death_zone->id;
          v17 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
          if ( v17 != 0 && v17 <= 3 )
          {
            LOBYTE(v15) = v17 != 0;
            __asan_report_store4(v2 + 32, v15);
          }
          *(_DWORD *)(v2 + 32) = id;
          v18 = std::move<data::ConfigDeathZone const&>(config_death_zone);
          v21 = std::map<unsigned int,data::ConfigDeathZone>::emplace<unsigned int &,data::ConfigDeathZone const>(
                  &this->death_zone_map_,
                  (unsigned int *)(v2 + 32),
                  v18,
                  v19,
                  v20);
          if ( !v21.second )
          {
            *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 49) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 432, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 432),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadDeathZoneConfig",
              2566);
            v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 432),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v23 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                    v22,
                    (const char (*)[25])"duplicate death_zone_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v2 + 32));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
            *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
          __gnu_cxx::__normal_iterator<data::ConfigDeathZone *,std::vector<data::ConfigDeathZone>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigDeathZone*,std::vector<data::ConfigDeathZone> > *const)(v2 + 48));
        }
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        v9 = ret;
      }
      std::vector<data::ConfigDeathZone>::~vector((std::vector<data::ConfigDeathZone> *const)(v2 + 112));
    }
    Json::Value::~Value((Json::Value_0 *const)(v2 + 496));
  }
  std::string::~string((void *)(v2 + 176));
  result = v9;
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2574: range 000000000F271958-000000000F271CAA
const data::ConfigCustomLevelRoomSetting *__fastcall JsonConfigMgr::findCustomDungeonRoomConfig(
        const JsonConfigMgr *const this,
        __int64 dungeon_id,
        uint32_t room_id)
{
  const data::ConfigCustomLevelRoomSetting *v3; // r14
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::map<unsigned int,data::ConfigCustomLevelDungeon> *p_custom_dungeon_map; // rdx
  std::map<unsigned int,data::ConfigCustomLevelDungeon> *v8; // rdx
  char *v9; // rsi
  bool v10; // al
  int v11; // eax
  const data::ConfigCustomLevelRoomSetting *result; // rax
  data::ConfiCustomLevelRoomSettingList *__for_range; // [rsp+20h] [rbp-100h]
  __gnu_cxx::__normal_iterator<const data::ConfigCustomLevelRoomSetting*,std::vector<data::ConfigCustomLevelRoomSetting> >::reference room_config; // [rsp+28h] [rbp-F8h]
  char v16[240]; // [rsp+30h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 15 dungeon_id:2573 64 8 9 iter:2575 96 8 9 <unknown> 128 8 16 __for_begin:2581 160 8 14 __for_end:2581";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findCustomDungeonRoomConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -202116352;
  *(_DWORD *)(v4 + 48) = dungeon_id;
  p_custom_dungeon_map = &this->custom_dungeon_map_;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, dungeon_id);
  *(std::map<unsigned int,data::ConfigCustomLevelDungeon>::const_iterator *)(v4 + 64) = std::map<unsigned int,data::ConfigCustomLevelDungeon>::find(
                                                                                          p_custom_dungeon_map,
                                                                                          (const std::map<unsigned int,data::ConfigCustomLevelDungeon>::key_type *)(v4 + 48));
  v8 = &this->custom_dungeon_map_;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::map<unsigned int,data::ConfigCustomLevelDungeon>::const_iterator *)(v4 + 96) = std::map<unsigned int,data::ConfigCustomLevelDungeon>::end(v8);
  v9 = (char *)(v4 + 96);
  v10 = std::operator==(
          (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon> >::_Self *)(v4 + 64),
          (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon> >::_Self *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v10 )
  {
    v3 = 0LL;
  }
  else
  {
    __for_range = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon> > *const)(v4 + 64))->second.room_list;
    *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 128, v9);
    *(std::vector<data::ConfigCustomLevelRoomSetting>::const_iterator *)(v4 + 128) = std::vector<data::ConfigCustomLevelRoomSetting>::begin(__for_range);
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 160, v9);
    *(std::vector<data::ConfigCustomLevelRoomSetting>::const_iterator *)(v4 + 160) = std::vector<data::ConfigCustomLevelRoomSetting>::end(__for_range);
    while ( __gnu_cxx::operator!=<data::ConfigCustomLevelRoomSetting const*,std::vector<data::ConfigCustomLevelRoomSetting>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigCustomLevelRoomSetting*,std::vector<data::ConfigCustomLevelRoomSetting> > *)(v4 + 128),
              (const __gnu_cxx::__normal_iterator<const data::ConfigCustomLevelRoomSetting*,std::vector<data::ConfigCustomLevelRoomSetting> > *)(v4 + 160)) )
    {
      room_config = __gnu_cxx::__normal_iterator<data::ConfigCustomLevelRoomSetting const*,std::vector<data::ConfigCustomLevelRoomSetting>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigCustomLevelRoomSetting*,std::vector<data::ConfigCustomLevelRoomSetting> > *const)(v4 + 128));
      if ( *(_BYTE *)(((unsigned __int64)room_config >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)room_config >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(room_config);
      }
      if ( room_id == room_config->room_id )
      {
        v3 = room_config;
        v11 = 0;
        goto LABEL_22;
      }
      __gnu_cxx::__normal_iterator<data::ConfigCustomLevelRoomSetting const*,std::vector<data::ConfigCustomLevelRoomSetting>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigCustomLevelRoomSetting*,std::vector<data::ConfigCustomLevelRoomSetting> > *const)(v4 + 128));
    }
    v11 = 1;
LABEL_22:
    if ( v11 == 1 )
      v3 = 0LL;
  }
  result = v3;
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2592: range 000000000F271CAC-000000000F271E6D
const data::ConfigCustomLevelDungeon *__fastcall JsonConfigMgr::findCustomDungeonConfig(
        const JsonConfigMgr *const this,
        __int64 dungeon_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,data::ConfigCustomLevelDungeon> *p_custom_dungeon_map; // rdx
  std::map<unsigned int,data::ConfigCustomLevelDungeon> *v6; // rdx
  bool v7; // al
  const data::ConfigCustomLevelDungeon *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 dungeon_id:2591 64 8 9 iter:2593 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findCustomDungeonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = dungeon_id;
  p_custom_dungeon_map = &this->custom_dungeon_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, dungeon_id);
  *(std::map<unsigned int,data::ConfigCustomLevelDungeon>::const_iterator *)(v2 + 64) = std::map<unsigned int,data::ConfigCustomLevelDungeon>::find(
                                                                                          p_custom_dungeon_map,
                                                                                          (const std::map<unsigned int,data::ConfigCustomLevelDungeon>::key_type *)(v2 + 48));
  v6 = &this->custom_dungeon_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,data::ConfigCustomLevelDungeon>::const_iterator *)(v2 + 96) = std::map<unsigned int,data::ConfigCustomLevelDungeon>::end(v6);
  v7 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelDungeon> > *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2602: range 000000000F271E6E-000000000F27202F
const data::ConfigCustomLevelBrick *__fastcall JsonConfigMgr::findCustomDungeonBrickConfig(
        const JsonConfigMgr *const this,
        __int64 block_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,data::ConfigCustomLevelBrick> *p_custom_dungeon_brick_map; // rdx
  std::map<unsigned int,data::ConfigCustomLevelBrick> *v6; // rdx
  bool v7; // al
  const data::ConfigCustomLevelBrick *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 block_id:2601 64 8 9 iter:2603 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findCustomDungeonBrickConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = block_id;
  p_custom_dungeon_brick_map = &this->custom_dungeon_brick_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, block_id);
  *(std::map<unsigned int,data::ConfigCustomLevelBrick>::const_iterator *)(v2 + 64) = std::map<unsigned int,data::ConfigCustomLevelBrick>::find(
                                                                                        p_custom_dungeon_brick_map,
                                                                                        (const std::map<unsigned int,data::ConfigCustomLevelBrick>::key_type *)(v2 + 48));
  v6 = &this->custom_dungeon_brick_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,data::ConfigCustomLevelBrick>::const_iterator *)(v2 + 96) = std::map<unsigned int,data::ConfigCustomLevelBrick>::end(v6);
  v7 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelBrick> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelBrick> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelBrick>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigCustomLevelBrick> > *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2613: range 000000000F272AA2-000000000F274372
int32_t __cdecl JsonConfigMgr::rewriteWeatherAreaConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char v6; // dl
  char *v7; // rsi
  unsigned int first; // ecx
  char v9; // al
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  _BOOL4 v13; // eax
  char *v14; // rsi
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  _BOOL4 v17; // r15d
  char *v18; // rsi
  unsigned int v19; // ecx
  char v20; // al
  unsigned __int64 v21; // rax
  unsigned __int64 v22; // rax
  const data::Point2DList *p_points; // r8
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int v28; // r15d
  std::shared_ptr<InteriorCheckablePolygon> *v29; // rsi
  __int64 v30; // rdx
  InteriorCheckablePolygon *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // r15d
  int v35; // ecx
  char v36; // al
  int v37; // ecx
  char v38; // dl
  Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *v39; // rax
  Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *v40; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  unsigned __int64 v46; // rax
  unsigned __int64 v47; // rax
  int v48; // edx
  int v49; // edx
  common::milog::MiLogStream *v50; // r14
  std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > *v51; // rax
  HK4EDesignConfig *configa; // [rsp+10h] [rbp-4D0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference scene_json_config_pair; // [rsp+30h] [rbp-4B0h]
  std::unordered_map<unsigned int,SceneScriptConfig> *scene_script_config_map; // [rsp+40h] [rbp-4A0h]
  SceneScriptConfig *scene_script_config; // [rsp+48h] [rbp-498h]
  std::unordered_map<unsigned int,ConfigSceneWeatherArea> *__for_range_0; // [rsp+50h] [rbp-490h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false>::reference config_scene_weather_area_pair; // [rsp+58h] [rbp-488h]
  char v59[1136]; // [rsp+70h] [rbp-470h] BYREF

  configa = config;
  v3 = (unsigned __int64)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1088LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "21 48 4 13 scene_id:2621 64 4 20 weather_area_id:2643 80 8 16 __for_begin:2619 112 8 14 __for_en"
                        "d:2619 144 8 15 scene_iter:2625 176 8 9 <unknown> 208 8 16 __for_begin:2641 240 8 14 __for_end:2"
                        "641 272 16 13 mesh_ptr:2634 304 16 16 polygon_ptr:2659 336 32 9 <unknown> 400 32 9 <unknown> 464"
                        " 32 9 <unknown> 528 32 9 <unknown> 592 32 21 add_grid_to_mesh:2670 656 32 9 <unknown> 720 32 9 <"
                        "unknown> 784 32 9 <unknown> 848 40 22 thickest_grid_opt:2617 928 48 21 border_coord_set:2648 100"
                        "8 48 20 inner_coord_set:2649";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::rewriteWeatherAreaConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = 62194;
  v5[536862727] = -234881024;
  v5[536862728] = 62194;
  v5[536862729] = 62194;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862737] = -219021312;
  v5[536862738] = 62194;
  v5[536862739] = -219021312;
  v5[536862740] = 62194;
  v5[536862741] = -219021312;
  v5[536862742] = 62194;
  v5[536862743] = -219021312;
  v5[536862744] = 62194;
  v5[536862745] = -219021312;
  v5[536862746] = 62194;
  v5[536862747] = -234881024;
  v5[536862748] = -218959118;
  v5[536862750] = -219021312;
  v5[536862751] = 62194;
  v5[536862753] = -202116109;
  if ( !HK4EDesignConfig::isCreateStaticMesh(config) )
  {
    v2 = 0;
  }
  else
  {
    v6 = *(_BYTE *)(((v3 + 887) >> 3) + 0x7FFF8000);
    LOBYTE(config) = v6 != 0;
    if ( *(char *)(((v3 + 848) >> 3) + 0x7FFF8000) < 0 || v6 != 0 && (char)((v3 + 119) & 7) >= v6 )
    {
      config = (HK4EDesignConfig *)40;
      __asan_report_store_n(v3 + 848, 40LL);
    }
    *(_QWORD *)(v3 + 848) = 0LL;
    *(_QWORD *)(v3 + 856) = 0LL;
    *(_QWORD *)(v3 + 864) = 0LL;
    *(_QWORD *)(v3 + 872) = 0LL;
    *(_QWORD *)(v3 + 880) = 0LL;
    if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 80, config);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 80) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
    if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 112, config);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 112) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
    while ( 1 )
    {
      v7 = (char *)(v3 + 112);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 80),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 112)) )
        break;
      scene_json_config_pair = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 80));
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)scene_json_config_pair >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)scene_json_config_pair >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(scene_json_config_pair);
      }
      first = scene_json_config_pair->first;
      v9 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
      LOBYTE(v7) = v9 != 0;
      if ( v9 != 0 && v9 <= 3 )
        __asan_report_store4(v3 + 48, v7);
      *(_DWORD *)(v3 + 48) = first;
      scene_script_config_map = &configa->lua_config_mgr.scene_script_config_map;
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 144, v7);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v3 + 144) = std::unordered_map<unsigned int,SceneScriptConfig>::find(
                                                                                      scene_script_config_map,
                                                                                      (const std::unordered_map<unsigned int,SceneScriptConfig>::key_type *)(v3 + 48));
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 176, v3 + 48);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v3 + 176) = std::unordered_map<unsigned int,SceneScriptConfig>::end(scene_script_config_map);
      v10 = std::__detail::operator==<std::pair<unsigned int const,SceneScriptConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v3 + 144),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v3 + 176));
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewriteWeatherAreaConfig",
          2628);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                v11,
                (const char (*)[62])"scene_json_config not found in scene_script_config, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v13 = 0;
      }
      else
      {
        scene_script_config = &std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false> *const)(v3 + 144))->second;
        *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        SceneScriptConfig::getStaticGroupMeshPtr(
          (const SceneScriptConfig *const)(v3 + 272),
          (data::VisionLevelType)scene_script_config);
        v14 = (char *)(v3 + 272);
        if ( std::operator==<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>(
               0LL,
               (const std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *)(v3 + 272)) )
        {
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteWeatherAreaConfig",
            2637);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 400),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v16 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  v15,
                  (const char (*)[28])"mesh_ptr is null, scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v17 = 0;
        }
        else
        {
          __for_range_0 = &scene_json_config_pair->second.config_scene_weather_area_map;
          *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 208, v14);
          *(std::unordered_map<unsigned int,ConfigSceneWeatherArea>::iterator *)(v3 + 208) = std::unordered_map<unsigned int,ConfigSceneWeatherArea>::begin(__for_range_0);
          *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 240, v14);
          *(std::unordered_map<unsigned int,ConfigSceneWeatherArea>::iterator *)(v3 + 240) = std::unordered_map<unsigned int,ConfigSceneWeatherArea>::end(__for_range_0);
          while ( 1 )
          {
            v18 = (char *)(v3 + 240);
            if ( !std::__detail::operator!=<std::pair<unsigned int const,ConfigSceneWeatherArea>,false>(
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,ConfigSceneWeatherArea>,false> *)(v3 + 208),
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,ConfigSceneWeatherArea>,false> *)(v3 + 240)) )
              break;
            config_scene_weather_area_pair = std::__detail::_Node_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false> *const)(v3 + 208));
            *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)config_scene_weather_area_pair >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)config_scene_weather_area_pair >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(config_scene_weather_area_pair);
            }
            v19 = config_scene_weather_area_pair->first;
            v20 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
            if ( v20 != 0 && v20 <= 3 )
            {
              LOBYTE(v18) = v20 != 0;
              __asan_report_store4(v3 + 64, v18);
            }
            *(_DWORD *)(v3 + 64) = v19;
            v21 = ((v3 + 928) >> 3) + 2147450880;
            *(_DWORD *)v21 = 0;
            *(_WORD *)(v21 + 4) = 0;
            std::set<Coordinate>::set((std::set<Coordinate> *const)(v3 + 928));
            v22 = ((v3 + 1008) >> 3) + 2147450880;
            *(_DWORD *)v22 = 0;
            *(_WORD *)(v22 + 4) = 0;
            std::set<Coordinate>::set((std::set<Coordinate> *const)(v3 + 1008));
            p_points = &config_scene_weather_area_pair->second.config_weather_area.points;
            if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v3 + 48);
            if ( (unsigned int)JsonConfigMgr::calcCoveredCoordinateByPolygon(
                                 this,
                                 (__int64)configa,
                                 *(_DWORD *)(v3 + 48),
                                 VISION_LEVEL_NORMAL,
                                 p_points,
                                 (std::set<Coordinate> *)(v3 + 928),
                                 (std::set<Coordinate> *)(v3 + 1008)) )
            {
              *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 464) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 464, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 464),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "rewriteWeatherAreaConfig",
                2653);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 464),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      v24,
                      (const char (*)[47])"calcCoveredCoordinateByPolygon fail, scene_id:");
              v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v25,
                      (const unsigned int *)(v3 + 48));
              v27 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                      v26,
                      (const char (*)[18])" weather_area_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v27,
                (const unsigned int *)(v3 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 464));
              *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v28 = 0;
            }
            else
            {
              v29 = (std::shared_ptr<InteriorCheckablePolygon> *)(((_BYTE)config_scene_weather_area_pair + 12) & 7);
              v30 = (*(_BYTE *)(((unsigned __int64)&config_scene_weather_area_pair->second.config_weather_area.is_accurate_border >> 3)
                              + 0x7FFF8000) != 0) & (unsigned __int8)((char)v29 >= *(_BYTE *)(((unsigned __int64)&config_scene_weather_area_pair->second.config_weather_area.is_accurate_border >> 3)
                                                                                            + 0x7FFF8000));
              if ( (_BYTE)v30 )
                __asan_report_load1(
                  &config_scene_weather_area_pair->second.config_weather_area.is_accurate_border,
                  v29,
                  v30);
              if ( !config_scene_weather_area_pair->second.config_weather_area.is_accurate_border )
                goto LABEL_60;
              *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              common::tools::perf::make_shared<InteriorCheckablePolygon>();
              v31 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 304));
              if ( InteriorCheckablePolygon::initByPointVec(
                     v31,
                     &config_scene_weather_area_pair->second.config_weather_area.points) )
              {
                *(_DWORD *)(((v3 + 528) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 528) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 559) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 559) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 528, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 528),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "rewriteWeatherAreaConfig",
                  2662);
                v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 528),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v33 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                        v32,
                        (const char (*)[38])"initByPointVec fail, weather_area_id:");
                v29 = (std::shared_ptr<InteriorCheckablePolygon> *)(v3 + 64);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v33,
                  (const unsigned int *)(v3 + 64));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 528));
                *(_DWORD *)(((v3 + 528) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v34 = 0;
              }
              else
              {
                v29 = std::move<std::shared_ptr<InteriorCheckablePolygon> &>((std::shared_ptr<InteriorCheckablePolygon> *)(v3 + 304));
                std::shared_ptr<InteriorCheckablePolygon>::operator=(
                  &config_scene_weather_area_pair->second.polygon_ptr,
                  v29);
                v34 = 1;
              }
              std::shared_ptr<InteriorCheckablePolygon>::~shared_ptr((std::shared_ptr<InteriorCheckablePolygon> *const)(v3 + 304));
              *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = -1800;
              if ( v34 == 1 )
              {
LABEL_60:
                *(_DWORD *)(((v3 + 592) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v3 + 48);
                v35 = *(_DWORD *)(v3 + 48);
                v36 = *(_BYTE *)(((v3 + 592) >> 3) + 0x7FFF8000);
                if ( v36 != 0 && v36 <= 3 )
                {
                  LOBYTE(v29) = v36 != 0;
                  __asan_report_store4(v3 + 592, v29);
                }
                *(_DWORD *)(v3 + 592) = v35;
                if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v3 + 64);
                v37 = *(_DWORD *)(v3 + 64);
                v38 = *(_BYTE *)(((v3 + 596) >> 3) + 0x7FFF8000);
                LOBYTE(v29) = v38 != 0;
                if ( v38 != 0 && (char)(((v3 + 84) & 7) + 3) >= v38 )
                  __asan_report_store4(v3 + 596, v29);
                *(_DWORD *)(v3 + 596) = v37;
                if ( *(_BYTE *)(((v3 + 600) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 600, v29);
                *(_QWORD *)(v3 + 600) = &configa->txt_config_mgr.weather_config_mgr;
                if ( *(_BYTE *)(((v3 + 608) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 608, v29);
                *(_QWORD *)(v3 + 608) = &config_scene_weather_area_pair->second;
                if ( *(_BYTE *)(((v3 + 616) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 616, v29);
                *(_QWORD *)(v3 + 616) = v3 + 848;
                v39 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 272));
                if ( JsonConfigMgr::rewriteWeatherAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
                       (const JsonConfigMgr::rewriteWeatherAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v3 + 592),
                       (const std::set<Coordinate> *)(v3 + 928),
                       v39,
                       1)
                  || (v40 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 272)),
                      JsonConfigMgr::rewriteWeatherAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
                        (const JsonConfigMgr::rewriteWeatherAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v3 + 592),
                        (const std::set<Coordinate> *)(v3 + 1008),
                        v40,
                        0)) )
                {
                  *(_DWORD *)(((v3 + 656) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 656) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 687) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 687) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 656, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 656),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "rewriteWeatherAreaConfig",
                    2717);
                  v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 656),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v43 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                          v42,
                          (const char (*)[33])"add_grid_to_mesh fail, scene_id:");
                  v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v43,
                          (const unsigned int *)(v3 + 48));
                  v45 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                          v44,
                          (const char (*)[18])" weather_area_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v45,
                    (const unsigned int *)(v3 + 64));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 656));
                  *(_DWORD *)(((v3 + 656) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v28 = 0;
                }
                else
                {
                  v28 = 1;
                }
              }
              else
              {
                v28 = 0;
              }
            }
            std::set<Coordinate>::~set((std::set<Coordinate> *const)(v3 + 1008));
            std::set<Coordinate>::~set((std::set<Coordinate> *const)(v3 + 928));
            *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
            v46 = ((v3 + 928) >> 3) + 2147450880;
            *(_DWORD *)v46 = -117901064;
            *(_WORD *)(v46 + 4) = -1800;
            v47 = ((v3 + 1008) >> 3) + 2147450880;
            *(_DWORD *)v47 = -117901064;
            *(_WORD *)(v47 + 4) = -1800;
            *(_DWORD *)(((v3 + 592) >> 3) + 0x7FFF8000) = -117901064;
            if ( v28 != 1 )
            {
              v48 = 0;
              goto LABEL_87;
            }
            std::__detail::_Node_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false> *const)(v3 + 208));
          }
          v48 = 1;
LABEL_87:
          *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = -8;
          v17 = v48 == 1;
        }
        std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>::~shared_ptr((std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *const)(v3 + 272));
        v13 = v17;
      }
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -1800;
      if ( !v13 )
      {
        v49 = 0;
        goto LABEL_93;
      }
      std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 80));
    }
    v49 = 1;
LABEL_93:
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    if ( v49 == 1 )
    {
      if ( std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>>::has_value((const std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > > *const)(v3 + 848)) )
      {
        *(_DWORD *)(((v3 + 720) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 720) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 751) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 751) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 720, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 720),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_config_mgr.cpp",
          "rewriteWeatherAreaConfig",
          2725);
        v50 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)(v3 + 720),
                (const char (*)[15])"thickest_grid:");
        v51 = std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>>::value((std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > > *const)(v3 + 848));
        common::milog::MiLogStream::operator<<<unsigned int,std::vector<std::pair<unsigned int,bool>>>(v50, v51);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 720));
        *(_DWORD *)(((v3 + 720) >> 3) + 0x7FFF8000) = -117901064;
      }
      else
      {
        *(_DWORD *)(((v3 + 784) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 784) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 815) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 815) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 784, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 784),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_config_mgr.cpp",
          "rewriteWeatherAreaConfig",
          2729);
        common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
          (common::milog::MiLogStream *const)(v3 + 784),
          (const char (*)[14])"no grid found");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 784));
        *(_DWORD *)(((v3 + 784) >> 3) + 0x7FFF8000) = -117901064;
      }
      v2 = 0;
    }
    std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>>::~optional((std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > > *const)(v3 + 848));
  }
  if ( v59 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8080) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 136) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1088LL, v59);
  }
  return v2;
};

// Line 2670: range 000000000F272030-000000000F272AA1
__int64 __fastcall JsonConfigMgr::rewriteWeatherAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
        const JsonConfigMgr::rewriteWeatherAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const __closure,
        const std::set<Coordinate> *coord_set,
        Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *mesh,
        char is_border)
{
  unsigned int v4; // r15d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int32_t *p_y; // rax
  int32_t y; // esi
  WeatherExcelConfigMgr *weather_config_mgr; // rcx
  bool *v11; // r8
  std::vector<std::pair<unsigned int,bool>>::size_type v12; // rcx
  std::vector<std::pair<unsigned int,bool>>::size_type v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::vector<std::pair<unsigned int,bool>>::size_type v18; // rax
  int v19; // edx
  std::vector<std::pair<unsigned int,bool>>::reference v20; // rax
  uint32_t *v21; // rdx
  std::pair<unsigned int,bool> *v22; // r14
  std::pair<unsigned int,bool> *v23; // rax
  int v24; // eax
  std::vector<std::pair<unsigned int,bool>>::size_type v25; // r14
  std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > *v26; // rax
  char v27; // al
  __int64 v28; // rsi
  __int64 result; // rax
  uint32_t priority; // [rsp+34h] [rbp-19Ch]
  uint32_t prev_weather_area_id; // [rsp+38h] [rbp-198h]
  uint32_t prev_priority; // [rsp+3Ch] [rbp-194h]
  std::_Rb_tree_const_iterator<Coordinate>::reference coord; // [rsp+48h] [rbp-188h]
  SceneGridConfig *scene_grid_config_ptr; // [rsp+50h] [rbp-180h]
  std::vector<std::pair<unsigned int,bool>> *weather_grid_vec; // [rsp+58h] [rbp-178h]
  char v38[368]; // [rsp+60h] [rbp-170h] BYREF

  v5 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "7 48 1 14 is_border:2671 64 8 16 __for_begin:2673 96 8 14 __for_end:2673 128 8 8 idx:2686 160 8 "
                        "9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = JsonConfigMgr::rewriteWeatherAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator();
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -218959360;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862727] = -218959118;
  v7[536862729] = -202116109;
  *(_BYTE *)(v5 + 48) = is_border;
  if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 64, coord_set);
  *(std::set<Coordinate>::iterator *)(v5 + 64) = std::set<Coordinate>::begin(coord_set);
  if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 96, coord_set);
  *(std::set<Coordinate>::iterator *)(v5 + 96) = std::set<Coordinate>::end(coord_set);
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v5 + 64),
            (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v5 + 96)) )
  {
    coord = std::_Rb_tree_const_iterator<Coordinate>::operator*((const std::_Rb_tree_const_iterator<Coordinate> *const)(v5 + 64));
    p_y = &coord->y;
    if ( *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_y & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_y);
    }
    y = coord->y;
    if ( *(_BYTE *)(((unsigned __int64)coord >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)coord & 7) + 3) >= *(_BYTE *)(((unsigned __int64)coord >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(coord);
    }
    scene_grid_config_ptr = Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>::getGrid(mesh, coord->x, y);
    if ( scene_grid_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__weather_config_mgr >> 3) + 0x7FFF8000) )
        __asan_report_load8(&__closure->__weather_config_mgr);
      weather_config_mgr = __closure->__weather_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__weather_area_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)__closure + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__weather_area_id >> 3)
                                                                + 0x7FFF8000) )
      {
        __asan_report_load4(&__closure->__weather_area_id);
      }
      priority = WeatherExcelConfigMgr::findWeatherAreaPriority(weather_config_mgr, __closure->__weather_area_id);
      weather_grid_vec = &scene_grid_config_ptr->weather_grid_vec;
      std::vector<std::pair<unsigned int,bool>>::emplace_back<unsigned int const&,bool &>(
        &scene_grid_config_ptr->weather_grid_vec,
        &__closure->__weather_area_id,
        (bool *)(v5 + 48),
        &__closure->__weather_area_id,
        v11);
      *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
      v12 = std::vector<std::pair<unsigned int,bool>>::size(&scene_grid_config_ptr->weather_grid_vec) - 1;
      if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 128, &__closure->__weather_area_id);
      for ( *(_QWORD *)(v5 + 128) = v12; ; --*(_QWORD *)(v5 + 128) )
      {
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_load8(v5 + 128);
        if ( !*(_QWORD *)(v5 + 128) )
        {
LABEL_51:
          v19 = 1;
          goto LABEL_52;
        }
        v13 = std::vector<std::pair<unsigned int,bool>>::size(weather_grid_vec);
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_load8(v5 + 128);
        if ( v13 <= *(_QWORD *)(v5 + 128) )
          break;
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_load8(v5 + 128);
        v20 = std::vector<std::pair<unsigned int,bool>>::operator[](weather_grid_vec, *(_QWORD *)(v5 + 128) - 1LL);
        v21 = (uint32_t *)v20;
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v20);
        }
        prev_weather_area_id = *v21;
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__weather_config_mgr >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__weather_config_mgr);
        prev_priority = WeatherExcelConfigMgr::findWeatherAreaPriority(
                          __closure->__weather_config_mgr,
                          prev_weather_area_id);
        if ( prev_priority > priority )
          goto LABEL_51;
        if ( prev_priority == priority )
        {
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__weather_area_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)__closure + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__weather_area_id >> 3)
                                                                    + 0x7FFF8000) )
          {
            __asan_report_load4(&__closure->__weather_area_id);
          }
          if ( prev_weather_area_id > __closure->__weather_area_id )
            goto LABEL_51;
        }
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_load8(v5 + 128);
        v22 = std::vector<std::pair<unsigned int,bool>>::operator[](weather_grid_vec, *(_QWORD *)(v5 + 128) - 1LL);
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_load8(v5 + 128);
        v23 = std::vector<std::pair<unsigned int,bool>>::operator[](weather_grid_vec, *(_QWORD *)(v5 + 128));
        std::swap<unsigned int,bool>(v23, v22);
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_load8(v5 + 128);
      }
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "operator()",
        2690);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v14, (const char (*)[5])"idx:");
      v16 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v15,
              (const unsigned __int64 *)(v5 + 128));
      v17 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v16,
              (const char (*)[24])" weather_grid_vec.size:");
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
      v18 = std::vector<std::pair<unsigned int,bool>>::size(weather_grid_vec);
      if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
        v18 = __asan_report_store8(v5 + 160, " weather_grid_vec.size:");
      *(_QWORD *)(v5 + 160) = v18;
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
        v17,
        (const unsigned __int64 *)(v5 + 160));
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
      v19 = 0;
LABEL_52:
      *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
      if ( v19 != 1 )
      {
        v24 = 0;
        goto LABEL_70;
      }
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__thickest_grid_opt >> 3) + 0x7FFF8000) )
        __asan_report_load8(&__closure->__thickest_grid_opt);
      if ( !std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>>::has_value(__closure->__thickest_grid_opt) )
        goto LABEL_60;
      v25 = std::vector<std::pair<unsigned int,bool>>::size(weather_grid_vec);
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__thickest_grid_opt >> 3) + 0x7FFF8000) )
        __asan_report_load8(&__closure->__thickest_grid_opt);
      v26 = std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>>::value(__closure->__thickest_grid_opt);
      if ( v25 > std::vector<std::pair<unsigned int,bool>>::size(&v26->second) )
LABEL_60:
        v27 = 1;
      else
        v27 = 0;
      if ( v27 )
      {
        *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = 0;
        v28 = (__int64)__closure;
        if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
        {
          v28 = 32LL;
          __asan_report_store_n(v5 + 256, 32LL);
        }
        std::make_pair<unsigned int const&,std::vector<std::pair<unsigned int,bool>> &>(
          (std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > *)(v5 + 256),
          (const unsigned int *)v28,
          weather_grid_vec);
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__thickest_grid_opt >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__thickest_grid_opt);
        std::optional<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>>::operator=<std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>>(
          __closure->__thickest_grid_opt,
          (std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > *)(v5 + 256));
        std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>>>::~pair((std::pair<unsigned int,std::vector<std::pair<unsigned int,bool>> > *const)(v5 + 256));
        *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
      }
    }
    std::_Rb_tree_const_iterator<Coordinate>::operator++((std::_Rb_tree_const_iterator<Coordinate> *const)(v5 + 64));
  }
  v24 = 1;
LABEL_70:
  if ( v24 == 1 )
    v4 = 0;
  result = v4;
  if ( v38 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2737: range 000000000F274374-000000000F27484B
int32_t __cdecl JsonConfigMgr::rewriteNpcBornConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  uint32_t *p_config_id; // rsi
  uint32_t room_id; // ecx
  char v8; // dl
  int32_t result; // eax
  uint32_t scene_id; // [rsp+14h] [rbp-12Ch]
  std::vector<data::ConfigLevelNpcBornPos> *__for_range; // [rsp+18h] [rbp-128h]
  data::ConfigLevelNpcBornPos *npc_config; // [rsp+20h] [rbp-120h]
  std::vector<data::ConfigNpcBornPos> *__for_range_0; // [rsp+28h] [rbp-118h]
  data::ConfigNpcBornPos *npc_pos; // [rsp+30h] [rbp-110h]
  std::unordered_map<unsigned int,std::vector<ScenePosition>>::mapped_type *npc_vec; // [rsp+38h] [rbp-108h]
  char v16[256]; // [rsp+40h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 16 __for_begin:2738 64 8 14 __for_end:2738 96 8 16 __for_begin:2741 128 8 14 __for_end:27"
                        "41 160 32 7 sp:2744";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::rewriteNpcBornConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -202116109;
  __for_range = &this->npc_born_vec;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, config);
  *(std::vector<data::ConfigLevelNpcBornPos>::iterator *)(v2 + 32) = std::vector<data::ConfigLevelNpcBornPos>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::vector<data::ConfigLevelNpcBornPos>::iterator *)(v2 + 64) = std::vector<data::ConfigLevelNpcBornPos>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !__gnu_cxx::operator!=<data::ConfigLevelNpcBornPos *,std::vector<data::ConfigLevelNpcBornPos>>(
            (const __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *)(v2 + 32),
            (const __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *)(v2 + 64)) )
      break;
    npc_config = __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos *,std::vector<data::ConfigLevelNpcBornPos>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *const)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&npc_config->scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&npc_config->scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&npc_config->scene_id);
    }
    scene_id = npc_config->scene_id;
    __for_range_0 = &npc_config->born_pos_list;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::vector<data::ConfigNpcBornPos>::iterator *)(v2 + 96) = std::vector<data::ConfigNpcBornPos>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<data::ConfigNpcBornPos>::iterator *)(v2 + 128) = std::vector<data::ConfigNpcBornPos>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::ConfigNpcBornPos *,std::vector<data::ConfigNpcBornPos>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *)(v2 + 128)) )
    {
      npc_pos = __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos *,std::vector<data::ConfigNpcBornPos>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *const)(v2 + 96));
      p_config_id = &npc_pos->config_id;
      npc_vec = std::unordered_map<unsigned int,std::vector<ScenePosition>>::operator[](
                  &this->config_npc_born_map_,
                  &npc_pos->config_id);
      *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, p_config_id);
      *(_DWORD *)(v2 + 160) = scene_id;
      if ( *(_BYTE *)(((unsigned __int64)&npc_pos->room_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&npc_pos->room_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&npc_pos->room_id);
      }
      room_id = npc_pos->room_id;
      v8 = *(_BYTE *)(((v2 + 164) >> 3) + 0x7FFF8000);
      if ( v8 != 0 && (char)(((v2 - 96 + 4) & 7) + 3) >= v8 )
      {
        LOBYTE(p_config_id) = v8 != 0;
        __asan_report_store4(v2 + 164, p_config_id);
      }
      *(_DWORD *)(v2 + 164) = room_id;
      Vector3::Vector3((Vector3 *const)(v2 + 168), &npc_pos->rot);
      Vector3::Vector3((Vector3 *const)(v2 + 180), &npc_pos->pos);
      std::vector<ScenePosition>::emplace_back<ScenePosition&>(
        npc_vec,
        (ScenePosition *)(v2 + 160),
        (ScenePosition *)(v2 + 160));
      *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
      __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos *,std::vector<data::ConfigNpcBornPos>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos *,std::vector<data::ConfigLevelNpcBornPos>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *const)(v2 + 32));
  }
  result = 0;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2753: range 000000000F27484C-000000000F2759E7
int32_t __cdecl JsonConfigMgr::rewriteScenePointConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned __int64 v6; // rax
  const std::pair<unsigned int const,data::WorldExcelConfig> *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  _BOOL4 v12; // r14d
  LuaConfigMgr *p_lua_config_mgr; // rcx
  __int64 main_scene_id; // rsi
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  unsigned __int64 v19; // rax
  const std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  int v25; // r14d
  int v26; // r14d
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  unsigned int *v28; // rcx
  data::Vector *v29; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,Vector3>,false,false>,bool> v30; // rax
  common::milog::MiLogStream *v31; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  common::milog::MiLogStream *v42; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  common::milog::MiLogStream *v53; // rax
  int v54; // eax
  int v55; // edx
  unsigned __int64 v56; // rax
  int v57; // eax
  data::Vector *p_pos; // [rsp+8h] [rbp-388h]
  data::WorldExcelConfigMap *__for_range; // [rsp+20h] [rbp-370h]
  std::tuple_element<1,const std::pair<unsigned int const,data::WorldExcelConfig> >::type *world_config; // [rsp+30h] [rbp-360h]
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+38h] [rbp-358h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > >::type *point_id; // [rsp+50h] [rbp-340h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > >::type *config_scene_point_ptr; // [rsp+58h] [rbp-338h]
  char v66[816]; // [rsp+60h] [rbp-330h] BYREF

  v3 = (unsigned __int64)v66;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(768LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 32 8 16 __for_begin:2754 64 8 14 __for_end:2754 96 8 16 __for_begin:2768 128 8 14 __for_end:2"
                        "768 160 12 9 <unknown> 192 16 14 point_ptr:2775 224 24 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 56 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::rewriteScenePointConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -219020288;
  v5[536862726] = -219021312;
  v5[536862727] = -234881024;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -218959118;
  v5[536862734] = -218959118;
  v5[536862736] = -218959118;
  v5[536862738] = -218959118;
  v5[536862740] = -218959118;
  v5[536862742] = -218103808;
  v5[536862743] = -202116109;
  __for_range = &config->txt_config_mgr.scene_config_mgr.world_excel_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, config);
  *(std::unordered_map<unsigned int,data::WorldExcelConfig>::iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::WorldExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, config);
  *(std::unordered_map<unsigned int,data::WorldExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::WorldExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::WorldExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WorldExcelConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WorldExcelConfig>,false> *)(v3 + 64)) )
  {
    v6 = ((v3 + 672) >> 3) + 2147450880;
    *(_DWORD *)v6 = 0;
    *(_WORD *)(v6 + 4) = 0;
    *(_BYTE *)(v6 + 6) = 0;
    v7 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::WorldExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::WorldExcelConfig>,false,false> *const)(v3 + 32));
    std::pair<unsigned int const,data::WorldExcelConfig>::pair(
      (std::pair<unsigned int const,data::WorldExcelConfig> *const)(v3 + 672),
      v7);
    std::get<0ul,unsigned int const,data::WorldExcelConfig>((const std::pair<unsigned int const,data::WorldExcelConfig> *)(v3 + 672));
    world_config = (std::tuple_element<1,const std::pair<unsigned int const,data::WorldExcelConfig> >::type *)std::get<1ul,unsigned int const,data::WorldExcelConfig>((const std::pair<unsigned int const,data::WorldExcelConfig> *)(v3 + 672));
    if ( *(_BYTE *)(((unsigned __int64)&world_config->main_scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&world_config->main_scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&world_config->main_scene_id);
    }
    scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, world_config->main_scene_id);
    if ( scene_json_config_ptr )
    {
      p_lua_config_mgr = &config->lua_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&world_config->main_scene_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&world_config->main_scene_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&world_config->main_scene_id);
      }
      main_scene_id = world_config->main_scene_id;
      if ( LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, main_scene_id) )
      {
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 96, main_scene_id);
        *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::begin(&scene_json_config_ptr->point_map);
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 128, main_scene_id);
        *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v3 + 128) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(&scene_json_config_ptr->point_map);
        while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 96),
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 128)) )
        {
          v19 = ((v3 + 224) >> 3) + 2147450880;
          *(_WORD *)v19 = 0;
          *(_BYTE *)(v19 + 2) = 0;
          v20 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 96));
          std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>::pair(
            (std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > *const)(v3 + 224),
            v20);
          point_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigScenePoint>>((const std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > *)(v3 + 224));
          config_scene_point_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigScenePoint>>((const std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > *)(v3 + 224));
          if ( std::operator==<data::ConfigScenePoint>(0LL, config_scene_point_ptr) )
          {
            *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 416) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 416, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 416),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "rewriteScenePointConfig",
              2772);
            v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 416),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v22 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                    v21,
                    (const char (*)[42])"config_scene_point_ptr is null, point_id:");
            v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, point_id);
            v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])" scene_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &world_config->main_scene_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 416));
            *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v25 = 0;
          }
          else
          {
            *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::PersonalSceneJumpPoint,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 192));
            if ( std::operator==<data::PersonalSceneJumpPoint>(
                   0LL,
                   (const std::shared_ptr<data::PersonalSceneJumpPoint> *)(v3 + 192)) )
            {
              v26 = 0;
            }
            else
            {
              p_pos = &std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192))->pos;
              v27 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              v30 = std::unordered_map<unsigned int,Vector3>::emplace<unsigned int &,data::Vector &>(
                      &this->room_position_in_world_,
                      &v27->tran_scene_id,
                      p_pos,
                      v28,
                      v29);
              if ( !v30.second )
              {
                *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 480, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 480),
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/json_config_mgr.cpp",
                  "rewriteScenePointConfig",
                  2782);
                v31 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                        (common::milog::MiLogStream *const)(v3 + 480),
                        (const char (*)[34])"duplicate entrance to room scene:");
                v32 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &v32->tran_scene_id);
                v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v33,
                        (const char (*)[16])" from world_id:");
                v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &world_config->id);
                v36 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v35,
                        (const char (*)[11])" scene_id:");
                v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v36,
                        &world_config->main_scene_id);
                v38 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v37,
                        (const char (*)[14])" at point_id:");
                v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, point_id);
                v40 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v39,
                        (const char (*)[11])" position:");
                *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
                *(_WORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 1024;
                v41 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                Vector3::Vector3((Vector3 *const)(v3 + 160), &v41->pos);
                if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 544, 32LL);
                }
                Vector3::toString[abi:cxx11]((std::string *)(v3 + 544), (const Vector3 *const)(v3 + 160));
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v40,
                  (const std::string *)(v3 + 544));
                std::string::~string((void *)(v3 + 544));
                *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = -117901064;
                *(_WORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = -1800;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
                *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -117901064;
                v26 = 0;
              }
              else
              {
                *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 608, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 608),
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/json_config_mgr.cpp",
                  "rewriteScenePointConfig",
                  2786);
                v42 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        (common::milog::MiLogStream *const)(v3 + 608),
                        (const char (*)[12])"room scene:");
                v43 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v42, &v43->tran_scene_id);
                v45 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v44,
                        (const char (*)[14])"'s position:(");
                v46 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v47 = common::milog::MiLogStream::operator<<<float,(float *)0>(v45, &v46->pos.x);
                v48 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v47, (const char (*)[2])",");
                v49 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v50 = common::milog::MiLogStream::operator<<<float,(float *)0>(v48, &v49->pos.y);
                v51 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v50, (const char (*)[2])",");
                v52 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v53 = common::milog::MiLogStream::operator<<<float,(float *)0>(v51, &v52->pos.z);
                common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v53, (const char (*)[2])")");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 608));
                *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = -117901064;
                v26 = 1;
              }
            }
            std::shared_ptr<data::PersonalSceneJumpPoint>::~shared_ptr((std::shared_ptr<data::PersonalSceneJumpPoint> *const)(v3 + 192));
            if ( v26 == 1 )
              v25 = 2;
            else
              v25 = 1;
          }
          std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>::~pair((std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > *const)(v3 + 224));
          if ( v25 )
          {
            if ( v25 == 2 )
              v54 = 2;
            else
              v54 = 1;
          }
          else
          {
            v54 = 0;
          }
          *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -1800;
          if ( !v54 )
          {
            v55 = 0;
            goto LABEL_57;
          }
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 96));
        }
        v55 = 1;
LABEL_57:
        v56 = ((v3 + 224) >> 3) + 2147450880;
        *(_WORD *)v56 = -1800;
        *(_BYTE *)(v56 + 2) = -8;
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
        v12 = v55 == 1;
      }
      else
      {
        *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewriteScenePointConfig",
          2765);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 352),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                v15,
                (const char (*)[38])"findSceneScriptConfig fail, scene_id:");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &world_config->main_scene_id);
        v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])" world_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &world_config->id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 352));
        *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v12 = 0;
      }
    }
    else
    {
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "rewriteScenePointConfig",
        2759);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 288),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             v8,
             (const char (*)[36])"findSceneJsonConfig fail, scene_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &world_config->main_scene_id);
      v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])" world_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &world_config->id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v12 = 0;
    }
    std::pair<unsigned int const,data::WorldExcelConfig>::~pair((std::pair<unsigned int const,data::WorldExcelConfig> *const)(v3 + 672));
    if ( !v12 )
    {
      v57 = 0;
      goto LABEL_62;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::WorldExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::WorldExcelConfig>,false,false> *const)(v3 + 32));
  }
  v57 = 1;
LABEL_62:
  if ( v57 == 1 )
    v2 = 0;
  if ( v66 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 84) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 2793: range 000000000F2759E8-000000000F276076
int32_t __cdecl JsonConfigMgr::rewriteMonsterConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::MonsterExcelConfigMgrBase *v6; // rcx
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> > >::type *v7; // rsi
  std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  int32_t HashValue; // edx
  int *v10; // r8
  const unsigned int *v11; // rcx
  char v12; // al
  std::unordered_set<unsigned int> *v13; // rdx
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  int v19; // edx
  int v20; // eax
  int32_t result; // eax
  MonsterExcelConfigMgr *monster_txt_config_mgr; // [rsp+28h] [rbp-188h]
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>> *__for_range; // [rsp+30h] [rbp-180h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false>::reference __in; // [rsp+38h] [rbp-178h]
  const unsigned int *monster_id; // [rsp+40h] [rbp-170h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> > >::type *config_monster_ptr; // [rsp+48h] [rbp-168h]
  data::ConfigMonsterInitialPoseMap *__for_range_0; // [rsp+60h] [rbp-150h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigMonsterInitialPose>,false,true>::reference v28; // [rsp+68h] [rbp-148h]
  std::tuple_element<1,const std::pair<const std::string,data::ConfigMonsterInitialPose> >::type *config_pose; // [rsp+78h] [rbp-138h]
  char v30[304]; // [rsp+80h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 9 <unknown> 64 8 16 __for_begin:2796 96 8 14 __for_end:2796 128 8 16 __for_begin:2808 160"
                        " 8 14 __for_end:2808 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::rewriteMonsterConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862727] = -202116109;
  monster_txt_config_mgr = &config->txt_config_mgr.monster_config_mgr;
  __for_range = &this->config_monster_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, config);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, config);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v3 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v3 + 96)) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false> *const)(v3 + 64));
    monster_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigMonster>>(__in);
    config_monster_ptr = std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigMonster>>(__in);
    v6 = monster_txt_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)monster_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)monster_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)monster_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(monster_id);
    }
    if ( data::MonsterExcelConfigMgrBase::findMonsterExcelConfig(v6, *monster_id) )
    {
      v7 = config_monster_ptr;
      if ( std::operator!=<data::ConfigMonster>(0LL, config_monster_ptr) )
      {
        v8 = std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_monster_ptr);
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
        HashValue = data::ConfigAIBeta::getHashValue(&v8->aibeta);
        v11 = (const unsigned int *)(v3 + 48);
        v12 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
        if ( v12 != 0 && v12 <= 3 )
        {
          LOBYTE(v7) = v12 != 0;
          __asan_report_store4(v3 + 48, v7);
        }
        *(_DWORD *)(v3 + 48) = HashValue;
        std::unordered_map<unsigned int,int>::emplace<unsigned int const&,int>(
          &this->monster_config_ai_hash_value_map_,
          monster_id,
          (int *)(v3 + 48),
          v11,
          v10);
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        __for_range_0 = &std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_monster_ptr)->initial_poses;
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 128, monster_id);
        *(std::unordered_map<std::string,data::ConfigMonsterInitialPose>::iterator *)(v3 + 128) = std::unordered_map<std::string,data::ConfigMonsterInitialPose>::begin(__for_range_0);
        *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 160, monster_id);
        *(std::unordered_map<std::string,data::ConfigMonsterInitialPose>::iterator *)(v3 + 160) = std::unordered_map<std::string,data::ConfigMonsterInitialPose>::end(__for_range_0);
        while ( 1 )
        {
          if ( !std::__detail::operator!=<std::pair<std::string const,data::ConfigMonsterInitialPose>,true>(
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigMonsterInitialPose>,true> *)(v3 + 128),
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigMonsterInitialPose>,true> *)(v3 + 160)) )
          {
            v19 = 1;
            goto LABEL_28;
          }
          v28 = std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigMonsterInitialPose>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigMonsterInitialPose>,false,true> *const)(v3 + 128));
          std::get<0ul,std::string const,data::ConfigMonsterInitialPose>(v28);
          config_pose = (std::tuple_element<1,const std::pair<const std::string,data::ConfigMonsterInitialPose> >::type *)std::get<1ul,std::string const,data::ConfigMonsterInitialPose>(v28);
          v13 = std::map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                  &this->monster_valid_pose_id_set_map_,
                  monster_id);
          v14 = std::unordered_set<unsigned int>::emplace<int const&>(
                  v13,
                  &config_pose->initial_pose_id,
                  (const int *)v13);
          if ( !v14.second )
            break;
          std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigMonsterInitialPose>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigMonsterInitialPose>,false,true> *const)(v3 + 128));
        }
        *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewriteMonsterConfig",
          2812);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v15,
                (const char (*)[19])"duplicate pose_id:");
        v17 = common::milog::MiLogStream::operator<<<int,(int *)0>(v16, &config_pose->initial_pose_id);
        v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" monster_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, monster_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v19 = 0;
LABEL_28:
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
        if ( v19 != 1 )
        {
          v20 = 0;
          goto LABEL_32;
        }
      }
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false> *const)(v3 + 64));
  }
  v20 = 1;
LABEL_32:
  if ( v20 == 1 )
    v2 = 0;
  result = v2;
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2823: range 000000000F276604-000000000F277B18
int32_t __cdecl JsonConfigMgr::rewriteClimateAreaConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  unsigned int first; // ecx
  char v8; // al
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // eax
  char *v13; // rsi
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  _BOOL4 v16; // r15d
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rax
  const data::Point2DList *p_points; // r8
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  _BOOL4 v24; // r15d
  InteriorCheckablePolygon *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  _BOOL4 v28; // r15d
  unsigned __int64 v29; // rax
  Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *v30; // rax
  Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *v31; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  int v37; // r15d
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  unsigned __int64 v40; // rax
  unsigned __int64 v41; // rax
  unsigned __int64 v42; // rax
  int v43; // edx
  int v44; // eax
  int32_t result; // eax
  int32_t ret; // [rsp+24h] [rbp-45Ch]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference scene_json_config_pair; // [rsp+38h] [rbp-448h]
  std::unordered_map<unsigned int,SceneScriptConfig> *scene_script_config_map; // [rsp+48h] [rbp-438h]
  SceneScriptConfig *scene_script_config; // [rsp+50h] [rbp-430h]
  std::unordered_map<unsigned int,data::ConfigClimateArea> *__for_range_0; // [rsp+58h] [rbp-428h]
  data::ConfigClimateArea *config_climate_area; // [rsp+68h] [rbp-418h]
  char v53[1040]; // [rsp+70h] [rbp-410h] BYREF

  v3 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(992LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "19 48 4 13 scene_id:2833 64 8 16 __for_begin:2831 96 8 14 __for_end:2831 128 8 15 scene_iter:283"
                        "7 160 8 9 <unknown> 192 8 16 __for_begin:2854 224 8 14 __for_end:2854 256 16 13 mesh_ptr:2847 28"
                        "8 16 16 polygon_ptr:2871 320 24 21 add_grid_to_mesh:2878 384 32 9 <unknown> 448 32 9 <unknown> 5"
                        "12 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 83"
                        "2 48 21 border_coord_set:2860 912 48 20 inner_coord_set:2861";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::rewriteClimateAreaConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -219021312;
  v5[536862729] = -219021312;
  v5[536862730] = -234881024;
  v5[536862731] = -218959118;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -218959118;
  v5[536862743] = -218959118;
  v5[536862745] = -218959118;
  v5[536862747] = -219021312;
  v5[536862748] = 62194;
  v5[536862750] = -202116109;
  if ( !HK4EDesignConfig::isCreateStaticMesh(config) )
  {
    if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 384, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 384),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "rewriteClimateAreaConfig",
      2826);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)(v3 + 384),
      (const char (*)[31])"skip rewriteClimateAreaConfig!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
    v2 = 0;
  }
  else
  {
    ret = 0;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 64, config);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, config);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
    while ( 1 )
    {
      v6 = (char *)(v3 + 96);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 64),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 96)) )
        break;
      scene_json_config_pair = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 64));
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)scene_json_config_pair >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)scene_json_config_pair >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(scene_json_config_pair);
      }
      first = scene_json_config_pair->first;
      v8 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
      LOBYTE(v6) = v8 != 0;
      if ( v8 != 0 && v8 <= 3 )
        __asan_report_store4(v3 + 48, v6);
      *(_DWORD *)(v3 + 48) = first;
      scene_script_config_map = &config->lua_config_mgr.scene_script_config_map;
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 128, v6);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v3 + 128) = std::unordered_map<unsigned int,SceneScriptConfig>::find(
                                                                                      scene_script_config_map,
                                                                                      (const std::unordered_map<unsigned int,SceneScriptConfig>::key_type *)(v3 + 48));
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 160, v3 + 48);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v3 + 160) = std::unordered_map<unsigned int,SceneScriptConfig>::end(scene_script_config_map);
      v9 = std::__detail::operator==<std::pair<unsigned int const,SceneScriptConfig>,false>(
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v3 + 128),
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v3 + 160));
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( v9 )
      {
        *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewriteClimateAreaConfig",
          2840);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 448),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v11 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                v10,
                (const char (*)[62])"scene_json_config not found in scene_script_config, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
        *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
        v12 = 0;
      }
      else
      {
        scene_script_config = &std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false> *const)(v3 + 128))->second;
        *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        SceneScriptConfig::getStaticGroupMeshPtr(
          (const SceneScriptConfig *const)(v3 + 256),
          (data::VisionLevelType)scene_script_config);
        v13 = (char *)(v3 + 256);
        if ( std::operator==<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>(
               0LL,
               (const std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *)(v3 + 256)) )
        {
          *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 32 + 63) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteClimateAreaConfig",
            2850);
          v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v15 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  v14,
                  (const char (*)[28])"mesh_ptr is null, scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
          *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v16 = 0;
        }
        else
        {
          __for_range_0 = &scene_json_config_pair->second.config_climate_area_map;
          *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 192, v13);
          *(std::unordered_map<unsigned int,data::ConfigClimateArea>::iterator *)(v3 + 192) = std::unordered_map<unsigned int,data::ConfigClimateArea>::begin(__for_range_0);
          *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 224, v13);
          *(std::unordered_map<unsigned int,data::ConfigClimateArea>::iterator *)(v3 + 224) = std::unordered_map<unsigned int,data::ConfigClimateArea>::end(__for_range_0);
          while ( std::__detail::operator!=<std::pair<unsigned int const,data::ConfigClimateArea>,false>(
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)(v3 + 192),
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)(v3 + 224)) )
          {
            config_climate_area = &std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false> *const)(v3 + 192))->second;
            v17 = ((v3 + 832) >> 3) + 2147450880;
            *(_DWORD *)v17 = 0;
            *(_WORD *)(v17 + 4) = 0;
            std::set<Coordinate>::set((std::set<Coordinate> *const)(v3 + 832));
            v18 = ((v3 + 912) >> 3) + 2147450880;
            *(_DWORD *)v18 = 0;
            *(_WORD *)(v18 + 4) = 0;
            std::set<Coordinate>::set((std::set<Coordinate> *const)(v3 + 912));
            p_points = &config_climate_area->points;
            if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v3 + 48);
            if ( (unsigned int)JsonConfigMgr::calcCoveredCoordinateByPolygon(
                                 this,
                                 (__int64)config,
                                 *(_DWORD *)(v3 + 48),
                                 VISION_LEVEL_NORMAL,
                                 p_points,
                                 (std::set<Coordinate> *)(v3 + 832),
                                 (std::set<Coordinate> *)(v3 + 912)) )
            {
              *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 32 + 127) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 576, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 576),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "rewriteClimateAreaConfig",
                2866);
              v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 576),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v21 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      v20,
                      (const char (*)[47])"calcCoveredCoordinateByPolygon fail, scene_id:");
              v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v21,
                      (const unsigned int *)(v3 + 48));
              v23 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                      v22,
                      (const char (*)[18])" climate_area_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &config_climate_area->area_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
              *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v24 = 0;
            }
            else
            {
              *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              common::tools::perf::make_shared<InteriorCheckablePolygon>();
              v25 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
              if ( InteriorCheckablePolygon::initByPointVec(v25, &config_climate_area->points) )
              {
                *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 640, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 640),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "rewriteClimateAreaConfig",
                  2874);
                v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 640),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v27 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                        v26,
                        (const char (*)[38])"initByPointVec fail, climate_area_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  &config_climate_area->area_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
                *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v28 = 0;
              }
              else
              {
                v29 = ((v3 + 320) >> 3) + 2147450880;
                *(_WORD *)v29 = 0;
                *(_BYTE *)(v29 + 2) = 0;
                if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 320, &config_climate_area->points);
                *(_QWORD *)(v3 + 320) = config_climate_area;
                std::shared_ptr<InteriorCheckablePolygon>::shared_ptr(
                  (std::shared_ptr<InteriorCheckablePolygon> *const)(v3 + 328),
                  (const std::shared_ptr<InteriorCheckablePolygon> *)(v3 + 288));
                v30 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
                if ( JsonConfigMgr::rewriteClimateAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
                       (const JsonConfigMgr::rewriteClimateAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v3 + 320),
                       (const std::set<Coordinate> *)(v3 + 832),
                       v30,
                       1)
                  || (v31 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256)),
                      JsonConfigMgr::rewriteClimateAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
                        (const JsonConfigMgr::rewriteClimateAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v3 + 320),
                        (const std::set<Coordinate> *)(v3 + 912),
                        v31,
                        0)) )
                {
                  *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 704) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 704, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 704),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "rewriteClimateAreaConfig",
                    2905);
                  v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 704),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v34 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                          v33,
                          (const char (*)[33])"add_grid_to_mesh fail, scene_id:");
                  v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v34,
                          (const unsigned int *)(v3 + 48));
                  v36 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                          v35,
                          (const char (*)[18])" climate_area_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v36,
                    &config_climate_area->area_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 704));
                  *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v37 = 0;
                }
                else
                {
                  *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 768) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 32 + 63) & 7) >= *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 768, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 768),
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/json_config_mgr.cpp",
                    "rewriteClimateAreaConfig",
                    2910);
                  v38 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                          (common::milog::MiLogStream *const)(v3 + 768),
                          (const char (*)[22])"rewrite climate_area:");
                  v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v38,
                          &config_climate_area->area_id);
                  common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v39, (const char (*)[6])" succ");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 768));
                  *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = -117901064;
                  v37 = 1;
                }
                JsonConfigMgr::rewriteClimateAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::~Mesh((JsonConfigMgr::rewriteClimateAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v3 + 320));
                v28 = v37 == 1;
              }
              std::shared_ptr<InteriorCheckablePolygon>::~shared_ptr((std::shared_ptr<InteriorCheckablePolygon> *const)(v3 + 288));
              v24 = v28;
            }
            std::set<Coordinate>::~set((std::set<Coordinate> *const)(v3 + 912));
            std::set<Coordinate>::~set((std::set<Coordinate> *const)(v3 + 832));
            v40 = ((v3 + 832) >> 3) + 2147450880;
            *(_DWORD *)v40 = -117901064;
            *(_WORD *)(v40 + 4) = -1800;
            v41 = ((v3 + 912) >> 3) + 2147450880;
            *(_DWORD *)v41 = -117901064;
            *(_WORD *)(v41 + 4) = -1800;
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -1800;
            v42 = ((v3 + 320) >> 3) + 2147450880;
            *(_WORD *)v42 = -1800;
            *(_BYTE *)(v42 + 2) = -8;
            if ( !v24 )
            {
              v43 = 0;
              goto LABEL_69;
            }
            std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false> *const)(v3 + 192));
          }
          v43 = 1;
LABEL_69:
          *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
          v16 = v43 == 1;
        }
        std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>::~shared_ptr((std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *const)(v3 + 256));
        if ( v16 )
          v12 = 2;
        else
          v12 = 1;
      }
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -1800;
      if ( v12 && v12 != 2 )
      {
        v44 = 0;
        goto LABEL_78;
      }
      std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 64));
    }
    v44 = 1;
LABEL_78:
    if ( v44 == 1 )
      v2 = ret;
  }
  result = v2;
  if ( v53 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF806C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8074) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8078) = -168430091;
  }
  return result;
};

// Line 2879: range 000000000F276078-000000000F2765E2
int32_t __cdecl JsonConfigMgr::rewriteClimateAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
        const JsonConfigMgr::rewriteClimateAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const __closure,
        const std::set<Coordinate> *coord_set,
        Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *mesh,
        bool is_border)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t *p_y; // rax
  int32_t y; // esi
  __int64 v9; // rsi
  const data::ConfigClimateArea *config_climate_area; // rax
  uint32_t area_id; // ecx
  char v12; // al
  const data::ConfigClimateArea *v13; // rax
  char v14; // dl
  const data::ConfigClimateArea *v15; // rdx
  char v16; // cl
  std::vector<ClimateGridConfig>::value_type *v17; // rax
  int32_t result; // eax
  std::_Rb_tree_const_iterator<Coordinate>::reference coord; // [rsp+30h] [rbp-E0h]
  SceneGridConfig *scene_grid_config_ptr; // [rsp+38h] [rbp-D8h]
  char v23[208]; // [rsp+40h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 8 16 __for_begin:2881 64 8 14 __for_end:2881 96 32 24 climate_grid_config:2889";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::rewriteClimateAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -218959360;
  v6[536862724] = -202116109;
  if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 32, coord_set);
  *(std::set<Coordinate>::iterator *)(v4 + 32) = std::set<Coordinate>::begin(coord_set);
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, coord_set);
  *(std::set<Coordinate>::iterator *)(v4 + 64) = std::set<Coordinate>::end(coord_set);
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v4 + 32),
            (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v4 + 64)) )
  {
    coord = std::_Rb_tree_const_iterator<Coordinate>::operator*((const std::_Rb_tree_const_iterator<Coordinate> *const)(v4 + 32));
    p_y = &coord->y;
    if ( *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_y & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_y);
    }
    y = coord->y;
    if ( *(_BYTE *)(((unsigned __int64)coord >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)coord & 7) + 3) >= *(_BYTE *)(((unsigned __int64)coord >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(coord);
    }
    scene_grid_config_ptr = Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>::getGrid(mesh, coord->x, y);
    if ( scene_grid_config_ptr )
    {
      *(_DWORD *)(((v4 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 96, 32LL);
      }
      *(_QWORD *)(v4 + 96) = 0LL;
      *(_QWORD *)(v4 + 104) = 0LL;
      *(_QWORD *)(v4 + 112) = 0LL;
      *(_QWORD *)(v4 + 120) = 0LL;
      v9 = (((_BYTE)v4 + 100) & 7u) + 3;
      if ( *(_BYTE *)(((v4 + 100) >> 3) + 0x7FFF8000) != 0
        && (char)(((v4 + 100) & 7) + 3) >= *(_BYTE *)(((v4 + 100) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v4 + 100, v9);
      }
      *(_DWORD *)(v4 + 100) = 0x800000;
      if ( *(_BYTE *)(((v4 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v4 + 104, v9);
      *(_DWORD *)(v4 + 104) = 2139095039;
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      config_climate_area = __closure->__config_climate_area;
      if ( *(_BYTE *)(((unsigned __int64)__closure->__config_climate_area >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)__closure->__config_climate_area >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(__closure->__config_climate_area);
      }
      area_id = config_climate_area->area_id;
      v12 = *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000);
      if ( v12 != 0 && v12 <= 3 )
      {
        LOBYTE(v9) = v12 != 0;
        __asan_report_store4(v4 + 96, v9);
      }
      *(_DWORD *)(v4 + 96) = area_id;
      v13 = __closure->__config_climate_area;
      v14 = *(_BYTE *)(((unsigned __int64)&__closure->__config_climate_area->bottom >> 3) + 0x7FFF8000);
      if ( v14 != 0 && v14 <= 3 )
        __asan_report_load4(&__closure->__config_climate_area->bottom);
      *(float *)(v4 + 100) = v13->bottom;
      v15 = __closure->__config_climate_area;
      v16 = *(_BYTE *)(((unsigned __int64)&__closure->__config_climate_area->top >> 3) + 0x7FFF8000);
      if ( v16 != 0 && (char)(((LOBYTE(__closure->__config_climate_area) + 12) & 7) + 3) >= v16 )
        __asan_report_load4(&__closure->__config_climate_area->top);
      *(float *)(v4 + 104) = v15->top;
      if ( is_border )
        std::shared_ptr<InteriorCheckablePolygon>::operator=(
          (std::shared_ptr<InteriorCheckablePolygon> *const)(v4 + 112),
          &__closure->__polygon_ptr);
      v17 = std::move<ClimateGridConfig &>((ClimateGridConfig *)(v4 + 96));
      std::vector<ClimateGridConfig>::push_back(&scene_grid_config_ptr->climate_grid_vec, v17);
      ClimateGridConfig::~ClimateGridConfig((ClimateGridConfig *const)(v4 + 96));
    }
    *(_DWORD *)(((v4 + 96) >> 3) + 0x7FFF8000) = -117901064;
    std::_Rb_tree_const_iterator<Coordinate>::operator++((std::_Rb_tree_const_iterator<Coordinate> *const)(v4 + 32));
  }
  result = 0;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2879: range 000000000F2765E4-000000000F276602
void __cdecl JsonConfigMgr::rewriteClimateAreaConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::~Mesh(
        JsonConfigMgr::rewriteClimateAreaConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const this)
{
  std::shared_ptr<InteriorCheckablePolygon>::~shared_ptr(&this->__polygon_ptr);
};

// Line 2919: range 000000000F27821C-000000000F279729
int32_t __cdecl JsonConfigMgr::rewritePolygonConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t result; // eax
  bool v6; // al
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  char *v9; // rsi
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  char *v12; // rsi
  unsigned int first; // ecx
  char v14; // al
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rax
  const data::Point2DList *p_points; // r8
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  InteriorCheckablePolygon *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  unsigned __int64 v27; // rax
  Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *v28; // rax
  Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *v29; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  unsigned __int64 v37; // rax
  unsigned __int64 v38; // rax
  unsigned __int64 v39; // rax
  int32_t ret; // [rsp+10h] [rbp-460h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference v42; // [rsp+20h] [rbp-450h]
  std::tuple_element<0,std::pair<unsigned int const,SceneJsonConfig> >::type *scene_id; // [rsp+28h] [rbp-448h]
  std::tuple_element<1,const std::pair<unsigned int const,SceneJsonConfig> >::type *scene_json_config; // [rsp+30h] [rbp-440h]
  std::unordered_map<unsigned int,SceneScriptConfig> *scene_script_config_map; // [rsp+38h] [rbp-438h]
  SceneScriptConfig *scene_script_config; // [rsp+40h] [rbp-430h]
  const std::unordered_map<unsigned int,data::ConfigCommonPolygon> *__for_range_0; // [rsp+48h] [rbp-428h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false>::reference pr; // [rsp+50h] [rbp-420h]
  char v49[1040]; // [rsp+60h] [rbp-410h] BYREF

  v2 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(992LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 48 4 15 polygon_id:2949 64 8 16 __for_begin:2927 96 8 14 __for_end:2927 128 8 15 scene_iter:2"
                        "930 160 8 9 <unknown> 192 8 16 __for_begin:2947 224 8 14 __for_end:2947 256 16 13 mesh_ptr:2939 "
                        "288 16 16 polygon_ptr:2964 320 24 21 add_grid_to_mesh:2972 384 32 9 <unknown> 448 32 9 <unknown>"
                        " 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> "
                        "832 48 21 border_coord_set:2953 912 48 20 inner_coord_set:2954";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::rewritePolygonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -234881024;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862750] = -202116109;
  if ( !HK4EDesignConfig::isCreateStaticMesh(config) )
  {
    if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 384, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 384),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "rewritePolygonConfig",
      2922);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      (common::milog::MiLogStream *const)(v2 + 384),
      (const char (*)[27])"skip rewritePolygonConfig!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
    result = 0;
  }
  else
  {
    ret = 0;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, config);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, config);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
    while ( std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 64),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 96)) )
    {
      v42 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 64));
      scene_id = std::get<0ul,unsigned int const,SceneJsonConfig>(v42);
      scene_json_config = (std::tuple_element<1,const std::pair<unsigned int const,SceneJsonConfig> >::type *)std::get<1ul,unsigned int const,SceneJsonConfig>(v42);
      scene_script_config_map = &config->lua_config_mgr.scene_script_config_map;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 128, v2 + 96);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v2 + 128) = std::unordered_map<unsigned int,SceneScriptConfig>::find(
                                                                                      scene_script_config_map,
                                                                                      scene_id);
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 160, scene_id);
      *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v2 + 160) = std::unordered_map<unsigned int,SceneScriptConfig>::end(scene_script_config_map);
      v6 = std::__detail::operator==<std::pair<unsigned int const,SceneScriptConfig>,false>(
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v2 + 128),
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v2 + 160));
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( v6 )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewritePolygonConfig",
          2933);
        v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 448),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v8 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
               v7,
               (const char (*)[62])"scene_json_config not found in scene_script_config, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, scene_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        scene_script_config = &std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false> *const)(v2 + 128))->second;
        *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        SceneScriptConfig::getStaticGroupMeshPtr(
          (const SceneScriptConfig *const)(v2 + 256),
          (data::VisionLevelType)scene_script_config);
        v9 = (char *)(v2 + 256);
        if ( std::operator==<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>(
               0LL,
               (const std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *)(v2 + 256)) )
        {
          *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewritePolygonConfig",
            2942);
          v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v11 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  v10,
                  (const char (*)[28])"mesh_ptr is null, scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, scene_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
          *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          __for_range_0 = &scene_json_config->config_common_polygon_map;
          *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 192, v9);
          *(std::unordered_map<unsigned int,data::ConfigCommonPolygon>::const_iterator *)(v2 + 192) = std::unordered_map<unsigned int,data::ConfigCommonPolygon>::begin(__for_range_0);
          *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 224, v9);
          *(std::unordered_map<unsigned int,data::ConfigCommonPolygon>::const_iterator *)(v2 + 224) = std::unordered_map<unsigned int,data::ConfigCommonPolygon>::end(__for_range_0);
          while ( 1 )
          {
            v12 = (char *)(v2 + 224);
            if ( !std::__detail::operator!=<std::pair<unsigned int const,data::ConfigCommonPolygon>,false>(
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigCommonPolygon>,false> *)(v2 + 192),
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigCommonPolygon>,false> *)(v2 + 224)) )
              break;
            pr = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false> *const)(v2 + 192));
            *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)pr >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)pr >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(pr);
            }
            first = pr->first;
            v14 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
            if ( v14 != 0 && v14 <= 3 )
            {
              LOBYTE(v12) = v14 != 0;
              __asan_report_store4(v2 + 48, v12);
            }
            *(_DWORD *)(v2 + 48) = first;
            v15 = ((v2 + 832) >> 3) + 2147450880;
            *(_DWORD *)v15 = 0;
            *(_WORD *)(v15 + 4) = 0;
            std::set<Coordinate>::set((std::set<Coordinate> *const)(v2 + 832));
            v16 = ((v2 + 912) >> 3) + 2147450880;
            *(_DWORD *)v16 = 0;
            *(_WORD *)(v16 + 4) = 0;
            std::set<Coordinate>::set((std::set<Coordinate> *const)(v2 + 912));
            p_points = &pr->second.points;
            if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(scene_id);
            }
            if ( (unsigned int)JsonConfigMgr::calcCoveredCoordinateByPolygon(
                                 this,
                                 (__int64)config,
                                 *scene_id,
                                 VISION_LEVEL_NORMAL,
                                 p_points,
                                 (std::set<Coordinate> *)(v2 + 832),
                                 (std::set<Coordinate> *)(v2 + 912)) )
            {
              *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 576, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 576),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "rewritePolygonConfig",
                2959);
              v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 576),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v19 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      v18,
                      (const char (*)[47])"calcCoveredCoordinateByPolygon fail, scene_id:");
              v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, scene_id);
              v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v20,
                      (const char (*)[13])" polygon_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v2 + 48));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
              *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
            }
            else
            {
              *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              common::tools::perf::make_shared<InteriorCheckablePolygon>();
              v22 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
              if ( InteriorCheckablePolygon::initByPointVec(v22, &pr->second.points) )
              {
                *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 640, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 640),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "rewritePolygonConfig",
                  2967);
                v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 640),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v24 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                        v23,
                        (const char (*)[31])"initByPointVec fail, scene_id:");
                v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, scene_id);
                v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                        v25,
                        (const char (*)[13])" polygon_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v26,
                  (const unsigned int *)(v2 + 48));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
                *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
              }
              else
              {
                v27 = ((v2 + 320) >> 3) + 2147450880;
                *(_WORD *)v27 = 0;
                *(_BYTE *)(v27 + 2) = 0;
                if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v2 + 320, &pr->second.points);
                *(_QWORD *)(v2 + 320) = &pr->second;
                std::shared_ptr<InteriorCheckablePolygon>::shared_ptr(
                  (std::shared_ptr<InteriorCheckablePolygon> *const)(v2 + 328),
                  (const std::shared_ptr<InteriorCheckablePolygon> *)(v2 + 288));
                v28 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 256));
                if ( JsonConfigMgr::rewritePolygonConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
                       (const JsonConfigMgr::rewritePolygonConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v2 + 320),
                       (const std::set<Coordinate> *)(v2 + 832),
                       v28,
                       1)
                  || (v29 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 256)),
                      JsonConfigMgr::rewritePolygonConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
                        (const JsonConfigMgr::rewritePolygonConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v2 + 320),
                        (const std::set<Coordinate> *)(v2 + 912),
                        v29,
                        0)) )
                {
                  *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 704, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 704),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "rewritePolygonConfig",
                    2999);
                  v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 704),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v32 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                          v31,
                          (const char (*)[33])"add_grid_to_mesh fail, scene_id:");
                  v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, scene_id);
                  v34 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                          v33,
                          (const char (*)[13])" polygon_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v34,
                    (const unsigned int *)(v2 + 48));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
                  *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
                }
                else
                {
                  *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 768, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 768),
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/json_config_mgr.cpp",
                    "rewritePolygonConfig",
                    3004);
                  v35 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                          (common::milog::MiLogStream *const)(v2 + 768),
                          (const char (*)[33])"rewritePolygonConfig polygon_id:");
                  v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v35,
                          (const unsigned int *)(v2 + 48));
                  common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v36, (const char (*)[6])" succ");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
                  *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
                }
                JsonConfigMgr::rewritePolygonConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::~Mesh((JsonConfigMgr::rewritePolygonConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const)(v2 + 320));
              }
              std::shared_ptr<InteriorCheckablePolygon>::~shared_ptr((std::shared_ptr<InteriorCheckablePolygon> *const)(v2 + 288));
            }
            std::set<Coordinate>::~set((std::set<Coordinate> *const)(v2 + 912));
            std::set<Coordinate>::~set((std::set<Coordinate> *const)(v2 + 832));
            *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
            v37 = ((v2 + 832) >> 3) + 2147450880;
            *(_DWORD *)v37 = -117901064;
            *(_WORD *)(v37 + 4) = -1800;
            v38 = ((v2 + 912) >> 3) + 2147450880;
            *(_DWORD *)v38 = -117901064;
            *(_WORD *)(v38 + 4) = -1800;
            *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -1800;
            v39 = ((v2 + 320) >> 3) + 2147450880;
            *(_WORD *)v39 = -1800;
            *(_BYTE *)(v39 + 2) = -8;
            std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false> *const)(v2 + 192));
          }
          *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
        }
        std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>::~shared_ptr((std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *const)(v2 + 256));
      }
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -1800;
      std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 64));
    }
    result = ret;
  }
  if ( v49 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = -168430091;
  }
  return result;
};

// Line 2973: range 000000000F277B1A-000000000F2781FB
int32_t __cdecl JsonConfigMgr::rewritePolygonConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator()(
        const JsonConfigMgr::rewritePolygonConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const __closure,
        const std::set<Coordinate> *coord_set,
        Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > *mesh,
        bool is_border)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t *p_y; // rax
  int32_t y; // esi
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  __int64 v12; // rsi
  const data::ConfigCommonPolygon *config_common_polygon; // rax
  uint32_t polygon_id; // ecx
  char v15; // al
  const data::ConfigCommonPolygon *v16; // rdx
  char v17; // cl
  const data::ConfigCommonPolygon *v18; // rax
  char v19; // dl
  std::vector<PolygonGridConfig>::value_type *v20; // rax
  int32_t result; // eax
  std::_Rb_tree_const_iterator<Coordinate>::reference coord; // [rsp+30h] [rbp-120h]
  SceneGridConfig *scene_grid_config_ptr; // [rsp+38h] [rbp-118h]
  char v26[272]; // [rsp+40h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 8 16 __for_begin:2975 64 8 14 __for_end:2975 96 32 9 <unknown> 160 32 24 polygon_grid_config:2983";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::rewritePolygonConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -218959360;
  v6[536862724] = -218959118;
  v6[536862726] = -202116109;
  if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 32, coord_set);
  *(std::set<Coordinate>::iterator *)(v4 + 32) = std::set<Coordinate>::begin(coord_set);
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, coord_set);
  *(std::set<Coordinate>::iterator *)(v4 + 64) = std::set<Coordinate>::end(coord_set);
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v4 + 32),
            (const std::_Rb_tree_const_iterator<Coordinate>::_Self *)(v4 + 64)) )
  {
    coord = std::_Rb_tree_const_iterator<Coordinate>::operator*((const std::_Rb_tree_const_iterator<Coordinate> *const)(v4 + 32));
    p_y = &coord->y;
    if ( *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_y & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_y);
    }
    y = coord->y;
    if ( *(_BYTE *)(((unsigned __int64)coord >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)coord & 7) + 3) >= *(_BYTE *)(((unsigned __int64)coord >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(coord);
    }
    scene_grid_config_ptr = Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>::getGrid(mesh, coord->x, y);
    if ( scene_grid_config_ptr )
    {
      *(_DWORD *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 160, 32LL);
      }
      *(_QWORD *)(v4 + 160) = 0LL;
      *(_QWORD *)(v4 + 168) = 0LL;
      *(_QWORD *)(v4 + 176) = 0LL;
      *(_QWORD *)(v4 + 184) = 0LL;
      v12 = (((_BYTE)v4 - 96 + 4) & 7u) + 3;
      if ( *(_BYTE *)(((v4 + 164) >> 3) + 0x7FFF8000) != 0
        && (char)(((v4 - 96 + 4) & 7) + 3) >= *(_BYTE *)(((v4 + 164) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v4 + 164, v12);
      }
      *(_DWORD *)(v4 + 164) = 0x800000;
      if ( *(_BYTE *)(((v4 + 168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v4 + 168, v12);
      *(_DWORD *)(v4 + 168) = 2139095039;
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      config_common_polygon = __closure->__config_common_polygon;
      if ( *(_BYTE *)(((unsigned __int64)__closure->__config_common_polygon >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)__closure->__config_common_polygon >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(__closure->__config_common_polygon);
      }
      polygon_id = config_common_polygon->polygon_id;
      v15 = *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000);
      if ( v15 != 0 && v15 <= 3 )
      {
        LOBYTE(v12) = v15 != 0;
        __asan_report_store4(v4 + 160, v12);
      }
      *(_DWORD *)(v4 + 160) = polygon_id;
      v16 = __closure->__config_common_polygon;
      v17 = *(_BYTE *)(((unsigned __int64)&__closure->__config_common_polygon->bottom >> 3) + 0x7FFF8000);
      if ( v17 != 0 && (char)(((LOBYTE(__closure->__config_common_polygon) + 36) & 7) + 3) >= v17 )
        __asan_report_load4(&__closure->__config_common_polygon->bottom);
      *(float *)(v4 + 164) = v16->bottom;
      v18 = __closure->__config_common_polygon;
      v19 = *(_BYTE *)(((unsigned __int64)&__closure->__config_common_polygon->top >> 3) + 0x7FFF8000);
      if ( v19 != 0 && v19 <= 3 )
        __asan_report_load4(&__closure->__config_common_polygon->top);
      *(float *)(v4 + 168) = v18->top;
      if ( is_border )
        std::shared_ptr<InteriorCheckablePolygon>::operator=(
          (std::shared_ptr<InteriorCheckablePolygon> *const)(v4 + 176),
          &__closure->__polygon_ptr);
      v20 = std::move<PolygonGridConfig &>((PolygonGridConfig *)(v4 + 160));
      std::vector<PolygonGridConfig>::push_back(&scene_grid_config_ptr->polygon_grid_vec, v20);
      PolygonGridConfig::~PolygonGridConfig((PolygonGridConfig *const)(v4 + 160));
    }
    else
    {
      *(_DWORD *)(((v4 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "operator()",
        2980);
      v9 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
             (common::milog::MiLogStream *const)(v4 + 96),
             (const char (*)[17])"invalid grid, x:");
      v10 = common::milog::MiLogStream::operator<<<int,(int *)0>(v9, (const int *)coord);
      v11 = common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v10, (const char (*)[4])" y:");
      common::milog::MiLogStream::operator<<<int,(int *)0>(v11, &coord->y);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 96));
      *(_DWORD *)(((v4 + 96) >> 3) + 0x7FFF8000) = -117901064;
    }
    *(_DWORD *)(((v4 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::_Rb_tree_const_iterator<Coordinate>::operator++((std::_Rb_tree_const_iterator<Coordinate> *const)(v4 + 32));
  }
  result = 0;
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2973: range 000000000F2781FC-000000000F27821A
void __cdecl JsonConfigMgr::rewritePolygonConfig(HK4EDesignConfig &)::{lambda(std::set<Coordinate> const&,Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>> &,bool)#1}::~Mesh(
        JsonConfigMgr::rewritePolygonConfig::<lambda(const std::set<Coordinate>&, Mesh<SceneGridConfig, MeshAllocator<SceneGridConfig> >&, bool)> *const this)
{
  std::shared_ptr<InteriorCheckablePolygon>::~shared_ptr(&this->__polygon_ptr);
};

// Line 3013: range 000000000F27972A-000000000F27A21E
int32_t __cdecl JsonConfigMgr::checkClimateAreaConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  data::JsonClimateType *p_climate_type; // rax
  data::UInt32List *p_trans_points; // rsi
  bool isTransClimate; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  __int64 v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  char *v18; // rsi
  unsigned int *v19; // rax
  int *v20; // rdx
  int v21; // ecx
  char v22; // al
  int v23; // ecx
  uint32_t v24; // edx
  bool v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+14h] [rbp-23Ch]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference v34; // [rsp+20h] [rbp-230h]
  std::tuple_element<0,std::pair<unsigned int const,SceneJsonConfig> >::type *scene_id; // [rsp+28h] [rbp-228h]
  std::unordered_map<unsigned int,data::ConfigClimateArea> *__for_range_0; // [rsp+38h] [rbp-218h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::reference v37; // [rsp+40h] [rbp-210h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigClimateArea> >::type *config_climate_area; // [rsp+50h] [rbp-200h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+58h] [rbp-1F8h]
  char v40[496]; // [rsp+60h] [rbp-1F0h] BYREF

  v2 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(448LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 48 4 13 point_id:3025 64 8 16 __for_begin:3015 96 8 14 __for_end:3015 128 8 16 __for_begin:30"
                        "17 160 8 14 __for_end:3017 192 8 9 <unknown> 224 8 16 __for_begin:3025 256 8 14 __for_end:3025 2"
                        "88 16 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkClimateAreaConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -219021312;
  v4[536862731] = -218959118;
  v4[536862733] = -202116109;
  ret = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 96)) )
      break;
    v34 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 64));
    scene_id = std::get<0ul,unsigned int const,SceneJsonConfig>(v34);
    __for_range_0 = &std::get<1ul,unsigned int const,SceneJsonConfig>(v34)->config_climate_area_map;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::unordered_map<unsigned int,data::ConfigClimateArea>::const_iterator *)(v2 + 128) = std::unordered_map<unsigned int,data::ConfigClimateArea>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::unordered_map<unsigned int,data::ConfigClimateArea>::const_iterator *)(v2 + 160) = std::unordered_map<unsigned int,data::ConfigClimateArea>::end(__for_range_0);
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::ConfigClimateArea>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)(v2 + 128),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)(v2 + 160)) )
    {
      v37 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false> *const)(v2 + 128));
      std::get<0ul,unsigned int const,data::ConfigClimateArea>(v37);
      config_climate_area = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigClimateArea> >::type *)std::get<1ul,unsigned int const,data::ConfigClimateArea>(v37);
      p_climate_type = &config_climate_area->climate_type;
      p_trans_points = (data::UInt32List *)((((_BYTE)config_climate_area + 4) & 7u) + 3);
      if ( *(_BYTE *)(((unsigned __int64)p_climate_type >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_climate_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_climate_type >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4(p_climate_type);
      }
      isTransClimate = JsonConfigMgr::isTransClimate(config_climate_area->climate_type);
      if ( isTransClimate != !std::vector<unsigned int>::empty(&config_climate_area->trans_points) )
      {
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkClimateAreaConfig",
          3021);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 320),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v10 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                v9,
                (const char (*)[51])"trans_points and climate_type not match! scene_id:");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, scene_id);
        v12 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v11,
                (const char (*)[18])" climate_area_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &config_climate_area->area_id);
        v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v13, (const char (*)[15])" climate_type:");
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((unsigned __int64)&config_climate_area->climate_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_climate_area + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_climate_area->climate_type >> 3)
                                                                            + 0x7FFF8000) )
        {
          __asan_report_load4(&config_climate_area->climate_type);
        }
        v15 = (__int64)data::enumValToStr(config_climate_area->climate_type);
        if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          v15 = __asan_report_store8(v2 + 192, (((_BYTE)config_climate_area + 4) & 7u) + 3);
        *(_QWORD *)(v2 + 192) = v15;
        v16 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v14, (const char *const *)(v2 + 192));
        v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v16, (const char (*)[15])" trans_points:");
        p_trans_points = &config_climate_area->trans_points;
        common::milog::MiLogStream::operator<<<unsigned int>(v17, &config_climate_area->trans_points);
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __for_range_1 = &config_climate_area->trans_points;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 224, p_trans_points);
      *(std::vector<unsigned int>::const_iterator *)(v2 + 224) = std::vector<unsigned int>::begin(__for_range_1);
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 256, p_trans_points);
      *(std::vector<unsigned int>::const_iterator *)(v2 + 256) = std::vector<unsigned int>::end(__for_range_1);
      while ( 1 )
      {
        v18 = (char *)(v2 + 256);
        if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 224),
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 256)) )
          break;
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
        v19 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 224));
        v20 = (int *)v19;
        if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v19);
        }
        v21 = *v20;
        v22 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
        if ( v22 != 0 && v22 <= 3 )
        {
          LOBYTE(v18) = v22 != 0;
          __asan_report_store4(v2 + 48, v18);
        }
        *(_DWORD *)(v2 + 48) = v21;
        *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
        v23 = *(_DWORD *)(v2 + 48);
        if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(scene_id);
        }
        v24 = *scene_id;
        if ( *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        JsonConfigMgr::findScenePoint((const JsonConfigMgr *const)(v2 + 288), this, v24, v23);
        v25 = std::operator==<data::ConfigScenePoint>(0LL, (const std::shared_ptr<data::ConfigScenePoint> *)(v2 + 288));
        std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v2 + 288));
        *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -1800;
        if ( v25 )
        {
          *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 384, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 384),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkClimateAreaConfig",
            3029);
          v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 384),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v27 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                  v26,
                  (const char (*)[38])"ConfigScenePoint not found! scene_id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, scene_id);
          v29 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v28,
                  (const char (*)[18])" climate_area_id:");
          v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v29,
                  &config_climate_area->area_id);
          v31 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v30, (const char (*)[11])" point_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
          *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 224));
      }
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false> *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 64));
  }
  result = ret;
  if ( v40 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3040: range 000000000F27A220-000000000F27AC49
int32_t __cdecl JsonConfigMgr::checkHomeFishpondConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  uint32_t max_fish_count; // ecx
  char v7; // al
  __int64 v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  HomeWorldExcelConfigMgr *p_home_config_mgr; // rcx
  std::tuple_element<0,std::pair<unsigned int const,data::ConfigHomeFishpond> >::type *v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  data::Vector *p_rotation; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+18h] [rbp-1D8h]
  data::ConfigHomeFishpondSet *__for_range; // [rsp+20h] [rbp-1D0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishpond>,false,false>::reference v28; // [rsp+28h] [rbp-1C8h]
  std::tuple_element<0,std::pair<unsigned int const,data::ConfigHomeFishpond> >::type *furniture_id; // [rsp+30h] [rbp-1C0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigHomeFishpond> >::type *fishpond_json_config; // [rsp+38h] [rbp-1B8h]
  const std::vector<data::ConfigHomeCommonPos> *__for_range_0; // [rsp+40h] [rbp-1B0h]
  const data::ConfigHomeCommonPos *fish_born_pos; // [rsp+48h] [rbp-1A8h]
  char v33[416]; // [rsp+50h] [rbp-1A0h] BYREF

  v2 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 32 4 19 max_fish_count:3044 48 4 24 fish_born_pos_count:3045 64 8 16 __for_begin:3042 96 8 14 "
                        "__for_end:3042 128 8 16 __for_begin:3061 160 8 14 __for_end:3061 192 32 9 <unknown> 256 32 9 <un"
                        "known> 320 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkHomeFishpondConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -202116109;
  ret = 0;
  __for_range = &this->fishpond_json_config_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishpond>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::ConfigHomeFishpond>::begin(&__for_range->fishpond_map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishpond>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::ConfigHomeFishpond>::end(&__for_range->fishpond_map);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::ConfigHomeFishpond>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishpond>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishpond>,false> *)(v2 + 96)) )
      break;
    v28 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishpond>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishpond>,false,false> *const)(v2 + 64));
    furniture_id = std::get<0ul,unsigned int const,data::ConfigHomeFishpond>(v28);
    fishpond_json_config = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigHomeFishpond> >::type *)std::get<1ul,unsigned int const,data::ConfigHomeFishpond>(v28);
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)fishpond_json_config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)fishpond_json_config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(fishpond_json_config);
    }
    max_fish_count = fishpond_json_config->max_fish_count;
    v7 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(v2 + 32, v5);
    }
    *(_DWORD *)(v2 + 32) = max_fish_count;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
    v8 = (unsigned int)std::vector<data::ConfigHomeCommonPos>::size(&fishpond_json_config->fish_born_pos_list);
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 48, v8);
    *(_DWORD *)(v2 + 48) = v8;
    if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 32);
    if ( *(_DWORD *)(v2 + 32) > *(_DWORD *)(v2 + 48) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeFishpondConfig",
        3048);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 192),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v9, (const char (*)[16])"home fishpond: ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, furniture_id);
      v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v11, (const char (*)[17])" max fish count:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 32));
      v14 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v13,
              (const char (*)[34])" bigger than fish bron pos count:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    p_home_config_mgr = &config->txt_config_mgr.home_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)furniture_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)furniture_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)furniture_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(furniture_id);
    }
    v16 = (std::tuple_element<0,std::pair<unsigned int const,data::ConfigHomeFishpond> >::type *)*furniture_id;
    if ( HomeWorldExcelConfigMgr::getFurnitureSpeicalType(p_home_config_mgr, (uint32_t)v16) != Fishpond )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeFishpondConfig",
        3056);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 256),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v17, (const char (*)[56])byte_1A522FC0);
      v16 = furniture_id;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, furniture_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __for_range_0 = &fishpond_json_config->fish_born_pos_list;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v16);
    *(std::vector<data::ConfigHomeCommonPos>::const_iterator *)(v2 + 128) = std::vector<data::ConfigHomeCommonPos>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v16);
    *(std::vector<data::ConfigHomeCommonPos>::const_iterator *)(v2 + 160) = std::vector<data::ConfigHomeCommonPos>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::ConfigHomeCommonPos const*,std::vector<data::ConfigHomeCommonPos>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *)(v2 + 160)) )
    {
      fish_born_pos = __gnu_cxx::__normal_iterator<data::ConfigHomeCommonPos const*,std::vector<data::ConfigHomeCommonPos>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *const)(v2 + 128));
      p_rotation = &fish_born_pos->rotation;
      if ( *(_BYTE *)(((unsigned __int64)p_rotation >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_rotation & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_rotation >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_rotation);
      }
      if ( fish_born_pos->rotation.x != 0.0 )
        goto LABEL_40;
      if ( *(_BYTE *)(((unsigned __int64)&fish_born_pos->rotation.z >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)fish_born_pos + 24) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&fish_born_pos->rotation.z >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&fish_born_pos->rotation.z);
      }
      if ( fish_born_pos->rotation.z != 0.0 )
      {
LABEL_40:
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkHomeFishpondConfig",
          3065);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 320),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(v20, (const char (*)[64])byte_1A523020);
        v22 = common::milog::MiLogStream::operator<<<float,(float *)0>(v21, &fish_born_pos->rotation.x);
        v23 = common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v22, (const char (*)[4])" z:");
        common::milog::MiLogStream::operator<<<float,(float *)0>(v23, &fish_born_pos->rotation.z);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeCommonPos const*,std::vector<data::ConfigHomeCommonPos>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishpond>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishpond>,false,false> *const)(v2 + 64));
  }
  result = ret;
  if ( v33 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3075: range 000000000F27AC4A-000000000F27C261
int32_t __cdecl JsonConfigMgr::checkHomeFishtankConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  HomeWorldExcelConfigMgr *p_home_config_mgr; // rcx
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  uint32_t max_fish_count; // ecx
  char v11; // al
  __int64 v12; // rsi
  unsigned int v13; // ecx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const char *v20; // rsi
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  char *v24; // rsi
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  std::vector<data::ConfigHomeCommonPos>::const_reference v28; // rdx
  float *p_y; // rax
  std::vector<data::ConfigHomeCommonPos>::const_reference v30; // rdx
  float *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  common::milog::MiLogStream *v34; // rax
  char *v35; // rsi
  data::Vector *p_rotation; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  double v41; // xmm0_8
  float v42; // xmm1_4
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  float y; // [rsp+Ch] [rbp-404h]
  int32_t ret; // [rsp+24h] [rbp-3ECh]
  uint32_t i; // [rsp+28h] [rbp-3E8h]
  data::ConfigHomeFishtankSet *__for_range; // [rsp+30h] [rbp-3E0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishtank>,false,false>::reference v51; // [rsp+38h] [rbp-3D8h]
  std::tuple_element<0,std::pair<unsigned int const,data::ConfigHomeFishtank> >::type *furniture_id; // [rsp+40h] [rbp-3D0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigHomeFishtank> >::type *fishtank_json_config; // [rsp+48h] [rbp-3C8h]
  const std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>> *__for_range_0; // [rsp+50h] [rbp-3C0h]
  const std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>> *__for_range_1; // [rsp+58h] [rbp-3B8h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false,false>::reference v56; // [rsp+60h] [rbp-3B0h]
  const std::tuple_element<1,std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> > >::type *__for_range_2; // [rsp+78h] [rbp-398h]
  const data::ConfigHomeCommonPos *born_pos; // [rsp+80h] [rbp-390h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false,false>::reference v59; // [rsp+88h] [rbp-388h]
  std::tuple_element<0,std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> > >::type *height; // [rsp+90h] [rbp-380h]
  std::tuple_element<1,const std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> > >::type *born_pos_list; // [rsp+98h] [rbp-378h]
  char v62[880]; // [rsp+A0h] [rbp-370h] BYREF

  v2 = (unsigned __int64)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(832LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 32 4 19 max_fish_count:3095 48 4 24 fish_born_pos_count:3096 64 8 16 __for_begin:3077 96 8 14"
                        " __for_end:3077 128 8 16 __for_begin:3110 160 8 14 __for_end:3110 192 8 16 __for_begin:3129 224 "
                        "8 14 __for_end:3129 256 8 16 __for_begin:3131 288 8 14 __for_end:3131 320 32 9 <unknown> 384 32 "
                        "9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9"
                        " <unknown> 768 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkHomeFishtankConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -202116109;
  ret = 0;
  __for_range = &this->fishtank_json_config_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishtank>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::ConfigHomeFishtank>::begin(&__for_range->fishtank_map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishtank>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::ConfigHomeFishtank>::end(&__for_range->fishtank_map);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::ConfigHomeFishtank>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishtank>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishtank>,false> *)(v2 + 96)) )
  {
    v51 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishtank>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishtank>,false,false> *const)(v2 + 64));
    furniture_id = std::get<0ul,unsigned int const,data::ConfigHomeFishtank>(v51);
    fishtank_json_config = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigHomeFishtank> >::type *)std::get<1ul,unsigned int const,data::ConfigHomeFishtank>(v51);
    p_home_config_mgr = &config->txt_config_mgr.home_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)furniture_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)furniture_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)furniture_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(furniture_id);
    }
    v6 = (const char *)*furniture_id;
    if ( HomeWorldExcelConfigMgr::getFurnitureSpeicalType(p_home_config_mgr, (uint32_t)v6) != Fishtank )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeFishtankConfig",
        3083);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 320),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v7, (const char (*)[56])byte_1A523260);
      v6 = (const char *)furniture_id;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, furniture_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    if ( std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::empty(&fishtank_json_config->fish_born_pos_map) )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeFishtankConfig",
        3090);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 384),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v6 = byte_1A5232C0;
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v9, (const char (*)[31])byte_1A5232C0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)fishtank_json_config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)fishtank_json_config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(fishtank_json_config);
    }
    max_fish_count = fishtank_json_config->max_fish_count;
    v11 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v11 != 0 && v11 <= 3 )
    {
      LOBYTE(v6) = v11 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = max_fish_count;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
    v12 = (unsigned int)std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::size(&fishtank_json_config->fish_born_pos_map);
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 48, v12);
    *(_DWORD *)(v2 + 48) = v12;
    v13 = *(_DWORD *)(v2 + 48);
    if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 32);
    if ( v13 < *(_DWORD *)(v2 + 32) )
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeFishtankConfig",
        3099);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 448),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"home fishtank: ");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, furniture_id);
      v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v16, (const char (*)[17])" max fish count:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v2 + 32));
      v19 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v18,
              (const char (*)[34])" bigger than fish bron pos count:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    v20 = (const char *)((((_BYTE)fishtank_json_config + 4) & 7u) + 3);
    if ( *(_BYTE *)(((unsigned __int64)&fishtank_json_config->water_height >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)fishtank_json_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&fishtank_json_config->water_height >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(&fishtank_json_config->water_height);
    }
    if ( fishtank_json_config->water_height == 0.0 )
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 512, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 512),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeFishtankConfig",
        3105);
      v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 512),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v21, (const char (*)[16])"home fishtank: ");
      v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, furniture_id);
      v20 = ", water_height is zero.";
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
        v23,
        (const char (*)[24])", water_height is zero.");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __for_range_0 = &fishtank_json_config->fish_born_pos_map;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v20);
    *(std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::const_iterator *)(v2 + 128) = std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v20);
    *(std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::const_iterator *)(v2 + 160) = std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::end(__for_range_0);
    while ( 1 )
    {
      v24 = (char *)(v2 + 160);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false> *)(v2 + 128),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false> *)(v2 + 160)) )
        break;
      v59 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false,false> *const)(v2 + 128));
      height = std::get<0ul,unsigned int const,std::vector<data::ConfigHomeCommonPos>>(v59);
      born_pos_list = (std::tuple_element<1,const std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> > >::type *)std::get<1ul,unsigned int const,std::vector<data::ConfigHomeCommonPos>>(v59);
      if ( std::vector<data::ConfigHomeCommonPos>::empty(born_pos_list) )
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 576),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkHomeFishtankConfig",
          3114);
        v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 576),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v26 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                v25,
                (const char (*)[22])"home fishtank height[");
        v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, height);
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          v27,
          (const char (*)[27])"] don't have any born pos.");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      for ( i = 0; i < std::vector<data::ConfigHomeCommonPos>::size(born_pos_list) - 1; ++i )
      {
        v28 = std::vector<data::ConfigHomeCommonPos>::operator[](born_pos_list, i);
        p_y = &v28->position.y;
        if ( *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_y & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(p_y);
        }
        y = v28->position.y;
        v30 = std::vector<data::ConfigHomeCommonPos>::operator[](born_pos_list, i + 1);
        v31 = &v30->position.y;
        if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v31);
        }
        if ( y != v30->position.y )
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkHomeFishtankConfig",
            3122);
          v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v33 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v32,
                  (const char (*)[23])"home fishtank, height[");
          v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, height);
          common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v34,
            (const char (*)[21])"] don't have same y.");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false,false> *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &fishtank_json_config->fish_born_pos_map;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v24);
    *(std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::const_iterator *)(v2 + 192) = std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v24);
    *(std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::const_iterator *)(v2 + 224) = std::unordered_map<unsigned int,std::vector<data::ConfigHomeCommonPos>>::end(__for_range_1);
    while ( 1 )
    {
      v35 = (char *)(v2 + 224);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false> *)(v2 + 192),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false> *)(v2 + 224)) )
        break;
      v56 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false,false> *const)(v2 + 192));
      std::get<0ul,unsigned int const,std::vector<data::ConfigHomeCommonPos>>(v56);
      __for_range_2 = std::get<1ul,unsigned int const,std::vector<data::ConfigHomeCommonPos>>(v56);
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 256, v35);
      *(std::vector<data::ConfigHomeCommonPos>::const_iterator *)(v2 + 256) = std::vector<data::ConfigHomeCommonPos>::begin(__for_range_2);
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 288, v35);
      *(std::vector<data::ConfigHomeCommonPos>::const_iterator *)(v2 + 288) = std::vector<data::ConfigHomeCommonPos>::end(__for_range_2);
      while ( __gnu_cxx::operator!=<data::ConfigHomeCommonPos const*,std::vector<data::ConfigHomeCommonPos>>(
                (const __gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *)(v2 + 256),
                (const __gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *)(v2 + 288)) )
      {
        born_pos = __gnu_cxx::__normal_iterator<data::ConfigHomeCommonPos const*,std::vector<data::ConfigHomeCommonPos>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *const)(v2 + 256));
        p_rotation = &born_pos->rotation;
        if ( *(_BYTE *)(((unsigned __int64)p_rotation >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_rotation & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_rotation >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(p_rotation);
        }
        if ( born_pos->rotation.x != 0.0 )
          goto LABEL_78;
        if ( *(_BYTE *)(((unsigned __int64)&born_pos->rotation.z >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)born_pos + 24) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&born_pos->rotation.z >> 3)
                                                                  + 0x7FFF8000) )
        {
          __asan_report_load4(&born_pos->rotation.z);
        }
        if ( born_pos->rotation.z != 0.0 )
        {
LABEL_78:
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 704, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 704),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkHomeFishtankConfig",
            3135);
          v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 704),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v38 = common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(v37, (const char (*)[64])byte_1A523020);
          v39 = common::milog::MiLogStream::operator<<<float,(float *)0>(v38, &born_pos->rotation.x);
          v40 = common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v39, (const char (*)[4])" z:");
          common::milog::MiLogStream::operator<<<float,(float *)0>(v40, &born_pos->rotation.z);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        if ( *(_BYTE *)(((unsigned __int64)&fishtank_json_config->water_height >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)fishtank_json_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&fishtank_json_config->water_height >> 3)
                                                                             + 0x7FFF8000) )
        {
          __asan_report_load4(&fishtank_json_config->water_height);
        }
        *(float *)&v41 = fishtank_json_config->water_height;
        if ( *(_BYTE *)(((unsigned __int64)&born_pos->position.y >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)born_pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&born_pos->position.y >> 3)
                                                                 + 0x7FFF8000) )
        {
          v41 = __asan_report_load4(&born_pos->position.y);
        }
        v42 = *(float *)&v41 - born_pos->position.y;
        if ( *(_BYTE *)(((unsigned __int64)&fishtank_json_config->fish_min_height_limit >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&fishtank_json_config->fish_min_height_limit >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&fishtank_json_config->fish_min_height_limit);
        }
        if ( fishtank_json_config->fish_min_height_limit > v42 )
        {
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 768, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 768),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkHomeFishtankConfig",
            3141);
          v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 768),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v44 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(v43, (const char (*)[51])byte_1A523480);
          common::milog::MiLogStream::operator<<<float,(float *)0>(v44, &born_pos->position.y);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        __gnu_cxx::__normal_iterator<data::ConfigHomeCommonPos const*,std::vector<data::ConfigHomeCommonPos>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeCommonPos*,std::vector<data::ConfigHomeCommonPos> > *const)(v2 + 256));
      }
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::ConfigHomeCommonPos> >,false,false> *const)(v2 + 192));
    }
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishtank>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigHomeFishtank>,false,false> *const)(v2 + 64));
  }
  if ( v62 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 104) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return ret;
};

// Line 3153: range 000000000F27C262-000000000F27EA78
int32_t __cdecl JsonConfigMgr::checkHomeFurnitureGroupConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  __int64 v9; // rsi
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  char *v14; // rsi
  HomeWorldExcelConfigMgr *p_home_config_mgr; // rcx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  uint32_t v30; // r15d
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  LuaConfigMgr *v38; // rcx
  __int64 v39; // rsi
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  unsigned __int64 v44; // rax
  char *v45; // rsi
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rdx
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rdx
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rdx
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rdx
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rdx
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rdx
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rdx
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rdx
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rdx
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rdx
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rdx
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rdx
  unsigned __int64 v71; // rax
  char *v72; // rsi
  unsigned int *v73; // rax
  int *v74; // rdx
  int v75; // ecx
  char v76; // al
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rdx
  char *v81; // rsi
  unsigned int *v82; // rax
  int *v83; // rdx
  int v84; // ecx
  char v85; // al
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // rdx
  bool in_home_world_scene; // [rsp+16h] [rbp-73Ah]
  bool in_home_room_scene; // [rsp+17h] [rbp-739h]
  int32_t ret; // [rsp+18h] [rbp-738h]
  data::SceneType scene_type; // [rsp+1Ch] [rbp-734h]
  std::unordered_map<unsigned int,FurnitureGroupJsonConfig> *__for_range; // [rsp+20h] [rbp-730h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false,false>::reference v97; // [rsp+28h] [rbp-728h]
  std::tuple_element<0,std::pair<unsigned int const,FurnitureGroupJsonConfig> >::type *furniture_id; // [rsp+30h] [rbp-720h]
  std::tuple_element<1,const std::pair<unsigned int const,FurnitureGroupJsonConfig> >::type *home_group_json_config; // [rsp+38h] [rbp-718h]
  const std::unordered_map<unsigned int,unsigned int> *__for_range_0; // [rsp+40h] [rbp-710h]
  const std::unordered_map<unsigned int,unsigned int> *__for_range_1; // [rsp+48h] [rbp-708h]
  const std::unordered_set<unsigned int> *__for_range_4; // [rsp+58h] [rbp-6F8h]
  const std::unordered_set<unsigned int> *__for_range_5; // [rsp+70h] [rbp-6E0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference v104; // [rsp+80h] [rbp-6D0h]
  uint32_t *scene_id; // [rsp+88h] [rbp-6C8h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *group_id; // [rsp+90h] [rbp-6C0h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+98h] [rbp-6B8h]
  const std::unordered_map<unsigned int,unsigned int> *__for_range_2; // [rsp+A0h] [rbp-6B0h]
  const std::unordered_map<unsigned int,unsigned int> *__for_range_3; // [rsp+A8h] [rbp-6A8h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference v110; // [rsp+B0h] [rbp-6A0h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *config_id_1; // [rsp+B8h] [rbp-698h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *follow_config_id; // [rsp+C0h] [rbp-690h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference v113; // [rsp+C8h] [rbp-688h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *virtual_furniture_id_0; // [rsp+D0h] [rbp-680h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *config_id_0; // [rsp+D8h] [rbp-678h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference v116; // [rsp+E0h] [rbp-670h]
  uint32_t *virtual_furniture_id; // [rsp+E8h] [rbp-668h]
  data::HomeWorldFurnitureExcelConfig *furniture_config_ptr; // [rsp+F8h] [rbp-658h]
  char v119[1616]; // [rsp+100h] [rbp-650h] BYREF

  v2 = (unsigned __int64)v119;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1568LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "32 32 4 13 scene_id:3261 48 4 13 scene_id:3281 64 8 16 __for_begin:3156 96 8 14 __for_end:3156 1"
                        "28 8 16 __for_begin:3171 160 8 14 __for_end:3171 192 8 16 __for_begin:3189 224 8 14 __for_end:31"
                        "89 256 8 16 __for_begin:3226 288 8 14 __for_end:3226 320 8 16 __for_begin:3241 352 8 14 __for_en"
                        "d:3241 384 8 16 __for_begin:3261 416 8 14 __for_end:3261 448 8 16 __for_begin:3281 480 8 14 __fo"
                        "r_end:3281 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 "
                        "<unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9"
                        " <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 "
                        "48 17 group_id_set:3155 1488 48 36 virtual_furniture_config_id_set:3225";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkHomeFurnitureGroupConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -219021312;
  v4[536862766] = 62194;
  v4[536862768] = -202116109;
  ret = 0;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 1408));
  __for_range = &this->home_furniture_group_config_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false> *)(v2 + 96)) )
  {
    v97 = std::__detail::_Node_iterator<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false,false> *const)(v2 + 64));
    furniture_id = std::get<0ul,unsigned int const,FurnitureGroupJsonConfig>(v97);
    home_group_json_config = (std::tuple_element<1,const std::pair<unsigned int const,FurnitureGroupJsonConfig> >::type *)std::get<1ul,unsigned int const,FurnitureGroupJsonConfig>(v97);
    if ( *(_BYTE *)(((unsigned __int64)home_group_json_config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)home_group_json_config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(home_group_json_config);
    }
    if ( home_group_json_config->radius > 0.0 )
    {
      v9 = (((_BYTE)home_group_json_config + 4) & 7u) + 3;
      if ( *(_BYTE *)(((unsigned __int64)&home_group_json_config->height >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)home_group_json_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&home_group_json_config->height >> 3)
                                                                             + 0x7FFF8000) )
      {
        __asan_report_load4(&home_group_json_config->height);
      }
      if ( home_group_json_config->height > 0.0 )
      {
        __for_range_0 = &home_group_json_config->furniture_group_config_map;
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 128, v9);
        *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 128) = std::unordered_map<unsigned int,unsigned int>::begin(__for_range_0);
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 160, v9);
        *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 160) = std::unordered_map<unsigned int,unsigned int>::end(__for_range_0);
        while ( 1 )
        {
          v14 = (char *)(v2 + 160);
          if ( !std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 128),
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 160)) )
            break;
          v116 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 128));
          virtual_furniture_id = std::get<0ul,unsigned int const,unsigned int>(v116);
          std::get<1ul,unsigned int const,unsigned int>(v116);
          p_home_config_mgr = &config->txt_config_mgr.home_config_mgr;
          if ( *(_BYTE *)(((unsigned __int64)virtual_furniture_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)virtual_furniture_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)virtual_furniture_id >> 3)
                                                                                   + 0x7FFF8000) )
          {
            __asan_report_load4(virtual_furniture_id);
          }
          furniture_config_ptr = data::HomeWorldExcelConfigMgrBase::findHomeWorldFurnitureExcelConfig(
                                   p_home_config_mgr,
                                   *virtual_furniture_id);
          if ( furniture_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&furniture_config_ptr->special_furniture_type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&furniture_config_ptr->special_furniture_type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&furniture_config_ptr->special_furniture_type);
            }
            if ( furniture_config_ptr->special_furniture_type != VirtualFurnitrue )
            {
              *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 704, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 704),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkHomeFurnitureGroupConfig",
                3182);
              v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 704),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v19 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
                      v18,
                      (const char (*)[54])"invalid virtual_furniture_type. virtual_furniture_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, virtual_furniture_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
              *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
          }
          else
          {
            *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 640, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 640),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkHomeFurnitureGroupConfig",
              3176);
            v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 640),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v17 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                    v16,
                    (const char (*)[30])"invalid virtual_furniture_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, virtual_furniture_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
            *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 128));
        }
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
        in_home_world_scene = 0;
        in_home_room_scene = 0;
        __for_range_1 = &home_group_json_config->scene_group_map;
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 192, v14);
        *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 192) = std::unordered_map<unsigned int,unsigned int>::begin(__for_range_1);
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 224, v14);
        *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 224) = std::unordered_map<unsigned int,unsigned int>::end(__for_range_1);
        while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 192),
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 224)) )
        {
          v104 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 192));
          scene_id = std::get<0ul,unsigned int const,unsigned int>(v104);
          group_id = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v104);
          v20 = std::set<unsigned int>::insert((std::set<unsigned int> *const)(v2 + 1408), group_id);
          if ( !v20.second )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkHomeFurnitureGroupConfig",
              3193);
            v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 768),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v22 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v21,
                    (const char (*)[20])"duplicate group_id:");
            v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, group_id);
            v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    v23,
                    (const char (*)[16])", furniture_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, furniture_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            p_scene_config_mgr = &config->txt_config_mgr.scene_config_mgr;
            if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(scene_id);
            }
            scene_type = SceneExcelConfigMgr::getSceneTypeBySceneId(p_scene_config_mgr, *scene_id);
            if ( !SceneExcelConfigMgr::isHomeScene(scene_type) )
            {
              *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 832, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 832),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkHomeFurnitureGroupConfig",
                3200);
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 832),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v27 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                      v26,
                      (const char (*)[25])"not home scene scene_id:");
              v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, scene_id);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v28,
                      (const char (*)[16])", furniture_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, furniture_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
              *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            else
            {
              if ( scene_type == SCENE_HOME_WORLD )
              {
                in_home_world_scene = 1;
              }
              else if ( scene_type == SCENE_HOME_ROOM )
              {
                in_home_room_scene = 1;
              }
              if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3)
                                                                           + 0x7FFF8000) )
              {
                __asan_report_load4(scene_id);
              }
              v30 = *scene_id;
              p_lua_config_mgr = &config->lua_config_mgr;
              if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3)
                                                                           + 0x7FFF8000) )
              {
                __asan_report_load4(group_id);
              }
              if ( v30 == LuaConfigMgr::getSceneIdByGroupId(p_lua_config_mgr, *group_id) )
              {
                v38 = &config->lua_config_mgr;
                if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3)
                                                                             + 0x7FFF8000) )
                {
                  __asan_report_load4(group_id);
                }
                v39 = *group_id;
                group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(v38, v39);
                if ( group_script_config_ptr )
                {
                  v44 = ((v2 + 1488) >> 3) + 2147450880;
                  *(_DWORD *)v44 = 0;
                  *(_WORD *)(v44 + 4) = 0;
                  std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 1488));
                  __for_range_2 = &home_group_json_config->furniture_group_config_map;
                  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 256, v39);
                  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 256) = std::unordered_map<unsigned int,unsigned int>::begin(__for_range_2);
                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 288, v39);
                  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 288) = std::unordered_map<unsigned int,unsigned int>::end(__for_range_2);
                  while ( 1 )
                  {
                    v45 = (char *)(v2 + 288);
                    if ( !std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 256),
                            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 288)) )
                      break;
                    v113 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 256));
                    virtual_furniture_id_0 = std::get<0ul,unsigned int const,unsigned int>(v113);
                    config_id_0 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v113);
                    if ( !common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
                            &group_script_config_ptr->config_id_set,
                            config_id_0) )
                    {
                      *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1024, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1024),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_config_mgr.cpp",
                        "checkHomeFurnitureGroupConfig",
                        3230);
                      v46 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v2 + 1024),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      v47 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                              v46,
                              (const char (*)[19])"invalid config_id:");
                      v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v47, config_id_0);
                      v49 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                              v48,
                              (const char (*)[12])", group_id:");
                      v50 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, group_id);
                      v51 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                              v50,
                              (const char (*)[24])", virtual_furniture_id:");
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v51,
                        virtual_furniture_id_0);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
                      *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
                      ret = -1;
                    }
                    else
                    {
                      v52 = std::set<unsigned int>::insert((std::set<unsigned int> *const)(v2 + 1488), config_id_0);
                      if ( !v52.second )
                      {
                        *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1088, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1088),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/json_config_mgr.cpp",
                          "checkHomeFurnitureGroupConfig",
                          3236);
                        v53 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                (common::milog::MiLogStream *const)(v2 + 1088),
                                (const char (*)[16])"[CONFIG_ERROR] ");
                        v54 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                                v53,
                                (const char (*)[21])"duplicate config_id:");
                        v55 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v54, config_id_0);
                        v56 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                v55,
                                (const char (*)[12])", group_id:");
                        v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, group_id);
                        v58 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                                v57,
                                (const char (*)[24])", virtual_furniture_id:");
                        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v58,
                          virtual_furniture_id_0);
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
                        *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                        ret = -1;
                      }
                    }
                    std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 256));
                  }
                  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
                  __for_range_3 = &group_script_config_ptr->pos_follow_config_id_map;
                  *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 320, v45);
                  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 320) = std::unordered_map<unsigned int,unsigned int>::begin(__for_range_3);
                  *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 352, v45);
                  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 352) = std::unordered_map<unsigned int,unsigned int>::end(__for_range_3);
                  while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 320),
                            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 352)) )
                  {
                    v110 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 320));
                    config_id_1 = std::get<0ul,unsigned int const,unsigned int>(v110);
                    follow_config_id = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v110);
                    if ( common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
                           (std::set<unsigned int> *)(v2 + 1488),
                           config_id_1) )
                    {
                      *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1152, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1152),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_config_mgr.cpp",
                        "checkHomeFurnitureGroupConfig",
                        3245);
                      v59 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v2 + 1152),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      v60 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                              v59,
                              (const char (*)[31])"cannot follow other config_id:");
                      v61 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, config_id_1);
                      v62 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                              v61,
                              (const char (*)[12])", group_id:");
                      v63 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v62, group_id);
                      v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              v63,
                              (const char (*)[16])", furniture_id:");
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v64, furniture_id);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
                      *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
                      ret = -1;
                    }
                    else if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
                                 (std::set<unsigned int> *)(v2 + 1488),
                                 follow_config_id) )
                    {
                      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1216, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1216),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_config_mgr.cpp",
                        "checkHomeFurnitureGroupConfig",
                        3251);
                      v65 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v2 + 1216),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      v66 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                              v65,
                              (const char (*)[30])"cannot be followed config_id:");
                      v67 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                              v66,
                              follow_config_id);
                      v68 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                              v67,
                              (const char (*)[12])", group_id:");
                      v69 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, group_id);
                      v70 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              v69,
                              (const char (*)[16])", furniture_id:");
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v70, furniture_id);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
                      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                      ret = -1;
                    }
                    std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 320));
                  }
                  *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
                  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 1488));
                }
                else
                {
                  *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 960, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 960),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "checkHomeFurnitureGroupConfig",
                    3221);
                  v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 960),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v41 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                          v40,
                          (const char (*)[18])"invalid group_id:");
                  v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, group_id);
                  v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          v42,
                          (const char (*)[16])", furniture_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, furniture_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
                  *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
                  ret = -1;
                }
              }
              else
              {
                *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 896, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 896),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkHomeFurnitureGroupConfig",
                  3214);
                v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 896),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v33 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                        v32,
                        (const char (*)[18])"invalid scene_id:");
                v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, scene_id);
                v35 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v34,
                        (const char (*)[12])", group_id:");
                v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, group_id);
                v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v36,
                        (const char (*)[16])", furniture_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, furniture_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
                *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
            }
          }
          v71 = ((v2 + 1488) >> 3) + 2147450880;
          *(_DWORD *)v71 = -117901064;
          *(_WORD *)(v71 + 4) = -1800;
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 192));
        }
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
        if ( in_home_world_scene )
        {
          __for_range_4 = SceneExcelConfigMgr::getAllSceneIdBySceneType(
                            &config->txt_config_mgr.scene_config_mgr,
                            SCENE_HOME_WORLD);
          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 384, 4LL);
          *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 384) = std::unordered_set<unsigned int>::begin(__for_range_4);
          *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 416, 4LL);
          *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 416) = std::unordered_set<unsigned int>::end(__for_range_4);
          while ( 1 )
          {
            v72 = (char *)(v2 + 416);
            if ( !std::__detail::operator!=<unsigned int,false>(
                    (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 384),
                    (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 416)) )
              break;
            *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
            v73 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 384));
            v74 = (int *)v73;
            if ( *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v73 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v73);
            }
            v75 = *v74;
            v76 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
            if ( v76 != 0 && v76 <= 3 )
            {
              LOBYTE(v72) = v76 != 0;
              __asan_report_store4(v2 + 32, v72);
            }
            *(_DWORD *)(v2 + 32) = v75;
            if ( JsonConfigMgr::findSceneJsonConfig(this, *(unsigned int *)(v2 + 32))
              && !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int> const,unsigned int>(
                    &home_group_json_config->scene_group_map,
                    (const unsigned int *)(v2 + 32)) )
            {
              *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1280, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1280),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkHomeFurnitureGroupConfig",
                3271);
              v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1280),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v78 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                      v77,
                      (const char (*)[40])"home_world_scene not in json. scene_id:");
              v79 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v78,
                      (const unsigned int *)(v2 + 32));
              v80 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v79,
                      (const char (*)[16])", furniture_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v80, furniture_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
              *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 384));
          }
          *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
        }
        if ( in_home_room_scene )
        {
          __for_range_5 = SceneExcelConfigMgr::getAllSceneIdBySceneType(
                            &config->txt_config_mgr.scene_config_mgr,
                            SCENE_HOME_ROOM);
          *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 448, 5LL);
          *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 448) = std::unordered_set<unsigned int>::begin(__for_range_5);
          *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 480, 5LL);
          *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 480) = std::unordered_set<unsigned int>::end(__for_range_5);
          while ( 1 )
          {
            v81 = (char *)(v2 + 480);
            if ( !std::__detail::operator!=<unsigned int,false>(
                    (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 448),
                    (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 480)) )
              break;
            *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
            v82 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 448));
            v83 = (int *)v82;
            if ( *(_BYTE *)(((unsigned __int64)v82 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v82 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v82 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v82);
            }
            v84 = *v83;
            v85 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
            if ( v85 != 0 && v85 <= 3 )
            {
              LOBYTE(v81) = v85 != 0;
              __asan_report_store4(v2 + 48, v81);
            }
            *(_DWORD *)(v2 + 48) = v84;
            if ( JsonConfigMgr::findSceneJsonConfig(this, *(unsigned int *)(v2 + 48))
              && !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int> const,unsigned int>(
                    &home_group_json_config->scene_group_map,
                    (const unsigned int *)(v2 + 48)) )
            {
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1344, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1344),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkHomeFurnitureGroupConfig",
                3291);
              v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1344),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v87 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                      v86,
                      (const char (*)[39])"home_room_scene not in json. scene_id:");
              v88 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v87,
                      (const unsigned int *)(v2 + 48));
              v89 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v88,
                      (const char (*)[16])", furniture_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v89, furniture_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 448));
          }
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
        }
      }
      else
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 576),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkHomeFurnitureGroupConfig",
          3166);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 576),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v11 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                v10,
                (const char (*)[21])"height <= 0, height:");
        v12 = common::milog::MiLogStream::operator<<<float,(float *)0>(v11, &home_group_json_config->height);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v12,
                (const char (*)[16])", furniture_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, furniture_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
    }
    else
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 512, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 512),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeFurnitureGroupConfig",
        3160);
      v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 512),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v6 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             v5,
             (const char (*)[21])"radius <= 0, radius:");
      v7 = common::milog::MiLogStream::operator<<<float,(float *)0>(v6, &home_group_json_config->radius);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v7, (const char (*)[16])", furniture_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, furniture_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false,false> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 1408));
  if ( v119 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 176) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B4) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80BC) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1568LL, v119);
  }
  return ret;
};

// Line 3302: range 000000000F27EA7A-000000000F27EE92
int32_t __cdecl JsonConfigMgr::checkHomeSceneAutoGenConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  uint32_t area_id; // esi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+14h] [rbp-ECh]
  data::HomeWorldAreaComfortExcelConfigMap *__for_range; // [rsp+20h] [rbp-E0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false,false>::reference v13; // [rsp+28h] [rbp-D8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig> >::type *area_config; // [rsp+38h] [rbp-C8h]
  char v15[192]; // [rsp+40h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 16 __for_begin:3305 64 8 14 __for_end:3305 96 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkHomeSceneAutoGenConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.home_config_mgr.home_world_area_comfort_excel_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, config);
  *(std::unordered_map<unsigned int,data::HomeWorldAreaComfortExcelConfig>::const_iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::HomeWorldAreaComfortExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,data::HomeWorldAreaComfortExcelConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::HomeWorldAreaComfortExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false> *)(v2 + 64)) )
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false,false> *const)(v2 + 32));
    std::get<0ul,unsigned int const,data::HomeWorldAreaComfortExcelConfig>(v13);
    area_config = (std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig> >::type *)std::get<1ul,unsigned int const,data::HomeWorldAreaComfortExcelConfig>(v13);
    if ( *(_BYTE *)(((unsigned __int64)&area_config->area_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&area_config->area_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&area_config->area_id);
    }
    area_id = area_config->area_id;
    if ( *(_BYTE *)(((unsigned __int64)&area_config->scene_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)area_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&area_config->scene_id >> 3)
                                                                 + 0x7FFF8000) )
    {
      __asan_report_load4(&area_config->scene_id);
    }
    if ( !JsonConfigMgr::findHomeBlockAutoGenConfig(this, area_config->scene_id, area_id) )
    {
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkHomeSceneAutoGenConfig",
        3309);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 96),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
             v6,
             (const char (*)[44])"findHomeBlockAutoGenConfig fail, scene_id: ");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &area_config->scene_id);
      v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" block_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &area_config->area_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldAreaComfortExcelConfig>,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3318: range 000000000F27EE94-000000000F2809E5
int32_t __cdecl JsonConfigMgr::rewriteWidgetConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  char *v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int v11; // eax
  __int64 v12; // rax
  const std::shared_ptr<data::ConfigBaseWidget> *v13; // r8
  char v14; // dl
  unsigned __int64 v15; // rax
  __int64 v16; // rax
  std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  char v18; // al
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::__shared_ptr_access<data::ConfigWidgetOneoffGatherPointDetector,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::set<unsigned int> *v23; // rax
  unsigned __int64 v24; // rax
  _DWORD *v25; // rax
  char *v26; // rsi
  _DWORD *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  int v30; // edx
  __int64 v31; // rsi
  unsigned int v32; // r14d
  __int64 v33; // rax
  char v34; // dl
  unsigned __int64 v35; // rax
  __int64 v36; // rax
  const std::shared_ptr<data::ConfigBaseWidgetToy> *v38; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false>,bool> v39; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // r14
  unsigned __int64 v43; // rax
  unsigned __int64 v44; // rdx
  __int64 v45; // rsi
  __int64 v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyOneoffGatherPointDetector,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  std::set<unsigned int> *v50; // rax
  int v51; // edx
  common::milog::MiLogStream *v52; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  unsigned int *M_current; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  std::vector<unsigned int>::iterator v56; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v57; // rax
  unsigned int *v58; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  std::vector<unsigned int>::iterator v60; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v61; // rax
  unsigned int *v62; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // rax
  std::vector<unsigned int>::iterator v64; // rax
  std::initializer_list<std::type_index> __la; // [rsp+0h] [rbp-570h]
  int __l; // [rsp+0h] [rbp-570h]
  int32_t v68; // [rsp+1Ch] [rbp-554h]
  int32_t ret; // [rsp+3Ch] [rbp-534h]
  WidgetJsonConfig *__for_range; // [rsp+40h] [rbp-530h]
  data::ConfigWidgetToyMap *__for_range_0; // [rsp+48h] [rbp-528h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false>::reference v72; // [rsp+50h] [rbp-520h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> > >::type *material_id; // [rsp+58h] [rbp-518h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> > >::type *config_widget_ptr_0; // [rsp+60h] [rbp-510h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> >,false,true>::reference v75; // [rsp+68h] [rbp-508h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> > >::type *material_id_str; // [rsp+70h] [rbp-500h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> > >::type *config_widget_ptr; // [rsp+78h] [rbp-4F8h]
  char v78[1264]; // [rsp+80h] [rbp-4F0h] BYREF

  v2 = (unsigned __int64)v78;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1216LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "28 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 4 16 material_id:3334 160 8 16 __for_begin:3326 192 8 14 __for_end:3326 224 8 16 "
                        "config_type:3345 256 8 16 __for_begin:3375 288 8 14 __for_end:3375 320 8 16 config_type:3383 352"
                        " 8 9 <unknown> 384 16 9 <unknown> 416 16 24 detector_config_ptr:3354 448 16 24 detector_config_p"
                        "tr:3391 480 16 33 background_widget_config_ptr:3397 512 16 25 config_lunch_box_ptr:3406 544 32 9"
                        " <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 "
                        "<unknown> 928 56 29 group_cd_widget_type_set:3320 1024 56 27 single_widget_type_set:3362 1120 64 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::rewriteWidgetConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234556927;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862736] = -219021312;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -234881024;
  v4[536862751] = -218959118;
  v4[536862753] = -234881024;
  v4[536862754] = -218959118;
  v4[536862757] = -202116109;
  std::type_index::type_index(
    (std::type_index *const)(v2 + 384),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetOneoffGatherPointDetector);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 392),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetClientDetector);
  __la._M_array = (std::initializer_list<std::type_index>::iterator)(v2 + 384);
  __la._M_len = 2LL;
  std::allocator<std::type_index>::allocator((std::allocator<std::type_index> *const)(v2 + 80));
  v5 = (char *)(v2 + 384);
  std::unordered_set<std::type_index>::unordered_set(
    (std::unordered_set<std::type_index> *const)(v2 + 928),
    __la,
    0LL,
    (const std::unordered_set<std::type_index>::hasher *)(v2 + 48),
    (const std::unordered_set<std::type_index>::key_equal *)(v2 + 64),
    (const std::unordered_set<std::type_index>::allocator_type *)(v2 + 80));
  std::allocator<std::type_index>::~allocator((std::allocator<std::type_index> *const)(v2 + 80));
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -1800;
  ret = 0;
  __for_range = &this->widget_json_config_;
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 160, v5);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseWidget>>::iterator *)(v2 + 160) = std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseWidget>>::begin(&__for_range->config_widget.widgets);
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 192, v5);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseWidget>>::iterator *)(v2 + 192) = std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseWidget>>::end(&__for_range->config_widget.widgets);
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigBaseWidget>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> >,true> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> >,true> *)(v2 + 192)) )
  {
    v75 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigBaseWidget>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> >,false,true> *const)(v2 + 160));
    material_id_str = std::get<0ul,std::string const,std::shared_ptr<data::ConfigBaseWidget>>(v75);
    config_widget_ptr = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigBaseWidget>>(v75);
    if ( std::operator==<data::ConfigBaseWidget>(0LL, config_widget_ptr) )
    {
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 127) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "rewriteWidgetConfig",
        3330);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 544),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             v6,
             (const char (*)[40])"config_widget_ptr is null, material_id:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, material_id_str);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, config_widget_ptr);
      *(_DWORD *)(v2 + 144) = 0;
      v8 = (char *)(v2 + 144);
      if ( common::tools::StringUtils::strToNum<unsigned int>(material_id_str, (unsigned int *)(v2 + 144), 1) )
      {
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewriteWidgetConfig",
          3337);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 608),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                v9,
                (const char (*)[21])"invalid material_id:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, material_id_str);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        v11 = *(unsigned __int8 *)(((v2 + 144) >> 3) + 0x7FFF8000);
        if ( (_BYTE)v11 != 0 && (char)v11 <= 3 )
          __asan_report_load4(v2 + 144);
        __l = *(_DWORD *)(v2 + 144);
        v12 = (__int64)std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_widget_ptr);
        v14 = *(_BYTE *)(((unsigned __int64)(v12 + 24) >> 3) + 0x7FFF8000);
        if ( v14 != 0 && v14 <= 3 )
        {
          LOBYTE(v8) = v14 != 0;
          v12 = __asan_report_store4(v12 + 24, v8);
        }
        *(_DWORD *)(v12 + 24) = __l;
        std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidget>>::emplace<unsigned int &,std::shared_ptr<data::ConfigBaseWidget> const&>(
          &this->widget_json_config_.material_id_to_widget_config_map,
          (unsigned int *)(v2 + 144),
          config_widget_ptr,
          (unsigned int *)&this->widget_json_config_.material_id_to_widget_config_map,
          v13);
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
        v15 = (unsigned __int64)std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_widget_ptr);
        if ( !v15 )
        {
          __asan_handle_no_return(config_widget_ptr);
          __cxa_bad_typeid();
        }
        if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
          v15 = __asan_report_load8(v15);
        v16 = *(_QWORD *)v15;
        if ( *(_BYTE *)(((unsigned __int64)(v16 - 8) >> 3) + 0x7FFF8000) )
          v16 = __asan_report_load8(v16 - 8);
        std::type_index::type_index((std::type_index *const)(v2 + 224), *(const std::type_info **)(v16 - 8));
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<std::type_index>,std::type_index>(
                (std::unordered_set<std::type_index> *)(v2 + 928),
                (const std::type_index *)(v2 + 224)) )
          goto LABEL_36;
        v17 = std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_widget_ptr);
        if ( *(_BYTE *)(((unsigned __int64)&v17->cool_down_group >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v17->cool_down_group >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v17->cool_down_group);
        }
        if ( v17->cool_down_group )
LABEL_36:
          v18 = 0;
        else
          v18 = 1;
        if ( v18 )
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 672, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 672),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteWidgetConfig",
            3348);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 672),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])"material_id:");
          v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v20,
                  (const unsigned int *)(v2 + 144));
          common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v21, (const char (*)[21])byte_1A524120);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ConfigWidgetOneoffGatherPointDetector,data::ConfigBaseWidget>((const std::shared_ptr<data::ConfigBaseWidget> *)(v2 + 416));
          if ( std::operator!=<data::ConfigWidgetOneoffGatherPointDetector>(
                 0LL,
                 (const std::shared_ptr<data::ConfigWidgetOneoffGatherPointDetector> *)(v2 + 416)) )
          {
            v22 = std::__shared_ptr_access<data::ConfigWidgetOneoffGatherPointDetector,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetOneoffGatherPointDetector,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 416));
            v23 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                    &this->widget_json_config_.hint_group_to_detector_material_id_set_map,
                    &v22->hint_group);
            std::set<unsigned int>::insert(v23, (const std::set<unsigned int>::value_type *)(v2 + 144));
          }
          std::shared_ptr<data::ConfigWidgetOneoffGatherPointDetector>::~shared_ptr((std::shared_ptr<data::ConfigWidgetOneoffGatherPointDetector> *const)(v2 + 416));
        }
      }
    }
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -1800;
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigBaseWidget>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigBaseWidget> >,false,true> *const)(v2 + 160));
  }
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
  v24 = ((v2 + 1024) >> 3) + 2147450880;
  *(_DWORD *)v24 = 0;
  *(_WORD *)(v24 + 4) = 0;
  *(_BYTE *)(v24 + 6) = 0;
  v25 = (_DWORD *)(((v2 + 1120) >> 3) + 2147450880);
  *v25 = 0;
  v25[1] = 0;
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1120),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetToyAnchorPoint);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1128),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetToyBonfire);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1136),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetToyLunchBox);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1144),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetToyMiracleRing);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1152),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetLightStone);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1160),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetToyHitTree);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1168),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetWeatherWizard);
  std::type_index::type_index(
    (std::type_index *const)(v2 + 1176),
    (const std::type_info *)&`typeinfo for'data::ConfigWidgetCoinCollect);
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
  *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
  std::allocator<std::type_index>::allocator((std::allocator<std::type_index> *const)(v2 + 128));
  v26 = (char *)(v2 + 1120);
  std::unordered_set<std::type_index>::unordered_set(
    (std::unordered_set<std::type_index> *const)(v2 + 1024),
    (std::initializer_list<std::type_index>)__PAIR128__(8LL, v2 + 1120),
    0LL,
    (const std::unordered_set<std::type_index>::hasher *)(v2 + 96),
    (const std::unordered_set<std::type_index>::key_equal *)(v2 + 112),
    (const std::unordered_set<std::type_index>::allocator_type *)(v2 + 128));
  std::allocator<std::type_index>::~allocator((std::allocator<std::type_index> *const)(v2 + 128));
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  v27 = (_DWORD *)(((v2 + 1120) >> 3) + 2147450880);
  *v27 = -117901064;
  v27[1] = -117901064;
  __for_range_0 = &this->widget_json_new_config_.config_main_widget_toy.widget_config_map;
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 256, v26);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::iterator *)(v2 + 256) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::begin(__for_range_0);
  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 288, v26);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::iterator *)(v2 + 288) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::end(__for_range_0);
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v2 + 256),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v2 + 288)) )
  {
    v72 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false> *const)(v2 + 256));
    material_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>(v72);
    config_widget_ptr_0 = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>(v72);
    if ( std::operator==<data::ConfigBaseWidgetToy>(0LL, config_widget_ptr_0) )
    {
      *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 63) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 736, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 736),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "rewriteWidgetConfig",
        3379);
      v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 736),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v29 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              v28,
              (const char (*)[40])"config_widget_ptr is null, material_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, material_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
      *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
      v68 = -1;
      v30 = 0;
    }
    else
    {
      v31 = ((unsigned __int8)material_id & 7u) + 3;
      if ( *(_BYTE *)(((unsigned __int64)material_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)material_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)material_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(material_id);
      }
      v32 = *material_id;
      v33 = (__int64)std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_widget_ptr_0);
      v34 = *(_BYTE *)(((unsigned __int64)(v33 + 24) >> 3) + 0x7FFF8000);
      if ( v34 != 0 && v34 <= 3 )
      {
        LOBYTE(v31) = v34 != 0;
        v33 = __asan_report_store4(v33 + 24, v31);
      }
      *(_DWORD *)(v33 + 24) = v32;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      v35 = (unsigned __int64)std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_widget_ptr_0);
      if ( !v35 )
      {
        __asan_handle_no_return(config_widget_ptr_0);
        __cxa_bad_typeid();
      }
      if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
        v35 = __asan_report_load8(v35);
      v36 = *(_QWORD *)v35;
      if ( *(_BYTE *)(((unsigned __int64)(v36 - 8) >> 3) + 0x7FFF8000) )
        v36 = __asan_report_load8(v36 - 8);
      std::type_index::type_index((std::type_index *const)(v2 + 320), *(const std::type_info **)(v36 - 8));
      if ( common::tools::MiscUtils::isContains<std::unordered_set<std::type_index>,std::type_index>(
             (std::unordered_set<std::type_index> *)(v2 + 1024),
             (const std::type_index *)(v2 + 320)) )
      {
        v39 = std::unordered_map<std::type_index,std::shared_ptr<data::ConfigBaseWidgetToy>>::emplace<std::type_index&,std::shared_ptr<data::ConfigBaseWidgetToy> const&>(
                &this->widget_json_new_config_.type_widget_config_map,
                (std::type_index *)(v2 + 320),
                config_widget_ptr_0,
                (std::type_index *)&this->widget_json_new_config_.type_widget_config_map,
                v38);
        if ( !v39.second )
        {
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 64 + 127) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 800, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 800),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteWidgetConfig",
            3386);
          v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 800),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v42 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v41, (const char (*)[25])byte_1A524160);
          *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
          v43 = (unsigned __int64)std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_widget_ptr_0);
          if ( *(_BYTE *)((v43 >> 3) + 0x7FFF8000) )
            v43 = __asan_report_load8(v43);
          v44 = *(_QWORD *)v43 + 32LL;
          v45 = *(unsigned __int8 *)((v44 >> 3) + 0x7FFF8000);
          if ( (_BYTE)v45 )
            v43 = __asan_report_load8(*(_QWORD *)v43 + 32LL);
          v46 = (*(__int64 (__fastcall **)(unsigned __int64))v44)(v43);
          if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
            v46 = __asan_report_store8(v2 + 352, v45);
          *(_QWORD *)(v2 + 352) = v46;
          v47 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                  v42,
                  (const char *const *)(v2 + 352));
          v48 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v47,
                  (const char (*)[14])" material_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v48, material_id);
          *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigWidgetToyOneoffGatherPointDetector,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v2 + 448));
      if ( std::operator!=<data::ConfigWidgetToyOneoffGatherPointDetector>(
             0LL,
             (const std::shared_ptr<data::ConfigWidgetToyOneoffGatherPointDetector> *)(v2 + 448)) )
      {
        v49 = std::__shared_ptr_access<data::ConfigWidgetToyOneoffGatherPointDetector,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyOneoffGatherPointDetector,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 448));
        v50 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                &this->widget_json_new_config_.hint_group_to_detector_material_id_set_map,
                &v49->hint_group);
        std::set<unsigned int>::insert(v50, material_id);
      }
      *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigWidgetBackground,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v2 + 480));
      if ( std::operator!=<data::ConfigWidgetBackground>(
             0LL,
             (const std::shared_ptr<data::ConfigWidgetBackground> *)(v2 + 480)) )
      {
        std::set<unsigned int>::insert(&this->widget_json_new_config_.background_widget_material_set, material_id);
      }
      std::shared_ptr<data::ConfigWidgetBackground>::~shared_ptr((std::shared_ptr<data::ConfigWidgetBackground> *const)(v2 + 480));
      std::shared_ptr<data::ConfigWidgetToyOneoffGatherPointDetector>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyOneoffGatherPointDetector> *const)(v2 + 448));
      v30 = 1;
    }
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -1800;
    if ( v30 != 1 )
    {
      v51 = 0;
      goto LABEL_95;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false> *const)(v2 + 256));
  }
  v51 = 1;
LABEL_95:
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
  if ( v51 == 1 )
  {
    *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 864, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 864),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "rewriteWidgetConfig",
      3403);
    v52 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            (common::milog::MiLogStream *const)(v2 + 864),
            (const char (*)[22])"hint to material map:");
    common::milog::MiLogStream::operator<<<unsigned int,std::set<unsigned int>>(
      v52,
      &this->widget_json_new_config_.hint_group_to_detector_material_id_set_map);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
    *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
    *(_WORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v2 + 512) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    WidgetJsonNewConfig::findWidgetConfig<data::ConfigWidgetToyLunchBox>((const WidgetJsonNewConfig *const)(v2 + 512));
    if ( std::operator!=<data::ConfigWidgetToyLunchBox>(
           0LL,
           (const std::shared_ptr<data::ConfigWidgetToyLunchBox> *)(v2 + 512)) )
    {
      v53 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 512));
      M_current = std::vector<unsigned int>::end(&v53->revive_materials)._M_current;
      v55 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 512));
      v56._M_current = std::vector<unsigned int>::begin(&v55->revive_materials)._M_current;
      std::unordered_set<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
        &this->widget_json_new_config_.lunch_box_revive_material_set,
        v56,
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current);
      v57 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 512));
      v58 = std::vector<unsigned int>::end(&v57->heal_materials.notice_add_hp_materials)._M_current;
      v59 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 512));
      v60._M_current = std::vector<unsigned int>::begin(&v59->heal_materials.notice_add_hp_materials)._M_current;
      std::unordered_set<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
        &this->widget_json_new_config_.lunch_box_heal_material_set,
        v60,
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v58);
      v61 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 512));
      v62 = std::vector<unsigned int>::end(&v61->heal_materials.other_add_hp_materials)._M_current;
      v63 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 512));
      v64._M_current = std::vector<unsigned int>::begin(&v63->heal_materials.other_add_hp_materials)._M_current;
      std::unordered_set<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
        &this->widget_json_new_config_.lunch_box_heal_material_set,
        v64,
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v62);
    }
    v68 = ret;
    std::shared_ptr<data::ConfigWidgetToyLunchBox>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyLunchBox> *const)(v2 + 512));
  }
  std::unordered_set<std::type_index>::~unordered_set((std::unordered_set<std::type_index> *const)(v2 + 1024));
  std::unordered_set<std::type_index>::~unordered_set((std::unordered_set<std::type_index> *const)(v2 + 928));
  if ( v78 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 116) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8084) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF808C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8094) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1216LL, v78);
  }
  return v68;
};

// Line 3419: range 000000000F2809E6-000000000F280D1C
const JsonConfigMgr *__fastcall JsonConfigMgr::findAvatarConfig(
        const JsonConfigMgr *const this,
        const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>> *avatar_id,
        int a3)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>> *v6; // rdx
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>> *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false>::pointer v10; // rax
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 14 avatar_id:3418 64 8 7 it:3420 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findAvatarConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 48) = a3;
  v6 = avatar_id + 3;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, avatar_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::find(v6, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::key_type *)(v3 + 48));
  v7 = avatar_id + 3;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "findAvatarConfig",
      3423);
    v9 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           (common::milog::MiLogStream *const)(v3 + 128),
           (const char (*)[22])"can't find avatar_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigAvatar>::shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)this, 0LL);
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false> *const)(v3 + 64));
    std::shared_ptr<data::ConfigAvatar>::shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)this, &v10->second);
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 3431: range 000000000F280D1E-000000000F280F0E
const JsonConfigMgr *__fastcall JsonConfigMgr::findMonsterConfig(
        const JsonConfigMgr *const this,
        const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>> *monster_id,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>> *v6; // rdx
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>> *v7; // rdx
  bool v8; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false>::pointer v9; // rax
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 15 monster_id:3430 64 8 7 it:3432 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findMonsterConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  v6 = monster_id + 4;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, monster_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::find(v6, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::key_type *)(v3 + 48));
  v7 = monster_id + 4;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    std::shared_ptr<data::ConfigMonster>::shared_ptr((std::shared_ptr<data::ConfigMonster> *const)this, 0LL);
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false> *const)(v3 + 64));
    std::shared_ptr<data::ConfigMonster>::shared_ptr((std::shared_ptr<data::ConfigMonster> *const)this, &v9->second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 3443: range 000000000F280F10-000000000F281100
const JsonConfigMgr *__fastcall JsonConfigMgr::findGadgetConfig(
        const JsonConfigMgr *const this,
        const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *gadget_id,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *v6; // rdx
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *v7; // rdx
  bool v8; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false>::pointer v9; // rax
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 gadget_id:3442 64 8 7 it:3444 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findGadgetConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  v6 = gadget_id + 5;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, gadget_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::find(v6, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::key_type *)(v3 + 48));
  v7 = gadget_id + 5;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)this, 0LL);
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false> *const)(v3 + 64));
    std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)this, &v9->second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 3455: range 000000000F281102-000000000F2812D3
data::ConfigGadgetPtr __cdecl JsonConfigMgr::findGadgetConfig(
        const JsonConfigMgr *const this,
        const std::string *json_name)
{
  const std::string *v2; // rdx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>> *p_M_string_length; // rdx
  const std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>> *v7; // rdx
  bool v8; // al
  data::ConfigGadgetPtr result; // rax
  std::shared_ptr<data::ConfigGadget> *p_second; // rdx
  const std::string *json_namea; // [rsp+8h] [rbp-98h]
  char v12[128]; // [rsp+20h] [rbp-80h] BYREF

  json_namea = v2;
  v3 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *)v4;
  }
  v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true>::__node_type *)1102416563;
  v3[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true>::__node_type *)"2 32 8 7 it:3456 64 8 9 <unknown>";
  v3[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true>::__node_type *)JsonConfigMgr::findGadgetConfig;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  p_M_string_length = (const std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>> *)&json_name[12]._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[4], json_name);
  v3[4]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::find(
                   p_M_string_length,
                   json_namea)._M_cur;
  v7 = (const std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>> *)&json_name[12]._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[8], json_namea);
  v3[8]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::end(v7)._M_cur;
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,true>(v3 + 4, v3 + 8);
  *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)this, 0LL);
  }
  else
  {
    p_second = &std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator->(v3 + 4)->second;
    std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)this, p_second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3465: range 000000000F2812D4-000000000F2814F1
const std::vector<ScenePosition> *__fastcall JsonConfigMgr::findNpcBornConfig(
        const JsonConfigMgr *const this,
        std::vector<ScenePosition> *npc_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::vector<ScenePosition>> *p_config_npc_born_map; // rdx
  std::unordered_map<unsigned int,std::vector<ScenePosition>> *v6; // rdx
  bool v7; // al
  const std::vector<ScenePosition> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 11 npc_id:3464 64 8 9 iter:3467 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findNpcBornConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = (_DWORD)npc_id;
  if ( !(_BYTE)`guard variable for'JsonConfigMgr::findNpcBornConfig(unsigned int)::dummy_vec
    && __cxa_guard_acquire(&`guard variable for'JsonConfigMgr::findNpcBornConfig(unsigned int)::dummy_vec) )
  {
    std::vector<ScenePosition>::vector(&JsonConfigMgr::findNpcBornConfig(unsigned int)const::dummy_vec);
    __cxa_guard_release(&`guard variable for'JsonConfigMgr::findNpcBornConfig(unsigned int)::dummy_vec);
    npc_id = &JsonConfigMgr::findNpcBornConfig(unsigned int)const::dummy_vec;
    __cxa_atexit(
      (void (__fastcall *)(void *))std::vector<ScenePosition>::~vector,
      &JsonConfigMgr::findNpcBornConfig(unsigned int)const::dummy_vec,
      &_dso_handle);
  }
  p_config_npc_born_map = &this->config_npc_born_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, npc_id);
  *(std::unordered_map<unsigned int,std::vector<ScenePosition>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::vector<ScenePosition>>::find(
                                                                                                p_config_npc_born_map,
                                                                                                (const std::unordered_map<unsigned int,std::vector<ScenePosition>>::key_type *)(v2 + 48));
  v6 = &this->config_npc_born_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::vector<ScenePosition>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::vector<ScenePosition>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::vector<ScenePosition>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<ScenePosition> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<ScenePosition> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &JsonConfigMgr::findNpcBornConfig(unsigned int)const::dummy_vec;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<ScenePosition>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<ScenePosition> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3477: range 000000000F2814F2-000000000F281694
const data::ConfigTalentMixinGroup *__cdecl JsonConfigMgr::findTalentMixinConfigs(
        const JsonConfigMgr *const this,
        const std::string *talent_name)
{
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigTalentMixinGroupMap *p_config_talent_map; // rdx
  data::ConfigTalentMixinGroupMap *v6; // rdx
  bool v7; // al
  const data::ConfigTalentMixinGroup *result; // rax
  char v9[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)"2 32 8 7 it:3478 64 8 9 <unknown>";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)JsonConfigMgr::findTalentMixinConfigs;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  p_config_talent_map = &this->config_talent_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], talent_name);
  v2[4]._M_cur = std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::find(
                   p_config_talent_map,
                   talent_name)._M_cur;
  v6 = &this->config_talent_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], talent_name);
  v2[8]._M_cur = std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::end(v6)._M_cur;
  v7 = std::__detail::operator==<std::pair<std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>,true>(
         v2 + 4,
         v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>,false,true>::operator->(v2 + 4)->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3488: range 000000000F281696-000000000F281838
data::ConfigTalentMixinGroup *__cdecl JsonConfigMgr::obtainTalentMixinConfigs(
        JsonConfigMgr *const this,
        const std::string *talent_name)
{
  std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigTalentMixinGroupMap *p_config_talent_map; // rdx
  data::ConfigTalentMixinGroupMap *v6; // rdx
  bool v7; // al
  data::ConfigTalentMixinGroup *result; // rax
  char v9[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)"2 32 8 7 it:3489 64 8 9 <unknown>";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)JsonConfigMgr::obtainTalentMixinConfigs;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  p_config_talent_map = &this->config_talent_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], talent_name);
  v2[4]._M_cur = std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::find(
                   p_config_talent_map,
                   talent_name)._M_cur;
  v6 = &this->config_talent_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], talent_name);
  v2[8]._M_cur = std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::end(v6)._M_cur;
  v7 = std::__detail::operator==<std::pair<std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>,true>(
         v2 + 4,
         v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_iterator<std::pair<std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>,false,true>::operator->(v2 + 4)->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3500: range 000000000F28183A-000000000F281A0B
data::ConfigLevelEntityPtr __cdecl JsonConfigMgr::findLevelEntityConfig(
        const JsonConfigMgr *const this,
        const std::string *json_name)
{
  const std::string *v2; // rdx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true> *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>> *p_M_string_length; // rdx
  const std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>> *v7; // rdx
  bool v8; // al
  data::ConfigLevelEntityPtr result; // rax
  std::shared_ptr<data::ConfigLevelEntity> *p_second; // rdx
  const std::string *json_namea; // [rsp+8h] [rbp-98h]
  char v12[128]; // [rsp+20h] [rbp-80h] BYREF

  json_namea = v2;
  v3 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true> *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true> *)v4;
  }
  v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true>::__node_type *)1102416563;
  v3[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true>::__node_type *)"2 32 8 7 it:3501 64 8 9 <unknown>";
  v3[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true>::__node_type *)JsonConfigMgr::findLevelEntityConfig;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  p_M_string_length = (const std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>> *)&json_name[109]._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[4], json_name);
  v3[4]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::find(
                   p_M_string_length,
                   json_namea)._M_cur;
  v7 = (const std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>> *)&json_name[109]._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[8], json_namea);
  v3[8]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::end(v7)._M_cur;
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,true>(
         v3 + 4,
         v3 + 8);
  *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    std::shared_ptr<data::ConfigLevelEntity>::shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)this, 0LL);
  }
  else
  {
    p_second = &std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,false,true>::operator->(v3 + 4)->second;
    std::shared_ptr<data::ConfigLevelEntity>::shared_ptr(
      (std::shared_ptr<data::ConfigLevelEntity> *const)this,
      p_second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3511: range 000000000F281A0C-000000000F281D33
__int64 __fastcall JsonConfigMgr::findDungeonExitPointId(
        const JsonConfigMgr *const this,
        __int64 scene_id,
        uint32_t entry_point_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>> *p_dungeon_entry_to_exit_map; // rdx
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>> *v7; // rdx
  bool v8; // al
  __int64 result; // rax
  std::unordered_map<unsigned int,unsigned int> *p_second; // rdx
  std::unordered_map<unsigned int,unsigned int> *v11; // rdx
  bool v12; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v13; // rdx
  unsigned int *v14; // rax
  char v16[224]; // [rsp+10h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 13 scene_id:3510 48 4 19 entry_point_id:3510 64 8 9 iter:3512 96 8 9 <unknown> 128 8 14 e"
                        "xit_iter:3517 160 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findDungeonExitPointId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -202116352;
  *(_DWORD *)(v3 + 32) = scene_id;
  *(_DWORD *)(v3 + 48) = entry_point_id;
  p_dungeon_entry_to_exit_map = &this->dungeon_entry_to_exit_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, scene_id);
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::find(p_dungeon_entry_to_exit_map, (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->dungeon_entry_to_exit_map_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0LL;
  }
  else
  {
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    p_second = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false,false> *const)(v3 + 64))->second;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v3 + 96);
    *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v3 + 128) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                     p_second,
                                                                                     (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 48));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    v11 = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false,false> *const)(v3 + 64))->second;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v3 + 48);
    *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v3 + 160) = std::unordered_map<unsigned int,unsigned int>::end(v11);
    v12 = std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 128),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 160));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v12 )
    {
      v13 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v3 + 128));
      v14 = &v13->second;
      if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v14);
      }
      result = v13->second;
    }
    else
    {
      result = 0LL;
    }
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3527: range 000000000F281D34-000000000F2826A0
const data::ConfigEnvironmentZone *__fastcall JsonConfigMgr::findConfigEnvironmentZone(
        const JsonConfigMgr *const this,
        __int64 scene_id,
        uint32_t area_id,
        unsigned __int64 pos,
        uint32_t zone_type)
{
  const data::ConfigEnvironmentZone *p_env_zone_config; // r14
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  const std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  const std::unordered_map<unsigned int,SceneJsonConfig> *v10; // rax
  bool v11; // al
  bool v12; // al
  float v13; // xmm0_4
  float v14; // xmm0_4
  __int64 v15; // rsi
  float v16; // xmm1_4
  double v17; // xmm0_8
  float v18; // xmm1_4
  double v19; // xmm0_8
  float v20; // xmm1_4
  double v21; // xmm0_8
  int v22; // eax
  const data::ConfigEnvironmentZone *result; // rax
  RectZoneListMap *rect_zone_list_map; // [rsp+20h] [rbp-170h]
  std::vector<ConfigRectZone> *__for_range; // [rsp+30h] [rbp-160h]
  const ConfigRectZone *zone; // [rsp+38h] [rbp-158h]
  char v30[336]; // [rsp+40h] [rbp-150h] BYREF

  v6 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(288LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "9 32 4 13 scene_id:3526 48 4 12 area_id:3526 64 8 9 iter:3528 96 8 9 <unknown> 128 8 12 area_it:"
                        "3534 160 8 9 <unknown> 192 8 16 __for_begin:3542 224 8 14 __for_end:3542 256 12 12 cur_pos:3540";
  *(_QWORD *)(v6 + 16) = JsonConfigMgr::findConfigEnvironmentZone;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556924;
  v8[536862722] = -218959360;
  v8[536862723] = -218959360;
  v8[536862724] = -218959360;
  v8[536862725] = -218959360;
  v8[536862726] = -218959360;
  v8[536862727] = -218959360;
  v8[536862728] = -202177536;
  *(_DWORD *)(v6 + 32) = scene_id;
  *(_DWORD *)(v6 + 48) = area_id;
  p_scene_json_config_map = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) )
    p_scene_json_config_map = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(
                                                                                          v6 + 64,
                                                                                          scene_id);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v6 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                                     p_scene_json_config_map,
                                                                                     (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v6 + 32));
  v10 = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) )
    v10 = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v6 + 96, v6 + 32);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v6 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v10);
  v11 = std::__detail::operator==<std::pair<unsigned int const,SceneJsonConfig>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v6 + 64),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v6 + 96));
  *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v11 )
  {
    p_env_zone_config = 0LL;
  }
  else
  {
    rect_zone_list_map = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v6 + 64))->second.rect_zone_list_map;
    *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 128, v6 + 96);
    *(std::map<unsigned int,std::vector<ConfigRectZone>>::const_iterator *)(v6 + 128) = std::map<unsigned int,std::vector<ConfigRectZone>>::find(
                                                                                          rect_zone_list_map,
                                                                                          (const std::map<unsigned int,std::vector<ConfigRectZone>>::key_type *)(v6 + 48));
    *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 160, v6 + 48);
    *(std::map<unsigned int,std::vector<ConfigRectZone>>::const_iterator *)(v6 + 160) = std::map<unsigned int,std::vector<ConfigRectZone>>::end(rect_zone_list_map);
    v12 = std::operator==(
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > >::_Self *)(v6 + 128),
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > >::_Self *)(v6 + 160));
    *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v12 )
    {
      p_env_zone_config = 0LL;
    }
    else
    {
      *(_WORD *)(((v6 + 256) >> 3) + 0x7FFF8000) = 1024;
      if ( *(char *)(((v6 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v6 + 267) >> 3) + 0x7FFF8000) != 0
        && (char)((v6 + 11) & 7) >= *(_BYTE *)(((v6 + 267) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v6 + 256, 12LL);
      }
      *(_QWORD *)(v6 + 256) = 0LL;
      *(_DWORD *)(v6 + 264) = 0;
      if ( *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0 && (char)((pos & 7) + 3) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) )
        __asan_report_load4(pos);
      v13 = *(float *)pos;
      if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v6 + 256, (unsigned int)(pos & 7) + 3);
      *(float *)(v6 + 256) = v13;
      if ( *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) != 0
        && (char)(((pos + 8) & 7) + 3) >= *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(pos + 8);
      }
      v14 = *(float *)(pos + 8);
      v15 = (((_BYTE)v6 + 4) & 7u) + 3;
      if ( *(_BYTE *)(((v6 + 260) >> 3) + 0x7FFF8000) != 0
        && (char)(((v6 + 4) & 7) + 3) >= *(_BYTE *)(((v6 + 260) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v6 + 260, v15);
      }
      *(float *)(v6 + 260) = v14;
      __for_range = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > > *const)(v6 + 128))->second;
      *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 192, v15);
      *(std::vector<ConfigRectZone>::const_iterator *)(v6 + 192) = std::vector<ConfigRectZone>::begin(__for_range);
      *(_BYTE *)(((v6 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 224, v15);
      *(std::vector<ConfigRectZone>::const_iterator *)(v6 + 224) = std::vector<ConfigRectZone>::end(__for_range);
      while ( __gnu_cxx::operator!=<ConfigRectZone const*,std::vector<ConfigRectZone>>(
                (const __gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *)(v6 + 192),
                (const __gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *)(v6 + 224)) )
      {
        zone = __gnu_cxx::__normal_iterator<ConfigRectZone const*,std::vector<ConfigRectZone>>::operator*((const __gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *const)(v6 + 192));
        if ( *(_BYTE *)(((unsigned __int64)&zone->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&zone->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&zone->env_zone_config.zone_bit_type);
        }
        if ( (zone_type & zone->env_zone_config.zone_bit_type) != 0 )
        {
          if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v6 + 256);
          v16 = *(float *)(v6 + 256);
          if ( *(_BYTE *)(((unsigned __int64)&zone->low_left >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&zone->low_left >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&zone->low_left);
          }
          if ( zone->low_left.x <= v16 )
          {
            LODWORD(v17) = *(_DWORD *)(v6 + 256);
            if ( *(_BYTE *)(((unsigned __int64)&zone->high_right >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)zone - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&zone->high_right >> 3)
                                                                  + 0x7FFF8000) )
            {
              v17 = __asan_report_load4(&zone->high_right);
            }
            if ( *(float *)&v17 <= zone->high_right.x )
            {
              if ( *(_BYTE *)(((v6 + 260) >> 3) + 0x7FFF8000) != 0
                && (char)(((v6 + 4) & 7) + 3) >= *(_BYTE *)(((v6 + 260) >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v6 + 260);
              }
              v18 = *(float *)(v6 + 260);
              if ( *(_BYTE *)(((unsigned __int64)&zone->low_left.y >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)zone - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&zone->low_left.y >> 3)
                                                                    + 0x7FFF8000) )
              {
                __asan_report_load4(&zone->low_left.y);
              }
              if ( zone->low_left.y <= v18 )
              {
                LODWORD(v19) = *(_DWORD *)(v6 + 260);
                if ( *(_BYTE *)(((unsigned __int64)&zone->high_right.y >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&zone->high_right.y >> 3) + 0x7FFF8000) <= 3 )
                {
                  v19 = __asan_report_load4(&zone->high_right.y);
                }
                if ( *(float *)&v19 <= zone->high_right.y )
                {
                  if ( *(char *)(((unsigned __int64)&zone->env_zone_config.is_use_height_range >> 3) + 0x7FFF8000) < 0 )
                    __asan_report_load1(
                      &zone->env_zone_config.is_use_height_range,
                      (((_BYTE)zone - 60) & 7u) + 3,
                      &zone->env_zone_config.is_use_height_range);
                  if ( !zone->env_zone_config.is_use_height_range )
                    goto LABEL_73;
                  if ( *(_BYTE *)(((pos + 4) >> 3) + 0x7FFF8000) != 0
                    && (char)(((pos + 4) & 7) + 3) >= *(_BYTE *)(((pos + 4) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(pos + 4);
                  }
                  v20 = *(float *)(pos + 4);
                  if ( *(_BYTE *)(((unsigned __int64)&zone->env_zone_config.bottom >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&zone->env_zone_config.bottom >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&zone->env_zone_config.bottom);
                  }
                  if ( zone->env_zone_config.bottom <= v20 )
                  {
                    LODWORD(v21) = *(_DWORD *)(pos + 4);
                    if ( *(_BYTE *)(((unsigned __int64)&zone->env_zone_config.top >> 3) + 0x7FFF8000) != 0
                      && (char)((((_BYTE)zone + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&zone->env_zone_config.top >> 3)
                                                                          + 0x7FFF8000) )
                    {
                      v21 = __asan_report_load4(&zone->env_zone_config.top);
                    }
                    if ( *(float *)&v21 <= zone->env_zone_config.top )
                    {
LABEL_73:
                      if ( JsonConfigMgr::isInSimplePolygon(
                             (const data::Point2D *)(v6 + 256),
                             &zone->env_zone_config.point_vec) )
                      {
                        p_env_zone_config = &zone->env_zone_config;
                        v22 = 0;
                        goto LABEL_66;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        __gnu_cxx::__normal_iterator<ConfigRectZone const*,std::vector<ConfigRectZone>>::operator++((__gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *const)(v6 + 192));
      }
      v22 = 1;
LABEL_66:
      if ( v22 == 1 )
        p_env_zone_config = 0LL;
    }
  }
  result = p_env_zone_config;
  if ( v30 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3565: range 000000000F2826A2-000000000F282A8A
bool __fastcall JsonConfigMgr::isInSceneOpenArea(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        unsigned __int64 pos)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  bool result; // al
  __int64 v11; // rsi
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-C8h]
  char v14[192]; // [rsp+30h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 scene_id:3564 64 12 10 point:3579 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::isInSceneOpenArea;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219020288;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 48) = scene_id;
  v6 = *(unsigned int *)(v3 + 48);
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, v6);
  if ( scene_json_config_ptr )
  {
    if ( std::vector<data::Point2D>::empty(&scene_json_config_ptr->open_area_point_vec) )
    {
      result = 1;
    }
    else
    {
      if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 64, v6);
      *(_DWORD *)(v3 + 64) = 0;
      v11 = (((_BYTE)v3 + 68) & 7u) + 3;
      if ( *(_BYTE *)(((v3 + 68) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 + 68) & 7) + 3) >= *(_BYTE *)(((v3 + 68) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 68, v11);
      }
      *(_DWORD *)(v3 + 68) = 0;
      if ( *(char *)(((v3 + 72) >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(v3 + 72, v11, v3 + 72);
      *(_BYTE *)(v3 + 72) = 0;
      if ( *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0 && (char)((pos & 7) + 3) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) )
        __asan_report_load4(pos);
      *(_DWORD *)(v3 + 64) = *(_DWORD *)pos;
      if ( *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) != 0
        && (char)(((pos + 8) & 7) + 3) >= *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(pos + 8);
      }
      *(_DWORD *)(v3 + 68) = *(_DWORD *)(pos + 8);
      result = JsonConfigMgr::isInSimplePolygon(
                 (const data::Point2D *)(v3 + 64),
                 &scene_json_config_ptr->open_area_point_vec);
    }
  }
  else
  {
    if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "isInSceneOpenArea",
      3569);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v7, (const char (*)[21])"findSceneJsonConfig ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" fails");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    result = 0;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3587: range 000000000F282D7C-000000000F288E55
int32_t __cdecl JsonConfigMgr::checkAbilityConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  data::ConfigAbilityPtr *p_config_ability_ptr; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  char *v20; // rsi
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  common::milog::MiLogStream *v31; // rax
  std::string *p_modifier_name; // r14
  std::__shared_ptr_access<data::ApplyModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // r14
  std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // r14
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  common::milog::MiLogStream *v42; // rax
  char *v43; // rsi
  data::ConfigAbilityPtr *v44; // rsi
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rdx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rdx
  common::milog::MiLogStream *v49; // rax
  unsigned __int64 v50; // rax
  std::any *v51; // rax
  std::any *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rdx
  common::milog::MiLogStream *v55; // rax
  const std::type_info *v56; // rax
  const std::type_info *v57; // rax
  std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // r14
  int (**vptr_ConfigAbility)(...); // rax
  const std::type_info *v61; // rax
  unsigned __int64 v62; // rax
  char *v63; // rsi
  unsigned __int64 v64; // rax
  const std::type_info *v65; // rax
  const std::type_info *v66; // rax
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v67; // rax
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // r14
  int (**vptr_ConfigAbilityModifier)(...); // rax
  const std::type_info *v70; // rax
  unsigned __int64 v71; // rax
  char *v72; // rsi
  unsigned __int64 v73; // rax
  const std::type_info *v74; // rax
  unsigned __int64 v75; // rax
  unsigned __int64 v76; // rax
  const std::type_info *v77; // rax
  std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v78; // rax
  std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v79; // r14
  unsigned __int64 v80; // rax
  const std::type_info *v81; // rax
  unsigned __int64 v82; // rax
  char *v83; // rsi
  unsigned __int64 v84; // rax
  const std::type_info *v85; // rax
  const std::type_info *v86; // rax
  std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v87; // rax
  std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v88; // r14
  unsigned __int64 v89; // rax
  const std::type_info *v90; // rax
  unsigned __int64 v91; // rax
  char *v92; // rsi
  unsigned __int64 v93; // rax
  const std::type_info *v94; // rax
  const std::type_info *v95; // rax
  std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v96; // rax
  std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v97; // r14
  int (**vptr_ConfigAbilityPredicate)(...); // rax
  const std::type_info *v99; // rax
  unsigned __int64 v100; // rax
  char *v101; // rsi
  unsigned __int64 v102; // rax
  const std::type_info *v103; // rax
  unsigned __int64 v104; // rax
  char *v105; // rsi
  unsigned __int64 v106; // rax
  const std::type_info *v107; // rax
  unsigned __int64 v108; // rax
  char *v109; // rsi
  unsigned __int64 v110; // rax
  const std::type_info *v111; // rax
  unsigned __int64 v112; // rax
  char *v113; // rsi
  unsigned __int64 v114; // rax
  const std::type_info *v115; // rax
  unsigned __int64 v116; // rax
  char *v117; // rsi
  unsigned __int64 v118; // rax
  const std::type_info *v119; // rax
  unsigned __int64 v120; // rax
  char *v121; // rsi
  unsigned __int64 v122; // rax
  const std::type_info *v123; // rax
  unsigned __int64 v124; // rax
  char *v125; // rsi
  unsigned __int64 v126; // rax
  const std::type_info *v127; // rax
  unsigned __int64 v128; // rax
  char *v129; // rsi
  unsigned __int64 v130; // rax
  const std::type_info *v131; // rax
  unsigned __int64 v132; // rax
  common::milog::MiLogStream *v133; // rax
  common::milog::MiLogStream *v134; // rax
  common::milog::MiLogStream *v135; // rax
  common::milog::MiLogStream *v136; // rax
  unsigned __int64 v137; // rax
  const std::type_info *v138; // rax
  unsigned __int64 v139; // rax
  common::milog::MiLogStream *v140; // rax
  common::milog::MiLogStream *v141; // rax
  common::milog::MiLogStream *v142; // rax
  common::milog::MiLogStream *v143; // rax
  unsigned __int64 v144; // rax
  unsigned __int64 v145; // rax
  common::milog::MiLogStream *v146; // rax
  int (*v148)(...); // [rsp+0h] [rbp-1C20h]
  int (*v149)(...); // [rsp+0h] [rbp-1C20h]
  void (__fastcall *v150)(std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // [rsp+0h] [rbp-1C20h]
  void (__fastcall *v151)(std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // [rsp+0h] [rbp-1C20h]
  int (*v152)(...); // [rsp+0h] [rbp-1C20h]
  int32_t ret; // [rsp+1Ch] [rbp-1C04h]
  std::unordered_map<int,ConfigAbilityHashMap> *__for_range; // [rsp+20h] [rbp-1C00h]
  std::unordered_map<int,ConfigAbilityHashMap> *__for_range_4; // [rsp+28h] [rbp-1BF8h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::reference __in; // [rsp+30h] [rbp-1BF0h]
  const int *ability_name_0; // [rsp+38h] [rbp-1BE8h]
  std::tuple_element<1,std::pair<int const,ConfigAbilityHashMap> >::type *config_ability_hash_map_0; // [rsp+40h] [rbp-1BE0h]
  std::unordered_map<int,ConfigAbilityOverride> *__for_range_5; // [rsp+48h] [rbp-1BD8h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::reference v160; // [rsp+50h] [rbp-1BD0h]
  std::tuple_element<1,std::pair<int const,ConfigAbilityOverride> >::type *config_ability_override_0; // [rsp+60h] [rbp-1BC0h]
  data::ConfigAbility *config_ability; // [rsp+68h] [rbp-1BB8h]
  std::vector<std::string> *__for_range_17; // [rsp+70h] [rbp-1BB0h]
  std::string *key; // [rsp+78h] [rbp-1BA8h]
  std::unordered_map<std::string,data::DynamicString> *__for_range_16; // [rsp+80h] [rbp-1BA0h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicString>,false,true>::reference v166; // [rsp+88h] [rbp-1B98h]
  data::DynamicString *element_member_9; // [rsp+98h] [rbp-1B88h]
  std::vector<data::DynamicString> *__for_range_15; // [rsp+A0h] [rbp-1B80h]
  __gnu_cxx::__normal_iterator<data::DynamicString*,std::vector<data::DynamicString> >::reference element_member_8; // [rsp+A8h] [rbp-1B78h]
  std::unordered_map<std::string,data::DynamicInt> *__for_range_14; // [rsp+B0h] [rbp-1B70h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicInt>,false,true>::reference v171; // [rsp+B8h] [rbp-1B68h]
  data::DynamicInt *element_member_7; // [rsp+C8h] [rbp-1B58h]
  std::vector<data::DynamicInt> *__for_range_13; // [rsp+D0h] [rbp-1B50h]
  __gnu_cxx::__normal_iterator<data::DynamicInt*,std::vector<data::DynamicInt> >::reference element_member_6; // [rsp+D8h] [rbp-1B48h]
  std::unordered_map<std::string,data::DynamicFloat> *__for_range_12; // [rsp+E0h] [rbp-1B40h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true>::reference v176; // [rsp+E8h] [rbp-1B38h]
  data::DynamicFloat *element_member_5; // [rsp+F8h] [rbp-1B28h]
  std::vector<data::DynamicFloat> *__for_range_11; // [rsp+100h] [rbp-1B20h]
  __gnu_cxx::__normal_iterator<data::DynamicFloat*,std::vector<data::DynamicFloat> >::reference element_member_4; // [rsp+108h] [rbp-1B18h]
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *__for_range_10; // [rsp+110h] [rbp-1B10h]
  __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> >::reference element_member_3; // [rsp+118h] [rbp-1B08h]
  std::vector<std::shared_ptr<data::ConfigAbilityMixin>> *__for_range_9; // [rsp+120h] [rbp-1B00h]
  __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> >::reference element_member_2; // [rsp+128h] [rbp-1AF8h]
  std::vector<std::shared_ptr<data::ConfigAbilityAction>> *__for_range_8; // [rsp+130h] [rbp-1AF0h]
  __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> >::reference element_member_1; // [rsp+138h] [rbp-1AE8h]
  std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *__for_range_7; // [rsp+140h] [rbp-1AE0h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true>::reference v187; // [rsp+148h] [rbp-1AD8h]
  std::shared_ptr<data::ConfigAbilityModifier> *element_member_0; // [rsp+158h] [rbp-1AC8h]
  std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>> *__for_range_6; // [rsp+160h] [rbp-1AC0h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true>::reference v190; // [rsp+168h] [rbp-1AB8h]
  std::shared_ptr<data::ConfigAbility> *element_member; // [rsp+178h] [rbp-1AA8h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::reference v192; // [rsp+180h] [rbp-1AA0h]
  std::tuple_element<0,std::pair<int const,ConfigAbilityHashMap> >::type *ability_name; // [rsp+188h] [rbp-1A98h]
  std::unordered_map<int,ConfigAbilityOverride> *__for_range_0; // [rsp+198h] [rbp-1A88h]
  std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::reference v195; // [rsp+1A0h] [rbp-1A80h]
  std::tuple_element<1,const std::pair<int const,ConfigAbilityOverride> >::type *config_ability_override; // [rsp+1B0h] [rbp-1A70h]
  const data::ConfigAbilityPtr *config_ability_ptr; // [rsp+1B8h] [rbp-1A68h]
  data::ConfigAbilityModifierMap *__for_range_1; // [rsp+1C0h] [rbp-1A60h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true>::reference v199; // [rsp+1C8h] [rbp-1A58h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> > >::type *modifier_name; // [rsp+1D0h] [rbp-1A50h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> > >::type *config_modifier_ptr; // [rsp+1D8h] [rbp-1A48h]
  data::DynamicFloatMap *__for_range_2; // [rsp+1E0h] [rbp-1A40h]
  data::ConfigAbilityActionArray *__for_range_3; // [rsp+1E8h] [rbp-1A38h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true>::reference v204; // [rsp+1F8h] [rbp-1A28h]
  std::tuple_element<0,std::pair<const std::string,data::DynamicFloat> >::type *property_name; // [rsp+200h] [rbp-1A20h]
  char v206[6672]; // [rsp+210h] [rbp-1A10h] BYREF

  v2 = (unsigned __int64)v206;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_7(6624LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "100 32 8 16 __for_begin:3590 64 8 14 __for_end:3590 96 8 16 __for_begin:3592 128 8 14 __for_end:"
                        "3592 160 8 16 __for_begin:3601 192 8 14 __for_end:3601 224 8 16 __for_begin:3610 256 8 14 __for_"
                        "end:3610 288 8 16 __for_begin:3619 320 8 14 __for_end:3619 352 8 16 __for_begin:3638 384 8 14 __"
                        "for_end:3638 416 8 16 __for_begin:3640 448 8 14 __for_end:3640 480 8 27 is_valid_float_special:3"
                        "651 512 8 16 push_member:3663 544 8 16 __for_begin:3719 576 8 14 __for_end:3719 608 8 16 __for_b"
                        "egin:3721 640 8 14 __for_end:3721 672 8 16 __for_begin:3723 704 8 14 __for_end:3723 736 8 16 __f"
                        "or_begin:3725 768 8 14 __for_end:3725 800 8 16 __for_begin:3727 832 8 14 __for_end:3727 864 8 16"
                        " __for_begin:3728 896 8 14 __for_end:3728 928 8 16 __for_begin:3729 960 8 14 __for_end:3729 992 "
                        "8 16 __for_begin:3730 1024 8 14 __for_end:3730 1056 8 16 __for_begin:3731 1088 8 14 __for_end:37"
                        "31 1120 8 16 __for_begin:3732 1152 8 14 __for_end:3732 1184 8 16 __for_begin:3733 1216 8 14 __fo"
                        "r_end:3733 1248 8 16 __for_begin:3738 1280 8 14 __for_end:3738 1312 16 23 apply_modifier_ptr:362"
                        "1 1344 16 23 config_ability_any:3667 1376 16 11 member:3671 1408 16 8 ptr:3718 1440 16 23 elemen"
                        "t_member_any:3719 1472 16 8 ptr:3720 1504 16 23 element_member_any:3721 1536 16 8 ptr:3722 1568 "
                        "16 23 element_member_any:3723 1600 16 8 ptr:3724 1632 16 23 element_member_any:3725 1664 16 8 pt"
                        "r:3726 1696 16 23 element_member_any:3727 1728 16 23 element_member_any:3728 1760 16 23 element_"
                        "member_any:3729 1792 16 23 element_member_any:3730 1824 16 23 element_member_any:3731 1856 16 23"
                        " element_member_any:3732 1888 16 23 element_member_any:3733 1920 24 9 <unknown> 1984 24 9 <unkno"
                        "wn> 2048 24 9 <unknown> 2112 24 9 <unknown> 2176 24 9 <unknown> 2240 24 9 <unknown> 2304 24 12 k"
                        "ey_vec:3737 2368 32 9 <unknown> 2432 32 9 <unknown> 2496 32 9 <unknown> 2560 32 9 <unknown> 2624"
                        " 32 9 <unknown> 2688 32 9 <unknown> 2752 32 9 <unknown> 2816 32 9 <unknown> 2880 32 9 <unknown> "
                        "2944 32 9 <unknown> 3008 32 9 <unknown> 3072 32 9 <unknown> 3136 32 9 <unknown> 3200 32 9 <unkno"
                        "wn> 3264 32 9 <unknown> 3328 32 9 <unknown> 3392 32 9 <unknown> 3456 32 9 <unknown> 3520 32 9 <u"
                        "nknown> 3584 32 18 dynamic_float:3736 3648 32 9 <unknown> 3712 32 9 <unknown> 3776 32 9 <unknown"
                        "> 3840 48 16 dynamic_int:3748 3920 56 9 <unknown> 4016 56 9 <unknown> 4112 56 9 <unknown> 4208 5"
                        "6 9 <unknown> 4304 56 9 <unknown> 4400 80 8 que:3662 4512 80 19 dynamic_string:3760 4624 136 9 <"
                        "unknown> 4832 640 9 <unknown> 5600 896 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkAbilityConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862736] = -218959360;
  v4[536862737] = -218959360;
  v4[536862738] = -218959360;
  v4[536862739] = -218959360;
  v4[536862740] = -218959360;
  v4[536862741] = -218959360;
  v4[536862742] = -218959360;
  v4[536862743] = -218959360;
  v4[536862744] = -218959360;
  v4[536862745] = -218959360;
  v4[536862746] = -218959360;
  v4[536862747] = -218959360;
  v4[536862748] = -218959360;
  v4[536862749] = -218959360;
  v4[536862750] = -218959360;
  v4[536862751] = -218959360;
  v4[536862752] = -218959360;
  v4[536862753] = -218959360;
  v4[536862754] = -218959360;
  v4[536862755] = -218959360;
  v4[536862756] = -218959360;
  v4[536862757] = -218959360;
  v4[536862758] = -218959360;
  v4[536862759] = -218959360;
  v4[536862760] = -218959360;
  v4[536862761] = -219021312;
  v4[536862762] = -219021312;
  v4[536862763] = -219021312;
  v4[536862764] = -219021312;
  v4[536862765] = -219021312;
  v4[536862766] = -219021312;
  v4[536862767] = -219021312;
  v4[536862768] = -219021312;
  v4[536862769] = -219021312;
  v4[536862770] = -219021312;
  v4[536862771] = -219021312;
  v4[536862772] = -219021312;
  v4[536862773] = -219021312;
  v4[536862774] = -219021312;
  v4[536862775] = -219021312;
  v4[536862776] = -219021312;
  v4[536862777] = -219021312;
  v4[536862778] = -219021312;
  v4[536862779] = -219021312;
  v4[536862780] = -234881024;
  v4[536862781] = -218959118;
  v4[536862782] = -234881024;
  v4[536862783] = -218959118;
  v4[536862784] = -234881024;
  v4[536862785] = -218959118;
  v4[536862786] = -234881024;
  v4[536862787] = -218959118;
  v4[536862788] = -234881024;
  v4[536862789] = -218959118;
  v4[536862790] = -234881024;
  v4[536862791] = -218959118;
  v4[536862792] = -234881024;
  v4[536862793] = -218959118;
  v4[536862795] = -218959118;
  v4[536862797] = -218959118;
  v4[536862799] = -218959118;
  v4[536862801] = -218959118;
  v4[536862803] = -218959118;
  v4[536862805] = -218959118;
  v4[536862807] = -218959118;
  v4[536862809] = -218959118;
  v4[536862811] = -218959118;
  v4[536862813] = -218959118;
  v4[536862815] = -218959118;
  v4[536862817] = -218959118;
  v4[536862819] = -218959118;
  v4[536862821] = -218959118;
  v4[536862823] = -218959118;
  v4[536862825] = -218959118;
  v4[536862827] = -218959118;
  v4[536862829] = -218959118;
  v4[536862831] = -218959118;
  v4[536862833] = -218959118;
  v4[536862835] = -218959118;
  v4[536862837] = -218959118;
  v4[536862839] = -218959118;
  v4[536862841] = -219021312;
  v4[536862842] = 62194;
  v4[536862844] = -218959360;
  v4[536862845] = 62194;
  v4[536862847] = -218959360;
  v4[536862848] = 62194;
  v4[536862850] = -218959360;
  v4[536862851] = 62194;
  v4[536862853] = -218959360;
  v4[536862854] = 62194;
  v4[536862856] = -218959360;
  v4[536862857] = 62194;
  v4[536862860] = -218959118;
  v4[536862863] = -219021312;
  v4[536862864] = 62194;
  v4[536862868] = -234881024;
  v4[536862869] = -218959118;
  v4[536862870] = -218959118;
  v4[536862891] = -218959118;
  v4[536862892] = -218959118;
  v4[536862893] = -218959118;
  v4[536862894] = -218959118;
  v4[536862923] = -202116109;
  v4[536862924] = -202116109;
  v4[536862925] = -202116109;
  v4[536862926] = -202116109;
  ret = 0;
  __for_range = &this->ability_config_group_map_;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v2 + 32) = std::unordered_map<int,ConfigAbilityHashMap>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v2 + 64) = std::unordered_map<int,ConfigAbilityHashMap>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<int const,ConfigAbilityHashMap>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v2 + 64)) )
      break;
    v192 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v2 + 32));
    ability_name = std::get<0ul,int const,ConfigAbilityHashMap>(v192);
    __for_range_0 = &std::get<1ul,int const,ConfigAbilityHashMap>(v192)->config_ability_override_map;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::unordered_map<int,ConfigAbilityOverride>::const_iterator *)(v2 + 96) = std::unordered_map<int,ConfigAbilityOverride>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::unordered_map<int,ConfigAbilityOverride>::const_iterator *)(v2 + 128) = std::unordered_map<int,ConfigAbilityOverride>::end(__for_range_0);
    while ( std::__detail::operator!=<std::pair<int const,ConfigAbilityOverride>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v2 + 96),
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v2 + 128)) )
    {
      v195 = std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v2 + 96));
      std::get<0ul,int const,ConfigAbilityOverride>(v195);
      config_ability_override = (std::tuple_element<1,const std::pair<int const,ConfigAbilityOverride> >::type *)std::get<1ul,int const,ConfigAbilityOverride>(v195);
      config_ability_ptr = &config_ability_override->config_ability_ptr;
      p_config_ability_ptr = &config_ability_override->config_ability_ptr;
      if ( std::operator==<data::ConfigAbility>(0LL, &config_ability_override->config_ability_ptr) )
      {
        *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 2368) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2368, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2368),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkAbilityConfig",
          3597);
        v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 2368),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
               v7,
               (const char (*)[19])"ability_name_hash:");
        v9 = common::milog::MiLogStream::operator<<<int,(int *)0>(v8, ability_name);
        v10 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                v9,
                (const char (*)[24])" ability_override_name:");
        v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                v10,
                &config_ability_override->override_name);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v11,
          (const char (*)[24])" config_ability is null");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2368));
        *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        __for_range_1 = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr)->modifiers;
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 160, p_config_ability_ptr);
        *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v2 + 160) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::begin(__for_range_1);
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 192, p_config_ability_ptr);
        *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v2 + 192) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::end(__for_range_1);
        while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,true>(
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v2 + 160),
                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v2 + 192)) )
        {
          v199 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v2 + 160));
          modifier_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v199);
          config_modifier_ptr = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v199);
          if ( std::operator==<data::ConfigAbilityModifier>(0LL, config_modifier_ptr) )
          {
            *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 2432) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 2463) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2463) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 2432, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 2432),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkAbilityConfig",
              3605);
            v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 2432),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v12,
                    (const char (*)[14])"ability_name:");
            v14 = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr);
            v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, &v14->ability_name);
            v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v15,
                    (const char (*)[24])" ability_override_name:");
            v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v16,
                    &config_ability_override->override_name);
            v18 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                    v17,
                    (const char (*)[21])" modifier_name_hash:");
            v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, modifier_name);
            common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v19,
              (const char (*)[25])" config_modifier is null");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2432));
            *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            __for_range_2 = &std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_modifier_ptr)->properties;
            *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 224, config_modifier_ptr);
            *(std::unordered_map<std::string,data::DynamicFloat>::iterator *)(v2 + 224) = std::unordered_map<std::string,data::DynamicFloat>::begin(__for_range_2);
            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 256, config_modifier_ptr);
            *(std::unordered_map<std::string,data::DynamicFloat>::iterator *)(v2 + 256) = std::unordered_map<std::string,data::DynamicFloat>::end(__for_range_2);
            while ( 1 )
            {
              v20 = (char *)(v2 + 256);
              if ( !std::__detail::operator!=<std::pair<std::string const,data::DynamicFloat>,true>(
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicFloat>,true> *)(v2 + 224),
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicFloat>,true> *)(v2 + 256)) )
                break;
              v204 = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicFloat>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true> *const)(v2 + 224));
              property_name = std::get<0ul,std::string const,data::DynamicFloat>(v204);
              std::get<1ul,std::string const,data::DynamicFloat>(v204);
              if ( !common::tools::MiscUtils::isContains<std::unordered_map<std::string,data::ConfigAbilityPropertyEntry>,std::string>(
                      &this->property_map_,
                      property_name) )
              {
                *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 2496) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 2496, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 2496),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkAbilityConfig",
                  3614);
                v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 2496),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v22 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v21,
                        (const char (*)[14])"ability_name:");
                v23 = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr);
                v24 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, &v23->ability_name);
                v25 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                        v24,
                        (const char (*)[24])" ability_override_name:");
                v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                        v25,
                        &config_ability_override->override_name);
                v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v26,
                        (const char (*)[16])" modifier_name:");
                v28 = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_modifier_ptr);
                v29 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, &v28->modifier_name);
                v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v29,
                        (const char (*)[16])" property_name:");
                v31 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, property_name);
                common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v31, (const char (*)[11])" undefined");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2496));
                *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
              std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicFloat>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true> *const)(v2 + 224));
            }
            *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
            __for_range_3 = &std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_modifier_ptr)->on_removed;
            *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 288, v20);
            *(std::vector<std::shared_ptr<data::ConfigAbilityAction>>::iterator *)(v2 + 288) = std::vector<std::shared_ptr<data::ConfigAbilityAction>>::begin(__for_range_3);
            *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 320, v20);
            *(std::vector<std::shared_ptr<data::ConfigAbilityAction>>::iterator *)(v2 + 320) = std::vector<std::shared_ptr<data::ConfigAbilityAction>>::end(__for_range_3);
            while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityAction> *,std::vector<std::shared_ptr<data::ConfigAbilityAction>>>(
                      (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *)(v2 + 288),
                      (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *)(v2 + 320)) )
            {
              __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction> *,std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *const)(v2 + 288));
              *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::ApplyModifier,data::ConfigAbilityAction>((const std::shared_ptr<data::ConfigAbilityAction> *)(v2 + 1312));
              if ( !std::operator==<data::ApplyModifier>((const std::shared_ptr<data::ApplyModifier> *)(v2 + 1312), 0LL) )
              {
                p_modifier_name = &std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_modifier_ptr)->modifier_name;
                v33 = std::__shared_ptr_access<data::ApplyModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ApplyModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1312));
                if ( std::operator==<char>(&v33->modifier_name, p_modifier_name) )
                {
                  *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 2560) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 2591) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 2591) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 2560, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 2560),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "checkAbilityConfig",
                    3628);
                  v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 2560),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v35 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v34,
                          (const char (*)[14])"ability_name:");
                  v36 = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ability_ptr);
                  v37 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, &v36->ability_name);
                  v38 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                          v37,
                          (const char (*)[24])" ability_override_name:");
                  v39 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                          v38,
                          &config_ability_override->override_name);
                  v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          v39,
                          (const char (*)[16])" modifier_name:");
                  v41 = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_modifier_ptr);
                  v42 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v40, &v41->modifier_name);
                  common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    v42,
                    (const char (*)[31])" try to apply itselr onremoved");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2560));
                  *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = -117901064;
                  ret = -1;
                }
              }
              std::shared_ptr<data::ApplyModifier>::~shared_ptr((std::shared_ptr<data::ApplyModifier> *const)(v2 + 1312));
              *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -1800;
              __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction> *,std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *const)(v2 + 288));
            }
            *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
          }
          std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v2 + 160));
        }
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      }
      std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v2 + 32));
  }
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  __for_range_4 = &this->ability_config_group_map_;
  *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 352, v5);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v2 + 352) = std::unordered_map<int,ConfigAbilityHashMap>::begin(__for_range_4);
  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 384, v5);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v2 + 384) = std::unordered_map<int,ConfigAbilityHashMap>::end(__for_range_4);
  while ( 1 )
  {
    v43 = (char *)(v2 + 384);
    if ( !std::__detail::operator!=<std::pair<int const,ConfigAbilityHashMap>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v2 + 352),
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v2 + 384)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v2 + 352));
    ability_name_0 = std::get<0ul,int const,ConfigAbilityHashMap>(__in);
    config_ability_hash_map_0 = std::get<1ul,int const,ConfigAbilityHashMap>(__in);
    __for_range_5 = &config_ability_hash_map_0->config_ability_override_map;
    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 416, v43);
    *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v2 + 416) = std::unordered_map<int,ConfigAbilityOverride>::begin(__for_range_5);
    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 448, v43);
    *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v2 + 448) = std::unordered_map<int,ConfigAbilityOverride>::end(__for_range_5);
    while ( std::__detail::operator!=<std::pair<int const,ConfigAbilityOverride>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v2 + 416),
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v2 + 448)) )
    {
      v160 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v2 + 416));
      std::get<0ul,int const,ConfigAbilityOverride>(v160);
      config_ability_override_0 = std::get<1ul,int const,ConfigAbilityOverride>(v160);
      v44 = &config_ability_override_0->config_ability_ptr;
      if ( std::operator==<data::ConfigAbility>(0LL, &config_ability_override_0->config_ability_ptr) )
      {
        *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 2624) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2655) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 2655) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2624, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2624),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkAbilityConfig",
          3644);
        v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 2624),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v46 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v45,
                (const char (*)[19])"ability_name_hash:");
        v47 = common::milog::MiLogStream::operator<<<int,(int *)0>(v46, ability_name_0);
        v48 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                v47,
                (const char (*)[24])" ability_override_name:");
        v49 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                v48,
                &config_ability_override_0->override_name);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v49,
          (const char (*)[24])" config_ability is null");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2624));
        *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        config_ability = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config_ability_override_0->config_ability_ptr);
        *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 480, v44);
        *(_QWORD *)(v2 + 480) = config_ability;
        v50 = ((v2 + 4400) >> 3) + 2147450880;
        *(_DWORD *)v50 = 0;
        *(_DWORD *)(v50 + 4) = 0;
        *(_WORD *)(v50 + 8) = 0;
        std::queue<std::any>::queue<std::deque<std::any>,void>((std::queue<std::any> *const)(v2 + 4400));
        *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 512, v44);
        *(_QWORD *)(v2 + 512) = v2 + 4400;
        *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
        std::any::any<data::ConfigAbility &,data::ConfigAbility,std::any::_Manager_external<data::ConfigAbility>,true,true>(
          (std::any *const)(v2 + 1344),
          config_ability);
        JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
          (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
          (std::any *)(v2 + 1344));
        while ( !std::queue<std::any>::empty((const std::queue<std::any> *const)(v2 + 4400)) )
        {
          *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
          v51 = std::queue<std::any>::front((std::queue<std::any> *const)(v2 + 4400));
          v52 = std::move<std::any &>(v51);
          std::any::any((std::any *const)(v2 + 1376), v52);
          std::queue<std::any>::pop((std::queue<std::any> *const)(v2 + 4400));
          if ( JsonConfigMgr::checkSingleAbilityConfigMember(this, (const std::any *)(v2 + 1376)) )
          {
            *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 2688) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 2719) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2719) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 2688, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 2688),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkAbilityConfig",
              3676);
            v53 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 2688),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v54 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                    v53,
                    (const char (*)[45])"checkAbilityConfigMember fail, ability_name:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              v54,
              &config_ability_hash_map_0->ability_name);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2688));
            *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          if ( !std::any::has_value((const std::any *const)(v2 + 1376)) )
          {
            *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 2752) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 2752, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 2752),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkAbilityConfig",
              3716);
            v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 2752),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v55, (const char (*)[13])"invalid any!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2752));
            *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = -117901064;
          }
          else
          {
            v56 = std::any::type((const std::any *const)(v2 + 1376));
            if ( std::type_info::operator==(v56, (const std::type_info *)&`typeinfo for'data::ConfigAbility) )
            {
              __asan_unpoison_stack_memory(v2 + 4832, 640LL);
              if ( *(char *)(((v2 + 4832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 5471) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 5471) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 4832, 640LL);
              }
              std::any_cast<data::ConfigAbility>((data::ConfigAbility *)(v2 + 4832), (std::any *)(v2 + 1376));
              *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                __asan_report_load8(v2 + 512);
              std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                (std::function<void(std::any&)> *const)(v2 + 2816),
                *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
              data::ConfigAbility::foreachMember(
                (data::ConfigAbility *const)(v2 + 4832),
                (std::function<void(std::any&)> *)(v2 + 2816));
              std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 2816));
              *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = -117901064;
              data::ConfigAbility::~ConfigAbility((data::ConfigAbility *const)(v2 + 4832));
              __asan_poison_stack_memory(v2 + 4832, 640LL);
            }
            else
            {
              v57 = std::any::type((const std::any *const)(v2 + 1376));
              if ( std::type_info::operator==(
                     v57,
                     (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbility>) )
              {
                *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::any_cast<std::shared_ptr<data::ConfigAbility>>((std::any *)(v2 + 1408));
                if ( std::operator!=<data::ConfigAbility>(
                       0LL,
                       (const std::shared_ptr<data::ConfigAbility> *)(v2 + 1408)) )
                {
                  v58 = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1408));
                  v59 = v58;
                  if ( *(_BYTE *)(((unsigned __int64)v58 >> 3) + 0x7FFF8000) )
                    __asan_report_load8(v58);
                  vptr_ConfigAbility = v59->_vptr_ConfigAbility;
                  if ( *(_BYTE *)(((unsigned __int64)v59->_vptr_ConfigAbility >> 3) + 0x7FFF8000) )
                    vptr_ConfigAbility = (int (**)(...))__asan_report_load8(v59->_vptr_ConfigAbility);
                  v148 = *vptr_ConfigAbility;
                  *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                    __asan_report_load8(v2 + 512);
                  std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                    (std::function<void(std::any&)> *const)(v2 + 2880),
                    *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                  v148(v59, v2 + 2880);
                  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 2880));
                  *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = -117901064;
                }
                std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v2 + 1408));
                *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -1800;
              }
              else
              {
                v61 = std::any::type((const std::any *const)(v2 + 1376));
                if ( std::type_info::operator==(
                       v61,
                       (const std::type_info *)&`typeinfo for'std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>) )
                {
                  v62 = ((v2 + 3920) >> 3) + 2147450880;
                  *(_DWORD *)v62 = 0;
                  *(_WORD *)(v62 + 4) = 0;
                  *(_BYTE *)(v62 + 6) = 0;
                  if ( *(char *)(((v2 + 3920) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 3975) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 121) & 7) >= *(_BYTE *)(((v2 + 3975) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 3920, 56LL);
                  }
                  v63 = (char *)(v2 + 1376);
                  std::any_cast<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>>(
                    (std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>> *)(v2 + 3920),
                    (std::any *)(v2 + 1376));
                  __for_range_6 = (std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>> *)(v2 + 3920);
                  *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 544, v63);
                  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v2 + 544) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::begin(__for_range_6);
                  *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 576, v63);
                  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::iterator *)(v2 + 576) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::end(__for_range_6);
                  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,true>(
                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v2 + 544),
                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,true> *)(v2 + 576)) )
                  {
                    v190 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v2 + 544));
                    std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbility>>(v190);
                    element_member = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbility>>(v190);
                    *(_WORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
                    std::any::any<std::shared_ptr<data::ConfigAbility> &,std::shared_ptr<data::ConfigAbility>,std::any::_Manager_external<std::shared_ptr<data::ConfigAbility>>,true,true>(
                      (std::any *const)(v2 + 1440),
                      element_member);
                    JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                      (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                      (std::any *)(v2 + 1440));
                    std::any::~any((std::any *const)(v2 + 1440));
                    *(_WORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -1800;
                    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbility>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbility> >,false,true> *const)(v2 + 544));
                  }
                  std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>>::~unordered_map((std::unordered_map<std::string,std::shared_ptr<data::ConfigAbility>> *const)(v2 + 3920));
                  v64 = ((v2 + 3920) >> 3) + 2147450880;
                  *(_DWORD *)v64 = -117901064;
                  *(_WORD *)(v64 + 4) = -1800;
                  *(_BYTE *)(v64 + 6) = -8;
                  *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
                }
                else
                {
                  v65 = std::any::type((const std::any *const)(v2 + 1376));
                  if ( std::type_info::operator==(
                         v65,
                         (const std::type_info *)&`typeinfo for'data::ConfigAbilityModifier) )
                  {
                    __asan_unpoison_stack_memory(v2 + 5600, 896LL);
                    if ( *(char *)(((v2 + 5600) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 6495) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 6495) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 5600, 896LL);
                    }
                    std::any_cast<data::ConfigAbilityModifier>(
                      (data::ConfigAbilityModifier *)(v2 + 5600),
                      (std::any *)(v2 + 1376));
                    *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                      __asan_report_load8(v2 + 512);
                    std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                      (std::function<void(std::any&)> *const)(v2 + 2944),
                      *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                    data::ConfigAbilityModifier::foreachMember(
                      (data::ConfigAbilityModifier *const)(v2 + 5600),
                      (std::function<void(std::any&)> *)(v2 + 2944));
                    std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 2944));
                    *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = -117901064;
                    data::ConfigAbilityModifier::~ConfigAbilityModifier((data::ConfigAbilityModifier *const)(v2 + 5600));
                    __asan_poison_stack_memory(v2 + 5600, 896LL);
                  }
                  else
                  {
                    v66 = std::any::type((const std::any *const)(v2 + 1376));
                    if ( std::type_info::operator==(
                           v66,
                           (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbilityModifier>) )
                    {
                      *(_WORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::any_cast<std::shared_ptr<data::ConfigAbilityModifier>>((std::any *)(v2 + 1472));
                      if ( std::operator!=<data::ConfigAbilityModifier>(
                             0LL,
                             (const std::shared_ptr<data::ConfigAbilityModifier> *)(v2 + 1472)) )
                      {
                        v67 = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1472));
                        v68 = v67;
                        if ( *(_BYTE *)(((unsigned __int64)v67 >> 3) + 0x7FFF8000) )
                          __asan_report_load8(v67);
                        vptr_ConfigAbilityModifier = v68->_vptr_ConfigAbilityModifier;
                        if ( *(_BYTE *)(((unsigned __int64)v68->_vptr_ConfigAbilityModifier >> 3) + 0x7FFF8000) )
                          vptr_ConfigAbilityModifier = (int (**)(...))__asan_report_load8(v68->_vptr_ConfigAbilityModifier);
                        v149 = *vptr_ConfigAbilityModifier;
                        *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = 0;
                        if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                          __asan_report_load8(v2 + 512);
                        std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                          (std::function<void(std::any&)> *const)(v2 + 3008),
                          *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                        v149(v68, v2 + 3008);
                        std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 3008));
                        *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = -117901064;
                      }
                      std::shared_ptr<data::ConfigAbilityModifier>::~shared_ptr((std::shared_ptr<data::ConfigAbilityModifier> *const)(v2 + 1472));
                      *(_WORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -1800;
                    }
                    else
                    {
                      v70 = std::any::type((const std::any *const)(v2 + 1376));
                      if ( std::type_info::operator==(
                             v70,
                             (const std::type_info *)&`typeinfo for'std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>) )
                      {
                        v71 = ((v2 + 4016) >> 3) + 2147450880;
                        *(_DWORD *)v71 = 0;
                        *(_WORD *)(v71 + 4) = 0;
                        *(_BYTE *)(v71 + 6) = 0;
                        if ( *(char *)(((v2 + 4016) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 4071) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 80 + 55) & 7) >= *(_BYTE *)(((v2 + 4071) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 4016, 56LL);
                        }
                        v72 = (char *)(v2 + 1376);
                        std::any_cast<std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>>(
                          (std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *)(v2 + 4016),
                          (std::any *)(v2 + 1376));
                        __for_range_7 = (std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *)(v2 + 4016);
                        *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
                        if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) )
                          __asan_report_store8(v2 + 608, v72);
                        *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v2 + 608) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::begin(__for_range_7);
                        *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
                        if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) )
                          __asan_report_store8(v2 + 640, v72);
                        *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v2 + 640) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::end(__for_range_7);
                        while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,true>(
                                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v2 + 608),
                                  (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v2 + 640)) )
                        {
                          v187 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v2 + 608));
                          std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v187);
                          element_member_0 = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v187);
                          *(_WORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = 0;
                          std::any::any<std::shared_ptr<data::ConfigAbilityModifier> &,std::shared_ptr<data::ConfigAbilityModifier>,std::any::_Manager_external<std::shared_ptr<data::ConfigAbilityModifier>>,true,true>(
                            (std::any *const)(v2 + 1504),
                            element_member_0);
                          JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                            (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                            (std::any *)(v2 + 1504));
                          std::any::~any((std::any *const)(v2 + 1504));
                          *(_WORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = -1800;
                          std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v2 + 608));
                        }
                        std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::~unordered_map((std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>> *const)(v2 + 4016));
                        v73 = ((v2 + 4016) >> 3) + 2147450880;
                        *(_DWORD *)v73 = -117901064;
                        *(_WORD *)(v73 + 4) = -1800;
                        *(_BYTE *)(v73 + 6) = -8;
                        *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
                        *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
                      }
                      else
                      {
                        v74 = std::any::type((const std::any *const)(v2 + 1376));
                        if ( std::type_info::operator==(
                               v74,
                               (const std::type_info *)&`typeinfo for'data::ConfigAbilityAction) )
                        {
                          v75 = ((v2 + 4624) >> 3) + 2147450880;
                          *(_DWORD *)v75 = 0;
                          *(_DWORD *)(v75 + 4) = 0;
                          *(_DWORD *)(v75 + 8) = 0;
                          *(_DWORD *)(v75 + 12) = 0;
                          *(_BYTE *)(v75 + 16) = 0;
                          if ( *(char *)(((v2 + 4624) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 4759) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 - 105) & 7) >= *(_BYTE *)(((v2 + 4759) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 4624, 136LL);
                          }
                          std::any_cast<data::ConfigAbilityAction>(
                            (data::ConfigAbilityAction *)(v2 + 4624),
                            (std::any *)(v2 + 1376));
                          *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = 0;
                          if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                            __asan_report_load8(v2 + 512);
                          std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                            (std::function<void(std::any&)> *const)(v2 + 3072),
                            *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                          data::ConfigAbilityAction::foreachMember(
                            (data::ConfigAbilityAction *const)(v2 + 4624),
                            (std::function<void(std::any&)> *)(v2 + 3072));
                          std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 3072));
                          *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = -117901064;
                          data::ConfigAbilityAction::~ConfigAbilityAction((data::ConfigAbilityAction *const)(v2 + 4624));
                          v76 = ((v2 + 4624) >> 3) + 2147450880;
                          *(_DWORD *)v76 = -117901064;
                          *(_DWORD *)(v76 + 4) = -117901064;
                          *(_DWORD *)(v76 + 8) = -117901064;
                          *(_DWORD *)(v76 + 12) = -117901064;
                          *(_BYTE *)(v76 + 16) = -8;
                        }
                        else
                        {
                          v77 = std::any::type((const std::any *const)(v2 + 1376));
                          if ( std::type_info::operator==(
                                 v77,
                                 (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbilityAction>) )
                          {
                            *(_WORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                            if ( *(_WORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) )
                              __asan_report_store16();
                            std::any_cast<std::shared_ptr<data::ConfigAbilityAction>>((std::any *)(v2 + 1536));
                            if ( std::operator!=<data::ConfigAbilityAction>(
                                   0LL,
                                   (const std::shared_ptr<data::ConfigAbilityAction> *)(v2 + 1536)) )
                            {
                              v78 = std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1536));
                              v79 = v78;
                              if ( *(_BYTE *)(((unsigned __int64)v78 >> 3) + 0x7FFF8000) )
                                __asan_report_load8(v78);
                              v80 = (unsigned __int64)(v79->_vptr_BaseActionContainer + 3);
                              if ( *(_BYTE *)((v80 >> 3) + 0x7FFF8000) )
                                v80 = __asan_report_load8(v79->_vptr_BaseActionContainer + 3);
                              v150 = *(void (__fastcall **)(std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v80;
                              *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = 0;
                              if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                                __asan_report_load8(v2 + 512);
                              std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                                (std::function<void(std::any&)> *const)(v2 + 3136),
                                *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                              v150(v79, v2 + 3136);
                              std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 3136));
                              *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = -117901064;
                            }
                            std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr((std::shared_ptr<data::ConfigAbilityAction> *const)(v2 + 1536));
                            *(_WORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -1800;
                          }
                          else
                          {
                            v81 = std::any::type((const std::any *const)(v2 + 1376));
                            if ( std::type_info::operator==(
                                   v81,
                                   (const std::type_info *)&`typeinfo for'std::vector<std::shared_ptr<data::ConfigAbilityAction>>) )
                            {
                              v82 = ((v2 + 1920) >> 3) + 2147450880;
                              *(_WORD *)v82 = 0;
                              *(_BYTE *)(v82 + 2) = 0;
                              if ( *(char *)(((v2 + 1920) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v2 + 1943) >> 3) + 0x7FFF8000) != 0
                                && (char)((v2 - 105) & 7) >= *(_BYTE *)(((v2 + 1943) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v2 + 1920, 24LL);
                              }
                              v83 = (char *)(v2 + 1376);
                              std::any_cast<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>(
                                (std::vector<std::shared_ptr<data::ConfigAbilityAction>> *)(v2 + 1920),
                                (std::any *)(v2 + 1376));
                              __for_range_8 = (std::vector<std::shared_ptr<data::ConfigAbilityAction>> *)(v2 + 1920);
                              *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
                              if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) )
                                __asan_report_store8(v2 + 672, v83);
                              *(std::vector<std::shared_ptr<data::ConfigAbilityAction>>::iterator *)(v2 + 672) = std::vector<std::shared_ptr<data::ConfigAbilityAction>>::begin(__for_range_8);
                              *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
                              if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) )
                                __asan_report_store8(v2 + 704, v83);
                              *(std::vector<std::shared_ptr<data::ConfigAbilityAction>>::iterator *)(v2 + 704) = std::vector<std::shared_ptr<data::ConfigAbilityAction>>::end(__for_range_8);
                              while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityAction> *,std::vector<std::shared_ptr<data::ConfigAbilityAction>>>(
                                        (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *)(v2 + 672),
                                        (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *)(v2 + 704)) )
                              {
                                element_member_1 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction> *,std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *const)(v2 + 672));
                                *(_WORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
                                std::any::any<std::shared_ptr<data::ConfigAbilityAction> &,std::shared_ptr<data::ConfigAbilityAction>,std::any::_Manager_external<std::shared_ptr<data::ConfigAbilityAction>>,true,true>(
                                  (std::any *const)(v2 + 1568),
                                  element_member_1);
                                JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                  (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                  (std::any *)(v2 + 1568));
                                std::any::~any((std::any *const)(v2 + 1568));
                                *(_WORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -1800;
                                __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction> *,std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityAction>*,std::vector<std::shared_ptr<data::ConfigAbilityAction>> > *const)(v2 + 672));
                              }
                              std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector((std::vector<std::shared_ptr<data::ConfigAbilityAction>> *const)(v2 + 1920));
                              v84 = ((v2 + 1920) >> 3) + 2147450880;
                              *(_WORD *)v84 = -1800;
                              *(_BYTE *)(v84 + 2) = -8;
                              *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
                              *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
                            }
                            else
                            {
                              v85 = std::any::type((const std::any *const)(v2 + 1376));
                              if ( std::type_info::operator==(
                                     v85,
                                     (const std::type_info *)&`typeinfo for'data::ConfigAbilityMixin) )
                              {
                                *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v2 + 3200) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v2 + 3200, 32LL);
                                }
                                std::any_cast<data::ConfigAbilityMixin>(
                                  (data::ConfigAbilityMixin *)(v2 + 3200),
                                  (std::any *)(v2 + 1376));
                                *(_DWORD *)(((v2 + 3264) >> 3) + 0x7FFF8000) = 0;
                                if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                                  __asan_report_load8(v2 + 512);
                                std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                                  (std::function<void(std::any&)> *const)(v2 + 3264),
                                  *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                                data::ConfigAbilityMixin::foreachMember(
                                  (data::ConfigAbilityMixin *const)(v2 + 3200),
                                  (std::function<void(std::any&)> *)(v2 + 3264));
                                std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 3264));
                                *(_DWORD *)(((v2 + 3264) >> 3) + 0x7FFF8000) = -117901064;
                                data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)(v2 + 3200));
                                *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = -117901064;
                              }
                              else
                              {
                                v86 = std::any::type((const std::any *const)(v2 + 1376));
                                if ( std::type_info::operator==(
                                       v86,
                                       (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbilityMixin>) )
                                {
                                  *(_WORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
                                  if ( *(_WORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) )
                                    __asan_report_store16();
                                  std::any_cast<std::shared_ptr<data::ConfigAbilityMixin>>((std::any *)(v2 + 1600));
                                  if ( std::operator!=<data::ConfigAbilityMixin>(
                                         0LL,
                                         (const std::shared_ptr<data::ConfigAbilityMixin> *)(v2 + 1600)) )
                                  {
                                    v87 = std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1600));
                                    v88 = v87;
                                    if ( *(_BYTE *)(((unsigned __int64)v87 >> 3) + 0x7FFF8000) )
                                      __asan_report_load8(v87);
                                    v89 = (unsigned __int64)(v88->_vptr_BaseActionContainer + 3);
                                    if ( *(_BYTE *)((v89 >> 3) + 0x7FFF8000) )
                                      v89 = __asan_report_load8(v88->_vptr_BaseActionContainer + 3);
                                    v151 = *(void (__fastcall **)(std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v89;
                                    *(_DWORD *)(((v2 + 3328) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                                      __asan_report_load8(v2 + 512);
                                    std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                                      (std::function<void(std::any&)> *const)(v2 + 3328),
                                      *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                                    v151(v88, v2 + 3328);
                                    std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 3328));
                                    *(_DWORD *)(((v2 + 3328) >> 3) + 0x7FFF8000) = -117901064;
                                  }
                                  std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)(v2 + 1600));
                                  *(_WORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -1800;
                                }
                                else
                                {
                                  v90 = std::any::type((const std::any *const)(v2 + 1376));
                                  if ( std::type_info::operator==(
                                         v90,
                                         (const std::type_info *)&`typeinfo for'std::vector<std::shared_ptr<data::ConfigAbilityMixin>>) )
                                  {
                                    v91 = ((v2 + 1984) >> 3) + 2147450880;
                                    *(_WORD *)v91 = 0;
                                    *(_BYTE *)(v91 + 2) = 0;
                                    if ( *(char *)(((v2 + 1984) >> 3) + 0x7FFF8000) < 0
                                      || *(_BYTE *)(((v2 + 2007) >> 3) + 0x7FFF8000) != 0
                                      && (char)((v2 - 64 + 23) & 7) >= *(_BYTE *)(((v2 + 2007) >> 3) + 0x7FFF8000) )
                                    {
                                      __asan_report_store_n(v2 + 1984, 24LL);
                                    }
                                    v92 = (char *)(v2 + 1376);
                                    std::any_cast<std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>(
                                      (std::vector<std::shared_ptr<data::ConfigAbilityMixin>> *)(v2 + 1984),
                                      (std::any *)(v2 + 1376));
                                    __for_range_9 = (std::vector<std::shared_ptr<data::ConfigAbilityMixin>> *)(v2 + 1984);
                                    *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) )
                                      __asan_report_store8(v2 + 736, v92);
                                    *(std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::iterator *)(v2 + 736) = std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::begin(__for_range_9);
                                    *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) )
                                      __asan_report_store8(v2 + 768, v92);
                                    *(std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::iterator *)(v2 + 768) = std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::end(__for_range_9);
                                    while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>(
                                              (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *)(v2 + 736),
                                              (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *)(v2 + 768)) )
                                    {
                                      element_member_2 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *const)(v2 + 736));
                                      *(_WORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = 0;
                                      std::any::any<std::shared_ptr<data::ConfigAbilityMixin> &,std::shared_ptr<data::ConfigAbilityMixin>,std::any::_Manager_external<std::shared_ptr<data::ConfigAbilityMixin>>,true,true>(
                                        (std::any *const)(v2 + 1632),
                                        element_member_2);
                                      JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                        (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                        (std::any *)(v2 + 1632));
                                      std::any::~any((std::any *const)(v2 + 1632));
                                      *(_WORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = -1800;
                                      __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *const)(v2 + 736));
                                    }
                                    std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::~vector((std::vector<std::shared_ptr<data::ConfigAbilityMixin>> *const)(v2 + 1984));
                                    v93 = ((v2 + 1984) >> 3) + 2147450880;
                                    *(_WORD *)v93 = -1800;
                                    *(_BYTE *)(v93 + 2) = -8;
                                    *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
                                    *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
                                  }
                                  else
                                  {
                                    v94 = std::any::type((const std::any *const)(v2 + 1376));
                                    if ( std::type_info::operator==(
                                           v94,
                                           (const std::type_info *)&`typeinfo for'data::ConfigAbilityPredicate) )
                                    {
                                      *(_DWORD *)(((v2 + 3392) >> 3) + 0x7FFF8000) = 0;
                                      if ( *(char *)(((v2 + 3392) >> 3) + 0x7FFF8000) < 0
                                        || *(_BYTE *)(((v2 + 3423) >> 3) + 0x7FFF8000) != 0
                                        && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 3423) >> 3) + 0x7FFF8000) )
                                      {
                                        __asan_report_store_n(v2 + 3392, 32LL);
                                      }
                                      std::any_cast<data::ConfigAbilityPredicate>(
                                        (data::ConfigAbilityPredicate *)(v2 + 3392),
                                        (std::any *)(v2 + 1376));
                                      *(_DWORD *)(((v2 + 3456) >> 3) + 0x7FFF8000) = 0;
                                      if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                                        __asan_report_load8(v2 + 512);
                                      std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                                        (std::function<void(std::any&)> *const)(v2 + 3456),
                                        *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                                      data::ConfigAbilityPredicate::foreachMember(
                                        (data::ConfigAbilityPredicate *const)(v2 + 3392),
                                        (std::function<void(std::any&)> *)(v2 + 3456));
                                      std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 3456));
                                      *(_DWORD *)(((v2 + 3456) >> 3) + 0x7FFF8000) = -117901064;
                                      data::ConfigAbilityPredicate::~ConfigAbilityPredicate((data::ConfigAbilityPredicate *const)(v2 + 3392));
                                      *(_DWORD *)(((v2 + 3392) >> 3) + 0x7FFF8000) = -117901064;
                                    }
                                    else
                                    {
                                      v95 = std::any::type((const std::any *const)(v2 + 1376));
                                      if ( std::type_info::operator==(
                                             v95,
                                             (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbilityPredicate>) )
                                      {
                                        *(_WORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(_WORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) )
                                          __asan_report_store16();
                                        std::any_cast<std::shared_ptr<data::ConfigAbilityPredicate>>((std::any *)(v2 + 1664));
                                        if ( std::operator!=<data::ConfigAbilityPredicate>(
                                               0LL,
                                               (const std::shared_ptr<data::ConfigAbilityPredicate> *)(v2 + 1664)) )
                                        {
                                          v96 = std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1664));
                                          v97 = v96;
                                          if ( *(_BYTE *)(((unsigned __int64)v96 >> 3) + 0x7FFF8000) )
                                            __asan_report_load8(v96);
                                          vptr_ConfigAbilityPredicate = v97->_vptr_ConfigAbilityPredicate;
                                          if ( *(_BYTE *)(((unsigned __int64)v97->_vptr_ConfigAbilityPredicate >> 3)
                                                        + 0x7FFF8000) )
                                            vptr_ConfigAbilityPredicate = (int (**)(...))__asan_report_load8(v97->_vptr_ConfigAbilityPredicate);
                                          v152 = *vptr_ConfigAbilityPredicate;
                                          *(_DWORD *)(((v2 + 3520) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                                            __asan_report_load8(v2 + 512);
                                          std::function<void ()(std::any &)>::function<JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2},void,void>(
                                            (std::function<void(std::any&)> *const)(v2 + 3520),
                                            *(JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *)(v2 + 512));
                                          v152(v97, v2 + 3520);
                                          std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 3520));
                                          *(_DWORD *)(((v2 + 3520) >> 3) + 0x7FFF8000) = -117901064;
                                        }
                                        std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 1664));
                                        *(_WORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -1800;
                                      }
                                      else
                                      {
                                        v99 = std::any::type((const std::any *const)(v2 + 1376));
                                        if ( std::type_info::operator==(
                                               v99,
                                               (const std::type_info *)&`typeinfo for'std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>) )
                                        {
                                          v100 = ((v2 + 2048) >> 3) + 2147450880;
                                          *(_WORD *)v100 = 0;
                                          *(_BYTE *)(v100 + 2) = 0;
                                          if ( *(char *)(((v2 + 2048) >> 3) + 0x7FFF8000) < 0
                                            || *(_BYTE *)(((v2 + 2071) >> 3) + 0x7FFF8000) != 0
                                            && (char)((v2 - 32 + 55) & 7) >= *(_BYTE *)(((v2 + 2071) >> 3) + 0x7FFF8000) )
                                          {
                                            __asan_report_store_n(v2 + 2048, 24LL);
                                          }
                                          v101 = (char *)(v2 + 1376);
                                          std::any_cast<std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
                                            (std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *)(v2 + 2048),
                                            (std::any *)(v2 + 1376));
                                          __for_range_10 = (std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *)(v2 + 2048);
                                          *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) )
                                            __asan_report_store8(v2 + 800, v101);
                                          *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 800) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(__for_range_10);
                                          *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) )
                                            __asan_report_store8(v2 + 832, v101);
                                          *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 832) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(__for_range_10);
                                          while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
                                                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 800),
                                                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 832)) )
                                          {
                                            element_member_3 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 800));
                                            *(_WORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = 0;
                                            std::any::any<std::shared_ptr<data::ConfigAbilityPredicate> &,std::shared_ptr<data::ConfigAbilityPredicate>,std::any::_Manager_external<std::shared_ptr<data::ConfigAbilityPredicate>>,true,true>(
                                              (std::any *const)(v2 + 1696),
                                              element_member_3);
                                            JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                              (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                              (std::any *)(v2 + 1696));
                                            std::any::~any((std::any *const)(v2 + 1696));
                                            *(_WORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -1800;
                                            __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 800));
                                          }
                                          std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector((std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *const)(v2 + 2048));
                                          v102 = ((v2 + 2048) >> 3) + 2147450880;
                                          *(_WORD *)v102 = -1800;
                                          *(_BYTE *)(v102 + 2) = -8;
                                          *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
                                          *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = -8;
                                        }
                                        else
                                        {
                                          v103 = std::any::type((const std::any *const)(v2 + 1376));
                                          if ( std::type_info::operator==(
                                                 v103,
                                                 (const std::type_info *)&`typeinfo for'std::vector<data::DynamicFloat>) )
                                          {
                                            v104 = ((v2 + 2112) >> 3) + 2147450880;
                                            *(_WORD *)v104 = 0;
                                            *(_BYTE *)(v104 + 2) = 0;
                                            if ( *(char *)(((v2 + 2112) >> 3) + 0x7FFF8000) < 0
                                              || *(_BYTE *)(((v2 + 2135) >> 3) + 0x7FFF8000) != 0
                                              && (char)((v2 - 32 + 119) & 7) >= *(_BYTE *)(((v2 + 2135) >> 3)
                                                                                         + 0x7FFF8000) )
                                            {
                                              __asan_report_store_n(v2 + 2112, 24LL);
                                            }
                                            v105 = (char *)(v2 + 1376);
                                            std::any_cast<std::vector<data::DynamicFloat>>(
                                              (std::vector<data::DynamicFloat> *)(v2 + 2112),
                                              (std::any *)(v2 + 1376));
                                            __for_range_11 = (std::vector<data::DynamicFloat> *)(v2 + 2112);
                                            *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) )
                                              __asan_report_store8(v2 + 864, v105);
                                            *(std::vector<data::DynamicFloat>::iterator *)(v2 + 864) = std::vector<data::DynamicFloat>::begin(__for_range_11);
                                            *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) )
                                              __asan_report_store8(v2 + 896, v105);
                                            *(std::vector<data::DynamicFloat>::iterator *)(v2 + 896) = std::vector<data::DynamicFloat>::end(__for_range_11);
                                            while ( __gnu_cxx::operator!=<data::DynamicFloat *,std::vector<data::DynamicFloat>>(
                                                      (const __gnu_cxx::__normal_iterator<data::DynamicFloat*,std::vector<data::DynamicFloat> > *)(v2 + 864),
                                                      (const __gnu_cxx::__normal_iterator<data::DynamicFloat*,std::vector<data::DynamicFloat> > *)(v2 + 896)) )
                                            {
                                              element_member_4 = __gnu_cxx::__normal_iterator<data::DynamicFloat *,std::vector<data::DynamicFloat>>::operator*((const __gnu_cxx::__normal_iterator<data::DynamicFloat*,std::vector<data::DynamicFloat> > *const)(v2 + 864));
                                              *(_WORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
                                              std::any::any<data::DynamicFloat &,data::DynamicFloat,std::any::_Manager_external<data::DynamicFloat>,true,true>(
                                                (std::any *const)(v2 + 1728),
                                                element_member_4);
                                              JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                                (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                                (std::any *)(v2 + 1728));
                                              std::any::~any((std::any *const)(v2 + 1728));
                                              *(_WORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -1800;
                                              __gnu_cxx::__normal_iterator<data::DynamicFloat *,std::vector<data::DynamicFloat>>::operator++((__gnu_cxx::__normal_iterator<data::DynamicFloat*,std::vector<data::DynamicFloat> > *const)(v2 + 864));
                                            }
                                            std::vector<data::DynamicFloat>::~vector((std::vector<data::DynamicFloat> *const)(v2 + 2112));
                                            v106 = ((v2 + 2112) >> 3) + 2147450880;
                                            *(_WORD *)v106 = -1800;
                                            *(_BYTE *)(v106 + 2) = -8;
                                            *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = -8;
                                            *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = -8;
                                          }
                                          else
                                          {
                                            v107 = std::any::type((const std::any *const)(v2 + 1376));
                                            if ( std::type_info::operator==(
                                                   v107,
                                                   (const std::type_info *)&`typeinfo for'std::unordered_map<std::string,data::DynamicFloat>) )
                                            {
                                              v108 = ((v2 + 4112) >> 3) + 2147450880;
                                              *(_DWORD *)v108 = 0;
                                              *(_WORD *)(v108 + 4) = 0;
                                              *(_BYTE *)(v108 + 6) = 0;
                                              if ( *(char *)(((v2 + 4112) >> 3) + 0x7FFF8000) < 0
                                                || *(_BYTE *)(((v2 + 4167) >> 3) + 0x7FFF8000) != 0
                                                && (char)((v2 - 32 + 103) & 7) >= *(_BYTE *)(((v2 + 4167) >> 3)
                                                                                           + 0x7FFF8000) )
                                              {
                                                __asan_report_store_n(v2 + 4112, 56LL);
                                              }
                                              v109 = (char *)(v2 + 1376);
                                              std::any_cast<std::unordered_map<std::string,data::DynamicFloat>>(
                                                (std::unordered_map<std::string,data::DynamicFloat> *)(v2 + 4112),
                                                (std::any *)(v2 + 1376));
                                              __for_range_12 = (std::unordered_map<std::string,data::DynamicFloat> *)(v2 + 4112);
                                              *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) )
                                                __asan_report_store8(v2 + 928, v109);
                                              *(std::unordered_map<std::string,data::DynamicFloat>::iterator *)(v2 + 928) = std::unordered_map<std::string,data::DynamicFloat>::begin(__for_range_12);
                                              *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) )
                                                __asan_report_store8(v2 + 960, v109);
                                              *(std::unordered_map<std::string,data::DynamicFloat>::iterator *)(v2 + 960) = std::unordered_map<std::string,data::DynamicFloat>::end(__for_range_12);
                                              while ( std::__detail::operator!=<std::pair<std::string const,data::DynamicFloat>,true>(
                                                        (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicFloat>,true> *)(v2 + 928),
                                                        (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicFloat>,true> *)(v2 + 960)) )
                                              {
                                                v176 = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicFloat>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true> *const)(v2 + 928));
                                                std::get<0ul,std::string const,data::DynamicFloat>(v176);
                                                element_member_5 = std::get<1ul,std::string const,data::DynamicFloat>(v176);
                                                *(_WORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = 0;
                                                std::any::any<data::DynamicFloat &,data::DynamicFloat,std::any::_Manager_external<data::DynamicFloat>,true,true>(
                                                  (std::any *const)(v2 + 1760),
                                                  element_member_5);
                                                JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                                  (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                                  (std::any *)(v2 + 1760));
                                                std::any::~any((std::any *const)(v2 + 1760));
                                                *(_WORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = -1800;
                                                std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicFloat>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true> *const)(v2 + 928));
                                              }
                                              std::unordered_map<std::string,data::DynamicFloat>::~unordered_map((std::unordered_map<std::string,data::DynamicFloat> *const)(v2 + 4112));
                                              v110 = ((v2 + 4112) >> 3) + 2147450880;
                                              *(_DWORD *)v110 = -117901064;
                                              *(_WORD *)(v110 + 4) = -1800;
                                              *(_BYTE *)(v110 + 6) = -8;
                                              *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = -8;
                                              *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = -8;
                                            }
                                            else
                                            {
                                              v111 = std::any::type((const std::any *const)(v2 + 1376));
                                              if ( std::type_info::operator==(
                                                     v111,
                                                     (const std::type_info *)&`typeinfo for'std::vector<data::DynamicInt>) )
                                              {
                                                v112 = ((v2 + 2176) >> 3) + 2147450880;
                                                *(_WORD *)v112 = 0;
                                                *(_BYTE *)(v112 + 2) = 0;
                                                if ( *(char *)(((v2 + 2176) >> 3) + 0x7FFF8000) < 0
                                                  || *(_BYTE *)(((v2 + 2199) >> 3) + 0x7FFF8000) != 0
                                                  && (char)((v2 - 105) & 7) >= *(_BYTE *)(((v2 + 2199) >> 3) + 0x7FFF8000) )
                                                {
                                                  __asan_report_store_n(v2 + 2176, 24LL);
                                                }
                                                v113 = (char *)(v2 + 1376);
                                                std::any_cast<std::vector<data::DynamicInt>>(
                                                  (std::vector<data::DynamicInt> *)(v2 + 2176),
                                                  (std::any *)(v2 + 1376));
                                                __for_range_13 = (std::vector<data::DynamicInt> *)(v2 + 2176);
                                                *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) )
                                                  __asan_report_store8(v2 + 992, v113);
                                                *(std::vector<data::DynamicInt>::iterator *)(v2 + 992) = std::vector<data::DynamicInt>::begin(__for_range_13);
                                                *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) )
                                                  __asan_report_store8(v2 + 1024, v113);
                                                *(std::vector<data::DynamicInt>::iterator *)(v2 + 1024) = std::vector<data::DynamicInt>::end(__for_range_13);
                                                while ( __gnu_cxx::operator!=<data::DynamicInt *,std::vector<data::DynamicInt>>(
                                                          (const __gnu_cxx::__normal_iterator<data::DynamicInt*,std::vector<data::DynamicInt> > *)(v2 + 992),
                                                          (const __gnu_cxx::__normal_iterator<data::DynamicInt*,std::vector<data::DynamicInt> > *)(v2 + 1024)) )
                                                {
                                                  element_member_6 = __gnu_cxx::__normal_iterator<data::DynamicInt *,std::vector<data::DynamicInt>>::operator*((const __gnu_cxx::__normal_iterator<data::DynamicInt*,std::vector<data::DynamicInt> > *const)(v2 + 992));
                                                  *(_WORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
                                                  std::any::any<data::DynamicInt &,data::DynamicInt,std::any::_Manager_external<data::DynamicInt>,true,true>(
                                                    (std::any *const)(v2 + 1792),
                                                    element_member_6);
                                                  JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                                    (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                                    (std::any *)(v2 + 1792));
                                                  std::any::~any((std::any *const)(v2 + 1792));
                                                  *(_WORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -1800;
                                                  __gnu_cxx::__normal_iterator<data::DynamicInt *,std::vector<data::DynamicInt>>::operator++((__gnu_cxx::__normal_iterator<data::DynamicInt*,std::vector<data::DynamicInt> > *const)(v2 + 992));
                                                }
                                                std::vector<data::DynamicInt>::~vector((std::vector<data::DynamicInt> *const)(v2 + 2176));
                                                v114 = ((v2 + 2176) >> 3) + 2147450880;
                                                *(_WORD *)v114 = -1800;
                                                *(_BYTE *)(v114 + 2) = -8;
                                                *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) = -8;
                                                *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -8;
                                              }
                                              else
                                              {
                                                v115 = std::any::type((const std::any *const)(v2 + 1376));
                                                if ( std::type_info::operator==(
                                                       v115,
                                                       (const std::type_info *)&`typeinfo for'std::unordered_map<std::string,data::DynamicInt>) )
                                                {
                                                  v116 = ((v2 + 4208) >> 3) + 2147450880;
                                                  *(_DWORD *)v116 = 0;
                                                  *(_WORD *)(v116 + 4) = 0;
                                                  *(_BYTE *)(v116 + 6) = 0;
                                                  if ( *(char *)(((v2 + 4208) >> 3) + 0x7FFF8000) < 0
                                                    || *(_BYTE *)(((v2 + 4263) >> 3) + 0x7FFF8000) != 0
                                                    && (char)((v2 - 89) & 7) >= *(_BYTE *)(((v2 + 4263) >> 3)
                                                                                         + 0x7FFF8000) )
                                                  {
                                                    __asan_report_store_n(v2 + 4208, 56LL);
                                                  }
                                                  v117 = (char *)(v2 + 1376);
                                                  std::any_cast<std::unordered_map<std::string,data::DynamicInt>>(
                                                    (std::unordered_map<std::string,data::DynamicInt> *)(v2 + 4208),
                                                    (std::any *)(v2 + 1376));
                                                  __for_range_14 = (std::unordered_map<std::string,data::DynamicInt> *)(v2 + 4208);
                                                  *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) )
                                                    __asan_report_store8(v2 + 1056, v117);
                                                  *(std::unordered_map<std::string,data::DynamicInt>::iterator *)(v2 + 1056) = std::unordered_map<std::string,data::DynamicInt>::begin(__for_range_14);
                                                  *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) )
                                                    __asan_report_store8(v2 + 1088, v117);
                                                  *(std::unordered_map<std::string,data::DynamicInt>::iterator *)(v2 + 1088) = std::unordered_map<std::string,data::DynamicInt>::end(__for_range_14);
                                                  while ( std::__detail::operator!=<std::pair<std::string const,data::DynamicInt>,true>(
                                                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicInt>,true> *)(v2 + 1056),
                                                            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicInt>,true> *)(v2 + 1088)) )
                                                  {
                                                    v171 = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicInt>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicInt>,false,true> *const)(v2 + 1056));
                                                    std::get<0ul,std::string const,data::DynamicInt>(v171);
                                                    element_member_7 = std::get<1ul,std::string const,data::DynamicInt>(v171);
                                                    *(_WORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = 0;
                                                    std::any::any<data::DynamicInt &,data::DynamicInt,std::any::_Manager_external<data::DynamicInt>,true,true>(
                                                      (std::any *const)(v2 + 1824),
                                                      element_member_7);
                                                    JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                                      (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                                      (std::any *)(v2 + 1824));
                                                    std::any::~any((std::any *const)(v2 + 1824));
                                                    *(_WORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = -1800;
                                                    std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicInt>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicInt>,false,true> *const)(v2 + 1056));
                                                  }
                                                  std::unordered_map<std::string,data::DynamicInt>::~unordered_map((std::unordered_map<std::string,data::DynamicInt> *const)(v2 + 4208));
                                                  v118 = ((v2 + 4208) >> 3) + 2147450880;
                                                  *(_DWORD *)v118 = -117901064;
                                                  *(_WORD *)(v118 + 4) = -1800;
                                                  *(_BYTE *)(v118 + 6) = -8;
                                                  *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -8;
                                                  *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -8;
                                                }
                                                else
                                                {
                                                  v119 = std::any::type((const std::any *const)(v2 + 1376));
                                                  if ( std::type_info::operator==(
                                                         v119,
                                                         (const std::type_info *)&`typeinfo for'std::vector<data::DynamicString>) )
                                                  {
                                                    v120 = ((v2 + 2240) >> 3) + 2147450880;
                                                    *(_WORD *)v120 = 0;
                                                    *(_BYTE *)(v120 + 2) = 0;
                                                    if ( *(char *)(((v2 + 2240) >> 3) + 0x7FFF8000) < 0
                                                      || *(_BYTE *)(((v2 + 2263) >> 3) + 0x7FFF8000) != 0
                                                      && (char)((v2 - 64 + 23) & 7) >= *(_BYTE *)(((v2 + 2263) >> 3)
                                                                                                + 0x7FFF8000) )
                                                    {
                                                      __asan_report_store_n(v2 + 2240, 24LL);
                                                    }
                                                    v121 = (char *)(v2 + 1376);
                                                    std::any_cast<std::vector<data::DynamicString>>(
                                                      (std::vector<data::DynamicString> *)(v2 + 2240),
                                                      (std::any *)(v2 + 1376));
                                                    __for_range_15 = (std::vector<data::DynamicString> *)(v2 + 2240);
                                                    *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                                                    if ( *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) )
                                                      __asan_report_store8(v2 + 1120, v121);
                                                    *(std::vector<data::DynamicString>::iterator *)(v2 + 1120) = std::vector<data::DynamicString>::begin(__for_range_15);
                                                    *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                                                    if ( *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) )
                                                      __asan_report_store8(v2 + 1152, v121);
                                                    *(std::vector<data::DynamicString>::iterator *)(v2 + 1152) = std::vector<data::DynamicString>::end(__for_range_15);
                                                    while ( __gnu_cxx::operator!=<data::DynamicString *,std::vector<data::DynamicString>>(
                                                              (const __gnu_cxx::__normal_iterator<data::DynamicString*,std::vector<data::DynamicString> > *)(v2 + 1120),
                                                              (const __gnu_cxx::__normal_iterator<data::DynamicString*,std::vector<data::DynamicString> > *)(v2 + 1152)) )
                                                    {
                                                      element_member_8 = __gnu_cxx::__normal_iterator<data::DynamicString *,std::vector<data::DynamicString>>::operator*((const __gnu_cxx::__normal_iterator<data::DynamicString*,std::vector<data::DynamicString> > *const)(v2 + 1120));
                                                      *(_WORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
                                                      std::any::any<data::DynamicString &,data::DynamicString,std::any::_Manager_external<data::DynamicString>,true,true>(
                                                        (std::any *const)(v2 + 1856),
                                                        element_member_8);
                                                      JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                                        (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                                        (std::any *)(v2 + 1856));
                                                      std::any::~any((std::any *const)(v2 + 1856));
                                                      *(_WORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -1800;
                                                      __gnu_cxx::__normal_iterator<data::DynamicString *,std::vector<data::DynamicString>>::operator++((__gnu_cxx::__normal_iterator<data::DynamicString*,std::vector<data::DynamicString> > *const)(v2 + 1120));
                                                    }
                                                    std::vector<data::DynamicString>::~vector((std::vector<data::DynamicString> *const)(v2 + 2240));
                                                    v122 = ((v2 + 2240) >> 3) + 2147450880;
                                                    *(_WORD *)v122 = -1800;
                                                    *(_BYTE *)(v122 + 2) = -8;
                                                    *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -8;
                                                    *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -8;
                                                  }
                                                  else
                                                  {
                                                    v123 = std::any::type((const std::any *const)(v2 + 1376));
                                                    if ( std::type_info::operator==(
                                                           v123,
                                                           (const std::type_info *)&`typeinfo for'std::unordered_map<std::string,data::DynamicString>) )
                                                    {
                                                      v124 = ((v2 + 4304) >> 3) + 2147450880;
                                                      *(_DWORD *)v124 = 0;
                                                      *(_WORD *)(v124 + 4) = 0;
                                                      *(_BYTE *)(v124 + 6) = 0;
                                                      if ( *(char *)(((v2 + 4304) >> 3) + 0x7FFF8000) < 0
                                                        || *(_BYTE *)(((v2 + 4359) >> 3) + 0x7FFF8000) != 0
                                                        && (char)((v2 - 48 + 55) & 7) >= *(_BYTE *)(((v2 + 4359) >> 3)
                                                                                                  + 0x7FFF8000) )
                                                      {
                                                        __asan_report_store_n(v2 + 4304, 56LL);
                                                      }
                                                      v125 = (char *)(v2 + 1376);
                                                      std::any_cast<std::unordered_map<std::string,data::DynamicString>>(
                                                        (std::unordered_map<std::string,data::DynamicString> *)(v2 + 4304),
                                                        (std::any *)(v2 + 1376));
                                                      __for_range_16 = (std::unordered_map<std::string,data::DynamicString> *)(v2 + 4304);
                                                      *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                                                      if ( *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) )
                                                        __asan_report_store8(v2 + 1184, v125);
                                                      *(std::unordered_map<std::string,data::DynamicString>::iterator *)(v2 + 1184) = std::unordered_map<std::string,data::DynamicString>::begin(__for_range_16);
                                                      *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                                                      if ( *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) )
                                                        __asan_report_store8(v2 + 1216, v125);
                                                      *(std::unordered_map<std::string,data::DynamicString>::iterator *)(v2 + 1216) = std::unordered_map<std::string,data::DynamicString>::end(__for_range_16);
                                                      while ( std::__detail::operator!=<std::pair<std::string const,data::DynamicString>,true>(
                                                                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicString>,true> *)(v2 + 1184),
                                                                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicString>,true> *)(v2 + 1216)) )
                                                      {
                                                        v166 = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicString>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicString>,false,true> *const)(v2 + 1184));
                                                        std::get<0ul,std::string const,data::DynamicString>(v166);
                                                        element_member_9 = std::get<1ul,std::string const,data::DynamicString>(v166);
                                                        *(_WORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = 0;
                                                        std::any::any<data::DynamicString &,data::DynamicString,std::any::_Manager_external<data::DynamicString>,true,true>(
                                                          (std::any *const)(v2 + 1888),
                                                          element_member_9);
                                                        JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
                                                          (const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const)(v2 + 512),
                                                          (std::any *)(v2 + 1888));
                                                        std::any::~any((std::any *const)(v2 + 1888));
                                                        *(_WORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = -1800;
                                                        std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicString>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicString>,false,true> *const)(v2 + 1184));
                                                      }
                                                      std::unordered_map<std::string,data::DynamicString>::~unordered_map((std::unordered_map<std::string,data::DynamicString> *const)(v2 + 4304));
                                                      v126 = ((v2 + 4304) >> 3) + 2147450880;
                                                      *(_DWORD *)v126 = -117901064;
                                                      *(_WORD *)(v126 + 4) = -1800;
                                                      *(_BYTE *)(v126 + 6) = -8;
                                                      *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -8;
                                                      *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -8;
                                                    }
                                                    else
                                                    {
                                                      v127 = std::any::type((const std::any *const)(v2 + 1376));
                                                      if ( std::type_info::operator==(
                                                             v127,
                                                             (const std::type_info *)&`typeinfo for'data::DynamicFloat) )
                                                      {
                                                        *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(char *)(((v2 + 3584) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 3615) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 3615) >> 3) + 0x7FFF8000) )
                                                        {
                                                          __asan_report_store_n(v2 + 3584, 32LL);
                                                        }
                                                        std::any_cast<data::DynamicFloat>(
                                                          (data::DynamicFloat *)(v2 + 3584),
                                                          (std::any *)(v2 + 1376));
                                                        v128 = ((v2 + 2304) >> 3) + 2147450880;
                                                        *(_WORD *)v128 = 0;
                                                        *(_BYTE *)(v128 + 2) = 0;
                                                        if ( *(char *)(((v2 + 2304) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 2327) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 - 32 + 55) & 7) >= *(_BYTE *)(((v2 + 2327) >> 3) + 0x7FFF8000) )
                                                        {
                                                          __asan_report_store_n(v2 + 2304, 24LL);
                                                        }
                                                        v129 = (char *)(v2 + 3584);
                                                        getAllDynamicKeyFromDynamicFloat[abi:cxx11](
                                                          (std::vector<std::string> *)(v2 + 2304),
                                                          (const data::DynamicFloat *)(v2 + 3584));
                                                        __for_range_17 = (std::vector<std::string> *)(v2 + 2304);
                                                        *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) )
                                                          __asan_report_store8(v2 + 1248, v129);
                                                        *(std::vector<std::string>::iterator *)(v2 + 1248) = std::vector<std::string>::begin(__for_range_17);
                                                        *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) )
                                                          __asan_report_store8(v2 + 1280, v129);
                                                        *(std::vector<std::string>::iterator *)(v2 + 1280) = std::vector<std::string>::end(__for_range_17);
                                                        while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
                                                                  (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 1248),
                                                                  (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 1280)) )
                                                        {
                                                          key = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 1248));
                                                          if ( !JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::string const&)#1}::operator()(
                                                                  (const JsonConfigMgr::checkAbilityConfig::<lambda(const string&)> *const)(v2 + 480),
                                                                  key) )
                                                            ret = -1;
                                                          __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 1248));
                                                        }
                                                        *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -8;
                                                        *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -8;
                                                        std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 2304));
                                                        data::DynamicFloat::~DynamicFloat((data::DynamicFloat *const)(v2 + 3584));
                                                        *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = -117901064;
                                                        v130 = ((v2 + 2304) >> 3) + 2147450880;
                                                        *(_WORD *)v130 = -1800;
                                                        *(_BYTE *)(v130 + 2) = -8;
                                                      }
                                                      else
                                                      {
                                                        v131 = std::any::type((const std::any *const)(v2 + 1376));
                                                        if ( std::type_info::operator==(
                                                               v131,
                                                               (const std::type_info *)&`typeinfo for'data::DynamicInt) )
                                                        {
                                                          v132 = ((v2 + 3840) >> 3) + 2147450880;
                                                          *(_DWORD *)v132 = 0;
                                                          *(_WORD *)(v132 + 4) = 0;
                                                          if ( *(char *)(((v2 + 3840) >> 3) + 0x7FFF8000) < 0
                                                            || *(_BYTE *)(((v2 + 3887) >> 3) + 0x7FFF8000) != 0
                                                            && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 3887) >> 3) + 0x7FFF8000) )
                                                          {
                                                            __asan_report_store_n(v2 + 3840, 48LL);
                                                          }
                                                          std::any_cast<data::DynamicInt>(
                                                            (data::DynamicInt *)(v2 + 3840),
                                                            (std::any *)(v2 + 1376));
                                                          if ( *(char *)(((v2 + 3840) >> 3) + 0x7FFF8000) < 0 )
                                                            __asan_report_load1(v2 + 3840, v2 + 1376, v2 + 3840);
                                                          if ( *(_BYTE *)(v2 + 3840)
                                                            && !common::tools::MiscUtils::isContains<std::unordered_map<std::string,data::DynamicArgument>,std::string>(
                                                                  &config_ability->ability_specials,
                                                                  (const std::string *)(v2 + 3848)) )
                                                          {
                                                            *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = 0;
                                                            if ( *(char *)(((v2 + 3648) >> 3) + 0x7FFF8000) < 0
                                                              || *(_BYTE *)(((v2 + 3679) >> 3) + 0x7FFF8000) != 0
                                                              && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 3679) >> 3) + 0x7FFF8000) )
                                                            {
                                                              __asan_report_store_n(v2 + 3648, 32LL);
                                                            }
                                                            common::milog::MiLogStream::create(
                                                              (common::milog::MiLogStream *)(v2 + 3648),
                                                              &common::milog::MiLogDefault::default_log_obj_,
                                                              4u,
                                                              "./src/json_config_mgr.cpp",
                                                              "checkAbilityConfig",
                                                              3753);
                                                            v133 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                     (common::milog::MiLogStream *const)(v2 + 3648),
                                                                     (const char (*)[16])"[CONFIG_ERROR] ");
                                                            v134 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                                                                     v133,
                                                                     (const char (*)[37])byte_1A524660);
                                                            v135 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                                                     v134,
                                                                     (const std::string *)(v2 + 3848));
                                                            v136 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                                                                     v135,
                                                                     (const char (*)[14])" AbilityName:");
                                                            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                                              v136,
                                                              &config_ability->ability_name);
                                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3648));
                                                            *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = -117901064;
                                                            ret = -1;
                                                          }
                                                          data::DynamicInt::~DynamicInt((data::DynamicInt *const)(v2 + 3840));
                                                          v137 = ((v2 + 3840) >> 3) + 2147450880;
                                                          *(_DWORD *)v137 = -117901064;
                                                          *(_WORD *)(v137 + 4) = -1800;
                                                        }
                                                        else
                                                        {
                                                          v138 = std::any::type((const std::any *const)(v2 + 1376));
                                                          if ( std::type_info::operator==(
                                                                 v138,
                                                                 (const std::type_info *)&`typeinfo for'data::DynamicString) )
                                                          {
                                                            v139 = ((v2 + 4512) >> 3) + 2147450880;
                                                            *(_DWORD *)v139 = 0;
                                                            *(_DWORD *)(v139 + 4) = 0;
                                                            *(_WORD *)(v139 + 8) = 0;
                                                            if ( *(char *)(((v2 + 4512) >> 3) + 0x7FFF8000) < 0
                                                              || *(_BYTE *)(((v2 + 4591) >> 3) + 0x7FFF8000) != 0
                                                              && (char)((v2 - 96 + 79) & 7) >= *(_BYTE *)(((v2 + 4591) >> 3) + 0x7FFF8000) )
                                                            {
                                                              __asan_report_store_n(v2 + 4512, 80LL);
                                                            }
                                                            std::any_cast<data::DynamicString>(
                                                              (data::DynamicString *)(v2 + 4512),
                                                              (std::any *)(v2 + 1376));
                                                            if ( *(char *)(((v2 + 4512) >> 3) + 0x7FFF8000) < 0 )
                                                              __asan_report_load1(v2 + 4512, v2 + 1376, v2 + 4512);
                                                            if ( *(_BYTE *)(v2 + 4512)
                                                              && !common::tools::MiscUtils::isContains<std::unordered_map<std::string,data::DynamicArgument>,std::string>(
                                                                    &config_ability->ability_specials,
                                                                    (const std::string *)(v2 + 4520)) )
                                                            {
                                                              *(_DWORD *)(((v2 + 3712) >> 3) + 0x7FFF8000) = 0;
                                                              if ( *(char *)(((v2 + 3712) >> 3) + 0x7FFF8000) < 0
                                                                || *(_BYTE *)(((v2 + 3743) >> 3) + 0x7FFF8000) != 0
                                                                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3743) >> 3) + 0x7FFF8000) )
                                                              {
                                                                __asan_report_store_n(v2 + 3712, 32LL);
                                                              }
                                                              common::milog::MiLogStream::create(
                                                                (common::milog::MiLogStream *)(v2 + 3712),
                                                                &common::milog::MiLogDefault::default_log_obj_,
                                                                4u,
                                                                "./src/json_config_mgr.cpp",
                                                                "checkAbilityConfig",
                                                                3765);
                                                              v140 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                       (common::milog::MiLogStream *const)(v2 + 3712),
                                                                       (const char (*)[16])"[CONFIG_ERROR] ");
                                                              v141 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                                                                       v140,
                                                                       (const char (*)[37])byte_1A524660);
                                                              v142 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                                                       v141,
                                                                       (const std::string *)(v2 + 4520));
                                                              v143 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                                                                       v142,
                                                                       (const char (*)[14])" AbilityName:");
                                                              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                                                v143,
                                                                &config_ability->ability_name);
                                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3712));
                                                              *(_DWORD *)(((v2 + 3712) >> 3) + 0x7FFF8000) = -117901064;
                                                              ret = -1;
                                                            }
                                                            data::DynamicString::~DynamicString((data::DynamicString *const)(v2 + 4512));
                                                            v144 = ((v2 + 4512) >> 3) + 2147450880;
                                                            *(_DWORD *)v144 = -117901064;
                                                            *(_DWORD *)(v144 + 4) = -117901064;
                                                            *(_WORD *)(v144 + 8) = -1800;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          std::any::~any((std::any *const)(v2 + 1376));
          *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -1800;
        }
        std::any::~any((std::any *const)(v2 + 1344));
        std::queue<std::any>::~queue((std::queue<std::any> *const)(v2 + 4400));
      }
      *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
      v145 = ((v2 + 4400) >> 3) + 2147450880;
      *(_DWORD *)v145 = -117901064;
      *(_DWORD *)(v145 + 4) = -117901064;
      *(_WORD *)(v145 + 8) = -1800;
      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -1800;
      std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v2 + 416));
    }
    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v2 + 352));
  }
  *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
  if ( ret )
  {
    *(_DWORD *)(((v2 + 3776) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 3776) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 3807) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 3807) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 3776, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 3776),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkAbilityConfig",
      3780);
    v146 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 3776),
             (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v146, (const char (*)[23])byte_1A525380);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3776));
  }
  if ( v206 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81D0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 472) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF81DC) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8334) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862841) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147451356 - (((_DWORD)v4 + 2147451364) & 0xFFFFFFF8) + 352) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_7(v2, 6624LL, v206);
  }
  return ret;
};

// Line 3651: range 000000000F282A8C-000000000F282D22
bool __cdecl JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::string const&)#1}::operator()(
        const JsonConfigMgr::checkAbilityConfig::<lambda(const string&)> *const __closure,
        const std::string *float_special_str)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  bool result; // al
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::string const&)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  if ( !common::tools::MiscUtils::isContains<std::unordered_map<std::string,data::DynamicArgument>,std::string>(
          &__closure->__config_ability->ability_specials,
          float_special_str)
    && !data::isValidFightPropTypeName(float_special_str) )
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "operator()",
      3655);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v6, (const char (*)[37])byte_1A524660);
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, float_special_str);
    v9 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v8, (const char (*)[14])" AbilityName:");
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, &__closure->__config_ability->ability_name);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = 0;
  }
  else
  {
    result = 1;
  }
  if ( v11 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3663: range 000000000F282D24-000000000F282D7B
void __cdecl JsonConfigMgr::checkAbilityConfig(void)::{lambda(std::any &)#2}::operator()(
        const JsonConfigMgr::checkAbilityConfig::<lambda(std::any&)> *const __closure,
        std::any *member)
{
  std::queue<std::any> *que; // rbx
  std::remove_reference<std::any&>::type *v3; // rax

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  que = __closure->__que;
  v3 = std::move<std::any &>(member);
  std::queue<std::any>::push(que, v3);
};

// Line 3787: range 000000000F288E56-000000000F2896DC
int32_t __cdecl JsonConfigMgr::checkSingleAbilityConfigMember(const JsonConfigMgr *const this, const std::any *member)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::type_info *v6; // rax
  const std::type_info *v7; // rax
  const std::type_info *v8; // rax
  const std::type_info *v9; // rax
  std::__shared_ptr_access<data::WatcherSystemMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  _BOOL4 v11; // r15d
  std::__shared_ptr_access<data::ServerFinishWatcherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  int v13; // r15d
  const std::type_info *v14; // rax
  std::__shared_ptr_access<data::DoWatcherSystemAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int v16; // r15d
  int32_t result; // eax
  char v18[688]; // [rsp+20h] [rbp-2B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(640LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 16 21 config_mixin_ptr:3802 64 16 36 config_watcher_system_mixin_ptr:3803 96 16 43 config_s"
                        "erver_finish_watcher_mixin_ptr:3808 128 16 22 config_action_ptr:3816 160 16 33 do_watcher_system"
                        "_action_ptr:3817 192 64 9 <unknown> 288 104 9 <unknown> 432 144 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkSingleAbilityConfigMember;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862728] = -218959118;
  v5[536862732] = -218959360;
  v5[536862733] = 62194;
  v5[536862738] = -202116109;
  v5[536862739] = -202116109;
  v6 = std::any::type(member);
  if ( std::type_info::operator==(v6, (const std::type_info *)&`typeinfo for'data::WatcherSystemMixin) )
  {
    if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 391) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 121) & 7) >= *(_BYTE *)(((v3 + 391) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 288, 104LL);
    }
    std::any_cast<data::WatcherSystemMixin>((data::WatcherSystemMixin *)(v3 + 288), member);
    v2 = JsonConfigMgr::checkWatcherSystemMixin(this, (const data::WatcherSystemMixin *)(v3 + 288));
    data::WatcherSystemMixin::~WatcherSystemMixin((data::WatcherSystemMixin *const)(v3 + 288));
    goto LABEL_41;
  }
  v7 = std::any::type(member);
  if ( std::type_info::operator==(v7, (const std::type_info *)&`typeinfo for'data::ServerFinishWatcherMixin) )
  {
    if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 192, 64LL);
    }
    std::any_cast<data::ServerFinishWatcherMixin>((data::ServerFinishWatcherMixin *)(v3 + 192), member);
    v2 = JsonConfigMgr::checkServerFinishWatcherMixin(this, (const data::ServerFinishWatcherMixin *)(v3 + 192));
    data::ServerFinishWatcherMixin::~ServerFinishWatcherMixin((data::ServerFinishWatcherMixin *const)(v3 + 192));
    goto LABEL_41;
  }
  v8 = std::any::type(member);
  if ( std::type_info::operator==(v8, (const std::type_info *)&`typeinfo for'data::DoWatcherSystemAction) )
  {
    if ( *(char *)(((v3 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 432, 144LL);
    }
    std::any_cast<data::DoWatcherSystemAction>((data::DoWatcherSystemAction *)(v3 + 432), member);
    v2 = JsonConfigMgr::checkDoWatcherSystemAction(this, (const data::DoWatcherSystemAction *)(v3 + 432));
    data::DoWatcherSystemAction::~DoWatcherSystemAction((data::DoWatcherSystemAction *const)(v3 + 432));
    goto LABEL_41;
  }
  v9 = std::any::type(member);
  if ( std::type_info::operator==(v9, (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbilityMixin>) )
  {
    if ( *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::any_cast<std::shared_ptr<data::ConfigAbilityMixin>>((const std::any *)(v3 + 32));
    if ( *(_WORD *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::WatcherSystemMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(v3 + 64));
    if ( std::operator!=<data::WatcherSystemMixin>(0LL, (const std::shared_ptr<data::WatcherSystemMixin> *)(v3 + 64)) )
    {
      v10 = std::__shared_ptr_access<data::WatcherSystemMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::WatcherSystemMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v2 = JsonConfigMgr::checkWatcherSystemMixin(this, v10);
      v11 = 0;
    }
    else
    {
      if ( *(_WORD *)(((v3 + 96) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ServerFinishWatcherMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(v3 + 96));
      if ( std::operator!=<data::ServerFinishWatcherMixin>(
             0LL,
             (const std::shared_ptr<data::ServerFinishWatcherMixin> *)(v3 + 96)) )
      {
        v12 = std::__shared_ptr_access<data::ServerFinishWatcherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ServerFinishWatcherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        v2 = JsonConfigMgr::checkServerFinishWatcherMixin(this, v12);
        v13 = 0;
      }
      else
      {
        v13 = 1;
      }
      std::shared_ptr<data::ServerFinishWatcherMixin>::~shared_ptr((std::shared_ptr<data::ServerFinishWatcherMixin> *const)(v3 + 96));
      v11 = v13 == 1;
    }
    std::shared_ptr<data::WatcherSystemMixin>::~shared_ptr((std::shared_ptr<data::WatcherSystemMixin> *const)(v3 + 64));
    std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)(v3 + 32));
    if ( !v11 )
      goto LABEL_41;
LABEL_40:
    v2 = 0;
    goto LABEL_41;
  }
  v14 = std::any::type(member);
  if ( !std::type_info::operator==(
          v14,
          (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbilityAction>) )
    goto LABEL_40;
  if ( *(_WORD *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::any_cast<std::shared_ptr<data::ConfigAbilityAction>>((const std::any *)(v3 + 128));
  if ( *(_WORD *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::dynamic_pointer_cast<data::DoWatcherSystemAction,data::ConfigAbilityAction>((const std::shared_ptr<data::ConfigAbilityAction> *)(v3 + 160));
  if ( std::operator!=<data::DoWatcherSystemAction>(
         0LL,
         (const std::shared_ptr<data::DoWatcherSystemAction> *)(v3 + 160)) )
  {
    v15 = std::__shared_ptr_access<data::DoWatcherSystemAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::DoWatcherSystemAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
    v2 = JsonConfigMgr::checkDoWatcherSystemAction(this, v15);
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  std::shared_ptr<data::DoWatcherSystemAction>::~shared_ptr((std::shared_ptr<data::DoWatcherSystemAction> *const)(v3 + 160));
  std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr((std::shared_ptr<data::ConfigAbilityAction> *const)(v3 + 128));
  if ( v16 == 1 )
    goto LABEL_40;
LABEL_41:
  result = v2;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3827: range 000000000F2896DE-000000000F28993E
int32_t __cdecl JsonConfigMgr::checkWatcherSystemMixin(
        const JsonConfigMgr *const this,
        const data::WatcherSystemMixin *config)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  WatcherExcelConfigMgr *watcher_config_mgr; // [rsp+18h] [rbp-88h]
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkWatcherSystemMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  watcher_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.watcher_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&config->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config->watcher_id);
  }
  if ( WatcherExcelConfigMgr::findWatcherConfigIncludingDisused(watcher_config_mgr, config->watcher_id) )
  {
    result = 0;
  }
  else
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWatcherSystemMixin",
      3831);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v5, (const char (*)[20])"invalid watcher_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config->watcher_id);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v7, (const char (*)[23])" in WatcherSystemMixin");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = -1;
  }
  if ( v10 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3838: range 000000000F289940-000000000F289BA0
int32_t __cdecl JsonConfigMgr::checkServerFinishWatcherMixin(
        const JsonConfigMgr *const this,
        const data::ServerFinishWatcherMixin *config)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  WatcherExcelConfigMgr *watcher_config_mgr; // [rsp+18h] [rbp-88h]
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkServerFinishWatcherMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  watcher_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.watcher_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&config->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config->watcher_id);
  }
  if ( WatcherExcelConfigMgr::findWatcherConfigIncludingDisused(watcher_config_mgr, config->watcher_id) )
  {
    result = 0;
  }
  else
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkServerFinishWatcherMixin",
      3842);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v5, (const char (*)[20])"invalid watcher_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config->watcher_id);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      v7,
      (const char (*)[29])" in ServerFinishWatcherMixin");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = -1;
  }
  if ( v10 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3849: range 000000000F289BA2-000000000F289E09
int32_t __cdecl JsonConfigMgr::checkDoWatcherSystemAction(
        const JsonConfigMgr *const this,
        const data::DoWatcherSystemAction *config)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  WatcherExcelConfigMgr *watcher_config_mgr; // [rsp+18h] [rbp-88h]
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkDoWatcherSystemAction;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  watcher_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.watcher_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&config->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config->watcher_id);
  }
  if ( WatcherExcelConfigMgr::findWatcherConfigIncludingDisused(watcher_config_mgr, config->watcher_id) )
  {
    result = 0;
  }
  else
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkDoWatcherSystemAction",
      3853);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v5, (const char (*)[20])"invalid watcher_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config->watcher_id);
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v7, (const char (*)[26])" in DoWatcherSystemAction");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = -1;
  }
  if ( v10 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3861: range 000000000F289E0A-000000000F28A2F1
int32_t __cdecl JsonConfigMgr::checkAvatarConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+14h] [rbp-13Ch]
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>> *__for_range; // [rsp+18h] [rbp-138h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false>::reference __in; // [rsp+20h] [rbp-130h]
  const unsigned int *avatar_id; // [rsp+28h] [rbp-128h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> > >::type *config_avatar_ptr; // [rsp+30h] [rbp-120h]
  data::ConfigEntityAbilityEntryList *__for_range_0; // [rsp+40h] [rbp-110h]
  data::ConfigEntityAbilityEntry *ability_entry; // [rsp+48h] [rbp-108h]
  char v18[256]; // [rsp+50h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 16 __for_begin:3863 64 8 14 __for_end:3863 96 8 16 __for_begin:3866 128 8 14 __for_end:38"
                        "66 160 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkAvatarConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -202116109;
  ret = 0;
  __for_range = &this->config_avatar_map_;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false> *)(v2 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false> *const)(v2 + 32));
    avatar_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigAvatar>>(__in);
    config_avatar_ptr = std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigAvatar>>(__in);
    __for_range_0 = &std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_avatar_ptr)->abilities;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 96) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 128) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 128)) )
    {
      ability_entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 96));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry->ability_name) )
      {
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 160, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 160),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkAvatarConfig",
          3870);
        v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 160),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v6, (const char (*)[24])byte_1A525720);
        v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &ability_entry->ability_name);
        v9 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v8, (const char (*)[13])", avatar_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, avatar_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3880: range 000000000F28A2F2-000000000F28A97A
int32_t __cdecl JsonConfigMgr::checkMonsterConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  data::ConfigGlobalValue *p_global_value; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+14h] [rbp-17Ch]
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>> *__for_range; // [rsp+18h] [rbp-178h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false>::reference __in; // [rsp+20h] [rbp-170h]
  const unsigned int *monster_id; // [rsp+28h] [rbp-168h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> > >::type *config_monster_ptr; // [rsp+30h] [rbp-160h]
  data::ConfigEntityAbilityEntryList *__for_range_0; // [rsp+40h] [rbp-150h]
  data::ConfigEntityAbilityEntry *ability_entry; // [rsp+48h] [rbp-148h]
  char v22[320]; // [rsp+50h] [rbp-140h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 8 16 __for_begin:3882 64 8 14 __for_end:3882 96 8 16 __for_begin:3885 128 8 14 __for_end:38"
                        "85 160 32 9 <unknown> 224 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkMonsterConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -202116109;
  ret = 0;
  __for_range = &this->config_monster_map_;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v2 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false> *const)(v2 + 32));
    monster_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigMonster>>(__in);
    config_monster_ptr = std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigMonster>>(__in);
    __for_range_0 = &std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_monster_ptr)->abilities;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 96) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 128) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 128)) )
    {
      ability_entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 96));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry->ability_name) )
      {
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 160, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 160),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkMonsterConfig",
          3889);
        v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 160),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v6, (const char (*)[24])byte_1A525840);
        v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &ability_entry->ability_name);
        v9 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v8, (const char (*)[14])", monster_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, monster_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    p_global_value = &std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_monster_ptr)->global_value;
    if ( JsonConfigMgr::checkAndProcServerGlobalValue(this, p_global_value) )
    {
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkMonsterConfig",
        3895);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 224),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v11, (const char (*)[19])byte_1A5258C0);
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, monster_id);
      common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v13, (const char (*)[46])byte_1A525900);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3904: range 000000000F28A97C-000000000F28B5A5
int32_t __cdecl JsonConfigMgr::checkGadgetConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  char *v10; // rsi
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  char v12; // cl
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  bool *p_use_creator_property; // rax
  char *v15; // rsi
  __int64 v16; // rdx
  char v17; // r14
  char v18; // al
  __int64 v19; // rsi
  __int64 v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  data::ConfigGlobalValue *p_global_value; // rdx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  int32_t result; // eax
  bool is_has_hp; // [rsp+1Bh] [rbp-255h]
  int32_t ret; // [rsp+1Ch] [rbp-254h]
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *__for_range; // [rsp+20h] [rbp-250h]
  data::ConfigGadgetMap *__for_range_1; // [rsp+28h] [rbp-248h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true>::reference v32; // [rsp+30h] [rbp-240h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *json_name; // [rsp+38h] [rbp-238h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *config_gadget_ptr_0; // [rsp+40h] [rbp-230h]
  data::ConfigCombatProperty *property; // [rsp+48h] [rbp-228h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false>::reference __in; // [rsp+50h] [rbp-220h]
  const unsigned int *gadget_id; // [rsp+58h] [rbp-218h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> > >::type *config_gadget_ptr; // [rsp+60h] [rbp-210h]
  data::ConfigEntityAbilityEntryList *__for_range_0; // [rsp+70h] [rbp-200h]
  data::ConfigEntityAbilityEntry *ability_entry; // [rsp+78h] [rbp-1F8h]
  char v41[496]; // [rsp+80h] [rbp-1F0h] BYREF

  v2 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(448LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 4 9 <unknown> 64 8 16 __for_begin:3906 96 8 14 __for_end:3906 128 8 16 __for_begin:3909 16"
                        "0 8 14 __for_end:3909 192 8 16 __for_begin:3918 224 8 14 __for_end:3918 256 32 9 <unknown> 320 3"
                        "2 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkGadgetConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -202116109;
  ret = 0;
  __for_range = &this->config_id_gadget_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false> *)(v2 + 96)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false> *const)(v2 + 64));
    gadget_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigGadget>>(__in);
    config_gadget_ptr = std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigGadget>>(__in);
    __for_range_0 = &std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr)->abilities;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 128) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 160) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 160)) )
    {
      ability_entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 128));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry->ability_name) )
      {
        *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 256, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 256),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkGadgetConfig",
          3913);
        v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 256),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v6, (const char (*)[24])byte_1A525A60);
        v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &ability_entry->ability_name);
        v9 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v8, (const char (*)[13])", gadget_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, gadget_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
        *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  __for_range_1 = &this->config_gadget_map_;
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 192, v5);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 192) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::begin(__for_range_1);
  *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 224, v5);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 224) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::end(__for_range_1);
  while ( 1 )
  {
    v10 = (char *)(v2 + 224);
    if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v2 + 192),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v2 + 224)) )
      break;
    v32 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v2 + 192));
    json_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigGadget>>(v32);
    config_gadget_ptr_0 = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigGadget>>(v32);
    v11 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr_0);
    v12 = *(_BYTE *)(((unsigned __int64)&v11->combat.is_json_loaded >> 3) + 0x7FFF8000);
    if ( v12 != 0 && (((unsigned __int8)v11 + 52) & 7) >= v12 )
    {
      LOBYTE(v10) = v12 != 0;
      __asan_report_load1(&v11->combat.is_json_loaded, v10, v11);
    }
    if ( v11->combat.is_json_loaded )
    {
      v13 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr_0);
      property = &v13->combat.property;
      p_use_creator_property = &v13->combat.property.use_creator_property;
      v15 = (char *)((unsigned __int8)p_use_creator_property & 7);
      v16 = (*(_BYTE *)(((unsigned __int64)p_use_creator_property >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)p_use_creator_property >> 3) + 0x7FFF8000));
      if ( (_BYTE)v16 )
        __asan_report_load1(p_use_creator_property, v15, v16);
      if ( property->use_creator_property )
      {
        v17 = 0;
        if ( std::vector<data::CombatPropertyIndex>::empty(&property->use_creator_property_partly) )
          goto LABEL_38;
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 48, v15);
        *(_DWORD *)(v2 + 48) = 0;
        v17 = 1;
        v15 = (char *)(v2 + 48);
        if ( common::tools::MiscUtils::isContains<data::CombatPropertyIndex>(
               &property->use_creator_property_partly,
               (const data::CombatPropertyIndex *)(v2 + 48)) )
        {
LABEL_38:
          v18 = 1;
        }
        else
        {
          v18 = 0;
        }
        is_has_hp = v18;
        if ( v17 )
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      }
      else
      {
        v15 = (char *)((((_BYTE)property + 36) & 7u) + 3);
        if ( *(_BYTE *)(((unsigned __int64)&property->hp >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)property + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&property->hp >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&property->hp);
        }
        is_has_hp = property->hp > 0.0;
      }
      if ( !is_has_hp )
      {
        if ( *(char *)(((unsigned __int64)&property->is_invincible >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&property->is_invincible, v15, &property->is_invincible);
        if ( !property->is_invincible )
        {
          v19 = ((_BYTE)property + 65) & 7;
          v20 = (*(_BYTE *)(((unsigned __int64)&property->is_lock_hp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v19 >= *(_BYTE *)(((unsigned __int64)&property->is_lock_hp >> 3) + 0x7FFF8000));
          if ( (_BYTE)v20 )
            __asan_report_load1(&property->is_lock_hp, v19, v20);
          if ( !property->is_lock_hp )
          {
            *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkGadgetConfig",
              3937);
            v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v22 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
                    v21,
                    (const char (*)[66])byte_1A525AA0);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, json_name);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
            *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
        }
      }
      p_global_value = &std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr_0)->global_value;
      if ( JsonConfigMgr::checkAndProcServerGlobalValue(this, p_global_value) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkGadgetConfig",
          3942);
        v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v25 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v24, (const char (*)[8])byte_1A525B20);
        v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, json_name);
        common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v26, (const char (*)[46])byte_1A525900);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
    }
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v2 + 192));
  }
  result = ret;
  if ( v41 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3951: range 000000000F28B5A6-000000000F28C96D
int32_t __cdecl JsonConfigMgr::checkTalentConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  std::string *p_ability_name; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<data::AddAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  std::string *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<data::ModifyAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  std::string *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<data::UnlockTalentParam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rdx
  std::__shared_ptr_access<data::ModifySkillCD,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rdx
  uint32_t *p_skill_id; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  std::__shared_ptr_access<data::ModifySkillCD,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  std::__shared_ptr_access<data::ModifySkillCost,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rdx
  uint32_t *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // r14
  std::__shared_ptr_access<data::ModifySkillCost,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  std::__shared_ptr_access<data::ModifySkillPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rdx
  uint32_t *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // r14
  std::__shared_ptr_access<data::ModifySkillPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rdx
  int32_t ret; // [rsp+1Ch] [rbp-354h]
  HK4EDesignConfig *design_config; // [rsp+20h] [rbp-350h]
  data::ConfigTalentMixinGroupMap *__for_range; // [rsp+28h] [rbp-348h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true>::reference __in; // [rsp+30h] [rbp-340h]
  const std::string *talent_name; // [rsp+38h] [rbp-338h]
  std::tuple_element<1,std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> > >::type *__for_range_0; // [rsp+50h] [rbp-320h]
  char v52[784]; // [rsp+60h] [rbp-310h] BYREF

  v2 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(736LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "16 32 8 16 __for_begin:3954 64 8 14 __for_end:3954 96 8 16 __for_begin:3957 128 8 14 __for_end:3"
                        "957 160 16 20 add_ability_ptr:3959 192 16 23 modify_ability_ptr:3969 224 16 22 unlock_talent_ptr"
                        ":3979 256 16 24 modify_skill_cd_ptr:3989 288 16 26 modify_skill_cost_ptr:3999 320 16 27 modify_s"
                        "kill_point_ptr:4009 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> "
                        "608 32 9 <unknown> 672 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkTalentConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -202116109;
  ret = 0;
  design_config = JsonConfigMgr::getConfig(this);
  __for_range = &this->config_talent_map_;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::iterator *)(v2 + 32) = std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::iterator *)(v2 + 64) = std::unordered_map<std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,true> *)(v2 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *const)(v2 + 32));
    talent_name = std::get<0ul,std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>(__in);
    __for_range_0 = std::get<1ul,std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>(__in);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::vector<std::shared_ptr<data::ConfigTalentMixin>>::iterator *)(v2 + 96) = std::vector<std::shared_ptr<data::ConfigTalentMixin>>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<std::shared_ptr<data::ConfigTalentMixin>>::iterator *)(v2 + 128) = std::vector<std::shared_ptr<data::ConfigTalentMixin>>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigTalentMixin> *,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>(
              (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigTalentMixin>*,std::vector<std::shared_ptr<data::ConfigTalentMixin>> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigTalentMixin>*,std::vector<std::shared_ptr<data::ConfigTalentMixin>> > *)(v2 + 128)) )
    {
      __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigTalentMixin> *,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigTalentMixin>*,std::vector<std::shared_ptr<data::ConfigTalentMixin>> > *const)(v2 + 96));
      *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::AddAbility,data::ConfigTalentMixin>((const std::shared_ptr<data::ConfigTalentMixin> *)(v2 + 160));
      if ( std::operator!=<data::AddAbility>((const std::shared_ptr<data::AddAbility> *)(v2 + 160), 0LL) )
      {
        p_ability_name = &std::__shared_ptr_access<data::AddAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AddAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160))->ability_name;
        if ( !JsonConfigMgr::checkAbilityName(this, p_ability_name) )
        {
          *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 352, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 352),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkTalentConfig",
            3964);
          v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 352),
                 (const char (*)[16])"[CONFIG_ERROR] ");
          v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v7, (const char (*)[24])byte_1A525720);
          v9 = std::__shared_ptr_access<data::AddAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AddAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
          v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &v9->ability_name);
          v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v10, (const char (*)[16])byte_1A525D20);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, talent_name);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
          *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      else
      {
        *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ModifyAbility,data::ConfigTalentMixin>((const std::shared_ptr<data::ConfigTalentMixin> *)(v2 + 192));
        if ( std::operator!=<data::ModifyAbility>((const std::shared_ptr<data::ModifyAbility> *)(v2 + 192), 0LL) )
        {
          v12 = &std::__shared_ptr_access<data::ModifyAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifyAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192))->ability_name;
          if ( !JsonConfigMgr::checkAbilityName(this, v12) )
          {
            *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 416, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 416),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkTalentConfig",
              3974);
            v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 416),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v14 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v13,
                    (const char (*)[24])byte_1A525720);
            v15 = std::__shared_ptr_access<data::ModifyAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifyAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
            v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, &v15->ability_name);
            v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    v16,
                    (const char (*)[16])byte_1A525D20);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, talent_name);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
            *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
        }
        else
        {
          *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::UnlockTalentParam,data::ConfigTalentMixin>((const std::shared_ptr<data::ConfigTalentMixin> *)(v2 + 224));
          if ( std::operator!=<data::UnlockTalentParam>(
                 (const std::shared_ptr<data::UnlockTalentParam> *)(v2 + 224),
                 0LL) )
          {
            v18 = &std::__shared_ptr_access<data::UnlockTalentParam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::UnlockTalentParam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224))->ability_name;
            if ( !JsonConfigMgr::checkAbilityName(this, v18) )
            {
              *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 480, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 480),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkTalentConfig",
                3984);
              v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 480),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v20 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      v19,
                      (const char (*)[24])byte_1A525720);
              v21 = std::__shared_ptr_access<data::UnlockTalentParam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::UnlockTalentParam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224));
              v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, &v21->ability_name);
              v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v22,
                      (const char (*)[16])byte_1A525D20);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, talent_name);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
              *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
          }
          else
          {
            *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::ModifySkillCD,data::ConfigTalentMixin>((const std::shared_ptr<data::ConfigTalentMixin> *)(v2 + 256));
            if ( std::operator!=<data::ModifySkillCD>((const std::shared_ptr<data::ModifySkillCD> *)(v2 + 256), 0LL) )
            {
              v24 = std::__shared_ptr_access<data::ModifySkillCD,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifySkillCD,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 256));
              p_skill_id = &v24->skill_id;
              if ( *(_BYTE *)(((unsigned __int64)p_skill_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)p_skill_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_skill_id >> 3)
                                                                             + 0x7FFF8000) )
              {
                __asan_report_load4(p_skill_id);
              }
              if ( !data::AvatarSkillExcelConfigMgrBase::findAvatarSkillExcelConfig(
                      &design_config->txt_config_mgr.avatar_skill_config_mgr,
                      v24->skill_id) )
              {
                *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 544, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 544),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkTalentConfig",
                  3994);
                v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 544),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v27 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                        v26,
                        (const char (*)[19])byte_1A525D60);
                v28 = std::__shared_ptr_access<data::ModifySkillCD,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifySkillCD,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 256));
                v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &v28->skill_id);
                v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v29,
                        (const char (*)[16])byte_1A525D20);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, talent_name);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
                *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
            }
            else
            {
              *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::ModifySkillCost,data::ConfigTalentMixin>((const std::shared_ptr<data::ConfigTalentMixin> *)(v2 + 288));
              if ( std::operator!=<data::ModifySkillCost>(
                     (const std::shared_ptr<data::ModifySkillCost> *)(v2 + 288),
                     0LL) )
              {
                v31 = std::__shared_ptr_access<data::ModifySkillCost,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifySkillCost,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
                v32 = &v31->skill_id;
                if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v32);
                }
                if ( !data::AvatarSkillExcelConfigMgrBase::findAvatarSkillExcelConfig(
                        &design_config->txt_config_mgr.avatar_skill_config_mgr,
                        v31->skill_id) )
                {
                  *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 608, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 608),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "checkTalentConfig",
                    4004);
                  v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 608),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v34 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                          v33,
                          (const char (*)[19])byte_1A525D60);
                  v35 = std::__shared_ptr_access<data::ModifySkillCost,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifySkillCost,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
                  v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &v35->skill_id);
                  v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          v36,
                          (const char (*)[16])byte_1A525D20);
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v37, talent_name);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
                  *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
                  ret = -1;
                }
              }
              else
              {
                *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::ModifySkillPoint,data::ConfigTalentMixin>((const std::shared_ptr<data::ConfigTalentMixin> *)(v2 + 320));
                if ( std::operator!=<data::ModifySkillPoint>(
                       (const std::shared_ptr<data::ModifySkillPoint> *)(v2 + 320),
                       0LL) )
                {
                  v38 = std::__shared_ptr_access<data::ModifySkillPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifySkillPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 320));
                  v39 = &v38->skill_id;
                  if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(v39);
                  }
                  if ( !data::AvatarSkillExcelConfigMgrBase::findAvatarSkillExcelConfig(
                          &design_config->txt_config_mgr.avatar_skill_config_mgr,
                          v38->skill_id) )
                  {
                    *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 672, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 672),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "checkTalentConfig",
                      4014);
                    v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 672),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v41 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                            v40,
                            (const char (*)[19])byte_1A525D60);
                    v42 = std::__shared_ptr_access<data::ModifySkillPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifySkillPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 320));
                    v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, &v42->skill_id);
                    v44 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            v43,
                            (const char (*)[16])byte_1A525D20);
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v44, talent_name);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
                    *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
                    ret = -1;
                  }
                }
                std::shared_ptr<data::ModifySkillPoint>::~shared_ptr((std::shared_ptr<data::ModifySkillPoint> *const)(v2 + 320));
              }
              std::shared_ptr<data::ModifySkillCost>::~shared_ptr((std::shared_ptr<data::ModifySkillCost> *const)(v2 + 288));
            }
            std::shared_ptr<data::ModifySkillCD>::~shared_ptr((std::shared_ptr<data::ModifySkillCD> *const)(v2 + 256));
          }
          std::shared_ptr<data::UnlockTalentParam>::~shared_ptr((std::shared_ptr<data::UnlockTalentParam> *const)(v2 + 224));
        }
        std::shared_ptr<data::ModifyAbility>::~shared_ptr((std::shared_ptr<data::ModifyAbility> *const)(v2 + 192));
      }
      std::shared_ptr<data::AddAbility>::~shared_ptr((std::shared_ptr<data::AddAbility> *const)(v2 + 160));
      *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -1800;
      __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigTalentMixin> *,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigTalentMixin>*,std::vector<std::shared_ptr<data::ConfigTalentMixin>> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<std::string const,std::vector<std::shared_ptr<data::ConfigTalentMixin>>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::shared_ptr<data::ConfigTalentMixin>> >,false,true> *const)(v2 + 32));
  }
  if ( v52 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 92) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = -168430091;
  }
  return ret;
};

// Line 4026: range 000000000F28C96E-000000000F28D678
int32_t __cdecl JsonConfigMgr::checkGlobalCombatConfig(JsonConfigMgr *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  data::ConfigDefaultAbilities *p_default_abilities; // rsi
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  char *v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  char *v13; // rsi
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  int32_t ret; // [rsp+1Ch] [rbp-2C4h]
  data::StringArray *__for_range; // [rsp+20h] [rbp-2C0h]
  data::StringArray *__for_range_0; // [rsp+28h] [rbp-2B8h]
  data::StringArray *__for_range_1; // [rsp+30h] [rbp-2B0h]
  data::StringArray *__for_range_2; // [rsp+38h] [rbp-2A8h]
  std::string *ability_name_2; // [rsp+40h] [rbp-2A0h]
  std::string *ability_name_1; // [rsp+48h] [rbp-298h]
  std::string *ability_name_0; // [rsp+50h] [rbp-290h]
  std::string *ability_name; // [rsp+58h] [rbp-288h]
  char v28[640]; // [rsp+60h] [rbp-280h] BYREF

  v1 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(608LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "13 32 8 16 __for_begin:4033 64 8 14 __for_end:4033 96 8 16 __for_begin:4041 128 8 14 __for_end:4"
                        "041 160 8 16 __for_begin:4049 192 8 14 __for_end:4049 224 8 16 __for_begin:4057 256 8 14 __for_e"
                        "nd:4057 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = JsonConfigMgr::checkGlobalCombatConfig;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -218959360;
  v3[536862722] = -218959360;
  v3[536862723] = -218959360;
  v3[536862724] = -218959360;
  v3[536862725] = -218959360;
  v3[536862726] = -218959360;
  v3[536862727] = -218959360;
  v3[536862728] = -218959360;
  v3[536862730] = -218959118;
  v3[536862732] = -218959118;
  v3[536862734] = -218959118;
  v3[536862736] = -218959118;
  v3[536862738] = -202116109;
  ret = 0;
  p_default_abilities = &this->config_global_combat_.default_abilities;
  if ( !JsonConfigMgr::checkAbilityName(this, &this->config_global_combat_.default_abilities.monter_elite_ability_name) )
  {
    if ( *(char *)(((v1 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v1 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v1 + 63) & 7) >= *(_BYTE *)(((v1 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v1 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v1 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkGlobalCombatConfig",
      4030);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v1 + 288),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v5, (const char (*)[36])byte_1A525EE0);
    p_default_abilities = &this->config_global_combat_.default_abilities;
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      v6,
      &this->config_global_combat_.default_abilities.monter_elite_ability_name);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 288));
    *(_DWORD *)(((v1 + 288) >> 3) + 0x7FFF8000) = -117901064;
    ret = -1;
  }
  __for_range = &this->config_global_combat_.default_abilities.non_humanoid_move_abilities;
  *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 32, p_default_abilities);
  *(std::vector<std::string>::iterator *)(v1 + 32) = std::vector<std::string>::begin(__for_range);
  *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 64, p_default_abilities);
  *(std::vector<std::string>::iterator *)(v1 + 64) = std::vector<std::string>::end(__for_range);
  while ( 1 )
  {
    v7 = (char *)(v1 + 64);
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 32),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 64)) )
      break;
    ability_name = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 32));
    if ( !JsonConfigMgr::checkAbilityName(this, ability_name) )
    {
      *(_DWORD *)(((v1 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v1 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 127) & 7) >= *(_BYTE *)(((v1 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkGlobalCombatConfig",
        4037);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v1 + 352),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v8, (const char (*)[36])byte_1A525F40);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, ability_name);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 352));
      *(_DWORD *)(((v1 + 352) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 32));
  }
  *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
  __for_range_0 = &this->config_global_combat_.default_abilities.level_element_abilities;
  *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 96, v7);
  *(std::vector<std::string>::iterator *)(v1 + 96) = std::vector<std::string>::begin(__for_range_0);
  *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 128, v7);
  *(std::vector<std::string>::iterator *)(v1 + 128) = std::vector<std::string>::end(__for_range_0);
  while ( 1 )
  {
    v10 = (char *)(v1 + 128);
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 96),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 128)) )
      break;
    ability_name_0 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 96));
    if ( !JsonConfigMgr::checkAbilityName(this, ability_name_0) )
    {
      *(_DWORD *)(((v1 + 416) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v1 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 - 65) & 7) >= *(_BYTE *)(((v1 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkGlobalCombatConfig",
        4045);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v1 + 416),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v11, (const char (*)[33])byte_1A525FA0);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, ability_name_0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 416));
      *(_DWORD *)(((v1 + 416) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 96));
  }
  *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
  __for_range_1 = &this->config_global_combat_.default_abilities.level_item_abilities;
  *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 160, v10);
  *(std::vector<std::string>::iterator *)(v1 + 160) = std::vector<std::string>::begin(__for_range_1);
  *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 192, v10);
  *(std::vector<std::string>::iterator *)(v1 + 192) = std::vector<std::string>::end(__for_range_1);
  while ( 1 )
  {
    v13 = (char *)(v1 + 192);
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 160),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 192)) )
      break;
    ability_name_1 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 160));
    if ( !JsonConfigMgr::checkAbilityName(this, ability_name_1) )
    {
      *(_DWORD *)(((v1 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v1 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 - 1) & 7) >= *(_BYTE *)(((v1 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkGlobalCombatConfig",
        4053);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v1 + 480),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v14, (const char (*)[30])byte_1A526000);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, ability_name_1);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 480));
      *(_DWORD *)(((v1 + 480) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 160));
  }
  *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
  __for_range_2 = &this->config_global_combat_.default_abilities.level_sbuff_abilities;
  *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 224, v13);
  *(std::vector<std::string>::iterator *)(v1 + 224) = std::vector<std::string>::begin(__for_range_2);
  *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v1 + 256, v13);
  *(std::vector<std::string>::iterator *)(v1 + 256) = std::vector<std::string>::end(__for_range_2);
  while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 224),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v1 + 256)) )
  {
    ability_name_2 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 224));
    if ( !JsonConfigMgr::checkAbilityName(this, ability_name_2) )
    {
      *(_DWORD *)(((v1 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v1 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 63) & 7) >= *(_BYTE *)(((v1 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkGlobalCombatConfig",
        4061);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v1 + 544),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v16, (const char (*)[31])byte_1A526040);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, ability_name_2);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 544));
      *(_DWORD *)(((v1 + 544) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v1 + 224));
  }
  if ( v28 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8048) = -168430091;
  }
  return ret;
};

// Line 4070: range 000000000F28D67A-000000000F28E442
int32_t __cdecl JsonConfigMgr::checkLevelEntityConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  char *v11; // rsi
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  char *v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  int32_t ret; // [rsp+14h] [rbp-2ECh]
  data::ConfigConfigLevelEntityMap *__for_range; // [rsp+18h] [rbp-2E8h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true>::reference __in; // [rsp+20h] [rbp-2E0h]
  const std::string *json_name; // [rsp+28h] [rbp-2D8h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> > >::type *config_level_entity_ptr; // [rsp+30h] [rbp-2D0h]
  data::ConfigEntityAbilityEntryList *__for_range_0; // [rsp+40h] [rbp-2C0h]
  data::ConfigEntityAbilityEntryList *__for_range_1; // [rsp+48h] [rbp-2B8h]
  data::ConfigEntityAbilityEntryList *__for_range_2; // [rsp+50h] [rbp-2B0h]
  data::ConfigEntityAbilityEntryList *__for_range_3; // [rsp+58h] [rbp-2A8h]
  const data::ConfigEntityAbilityEntry *ability_entry_2; // [rsp+60h] [rbp-2A0h]
  const data::ConfigEntityAbilityEntry *ability_entry_1; // [rsp+68h] [rbp-298h]
  const data::ConfigEntityAbilityEntry *ability_entry_0; // [rsp+70h] [rbp-290h]
  data::ConfigEntityAbilityEntry *ability_entry; // [rsp+78h] [rbp-288h]
  char v39[640]; // [rsp+80h] [rbp-280h] BYREF

  v2 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 32 8 16 __for_begin:4072 64 8 14 __for_end:4072 96 8 16 __for_begin:4075 128 8 14 __for_end:4"
                        "075 160 8 16 __for_begin:4083 192 8 14 __for_end:4083 224 8 16 __for_begin:4091 256 8 14 __for_e"
                        "nd:4091 288 8 16 __for_begin:4099 320 8 14 __for_end:4099 352 32 9 <unknown> 416 32 9 <unknown> "
                        "480 32 9 <unknown> 544 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkLevelEntityConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -202116109;
  ret = 0;
  __for_range = &this->config_level_entity_map_;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::iterator *)(v2 + 32) = std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::iterator *)(v2 + 64) = std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true> *)(v2 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true> *const)(v2 + 32));
    json_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigLevelEntity>>(__in);
    config_level_entity_ptr = std::get<1ul,std::string const,std::shared_ptr<data::ConfigLevelEntity>>(__in);
    __for_range_0 = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_level_entity_ptr)->abilities;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 96) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 128) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v2 + 128);
      if ( !__gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 128)) )
        break;
      ability_entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 96));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry->ability_name) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkLevelEntityConfig",
          4079);
        v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v7, (const char (*)[30])byte_1A5261E0);
        v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &ability_entry->ability_name);
        v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])", json_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, json_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_level_entity_ptr)->avatar_abilities;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v6);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 160) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v6);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 192) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_1);
    while ( 1 )
    {
      v11 = (char *)(v2 + 192);
      if ( !__gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 160),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 192)) )
        break;
      ability_entry_0 = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 160));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry_0->ability_name) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkLevelEntityConfig",
          4087);
        v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v12, (const char (*)[30])byte_1A5261E0);
        v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, &ability_entry_0->ability_name);
        v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])", json_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, json_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 160));
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    __for_range_2 = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_level_entity_ptr)->team_abilities;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v11);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 224) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_2);
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 256, v11);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 256) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_2);
    while ( 1 )
    {
      v16 = (char *)(v2 + 256);
      if ( !__gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 224),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 256)) )
        break;
      ability_entry_1 = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 224));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry_1->ability_name) )
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 1) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 480),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkLevelEntityConfig",
          4095);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 480),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v17, (const char (*)[30])byte_1A5261E0);
        v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, &ability_entry_1->ability_name);
        v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])", json_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, json_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 224));
    }
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
    __for_range_3 = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_level_entity_ptr)->monster_abilities;
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 288, v16);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 288) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_3);
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 320, v16);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 320) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_3);
    while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 288),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 320)) )
    {
      ability_entry_2 = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 288));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry_2->ability_name) )
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 544, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 544),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkLevelEntityConfig",
          4103);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 544),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v21, (const char (*)[30])byte_1A5261E0);
        v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, &ability_entry_2->ability_name);
        v24 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v23, (const char (*)[13])", json_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, json_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 288));
    }
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true> *const)(v2 + 32));
  }
  if ( v39 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return ret;
};

// Line 4113: range 000000000F28E444-000000000F290B7C
int32_t __cdecl JsonConfigMgr::checkScenePointConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  const char *v7; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v8; // rax
  int *v9; // rdx
  int v10; // ecx
  char v11; // al
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  int v19; // edx
  int v20; // r14d
  char *v21; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v22; // rax
  int *v23; // rdx
  int v24; // ecx
  char v25; // al
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  int v33; // edx
  char v34; // r14
  unsigned __int64 v35; // rax
  unsigned __int64 v36; // rdx
  const char *v37; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  common::milog::MiLogStream *v44; // rax
  int v45; // r14d
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  uint32_t explore_ratio; // r14d
  uint32_t v49; // r14d
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  char v51; // al
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rdx
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rdx
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  common::milog::MiLogStream *v59; // rax
  char v60; // r14
  std::set<unsigned int> *p_area_related_scene_id_set; // rdx
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // rax
  uint32_t area_id; // edi
  char v65; // dl
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rdx
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rdx
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v75; // rax
  common::milog::MiLogStream *v76; // rdx
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rdx
  int v79; // r14d
  unsigned int v80; // r14d
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v81; // rdx
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rdx
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // rdx
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v88; // rax
  data::SceneExcelConfigMgrBase *v89; // rcx
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rdx
  common::milog::MiLogStream *v92; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v93; // rdx
  common::milog::MiLogStream *v94; // rax
  common::milog::MiLogStream *v95; // rdx
  common::milog::MiLogStream *v96; // rax
  common::milog::MiLogStream *v97; // rdx
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v100; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v101; // rdx
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v104; // rax
  common::milog::MiLogStream *v105; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v106; // rax
  bool isPosValid; // al
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v110; // rax
  common::milog::MiLogStream *v111; // rax
  common::milog::MiLogStream *v112; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v113; // rax
  common::milog::MiLogStream *v114; // rax
  common::milog::MiLogStream *v115; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v116; // rax
  common::milog::MiLogStream *v117; // rax
  common::milog::MiLogStream *v118; // r14
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v119; // rax
  common::milog::MiLogStream *v120; // rax
  int v121; // eax
  int v122; // edx
  int v123; // eax
  char v125; // [rsp+16h] [rbp-60Ah]
  char v126; // [rsp+17h] [rbp-609h]
  SceneExcelConfigMgr *scene_config_mgr; // [rsp+28h] [rbp-5F8h]
  LuaConfigMgr *lua_config_mgr; // [rsp+30h] [rbp-5F0h]
  ConstValueExcelConfigMgr *const_value_config_mgr; // [rsp+38h] [rbp-5E8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference v131; // [rsp+48h] [rbp-5D8h]
  std::tuple_element<0,std::pair<unsigned int const,SceneJsonConfig> >::type *scene_id; // [rsp+50h] [rbp-5D0h]
  const std::tuple_element<1,std::pair<unsigned int const,SceneJsonConfig> >::type *__for_range_0; // [rsp+60h] [rbp-5C0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false>::reference v134; // [rsp+68h] [rbp-5B8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > >::type *point_id; // [rsp+70h] [rbp-5B0h]
  DungeonExcelConfigMgr *dungeon_config_mgr; // [rsp+80h] [rbp-5A0h]
  data::UInt32Array *__for_range_1; // [rsp+88h] [rbp-598h]
  data::UInt32Array *__for_range_2; // [rsp+90h] [rbp-590h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+98h] [rbp-588h]
  const data::SceneExcelConfig *dest_scene_config_ptr; // [rsp+A0h] [rbp-580h]
  const SceneScriptConfig *dest_scene_script_config_ptr; // [rsp+A8h] [rbp-578h]
  char v142[1392]; // [rsp+B0h] [rbp-570h] BYREF

  v3 = (unsigned __int64)v142;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1344LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "29 32 4 14 random_id:4127 48 4 14 roster_id:4136 64 8 16 __for_begin:4118 96 8 14 __for_end:4118"
                        " 128 8 16 __for_begin:4120 160 8 14 __for_end:4120 192 8 16 __for_begin:4127 224 8 14 __for_end:"
                        "4127 256 8 16 __for_begin:4136 288 8 14 __for_end:4136 320 12 9 <unknown> 352 12 9 <unknown> 384"
                        " 12 9 <unknown> 416 16 22 dungeon_entry_ptr:4122 448 16 26 scene_trans_point_ptr:4147 480 16 19 "
                        "jump_point_ptr:4172 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> "
                        "768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> "
                        "1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkScenePointConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -219020288;
  v5[536862731] = -219020288;
  v5[536862732] = -219020288;
  v5[536862733] = -219021312;
  v5[536862734] = -219021312;
  v5[536862735] = -219021312;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -218959118;
  v5[536862743] = -218959118;
  v5[536862745] = -218959118;
  v5[536862747] = -218959118;
  v5[536862749] = -218959118;
  v5[536862751] = -218959118;
  v5[536862753] = -218959118;
  v5[536862755] = -218959118;
  v5[536862757] = -218959118;
  v5[536862759] = -218959118;
  v5[536862761] = -202116109;
  scene_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.scene_config_mgr;
  lua_config_mgr = &JsonConfigMgr::getConfig(this)->lua_config_mgr;
  const_value_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.const_value_config_mgr;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, v1);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v1);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
  while ( 1 )
  {
    v6 = (char *)(v3 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 96)) )
      break;
    v131 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 64));
    scene_id = std::get<0ul,unsigned int const,SceneJsonConfig>(v131);
    __for_range_0 = std::get<1ul,unsigned int const,SceneJsonConfig>(v131);
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v6);
    *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v3 + 128) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::begin(&__for_range_0->point_map);
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v6);
    *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v3 + 160) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(&__for_range_0->point_map);
    while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 128),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 160)) )
    {
      v134 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 128));
      point_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigScenePoint>>(v134);
      std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigScenePoint>>(v134);
      *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::DungeonEntry,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 416));
      if ( !std::operator!=<data::DungeonEntry>((const std::shared_ptr<data::DungeonEntry> *)(v3 + 416), 0LL) )
        goto LABEL_55;
      dungeon_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.dungeon_config_mgr;
      __for_range_1 = &std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 416))->dungeon_random_list;
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 192, 0LL);
      *(std::vector<unsigned int>::iterator *)(v3 + 192) = std::vector<unsigned int>::begin(__for_range_1);
      *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 224, 0LL);
      *(std::vector<unsigned int>::iterator *)(v3 + 224) = std::vector<unsigned int>::end(__for_range_1);
      while ( 1 )
      {
        v7 = (const char *)(v3 + 224);
        if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 192),
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 224)) )
        {
          v19 = 1;
          goto LABEL_35;
        }
        *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
        v8 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 192));
        v9 = (int *)v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        v10 = *v9;
        v11 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
        if ( v11 != 0 && v11 <= 3 )
        {
          LOBYTE(v7) = v11 != 0;
          __asan_report_store4(v3 + 32, v7);
        }
        *(_DWORD *)(v3 + 32) = v10;
        if ( !data::DungeonExcelConfigMgrBase::findDailyDungeonConfig(dungeon_config_mgr, *(_DWORD *)(v3 + 32)) )
          break;
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 192));
      }
      *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 512, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 512),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkScenePointConfig",
        4131);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 512),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])"point:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, point_id);
      v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])"scene_id: ");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, scene_id);
      v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v16,
              (const char (*)[20])" random_dungeon_id:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 32));
      v7 = byte_1A526580;
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v18, (const char (*)[33])byte_1A526580);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
      *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v19 = 0;
LABEL_35:
      *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
      if ( v19 == 1 )
      {
        __for_range_2 = &std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 416))->dungeon_roster_list;
        *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 256, v7);
        *(std::vector<unsigned int>::iterator *)(v3 + 256) = std::vector<unsigned int>::begin(__for_range_2);
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 288, v7);
        *(std::vector<unsigned int>::iterator *)(v3 + 288) = std::vector<unsigned int>::end(__for_range_2);
        while ( 1 )
        {
          v21 = (char *)(v3 + 288);
          if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 256),
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 288)) )
          {
            v33 = 1;
            goto LABEL_53;
          }
          *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
          v22 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 256));
          v23 = (int *)v22;
          if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v22);
          }
          v24 = *v23;
          v25 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
          if ( v25 != 0 && v25 <= 3 )
          {
            LOBYTE(v21) = v25 != 0;
            __asan_report_store4(v3 + 48, v21);
          }
          *(_DWORD *)(v3 + 48) = v24;
          if ( !data::DungeonExcelConfigMgrBase::findDungeonRosterConfig(dungeon_config_mgr, *(_DWORD *)(v3 + 48)) )
            break;
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 256));
        }
        *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 576),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkScenePointConfig",
          4140);
        v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 576),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v27 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v26, (const char (*)[7])"point:");
        v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, point_id);
        v29 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v28, (const char (*)[11])"scene_id: ");
        v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, scene_id);
        v31 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v30, (const char (*)[12])" roster_id:");
        v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v31,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v32, (const char (*)[34])byte_1A526620);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
        *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v33 = 0;
LABEL_53:
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
        if ( v33 == 1 )
        {
LABEL_55:
          *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::SceneTransPoint,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 448));
          v34 = 0;
          v126 = 0;
          if ( !std::operator!=<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v3 + 448), 0LL) )
            goto LABEL_69;
          *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 640, 32LL);
          }
          std::literals::string_literals::operator"" s[abi:cxx11]((std::string *)(v3 + 640), "SceneTransPoint", 0xFuLL);
          v34 = 1;
          v126 = 1;
          v35 = (unsigned __int64)std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
          if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
            v35 = __asan_report_load8(v35);
          v36 = *(_QWORD *)v35 + 32LL;
          if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
            v35 = __asan_report_load8(*(_QWORD *)v35 + 32LL);
          v37 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v36)(v35);
          if ( !std::operator==<char>(v37, (const std::string *)(v3 + 640)) )
            goto LABEL_69;
          v38 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
          if ( *(_BYTE *)(((unsigned __int64)&v38->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v38->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&v38->type);
          }
          if ( v38->type == NORMAL_0 )
            v125 = 1;
          else
LABEL_69:
            v125 = 0;
          if ( v126 )
            std::string::~string((void *)(v3 + 640));
          if ( v34 )
            *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
          if ( v125 )
          {
            v39 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
            if ( *(_BYTE *)(((unsigned __int64)&v39->explore_ratio >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v39->explore_ratio >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v39->explore_ratio);
            }
            if ( !v39->explore_ratio )
            {
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 704) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 704, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 704),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkScenePointConfig",
                4154);
              v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 704),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v41 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      v40,
                      (const char (*)[10])"scene_id:");
              v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, scene_id);
              v43 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v42,
                      (const char (*)[11])" point_id:");
              v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, point_id);
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v44,
                (const char (*)[20])" explore_ratio is 0");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 704));
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v45 = 0;
LABEL_160:
              std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v3 + 448));
              if ( v45 )
              {
                if ( v45 == 2 )
                  v20 = 2;
                else
                  v20 = 1;
              }
              else
              {
                v20 = 0;
              }
              goto LABEL_165;
            }
            v46 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
            if ( *(_BYTE *)(((unsigned __int64)&v46->explore_ratio >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v46->explore_ratio >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v46->explore_ratio);
            }
            if ( v46->explore_ratio > 0x2710 )
              goto LABEL_89;
            v47 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
            if ( *(_BYTE *)(((unsigned __int64)&v47->explore_ratio >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v47->explore_ratio >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v47->explore_ratio);
            }
            explore_ratio = v47->explore_ratio;
            v49 = ConstValueExcelConfigMgr::getExploreUnlockPoint(const_value_config_mgr) * explore_ratio;
            v50 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
            if ( *(_BYTE *)(((unsigned __int64)&v50->explore_ratio >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v50->explore_ratio >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v50->explore_ratio);
            }
            if ( v49 >= v50->explore_ratio )
              v51 = 0;
            else
LABEL_89:
              v51 = 1;
            if ( v51 )
            {
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 768) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 768, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 768),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkScenePointConfig",
                4159);
              v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 768),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v53 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      v52,
                      (const char (*)[10])"scene_id:");
              v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, scene_id);
              v55 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v54,
                      (const char (*)[11])" point_id:");
              v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v55, point_id);
              v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v56,
                      (const char (*)[16])" explore_ratio:");
              v58 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
              v59 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v57, &v58->explore_ratio);
              common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v59, (const char (*)[13])" is too big!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 768));
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v45 = 0;
              goto LABEL_160;
            }
            v60 = 0;
            p_area_related_scene_id_set = &JsonConfigMgr::getConfig(this)->txt_config_mgr.world_area_config_mgr.area_related_scene_id_set;
            if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
                    p_area_related_scene_id_set,
                    scene_id) )
              goto LABEL_102;
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 1024;
            v62 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
            Vector3::Vector3((Vector3 *const)(v3 + 320), &v62->pos);
            v60 = 1;
            v63 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
            if ( *(_BYTE *)(((unsigned __int64)&v63->area_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v63->area_id >> 3) + 0x7FFF8000) <= 1 )
            {
              v63 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load2(&v63->area_id);
            }
            area_id = v63->area_id;
            if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
            {
              area_id = (unsigned int)scene_id;
              __asan_report_load4(scene_id);
            }
            if ( JsonConfigMgr::checkPointInLevel1Area(this, *scene_id, area_id, (const Vector3 *)(v3 + 320)) )
              v65 = 1;
            else
LABEL_102:
              v65 = 0;
            if ( v60 )
              *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -1800;
            if ( v65 )
            {
              *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 832, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 832),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkScenePointConfig",
                4165);
              v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 832),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v67 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      v66,
                      (const char (*)[10])"scene_id:");
              v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, scene_id);
              v69 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v68,
                      (const char (*)[11])" point_id:");
              v70 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v69, point_id);
              v71 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v70, (const char (*)[6])" pos:");
              *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = 0;
              *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 1024;
              v72 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
              Vector3::Vector3((Vector3 *const)(v3 + 352), &v72->pos);
              if ( *(char *)(((v3 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 896, 32LL);
              }
              Vector3::toString[abi:cxx11]((std::string *)(v3 + 896), (const Vector3 *const)(v3 + 352));
              v73 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v71,
                      (const std::string *)(v3 + 896));
              v74 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      v73,
                      (const char (*)[17])" not in area_id:");
              v75 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
              common::milog::MiLogStream::operator<<<unsigned short,(unsigned short *)0>(v74, &v75->area_id);
              std::string::~string((void *)(v3 + 896));
              *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = -117901064;
              *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -1800;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 832));
              *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v45 = 0;
              goto LABEL_160;
            }
            *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 960) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 960, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 960),
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/json_config_mgr.cpp",
              "checkScenePointConfig",
              4169);
            v76 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                    (common::milog::MiLogStream *const)(v3 + 960),
                    (const char (*)[10])"scene_id:");
            v77 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v76, scene_id);
            v78 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v77, (const char (*)[11])" point_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v78, point_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 960));
            *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = -117901064;
          }
          *(_WORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v3 + 480) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::PersonalSceneJumpPoint,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 480));
          if ( std::operator==<data::PersonalSceneJumpPoint>(
                 (const std::shared_ptr<data::PersonalSceneJumpPoint> *)(v3 + 480),
                 0LL) )
          {
            v79 = 0;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(scene_id);
            }
            v80 = *scene_id;
            v81 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
            if ( *(_BYTE *)(((unsigned __int64)&v81->tran_scene_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)v81 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v81->tran_scene_id >> 3)
                                                                  + 0x7FFF8000) )
            {
              __asan_report_load4(&v81->tran_scene_id);
            }
            if ( v80 == v81->tran_scene_id )
            {
              *(_DWORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1024) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1055) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1055) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1024, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1024),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkScenePointConfig",
                4179);
              v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1024),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v83 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v82,
                      (const char (*)[11])"scene_id: ");
              v84 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v83, scene_id);
              v85 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                      v84,
                      (const char (*)[37])byte_1A526840);
              v86 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v85, point_id);
              v87 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      v86,
                      (const char (*)[10])byte_1A5268A0);
              v88 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v87, &v88->tran_scene_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1024));
              *(_DWORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v79 = 1;
            }
            else
            {
              v89 = scene_config_mgr;
              if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3)
                                                                           + 0x7FFF8000) )
              {
                __asan_report_load4(scene_id);
              }
              scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(v89, *scene_id);
              if ( !scene_config_ptr )
                goto LABEL_132;
              if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                                + 0x7FFF8000) )
              {
                __asan_report_load4(&scene_config_ptr->type);
              }
              if ( scene_config_ptr->type != SCENE_DUNGEON )
              {
                v93 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                if ( *(_BYTE *)(((unsigned __int64)&v93->tran_scene_id >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)v93 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v93->tran_scene_id >> 3)
                                                                      + 0x7FFF8000) )
                {
                  __asan_report_load4(&v93->tran_scene_id);
                }
                dest_scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                                          scene_config_mgr,
                                          v93->tran_scene_id);
                if ( !dest_scene_config_ptr )
                  goto LABEL_141;
                if ( *(_BYTE *)(((unsigned __int64)&dest_scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)dest_scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dest_scene_config_ptr->type >> 3)
                                                                                       + 0x7FFF8000) )
                {
                  __asan_report_load4(&dest_scene_config_ptr->type);
                }
                if ( dest_scene_config_ptr->type != SCENE_DUNGEON )
                {
                  v101 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                  if ( *(_BYTE *)(((unsigned __int64)&v101->tran_scene_id >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)v101 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v101->tran_scene_id >> 3)
                                                                         + 0x7FFF8000) )
                  {
                    __asan_report_load4(&v101->tran_scene_id);
                  }
                  dest_scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(
                                                   lua_config_mgr,
                                                   v101->tran_scene_id);
                  if ( dest_scene_script_config_ptr )
                  {
                    *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 1024;
                    v106 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                    Vector3::Vector3((Vector3 *const)(v3 + 384), &v106->tran_pos);
                    isPosValid = SceneScriptConfig::isPosValid(
                                   dest_scene_script_config_ptr,
                                   (const Vector3 *)(v3 + 384));
                    *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -1800;
                    if ( !isPosValid )
                    {
                      *(_DWORD *)(((v3 + 1280) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v3 + 1280) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v3 + 1311) >> 3) + 0x7FFF8000) != 0
                        && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1311) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v3 + 1280, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v3 + 1280),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_config_mgr.cpp",
                        "checkScenePointConfig",
                        4204);
                      v108 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                               (common::milog::MiLogStream *const)(v3 + 1280),
                               (const char (*)[16])"[CONFIG_ERROR] ");
                      v109 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                               v108,
                               (const char (*)[11])"scene_id: ");
                      v110 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                      v111 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                               v109,
                               &v110->tran_scene_id);
                      v112 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                               v111,
                               (const char (*)[11])byte_1A526A00);
                      v113 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                      v114 = common::milog::MiLogStream::operator<<<float,(float *)0>(v112, &v113->tran_pos.x);
                      v115 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v114, (const char (*)[2])",");
                      v116 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                      v117 = common::milog::MiLogStream::operator<<<float,(float *)0>(v115, &v116->tran_pos.y);
                      v118 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v117, (const char (*)[2])",");
                      v119 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                      v120 = common::milog::MiLogStream::operator<<<float,(float *)0>(v118, &v119->tran_pos.z);
                      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                        v120,
                        (const char (*)[8])byte_1A526A40);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1280));
                      *(_DWORD *)(((v3 + 1280) >> 3) + 0x7FFF8000) = -117901064;
                      v2 = -1;
                      v79 = 1;
                    }
                    else
                    {
                      v79 = 2;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(((v3 + 1216) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 1216) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 1216, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 1216),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_config_mgr.cpp",
                      "checkScenePointConfig",
                      4199);
                    v102 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v3 + 1216),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v103 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                             v102,
                             (const char (*)[11])"scene_id: ");
                    v104 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                    v105 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                             v103,
                             &v104->tran_scene_id);
                    common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                      v105,
                      (const char (*)[30])byte_1A5269C0);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1216));
                    *(_DWORD *)(((v3 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v79 = 1;
                  }
                }
                else
                {
LABEL_141:
                  *(_DWORD *)(((v3 + 1152) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 1152) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 1183) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1183) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 1152, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 1152),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "checkScenePointConfig",
                    4191);
                  v94 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 1152),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v95 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                          v94,
                          (const char (*)[11])"scene_id: ");
                  v96 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v95, scene_id);
                  v97 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v96,
                          (const char (*)[12])" point_id: ");
                  v98 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v97, point_id);
                  v99 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                          v98,
                          (const char (*)[28])byte_1A526980);
                  v100 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 480));
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v99, &v100->tran_scene_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1152));
                  *(_DWORD *)(((v3 + 1152) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v79 = 1;
                }
              }
              else
              {
LABEL_132:
                *(_DWORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1088) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1119) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1119) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1088, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1088),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkScenePointConfig",
                  4185);
                v90 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1088),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v91 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v90,
                        (const char (*)[11])"scene_id: ");
                v92 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v91, scene_id);
                common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v92, (const char (*)[36])byte_1A5268E0);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1088));
                *(_DWORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v79 = 1;
              }
            }
          }
          std::shared_ptr<data::PersonalSceneJumpPoint>::~shared_ptr((std::shared_ptr<data::PersonalSceneJumpPoint> *const)(v3 + 480));
          if ( v79 )
          {
            if ( v79 == 2 )
              v45 = 2;
            else
              v45 = 0;
          }
          else
          {
            v45 = 1;
          }
          goto LABEL_160;
        }
        v20 = 0;
      }
      else
      {
        v20 = 0;
      }
LABEL_165:
      std::shared_ptr<data::DungeonEntry>::~shared_ptr((std::shared_ptr<data::DungeonEntry> *const)(v3 + 416));
      if ( v20 )
      {
        if ( v20 == 2 )
          v121 = 2;
        else
          v121 = 1;
      }
      else
      {
        v121 = 0;
      }
      *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -1800;
      if ( !v121 )
      {
        v122 = 0;
        goto LABEL_174;
      }
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 128));
    }
    v122 = 1;
LABEL_174:
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v122 != 1 )
    {
      v123 = 0;
      goto LABEL_178;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 64));
  }
  v123 = 1;
LABEL_178:
  if ( v123 == 1 )
    v2 = 0;
  if ( v142 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 168) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1344LL, v142);
  }
  return v2;
};

// Line 4216: range 000000000F290B7E-000000000F2914A8
int32_t __cdecl JsonConfigMgr::checkLocalEntityConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::vector<data::ConfigHomeCommonPos>::size_type v13; // r14
  std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::vector<data::ConfigHomeCommonPos>::size_type v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-1D4h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference v28; // [rsp+28h] [rbp-1C8h]
  std::tuple_element<0,std::pair<unsigned int const,SceneJsonConfig> >::type *scene_id; // [rsp+30h] [rbp-1C0h]
  LocalEntityMap *__for_range_0; // [rsp+40h] [rbp-1B0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false,false>::reference v31; // [rsp+48h] [rbp-1A8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> > >::type *entity_id; // [rsp+50h] [rbp-1A0h]
  char v33[400]; // [rsp+60h] [rbp-190h] BYREF

  v2 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 32 8 16 __for_begin:4218 64 8 14 __for_end:4218 96 8 16 __for_begin:4220 128 8 14 __for_end:42"
                        "20 160 8 9 <unknown> 192 16 19 fish_point_ptr:4223 224 32 9 <unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkLocalEntityConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -219021312;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  ret = 0;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 64)) )
      break;
    v28 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 32));
    scene_id = std::get<0ul,unsigned int const,SceneJsonConfig>(v28);
    __for_range_0 = &std::get<1ul,unsigned int const,SceneJsonConfig>(v28)->local_entity_map;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::const_iterator *)(v2 + 128) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::end(__for_range_0);
    while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false> *)(v2 + 96),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false> *)(v2 + 128)) )
    {
      v31 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false,false> *const)(v2 + 96));
      entity_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigLocalEntity>>(v31);
      std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigLocalEntity>>(v31);
      *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigFishpondScenePoint,data::ConfigLocalEntity>((const std::shared_ptr<data::ConfigLocalEntity> *)(v2 + 192));
      if ( std::operator!=<data::ConfigFishpondScenePoint>(
             0LL,
             (const std::shared_ptr<data::ConfigFishpondScenePoint> *)(v2 + 192)) )
      {
        v6 = std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
        if ( *(_BYTE *)(((unsigned __int64)&v6->max_fish_count >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v6 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->max_fish_count >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&v6->max_fish_count);
        }
        if ( !v6->max_fish_count )
        {
          *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 1) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 224, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 224),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkLocalEntityConfig",
            4228);
          v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 224),
                 (const char (*)[16])"[CONFIG_ERROR] ");
          v8 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v7, (const char (*)[10])"scene_id:");
          v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, scene_id);
          v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])" entity_id:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, entity_id);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            v11,
            (const char (*)[25])" max_fish_count is zero.");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
          *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        v12 = std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
        v13 = std::vector<data::ConfigHomeCommonPos>::size(&v12->fish_born_pos_list);
        v14 = std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
        if ( *(_BYTE *)(((unsigned __int64)&v14->max_fish_count >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v14 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v14->max_fish_count >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_load4(&v14->max_fish_count);
        }
        if ( v13 < v14->max_fish_count )
        {
          *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 288, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 288),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkLocalEntityConfig",
            4233);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 288),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v16 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v15, (const char (*)[10])"scene_id:");
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, scene_id);
          v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v17, (const char (*)[12])" entity_id:");
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, entity_id);
          v20 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v19,
                  (const char (*)[25])"born pos too few, size: ");
          *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
          v21 = std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
          v22 = std::vector<data::ConfigHomeCommonPos>::size(&v21->fish_born_pos_list);
          if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
            v22 = __asan_report_store8(v2 + 160, "born pos too few, size: ");
          *(_QWORD *)(v2 + 160) = v22;
          v23 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v20,
                  (const unsigned __int64 *)(v2 + 160));
          v24 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v23,
                  (const char (*)[18])", max_fish_count:");
          v25 = std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishpondScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &v25->max_fish_count);
          *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
          *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      std::shared_ptr<data::ConfigFishpondScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigFishpondScenePoint> *const)(v2 + 192));
      *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -1800;
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false,false> *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v33 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4247: range 000000000F2914AA-000000000F292AA9
int32_t __cdecl JsonConfigMgr::checkSceneRouteConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  char *v7; // rsi
  uint32_t v8; // ecx
  char v9; // al
  uint32_t v10; // esi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  const LuaConfigMgr *p_lua_config_mgr; // rcx
  __int64 v20; // rsi
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  std::tuple_element<0,std::pair<unsigned int const,data::ConfigRoute> >::type *v23; // rsi
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rdx
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // r14
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  int32_t ret; // [rsp+14h] [rbp-49Ch]
  HK4EDesignConfig *design_config; // [rsp+18h] [rbp-498h]
  std::unordered_map<unsigned int,SceneScriptConfig> *__for_range; // [rsp+20h] [rbp-490h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference v44; // [rsp+30h] [rbp-480h]
  std::tuple_element<0,std::pair<unsigned int const,SceneJsonConfig> >::type *scene_id_0; // [rsp+38h] [rbp-478h]
  std::tuple_element<1,const std::pair<unsigned int const,SceneJsonConfig> >::type *scene_json_config; // [rsp+40h] [rbp-470h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+48h] [rbp-468h]
  const std::unordered_map<unsigned int,data::ConfigRoute> *__for_range_3; // [rsp+50h] [rbp-460h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false>::reference v49; // [rsp+58h] [rbp-458h]
  std::tuple_element<0,std::pair<unsigned int const,data::ConfigRoute> >::type *route_id; // [rsp+60h] [rbp-450h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigRoute> >::type *config_route; // [rsp+68h] [rbp-448h]
  const std::vector<data::ConfigWaypoint> *__for_range_4; // [rsp+70h] [rbp-440h]
  const data::ConfigWaypoint *config_point; // [rsp+78h] [rbp-438h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false>::reference __in; // [rsp+80h] [rbp-430h]
  const unsigned int *scene_id; // [rsp+88h] [rbp-428h]
  std::unordered_map<unsigned int,GroupScriptConfig> *__for_range_0; // [rsp+98h] [rbp-418h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false>::reference v57; // [rsp+A0h] [rbp-410h]
  const unsigned int *group_id; // [rsp+A8h] [rbp-408h]
  std::unordered_map<unsigned int,GadgetScriptConfig> *__for_range_1; // [rsp+B8h] [rbp-3F8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false>::reference v60; // [rsp+C0h] [rbp-3F0h]
  const unsigned int *config_id; // [rsp+C8h] [rbp-3E8h]
  std::tuple_element<1,std::pair<unsigned int const,GadgetScriptConfig> >::type *gadget_script_config; // [rsp+D0h] [rbp-3E0h]
  char v63[976]; // [rsp+E0h] [rbp-3D0h] BYREF

  v2 = (unsigned __int64)v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(928LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 4 13 route_id:4256 64 8 16 __for_begin:4250 96 8 14 __for_end:4250 128 8 16 __for_begin:42"
                        "52 160 8 14 __for_end:4252 192 8 16 __for_begin:4254 224 8 14 __for_end:4254 256 8 16 __for_begi"
                        "n:4270 288 8 14 __for_end:4270 320 8 16 __for_begin:4283 352 8 14 __for_end:4283 384 8 16 __for_"
                        "begin:4290 416 8 14 __for_end:4290 448 12 8 pos:4292 480 32 9 <unknown> 544 32 9 <unknown> 608 3"
                        "2 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkSceneRouteConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -219020288;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -202116109;
  ret = 0;
  design_config = JsonConfigMgr::getConfig(this);
  __for_range = &design_config->lua_config_mgr.scene_script_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,SceneScriptConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<unsigned int,SceneScriptConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,SceneScriptConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,SceneScriptConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneScriptConfig>,false> *)(v2 + 96)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false> *const)(v2 + 64));
    scene_id = std::get<0ul,unsigned int const,SceneScriptConfig>(__in);
    __for_range_0 = &std::get<1ul,unsigned int const,SceneScriptConfig>(__in)->group_config_map;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::unordered_map<unsigned int,GroupScriptConfig>::iterator *)(v2 + 128) = std::unordered_map<unsigned int,GroupScriptConfig>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::unordered_map<unsigned int,GroupScriptConfig>::iterator *)(v2 + 160) = std::unordered_map<unsigned int,GroupScriptConfig>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v2 + 160);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,GroupScriptConfig>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GroupScriptConfig>,false> *)(v2 + 128),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GroupScriptConfig>,false> *)(v2 + 160)) )
        break;
      v57 = std::__detail::_Node_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false> *const)(v2 + 128));
      group_id = std::get<0ul,unsigned int const,GroupScriptConfig>(v57);
      __for_range_1 = &std::get<1ul,unsigned int const,GroupScriptConfig>(v57)->gadget_config_map;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 192, v6);
      *(std::unordered_map<unsigned int,GadgetScriptConfig>::iterator *)(v2 + 192) = std::unordered_map<unsigned int,GadgetScriptConfig>::begin(__for_range_1);
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 224, v6);
      *(std::unordered_map<unsigned int,GadgetScriptConfig>::iterator *)(v2 + 224) = std::unordered_map<unsigned int,GadgetScriptConfig>::end(__for_range_1);
      while ( 1 )
      {
        v7 = (char *)(v2 + 224);
        if ( !std::__detail::operator!=<std::pair<unsigned int const,GadgetScriptConfig>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GadgetScriptConfig>,false> *)(v2 + 192),
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GadgetScriptConfig>,false> *)(v2 + 224)) )
          break;
        v60 = std::__detail::_Node_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false> *const)(v2 + 192));
        config_id = std::get<0ul,unsigned int const,GadgetScriptConfig>(v60);
        gadget_script_config = std::get<1ul,unsigned int const,GadgetScriptConfig>(v60);
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config->route_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&gadget_script_config->route_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&gadget_script_config->route_id);
        }
        v8 = gadget_script_config->route_id;
        v9 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
        if ( v9 != 0 && v9 <= 3 )
        {
          LOBYTE(v7) = v9 != 0;
          __asan_report_store4(v2 + 48, v7);
        }
        *(_DWORD *)(v2 + 48) = v8;
        if ( *(_DWORD *)(v2 + 48) )
        {
          if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 48);
          v10 = *(_DWORD *)(v2 + 48);
          if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(scene_id);
          }
          if ( !JsonConfigMgr::findSceneRouteConfig(this, *scene_id, v10) )
          {
            *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 480, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 480),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkSceneRouteConfig",
              4264);
            v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 480),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v12 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                    v11,
                    (const char (*)[42])byte_1A526E20);
            v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, scene_id);
            v14 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v13,
                    (const char (*)[12])", group_id:");
            v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, group_id);
            v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v15,
                    (const char (*)[13])", config_id:");
            v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, config_id);
            v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v17,
                    (const char (*)[12])", route_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 48));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
            *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
        }
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
        std::__detail::_Node_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false> *const)(v2 + 192));
      }
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      std::__detail::_Node_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false> *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneScriptConfig>,false,false> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 256, v5);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 256) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 288, v5);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 288) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
  while ( std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 256),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 288)) )
  {
    v44 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 256));
    scene_id_0 = std::get<0ul,unsigned int const,SceneJsonConfig>(v44);
    scene_json_config = (std::tuple_element<1,const std::pair<unsigned int const,SceneJsonConfig> >::type *)std::get<1ul,unsigned int const,SceneJsonConfig>(v44);
    if ( !std::unordered_map<unsigned int,data::ConfigRoute>::empty(&scene_json_config->route_map) )
    {
      p_lua_config_mgr = &design_config->lua_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)scene_id_0 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)scene_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id_0 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(scene_id_0);
      }
      v20 = *scene_id_0;
      scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, v20);
      if ( scene_script_config_ptr )
      {
        __for_range_3 = &scene_json_config->route_map;
        *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 320, v20);
        *(std::unordered_map<unsigned int,data::ConfigRoute>::const_iterator *)(v2 + 320) = std::unordered_map<unsigned int,data::ConfigRoute>::begin(__for_range_3);
        *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 352, v20);
        *(std::unordered_map<unsigned int,data::ConfigRoute>::const_iterator *)(v2 + 352) = std::unordered_map<unsigned int,data::ConfigRoute>::end(__for_range_3);
        while ( 1 )
        {
          v23 = (std::tuple_element<0,std::pair<unsigned int const,data::ConfigRoute> >::type *)(v2 + 352);
          if ( !std::__detail::operator!=<std::pair<unsigned int const,data::ConfigRoute>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigRoute>,false> *)(v2 + 320),
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigRoute>,false> *)(v2 + 352)) )
            break;
          v49 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false> *const)(v2 + 320));
          route_id = std::get<0ul,unsigned int const,data::ConfigRoute>(v49);
          config_route = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigRoute> >::type *)std::get<1ul,unsigned int const,data::ConfigRoute>(v49);
          if ( std::vector<data::ConfigWaypoint>::empty(&config_route->points) )
          {
            *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 608, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 608),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkSceneRouteConfig",
              4287);
            v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 608),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v25 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                    v24,
                    (const char (*)[27])"points is empty, scene_id:");
            v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, scene_id_0);
            v27 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v26, (const char (*)[11])" route_id:");
            v23 = route_id;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, route_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
            *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          __for_range_4 = &config_route->points;
          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 384, v23);
          *(std::vector<data::ConfigWaypoint>::const_iterator *)(v2 + 384) = std::vector<data::ConfigWaypoint>::begin(__for_range_4);
          *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 416, v23);
          *(std::vector<data::ConfigWaypoint>::const_iterator *)(v2 + 416) = std::vector<data::ConfigWaypoint>::end(__for_range_4);
          while ( __gnu_cxx::operator!=<data::ConfigWaypoint const*,std::vector<data::ConfigWaypoint>>(
                    (const __gnu_cxx::__normal_iterator<const data::ConfigWaypoint*,std::vector<data::ConfigWaypoint> > *)(v2 + 384),
                    (const __gnu_cxx::__normal_iterator<const data::ConfigWaypoint*,std::vector<data::ConfigWaypoint> > *)(v2 + 416)) )
          {
            config_point = __gnu_cxx::__normal_iterator<data::ConfigWaypoint const*,std::vector<data::ConfigWaypoint>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigWaypoint*,std::vector<data::ConfigWaypoint> > *const)(v2 + 384));
            *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 1024;
            Vector3::Vector3((Vector3 *const)(v2 + 448), &config_point->pos);
            if ( !SceneScriptConfig::isPosValid(scene_script_config_ptr, (const Vector3 *)(v2 + 448)) )
            {
              *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 672, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 672),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkSceneRouteConfig",
                4295);
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 672),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v29 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                      v28,
                      (const char (*)[51])byte_1A526F80);
              v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, scene_id_0);
              v31 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v30,
                      (const char (*)[12])", route_id:");
              v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, route_id);
              v33 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v32, (const char (*)[7])", pos:");
              *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 736, 32LL);
              }
              Vector3::toString[abi:cxx11]((std::string *)(v2 + 736), (const Vector3 *const)(v2 + 448));
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v33, (const std::string *)(v2 + 736));
              std::string::~string((void *)(v2 + 736));
              *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
              *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            if ( *(_BYTE *)(((unsigned __int64)&config_point->speed_level >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config_point + 40) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_point->speed_level >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4(&config_point->speed_level);
            }
            if ( !config_point->speed_level )
            {
              if ( *(_BYTE *)(((unsigned __int64)&config_point->target_velocity >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config_point + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_point->target_velocity >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(&config_point->target_velocity);
              }
              if ( config_point->target_velocity < 0.1 )
              {
                *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 800, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 800),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkSceneRouteConfig",
                  4300);
                v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 800),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v35 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                        v34,
                        (const char (*)[39])byte_1A527020);
                v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, scene_id_0);
                v37 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v36,
                        (const char (*)[12])", route_id:");
                v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, route_id);
                v39 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v38, (const char (*)[7])", pos:");
                *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 864, 32LL);
                }
                Vector3::toString[abi:cxx11]((std::string *)(v2 + 864), (const Vector3 *const)(v2 + 448));
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v39,
                  (const std::string *)(v2 + 864));
                std::string::~string((void *)(v2 + 864));
                *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
                *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
            }
            *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -1800;
            __gnu_cxx::__normal_iterator<data::ConfigWaypoint const*,std::vector<data::ConfigWaypoint>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigWaypoint*,std::vector<data::ConfigWaypoint> > *const)(v2 + 384));
          }
          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigRoute>,false,false> *const)(v2 + 320));
        }
        *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      }
      else
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 544, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 544),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkSceneRouteConfig",
          4279);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 544),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                v21,
                (const char (*)[38])"findSceneScriptConfig fail, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, scene_id_0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 256));
  }
  if ( v63 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 116) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8070) = -168430091;
  }
  return ret;
};

// Line 4311: range 000000000F292AAA-000000000F293CB2
int32_t __cdecl JsonConfigMgr::checkSceneEnvironmentZone(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  __int64 v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  common::milog::MiLogStream *v12; // rax
  int v13; // eax
  char *v14; // rsi
  const char *v15; // rsi
  unsigned int *v16; // rax
  int *v17; // rdx
  int v18; // ecx
  char v19; // al
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rdx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  int v27; // edx
  int v28; // eax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v31; // rax
  char *v32; // rsi
  unsigned int *v33; // rax
  int *v34; // rdx
  int v35; // ecx
  char v36; // al
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rdx
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int v44; // edx
  int v45; // eax
  const WorldAreaExcelConfigMgr *world_area_config_mgr; // [rsp+18h] [rbp-368h]
  RandTaskExcelConfigMgr *rand_task_config_mgr; // [rsp+20h] [rbp-360h]
  QuestExcelConfigMgr *quest_config_mgr; // [rsp+28h] [rbp-358h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference v50; // [rsp+38h] [rbp-348h]
  std::tuple_element<0,std::pair<unsigned int const,SceneJsonConfig> >::type *scene_id; // [rsp+40h] [rbp-340h]
  RectZoneListMap *__for_range_0; // [rsp+50h] [rbp-330h]
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > >::reference v53; // [rsp+58h] [rbp-328h]
  std::tuple_element<0,std::pair<unsigned int const,std::vector<ConfigRectZone> > >::type *area_id; // [rsp+60h] [rbp-320h]
  std::tuple_element<1,const std::pair<unsigned int const,std::vector<ConfigRectZone> > >::type *rect_zone_list; // [rsp+68h] [rbp-318h]
  const ConfigRectZone *zone_info; // [rsp+78h] [rbp-308h]
  const std::vector<unsigned int> *__for_range_2; // [rsp+80h] [rbp-300h]
  const std::vector<unsigned int> *__for_range_3; // [rsp+88h] [rbp-2F8h]
  char v59[752]; // [rsp+90h] [rbp-2F0h] BYREF

  v3 = (unsigned __int64)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "17 32 4 17 rand_task_id:4327 48 4 22 quest_entrance_id:4348 64 8 16 __for_begin:4316 96 8 14 __f"
                        "or_end:4316 128 8 16 __for_begin:4318 160 8 14 __for_end:4318 192 8 16 __for_begin:4325 224 8 14"
                        " __for_end:4325 256 8 16 __for_begin:4327 288 8 14 __for_end:4327 320 8 16 __for_begin:4348 352 "
                        "8 14 __for_end:4348 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> "
                        "640 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkSceneEnvironmentZone;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -218959360;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -202116109;
  world_area_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.world_area_config_mgr;
  rand_task_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.rand_task_config_mgr;
  quest_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.quest_config_mgr;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, v1);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v1);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
  while ( 1 )
  {
    v6 = (char *)(v3 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 96)) )
      break;
    v50 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 64));
    scene_id = std::get<0ul,unsigned int const,SceneJsonConfig>(v50);
    __for_range_0 = &std::get<1ul,unsigned int const,SceneJsonConfig>(v50)->rect_zone_list_map;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v6);
    *(std::map<unsigned int,std::vector<ConfigRectZone>>::const_iterator *)(v3 + 128) = std::map<unsigned int,std::vector<ConfigRectZone>>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v6);
    *(std::map<unsigned int,std::vector<ConfigRectZone>>::const_iterator *)(v3 + 160) = std::map<unsigned int,std::vector<ConfigRectZone>>::end(__for_range_0);
    while ( 1 )
    {
      if ( !std::operator!=(
              (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > >::_Self *)(v3 + 128),
              (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > >::_Self *)(v3 + 160)) )
      {
        v13 = 1;
        goto LABEL_89;
      }
      v53 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone>>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > > *const)(v3 + 128));
      area_id = std::get<0ul,unsigned int const,std::vector<ConfigRectZone>>(v53);
      rect_zone_list = (std::tuple_element<1,const std::pair<unsigned int const,std::vector<ConfigRectZone> > >::type *)std::get<1ul,unsigned int const,std::vector<ConfigRectZone>>(v53);
      if ( *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(area_id);
      }
      v7 = *area_id;
      if ( !WorldAreaExcelConfigMgr::findFirstLevelWorldAreaConfig(world_area_config_mgr, v7) )
        break;
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 192, v7);
      *(std::vector<ConfigRectZone>::const_iterator *)(v3 + 192) = std::vector<ConfigRectZone>::begin(rect_zone_list);
      *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 224, v7);
      *(std::vector<ConfigRectZone>::const_iterator *)(v3 + 224) = std::vector<ConfigRectZone>::end(rect_zone_list);
      while ( 1 )
      {
        v14 = (char *)(v3 + 224);
        if ( !__gnu_cxx::operator!=<ConfigRectZone const*,std::vector<ConfigRectZone>>(
                (const __gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *)(v3 + 192),
                (const __gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *)(v3 + 224)) )
        {
          v28 = 1;
          goto LABEL_85;
        }
        zone_info = __gnu_cxx::__normal_iterator<ConfigRectZone const*,std::vector<ConfigRectZone>>::operator*((const __gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *const)(v3 + 192));
        __for_range_2 = &zone_info->env_zone_config.task_id_list;
        *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 256, v14);
        *(std::vector<unsigned int>::const_iterator *)(v3 + 256) = std::vector<unsigned int>::begin(__for_range_2);
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 288, v14);
        *(std::vector<unsigned int>::const_iterator *)(v3 + 288) = std::vector<unsigned int>::end(__for_range_2);
        while ( 1 )
        {
          v15 = (const char *)(v3 + 288);
          if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 256),
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 288)) )
          {
            v27 = 1;
            goto LABEL_44;
          }
          *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
          v16 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 256));
          v17 = (int *)v16;
          if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v16);
          }
          v18 = *v17;
          v19 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
          if ( v19 != 0 && v19 <= 3 )
          {
            LOBYTE(v15) = v19 != 0;
            __asan_report_store4(v3 + 32, v15);
          }
          *(_DWORD *)(v3 + 32) = v18;
          if ( !data::RandTaskExcelConfigMgrBase::findRandTaskExcelConfig(rand_task_config_mgr, *(_DWORD *)(v3 + 32)) )
            break;
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 256));
        }
        *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkSceneEnvironmentZone",
          4331);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 448),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v20, (const char (*)[11])"scene_id: ");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, scene_id);
        v23 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v22, (const char (*)[11])" area_id: ");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, area_id);
        v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v24,
                (const char (*)[16])" rand_task_id: ");
        v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v3 + 32));
        v15 = byte_1A5272E0;
        common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v26, (const char (*)[10])byte_1A5272E0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
        *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v27 = 0;
LABEL_44:
        *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
        if ( v27 != 1 )
        {
          v28 = 0;
          goto LABEL_85;
        }
        if ( *(_BYTE *)(((unsigned __int64)&zone_info->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&zone_info->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&zone_info->env_zone_config.zone_bit_type);
        }
        if ( (zone_info->env_zone_config.zone_bit_type & 1) != 0 )
        {
          v15 = (const char *)((((_BYTE)zone_info + 4) & 7u) + 3);
          if ( *(_BYTE *)(((unsigned __int64)&zone_info->env_zone_config.env_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)zone_info + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&zone_info->env_zone_config.env_type >> 3)
                                                                    + 0x7FFF8000) )
          {
            __asan_report_load4(&zone_info->env_zone_config.env_type);
          }
          if ( zone_info->env_zone_config.env_type == ENVIRONMENT_NONE )
          {
            *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 64 + 95) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkSceneEnvironmentZone",
              4338);
            v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 512),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v29, (const char (*)[44])byte_1A527320);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
            *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v28 = 0;
            goto LABEL_85;
          }
        }
        if ( *(_BYTE *)(((unsigned __int64)&zone_info->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&zone_info->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&zone_info->env_zone_config.zone_bit_type);
        }
        if ( (zone_info->env_zone_config.zone_bit_type & 2) != 0
          && std::vector<data::Vector>::empty(&zone_info->env_zone_config.possible_point_vec) )
        {
          break;
        }
        __for_range_3 = &zone_info->env_zone_config.random_quest_entrance_id_list;
        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 320, v15);
        *(std::vector<unsigned int>::const_iterator *)(v3 + 320) = std::vector<unsigned int>::begin(__for_range_3);
        *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 352, v15);
        *(std::vector<unsigned int>::const_iterator *)(v3 + 352) = std::vector<unsigned int>::end(__for_range_3);
        while ( 1 )
        {
          v32 = (char *)(v3 + 352);
          if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 320),
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 352)) )
          {
            v44 = 1;
            goto LABEL_81;
          }
          *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
          v33 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 320));
          v34 = (int *)v33;
          if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v33);
          }
          v35 = *v34;
          v36 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
          if ( v36 != 0 && v36 <= 3 )
          {
            LOBYTE(v32) = v36 != 0;
            __asan_report_store4(v3 + 48, v32);
          }
          *(_DWORD *)(v3 + 48) = v35;
          if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>,unsigned int>(
                  &quest_config_mgr->entrance_random_template_map,
                  (const unsigned int *)(v3 + 48)) )
            break;
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 320));
        }
        *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkSceneEnvironmentZone",
          4352);
        v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 640),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v38 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v37, (const char (*)[11])"scene_id: ");
        v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, scene_id);
        v40 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v39, (const char (*)[11])" area_id: ");
        v41 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, area_id);
        v42 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                v41,
                (const char (*)[21])" quest_entrance_id: ");
        v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v42,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v43, (const char (*)[10])byte_1A5272E0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
        *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v44 = 0;
LABEL_81:
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = -8;
        if ( v44 != 1 )
        {
          v28 = 0;
          goto LABEL_85;
        }
        __gnu_cxx::__normal_iterator<ConfigRectZone const*,std::vector<ConfigRectZone>>::operator++((__gnu_cxx::__normal_iterator<const ConfigRectZone*,std::vector<ConfigRectZone> > *const)(v3 + 192));
      }
      *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 576, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 576),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkSceneEnvironmentZone",
        4344);
      v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 576),
              (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(v31, (const char (*)[49])byte_1A527380);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
      *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v28 = 0;
LABEL_85:
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
      if ( v28 != 1 )
      {
        v13 = 0;
        goto LABEL_89;
      }
      std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone>>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > > *const)(v3 + 128));
    }
    *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 384, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 384),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkSceneEnvironmentZone",
      4322);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 384),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])"scene_id: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, scene_id);
    v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])" area_id: ");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, area_id);
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])byte_1A527260);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
    *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v13 = 0;
LABEL_89:
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v13 != 1 )
    {
      v45 = 0;
      goto LABEL_93;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 64));
  }
  v45 = 1;
LABEL_93:
  if ( v45 == 1 )
    v2 = 0;
  if ( v59 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 4363: range 000000000F293CB4-000000000F29444A
int32_t __cdecl JsonConfigMgr::checkNpcBornConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  uint32_t scene_id; // ecx
  char v8; // al
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  __int64 v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  _BOOL4 v13; // eax
  NpcExcelConfigMgr *p_npc_config_mgr; // rcx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  int v19; // edx
  int v20; // eax
  int32_t result; // eax
  std::vector<data::ConfigLevelNpcBornPos> *__for_range; // [rsp+10h] [rbp-190h]
  data::ConfigLevelNpcBornPos *npc_config; // [rsp+18h] [rbp-188h]
  std::vector<data::ConfigNpcBornPos> *__for_range_0; // [rsp+20h] [rbp-180h]
  data::ConfigNpcBornPos *npc_pos; // [rsp+28h] [rbp-178h]
  char v26[368]; // [rsp+30h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 4 13 scene_id:4366 64 8 16 __for_begin:4364 96 8 14 __for_end:4364 128 8 16 __for_begin:437"
                        "3 160 8 14 __for_end:4373 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkNpcBornConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  __for_range = &this->npc_born_vec;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, v1);
  *(std::vector<data::ConfigLevelNpcBornPos>::iterator *)(v3 + 64) = std::vector<data::ConfigLevelNpcBornPos>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v1);
  *(std::vector<data::ConfigLevelNpcBornPos>::iterator *)(v3 + 96) = std::vector<data::ConfigLevelNpcBornPos>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 96);
    if ( !__gnu_cxx::operator!=<data::ConfigLevelNpcBornPos *,std::vector<data::ConfigLevelNpcBornPos>>(
            (const __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *)(v3 + 64),
            (const __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *)(v3 + 96)) )
      break;
    npc_config = __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos *,std::vector<data::ConfigLevelNpcBornPos>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *const)(v3 + 64));
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&npc_config->scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&npc_config->scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&npc_config->scene_id);
    }
    scene_id = npc_config->scene_id;
    v8 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
    if ( v8 != 0 && v8 <= 3 )
    {
      LOBYTE(v6) = v8 != 0;
      __asan_report_store4(v3 + 48, v6);
    }
    *(_DWORD *)(v3 + 48) = scene_id;
    p_scene_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.scene_config_mgr;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 48);
    v10 = *(unsigned int *)(v3 + 48);
    if ( data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, v10) )
    {
      __for_range_0 = &npc_config->born_pos_list;
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 128, v10);
      *(std::vector<data::ConfigNpcBornPos>::iterator *)(v3 + 128) = std::vector<data::ConfigNpcBornPos>::begin(__for_range_0);
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 160, v10);
      *(std::vector<data::ConfigNpcBornPos>::iterator *)(v3 + 160) = std::vector<data::ConfigNpcBornPos>::end(__for_range_0);
      while ( 1 )
      {
        if ( !__gnu_cxx::operator!=<data::ConfigNpcBornPos *,std::vector<data::ConfigNpcBornPos>>(
                (const __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *)(v3 + 128),
                (const __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *)(v3 + 160)) )
        {
          v19 = 1;
          goto LABEL_34;
        }
        npc_pos = __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos *,std::vector<data::ConfigNpcBornPos>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *const)(v3 + 128));
        p_npc_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.npc_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)&npc_pos->config_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)npc_pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&npc_pos->config_id >> 3)
                                                                + 0x7FFF8000) )
        {
          __asan_report_load4(&npc_pos->config_id);
        }
        if ( !data::NpcExcelConfigMgrBase::findNpcExcelConfig(p_npc_config_mgr, npc_pos->config_id) )
          break;
        __gnu_cxx::__normal_iterator<data::ConfigNpcBornPos *,std::vector<data::ConfigNpcBornPos>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigNpcBornPos*,std::vector<data::ConfigNpcBornPos> > *const)(v3 + 128));
      }
      *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkNpcBornConfig",
        4377);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 256),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v16 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(v15, (const char (*)[63])byte_1A527540);
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &npc_pos->config_id);
      v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])",scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
      *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v19 = 0;
LABEL_34:
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      v13 = v19 == 1;
    }
    else
    {
      *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkNpcBornConfig",
        4369);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(v11, (const char (*)[67])byte_1A5274C0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
      *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v13 = 0;
    }
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( !v13 )
    {
      v20 = 0;
      goto LABEL_39;
    }
    __gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos *,std::vector<data::ConfigLevelNpcBornPos>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigLevelNpcBornPos*,std::vector<data::ConfigLevelNpcBornPos> > *const)(v3 + 64));
  }
  v20 = 1;
LABEL_39:
  if ( v20 == 1 )
    v2 = 0;
  result = v2;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4387: range 000000000F29444C-000000000F29499C
int32_t __cdecl JsonConfigMgr::checkClimateConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  unsigned int *v7; // rax
  int *v8; // rdx
  int v9; // ecx
  char v10; // al
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-154h]
  BuffExcelConfigMgr *buff_config_mgr; // [rsp+20h] [rbp-150h]
  data::ClimateDebuffMap *__for_range; // [rsp+28h] [rbp-148h]
  std::__detail::_Node_iterator<std::pair<const data::JsonClimateType,std::vector<unsigned int> >,false,false>::reference v17; // [rsp+30h] [rbp-140h]
  const std::tuple_element<1,std::pair<const data::JsonClimateType,std::vector<unsigned int> > >::type *__for_range_0; // [rsp+48h] [rbp-128h]
  char v19[288]; // [rsp+50h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 48 4 13 sbuff_id:4393 64 8 16 __for_begin:4391 96 8 14 __for_end:4391 128 8 16 __for_begin:439"
                        "3 160 8 14 __for_end:4393 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkClimateConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -202116109;
  buff_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.buff_config_mgr;
  ret = 0;
  __for_range = &this->config_climate_.common.debuffs;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<data::JsonClimateType,std::vector<unsigned int>>::iterator *)(v2 + 64) = std::unordered_map<data::JsonClimateType,std::vector<unsigned int>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<data::JsonClimateType,std::vector<unsigned int>>::iterator *)(v2 + 96) = std::unordered_map<data::JsonClimateType,std::vector<unsigned int>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<data::JsonClimateType const,std::vector<unsigned int>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<const data::JsonClimateType,std::vector<unsigned int> >,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const data::JsonClimateType,std::vector<unsigned int> >,false> *)(v2 + 96)) )
      break;
    v17 = std::__detail::_Node_iterator<std::pair<data::JsonClimateType const,std::vector<unsigned int>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<const data::JsonClimateType,std::vector<unsigned int> >,false,false> *const)(v2 + 64));
    std::get<0ul,data::JsonClimateType const,std::vector<unsigned int>>(v17);
    __for_range_0 = std::get<1ul,data::JsonClimateType const,std::vector<unsigned int>>(v17);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 128) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 160) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v2 + 160);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 160)) )
        break;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
      v7 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
      v8 = (int *)v7;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      v9 = *v8;
      v10 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v10 != 0 && v10 <= 3 )
      {
        LOBYTE(v6) = v10 != 0;
        __asan_report_store4(v2 + 48, v6);
      }
      *(_DWORD *)(v2 + 48) = v9;
      if ( !data::BuffExcelConfigMgrBase::findBuffExcelConfig(buff_config_mgr, *(_DWORD *)(v2 + 48)) )
      {
        *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkClimateConfig",
          4397);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v11,
                (const char (*)[42])"findBuffExcelConfig fail, server_buff_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
        *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<data::JsonClimateType const,std::vector<unsigned int>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<const data::JsonClimateType,std::vector<unsigned int> >,false,false> *const)(v2 + 64));
  }
  result = ret;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4407: range 000000000F29499E-000000000F295E61
int32_t __cdecl JsonConfigMgr::checkAbilityGroupConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  const char *v7; // rax
  _BYTE *v8; // rdx
  char v9; // cl
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  common::milog::MiLogStream *v12; // rcx
  data::AbilityGroupSourceType ability_group_source_type; // edi
  char v14; // al
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  __int64 v17; // rsi
  const char *v18; // rax
  _BYTE *v19; // rdx
  char v20; // cl
  common::milog::MiLogStream *v21; // rax
  const char *v22; // rsi
  common::milog::MiLogStream *v23; // rcx
  data::AbilityGroupTargetType ability_group_target_type; // edi
  char v25; // al
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  unsigned __int64 v28; // rax
  data::ConfigEntityAbilityEntryList *p_target_abilities; // rsi
  char *v30; // rsi
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rdx
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rdx
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  data::ConfigAbilityGroup *v44; // rdx
  unsigned __int64 v45; // rax
  int32_t ret; // [rsp+14h] [rbp-3DCh]
  data::ConfigAbilityGroupMap *__for_range; // [rsp+18h] [rbp-3D8h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true>::reference __in; // [rsp+20h] [rbp-3D0h]
  std::tuple_element<0,std::pair<const std::string,data::ConfigAbilityGroup> >::type *ability_group_name; // [rsp+28h] [rbp-3C8h]
  std::tuple_element<1,std::pair<const std::string,data::ConfigAbilityGroup> >::type *ability_group; // [rsp+30h] [rbp-3C0h]
  std::vector<data::ConfigEntityAbilityEntry> *__for_range_0; // [rsp+38h] [rbp-3B8h]
  const std::vector<data::ConfigDynamicTalent> *__for_range_1; // [rsp+48h] [rbp-3A8h]
  const data::ConfigDynamicTalent *dynamic_talent; // [rsp+50h] [rbp-3A0h]
  data::ConfigEntityAbilityEntry *ability_entry; // [rsp+58h] [rbp-398h]
  char v57[912]; // [rsp+60h] [rbp-390h] BYREF

  v2 = (unsigned __int64)v57;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(864LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 32 4 9 <unknown> 48 4 9 <unknown> 64 8 16 __for_begin:4410 96 8 14 __for_end:4410 128 8 16 __"
                        "for_begin:4434 160 8 14 __for_end:4434 192 8 16 __for_begin:4455 224 8 14 __for_end:4455 256 24 "
                        "17 ability_list:4432 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>"
                        " 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 56 21 ability_name_set:4409";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkAbilityGroupConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -234881024;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218103808;
  v4[536862746] = -202116109;
  ret = 0;
  std::unordered_set<std::string>::unordered_set((std::unordered_set<std::string> *const)(v2 + 768));
  __for_range = &this->config_ability_group_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::ConfigAbilityGroup>::iterator *)(v2 + 64) = std::unordered_map<std::string,data::ConfigAbilityGroup>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<std::string,data::ConfigAbilityGroup>::iterator *)(v2 + 96) = std::unordered_map<std::string,data::ConfigAbilityGroup>::end(__for_range);
  while ( 1 )
  {
    v5 = (const char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<std::string const,data::ConfigAbilityGroup>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true> *)(v2 + 96)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAbilityGroup>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *const)(v2 + 64));
    ability_group_name = std::get<0ul,std::string const,data::ConfigAbilityGroup>(__in);
    ability_group = std::get<1ul,std::string const,data::ConfigAbilityGroup>(__in);
    if ( (unsigned __int8)std::string::empty(ability_group_name) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkAbilityGroupConfig",
        4415);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 320),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v5 = byte_1A527860;
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v6, (const char (*)[25])byte_1A527860);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    if ( *(_BYTE *)(((unsigned __int64)ability_group >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)ability_group >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(ability_group);
    }
    v7 = data::enumValToStr(ability_group->ability_group_source_type);
    v8 = v7;
    v9 = *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000);
    if ( v9 != 0 && ((unsigned __int8)v7 & 7) >= v9 )
    {
      LOBYTE(v5) = v9 != 0;
      __asan_report_load1(v7, v5, v7);
    }
    if ( !*v8 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkAbilityGroupConfig",
        4421);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 384),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = byte_1A5278A0;
      v12 = common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(v10, (const char (*)[59])byte_1A5278A0);
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)ability_group >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)ability_group >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(ability_group);
      }
      ability_group_source_type = ability_group->ability_group_source_type;
      v14 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
      if ( v14 != 0 && v14 <= 3 )
      {
        ability_group_source_type = v2 + 32;
        LOBYTE(v11) = v14 != 0;
        __asan_report_store4(v2 + 32, v11);
      }
      *(_DWORD *)(v2 + 32) = ability_group_source_type;
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 32));
      v16 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v15, (const char (*)[25])byte_1A527900);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, ability_group_name);
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    v17 = (((_BYTE)ability_group + 4) & 7u) + 3;
    if ( *(_BYTE *)(((unsigned __int64)&ability_group->ability_group_target_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)ability_group + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&ability_group->ability_group_target_type >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load4(&ability_group->ability_group_target_type);
    }
    v18 = data::enumValToStr(ability_group->ability_group_target_type);
    v19 = v18;
    v20 = *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000);
    if ( v20 != 0 && ((unsigned __int8)v18 & 7) >= v20 )
    {
      LOBYTE(v17) = v20 != 0;
      __asan_report_load1(v18, v17, v18);
    }
    if ( !*v19 )
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkAbilityGroupConfig",
        4428);
      v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 448),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v22 = byte_1A527940;
      v23 = common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(v21, (const char (*)[59])byte_1A527940);
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&ability_group->ability_group_target_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)ability_group + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&ability_group->ability_group_target_type >> 3)
                                                                    + 0x7FFF8000) )
      {
        __asan_report_load4(&ability_group->ability_group_target_type);
      }
      ability_group_target_type = ability_group->ability_group_target_type;
      v25 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v25 != 0 && v25 <= 3 )
      {
        ability_group_target_type = v2 + 48;
        LOBYTE(v22) = v25 != 0;
        __asan_report_store4(v2 + 48, v22);
      }
      *(_DWORD *)(v2 + 48) = ability_group_target_type;
      v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v2 + 48));
      v27 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v26, (const char (*)[25])byte_1A527900);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, ability_group_name);
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    v28 = ((v2 + 256) >> 3) + 2147450880;
    *(_WORD *)v28 = 0;
    *(_BYTE *)(v28 + 2) = 0;
    p_target_abilities = &ability_group->target_abilities;
    std::vector<data::ConfigEntityAbilityEntry>::vector(
      (std::vector<data::ConfigEntityAbilityEntry> *const)(v2 + 256),
      &ability_group->target_abilities);
    __for_range_0 = (std::vector<data::ConfigEntityAbilityEntry> *)(v2 + 256);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, p_target_abilities);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 128) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, p_target_abilities);
    *(std::vector<data::ConfigEntityAbilityEntry>::iterator *)(v2 + 160) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_0);
    while ( 1 )
    {
      v30 = (char *)(v2 + 160);
      if ( !__gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 160)) )
        break;
      ability_entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 128));
      if ( !JsonConfigMgr::checkAbilityName(this, &ability_entry->ability_name) )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkAbilityGroupConfig",
          4438);
        v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 512),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v32 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v31, (const char (*)[24])byte_1A5279A0);
        v33 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v32, &ability_entry->ability_name);
        v34 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v33, (const char (*)[25])byte_1A527900);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v34, ability_group_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      if ( common::tools::MiscUtils::isContains<std::unordered_set<std::string>,std::string>(
             (std::unordered_set<std::string> *)(v2 + 768),
             &ability_entry->ability_name) )
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 576),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_config_mgr.cpp",
          "checkAbilityGroupConfig",
          4445);
        v35 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                (common::milog::MiLogStream *const)(v2 + 576),
                (const char (*)[30])byte_1A5279E0);
        v36 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, &ability_entry->ability_name);
        v37 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v36, (const char (*)[25])byte_1A527900);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v37, ability_group_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
      }
      else
      {
        std::unordered_set<std::string>::insert(
          (std::unordered_set<std::string> *const)(v2 + 768),
          &ability_entry->ability_name);
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &ability_group->target_talents;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v30);
    *(std::vector<data::ConfigDynamicTalent>::const_iterator *)(v2 + 192) = std::vector<data::ConfigDynamicTalent>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v30);
    *(std::vector<data::ConfigDynamicTalent>::const_iterator *)(v2 + 224) = std::vector<data::ConfigDynamicTalent>::end(__for_range_1);
    while ( __gnu_cxx::operator!=<data::ConfigDynamicTalent const*,std::vector<data::ConfigDynamicTalent>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigDynamicTalent*,std::vector<data::ConfigDynamicTalent> > *)(v2 + 192),
              (const __gnu_cxx::__normal_iterator<const data::ConfigDynamicTalent*,std::vector<data::ConfigDynamicTalent> > *)(v2 + 224)) )
    {
      dynamic_talent = __gnu_cxx::__normal_iterator<data::ConfigDynamicTalent const*,std::vector<data::ConfigDynamicTalent>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigDynamicTalent*,std::vector<data::ConfigDynamicTalent> > *const)(v2 + 192));
      if ( (unsigned __int8)std::string::empty(dynamic_talent) )
      {
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkAbilityGroupConfig",
          4459);
        v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 640),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v39 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v38, (const char (*)[42])byte_1A527A20);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v39, ability_group_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else if ( !JsonConfigMgr::findTalentMixinConfigs(this, &dynamic_talent->talent_name) )
      {
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 704, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 704),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkAbilityGroupConfig",
          4464);
        v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 704),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v41 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v40, (const char (*)[31])byte_1A527A80);
        v42 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v41, &dynamic_talent->talent_name);
        v43 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v42, (const char (*)[25])byte_1A527900);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, ability_group_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigDynamicTalent const*,std::vector<data::ConfigDynamicTalent>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigDynamicTalent*,std::vector<data::ConfigDynamicTalent> > *const)(v2 + 192));
    }
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((unsigned __int64)&ability_group->ability_group_target_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)ability_group + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&ability_group->ability_group_target_type >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load4(&ability_group->ability_group_target_type);
    }
    if ( ability_group->ability_group_target_type == ABILITY_GROUP_TARGET_TEAM )
    {
      v44 = std::unordered_map<std::string,data::ConfigAbilityGroup>::operator[](
              &this->config_team_ability_group_map_,
              ability_group_name);
      data::ConfigAbilityGroup::operator=(v44, ability_group);
    }
    std::vector<data::ConfigEntityAbilityEntry>::~vector((std::vector<data::ConfigEntityAbilityEntry> *const)(v2 + 256));
    v45 = ((v2 + 256) >> 3) + 2147450880;
    *(_WORD *)v45 = -1800;
    *(_BYTE *)(v45 + 2) = -8;
    std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAbilityGroup>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  std::unordered_set<std::string>::clear((std::unordered_set<std::string> *const)(v2 + 768));
  std::unordered_set<std::string>::~unordered_set((std::unordered_set<std::string> *const)(v2 + 768));
  if ( v57 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 96) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = -168430091;
  }
  return ret;
};

// Line 4481: range 000000000F295EB4-000000000F299692
int32_t __cdecl JsonConfigMgr::checkWidgetConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::tuple_element<1,const std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> > >::type *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r15
  __int64 v8; // rax
  std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t material_id; // ecx
  char v11; // al
  MaterialExcelConfigMgr *p_material_config_mgr; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  GadgetExcelConfigMgr *p_gadget_config_mgr; // r15
  std::__shared_ptr_access<data::ConfigWidgetAttachAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r15
  std::__shared_ptr_access<data::ConfigWidgetAttachAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  GadgetExcelConfigMgr *v22; // r15
  std::__shared_ptr_access<data::ConfigWidgetTreasureMapDetector,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r15
  std::__shared_ptr_access<data::ConfigWidgetTreasureMapDetector,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  GadgetExcelConfigMgr *v27; // r15
  std::__shared_ptr_access<data::ConfigWidgetMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r15
  std::__shared_ptr_access<data::ConfigWidgetMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  common::milog::MiLogStream *v32; // rax
  GadgetExcelConfigMgr *v33; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyAnchorPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rdx
  uint32_t *p_gadget_id; // rax
  uint32_t *gadget_id; // rsi
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // r15
  char *v39; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v40; // rax
  int *v41; // rdx
  int v42; // ecx
  char v43; // al
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  GadgetExcelConfigMgr *v55; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyBonfire,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyBonfire,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  char *v60; // rsi
  common::milog::MiLogStream *v61; // rax
  const char *v62; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v63; // rax
  int *v64; // rdx
  int v65; // ecx
  char v66; // al
  MaterialExcelConfigMgr *v67; // rcx
  __int64 v68; // rsi
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  const data::ItemUseConfig *M_current; // r15
  const data::ItemUseConfig *v73; // rcx
  JsonConfigMgr::checkWidgetConfig::<lambda(const data::ItemUseConfig&)> v74; // dl
  const std::vector<data::ItemUseConfig> *p_item_use; // rdx
  bool v76; // al
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  std::unordered_set<unsigned int>::size_type v80; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v81; // rax
  common::milog::MiLogStream *v82; // rax
  char *v83; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v84; // rax
  int *v85; // rdx
  int v86; // ecx
  char v87; // al
  MaterialExcelConfigMgr *v88; // rcx
  common::milog::MiLogStream *v89; // rax
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // rax
  common::milog::MiLogStream *v94; // rax
  common::milog::MiLogStream *v95; // rax
  common::milog::MiLogStream *v96; // rax
  char *v97; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v98; // rax
  int *v99; // rdx
  int v100; // ecx
  char v101; // al
  MaterialExcelConfigMgr *v102; // rcx
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // rax
  std::unordered_set<unsigned int>::size_type v106; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v107; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v108; // rax
  common::milog::MiLogStream *v109; // rax
  common::milog::MiLogStream *v110; // rax
  GadgetExcelConfigMgr *v111; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v112; // rax
  common::milog::MiLogStream *v113; // rax
  common::milog::MiLogStream *v114; // r15
  std::__shared_ptr_access<data::ConfigWidgetToyMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v115; // rax
  std::vector<unsigned int>::size_type v117; // [rsp+0h] [rbp-980h]
  int32_t ret; // [rsp+14h] [rbp-96Ch]
  std::unordered_map<std::type_index,std::shared_ptr<data::ConfigBaseWidget>> *__for_range; // [rsp+18h] [rbp-968h]
  data::UInt32Array *__for_range_0; // [rsp+28h] [rbp-958h]
  const data::SceneExcelConfig *scene_excel_config_ptr; // [rsp+30h] [rbp-950h]
  data::UInt32Array *__for_range_1; // [rsp+40h] [rbp-940h]
  data::ConfigWidgetToyLunchBoxHealMaterial *__for_range_2; // [rsp+48h] [rbp-938h]
  data::UInt32Array *__for_range_3; // [rsp+50h] [rbp-930h]
  const data::MaterialExcelConfig *material_config_ptr_1; // [rsp+60h] [rbp-920h]
  const data::MaterialExcelConfig *material_config_ptr_0; // [rsp+68h] [rbp-918h]
  std::__detail::_Node_iterator<std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> >,false,false>::reference v127; // [rsp+70h] [rbp-910h]
  std::tuple_element<0,std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> > >::type *config_type_info; // [rsp+78h] [rbp-908h]
  std::tuple_element<1,const std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> > >::type *config_widget_ptr; // [rsp+80h] [rbp-900h]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+88h] [rbp-8F8h]
  char v131[2288]; // [rsp+90h] [rbp-8F0h] BYREF

  v2 = (unsigned __int64)v131;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2240LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "48 48 4 16 material_id:4491 64 4 13 scene_id:4555 80 4 16 material_id:4602 96 4 16 material_id:4"
                        "625 112 4 16 material_id:4642 128 8 16 __for_begin:4483 160 8 14 __for_end:4483 192 8 9 <unknown"
                        "> 224 8 16 __for_begin:4555 256 8 14 __for_end:4555 288 8 16 __for_begin:4602 320 8 14 __for_end"
                        ":4602 352 8 9 iter:4611 384 8 9 <unknown> 416 8 16 __for_begin:4625 448 8 14 __for_end:4625 480 "
                        "8 16 __for_begin:4642 512 8 14 __for_end:4642 544 16 29 config_attach_avatar_ptr:4506 576 16 24 "
                        "config_treasure_ptr:4517 608 16 28 miracle_ring_config_ptr:4528 640 16 28 config_anchor_point_pt"
                        "r:4541 672 16 23 config_bonfire_ptr:4577 704 16 25 config_lunch_box_ptr:4594 736 16 32 new_mirac"
                        "le_ring_config_ptr:4659 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unkno"
                        "wn> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <u"
                        "nknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 "
                        "9 <unknown> 1664 32 9 <unknown> 1728 32 9 <unknown> 1792 32 9 <unknown> 1856 32 9 <unknown> 1920"
                        " 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9 <unknown> 2112 32 9 <unknown> 2176 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkWidgetConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -234556924;
  v4[536862723] = -234556924;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862736] = -218959360;
  v4[536862737] = -219021312;
  v4[536862738] = -219021312;
  v4[536862739] = -219021312;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862742] = -219021312;
  v4[536862743] = -219021312;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -218959118;
  v4[536862775] = -218959118;
  v4[536862777] = -218959118;
  v4[536862779] = -218959118;
  v4[536862781] = -218959118;
  v4[536862783] = -218959118;
  v4[536862785] = -218959118;
  v4[536862787] = -218959118;
  v4[536862789] = -202116109;
  ret = 0;
  __for_range = &this->widget_json_config_.type_widget_config_map;
  if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 128, v1);
  *(std::unordered_map<std::type_index,std::shared_ptr<data::ConfigBaseWidget>>::iterator *)(v2 + 128) = std::unordered_map<std::type_index,std::shared_ptr<data::ConfigBaseWidget>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 160, v1);
  *(std::unordered_map<std::type_index,std::shared_ptr<data::ConfigBaseWidget>>::iterator *)(v2 + 160) = std::unordered_map<std::type_index,std::shared_ptr<data::ConfigBaseWidget>>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<std::type_index const,std::shared_ptr<data::ConfigBaseWidget>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> >,false> *)(v2 + 128),
            (const std::__detail::_Node_iterator_base<std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> >,false> *)(v2 + 160)) )
  {
    v127 = std::__detail::_Node_iterator<std::pair<std::type_index const,std::shared_ptr<data::ConfigBaseWidget>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> >,false,false> *const)(v2 + 128));
    config_type_info = std::get<0ul,std::type_index const,std::shared_ptr<data::ConfigBaseWidget>>(v127);
    config_widget_ptr = (std::tuple_element<1,const std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> > >::type *)std::get<1ul,std::type_index const,std::shared_ptr<data::ConfigBaseWidget>>(v127);
    v5 = config_widget_ptr;
    if ( std::operator==<data::ConfigBaseWidget>(0LL, config_widget_ptr) )
    {
      *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 768, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 768),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetConfig",
        4487);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 768),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             v6,
             (const char (*)[33])"config_widget_ptr is null, type:");
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      v8 = (__int64)std::type_index::name(config_type_info);
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
        v8 = __asan_report_store8(v2 + 192, "config_widget_ptr is null, type:");
      *(_QWORD *)(v2 + 192) = v8;
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v7, (const char *const *)(v2 + 192));
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
      *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
      v9 = std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_widget_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&v9->material_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v9->material_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v9->material_id);
      }
      material_id = v9->material_id;
      v11 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v11 != 0 && v11 <= 3 )
      {
        LOBYTE(v5) = v11 != 0;
        __asan_report_store4(v2 + 48, v5);
      }
      *(_DWORD *)(v2 + 48) = material_id;
      p_material_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.material_config_mgr;
      if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v2 + 48);
      material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(
                              p_material_config_mgr,
                              *(_DWORD *)(v2 + 48));
      if ( material_config_ptr )
      {
        if ( !std::vector<data::ItemUseConfig>::empty(&material_config_ptr->item_use) )
        {
          *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 896, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 896),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkWidgetConfig",
            4501);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 896),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v16 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                  v15,
                  (const char (*)[51])"material config should not be usable! material_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
          *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          *(_WORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v2 + 544) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ConfigWidgetAttachAvatar,data::ConfigBaseWidget>((const std::shared_ptr<data::ConfigBaseWidget> *)(v2 + 544));
          if ( std::operator!=<data::ConfigWidgetAttachAvatar>(
                 (const std::shared_ptr<data::ConfigWidgetAttachAvatar> *)(v2 + 544),
                 0LL) )
          {
            p_gadget_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
            v18 = std::__shared_ptr_access<data::ConfigWidgetAttachAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetAttachAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 544));
            if ( *(_BYTE *)(((unsigned __int64)&v18->use_gadget_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v18->use_gadget_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v18->use_gadget_id);
            }
            if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(p_gadget_config_mgr, v18->use_gadget_id) )
            {
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 960, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 960),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkWidgetConfig",
                4511);
              v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 960),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v20 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                      v19,
                      (const char (*)[39])"findGadgetExcelConfig fail! gadget_id:");
              v21 = std::__shared_ptr_access<data::ConfigWidgetAttachAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetAttachAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 544));
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &v21->use_gadget_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
          }
          else
          {
            *(_WORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v2 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::ConfigWidgetTreasureMapDetector,data::ConfigBaseWidget>((const std::shared_ptr<data::ConfigBaseWidget> *)(v2 + 576));
            if ( std::operator!=<data::ConfigWidgetTreasureMapDetector>(
                   (const std::shared_ptr<data::ConfigWidgetTreasureMapDetector> *)(v2 + 576),
                   0LL) )
            {
              v22 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
              v23 = std::__shared_ptr_access<data::ConfigWidgetTreasureMapDetector,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetTreasureMapDetector,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 576));
              if ( *(_BYTE *)(((unsigned __int64)&v23->gadget_id >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v23->gadget_id >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v23->gadget_id);
              }
              if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(v22, v23->gadget_id) )
              {
                *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1024, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1024),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkWidgetConfig",
                  4522);
                v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1024),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v25 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                        v24,
                        (const char (*)[39])"findGadgetExcelConfig fail! gadget_id:");
                v26 = std::__shared_ptr_access<data::ConfigWidgetTreasureMapDetector,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetTreasureMapDetector,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 576));
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &v26->gadget_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
                *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
            }
            else
            {
              *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::ConfigWidgetMiracleRing,data::ConfigBaseWidget>((const std::shared_ptr<data::ConfigBaseWidget> *)(v2 + 608));
              if ( std::operator!=<data::ConfigWidgetMiracleRing>(
                     (const std::shared_ptr<data::ConfigWidgetMiracleRing> *)(v2 + 608),
                     0LL) )
              {
                v27 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
                v28 = std::__shared_ptr_access<data::ConfigWidgetMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
                if ( *(_BYTE *)(((unsigned __int64)&v28->gadget_id >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&v28->gadget_id >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&v28->gadget_id);
                }
                if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(v27, v28->gadget_id) )
                {
                  *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1088, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1088),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "checkWidgetConfig",
                    4533);
                  v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1088),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v30 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                          v29,
                          (const char (*)[39])"findGadgetExcelConfig fail! gadget_id:");
                  v31 = std::__shared_ptr_access<data::ConfigWidgetMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &v31->gadget_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
                  *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                  ret = -1;
                }
              }
              std::shared_ptr<data::ConfigWidgetMiracleRing>::~shared_ptr((std::shared_ptr<data::ConfigWidgetMiracleRing> *const)(v2 + 608));
            }
            std::shared_ptr<data::ConfigWidgetTreasureMapDetector>::~shared_ptr((std::shared_ptr<data::ConfigWidgetTreasureMapDetector> *const)(v2 + 576));
          }
          std::shared_ptr<data::ConfigWidgetAttachAvatar>::~shared_ptr((std::shared_ptr<data::ConfigWidgetAttachAvatar> *const)(v2 + 544));
        }
      }
      else
      {
        *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 832, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 832),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetConfig",
          4495);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 832),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                v13,
                (const char (*)[43])"findMaterialExcelConfig fail, material_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
        *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
    }
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -1800;
    std::__detail::_Node_iterator<std::pair<std::type_index const,std::shared_ptr<data::ConfigBaseWidget>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<const std::type_index,std::shared_ptr<data::ConfigBaseWidget> >,false,false> *const)(v2 + 128));
  }
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
  *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
  if ( *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  WidgetJsonNewConfig::findWidgetConfig<data::ConfigWidgetToyAnchorPoint>((const WidgetJsonNewConfig *const)(v2 + 640));
  if ( std::operator==<data::ConfigWidgetToyAnchorPoint>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyAnchorPoint> *)(v2 + 640)) )
  {
    *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 1152, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 1152),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWidgetConfig",
      4544);
    v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v2 + 1152),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      v32,
      (const char (*)[37])"ConfigWidgetToyAnchorPoint not found");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
    *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
    ret = -1;
  }
  else
  {
    v33 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
    v34 = std::__shared_ptr_access<data::ConfigWidgetToyAnchorPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyAnchorPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 640));
    p_gadget_id = &v34->gadget_id;
    if ( *(_BYTE *)(((unsigned __int64)p_gadget_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_gadget_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_gadget_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_gadget_id);
    }
    gadget_id = (uint32_t *)v34->gadget_id;
    if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(v33, (uint32_t)gadget_id) )
    {
      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1216, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1216),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetConfig",
        4552);
      v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1216),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v38 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              v37,
              (const char (*)[39])"findGadgetExcelConfig fail! gadget_id:");
      gadget_id = &std::__shared_ptr_access<data::ConfigWidgetToyAnchorPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyAnchorPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 640))->gadget_id;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, gadget_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __for_range_0 = &std::__shared_ptr_access<data::ConfigWidgetToyAnchorPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyAnchorPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 640))->invalid_scene_ids;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, gadget_id);
    *(std::vector<unsigned int>::iterator *)(v2 + 224) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 256, gadget_id);
    *(std::vector<unsigned int>::iterator *)(v2 + 256) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v39 = (char *)(v2 + 256);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 224),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 256)) )
        break;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 4;
      v40 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 224));
      v41 = (int *)v40;
      if ( *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v40 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v40);
      }
      v42 = *v41;
      v43 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
      if ( v43 != 0 && v43 <= 3 )
      {
        LOBYTE(v39) = v43 != 0;
        __asan_report_store4(v2 + 64, v39);
      }
      *(_DWORD *)(v2 + 64) = v42;
      if ( !JsonConfigMgr::findSceneJsonConfig(this, *(unsigned int *)(v2 + 64)) )
      {
        *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1280, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1280),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetConfig",
          4559);
        v44 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1280),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v45 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v44,
                (const char (*)[18])"invalid scene_id:");
        v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v45,
                (const unsigned int *)(v2 + 64));
        common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
          v46,
          (const char (*)[49])" in ConfigWidgetToyAnchorPoint.invalid_scene_ids");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
        *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      p_scene_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.scene_config_mgr;
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v2 + 64);
      scene_excel_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                                 p_scene_config_mgr,
                                 *(_DWORD *)(v2 + 64));
      if ( scene_excel_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&scene_excel_config_ptr->type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)scene_excel_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_excel_config_ptr->type >> 3)
                                                                                + 0x7FFF8000) )
        {
          __asan_report_load4(&scene_excel_config_ptr->type);
        }
        if ( scene_excel_config_ptr->type != SCENE_WORLD )
        {
          *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1408) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1408, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1408),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkWidgetConfig",
            4571);
          v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1408),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v52 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                  v51,
                  (const char (*)[49])"only world scene can be invalid scene, scene_id:");
          v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v52,
                  (const unsigned int *)(v2 + 64));
          common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            v53,
            (const char (*)[49])" in ConfigWidgetToyAnchorPoint.invalid_scene_ids");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1408));
          *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      else
      {
        *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1344, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1344),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetConfig",
          4565);
        v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1344),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v49 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                v48,
                (const char (*)[37])"findSceneExcelConfig fail, scene_id:");
        v50 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v49,
                (const unsigned int *)(v2 + 64));
        common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
          v50,
          (const char (*)[49])" in ConfigWidgetToyAnchorPoint.invalid_scene_ids");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
        *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 224));
    }
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
  }
  *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
  if ( *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  WidgetJsonNewConfig::findWidgetConfig<data::ConfigWidgetToyBonfire>((const WidgetJsonNewConfig *const)(v2 + 672));
  if ( std::operator==<data::ConfigWidgetToyBonfire>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyBonfire> *)(v2 + 672)) )
  {
    *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 1472, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 1472),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWidgetConfig",
      4580);
    v54 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v2 + 1472),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
      v54,
      (const char (*)[33])"ConfigWidgetToyBonfire not found");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
    *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -117901064;
    ret = -1;
  }
  else
  {
    v55 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
    v56 = std::__shared_ptr_access<data::ConfigWidgetToyBonfire,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyBonfire,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 672));
    if ( *(_BYTE *)(((unsigned __int64)&v56->gadget_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v56->gadget_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v56->gadget_id);
    }
    if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(v55, v56->gadget_id) )
    {
      *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1536) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1536, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1536),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetConfig",
        4588);
      v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1536),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v58 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              v57,
              (const char (*)[39])"findGadgetExcelConfig fail! gadget_id:");
      v59 = std::__shared_ptr_access<data::ConfigWidgetToyBonfire,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyBonfire,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 672));
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v58, &v59->gadget_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1536));
      *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
  }
  *(_WORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
  if ( *(_WORD *)(((v2 + 704) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  WidgetJsonNewConfig::findWidgetConfig<data::ConfigWidgetToyLunchBox>((const WidgetJsonNewConfig *const)(v2 + 704));
  v60 = (char *)(v2 + 704);
  if ( std::operator==<data::ConfigWidgetToyLunchBox>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyLunchBox> *)(v2 + 704)) )
  {
    *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 1600) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 1600, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 1600),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWidgetConfig",
      4597);
    v61 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v2 + 1600),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      v61,
      (const char (*)[34])"ConfigWidgetToyLunchBox not found");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1600));
    *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -117901064;
    ret = -1;
  }
  else
  {
    __for_range_1 = &std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704))->revive_materials;
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 288, v60);
    *(std::vector<unsigned int>::iterator *)(v2 + 288) = std::vector<unsigned int>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 320, v60);
    *(std::vector<unsigned int>::iterator *)(v2 + 320) = std::vector<unsigned int>::end(__for_range_1);
    while ( 1 )
    {
      v62 = (const char *)(v2 + 320);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 288),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 320)) )
        break;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 4;
      v63 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 288));
      v64 = (int *)v63;
      if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v63);
      }
      v65 = *v64;
      v66 = *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000);
      if ( v66 != 0 && v66 <= 3 )
      {
        LOBYTE(v62) = v66 != 0;
        __asan_report_store4(v2 + 80, v62);
      }
      *(_DWORD *)(v2 + 80) = v65;
      v67 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.material_config_mgr;
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v2 + 80);
      v68 = *(unsigned int *)(v2 + 80);
      material_config_ptr_0 = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(v67, v68);
      if ( material_config_ptr_0 )
      {
        *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        M_current = std::vector<data::ItemUseConfig>::end(&material_config_ptr_0->item_use)._M_current;
        v73 = std::vector<data::ItemUseConfig>::begin(&material_config_ptr_0->item_use)._M_current;
        v74.gap0[0] = *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000);
        if ( v74.gap0[0] )
          __asan_report_store8(v2 + 352, v68);
        *(__gnu_cxx::__normal_iterator<const data::ItemUseConfig*,std::vector<data::ItemUseConfig> > *)(v2 + 352) = std::find_if<__gnu_cxx::__normal_iterator<data::ItemUseConfig const*,std::vector<data::ItemUseConfig>>,JsonConfigMgr::checkWidgetConfig(void)::{lambda(data::ItemUseConfig const&)#1}>((__gnu_cxx::__normal_iterator<const data::ItemUseConfig*,std::vector<data::ItemUseConfig> >)v73, (__gnu_cxx::__normal_iterator<const data::ItemUseConfig*,std::vector<data::ItemUseConfig> >)M_current, v74);
        *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        p_item_use = &material_config_ptr_0->item_use;
        if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 384, M_current);
        *(std::vector<data::ItemUseConfig>::const_iterator *)(v2 + 384) = std::vector<data::ItemUseConfig>::end(p_item_use);
        v76 = __gnu_cxx::operator==<data::ItemUseConfig const*,std::vector<data::ItemUseConfig>>(
                (const __gnu_cxx::__normal_iterator<const data::ItemUseConfig*,std::vector<data::ItemUseConfig> > *)(v2 + 352),
                (const __gnu_cxx::__normal_iterator<const data::ItemUseConfig*,std::vector<data::ItemUseConfig> > *)(v2 + 384));
        *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
        if ( v76 )
        {
          *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1728) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1759) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1759) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1728, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1728),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkWidgetConfig",
            4615);
          v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1728),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v78 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  v77,
                  (const char (*)[44])"material cannot revive avatar, material_id:");
          v79 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v78,
                  (const unsigned int *)(v2 + 80));
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            v79,
            (const char (*)[28])" in ConfigWidgetToyLunchBox");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1728));
          *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      else
      {
        *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1664) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1664, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1664),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetConfig",
          4607);
        v69 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1664),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v70 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                v69,
                (const char (*)[43])"findMaterialExcelConfig fail, material_id:");
        v71 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v70,
                (const unsigned int *)(v2 + 80));
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          v71,
          (const char (*)[28])" in ConfigWidgetToyLunchBox");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1664));
        *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 288));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    v80 = std::unordered_set<unsigned int>::size(&this->widget_json_new_config_.lunch_box_revive_material_set);
    v81 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704));
    if ( v80 != std::vector<unsigned int>::size(&v81->revive_materials) )
    {
      *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1792) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1792, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1792),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetConfig",
        4622);
      v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1792),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v62 = "ConfigWidgetToyLunchBox.reviveMaterials has duplicate material_id";
      common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
        v82,
        (const char (*)[66])"ConfigWidgetToyLunchBox.reviveMaterials has duplicate material_id");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1792));
      *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __for_range_2 = &std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704))->heal_materials;
    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 416, v62);
    *(std::vector<unsigned int>::iterator *)(v2 + 416) = std::vector<unsigned int>::begin(&__for_range_2->notice_add_hp_materials);
    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 448, v62);
    *(std::vector<unsigned int>::iterator *)(v2 + 448) = std::vector<unsigned int>::end(&__for_range_2->notice_add_hp_materials);
    while ( 1 )
    {
      v83 = (char *)(v2 + 448);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 416),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 448)) )
        break;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 4;
      v84 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 416));
      v85 = (int *)v84;
      if ( *(_BYTE *)(((unsigned __int64)v84 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v84 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v84 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v84);
      }
      v86 = *v85;
      v87 = *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000);
      if ( v87 != 0 && v87 <= 3 )
      {
        LOBYTE(v83) = v87 != 0;
        __asan_report_store4(v2 + 96, v83);
      }
      *(_DWORD *)(v2 + 96) = v86;
      v88 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.material_config_mgr;
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v2 + 96);
      material_config_ptr_1 = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(v88, *(_DWORD *)(v2 + 96));
      if ( material_config_ptr_1 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr_1->material_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)material_config_ptr_1 + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr_1->material_type >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load4(&material_config_ptr_1->material_type);
        }
        if ( material_config_ptr_1->material_type != MATERIAL_NOTICE_ADD_HP )
        {
          *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1920) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1920, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1920),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkWidgetConfig",
            4636);
          v92 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1920),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v93 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
                  v92,
                  (const char (*)[70])"material's MaterialType is not MATERIAL_NOTICE_ADD_HP, material_type:");
          v94 = common::milog::MiLogStream::operator<<<data::MaterialType,(data::MaterialType*)0>(
                  v93,
                  &material_config_ptr_1->material_type);
          v95 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v94,
                  (const char (*)[14])" material_id:");
          v96 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v95,
                  (const unsigned int *)(v2 + 96));
          common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
            v96,
            (const char (*)[63])" in ConfigWidgetToyLunchBox.healMaterials.noticeAddHpMaterials");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1920));
          *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      else
      {
        *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1856) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1887) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1887) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1856, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1856),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetConfig",
          4630);
        v89 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1856),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v90 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                v89,
                (const char (*)[43])"findMaterialExcelConfig fail, material_id:");
        v91 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v90,
                (const unsigned int *)(v2 + 96));
        common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
          v91,
          (const char (*)[63])" in ConfigWidgetToyLunchBox.healMaterials.noticeAddHpMaterials");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1856));
        *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 416));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
    __for_range_3 = &std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704))->heal_materials.other_add_hp_materials;
    *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 480, v83);
    *(std::vector<unsigned int>::iterator *)(v2 + 480) = std::vector<unsigned int>::begin(__for_range_3);
    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 512, v83);
    *(std::vector<unsigned int>::iterator *)(v2 + 512) = std::vector<unsigned int>::end(__for_range_3);
    while ( 1 )
    {
      v97 = (char *)(v2 + 512);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 480),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 512)) )
        break;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 4;
      v98 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 480));
      v99 = (int *)v98;
      if ( *(_BYTE *)(((unsigned __int64)v98 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v98 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v98 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v98);
      }
      v100 = *v99;
      v101 = *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000);
      if ( v101 != 0 && v101 <= 3 )
      {
        LOBYTE(v97) = v101 != 0;
        __asan_report_store4(v2 + 112, v97);
      }
      *(_DWORD *)(v2 + 112) = v100;
      v102 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.material_config_mgr;
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v2 + 112);
      if ( !data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(v102, *(_DWORD *)(v2 + 112)) )
      {
        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1984) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1984, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1984),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetConfig",
          4647);
        v103 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 1984),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v104 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                 v103,
                 (const char (*)[43])"findMaterialExcelConfig fail, material_id:");
        v105 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v104,
                 (const unsigned int *)(v2 + 112));
        common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
          v105,
          (const char (*)[62])" in ConfigWidgetToyLunchBox.healMaterials.otherAddHpMaterials");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1984));
        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 480));
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
    v106 = std::unordered_set<unsigned int>::size(&this->widget_json_new_config_.lunch_box_heal_material_set);
    v107 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704));
    v117 = std::vector<unsigned int>::size(&v107->heal_materials.notice_add_hp_materials);
    v108 = std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyLunchBox,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704));
    if ( v106 != v117 + std::vector<unsigned int>::size(&v108->heal_materials.other_add_hp_materials) )
    {
      *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 2048) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 2048, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 2048),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetConfig",
        4654);
      v109 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 2048),
               (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
        v109,
        (const char (*)[66])"ConfigWidgetToyLunchBox.reviveMaterials has duplicate material_id");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2048));
      *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
  }
  *(_WORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
  if ( *(_WORD *)(((v2 + 736) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  WidgetJsonNewConfig::findWidgetConfig<data::ConfigWidgetToyMiracleRing>((const WidgetJsonNewConfig *const)(v2 + 736));
  if ( std::operator==<data::ConfigWidgetToyMiracleRing>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyMiracleRing> *)(v2 + 736)) )
  {
    *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 2112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 2112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 2112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWidgetConfig",
      4662);
    v110 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 2112),
             (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      v110,
      (const char (*)[37])"ConfigWidgetToyMiracleRing not found");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2112));
    *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = -117901064;
    ret = -1;
  }
  else
  {
    v111 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
    v112 = std::__shared_ptr_access<data::ConfigWidgetToyMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 736));
    if ( *(_BYTE *)(((unsigned __int64)&v112->create_gadget_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v112->create_gadget_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v112->create_gadget_id);
    }
    if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(v111, v112->create_gadget_id) )
    {
      *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 2176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 2207) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 2176, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 2176),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetConfig",
        4669);
      v113 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 2176),
               (const char (*)[16])"[CONFIG_ERROR] ");
      v114 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
               v113,
               (const char (*)[39])"findGadgetExcelConfig fail! gadget_id:");
      v115 = std::__shared_ptr_access<data::ConfigWidgetToyMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyMiracleRing,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 736));
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v114, &v115->create_gadget_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2176));
      *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
  }
  std::shared_ptr<data::ConfigWidgetToyMiracleRing>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyMiracleRing> *const)(v2 + 736));
  std::shared_ptr<data::ConfigWidgetToyLunchBox>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyLunchBox> *const)(v2 + 704));
  std::shared_ptr<data::ConfigWidgetToyBonfire>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyBonfire> *const)(v2 + 672));
  std::shared_ptr<data::ConfigWidgetToyAnchorPoint>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyAnchorPoint> *const)(v2 + 640));
  if ( v131 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8110) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 280) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2240LL, v131);
  }
  return ret;
};

// Line 4612: range 000000000F295E62-000000000F295EB3
bool __cdecl JsonConfigMgr::checkWidgetConfig(void)::{lambda(data::ItemUseConfig const&)#1}::operator()(
        const JsonConfigMgr::checkWidgetConfig::<lambda(const data::ItemUseConfig&)> *const __closure,
        const data::ItemUseConfig *config)
{
  if ( *(_BYTE *)(((unsigned __int64)&config->use_op >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config->use_op >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config->use_op);
  }
  return config->use_op == ITEM_USE_RELIVE_AVATAR;
};

// Line 4678: range 000000000F299694-000000000F299EB3
int32_t __cdecl JsonConfigMgr::checkGadgetBuilderWidget(
        JsonConfigMgr *const this,
        const data::ConfigWidgetToyGadgetBuilder *gadget_builder_config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  GadgetExcelConfigMgr *p_gadget_config_mgr; // rcx
  __int64 gadget_id; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  char v16[352]; // [rsp+10h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 8 ret:4679 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkGadgetBuilderWidget;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, gadget_builder_config);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((unsigned __int64)&gadget_builder_config->lasting_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&gadget_builder_config->lasting_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&gadget_builder_config->lasting_time);
  }
  if ( !gadget_builder_config->lasting_time )
  {
    *(_DWORD *)(v2 + 48) = -1;
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkGadgetBuilderWidget",
      4683);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v5, (const char (*)[36])byte_1A528660);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( *(_BYTE *)(((unsigned __int64)&gadget_builder_config->max_count_in_scene >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)gadget_builder_config + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_builder_config->max_count_in_scene >> 3)
                                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&gadget_builder_config->max_count_in_scene);
  }
  if ( !gadget_builder_config->max_count_in_scene )
    goto LABEL_18;
  if ( *(_BYTE *)(((unsigned __int64)&gadget_builder_config->max_count_by_player >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&gadget_builder_config->max_count_by_player >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&gadget_builder_config->max_count_by_player);
  }
  if ( !gadget_builder_config->max_count_by_player )
  {
LABEL_18:
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 48, (((_BYTE)gadget_builder_config + 76) & 7u) + 3);
    *(_DWORD *)(v2 + 48) = -1;
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkGadgetBuilderWidget",
      4688);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v6, (const char (*)[31])byte_1A5286C0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  }
  p_gadget_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&gadget_builder_config->gadget_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)gadget_builder_config + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_builder_config->gadget_id >> 3)
                                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&gadget_builder_config->gadget_id);
  }
  gadget_id = gadget_builder_config->gadget_id;
  if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(p_gadget_config_mgr, gadget_id) )
  {
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 48, gadget_id);
    *(_DWORD *)(v2 + 48) = -1;
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkGadgetBuilderWidget",
      4693);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 192),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            v9,
            (const char (*)[39])"findGadgetExcelConfig fail! gadget_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &gadget_builder_config->gadget_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  }
  *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 256, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 256),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/json_config_mgr.cpp",
    "checkGadgetBuilderWidget",
    4695);
  v11 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
          (common::milog::MiLogStream *const)(v2 + 256),
          (const char (*)[48])"check ConfigWidgetToyGadgetBuilder material_id:");
  v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &gadget_builder_config->material_id);
  v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" ret:");
  common::milog::MiLogStream::operator<<<int,(int *)0>(v13, (const int *)(v2 + 48));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
  *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4701: range 000000000F299EB4-000000000F29A4D8
int32_t __cdecl JsonConfigMgr::checkUseAttachAbilityTriggerWidget(
        JsonConfigMgr *const this,
        const data::ConfigWidgetUseAttachAbilityTrigger *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_ability_group_name; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  bool has_trigger_ability; // [rsp+17h] [rbp-159h]
  const data::ConfigAbilityGroup *ability_group_config_ptr; // [rsp+18h] [rbp-158h]
  const std::vector<data::ConfigEntityAbilityEntry> *__for_range; // [rsp+20h] [rbp-150h]
  const data::ConfigEntityAbilityEntry *entry; // [rsp+28h] [rbp-148h]
  char v20[320]; // [rsp+30h] [rbp-140h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 16 __for_begin:4709 64 8 14 __for_end:4709 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkUseAttachAbilityTriggerWidget;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -202116109;
  p_ability_group_name = &config->ability_group_name;
  ability_group_config_ptr = JsonConfigMgr::findAbilityGroupConfig(this, &config->ability_group_name);
  if ( ability_group_config_ptr )
  {
    has_trigger_ability = 0;
    __for_range = &ability_group_config_ptr->target_abilities;
    if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 32, p_ability_group_name);
    *(std::vector<data::ConfigEntityAbilityEntry>::const_iterator *)(v2 + 32) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range);
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, p_ability_group_name);
    *(std::vector<data::ConfigEntityAbilityEntry>::const_iterator *)(v2 + 64) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range);
    while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry const*,std::vector<data::ConfigEntityAbilityEntry>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 32),
              (const __gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v2 + 64)) )
    {
      entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry const*,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 32));
      if ( std::operator==<char>(&entry->ability_name, &config->trigger_ability_name) )
      {
        has_trigger_ability = 1;
        break;
      }
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry const*,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v2 + 32));
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( !has_trigger_ability )
    {
      *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkUseAttachAbilityTriggerWidget",
        4719);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 160),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
              v9,
              (const char (*)[66])"trigger_ability_name not found in ability_group! trigger_ability:");
      v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, &config->trigger_ability_name);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v11, (const char (*)[16])" ability_group:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, &config->ability_group_name);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
      result = -1;
    }
    else
    {
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "checkUseAttachAbilityTriggerWidget",
        4723);
      v13 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
              (common::milog::MiLogStream *const)(v2 + 224),
              (const char (*)[55])"check ConfigWidgetUseAttachAbilityTrigger material_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &config->material_id);
      common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v14, (const char (*)[4])off_1A528A00);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      result = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkUseAttachAbilityTriggerWidget",
      4705);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
           v6,
           (const char (*)[49])"findAbilityGroupConfig fail, ability_group_name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &config->ability_group_name);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
    result = -1;
  }
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 4729: range 000000000F29A4DA-000000000F29B5C7
int32_t __cdecl JsonConfigMgr::checkLightStoneWidget(
        JsonConfigMgr *const this,
        const data::ConfigWidgetLightStone *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::vector<unsigned int>::size_type v6; // r15
  common::milog::MiLogStream *v7; // rax
  char *v8; // rsi
  unsigned int *v9; // rax
  int *v10; // rdx
  int v11; // ecx
  char v12; // al
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // edx
  std::string *p_ability_group_name; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  GadgetExcelConfigMgr *p_gadget_config_mgr; // rcx
  GadgetExcelConfigMgr *v27; // rcx
  char v28; // al
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  GatherExcelConfigMgr *p_gather_config_mgr; // rcx
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int32_t result; // eax
  bool has_trigger_ability; // [rsp+2Fh] [rbp-311h]
  data::UInt32Array *__for_range; // [rsp+30h] [rbp-310h]
  const data::ConfigAbilityGroup *ability_group_config_ptr; // [rsp+38h] [rbp-308h]
  const std::vector<data::ConfigEntityAbilityEntry> *__for_range_0; // [rsp+40h] [rbp-300h]
  const data::ConfigEntityAbilityEntry *entry; // [rsp+48h] [rbp-2F8h]
  char v45[752]; // [rsp+50h] [rbp-2F0h] BYREF

  v3 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "13 48 4 16 cd_group_id:4735 64 8 16 __for_begin:4735 96 8 14 __for_end:4735 128 8 16 __for_begin"
                        ":4751 160 8 14 __for_end:4751 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 "
                        "<unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkLightStoneWidget;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -202116109;
  v6 = std::vector<unsigned int>::size(&config->level_energy_limit_array);
  if ( v6 == std::vector<unsigned int>::size(&config->level_cd_group_id_array) )
  {
    __for_range = &config->level_cd_group_id_array;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 64, config);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 64) = std::vector<unsigned int>::begin(__for_range);
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, config);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 96) = std::vector<unsigned int>::end(__for_range);
    while ( 1 )
    {
      v8 = (char *)(v3 + 96);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 64),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 96)) )
      {
        v15 = 1;
        goto LABEL_24;
      }
      v9 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 64));
      v10 = (int *)v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      v11 = *v10;
      v12 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( v12 != 0 && v12 <= 3 )
      {
        LOBYTE(v8) = v12 != 0;
        __asan_report_store4(v3 + 48, v8);
      }
      *(_DWORD *)(v3 + 48) = v11;
      if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,data::ConfigWidgetCdGroup>,unsigned int>(
              &this->widget_json_new_config_.config_main_widget_toy.cd_group_config_map,
              (const unsigned int *)(v3 + 48)) )
        break;
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 64));
    }
    if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 64 + 95) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkLightStoneWidget",
      4739);
    v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 256),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v14 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            v13,
            (const char (*)[40])"cd_group config not found! cd_group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
    *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v15 = 0;
LABEL_24:
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v15 == 1 )
    {
      p_ability_group_name = &config->ability_group_name;
      ability_group_config_ptr = JsonConfigMgr::findAbilityGroupConfig(this, &config->ability_group_name);
      if ( ability_group_config_ptr )
      {
        has_trigger_ability = 0;
        __for_range_0 = &ability_group_config_ptr->target_abilities;
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 128, p_ability_group_name);
        *(std::vector<data::ConfigEntityAbilityEntry>::const_iterator *)(v3 + 128) = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_0);
        *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 160, p_ability_group_name);
        *(std::vector<data::ConfigEntityAbilityEntry>::const_iterator *)(v3 + 160) = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_0);
        while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry const*,std::vector<data::ConfigEntityAbilityEntry>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v3 + 128),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)(v3 + 160)) )
        {
          entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry const*,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v3 + 128));
          if ( std::operator==<char>(&entry->ability_name, &config->trigger_ability_name) )
          {
            has_trigger_ability = 1;
            break;
          }
          __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry const*,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)(v3 + 128));
        }
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
        if ( !has_trigger_ability )
        {
          *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 384, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 384),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkLightStoneWidget",
            4761);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 384),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
                  v19,
                  (const char (*)[66])"trigger_ability_name not found in ability_group! trigger_ability:");
          v21 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, &config->trigger_ability_name);
          v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v21,
                  (const char (*)[16])" ability_group:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, &config->ability_group_name);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
          v2 = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&config->grid_search_range >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config - 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->grid_search_range >> 3)
                                                                  + 0x7FFF8000) )
          {
            __asan_report_load4(&config->grid_search_range);
          }
          if ( config->grid_search_range && config->grid_search_range <= 5 )
          {
            p_gadget_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
            if ( *(_BYTE *)(((unsigned __int64)&config->success_gadget_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config->success_gadget_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&config->success_gadget_id);
            }
            if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(p_gadget_config_mgr, config->success_gadget_id) )
              goto LABEL_55;
            v27 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
            if ( *(_BYTE *)(((unsigned __int64)&config->failed_gadget_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->failed_gadget_id >> 3)
                                                                    + 0x7FFF8000) )
            {
              __asan_report_load4(&config->failed_gadget_id);
            }
            if ( data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(v27, config->failed_gadget_id) )
              v28 = 0;
            else
LABEL_55:
              v28 = 1;
            if ( v28 )
            {
              *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 64 + 95) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 512, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 512),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "checkLightStoneWidget",
                4774);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 512),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      v29,
                      (const char (*)[47])"findGadgetExcelConfig fail, success_gadget_id:");
              v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v30,
                      &config->success_gadget_id);
              v32 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      v31,
                      (const char (*)[19])" failed_gadget_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &config->failed_gadget_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
              v2 = -1;
            }
            else
            {
              p_gather_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gather_config_mgr;
              if ( *(_BYTE *)(((unsigned __int64)&config->gather_point_type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&config->gather_point_type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&config->gather_point_type);
              }
              if ( data::GatherExcelConfigMgrBase::findGatherExcelConfig(p_gather_config_mgr, config->gather_point_type) )
              {
                *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 640, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 640),
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/json_config_mgr.cpp",
                  "checkLightStoneWidget",
                  4782);
                v36 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                        (common::milog::MiLogStream *const)(v3 + 640),
                        (const char (*)[42])"check ConfigWidgetLightStone material_id:");
                v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &config->material_id);
                common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v37, (const char (*)[4])off_1A528A00);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
                v2 = 0;
              }
              else
              {
                *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 576, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 576),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkLightStoneWidget",
                  4779);
                v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 576),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v35 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                        v34,
                        (const char (*)[47])"findGatherExcelConfig fail, gather_point_type:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, &config->gather_point_type);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
                v2 = -1;
              }
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 448, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 448),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkLightStoneWidget",
              4768);
            v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 448),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v24 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    v23,
                    (const char (*)[19])"grid_search_range:");
            v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v24,
                    &config->grid_search_range);
            common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v25, (const char (*)[12])" is invalid");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
            v2 = -1;
          }
        }
      }
      else
      {
        *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkLightStoneWidget",
          4747);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 320),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                v17,
                (const char (*)[49])"findAbilityGroupConfig fail, ability_group_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, &config->ability_group_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
        v2 = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkLightStoneWidget",
      4732);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 192),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
      v7,
      (const char (*)[61])"levelEnergyLimitArray and levelCdGroupIdArray size not match");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
    v2 = -1;
  }
  result = v2;
  if ( v45 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF803C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF804C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4787: range 000000000F29B5C8-000000000F29BACA
int32_t __cdecl JsonConfigMgr::checkWidgetToyCrystal(
        JsonConfigMgr *const this,
        const data::ConfigWidgetToyCrystal *config)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  char v15[256]; // [rsp+10h] [rbp-100h] BYREF

  v2 = (common::milog::MiLogStream *)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"3 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)JsonConfigMgr::checkWidgetToyCrystal;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -202116109;
  if ( JsonConfigMgr::checkUseAttachAbilityTriggerWidget(
         this,
         (const data::ConfigWidgetUseAttachAbilityTrigger *)config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWidgetToyCrystal",
      4791);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           v5,
           (const char (*)[57])"checkUseAttachAbilityTriggerWidget failed, material_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config->material_id);
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&config->energy_cost >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->energy_cost >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&config->energy_cost);
    }
    if ( config->energy_cost > 0.0 )
    {
      if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[5], 32LL);
      }
      common::milog::MiLogStream::create(
        v2 + 5,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "checkWidgetToyCrystal",
        4801);
      v13 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              v2 + 5,
              (const char (*)[42])"check ConfigWidgetToyCrystal material_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &config->material_id);
      common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v14, (const char (*)[4])off_1A528A00);
      common::milog::MiLogStream::~MiLogStream(v2 + 5);
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[3], 32LL);
      }
      common::milog::MiLogStream::create(
        v2 + 3,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetToyCrystal",
        4797);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             v2 + 3,
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
             v8,
             (const char (*)[54])"energy cost of toy crystal widget can not less than 0");
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])"energy_cost: ");
      v11 = common::milog::MiLogStream::operator<<<float,(float *)0>(v10, &config->energy_cost);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v11, (const char (*)[16])", material_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &config->material_id);
      common::milog::MiLogStream::~MiLogStream(v2 + 3);
      result = -1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4807: range 000000000F29BACC-000000000F29DD90
int32_t __cdecl JsonConfigMgr::genAbilityDataHashCode(
        JsonConfigMgr *const this,
        const HK4EDesignConfig *prev_design_config_ptr)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  HK4EDesignConfig *Config; // rax
  google::protobuf::uint32 v7; // edx
  char v8; // al
  google::protobuf::uint32 v9; // edx
  char v10; // al
  std::unordered_map<int,ConfigAbilityHashMap>::iterator v11; // rax
  JsonConfigMgr::genAbilityDataHashCode::<lambda(uint32_t, const auto:23&)> v12; // cl
  data::ConfigAbility *v13; // rsi
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  uint32_t StringHash; // edi
  uint64_t CombinedHash; // rax
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rdx
  uint64_t v22; // rsi
  int v23; // edx
  char v24; // al
  const JsonConfigMgr *p_json_config_mgr; // rdx
  int v26; // ecx
  int v27; // eax
  char v28; // dl
  int v29; // ecx
  char v30; // al
  int v31; // ecx
  char v32; // al
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rdx
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  unsigned __int64 *v44; // rcx
  std::pair<int,int> *v45; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<long unsigned int const,std::pair<int,int> >,false,false>,bool> v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rdx
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rdx
  int *v51; // r8
  char *v52; // rsi
  int32_t v53; // edx
  int *v54; // r8
  int *v55; // rcx
  char v56; // al
  int32_t ability_hash_code; // ecx
  int v58; // edx
  int v59; // edx
  const std::string *v60; // rdx
  common::milog::MiLogStream *v61; // r15
  std::set<std::string>::size_type v62; // rax
  char *v63; // rsi
  HK4EDesignConfig *v64; // rax
  const std::string *v65; // rdx
  common::milog::MiLogStream *v66; // r15
  std::set<std::string>::size_type v67; // rax
  std::string *p_charge_bar_mixin_global_value_key; // rsi
  __int64 v69; // rsi
  std::pair<int,int> *M_current; // r15
  std::vector<std::pair<int,int>>::iterator v71; // rax
  common::milog::MiLogStream *v72; // r15
  std::unordered_map<int,ConfigAbilityHashMap>::size_type v73; // rax
  common::milog::MiLogStream *v74; // rax
  std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false>::__node_type *__lasta; // [rsp+8h] [rbp-688h]
  int __last; // [rsp+8h] [rbp-688h]
  const HK4EDesignConfig *prev_design_config_ptra; // [rsp+10h] [rbp-680h]
  int i; // [rsp+28h] [rbp-668h]
  uint32_t total_ability_count; // [rsp+2Ch] [rbp-664h]
  std::unordered_map<int,ConfigAbilityHashMap> *__for_range; // [rsp+30h] [rbp-660h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::reference __in; // [rsp+38h] [rbp-658h]
  std::tuple_element<0,std::pair<int const,ConfigAbilityHashMap> >::type *ability_name_hash; // [rsp+40h] [rbp-650h]
  std::tuple_element<1,std::pair<int const,ConfigAbilityHashMap> >::type *ability_name; // [rsp+50h] [rbp-640h]
  std::unordered_map<int,ConfigAbilityOverride> *__for_range_0; // [rsp+58h] [rbp-638h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::reference v87; // [rsp+60h] [rbp-630h]
  std::tuple_element<1,std::pair<int const,ConfigAbilityOverride> >::type *override_name; // [rsp+78h] [rbp-618h]
  const std::set<std::string> *__for_range_1; // [rsp+80h] [rbp-610h]
  const std::set<std::string> *logic_state_sgv_name_set; // [rsp+88h] [rbp-608h]
  const data::ConfigGlobalCombat *config_global_combat; // [rsp+98h] [rbp-5F8h]
  const std::vector<data::GlobalValueRegister> *__for_range_3; // [rsp+A0h] [rbp-5F0h]
  const data::GlobalValueRegister *global_value_register; // [rsp+A8h] [rbp-5E8h]
  char v94[1488]; // [rsp+C0h] [rbp-5D0h] BYREF

  prev_design_config_ptra = prev_design_config_ptr;
  v3 = (unsigned __int64)v94;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1440LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "34 48 4 17 curr_version:4808 64 4 17 prev_version:4809 80 4 30 ability_config_hash_value:4834 96"
                        " 4 20 prev_hash_value:4835 112 4 9 <unknown> 128 8 16 __for_begin:4820 160 8 14 __for_end:4820 1"
                        "92 8 16 __for_begin:4823 224 8 14 __for_end:4823 256 8 26 ability_combined_hash:4833 288 8 9 <un"
                        "known> 320 8 16 __for_begin:4873 352 8 14 __for_end:4873 384 8 9 <unknown> 416 8 16 __for_begin:"
                        "4881 448 8 14 __for_end:4881 480 8 9 <unknown> 512 8 16 __for_begin:4893 544 8 14 __for_end:4893"
                        " 576 8 9 <unknown> 608 8 27 prev_ability_hash_pair:4838 640 16 23 config_ability_ptr:4826 672 32"
                        " 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 "
                        "9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312"
                        " 32 9 <unknown> 1376 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::genAbilityDataHashCode;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -218959360;
  v5[536862732] = -218959360;
  v5[536862733] = -218959360;
  v5[536862734] = -218959360;
  v5[536862735] = -218959360;
  v5[536862736] = -218959360;
  v5[536862737] = -218959360;
  v5[536862738] = -218959360;
  v5[536862739] = -218959360;
  v5[536862740] = -219021312;
  v5[536862742] = -218959118;
  v5[536862744] = -218959118;
  v5[536862746] = -218959118;
  v5[536862748] = -218959118;
  v5[536862750] = -218959118;
  v5[536862752] = -218959118;
  v5[536862754] = -218959118;
  v5[536862756] = -218959118;
  v5[536862758] = -218959118;
  v5[536862760] = -218959118;
  v5[536862762] = -218959118;
  v5[536862764] = -202116109;
  Config = JsonConfigMgr::getConfig(this);
  v7 = proto::DataVersionConfig::server(&Config->version_config.data_version_config);
  v8 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
  LOBYTE(prev_design_config_ptr) = v8 != 0;
  if ( v8 != 0 && v8 <= 3 )
    __asan_report_store4(v3 + 48, prev_design_config_ptr);
  *(_DWORD *)(v3 + 48) = v7;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 64, prev_design_config_ptr);
  *(_DWORD *)(v3 + 64) = 0;
  if ( prev_design_config_ptra )
  {
    v9 = proto::DataVersionConfig::server(&prev_design_config_ptra->version_config.data_version_config);
    v10 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
    LOBYTE(prev_design_config_ptr) = v10 != 0;
    if ( v10 != 0 && v10 <= 3 )
      __asan_report_store4(v3 + 64, prev_design_config_ptr);
    *(_DWORD *)(v3 + 64) = v9;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->ability_hash_code_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->ability_hash_code_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->ability_hash_code_, prev_design_config_ptr);
  }
  this->ability_hash_code_ = 0;
  __lasta = std::unordered_map<int,ConfigAbilityHashMap>::end(&this->ability_config_group_map_)._M_cur;
  v11._M_cur = std::unordered_map<int,ConfigAbilityHashMap>::begin(&this->ability_config_group_map_)._M_cur;
  total_ability_count = std::accumulate<std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>,unsigned int,JsonConfigMgr::genAbilityDataHashCode(HK4EDesignConfig const*)::{lambda(unsigned int,std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> const&)#1}>(
                          v11,
                          (std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>)__lasta,
                          0,
                          v12);
  std::vector<std::pair<int,int>>::clear(&this->ability_hash_vec_);
  std::vector<std::pair<int,int>>::reserve(&this->ability_hash_vec_, total_ability_count);
  std::unordered_map<unsigned long,std::pair<int,int>>::clear(&this->ability_config_hash_value_map_);
  __for_range = &this->ability_config_group_map_;
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, total_ability_count);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v3 + 128) = std::unordered_map<int,ConfigAbilityHashMap>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 160, total_ability_count);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v3 + 160) = std::unordered_map<int,ConfigAbilityHashMap>::end(__for_range);
  while ( 1 )
  {
    v13 = (data::ConfigAbility *)(v3 + 160);
    if ( !std::__detail::operator!=<std::pair<int const,ConfigAbilityHashMap>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v3 + 128),
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v3 + 160)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v3 + 128));
    ability_name_hash = std::get<0ul,int const,ConfigAbilityHashMap>(__in);
    ability_name = std::get<1ul,int const,ConfigAbilityHashMap>(__in);
    __for_range_0 = &ability_name->config_ability_override_map;
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 192, v13);
    *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v3 + 192) = std::unordered_map<int,ConfigAbilityOverride>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 224, v13);
    *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v3 + 224) = std::unordered_map<int,ConfigAbilityOverride>::end(__for_range_0);
    while ( 1 )
    {
      v13 = (data::ConfigAbility *)(v3 + 224);
      if ( !std::__detail::operator!=<std::pair<int const,ConfigAbilityOverride>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v3 + 192),
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v3 + 224)) )
        break;
      v87 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v3 + 192));
      std::get<0ul,int const,ConfigAbilityOverride>(v87);
      override_name = std::get<1ul,int const,ConfigAbilityOverride>(v87);
      *(_WORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
      std::shared_ptr<data::ConfigAbility>::shared_ptr(
        (std::shared_ptr<data::ConfigAbility> *const)(v3 + 640),
        &override_name->config_ability_ptr);
      if ( std::operator==<data::ConfigAbility>(0LL, (const std::shared_ptr<data::ConfigAbility> *)(v3 + 640)) )
      {
        *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 672) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 672, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 672),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "genAbilityDataHashCode",
          4829);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 672),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v14,
                (const char (*)[42])"config_ability_ptr is null, ability_name:");
        v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, &ability_name->ability_name);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v16,
                (const char (*)[16])" override_name:");
        v13 = (data::ConfigAbility *)override_name;
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, &override_name->override_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 672));
        *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        __last = 0;
      }
      else
      {
        *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
        StringHash = getStringHash(&override_name->override_name);
        if ( *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)ability_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3)
                                                                              + 0x7FFF8000) )
        {
          StringHash = (unsigned int)ability_name_hash;
          __asan_report_load4(ability_name_hash);
        }
        CombinedHash = getCombinedHash(*ability_name_hash, StringHash);
        if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
          CombinedHash = __asan_report_store8(v3 + 256, StringHash);
        *(_QWORD *)(v3 + 256) = CombinedHash;
        *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
        v20 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 640));
        if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
          v20 = __asan_report_load8(v20);
        v21 = *(_QWORD *)v20 + 80LL;
        v22 = *(unsigned __int8 *)((v21 >> 3) + 0x7FFF8000);
        if ( (_BYTE)v22 )
          v20 = __asan_report_load8(*(_QWORD *)v20 + 80LL);
        v23 = (*(__int64 (__fastcall **)(unsigned __int64))v21)(v20);
        v24 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
        LOBYTE(v22) = v24 != 0;
        if ( v24 != 0 && v24 <= 3 )
          __asan_report_store4(v3 + 80, v22);
        *(_DWORD *)(v3 + 80) = v23;
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 96, v22);
        *(_DWORD *)(v3 + 96) = 0;
        if ( prev_design_config_ptra )
        {
          p_json_config_mgr = &prev_design_config_ptra->json_config_mgr;
          if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
            __asan_report_load8(v3 + 256);
          v22 = *(_QWORD *)(v3 + 256);
          *(std::pair<int,int> *)(v3 + 608) = JsonConfigMgr::findAbilityConfigHash(p_json_config_mgr, v22);
          if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v3 + 64);
          v26 = *(_DWORD *)(v3 + 64);
          if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v3 + 48);
          if ( v26 == *(_DWORD *)(v3 + 48) )
            v27 = *(_DWORD *)(v3 + 608);
          else
            v27 = *(_DWORD *)(v3 + 612);
          v28 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
          LOBYTE(v22) = v28 != 0;
          if ( v28 != 0 && v28 <= 3 )
            v27 = __asan_report_store4(v3 + 96, v22);
          *(_DWORD *)(v3 + 96) = v27;
        }
        if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 64);
        if ( *(_DWORD *)(v3 + 64) )
        {
          v29 = *(_DWORD *)(v3 + 64);
          v30 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
          LOBYTE(v22) = v30 != 0;
          if ( v30 != 0 && v30 <= 3 )
            __asan_report_load4(v3 + 48);
          if ( v29 != *(_DWORD *)(v3 + 48) )
          {
            if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v3 + 96);
            v31 = *(_DWORD *)(v3 + 96);
            v32 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
            LOBYTE(v22) = v32 != 0;
            if ( v32 != 0 && v32 <= 3 )
              __asan_report_load4(v3 + 80);
            if ( v31 != *(_DWORD *)(v3 + 80) )
            {
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 96 + 95) & 7) >= *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 736, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 736),
                &common::milog::MiLogDefault::default_log_obj_,
                2u,
                "./src/json_config_mgr.cpp",
                "genAbilityDataHashCode",
                4843);
              v33 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                      (common::milog::MiLogStream *const)(v3 + 736),
                      (const char (*)[18])"previous version:");
              v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v33,
                      (const unsigned int *)(v3 + 64));
              v35 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                      v34,
                      (const char (*)[18])" current version:");
              v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v35,
                      (const unsigned int *)(v3 + 48));
              v37 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v36,
                      (const char (*)[15])" ability_name:");
              v38 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v37,
                      &ability_name->ability_name);
              v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v38,
                      (const char (*)[16])" override_name:");
              v40 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v39,
                      &override_name->override_name);
              v41 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v40,
                      (const char (*)[12])" prev_hash:");
              v42 = common::milog::MiLogStream::operator<<<int,(int *)0>(v41, (const int *)(v3 + 96));
              v43 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v42,
                      (const char (*)[11])" cur_hash:");
              v22 = v3 + 80;
              common::milog::MiLogStream::operator<<<int,(int *)0>(v43, (const int *)(v3 + 80));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 736));
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
        }
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 288, v22);
        *(std::pair<int,int> *)(v3 + 288) = std::make_pair<int &,int &>((int *)(v3 + 96), (int *)(v3 + 80));
        v46 = std::unordered_map<unsigned long,std::pair<int,int>>::emplace<unsigned long &,std::pair<int,int>>(
                &this->ability_config_hash_value_map_,
                (unsigned __int64 *)(v3 + 256),
                (std::pair<int,int> *)(v3 + 288),
                v44,
                v45);
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
        if ( !v46.second )
        {
          *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 800) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 800, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 800),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "genAbilityDataHashCode",
            4849);
          v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 800),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v48 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v47, (const char (*)[38])byte_1A529520);
          v49 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v48, &ability_name->ability_name);
          v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v49,
                  (const char (*)[16])" override_name:");
          v13 = (data::ConfigAbility *)override_name;
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v50, &override_name->override_name);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 800));
          *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          __last = 0;
        }
        else
        {
          if ( std::operator==<char>(&override_name->override_name, "Default") )
          {
            std::vector<std::pair<int,int>>::emplace_back<int const&,int &>(
              &this->ability_hash_vec_,
              ability_name_hash,
              (int *)(v3 + 80),
              (const int *)&this->ability_hash_vec_,
              v51);
          }
          else
          {
            *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
            *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
            *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 864) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 864, 32LL);
            }
            std::operator+<char>((std::string *)(v3 + 864), &ability_name->ability_name, "_");
            if ( *(char *)(((v3 + 928) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 928, 32LL);
            }
            v52 = (char *)(v3 + 864);
            std::operator+<char>((std::string *)(v3 + 928), (std::string *)(v3 + 864), &override_name->override_name);
            v53 = getStringHash((const std::string *)(v3 + 928));
            v55 = (int *)(v3 + 112);
            v56 = *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000);
            if ( v56 != 0 && v56 <= 3 )
            {
              LOBYTE(v52) = v56 != 0;
              __asan_report_store4(v3 + 112, v52);
            }
            *(_DWORD *)(v3 + 112) = v53;
            std::vector<std::pair<int,int>>::emplace_back<int,int &>(
              &this->ability_hash_vec_,
              (int *)(v3 + 112),
              (int *)(v3 + 80),
              v55,
              v54);
            *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
            std::string::~string((void *)(v3 + 928));
            *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -117901064;
            std::string::~string((void *)(v3 + 864));
            *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -117901064;
          }
          if ( *(_BYTE *)(((unsigned __int64)&this->ability_hash_code_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->ability_hash_code_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->ability_hash_code_);
          }
          ability_hash_code = this->ability_hash_code_;
          if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v3 + 80);
          this->ability_hash_code_ = *(_DWORD *)(v3 + 80) ^ ability_hash_code;
          JsonConfigMgr::addAbilityString(this, &override_name->override_name);
          v13 = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 640));
          JsonConfigMgr::parseAbilityStringToHash(this, v13);
          __last = 1;
        }
      }
      std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v3 + 640));
      *(_WORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -1800;
      *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
      if ( __last != 1 )
      {
        v58 = 0;
        goto LABEL_93;
      }
      std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v3 + 192));
    }
    v58 = 1;
LABEL_93:
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
    if ( v58 != 1 )
    {
      v59 = 0;
      goto LABEL_97;
    }
    std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v3 + 128));
  }
  v59 = 1;
LABEL_97:
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  if ( v59 == 1 )
  {
    __for_range_1 = &this->config_sgv_register_set_;
    *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 320, v13);
    *(std::set<std::string>::iterator *)(v3 + 320) = std::set<std::string>::begin(__for_range_1);
    *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 352, v13);
    *(std::set<std::string>::iterator *)(v3 + 352) = std::set<std::string>::end(__for_range_1);
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<std::string >::_Self *)(v3 + 320),
              (const std::_Rb_tree_const_iterator<std::string >::_Self *)(v3 + 352)) )
    {
      v60 = std::_Rb_tree_const_iterator<std::string>::operator*((const std::_Rb_tree_const_iterator<std::string > *const)(v3 + 320));
      JsonConfigMgr::addAbilityString(this, v60);
      std::_Rb_tree_const_iterator<std::string>::operator++((std::_Rb_tree_const_iterator<std::string > *const)(v3 + 320));
    }
    *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 992) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 96 + 95) & 7) >= *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 992, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 992),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "genAbilityDataHashCode",
      4877);
    v61 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            (common::milog::MiLogStream *const)(v3 + 992),
            (const char (*)[38])"sgv register addAbilityString, size: ");
    *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
    v62 = std::set<std::string>::size(&this->config_sgv_register_set_);
    if ( *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) )
      v62 = __asan_report_store8(v3 + 384, "sgv register addAbilityString, size: ");
    *(_QWORD *)(v3 + 384) = v62;
    v63 = (char *)(v3 + 384);
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v61, (const unsigned __int64 *)(v3 + 384));
    *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 992));
    *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -117901064;
    v64 = JsonConfigMgr::getConfig(this);
    logic_state_sgv_name_set = LuaConfigMgr::getLogicStateSGVNameSet[abi:cxx11](&v64->lua_config_mgr);
    *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 416, v63);
    *(std::set<std::string>::iterator *)(v3 + 416) = std::set<std::string>::begin(logic_state_sgv_name_set);
    *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 448, v63);
    *(std::set<std::string>::iterator *)(v3 + 448) = std::set<std::string>::end(logic_state_sgv_name_set);
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<std::string >::_Self *)(v3 + 416),
              (const std::_Rb_tree_const_iterator<std::string >::_Self *)(v3 + 448)) )
    {
      v65 = std::_Rb_tree_const_iterator<std::string>::operator*((const std::_Rb_tree_const_iterator<std::string > *const)(v3 + 416));
      JsonConfigMgr::addAbilityString(this, v65);
      std::_Rb_tree_const_iterator<std::string>::operator++((std::_Rb_tree_const_iterator<std::string > *const)(v3 + 416));
    }
    *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1056) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1056, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 1056),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "genAbilityDataHashCode",
      4885);
    v66 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v3 + 1056),
            (const char (*)[36])"LogicState addAbilityString, size: ");
    *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
    v67 = std::set<std::string>::size(logic_state_sgv_name_set);
    if ( *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) )
      v67 = __asan_report_store8(v3 + 480, "LogicState addAbilityString, size: ");
    *(_QWORD *)(v3 + 480) = v67;
    p_charge_bar_mixin_global_value_key = (std::string *)(v3 + 480);
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v66, (const unsigned __int64 *)(v3 + 480));
    *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1056));
    *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -117901064;
    config_global_combat = JsonConfigMgr::getGlobalCombatConfig(this);
    if ( (unsigned __int8)std::string::empty(&config_global_combat->charge_bar_mixin_global_value_key) != 1 )
    {
      p_charge_bar_mixin_global_value_key = &config_global_combat->charge_bar_mixin_global_value_key;
      JsonConfigMgr::addAbilityString(this, &config_global_combat->charge_bar_mixin_global_value_key);
    }
    __for_range_3 = &config_global_combat->global_value_list;
    *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 512, p_charge_bar_mixin_global_value_key);
    *(std::vector<data::GlobalValueRegister>::const_iterator *)(v3 + 512) = std::vector<data::GlobalValueRegister>::begin(__for_range_3);
    *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 544, p_charge_bar_mixin_global_value_key);
    *(std::vector<data::GlobalValueRegister>::const_iterator *)(v3 + 544) = std::vector<data::GlobalValueRegister>::end(__for_range_3);
    while ( __gnu_cxx::operator!=<data::GlobalValueRegister const*,std::vector<data::GlobalValueRegister>>(
              (const __gnu_cxx::__normal_iterator<const data::GlobalValueRegister*,std::vector<data::GlobalValueRegister> > *)(v3 + 512),
              (const __gnu_cxx::__normal_iterator<const data::GlobalValueRegister*,std::vector<data::GlobalValueRegister> > *)(v3 + 544)) )
    {
      global_value_register = __gnu_cxx::__normal_iterator<data::GlobalValueRegister const*,std::vector<data::GlobalValueRegister>>::operator*((const __gnu_cxx::__normal_iterator<const data::GlobalValueRegister*,std::vector<data::GlobalValueRegister> > *const)(v3 + 512));
      if ( *(char *)(((unsigned __int64)&global_value_register->is_vector >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&global_value_register->is_vector, v3 + 544, &global_value_register->is_vector);
      if ( global_value_register->is_vector )
      {
        for ( i = 0; ; ++i )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->ability_define_);
          }
          if ( i >= this->ability_define_.ABILITY_SET_GLOBAL_POS_NUM )
            break;
          *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = 0;
          *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1184) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1184, 32LL);
          }
          std::to_string((std::string *)(v3 + 1184), i);
          *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
          v69 = (__int64)global_value_register;
          if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
          {
            v69 = 32LL;
            __asan_report_store_n(v3 + 1120, 32LL);
          }
          std::operator+<char>((std::string *)(v3 + 1120), (const std::string *)v69, "_");
          if ( *(char *)(((v3 + 1248) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 96 + 95) & 7) >= *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1248, 32LL);
          }
          std::operator+<char>((std::string *)(v3 + 1248), (std::string *)(v3 + 1120), (std::string *)(v3 + 1184));
          JsonConfigMgr::addAbilityString(this, (const std::string *)(v3 + 1248));
          std::string::~string((void *)(v3 + 1248));
          *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = -117901064;
          std::string::~string((void *)(v3 + 1120));
          *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
          std::string::~string((void *)(v3 + 1184));
          *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = -117901064;
        }
      }
      else
      {
        JsonConfigMgr::addAbilityString(this, &global_value_register->key);
      }
      __gnu_cxx::__normal_iterator<data::GlobalValueRegister const*,std::vector<data::GlobalValueRegister>>::operator++((__gnu_cxx::__normal_iterator<const data::GlobalValueRegister*,std::vector<data::GlobalValueRegister> > *const)(v3 + 512));
    }
    *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) = -8;
    M_current = std::vector<std::pair<int,int>>::end(&this->ability_hash_vec_)._M_current;
    v71._M_current = std::vector<std::pair<int,int>>::begin(&this->ability_hash_vec_)._M_current;
    std::sort<__gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>>>>(
      v71,
      (__gnu_cxx::__normal_iterator<std::pair<int,int>*,std::vector<std::pair<int,int>> >)M_current);
    *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1312) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1312, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 1312),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "genAbilityDataHashCode",
      4909);
    v72 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            (common::milog::MiLogStream *const)(v3 + 1312),
            (const char (*)[21])"total ability count:");
    *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
    v73 = std::unordered_map<int,ConfigAbilityHashMap>::size(&this->ability_config_group_map_);
    if ( *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) )
      v73 = __asan_report_store8(v3 + 576, "total ability count:");
    *(_QWORD *)(v3 + 576) = v73;
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v72, (const unsigned __int64 *)(v3 + 576));
    *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1312));
    *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = -117901064;
    JsonConfigMgr::parseMiscAbilityStringToHash(this);
    *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1376) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1376, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 1376),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "genAbilityDataHashCode",
      4911);
    v74 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            (common::milog::MiLogStream *const)(v3 + 1376),
            (const char (*)[19])"ability hash code:");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v74, &this->ability_hash_code_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1376));
    v2 = 0;
  }
  if ( v94 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 172) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v3 >> 3) + 0x7FFF80B0) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1440LL, v94);
  }
  return v2;
};

// Line 4816: range 000000000F76E4A8-000000000F76E4D3
uint32_t __cdecl JsonConfigMgr::genAbilityDataHashCode::_lambda_uint32_t__const_auto_23___::operator()_std::pair_int_const_ConfigAbilityHashMap___(
        const JsonConfigMgr::genAbilityDataHashCode::<lambda(uint32_t, const auto:23&)> *const __closure,
        uint32_t acc,
        const std::pair<int const,ConfigAbilityHashMap> *pr)
{
  return std::unordered_map<int,ConfigAbilityOverride>::size(&pr->second.config_ability_override_map) + acc;
};

// Line 4916: range 000000000F29DD92-000000000F29E75E
int32_t __cdecl JsonConfigMgr::genAnimEventHashCode(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  int32_t result; // eax
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>> *__for_range; // [rsp+10h] [rbp-280h]
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>> *__for_range_1; // [rsp+18h] [rbp-278h]
  data::ConfigGadgetMap *__for_range_3; // [rsp+20h] [rbp-270h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true>::reference v11; // [rsp+28h] [rbp-268h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *config_ptr_1; // [rsp+38h] [rbp-258h]
  data::ConfigAnimEventMap *__for_range_4; // [rsp+40h] [rbp-250h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true>::reference v14; // [rsp+48h] [rbp-248h]
  const std::string *key_1; // [rsp+50h] [rbp-240h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false>::reference v16; // [rsp+60h] [rbp-230h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> > >::type *config_ptr_0; // [rsp+70h] [rbp-220h]
  data::ConfigAnimEventMap *__for_range_2; // [rsp+78h] [rbp-218h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true>::reference v19; // [rsp+80h] [rbp-210h]
  const std::string *key_0; // [rsp+88h] [rbp-208h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false>::reference __in; // [rsp+98h] [rbp-1F8h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> > >::type *config_ptr; // [rsp+A8h] [rbp-1E8h]
  data::ConfigAnimEventMap *__for_range_0; // [rsp+B0h] [rbp-1E0h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true>::reference v24; // [rsp+B8h] [rbp-1D8h]
  const std::string *key; // [rsp+C0h] [rbp-1D0h]
  char v26[448]; // [rsp+D0h] [rbp-1C0h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(416LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 8 16 __for_begin:4917 64 8 14 __for_end:4917 96 8 16 __for_begin:4923 128 8 14 __for_end:4"
                        "923 160 8 16 __for_begin:4928 192 8 14 __for_end:4928 224 8 16 __for_begin:4934 256 8 14 __for_e"
                        "nd:4934 288 8 16 __for_begin:4940 320 8 14 __for_end:4940 352 8 16 __for_begin:4946 384 8 14 __for_end:4946";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::genAnimEventHashCode;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -202116352;
  __for_range = &this->config_avatar_map_;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigAvatar>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false> *)(v2 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false> *const)(v2 + 32));
    std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigAvatar>>(__in);
    config_ptr = std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigAvatar>>(__in);
    if ( !std::operator==<data::ConfigAvatar>(config_ptr, 0LL) )
    {
      __for_range_0 = &std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr)->combat.anim_events;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 96, 0LL);
      *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v2 + 96) = std::unordered_map<std::string,data::ConfigAttackEvent>::begin(__for_range_0);
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 128, 0LL);
      *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v2 + 128) = std::unordered_map<std::string,data::ConfigAttackEvent>::end(__for_range_0);
      while ( std::__detail::operator!=<std::pair<std::string const,data::ConfigAttackEvent>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v2 + 96),
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v2 + 128)) )
      {
        v24 = std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v2 + 96));
        key = std::get<0ul,std::string const,data::ConfigAttackEvent>(v24);
        std::get<1ul,std::string const,data::ConfigAttackEvent>(v24);
        JsonConfigMgr::addAbilityString(this, key);
        std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v2 + 96));
      }
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigAvatar> >,false,false> *const)(v2 + 32));
  }
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  __for_range_1 = &this->config_monster_map_;
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 160, v5);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::iterator *)(v2 + 160) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::begin(__for_range_1);
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 192, v5);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::iterator *)(v2 + 192) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigMonster>>::end(__for_range_1);
  while ( 1 )
  {
    v6 = (char *)(v2 + 192);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false> *)(v2 + 192)) )
      break;
    v16 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false> *const)(v2 + 160));
    std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigMonster>>(v16);
    config_ptr_0 = std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigMonster>>(v16);
    if ( !std::operator==<data::ConfigMonster>(config_ptr_0, 0LL) )
    {
      __for_range_2 = &std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr_0)->combat.anim_events;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 224, 0LL);
      *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v2 + 224) = std::unordered_map<std::string,data::ConfigAttackEvent>::begin(__for_range_2);
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 256, 0LL);
      *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v2 + 256) = std::unordered_map<std::string,data::ConfigAttackEvent>::end(__for_range_2);
      while ( std::__detail::operator!=<std::pair<std::string const,data::ConfigAttackEvent>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v2 + 224),
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v2 + 256)) )
      {
        v19 = std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v2 + 224));
        key_0 = std::get<0ul,std::string const,data::ConfigAttackEvent>(v19);
        std::get<1ul,std::string const,data::ConfigAttackEvent>(v19);
        JsonConfigMgr::addAbilityString(this, key_0);
        std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v2 + 224));
      }
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigMonster> >,false,false> *const)(v2 + 160));
  }
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
  __for_range_3 = &this->config_gadget_map_;
  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 288, v6);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 288) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::begin(__for_range_3);
  *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 320, v6);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 320) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::end(__for_range_3);
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v2 + 288),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v2 + 320)) )
  {
    v11 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v2 + 288));
    std::get<0ul,std::string const,std::shared_ptr<data::ConfigGadget>>(v11);
    config_ptr_1 = std::get<1ul,std::string const,std::shared_ptr<data::ConfigGadget>>(v11);
    if ( !std::operator==<data::ConfigGadget>(config_ptr_1, 0LL) )
    {
      __for_range_4 = &std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr_1)->combat.anim_events;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 352, 0LL);
      *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v2 + 352) = std::unordered_map<std::string,data::ConfigAttackEvent>::begin(__for_range_4);
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 384, 0LL);
      *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v2 + 384) = std::unordered_map<std::string,data::ConfigAttackEvent>::end(__for_range_4);
      while ( std::__detail::operator!=<std::pair<std::string const,data::ConfigAttackEvent>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v2 + 352),
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v2 + 384)) )
      {
        v14 = std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v2 + 352));
        key_1 = std::get<0ul,std::string const,data::ConfigAttackEvent>(v14);
        std::get<1ul,std::string const,data::ConfigAttackEvent>(v14);
        JsonConfigMgr::addAbilityString(this, key_1);
        std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v2 + 352));
      }
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
    }
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v2 + 288));
  }
  result = 0;
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 4956: range 000000000F29E75F-000000000F2A124A
int32_t __cdecl checkConfigSceneHomeInfo(HK4EDesignConfig *config, const data::ConfigSceneHomeInfo *home_config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> >::reference v7; // rax
  HomeWorldExcelConfigMgr *p_home_config_mgr; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  char *v15; // rsi
  __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> >::reference v16; // rax
  HomeWorldExcelConfigMgr *v17; // rcx
  char *v18; // rsi
  HomeWorldExcelConfigMgr *v19; // rdx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rdx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  __gnu_cxx::__normal_iterator<const data::ConfigHomeAnimal*,std::vector<data::ConfigHomeAnimal> >::reference v26; // rax
  HomeWorldExcelConfigMgr *v27; // rcx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rdx
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  HomeWorldExcelConfigMgr *v34; // rcx
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rdx
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rdx
  char *v41; // rsi
  __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> >::reference v42; // rax
  HomeWorldExcelConfigMgr *v43; // rcx
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rdx
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rdx
  common::milog::MiLogStream *v48; // rax
  __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> >::reference v49; // rax
  HomeWorldExcelConfigMgr *v50; // rcx
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rdx
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rdx
  common::milog::MiLogStream *v55; // rax
  unsigned __int64 v56; // rax
  unsigned __int64 v57; // rax
  __int64 v58; // rsi
  __int64 v59; // rsi
  __int64 v60; // rsi
  char *v61; // rsi
  char *v62; // rsi
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  uint32_t furniture_id; // ecx
  uint32_t guid; // ecx
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  char *v75; // rsi
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v76; // rax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  int32_t ret; // [rsp+24h] [rbp-81Ch]
  data::ConfigHomeBlockList *__for_range; // [rsp+30h] [rbp-810h]
  data::ConfigHomeFurnitureList *__for_range_4; // [rsp+38h] [rbp-808h]
  data::ConfigHomeFurnitureList *__for_range_5; // [rsp+40h] [rbp-800h]
  data::ConfigHomeBlockList *__for_range_6; // [rsp+48h] [rbp-7F8h]
  data::ConfigHomeFurnitureList *__for_range_9; // [rsp+50h] [rbp-7F0h]
  data::ConfigHomeFurnitureList *__for_range_10; // [rsp+58h] [rbp-7E8h]
  const data::ConfigHomeFurniture *furniture_6; // [rsp+60h] [rbp-7E0h]
  const data::ConfigHomeFurniture *furniture_5; // [rsp+68h] [rbp-7D8h]
  const data::ConfigHomeBlock *block_0; // [rsp+70h] [rbp-7D0h]
  const std::vector<data::ConfigHomeFurniture> *__for_range_7; // [rsp+78h] [rbp-7C8h]
  const std::vector<data::ConfigHomeFurniture> *__for_range_8; // [rsp+80h] [rbp-7C0h]
  __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> >::reference furniture_4; // [rsp+88h] [rbp-7B8h]
  const data::ConfigHomeFurniture *furniture_3; // [rsp+90h] [rbp-7B0h]
  const data::ConfigHomeFurniture *furniture_2; // [rsp+98h] [rbp-7A8h]
  const data::ConfigHomeFurniture *furniture_1; // [rsp+A0h] [rbp-7A0h]
  const data::ConfigHomeBlock *block; // [rsp+A8h] [rbp-798h]
  const std::vector<data::ConfigHomeFurniture> *__for_range_0; // [rsp+B0h] [rbp-790h]
  const std::vector<data::ConfigHomeFurniture> *__for_range_1; // [rsp+B8h] [rbp-788h]
  const std::vector<data::ConfigHomeFurnitureSuite> *__for_range_2; // [rsp+C0h] [rbp-780h]
  const std::vector<data::ConfigHomeAnimal> *__for_range_3; // [rsp+C8h] [rbp-778h]
  const data::ConfigHomeAnimal *animal; // [rsp+D0h] [rbp-770h]
  __gnu_cxx::__normal_iterator<const data::ConfigHomeFurnitureSuite*,std::vector<data::ConfigHomeFurnitureSuite> >::reference suite; // [rsp+D8h] [rbp-768h]
  const data::ConfigHomeFurniture *furniture_0; // [rsp+E0h] [rbp-760h]
  const data::ConfigHomeFurniture *furniture; // [rsp+E8h] [rbp-758h]
  char v112[1872]; // [rsp+F0h] [rbp-750h] BYREF

  v2 = (unsigned __int64)v112;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1824LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "41 32 1 9 <unknown> 48 1 9 <unknown> 64 8 16 __for_begin:4959 96 8 14 __for_end:4959 128 8 16 __"
                        "for_begin:4961 160 8 14 __for_end:4961 192 8 16 __for_begin:4970 224 8 14 __for_end:4970 256 8 1"
                        "6 __for_begin:4977 288 8 14 __for_end:4977 320 8 16 __for_begin:4986 352 8 14 __for_end:4986 384"
                        " 8 16 __for_begin:5004 416 8 14 __for_end:5004 448 8 16 __for_begin:5013 480 8 14 __for_end:5013"
                        " 512 8 16 __for_begin:5029 544 8 14 __for_end:5029 576 8 16 __for_begin:5031 608 8 14 __for_end:"
                        "5031 640 8 16 __for_begin:5039 672 8 14 __for_end:5039 704 8 16 __for_begin:5054 736 8 14 __for_"
                        "end:5054 768 8 16 __for_begin:5061 800 8 14 __for_end:5061 832 28 9 <unknown> 896 32 9 <unknown>"
                        " 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unkno"
                        "wn> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <u"
                        "nknown> 1600 32 9 <unknown> 1664 48 23 furniture_guid_set:5025 1744 48 23 old_home_scene_set:5026";
  *(_QWORD *)(v2 + 16) = checkConfigSceneHomeInfo;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862736] = -218959360;
  v4[536862737] = -218959360;
  v4[536862738] = -218959360;
  v4[536862739] = -218959360;
  v4[536862740] = -218959360;
  v4[536862741] = -218959360;
  v4[536862742] = -218959360;
  v4[536862743] = -218959360;
  v4[536862744] = -218959360;
  v4[536862745] = -218959360;
  v4[536862746] = 0x4000000;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -219021312;
  v4[536862774] = 62194;
  v4[536862776] = -202116109;
  ret = 0;
  __for_range = &home_config->block_arrangement_info_list;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, home_config);
  *(std::vector<data::ConfigHomeBlock>::const_iterator *)(v2 + 64) = std::vector<data::ConfigHomeBlock>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, home_config);
  *(std::vector<data::ConfigHomeBlock>::const_iterator *)(v2 + 96) = std::vector<data::ConfigHomeBlock>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !__gnu_cxx::operator!=<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *)(v2 + 96)) )
      break;
    block = __gnu_cxx::__normal_iterator<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *const)(v2 + 64));
    __for_range_0 = &block->persistent_furniture_list;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 128) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 160) = std::vector<data::ConfigHomeFurniture>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v2 + 160);
      if ( !__gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 160)) )
        break;
      v7 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 128));
      furniture = v7;
      p_home_config_mgr = &config->txt_config_mgr.home_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      if ( !data::HomeWorldExcelConfigMgrBase::findHomeWorldFurnitureExcelConfig(
              p_home_config_mgr,
              furniture->furniture_id) )
      {
        *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 896, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 896),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkConfigSceneHomeInfo",
          4965);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 896),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(v9, (const char (*)[39])byte_1A529C40);
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &furniture->furniture_id);
        v12 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v11, (const char (*)[11])" scene_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &home_config->scene_id);
        v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v13, (const char (*)[11])" block_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &block->block_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
        *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &block->deploy_furniure_list;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v6);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 192) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v6);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 224) = std::vector<data::ConfigHomeFurniture>::end(__for_range_1);
    while ( 1 )
    {
      v15 = (char *)(v2 + 224);
      if ( !__gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 192),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 224)) )
        break;
      v16 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 192));
      furniture_0 = v16;
      v17 = &config->txt_config_mgr.home_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v16);
      }
      if ( !data::HomeWorldExcelConfigMgrBase::findHomeWorldFurnitureExcelConfig(v17, furniture_0->furniture_id) )
        ret = -1;
      __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 192));
    }
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    __for_range_2 = &block->furniture_suite_list;
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 256, v15);
    *(std::vector<data::ConfigHomeFurnitureSuite>::const_iterator *)(v2 + 256) = std::vector<data::ConfigHomeFurnitureSuite>::begin(__for_range_2);
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 288, v15);
    *(std::vector<data::ConfigHomeFurnitureSuite>::const_iterator *)(v2 + 288) = std::vector<data::ConfigHomeFurnitureSuite>::end(__for_range_2);
    while ( 1 )
    {
      v18 = (char *)(v2 + 288);
      if ( !__gnu_cxx::operator!=<data::ConfigHomeFurnitureSuite const*,std::vector<data::ConfigHomeFurnitureSuite>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurnitureSuite*,std::vector<data::ConfigHomeFurnitureSuite> > *)(v2 + 256),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurnitureSuite*,std::vector<data::ConfigHomeFurnitureSuite> > *)(v2 + 288)) )
        break;
      suite = __gnu_cxx::__normal_iterator<data::ConfigHomeFurnitureSuite const*,std::vector<data::ConfigHomeFurnitureSuite>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurnitureSuite*,std::vector<data::ConfigHomeFurnitureSuite> > *const)(v2 + 256));
      v19 = &config->txt_config_mgr.home_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)suite >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)suite >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(suite);
      }
      if ( !data::HomeWorldExcelConfigMgrBase::findFurnitureSuiteExcelConfig(v19, suite->suite_id) )
      {
        *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 960, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 960),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkConfigSceneHomeInfo",
          4981);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 960),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v20, (const char (*)[45])byte_1A529CA0);
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &suite->suite_id);
        v23 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v22, (const char (*)[11])" scene_id:");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &home_config->scene_id);
        v25 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v24, (const char (*)[11])" block_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &block->block_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
        *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeFurnitureSuite const*,std::vector<data::ConfigHomeFurnitureSuite>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurnitureSuite*,std::vector<data::ConfigHomeFurnitureSuite> > *const)(v2 + 256));
    }
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
    __for_range_3 = &block->deploy_animal_list;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 320, v18);
    *(std::vector<data::ConfigHomeAnimal>::const_iterator *)(v2 + 320) = std::vector<data::ConfigHomeAnimal>::begin(__for_range_3);
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 352, v18);
    *(std::vector<data::ConfigHomeAnimal>::const_iterator *)(v2 + 352) = std::vector<data::ConfigHomeAnimal>::end(__for_range_3);
    while ( __gnu_cxx::operator!=<data::ConfigHomeAnimal const*,std::vector<data::ConfigHomeAnimal>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeAnimal*,std::vector<data::ConfigHomeAnimal> > *)(v2 + 320),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeAnimal*,std::vector<data::ConfigHomeAnimal> > *)(v2 + 352)) )
    {
      v26 = __gnu_cxx::__normal_iterator<data::ConfigHomeAnimal const*,std::vector<data::ConfigHomeAnimal>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeAnimal*,std::vector<data::ConfigHomeAnimal> > *const)(v2 + 320));
      animal = v26;
      v27 = &config->txt_config_mgr.home_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v26);
      }
      if ( !data::HomeWorldExcelConfigMgrBase::findHomeWorldFurnitureExcelConfig(v27, animal->furniture_id) )
      {
        *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1024, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1024),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkConfigSceneHomeInfo",
          4990);
        v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1024),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v29 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(v28, (const char (*)[54])byte_1A529D00);
        v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &animal->furniture_id);
        v31 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v30, (const char (*)[11])" scene_id:");
        v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &home_config->scene_id);
        v33 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v32, (const char (*)[11])" block_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, &block->block_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
        *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      v34 = &config->txt_config_mgr.home_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)animal >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)animal & 7) + 3) >= *(_BYTE *)(((unsigned __int64)animal >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(animal);
      }
      if ( !data::HomeWorldExcelConfigMgrBase::findHomeworldAnimalExcelConfig(v34, animal->furniture_id) )
      {
        *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1088, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1088),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkConfigSceneHomeInfo",
          4996);
        v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1088),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v36 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(v35, (const char (*)[57])byte_1A529D60);
        v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &animal->furniture_id);
        v38 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v37, (const char (*)[11])" scene_id:");
        v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, &home_config->scene_id);
        v40 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v39, (const char (*)[11])" block_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, &block->block_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
        *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeAnimal const*,std::vector<data::ConfigHomeAnimal>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeAnimal*,std::vector<data::ConfigHomeAnimal> > *const)(v2 + 320));
    }
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
    __gnu_cxx::__normal_iterator<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  __for_range_4 = &home_config->door_list;
  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 384, v5);
  *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 384) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_4);
  *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 416, v5);
  *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 416) = std::vector<data::ConfigHomeFurniture>::end(__for_range_4);
  while ( 1 )
  {
    v41 = (char *)(v2 + 416);
    if ( !__gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 384),
            (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 416)) )
      break;
    v42 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 384));
    furniture_1 = v42;
    v43 = &config->txt_config_mgr.home_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v42 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v42);
    }
    if ( !data::HomeWorldExcelConfigMgrBase::findHomeWorldFurnitureExcelConfig(v43, furniture_1->furniture_id) )
    {
      *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1152, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1152),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkConfigSceneHomeInfo",
        5008);
      v44 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1152),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v45 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(v44, (const char (*)[39])byte_1A529C40);
      v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, &furniture_1->furniture_id);
      v47 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v46, (const char (*)[11])" scene_id:");
      v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v47, &home_config->scene_id);
      common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v48, (const char (*)[14])" in door_list");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
      *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 384));
  }
  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
  __for_range_5 = &home_config->stair_list;
  *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 448, v41);
  *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 448) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_5);
  *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 480, v41);
  *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 480) = std::vector<data::ConfigHomeFurniture>::end(__for_range_5);
  while ( __gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 448),
            (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 480)) )
  {
    v49 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 448));
    furniture_2 = v49;
    v50 = &config->txt_config_mgr.home_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v49 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v49);
    }
    if ( !data::HomeWorldExcelConfigMgrBase::findHomeWorldFurnitureExcelConfig(v50, furniture_2->furniture_id) )
    {
      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1216, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1216),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkConfigSceneHomeInfo",
        5017);
      v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1216),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v52 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(v51, (const char (*)[39])byte_1A529C40);
      v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v52, &furniture_2->furniture_id);
      v54 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v53, (const char (*)[11])" scene_id:");
      v55 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v54, &home_config->scene_id);
      common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v55, (const char (*)[15])" in stair_list");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 448));
  }
  *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
  v56 = ((v2 + 1664) >> 3) + 2147450880;
  *(_DWORD *)v56 = 0;
  *(_WORD *)(v56 + 4) = 0;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 1664));
  v57 = ((v2 + 1744) >> 3) + 2147450880;
  *(_DWORD *)v57 = 0;
  *(_WORD *)(v57 + 4) = 0;
  *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0x4000000;
  if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 832, v2 + 480);
  *(_DWORD *)(v2 + 832) = 2001;
  v58 = (((_BYTE)v2 + 68) & 7u) + 3;
  if ( *(_BYTE *)(((v2 + 836) >> 3) + 0x7FFF8000) != 0
    && (char)(((v2 + 68) & 7) + 3) >= *(_BYTE *)(((v2 + 836) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v2 + 836, v58);
  }
  *(_DWORD *)(v2 + 836) = 2002;
  if ( *(_BYTE *)(((v2 + 840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 840) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 840, v58);
  *(_DWORD *)(v2 + 840) = 2003;
  v59 = (((_BYTE)v2 + 76) & 7u) + 3;
  if ( *(_BYTE *)(((v2 + 844) >> 3) + 0x7FFF8000) != 0
    && (char)(((v2 + 76) & 7) + 3) >= *(_BYTE *)(((v2 + 844) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v2 + 844, v59);
  }
  *(_DWORD *)(v2 + 844) = 2004;
  if ( *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 848, v59);
  *(_DWORD *)(v2 + 848) = 2201;
  v60 = (((_BYTE)v2 + 84) & 7u) + 3;
  if ( *(_BYTE *)(((v2 + 852) >> 3) + 0x7FFF8000) != 0
    && (char)(((v2 + 84) & 7) + 3) >= *(_BYTE *)(((v2 + 852) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v2 + 852, v60);
  }
  *(_DWORD *)(v2 + 852) = 2202;
  if ( *(_BYTE *)(((v2 + 856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 856) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 856, v60);
  *(_DWORD *)(v2 + 856) = 2203;
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 1;
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
  std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)(v2 + 48));
  std::set<unsigned int>::set(
    (std::set<unsigned int> *const)(v2 + 1744),
    (std::initializer_list<unsigned int>)__PAIR128__(7LL, v2 + 832),
    (const std::less<unsigned int> *)(v2 + 32),
    (const std::set<unsigned int>::allocator_type *)(v2 + 48));
  std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)(v2 + 48));
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
  if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
          (std::set<unsigned int> *)(v2 + 1744),
          &home_config->scene_id) )
  {
    __for_range_6 = &home_config->block_arrangement_info_list;
    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 512, home_config);
    *(std::vector<data::ConfigHomeBlock>::const_iterator *)(v2 + 512) = std::vector<data::ConfigHomeBlock>::begin(__for_range_6);
    *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 544, home_config);
    *(std::vector<data::ConfigHomeBlock>::const_iterator *)(v2 + 544) = std::vector<data::ConfigHomeBlock>::end(__for_range_6);
    while ( 1 )
    {
      v61 = (char *)(v2 + 544);
      if ( !__gnu_cxx::operator!=<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *)(v2 + 512),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *)(v2 + 544)) )
        break;
      block_0 = __gnu_cxx::__normal_iterator<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *const)(v2 + 512));
      __for_range_7 = &block_0->persistent_furniture_list;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 576, v61);
      *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 576) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_7);
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 608, v61);
      *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 608) = std::vector<data::ConfigHomeFurniture>::end(__for_range_7);
      while ( 1 )
      {
        v62 = (char *)(v2 + 608);
        if ( !__gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
                (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 576),
                (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 608)) )
          break;
        furniture_3 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 576));
        v63 = std::set<unsigned int>::emplace<unsigned int const&>(
                (std::set<unsigned int> *const)(v2 + 1664),
                &furniture_3->guid,
                &furniture_3->guid);
        if ( !v63.second )
        {
          *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1280, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1280),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkConfigSceneHomeInfo",
            5035);
          v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1280),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v65 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v64, (const char (*)[37])byte_1A529E40);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v65, &furniture_3->guid);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
          *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
        }
        __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 576));
      }
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
      __for_range_8 = &block_0->deploy_furniure_list;
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 640, v62);
      *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 640) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_8);
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 672, v62);
      *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 672) = std::vector<data::ConfigHomeFurniture>::end(__for_range_8);
      while ( __gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
                (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 640),
                (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 672)) )
      {
        furniture_4 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 640));
        v66 = std::set<unsigned int>::emplace<unsigned int const&>(
                (std::set<unsigned int> *const)(v2 + 1664),
                &furniture_4->guid,
                &furniture_4->guid);
        if ( !v66.second )
        {
          *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1344, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1344),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkConfigSceneHomeInfo",
            5043);
          v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1344),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v68 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v67, (const char (*)[37])byte_1A529E40);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, &furniture_4->guid);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
          *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
        }
        if ( *(_BYTE *)(((unsigned __int64)furniture_4 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)furniture_4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)furniture_4 >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(furniture_4);
        }
        furniture_id = furniture_4->furniture_id;
        if ( *(_BYTE *)(((unsigned __int64)&home_config->main_house >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&home_config->main_house >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&home_config->main_house);
        }
        if ( furniture_id == home_config->main_house.furniture_id )
        {
          if ( *(_BYTE *)(((unsigned __int64)&furniture_4->guid >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)furniture_4 + 40) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&furniture_4->guid >> 3)
                                                                       + 0x7FFF8000) )
          {
            __asan_report_load4(&furniture_4->guid);
          }
          guid = furniture_4->guid;
          if ( *(_BYTE *)(((unsigned __int64)&home_config->main_house.guid >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&home_config->main_house.guid >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&home_config->main_house.guid);
          }
          if ( guid != home_config->main_house.guid )
          {
            *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1408) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1408, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1408),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "checkConfigSceneHomeInfo",
              5048);
            v71 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1408),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v72 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    v71,
                    (const char (*)[51])byte_1A529EA0);
            v73 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v72, &furniture_4->guid);
            v74 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    v73,
                    (const char (*)[19])", main_house.guid:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v74, &home_config->main_house.guid);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1408));
            *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
          }
        }
        __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 640));
      }
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
      __gnu_cxx::__normal_iterator<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *const)(v2 + 512));
    }
    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
    __for_range_9 = &home_config->door_list;
    *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 704, v61);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 704) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_9);
    *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 736, v61);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 736) = std::vector<data::ConfigHomeFurniture>::end(__for_range_9);
    while ( 1 )
    {
      v75 = (char *)(v2 + 736);
      if ( !__gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 704),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 736)) )
        break;
      furniture_5 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 704));
      v76 = std::set<unsigned int>::emplace<unsigned int const&>(
              (std::set<unsigned int> *const)(v2 + 1664),
              &furniture_5->guid,
              &furniture_5->guid);
      if ( !v76.second )
      {
        *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1472, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1472),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkConfigSceneHomeInfo",
          5058);
        v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1472),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v78 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v77, (const char (*)[37])byte_1A529E40);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v78, &furniture_5->guid);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
        *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 704));
    }
    *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
    __for_range_10 = &home_config->stair_list;
    *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 768, v75);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 768) = std::vector<data::ConfigHomeFurniture>::begin(__for_range_10);
    *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 800, v75);
    *(std::vector<data::ConfigHomeFurniture>::const_iterator *)(v2 + 800) = std::vector<data::ConfigHomeFurniture>::end(__for_range_10);
    while ( __gnu_cxx::operator!=<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 768),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *)(v2 + 800)) )
    {
      furniture_6 = __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 768));
      v79 = std::set<unsigned int>::emplace<unsigned int const&>(
              (std::set<unsigned int> *const)(v2 + 1664),
              &furniture_6->guid,
              &furniture_6->guid);
      if ( !v79.second )
      {
        *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1536) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1536, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1536),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkConfigSceneHomeInfo",
          5065);
        v80 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1536),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v81 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v80, (const char (*)[37])byte_1A529E40);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v81, &furniture_6->guid);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1536));
        *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeFurniture const*,std::vector<data::ConfigHomeFurniture>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeFurniture*,std::vector<data::ConfigHomeFurniture> > *const)(v2 + 768));
    }
    *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((unsigned __int64)&home_config->main_house >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&home_config->main_house >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&home_config->main_house);
    }
    if ( home_config->main_house.furniture_id
      && !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
            (std::set<unsigned int> *)(v2 + 1664),
            &home_config->main_house.guid) )
    {
      *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1600) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1600, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1600),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkConfigSceneHomeInfo",
        5072);
      v83 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1600),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v84 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(v83, (const char (*)[62])byte_1A529F40);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v84, &home_config->main_house.guid);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1600));
      *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -117901064;
    }
  }
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 1744));
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 1664));
  if ( v112 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 208) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E0) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1824LL, v112);
  }
  return ret;
};

// Line 5080: range 000000000F2A124C-000000000F2A1A3D
int32_t __cdecl JsonConfigMgr::checkSceneHomeConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  HomeWorldExcelConfigMgr *p_home_config_mgr; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-174h]
  data::SceneType scene_type; // [rsp+20h] [rbp-170h]
  uint32_t room_scene_id; // [rsp+24h] [rbp-16Ch]
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::reference v23; // [rsp+30h] [rbp-160h]
  uint32_t *scene_id; // [rsp+38h] [rbp-158h]
  std::tuple_element<1,const std::pair<unsigned int const,SceneJsonConfig> >::type *scene_config; // [rsp+40h] [rbp-150h]
  char v26[320]; // [rsp+50h] [rbp-140h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 16 __for_begin:5082 64 8 14 __for_end:5082 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkSceneHomeConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -202116109;
  ret = 0;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, config);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,SceneJsonConfig>::begin(&this->scene_json_config_map_);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::end(&this->scene_json_config_map_);
  while ( std::__detail::operator!=<std::pair<unsigned int const,SceneJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 64)) )
  {
    v23 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 32));
    scene_id = std::get<0ul,unsigned int const,SceneJsonConfig>(v23);
    scene_config = (std::tuple_element<1,const std::pair<unsigned int const,SceneJsonConfig> >::type *)std::get<1ul,unsigned int const,SceneJsonConfig>(v23);
    p_scene_config_mgr = &config->txt_config_mgr.scene_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    scene_type = SceneExcelConfigMgr::getSceneTypeBySceneId(p_scene_config_mgr, *scene_id);
    if ( scene_type == SCENE_HOME_WORLD || scene_type == SCENE_HOME_ROOM )
    {
      if ( checkConfigSceneHomeInfo(config, &scene_config->home_config) )
      {
        *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 96, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 96),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkSceneHomeConfig",
          5092);
        v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 96),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v7 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               v6,
               (const char (*)[44])"checkConfigSceneHomeInfo() faild. scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, scene_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
        *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      if ( scene_type == SCENE_HOME_WORLD )
      {
        p_home_config_mgr = &config->txt_config_mgr.home_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)&scene_config->home_config.main_house >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&scene_config->home_config.main_house >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&scene_config->home_config.main_house);
        }
        room_scene_id = HomeWorldExcelConfigMgr::getRoomSceneIdByFurnitureId(
                          p_home_config_mgr,
                          scene_config->home_config.main_house.furniture_id);
        if ( SceneExcelConfigMgr::getSceneTypeBySceneId(&config->txt_config_mgr.scene_config_mgr, room_scene_id) != SCENE_HOME_ROOM )
        {
          *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 160, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 160),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkSceneHomeConfig",
            5101);
          v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 160),
                 (const char (*)[16])"[CONFIG_ERROR] ");
          v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                  v9,
                  (const char (*)[38])"home_config.main_house.furniture_id: ");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v10,
                  &scene_config->home_config.main_house.furniture_id);
          v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v11,
                  (const char (*)[14])" is not valid");
          v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])" scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, scene_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
          *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&scene_config->home_config.main_house >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&scene_config->home_config.main_house >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&scene_config->home_config.main_house);
        }
        if ( scene_config->home_config.main_house.furniture_id )
        {
          *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 224, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 224),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkSceneHomeConfig",
            5110);
          v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 224),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v15 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                  v14,
                  (const char (*)[38])"home_config.main_house.furniture_id: ");
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v15,
                  &scene_config->home_config.main_house.furniture_id);
          v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v16, (const char (*)[13])" is not zero");
          v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])" scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, scene_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
          *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 5120: range 000000000F2A1A3E-000000000F2A22D1
int32_t __cdecl JsonConfigMgr::checkWidgetToyHitTree(
        JsonConfigMgr *const this,
        const data::ConfigWidgetToyHitTree *config)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  char v22[384]; // [rsp+10h] [rbp-180h] BYREF

  v2 = (common::milog::MiLogStream *)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"5 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)JsonConfigMgr::checkWidgetToyHitTree;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  if ( JsonConfigMgr::checkUseAttachAbilityTriggerWidget(
         this,
         (const data::ConfigWidgetUseAttachAbilityTrigger *)config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWidgetToyHitTree",
      5124);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           v5,
           (const char (*)[57])"checkUseAttachAbilityTriggerWidget failed, material_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config->material_id);
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&config->hit_radius >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->hit_radius >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&config->hit_radius);
    }
    if ( config->hit_radius > 0.0 && config->hit_radius <= 1000.0 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&config->hit_num_limit >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config->hit_num_limit >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config->hit_num_limit);
      }
      if ( config->hit_num_limit && config->hit_num_limit <= 0x64 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&config->hit_radius_tolerance >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->hit_radius_tolerance >> 3)
                                                                 + 0x7FFF8000) )
        {
          __asan_report_load4(&config->hit_radius_tolerance);
        }
        if ( config->hit_radius_tolerance >= 0.0 && config->hit_radius_tolerance <= 100.0 )
        {
          if ( *(char *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(&v2[9], 32LL);
          }
          common::milog::MiLogStream::create(
            v2 + 9,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "checkWidgetToyHitTree",
            5143);
          v20 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  v2 + 9,
                  (const char (*)[42])"check ConfigWidgetToyHitTree material_id:");
          v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &config->material_id);
          common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v21, (const char (*)[4])off_1A528A00);
          common::milog::MiLogStream::~MiLogStream(v2 + 9);
          result = 0;
        }
        else
        {
          if ( *(char *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(&v2[7], 32LL);
          }
          common::milog::MiLogStream::create(
            v2 + 7,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkWidgetToyHitTree",
            5140);
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v2 + 7,
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v17 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                  v16,
                  (const char (*)[45])"widget hit tree hit_radius_tolerance error: ");
          v18 = common::milog::MiLogStream::operator<<<float,(float *)0>(v17, &config->hit_radius_tolerance);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v18,
                  (const char (*)[16])", material_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &config->material_id);
          common::milog::MiLogStream::~MiLogStream(v2 + 7);
          result = -1;
        }
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(&v2[5], 32LL);
        }
        common::milog::MiLogStream::create(
          v2 + 5,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetToyHitTree",
          5135);
        v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v2 + 5,
                (const char (*)[16])"[CONFIG_ERROR] ");
        v13 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                v12,
                (const char (*)[38])"widget hit tree hit_num_limit error: ");
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &config->hit_num_limit);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v14,
                (const char (*)[16])", material_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &config->material_id);
        common::milog::MiLogStream::~MiLogStream(v2 + 5);
        result = -1;
      }
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[3], 32LL);
      }
      common::milog::MiLogStream::create(
        v2 + 3,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetToyHitTree",
        5130);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             v2 + 3,
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             v8,
             (const char (*)[35])"widget hit tree hit_radius error: ");
      v10 = common::milog::MiLogStream::operator<<<float,(float *)0>(v9, &config->hit_radius);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v10, (const char (*)[16])", material_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &config->material_id);
      common::milog::MiLogStream::~MiLogStream(v2 + 3);
      result = -1;
    }
  }
  if ( v22 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 5148: range 000000000F2A22D2-000000000F2A24A1
int32_t __cdecl JsonConfigMgr::checkWidgetWeatherWizard(
        JsonConfigMgr *const this,
        const data::ConfigWidgetWeatherWizard *config)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkWidgetWeatherWizard;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 32, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 32),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/json_config_mgr.cpp",
    "checkWidgetWeatherWizard",
    5172);
  v5 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
         (common::milog::MiLogStream *const)(v2 + 32),
         (const char (*)[45])"check ConfigWidgetWeatherWizard material_id:");
  v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &config->material_id);
  common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v6, (const char (*)[4])off_1A528A00);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
  result = 0;
  if ( v8 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5177: range 000000000F2A24A2-000000000F2A2964
int32_t __cdecl JsonConfigMgr::checkWidgetCoinCollect(
        JsonConfigMgr *const this,
        const data::ConfigWidgetCoinCollect *config)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  char v12[256]; // [rsp+10h] [rbp-100h] BYREF

  v2 = (common::milog::MiLogStream *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"3 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)JsonConfigMgr::checkWidgetCoinCollect;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -202116109;
  if ( JsonConfigMgr::checkUseAttachAbilityTriggerWidget(
         this,
         (const data::ConfigWidgetUseAttachAbilityTrigger *)config) )
  {
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkWidgetCoinCollect",
      5181);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           v5,
           (const char (*)[57])"checkUseAttachAbilityTriggerWidget failed, material_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config->material_id);
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&config->energy_limit >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->energy_limit >> 3)
                                                             + 0x7FFF8000) )
    {
      __asan_report_load4(&config->energy_limit);
    }
    if ( config->energy_limit )
    {
      if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[5], 32LL);
      }
      common::milog::MiLogStream::create(
        v2 + 5,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "checkWidgetCoinCollect",
        5190);
      v10 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              v2 + 5,
              (const char (*)[43])"check ConfigWidgetCoinCollect material_id:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &config->material_id);
      common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v11, (const char (*)[4])off_1A528A00);
      common::milog::MiLogStream::~MiLogStream(v2 + 5);
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[3], 32LL);
      }
      common::milog::MiLogStream::create(
        v2 + 3,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetCoinCollect",
        5187);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             v2 + 3,
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             v8,
             (const char (*)[36])"energy limit is zero, material_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &config->material_id);
      common::milog::MiLogStream::~MiLogStream(v2 + 3);
      result = -1;
    }
  }
  if ( v12 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5196: range 000000000F2A3DC0-000000000F2A65B5
int32_t __cdecl JsonConfigMgr::checkWidgetNewConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *i; // r14
  unsigned __int64 v6; // rax
  char *v7; // rsi
  MaterialExcelConfigMgr *p_material_config_mgr; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  data::ConfigWidgetCdGroupMap *p_cd_group_config_map; // rdx
  uint32_t *p_cd_group; // rdx
  bool v17; // al
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  unsigned __int64 v24; // rax
  unsigned __int64 v25; // rdx
  const char *v26; // rax
  char *v27; // rsi
  char *v28; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v29; // rax
  int *v30; // rdx
  int v31; // ecx
  char v32; // al
  GadgetExcelConfigMgr *p_gadget_config_mgr; // rcx
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  __int64 v41; // rsi
  char *v42; // rsi
  unsigned int *v43; // rax
  int *v44; // rdx
  int v45; // ecx
  char v46; // al
  LuaConfigMgr *v47; // rcx
  std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // r14
  std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rdx
  std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // r14
  std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  char *v66; // rsi
  std::__shared_ptr_access<data::ConfigWidgetToyCreateGadgetBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v67; // rax
  uint32_t gadget_id; // ecx
  char v69; // al
  GadgetExcelConfigMgr *v70; // rcx
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  bool v76; // al
  char v77; // r14
  char v78; // r15
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // rax
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  bool v90; // [rsp+17h] [rbp-819h]
  int32_t ret; // [rsp+20h] [rbp-810h]
  uint32_t suite_num; // [rsp+24h] [rbp-80Ch]
  data::ConfigWidgetToyMap *__for_range; // [rsp+30h] [rbp-800h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,false,true>::reference v94; // [rsp+40h] [rbp-7F0h]
  std::tuple_element<0,std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > >::type *config_name; // [rsp+48h] [rbp-7E8h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false>::reference v96; // [rsp+58h] [rbp-7D8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> > >::type *material_id; // [rsp+60h] [rbp-7D0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> > >::type *widget_config_ptr; // [rsp+68h] [rbp-7C8h]
  std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> *checker_func; // [rsp+78h] [rbp-7B8h]
  data::UInt32List *__for_range_0; // [rsp+80h] [rbp-7B0h]
  const std::set<unsigned int> *group_set_ptr; // [rsp+88h] [rbp-7A8h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+98h] [rbp-798h]
  char v103[1936]; // [rsp+A0h] [rbp-790h] BYREF

  v2 = (unsigned __int64)v103;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1888LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "40 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 4 14 gadget_id:5259 192 4 13"
                        " group_id:5274 208 4 14 gadget_id:5304 224 8 16 __for_begin:5230 256 8 14 __for_end:5230 288 8 9"
                        " <unknown> 320 8 9 <unknown> 352 8 16 __for_begin:5259 384 8 14 __for_end:5259 416 8 16 __for_be"
                        "gin:5274 448 8 14 __for_end:5274 480 8 24 config_checker_iter:5314 512 8 9 <unknown> 544 8 16 __"
                        "for_begin:5331 576 8 14 __for_end:5331 608 16 23 feather_config_ptr:5255 640 16 25 craete_gadget"
                        "_config:5300 672 16 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 "
                        "16 config_name:5252 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknow"
                        "n> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 56 30 checked_widget_config_"
                        "set:5228 1504 320 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkWidgetNewConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234556927;
  v4[536862726] = -234556924;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862736] = -218959360;
  v4[536862737] = -218959360;
  v4[536862738] = -218959360;
  v4[536862739] = -219021312;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -234881024;
  v4[536862766] = -218959118;
  v4[536862777] = -202116109;
  v4[536862778] = -202116109;
  if ( !(_BYTE)`guard variable for'JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map
    && __cxa_guard_acquire(&`guard variable for'JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map) )
  {
    std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::pair<char const(&)[29],JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)#1},true>(
      (std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *const)(v2 + 1504),
      (const char (*)[29])"ConfigWidgetToyGadgetBuilder",
      (JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *)(v2 + 32));
    std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::pair<char const(&)[36],JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)#2},true>(
      (std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *const)(v2 + 1568),
      (const char (*)[36])"ConfigWidgetUseAttachAbilityTrigger",
      (JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *)(v2 + 48));
    std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::pair<char const(&)[23],JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)#3},true>(
      (std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *const)(v2 + 1632),
      (const char (*)[23])"ConfigWidgetLightStone",
      (JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *)(v2 + 64));
    std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::pair<char const(&)[23],JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)#4},true>(
      (std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *const)(v2 + 1696),
      (const char (*)[23])"ConfigWidgetToyCrystal",
      (JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *)(v2 + 80));
    std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::pair<char const(&)[23],JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)#5},true>(
      (std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *const)(v2 + 1760),
      (const char (*)[23])"ConfigWidgetToyHitTree",
      (JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *)(v2 + 96));
    std::allocator<std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>>::allocator((std::allocator<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > > *const)(v2 + 144));
    std::unordered_map<std::string,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::unordered_map(
      &JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map,
      (std::initializer_list<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > >)__PAIR128__(5LL, v2 + 1504),
      0LL,
      (const std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::hasher *)(v2 + 112),
      (const std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::key_equal *)(v2 + 128),
      (const std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::allocator_type *)(v2 + 144));
    __cxa_guard_release(&`guard variable for'JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::~unordered_map,
      &JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map,
      &_dso_handle);
    std::allocator<std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>>::~allocator((std::allocator<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > > *const)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *)(v2 + 1824);
          i != (std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> > *)(v2 + 1504);
          std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::~pair(i) )
    {
      --i;
    }
    v1 = 320LL;
    __asan_poison_stack_memory(v2 + 1504, 320LL);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  }
  ret = 0;
  v6 = ((v2 + 1408) >> 3) + 2147450880;
  *(_DWORD *)v6 = 0;
  *(_WORD *)(v6 + 4) = 0;
  *(_BYTE *)(v6 + 6) = 0;
  std::unordered_set<std::string>::unordered_set((std::unordered_set<std::string> *const)(v2 + 1408));
  __for_range = &this->widget_json_new_config_.config_main_widget_toy.widget_config_map;
  *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 224, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::const_iterator *)(v2 + 224) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::begin(__for_range);
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 256, v1);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::const_iterator *)(v2 + 256) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigBaseWidgetToy>>::end(__for_range);
  while ( 1 )
  {
    v7 = (char *)(v2 + 256);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v2 + 224),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false> *)(v2 + 256)) )
      break;
    v96 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false> *const)(v2 + 224));
    material_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>(v96);
    widget_config_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>(v96);
    p_material_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.material_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)material_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)material_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)material_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(material_id);
    }
    if ( data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(p_material_config_mgr, *material_id) )
    {
      if ( std::operator==<data::ConfigBaseWidgetToy>(widget_config_ptr, 0LL) )
      {
        *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 768, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 768),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkWidgetNewConfig",
          5241);
        v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 768),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v13 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                v12,
                (const char (*)[40])"widget_config_ptr is null, material_id:");
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, material_id);
        common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(
          v14,
          (const char (*)[69])" in widget_json_new_config_.config_main_widget_toy.widget_config_map");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
        *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        p_cd_group_config_map = &this->widget_json_new_config_.config_main_widget_toy.cd_group_config_map;
        if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 320, 0LL);
        *(std::unordered_map<unsigned int,data::ConfigWidgetCdGroup>::const_iterator *)(v2 + 320) = std::unordered_map<unsigned int,data::ConfigWidgetCdGroup>::cend(p_cd_group_config_map);
        *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
        p_cd_group = &std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false> *const)widget_config_ptr)->cd_group;
        if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 288, 0LL);
        *(std::unordered_map<unsigned int,data::ConfigWidgetCdGroup>::const_iterator *)(v2 + 288) = std::unordered_map<unsigned int,data::ConfigWidgetCdGroup>::find(&this->widget_json_new_config_.config_main_widget_toy.cd_group_config_map, p_cd_group);
        v17 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigWidgetCdGroup>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigWidgetCdGroup>,false> *)(v2 + 288),
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigWidgetCdGroup>,false> *)(v2 + 320));
        *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
        if ( v17 )
        {
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 832, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 832),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkWidgetNewConfig",
            5247);
          v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 832),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v19 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  v18,
                  (const char (*)[36])"can't find widget_config cd_group: ");
          v20 = std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false> *const)widget_config_ptr);
          v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &v20->cd_group);
          v22 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v21,
                  (const char (*)[14])" material_id:");
          v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, material_id);
          common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v23,
            (const char (*)[24])" in cd_group_config_map");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 160);
          v24 = (unsigned __int64)std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBaseWidgetToy,(__gnu_cxx::_Lock_policy)2,false,false> *const)widget_config_ptr);
          if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
            v24 = __asan_report_load8(v24);
          v25 = *(_QWORD *)v24 + 32LL;
          if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
            v24 = __asan_report_load8(*(_QWORD *)v24 + 32LL);
          v26 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v25)(v24);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 896),
            v26,
            (const std::allocator<char> *)(v2 + 160));
          std::allocator<char>::~allocator(v2 + 160);
          *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ConfigWidgetToyFeather,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v2 + 608));
          if ( std::operator!=<data::ConfigWidgetToyFeather>(
                 0LL,
                 (const std::shared_ptr<data::ConfigWidgetToyFeather> *)(v2 + 608)) )
          {
            v27 = (char *)(v2 + 896);
            std::unordered_set<std::string>::insert(
              (std::unordered_set<std::string> *const)(v2 + 1408),
              (const std::unordered_set<std::string>::value_type *)(v2 + 896));
            __for_range_0 = &std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608))->show_hint_entity_idlist;
            *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 352, v27);
            *(std::vector<unsigned int>::iterator *)(v2 + 352) = std::vector<unsigned int>::begin(__for_range_0);
            *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 384, v27);
            *(std::vector<unsigned int>::iterator *)(v2 + 384) = std::vector<unsigned int>::end(__for_range_0);
            while ( 1 )
            {
              v28 = (char *)(v2 + 384);
              if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 352),
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 384)) )
                break;
              *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 4;
              v29 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 352));
              v30 = (int *)v29;
              if ( *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v29 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v29);
              }
              v31 = *v30;
              v32 = *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000);
              if ( v32 != 0 && v32 <= 3 )
              {
                LOBYTE(v28) = v32 != 0;
                __asan_report_store4(v2 + 176, v28);
              }
              *(_DWORD *)(v2 + 176) = v31;
              p_gadget_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
              if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v2 + 176);
              if ( data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(p_gadget_config_mgr, *(_DWORD *)(v2 + 176)) )
              {
                v39 = std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
                if ( *(_BYTE *)(((unsigned __int64)&v39->exclude_suite_index >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&v39->exclude_suite_index >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&v39->exclude_suite_index);
                }
                if ( v39->exclude_suite_index )
                {
                  p_lua_config_mgr = &JsonConfigMgr::getConfig(this)->lua_config_mgr;
                  if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(v2 + 176);
                  }
                  v41 = *(unsigned int *)(v2 + 176);
                  group_set_ptr = LuaConfigMgr::queryGadgetGroups(p_lua_config_mgr, v41);
                  if ( group_set_ptr )
                  {
                    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 416, v41);
                    *(std::set<unsigned int>::iterator *)(v2 + 416) = std::set<unsigned int>::begin(group_set_ptr);
                    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 448, v41);
                    *(std::set<unsigned int>::iterator *)(v2 + 448) = std::set<unsigned int>::end(group_set_ptr);
                    while ( 1 )
                    {
                      v42 = (char *)(v2 + 448);
                      if ( !std::operator!=(
                              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v2 + 416),
                              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v2 + 448)) )
                        break;
                      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 4;
                      v43 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v2 + 416));
                      v44 = (int *)v43;
                      if ( *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)v43 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_load4(v43);
                      }
                      v45 = *v44;
                      v46 = *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000);
                      if ( v46 != 0 && v46 <= 3 )
                      {
                        LOBYTE(v42) = v46 != 0;
                        __asan_report_store4(v2 + 192, v42);
                      }
                      *(_DWORD *)(v2 + 192) = v45;
                      v47 = &JsonConfigMgr::getConfig(this)->lua_config_mgr;
                      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0
                        && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
                      {
                        __asan_report_load4(v2 + 192);
                      }
                      group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(v47, *(_DWORD *)(v2 + 192));
                      if ( group_script_config_ptr )
                      {
                        suite_num = std::vector<SuiteScriptConfig>::size(&group_script_config_ptr->suite_config_vec);
                        v48 = std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
                        if ( *(_BYTE *)(((unsigned __int64)&v48->exclude_suite_index >> 3) + 0x7FFF8000) != 0
                          && *(_BYTE *)(((unsigned __int64)&v48->exclude_suite_index >> 3) + 0x7FFF8000) <= 3 )
                        {
                          __asan_report_load4(&v48->exclude_suite_index);
                        }
                        if ( suite_num < v48->exclude_suite_index )
                        {
                          *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 1024, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 1024),
                            &common::milog::MiLogDefault::default_log_obj_,
                            4u,
                            "./src/json_config_mgr.cpp",
                            "checkWidgetNewConfig",
                            5284);
                          v49 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                  (common::milog::MiLogStream *const)(v2 + 1024),
                                  (const char (*)[16])"[CONFIG_ERROR] ");
                          v50 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                                  v49,
                                  (const char (*)[35])"ConfigWidgetToyFeather gadget_id: ");
                          v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                  v50,
                                  (const unsigned int *)(v2 + 176));
                          v52 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                                  v51,
                                  (const char (*)[11])" in group:");
                          v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                  v52,
                                  (const unsigned int *)(v2 + 192));
                          v54 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                                  v53,
                                  (const char (*)[26])" has no suite with index:");
                          v55 = std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
                          v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                  v54,
                                  &v55->exclude_suite_index);
                          v57 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                                  v56,
                                  (const char (*)[14])" material_id:");
                          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v57, material_id);
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
                          *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
                          ret = -1;
                        }
                      }
                      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v2 + 416));
                    }
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
                  }
                }
              }
              else
              {
                *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 960, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 960),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkWidgetNewConfig",
                  5263);
                v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 960),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v35 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                        v34,
                        (const char (*)[46])"can't find ConfigWidgetToyFeather gadget_id: ");
                v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v35,
                        (const unsigned int *)(v2 + 176));
                v37 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v36,
                        (const char (*)[14])" material_id:");
                v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, material_id);
                common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v38,
                  (const char (*)[22])" in gadget_config_mgr");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
                *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
              __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 352));
            }
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
            v58 = std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
            if ( *(_BYTE *)(((unsigned __int64)&v58->show_hint_distance >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)v58 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v58->show_hint_distance >> 3)
                                                                  + 0x7FFF8000) )
            {
              __asan_report_load4(&v58->show_hint_distance);
            }
            if ( v58->show_hint_distance <= 0.0 )
            {
              v59 = std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
              if ( !std::vector<unsigned int>::empty(&v59->show_hint_entity_idlist) )
              {
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1088, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1088),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkWidgetNewConfig",
                  5293);
                v61 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1088),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v62 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
                        v61,
                        (const char (*)[66])" ConfigWidgetToyFeather hint radius 0 with non-empty gadget_list:");
                v63 = std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyFeather,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608));
                v64 = common::milog::MiLogStream::operator<<<unsigned int>(v62, &v63->show_hint_entity_idlist);
                v65 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        v64,
                        (const char (*)[15])", material_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v65, material_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
            }
          }
          else
          {
            *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::ConfigWidgetToyCreateGadgetBase,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v2 + 640));
            if ( std::operator!=<data::ConfigWidgetToyCreateGadgetBase>(
                   (const std::shared_ptr<data::ConfigWidgetToyCreateGadgetBase> *)(v2 + 640),
                   0LL) )
            {
              v66 = (char *)(v2 + 896);
              std::unordered_set<std::string>::insert(
                (std::unordered_set<std::string> *const)(v2 + 1408),
                (const std::unordered_set<std::string>::value_type *)(v2 + 896));
              *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 4;
              v67 = std::__shared_ptr_access<data::ConfigWidgetToyCreateGadgetBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyCreateGadgetBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 640));
              if ( *(_BYTE *)(((unsigned __int64)&v67->gadget_id >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v67->gadget_id >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v67->gadget_id);
              }
              gadget_id = v67->gadget_id;
              v69 = *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000);
              if ( v69 != 0 && v69 <= 3 )
              {
                LOBYTE(v66) = v69 != 0;
                __asan_report_store4(v2 + 208, v66);
              }
              *(_DWORD *)(v2 + 208) = gadget_id;
              v70 = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
              if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v2 + 208);
              if ( !data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(v70, *(_DWORD *)(v2 + 208)) )
              {
                *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1152, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1152),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "checkWidgetNewConfig",
                  5307);
                v71 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1152),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v72 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                        v71,
                        (const char (*)[55])"can't find ConfigWidgetToyCreateGadgetBase gadget_id: ");
                v73 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v72,
                        (const unsigned int *)(v2 + 208));
                v74 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v73,
                        (const char (*)[14])" material_id:");
                v75 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v74, material_id);
                common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v75,
                  (const char (*)[22])" in gadget_config_mgr");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
                *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
              }
              *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
            }
            else
            {
              *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 480, 0LL);
              *(std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::iterator *)(v2 + 480) = std::unordered_map<std::string,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::find(&JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map, (const std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::key_type *)(v2 + 896));
              *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 512, v2 + 896);
              *(std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::iterator *)(v2 + 512) = std::unordered_map<std::string,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::end(&JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map);
              v76 = std::__detail::operator!=<std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>,true>(
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,true> *)(v2 + 480),
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,true> *)(v2 + 512));
              *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
              if ( v76 )
              {
                std::unordered_set<std::string>::insert(
                  (std::unordered_set<std::string> *const)(v2 + 1408),
                  (const std::unordered_set<std::string>::value_type *)(v2 + 896));
                checker_func = &std::__detail::_Node_iterator<std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,false,true> *const)(v2 + 480))->second;
                v77 = 0;
                v78 = 0;
                v90 = 1;
                if ( std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>::operator bool(checker_func) )
                {
                  *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
                  std::shared_ptr<data::ConfigBaseWidgetToy>::shared_ptr(
                    (std::shared_ptr<data::ConfigBaseWidgetToy> *const)(v2 + 672),
                    widget_config_ptr);
                  v77 = 1;
                  v78 = 1;
                  if ( !std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>::operator()(
                          checker_func,
                          this,
                          (std::shared_ptr<data::ConfigBaseWidgetToy> *)(v2 + 672)) )
                    v90 = 0;
                }
                if ( v78 )
                  std::shared_ptr<data::ConfigBaseWidgetToy>::~shared_ptr((std::shared_ptr<data::ConfigBaseWidgetToy> *const)(v2 + 672));
                if ( v77 )
                  *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -1800;
                if ( v90 )
                {
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1216, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1216),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_config_mgr.cpp",
                    "checkWidgetNewConfig",
                    5321);
                  v79 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1216),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v80 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v79, (const char (*)[7])"check ");
                  v81 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                          v80,
                          (const std::string *)(v2 + 896));
                  v82 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                          v81,
                          (const char (*)[20])" fail, material_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v82, material_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                  ret = -1;
                }
              }
              else
              {
                *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1280, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1280),
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/json_config_mgr.cpp",
                  "checkWidgetNewConfig",
                  5327);
                v83 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                        (common::milog::MiLogStream *const)(v2 + 1280),
                        (const char (*)[22])"no checker found for:");
                v84 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                        v83,
                        (const std::string *)(v2 + 896));
                v85 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v84,
                        (const char (*)[14])" material_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v85, material_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
                *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
              }
            }
            std::shared_ptr<data::ConfigWidgetToyCreateGadgetBase>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyCreateGadgetBase> *const)(v2 + 640));
          }
          std::shared_ptr<data::ConfigWidgetToyFeather>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyFeather> *const)(v2 + 608));
          std::string::~string((void *)(v2 + 896));
        }
      }
    }
    else
    {
      *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 704, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 704),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetNewConfig",
        5235);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 704),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              v9,
              (const char (*)[43])"findMaterialExcelConfig fail, material_id:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, material_id);
      common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(
        v11,
        (const char (*)[69])" in widget_json_new_config_.config_main_widget_toy.widget_config_map");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
      *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
    *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -1800;
    *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigBaseWidgetToy> >,false,false> *const)(v2 + 224));
  }
  *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 544, v7);
  *(std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::iterator *)(v2 + 544) = std::unordered_map<std::string,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::begin(&JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map);
  *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 576, v7);
  *(std::unordered_map<std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::iterator *)(v2 + 576) = std::unordered_map<std::string,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>::end(&JsonConfigMgr::checkWidgetNewConfig(void)::widget_config_checker_map);
  while ( std::__detail::operator!=<std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,true> *)(v2 + 544),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,true> *)(v2 + 576)) )
  {
    v94 = std::__detail::_Node_iterator<std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,false,true> *const)(v2 + 544));
    config_name = std::get<0ul,std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>(v94);
    std::get<1ul,std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>(v94);
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<std::string>,std::string>(
            (std::unordered_set<std::string> *)(v2 + 1408),
            config_name) )
    {
      *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1344, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1344),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkWidgetNewConfig",
        5335);
      v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1344),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v87 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v86,
              (const char (*)[18])"json config type:");
      v88 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v87, config_name);
      common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v88, (const char (*)[12])" not found!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
      *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    std::__detail::_Node_iterator<std::pair<std::string const,std::function<int ()(JsonConfigMgr &,std::shared_ptr<data::ConfigBaseWidgetToy>)>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::function<int(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)> >,false,true> *const)(v2 + 544));
  }
  *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
  std::unordered_set<std::string>::~unordered_set((std::unordered_set<std::string> *const)(v2 + 1408));
  if ( v103 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 176) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B4) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80BC) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C4) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80CC) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D4) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80DC) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80E4) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1888LL, v103);
  }
  return ret;
};

// Line 5218: range 000000000F2A2966-000000000F2A2C0D
int __cdecl JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#1}::operator()(
        const JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *const __closure,
        JsonConfigMgr *json_config_mgr,
        data::ConfigBaseWidgetToyPtr *p_config_base_widget_ptr)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  int v7; // r14d
  std::__shared_ptr_access<data::ConfigWidgetToyGadgetBuilder,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  int result; // eax
  char v10[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 22 config_widget_ptr:5218 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  if ( *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::dynamic_pointer_cast<data::ConfigWidgetToyGadgetBuilder,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v3 + 32));
  if ( std::operator==<data::ConfigWidgetToyGadgetBuilder>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyGadgetBuilder> *)(v3 + 32)) )
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "operator()",
      5218);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
      v6,
      (const char (*)[58])"dynamic_pointer_cast to ConfigWidgetToyGadgetBuilder fail");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<data::ConfigWidgetToyGadgetBuilder,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigWidgetToyGadgetBuilder,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = JsonConfigMgr::checkGadgetBuilderWidget(json_config_mgr, v8);
  }
  std::shared_ptr<data::ConfigWidgetToyGadgetBuilder>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyGadgetBuilder> *const)(v3 + 32));
  result = v7;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5219: range 000000000F2A2C0E-000000000F2A2EB5
int __cdecl JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#2}::operator()(
        const JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *const __closure,
        JsonConfigMgr *json_config_mgr,
        data::ConfigBaseWidgetToyPtr *p_config_base_widget_ptr)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  int v7; // r14d
  std::__shared_ptr_access<data::ConfigWidgetUseAttachAbilityTrigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  int result; // eax
  char v10[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 22 config_widget_ptr:5219 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  if ( *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::dynamic_pointer_cast<data::ConfigWidgetUseAttachAbilityTrigger,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v3 + 32));
  if ( std::operator==<data::ConfigWidgetUseAttachAbilityTrigger>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetUseAttachAbilityTrigger> *)(v3 + 32)) )
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "operator()",
      5219);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
      v6,
      (const char (*)[65])"dynamic_pointer_cast to ConfigWidgetUseAttachAbilityTrigger fail");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<data::ConfigWidgetUseAttachAbilityTrigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigWidgetUseAttachAbilityTrigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = JsonConfigMgr::checkUseAttachAbilityTriggerWidget(json_config_mgr, v8);
  }
  std::shared_ptr<data::ConfigWidgetUseAttachAbilityTrigger>::~shared_ptr((std::shared_ptr<data::ConfigWidgetUseAttachAbilityTrigger> *const)(v3 + 32));
  result = v7;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5220: range 000000000F2A2EB6-000000000F2A315D
int __cdecl JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#3}::operator()(
        const JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *const __closure,
        JsonConfigMgr *json_config_mgr,
        data::ConfigBaseWidgetToyPtr *p_config_base_widget_ptr)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  int v7; // r14d
  std::__shared_ptr_access<data::ConfigWidgetLightStone,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  int result; // eax
  char v10[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 22 config_widget_ptr:5220 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#3}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  if ( *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::dynamic_pointer_cast<data::ConfigWidgetLightStone,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v3 + 32));
  if ( std::operator==<data::ConfigWidgetLightStone>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetLightStone> *)(v3 + 32)) )
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "operator()",
      5220);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
      v6,
      (const char (*)[52])"dynamic_pointer_cast to ConfigWidgetLightStone fail");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<data::ConfigWidgetLightStone,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigWidgetLightStone,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = JsonConfigMgr::checkLightStoneWidget(json_config_mgr, v8);
  }
  std::shared_ptr<data::ConfigWidgetLightStone>::~shared_ptr((std::shared_ptr<data::ConfigWidgetLightStone> *const)(v3 + 32));
  result = v7;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5221: range 000000000F2A315E-000000000F2A3405
int __cdecl JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#4}::operator()(
        const JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *const __closure,
        JsonConfigMgr *json_config_mgr,
        data::ConfigBaseWidgetToyPtr *p_config_base_widget_ptr)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  int v7; // r14d
  std::__shared_ptr_access<data::ConfigWidgetToyCrystal,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  int result; // eax
  char v10[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 22 config_widget_ptr:5221 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#4}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  if ( *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::dynamic_pointer_cast<data::ConfigWidgetToyCrystal,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v3 + 32));
  if ( std::operator==<data::ConfigWidgetToyCrystal>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyCrystal> *)(v3 + 32)) )
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "operator()",
      5221);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
      v6,
      (const char (*)[52])"dynamic_pointer_cast to ConfigWidgetToyCrystal fail");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<data::ConfigWidgetToyCrystal,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigWidgetToyCrystal,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = JsonConfigMgr::checkWidgetToyCrystal(json_config_mgr, v8);
  }
  std::shared_ptr<data::ConfigWidgetToyCrystal>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyCrystal> *const)(v3 + 32));
  result = v7;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5222: range 000000000F2A3406-000000000F2A36AD
int __cdecl JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#5}::operator()(
        const JsonConfigMgr::checkWidgetNewConfig::<lambda(JsonConfigMgr&, data::ConfigBaseWidgetToyPtr)> *const __closure,
        JsonConfigMgr *json_config_mgr,
        data::ConfigBaseWidgetToyPtr *p_config_base_widget_ptr)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  int v7; // r14d
  std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  int result; // eax
  char v10[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 22 config_widget_ptr:5222 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkWidgetNewConfig(void)::{lambda(JsonConfigMgr&,std::shared_ptr<data::ConfigBaseWidgetToy>)#5}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  if ( *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::dynamic_pointer_cast<data::ConfigWidgetToyHitTree,data::ConfigBaseWidgetToy>((const std::shared_ptr<data::ConfigBaseWidgetToy> *)(v3 + 32));
  if ( std::operator==<data::ConfigWidgetToyHitTree>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyHitTree> *)(v3 + 32)) )
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "operator()",
      5222);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
      v6,
      (const char (*)[52])"dynamic_pointer_cast to ConfigWidgetToyHitTree fail");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = JsonConfigMgr::checkWidgetToyHitTree(json_config_mgr, v8);
  }
  std::shared_ptr<data::ConfigWidgetToyHitTree>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyHitTree> *const)(v3 + 32));
  result = v7;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5345: range 000000000F2A65B6-000000000F2A7031
void __cdecl JsonConfigMgr::parsePredicateStringToHash(
        JsonConfigMgr *const this,
        data::ConfigAbilityPredicatePtr *p_predicate_ptr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_global_value_key; // rdx
  std::string *p_key; // rdx
  data::ConfigAbilityPredicateArray *__for_range_1; // [rsp+10h] [rbp-240h]
  std::shared_ptr<data::ConfigAbilityPredicate> *predicates_item_ptr_1; // [rsp+18h] [rbp-238h]
  data::ConfigAbilityPredicateArray *__for_range_0; // [rsp+20h] [rbp-230h]
  std::shared_ptr<data::ConfigAbilityPredicate> *predicates_item_ptr_0; // [rsp+28h] [rbp-228h]
  data::ConfigAbilityPredicateArray *__for_range; // [rsp+30h] [rbp-220h]
  std::shared_ptr<data::ConfigAbilityPredicate> *predicates_item_ptr; // [rsp+38h] [rbp-218h]
  char v13[528]; // [rsp+40h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 32 8 16 __for_begin:5355 64 8 14 __for_end:5355 96 8 16 __for_begin:5364 128 8 14 __for_end:5"
                        "364 160 8 16 __for_begin:5373 192 8 14 __for_end:5373 224 16 15 by_any_ptr:5352 256 16 9 <unknow"
                        "n> 288 16 15 by_not_ptr:5361 320 16 9 <unknown> 352 16 15 by_and_ptr:5370 384 16 9 <unknown> 416"
                        " 16 31 by_target_charge_value_ptr:5379 448 16 31 by_target_global_value_ptr:5385";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::parsePredicateStringToHash;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862734] = -202178560;
  if ( !std::operator==<data::ConfigAbilityPredicate>(p_predicate_ptr, 0LL) )
  {
    if ( *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ByAny,data::ConfigAbilityPredicate>((const std::shared_ptr<data::ConfigAbilityPredicate> *)(v2 + 224));
    if ( std::operator!=<data::ByAny>((const std::shared_ptr<data::ByAny> *)(v2 + 224), 0LL) )
    {
      __for_range = &std::__shared_ptr_access<data::ByAny,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ByAny,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224))->predicates;
      if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 32, 0LL);
      *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 32) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(__for_range);
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 64, 0LL);
      *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 64) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(__for_range);
      while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 32),
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 64)) )
      {
        predicates_item_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 32));
        *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
        std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
          (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 256),
          predicates_item_ptr);
        JsonConfigMgr::parsePredicateStringToHash(this, (data::ConfigAbilityPredicatePtr *)(v2 + 256));
        std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 256));
        *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -1800;
        __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 32));
      }
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    }
    else
    {
      if ( *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ByNot,data::ConfigAbilityPredicate>((const std::shared_ptr<data::ConfigAbilityPredicate> *)(v2 + 288));
      if ( std::operator!=<data::ByNot>((const std::shared_ptr<data::ByNot> *)(v2 + 288), 0LL) )
      {
        __for_range_0 = &std::__shared_ptr_access<data::ByNot,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ByNot,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288))->predicates;
        if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 96, 0LL);
        *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 96) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(__for_range_0);
        if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 128, 0LL);
        *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 128) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(__for_range_0);
        while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 96),
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 128)) )
        {
          predicates_item_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 96));
          *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
          std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
            (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 320),
            predicates_item_ptr_0);
          JsonConfigMgr::parsePredicateStringToHash(this, (data::ConfigAbilityPredicatePtr *)(v2 + 320));
          std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 320));
          *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -1800;
          __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 96));
        }
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      }
      else
      {
        if ( *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ByAnd,data::ConfigAbilityPredicate>((const std::shared_ptr<data::ConfigAbilityPredicate> *)(v2 + 352));
        if ( std::operator!=<data::ByAnd>((const std::shared_ptr<data::ByAnd> *)(v2 + 352), 0LL) )
        {
          __for_range_1 = &std::__shared_ptr_access<data::ByAnd,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ByAnd,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 352))->predicates;
          if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 160, 0LL);
          *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 160) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(__for_range_1);
          if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 192, 0LL);
          *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 192) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(__for_range_1);
          while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 160),
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 192)) )
          {
            predicates_item_ptr_1 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 160));
            *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
            std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
              (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 384),
              predicates_item_ptr_1);
            JsonConfigMgr::parsePredicateStringToHash(this, (data::ConfigAbilityPredicatePtr *)(v2 + 384));
            std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 384));
            *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -1800;
            __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 160));
          }
          *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
        }
        else
        {
          if ( *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ByTargetChargeValue,data::ConfigAbilityPredicate>((const std::shared_ptr<data::ConfigAbilityPredicate> *)(v2 + 416));
          if ( std::operator!=<data::ByTargetChargeValue>(
                 (const std::shared_ptr<data::ByTargetChargeValue> *)(v2 + 416),
                 0LL) )
          {
            p_global_value_key = &std::__shared_ptr_access<data::ByTargetChargeValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ByTargetChargeValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 416))->global_value_key;
            JsonConfigMgr::addAbilityString(this, p_global_value_key);
          }
          else
          {
            if ( *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::ByTargetGlobalValue,data::ConfigAbilityPredicate>((const std::shared_ptr<data::ConfigAbilityPredicate> *)(v2 + 448));
            if ( std::operator!=<data::ByTargetGlobalValue>(
                   (const std::shared_ptr<data::ByTargetGlobalValue> *)(v2 + 448),
                   0LL) )
            {
              p_key = &std::__shared_ptr_access<data::ByTargetGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ByTargetGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 448))->key;
              JsonConfigMgr::addAbilityString(this, p_key);
            }
            std::shared_ptr<data::ByTargetGlobalValue>::~shared_ptr((std::shared_ptr<data::ByTargetGlobalValue> *const)(v2 + 448));
          }
          std::shared_ptr<data::ByTargetChargeValue>::~shared_ptr((std::shared_ptr<data::ByTargetChargeValue> *const)(v2 + 416));
        }
        std::shared_ptr<data::ByAnd>::~shared_ptr((std::shared_ptr<data::ByAnd> *const)(v2 + 352));
      }
      std::shared_ptr<data::ByNot>::~shared_ptr((std::shared_ptr<data::ByNot> *const)(v2 + 288));
    }
    std::shared_ptr<data::ByAny>::~shared_ptr((std::shared_ptr<data::ByAny> *const)(v2 + 224));
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 5396: range 000000000F2A7032-000000000F2A73D3
void __cdecl JsonConfigMgr::checkAndParsePredicateStringToHash(JsonConfigMgr *const this, std::any *member)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::type_info *v5; // rax
  std::shared_ptr<data::ConfigAbilityPredicate> *v6; // rax
  const std::type_info *v7; // rax
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *__for_range; // [rsp+20h] [rbp-F0h]
  std::shared_ptr<data::ConfigAbilityPredicate> *predicate_ptr; // [rsp+28h] [rbp-E8h]
  char v10[224]; // [rsp+30h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 16 __for_begin:5405 64 8 14 __for_end:5405 96 16 18 predicate_ptr:5399 128 16 9 <unknown>"
                        " 160 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkAndParsePredicateStringToHash;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  v5 = std::any::type(member);
  if ( std::type_info::operator==(
         v5,
         (const std::type_info *)&`typeinfo for'std::shared_ptr<data::ConfigAbilityPredicate>) )
  {
    v6 = std::any_cast<std::shared_ptr<data::ConfigAbilityPredicate> &>(member);
    std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 96),
      v6);
    std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 128),
      (const std::shared_ptr<data::ConfigAbilityPredicate> *)(v2 + 96));
    JsonConfigMgr::parsePredicateStringToHash(this, (data::ConfigAbilityPredicatePtr *)(v2 + 128));
    std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 128));
    *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -1800;
    std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 96));
  }
  else
  {
    v7 = std::any::type(member);
    if ( std::type_info::operator==(
           v7,
           (const std::type_info *)&`typeinfo for'std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>) )
    {
      __for_range = std::any_cast<std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> &>(member);
      if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 32, &`typeinfo for'std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>);
      *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 32) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(__for_range);
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 64, &`typeinfo for'std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>);
      *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v2 + 64) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(__for_range);
      while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 32),
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v2 + 64)) )
      {
        predicate_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 32));
        *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
          (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 160),
          predicate_ptr);
        JsonConfigMgr::parsePredicateStringToHash(this, (data::ConfigAbilityPredicatePtr *)(v2 + 160));
        std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v2 + 160));
        *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -1800;
        __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v2 + 32));
      }
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5414: range 000000000F2A7468-000000000F2AC589
void __cdecl JsonConfigMgr::parseAbilityStringToHash(JsonConfigMgr *const this, data::ConfigAbility *config_ability)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_ability_name; // rsi
  char *v6; // rsi
  char *v7; // rsi
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rax
  void (__fastcall *v10)(unsigned __int64, data::ConfigAbility *); // r8
  const std::shared_ptr<data::BaseActionContainer> *v11; // rax
  std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  unsigned __int64 v14; // rax
  std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // r14
  unsigned __int64 v17; // rax
  std::string *p_key; // rdx
  std::string *p_global_value_key; // rdx
  std::string *p_override_map_key; // rdx
  std::string *v21; // rdx
  std::string *v22; // rdx
  std::string *v23; // rdx
  std::string *v24; // rdx
  std::string *v25; // rsi
  std::string *v26; // rsi
  std::string *v27; // rdx
  std::string *v28; // rsi
  std::string *v29; // rdx
  __gnu_cxx::__normal_iterator<data::GlobalValuePair*,std::vector<data::GlobalValuePair> >::reference v30; // rdx
  std::string *v31; // rdx
  std::string *p_camp_global_key; // rdx
  std::string *v33; // rdx
  std::string *v34; // rdx
  std::string *v35; // rdx
  std::string *p_activate_skill_key; // rdx
  std::string *v37; // rdx
  std::string *v38; // rdx
  std::string *v39; // rdx
  std::string *v40; // rdx
  std::string *v41; // rdx
  std::string *v42; // rdx
  std::string *p_gv__fw__bullet_item_id; // rdx
  std::string *p_gv__fw__color_h; // rdx
  std::string *p_gv__fw__scale; // rdx
  std::string *p_gv__fw__angle; // rdx
  std::string *p_gv__fw__max_particle_count; // rdx
  std::string *p_gv__fw__face_to_camera; // rdx
  std::string *p_gv__fw__bullet_life_time; // rdx
  std::string *p_drop_to_pos; // rsi
  std::string *p_launch_to_pos; // rsi
  std::string *p_logic_state_name; // rdx
  std::string *v53; // rdx
  std::string *p_damage_element_type_key; // rdx
  std::string *p_damage_amount_key; // rdx
  std::string *p_gv_bullet_init_pos; // rsi
  std::string *p_gv_bullet_forward; // rsi
  std::string *p_sgv_idkey; // rdx
  std::string *p_broadcast_gvkey; // rdx
  std::string *v60; // rdx
  std::string *v61; // rdx
  std::string *p_gv_key; // rdx
  std::string *v63; // rdx
  std::string *v64; // rdx
  std::string *v65; // rdx
  std::string *v66; // rdx
  std::string *v67; // rdx
  std::string *v68; // rdx
  std::string *p_hp_key; // rdx
  std::string *p_state_key; // rdx
  std::string *p_damage_key; // rdx
  std::string *v72; // rdx
  void (__fastcall *v73)(std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // [rsp+8h] [rbp-D98h]
  void (__fastcall *v74)(std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // [rsp+8h] [rbp-D98h]
  int i; // [rsp+20h] [rbp-D80h]
  int i_0; // [rsp+24h] [rbp-D7Ch]
  int i_1; // [rsp+28h] [rbp-D78h]
  int i_2; // [rsp+2Ch] [rbp-D74h]
  int i_3; // [rsp+30h] [rbp-D70h]
  int i_4; // [rsp+34h] [rbp-D6Ch]
  data::DynamicArgumentMap *__for_range; // [rsp+38h] [rbp-D68h]
  data::ConfigAbilityModifierMap *__for_range_0; // [rsp+40h] [rbp-D60h]
  std::vector<std::shared_ptr<data::BaseActionContainer>> *__for_range_2; // [rsp+48h] [rbp-D58h]
  data::GlobalValueList *__for_range_3; // [rsp+50h] [rbp-D50h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true>::reference v86; // [rsp+60h] [rbp-D40h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> > >::type *modifier_ptr; // [rsp+70h] [rbp-D30h]
  data::DynamicFloatMap *__for_range_1; // [rsp+78h] [rbp-D28h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true>::reference v89; // [rsp+80h] [rbp-D20h]
  const std::string *key_0; // [rsp+88h] [rbp-D18h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true>::reference __in; // [rsp+98h] [rbp-D08h]
  const std::string *key; // [rsp+A0h] [rbp-D00h]
  char v93[3312]; // [rsp+B0h] [rbp-CF0h] BYREF

  v2 = (unsigned __int64)v93;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(3264LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "77 32 8 16 __for_begin:5416 64 8 14 __for_end:5416 96 8 16 __for_begin:5420 128 8 14 __for_end:5"
                        "420 160 8 16 __for_begin:5422 192 8 14 __for_end:5422 224 8 16 __for_begin:5428 256 8 14 __for_e"
                        "nd:5428 288 8 16 __for_begin:5522 320 8 14 __for_end:5522 352 16 18 container_ptr:5428 384 16 30"
                        " config_ability_action_ptr:5431 416 16 29 config_ability_mixin_ptr:5439 448 16 25 add_global_val"
                        "ue_ptr:5448 480 16 26 set2_global_value_ptr:5454 512 16 25 set_random_value_ptr:5461 544 16 27 s"
                        "et_override_value_ptr:5467 576 16 30 set_global_value_dist_ptr:5473 608 16 27 clear_global_value"
                        "_ptr:5479 640 16 23 set_global_pos_ptr:5485 672 16 23 set_global_dir_ptr:5494 704 16 25 set_cras"
                        "h_damage_ptr:5503 736 16 25 set_global_value_ptr:5513 768 16 30 set_global_value_list_ptr:5519 8"
                        "00 16 30 multiply_global_value_ptr:5528 832 16 14 shock_ptr:5534 864 16 13 s_gv_ptr:5540 896 16 "
                        "23 attach_to_self_ptr:5546 928 16 23 gadget_upgrade_ptr:5552 960 16 17 electric_ptr:5558 992 16 "
                        "27 get_fight_property_ptr:5564 1024 16 31 attach_to_self_no_init_ptr:5571 1056 16 46 attach_modi"
                        "fier_to_global_value_mixin_ptr:5578 1088 16 39 set_target_num_to_global_value_ptr:5585 1120 16 4"
                        "0 get_heal_amount_to_global_value_ptr:5592 1152 16 38 get_hp_healed_to_global_value_ptr:5599 118"
                        "4 16 33 fireworks_launcher_mixin_ptr:5606 1216 16 27 monster_land_mixin_ptr:5619 1248 16 29 mons"
                        "ter_launch_mixin_ptr:5629 1280 16 30 add_logic_state_value_ptr:5639 1312 16 30 set_logic_state_v"
                        "alue_ptr:5646 1344 16 32 damage_statistics_mixin_ptr:5653 1376 16 32 shoot_from_camera_mixin_ptr"
                        ":5661 1408 16 27 broadcast_gv_mixin_ptr:5672 1440 16 25 receive_gv_mixin_ptr:5680 1472 16 44 map"
                        "_gv_to_animation_clip_time_mixin_ptr:5689 1504 16 52 map_gv_to_effect_particle_system_time_mixin"
                        "_ptr:5696 1536 16 37 set_gv_to_shader_param_mixin_ptr:5703 1568 16 31 set_gallery_info_to_gv_ptr"
                        ":5710 1600 16 43 get_strafe_stamina_to_global_value_ptr:5717 1632 16 46 set_nearest_pos_index_to"
                        "_global_value_ptr:5724 1664 16 37 activity_breakout_boss_mixin_ptr:5731 1696 16 35 activity_brea"
                        "kout_teleport_ptr:5740 1728 24 20 invoke_site_vec:5427 1792 32 9 <unknown> 1856 32 9 <unknown> 1"
                        "920 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9 <unknown> 2112 32 9 <unknown> 2176 32 9 <unknow"
                        "n> 2240 32 9 <unknown> 2304 32 9 <unknown> 2368 32 9 <unknown> 2432 32 9 <unknown> 2496 32 9 <un"
                        "known> 2560 32 9 <unknown> 2624 32 9 <unknown> 2688 32 9 <unknown> 2752 32 9 <unknown> 2816 32 9"
                        " <unknown> 2880 32 9 <unknown> 2944 32 9 <unknown> 3008 32 9 <unknown> 3072 32 9 <unknown> 3136 "
                        "32 9 <unknown> 3200 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::parseAbilityStringToHash;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862736] = -219021312;
  v4[536862737] = -219021312;
  v4[536862738] = -219021312;
  v4[536862739] = -219021312;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862742] = -219021312;
  v4[536862743] = -219021312;
  v4[536862744] = -219021312;
  v4[536862745] = -219021312;
  v4[536862746] = -219021312;
  v4[536862747] = -219021312;
  v4[536862748] = -219021312;
  v4[536862749] = -219021312;
  v4[536862750] = -219021312;
  v4[536862751] = -219021312;
  v4[536862752] = -219021312;
  v4[536862753] = -219021312;
  v4[536862754] = -219021312;
  v4[536862755] = -219021312;
  v4[536862756] = -219021312;
  v4[536862757] = -219021312;
  v4[536862758] = -219021312;
  v4[536862759] = -219021312;
  v4[536862760] = -219021312;
  v4[536862761] = -219021312;
  v4[536862762] = -219021312;
  v4[536862763] = -219021312;
  v4[536862764] = -219021312;
  v4[536862765] = -219021312;
  v4[536862766] = -219021312;
  v4[536862767] = -219021312;
  v4[536862768] = -219021312;
  v4[536862769] = -219021312;
  v4[536862770] = -219021312;
  v4[536862771] = -219021312;
  v4[536862772] = -219021312;
  v4[536862773] = -219021312;
  v4[536862774] = -234881024;
  v4[536862775] = -218959118;
  v4[536862777] = -218959118;
  v4[536862779] = -218959118;
  v4[536862781] = -218959118;
  v4[536862783] = -218959118;
  v4[536862785] = -218959118;
  v4[536862787] = -218959118;
  v4[536862789] = -218959118;
  v4[536862791] = -218959118;
  v4[536862793] = -218959118;
  v4[536862795] = -218959118;
  v4[536862797] = -218959118;
  v4[536862799] = -218959118;
  v4[536862801] = -218959118;
  v4[536862803] = -218959118;
  v4[536862805] = -218959118;
  v4[536862807] = -218959118;
  v4[536862809] = -218959118;
  v4[536862811] = -218959118;
  v4[536862813] = -218959118;
  v4[536862815] = -218959118;
  v4[536862817] = -218959118;
  v4[536862819] = -218959118;
  v4[536862821] = -202116109;
  p_ability_name = &config_ability->ability_name;
  JsonConfigMgr::addAbilityString(this, &config_ability->ability_name);
  __for_range = &config_ability->ability_specials;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, p_ability_name);
  *(std::unordered_map<std::string,data::DynamicArgument>::iterator *)(v2 + 32) = std::unordered_map<std::string,data::DynamicArgument>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, p_ability_name);
  *(std::unordered_map<std::string,data::DynamicArgument>::iterator *)(v2 + 64) = std::unordered_map<std::string,data::DynamicArgument>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<std::string const,data::DynamicArgument>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicArgument>,true> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicArgument>,true> *)(v2 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true> *const)(v2 + 32));
    key = std::get<0ul,std::string const,data::DynamicArgument>(__in);
    std::get<1ul,std::string const,data::DynamicArgument>(__in);
    JsonConfigMgr::addAbilityString(this, key);
    std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true> *const)(v2 + 32));
  }
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  __for_range_0 = &config_ability->modifiers;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v6);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v2 + 96) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::begin(__for_range_0);
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 128, v6);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v2 + 128) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::end(__for_range_0);
  while ( 1 )
  {
    v7 = (char *)(v2 + 128);
    if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v2 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v2 + 128)) )
      break;
    v86 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v2 + 96));
    std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v86);
    modifier_ptr = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v86);
    __for_range_1 = &std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)modifier_ptr)->properties;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v7);
    *(std::unordered_map<std::string,data::DynamicFloat>::iterator *)(v2 + 160) = std::unordered_map<std::string,data::DynamicFloat>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v7);
    *(std::unordered_map<std::string,data::DynamicFloat>::iterator *)(v2 + 192) = std::unordered_map<std::string,data::DynamicFloat>::end(__for_range_1);
    while ( std::__detail::operator!=<std::pair<std::string const,data::DynamicFloat>,true>(
              (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicFloat>,true> *)(v2 + 160),
              (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicFloat>,true> *)(v2 + 192)) )
    {
      v89 = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicFloat>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true> *const)(v2 + 160));
      key_0 = std::get<0ul,std::string const,data::DynamicFloat>(v89);
      std::get<1ul,std::string const,data::DynamicFloat>(v89);
      JsonConfigMgr::addAbilityString(this, key_0);
      std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicFloat>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicFloat>,false,true> *const)(v2 + 160));
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v2 + 96));
  }
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
  v8 = ((v2 + 1728) >> 3) + 2147450880;
  *(_WORD *)v8 = 0;
  *(_BYTE *)(v8 + 2) = 0;
  if ( *(_BYTE *)(((unsigned __int64)config_ability >> 3) + 0x7FFF8000) )
    __asan_report_load8(config_ability);
  v9 = (unsigned __int64)(config_ability->_vptr_ConfigAbility + 9);
  if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
    v9 = __asan_report_load8(config_ability->_vptr_ConfigAbility + 9);
  v10 = *(void (__fastcall **)(unsigned __int64, data::ConfigAbility *))v9;
  if ( *(char *)(((v2 + 1728) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 1751) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 64 + 23) & 7) >= *(_BYTE *)(((v2 + 1751) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 1728, 24LL);
  }
  v10(v2 + 1728, config_ability);
  __for_range_2 = (std::vector<std::shared_ptr<data::BaseActionContainer>> *)(v2 + 1728);
  *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 224, config_ability);
  *(std::vector<std::shared_ptr<data::BaseActionContainer>>::iterator *)(v2 + 224) = std::vector<std::shared_ptr<data::BaseActionContainer>>::begin(__for_range_2);
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 256, config_ability);
  *(std::vector<std::shared_ptr<data::BaseActionContainer>>::iterator *)(v2 + 256) = std::vector<std::shared_ptr<data::BaseActionContainer>>::end(__for_range_2);
  while ( __gnu_cxx::operator!=<std::shared_ptr<data::BaseActionContainer> *,std::vector<std::shared_ptr<data::BaseActionContainer>>>(
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *)(v2 + 224),
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *)(v2 + 256)) )
  {
    *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    v11 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer> *,std::vector<std::shared_ptr<data::BaseActionContainer>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *const)(v2 + 224));
    std::shared_ptr<data::BaseActionContainer>::shared_ptr(
      (std::shared_ptr<data::BaseActionContainer> *const)(v2 + 352),
      v11);
    *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigAbilityAction,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 384));
    if ( std::operator!=<data::ConfigAbilityAction>((const std::shared_ptr<data::ConfigAbilityAction> *)(v2 + 384), 0LL) )
    {
      v12 = std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 384));
      v13 = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v12);
      v14 = (unsigned __int64)(v13->_vptr_BaseActionContainer + 3);
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v13->_vptr_BaseActionContainer + 3);
      v73 = *(void (__fastcall **)(std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v14;
      *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
      std::function<void ()(std::any &)>::function<JsonConfigMgr::parseAbilityStringToHash(data::ConfigAbility &)::{lambda(std::any &)#1},void,void>(
        (std::function<void(std::any&)> *const)(v2 + 1792),
        (JsonConfigMgr::parseAbilityStringToHash::<lambda(std::any&)>)this);
      v73(v13, v2 + 1792);
      std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 1792));
      *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -117901064;
    }
    *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigAbilityMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 416));
    if ( std::operator!=<data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(v2 + 416), 0LL) )
    {
      v15 = std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 416));
      v16 = v15;
      if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v15);
      v17 = (unsigned __int64)(v16->_vptr_BaseActionContainer + 3);
      if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
        v17 = __asan_report_load8(v16->_vptr_BaseActionContainer + 3);
      v74 = *(void (__fastcall **)(std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v17;
      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
      std::function<void ()(std::any &)>::function<JsonConfigMgr::parseAbilityStringToHash(data::ConfigAbility &)::{lambda(std::any &)#2},void,void>(
        (std::function<void(std::any&)> *const)(v2 + 1856),
        (JsonConfigMgr::parseAbilityStringToHash::<lambda(std::any&)>)this);
      v74(v16, v2 + 1856);
      std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 1856));
      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -117901064;
    }
    *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::AddGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 448));
    if ( std::operator!=<data::AddGlobalValue>((const std::shared_ptr<data::AddGlobalValue> *)(v2 + 448), 0LL) )
    {
      p_key = &std::__shared_ptr_access<data::AddGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AddGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 448))->key;
      JsonConfigMgr::addAbilityString(this, p_key);
    }
    else
    {
      *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::SetGlobalValueToOverrideMap,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 480));
      if ( std::operator!=<data::SetGlobalValueToOverrideMap>(
             (const std::shared_ptr<data::SetGlobalValueToOverrideMap> *)(v2 + 480),
             0LL) )
      {
        p_global_value_key = &std::__shared_ptr_access<data::SetGlobalValueToOverrideMap,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGlobalValueToOverrideMap,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 480))->global_value_key;
        JsonConfigMgr::addAbilityString(this, p_global_value_key);
        p_override_map_key = &std::__shared_ptr_access<data::SetGlobalValueToOverrideMap,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGlobalValueToOverrideMap,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 480))->override_map_key;
        JsonConfigMgr::addAbilityString(this, p_override_map_key);
      }
      else
      {
        *(_WORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 512) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::SetRandomOverrideMapValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 512));
        if ( std::operator!=<data::SetRandomOverrideMapValue>(
               (const std::shared_ptr<data::SetRandomOverrideMapValue> *)(v2 + 512),
               0LL) )
        {
          v21 = &std::__shared_ptr_access<data::SetRandomOverrideMapValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetRandomOverrideMapValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 512))->override_map_key;
          JsonConfigMgr::addAbilityString(this, v21);
        }
        else
        {
          *(_WORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v2 + 544) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::SetOverrideMapValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 544));
          if ( std::operator!=<data::SetOverrideMapValue>(
                 (const std::shared_ptr<data::SetOverrideMapValue> *)(v2 + 544),
                 0LL) )
          {
            v22 = &std::__shared_ptr_access<data::SetOverrideMapValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetOverrideMapValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 544))->override_map_key;
            JsonConfigMgr::addAbilityString(this, v22);
          }
          else
          {
            *(_WORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v2 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::SetGlobalValueByTargetDistance,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 576));
            if ( std::operator!=<data::SetGlobalValueByTargetDistance>(
                   (const std::shared_ptr<data::SetGlobalValueByTargetDistance> *)(v2 + 576),
                   0LL) )
            {
              v23 = &std::__shared_ptr_access<data::SetGlobalValueByTargetDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGlobalValueByTargetDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 576))->key;
              JsonConfigMgr::addAbilityString(this, v23);
            }
            else
            {
              *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::ClearGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 608));
              if ( std::operator!=<data::ClearGlobalValue>(
                     (const std::shared_ptr<data::ClearGlobalValue> *)(v2 + 608),
                     0LL) )
              {
                v24 = &std::__shared_ptr_access<data::ClearGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ClearGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 608))->key;
                JsonConfigMgr::addAbilityString(this, v24);
              }
              else
              {
                *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::SetGlobalPos,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 640));
                if ( std::operator!=<data::SetGlobalPos>((const std::shared_ptr<data::SetGlobalPos> *)(v2 + 640), 0LL) )
                {
                  for ( i = 0; ; ++i )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(&this->ability_define_);
                    }
                    if ( i >= this->ability_define_.ABILITY_SET_GLOBAL_POS_NUM )
                      break;
                    *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = 0;
                    *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1984) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1984, 32LL);
                    }
                    std::to_string((std::string *)(v2 + 1984), i);
                    *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = 0;
                    v25 = &std::__shared_ptr_access<data::SetGlobalPos,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGlobalPos,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 640))->key;
                    if ( *(char *)(((v2 + 1920) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) )
                    {
                      v25 = (std::string *)32;
                      __asan_report_store_n(v2 + 1920, 32LL);
                    }
                    std::operator+<char>((std::string *)(v2 + 1920), v25, "_");
                    if ( *(char *)(((v2 + 2048) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 2048, 32LL);
                    }
                    std::operator+<char>(
                      (std::string *)(v2 + 2048),
                      (std::string *)(v2 + 1920),
                      (std::string *)(v2 + 1984));
                    JsonConfigMgr::addAbilityString(this, (const std::string *)(v2 + 2048));
                    std::string::~string((void *)(v2 + 2048));
                    *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = -117901064;
                    std::string::~string((void *)(v2 + 1920));
                    *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -117901064;
                    std::string::~string((void *)(v2 + 1984));
                    *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -117901064;
                  }
                }
                else
                {
                  *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  std::dynamic_pointer_cast<data::SetGlobalDir,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 672));
                  if ( std::operator!=<data::SetGlobalDir>((const std::shared_ptr<data::SetGlobalDir> *)(v2 + 672), 0LL) )
                  {
                    for ( i_0 = 0; ; ++i_0 )
                    {
                      if ( *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) != 0
                        && *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) <= 3 )
                      {
                        __asan_report_load4(&this->ability_define_);
                      }
                      if ( i_0 >= this->ability_define_.ABILITY_SET_GLOBAL_POS_NUM )
                        break;
                      *(_DWORD *)(((v2 + 2240) >> 3) + 0x7FFF8000) = 0;
                      *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 2176) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 2207) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2207) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 2176, 32LL);
                      }
                      std::to_string((std::string *)(v2 + 2176), i_0);
                      *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = 0;
                      v26 = &std::__shared_ptr_access<data::SetGlobalDir,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGlobalDir,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 672))->key;
                      if ( *(char *)(((v2 + 2112) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) )
                      {
                        v26 = (std::string *)32;
                        __asan_report_store_n(v2 + 2112, 32LL);
                      }
                      std::operator+<char>((std::string *)(v2 + 2112), v26, "_");
                      if ( *(char *)(((v2 + 2240) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 2271) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2271) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 2240, 32LL);
                      }
                      std::operator+<char>(
                        (std::string *)(v2 + 2240),
                        (std::string *)(v2 + 2112),
                        (std::string *)(v2 + 2176));
                      JsonConfigMgr::addAbilityString(this, (const std::string *)(v2 + 2240));
                      std::string::~string((void *)(v2 + 2240));
                      *(_DWORD *)(((v2 + 2240) >> 3) + 0x7FFF8000) = -117901064;
                      std::string::~string((void *)(v2 + 2112));
                      *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = -117901064;
                      std::string::~string((void *)(v2 + 2176));
                      *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = -117901064;
                    }
                  }
                  else
                  {
                    *(_WORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_WORD *)(((v2 + 704) >> 3) + 0x7FFF8000) )
                      __asan_report_store16();
                    std::dynamic_pointer_cast<data::SetCrashDamage,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 704));
                    if ( std::operator!=<data::SetCrashDamage>(
                           (const std::shared_ptr<data::SetCrashDamage> *)(v2 + 704),
                           0LL) )
                    {
                      v27 = &std::__shared_ptr_access<data::SetCrashDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetCrashDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704))->key;
                      JsonConfigMgr::addAbilityString(this, v27);
                      for ( i_1 = 0; ; ++i_1 )
                      {
                        if ( *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) != 0
                          && *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3) + 0x7FFF8000) <= 3 )
                        {
                          __asan_report_load4(&this->ability_define_);
                        }
                        if ( i_1 >= this->ability_define_.ABILITY_SET_GLOBAL_POS_NUM )
                          break;
                        *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = 0;
                        *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 2368) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 2368, 32LL);
                        }
                        std::to_string((std::string *)(v2 + 2368), i_1);
                        *(_DWORD *)(((v2 + 2304) >> 3) + 0x7FFF8000) = 0;
                        v28 = &std::__shared_ptr_access<data::SetCrashDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetCrashDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 704))->key;
                        if ( *(char *)(((v2 + 2304) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 2335) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 2335) >> 3) + 0x7FFF8000) )
                        {
                          v28 = (std::string *)32;
                          __asan_report_store_n(v2 + 2304, 32LL);
                        }
                        std::operator+<char>((std::string *)(v2 + 2304), v28, "_");
                        if ( *(char *)(((v2 + 2432) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 2463) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2463) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 2432, 32LL);
                        }
                        std::operator+<char>(
                          (std::string *)(v2 + 2432),
                          (std::string *)(v2 + 2304),
                          (std::string *)(v2 + 2368));
                        JsonConfigMgr::addAbilityString(this, (const std::string *)(v2 + 2432));
                        std::string::~string((void *)(v2 + 2432));
                        *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = -117901064;
                        std::string::~string((void *)(v2 + 2304));
                        *(_DWORD *)(((v2 + 2304) >> 3) + 0x7FFF8000) = -117901064;
                        std::string::~string((void *)(v2 + 2368));
                        *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = -117901064;
                      }
                    }
                    else
                    {
                      *(_WORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v2 + 736) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::dynamic_pointer_cast<data::SetGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 736));
                      if ( std::operator!=<data::SetGlobalValue>(
                             (const std::shared_ptr<data::SetGlobalValue> *)(v2 + 736),
                             0LL) )
                      {
                        v29 = &std::__shared_ptr_access<data::SetGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 736))->key;
                        JsonConfigMgr::addAbilityString(this, v29);
                      }
                      else
                      {
                        *(_WORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
                        if ( *(_WORD *)(((v2 + 768) >> 3) + 0x7FFF8000) )
                          __asan_report_store16();
                        std::dynamic_pointer_cast<data::SetGlobalValueList,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 768));
                        if ( std::operator!=<data::SetGlobalValueList>(
                               (const std::shared_ptr<data::SetGlobalValueList> *)(v2 + 768),
                               0LL) )
                        {
                          __for_range_3 = &std::__shared_ptr_access<data::SetGlobalValueList,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGlobalValueList,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 768))->global_value_list;
                          *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
                          if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
                            __asan_report_store8(v2 + 288, 0LL);
                          *(std::vector<data::GlobalValuePair>::iterator *)(v2 + 288) = std::vector<data::GlobalValuePair>::begin(__for_range_3);
                          *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
                          if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
                            __asan_report_store8(v2 + 320, 0LL);
                          *(std::vector<data::GlobalValuePair>::iterator *)(v2 + 320) = std::vector<data::GlobalValuePair>::end(__for_range_3);
                          while ( __gnu_cxx::operator!=<data::GlobalValuePair *,std::vector<data::GlobalValuePair>>(
                                    (const __gnu_cxx::__normal_iterator<data::GlobalValuePair*,std::vector<data::GlobalValuePair> > *)(v2 + 288),
                                    (const __gnu_cxx::__normal_iterator<data::GlobalValuePair*,std::vector<data::GlobalValuePair> > *)(v2 + 320)) )
                          {
                            v30 = __gnu_cxx::__normal_iterator<data::GlobalValuePair *,std::vector<data::GlobalValuePair>>::operator*((const __gnu_cxx::__normal_iterator<data::GlobalValuePair*,std::vector<data::GlobalValuePair> > *const)(v2 + 288));
                            JsonConfigMgr::addAbilityString(this, &v30->key);
                            __gnu_cxx::__normal_iterator<data::GlobalValuePair *,std::vector<data::GlobalValuePair>>::operator++((__gnu_cxx::__normal_iterator<data::GlobalValuePair*,std::vector<data::GlobalValuePair> > *const)(v2 + 288));
                          }
                          *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
                          *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
                        }
                        else
                        {
                          *(_WORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
                          if ( *(_WORD *)(((v2 + 800) >> 3) + 0x7FFF8000) )
                            __asan_report_store16();
                          std::dynamic_pointer_cast<data::MultiplyGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 800));
                          if ( std::operator!=<data::MultiplyGlobalValue>(
                                 (const std::shared_ptr<data::MultiplyGlobalValue> *)(v2 + 800),
                                 0LL) )
                          {
                            v31 = &std::__shared_ptr_access<data::MultiplyGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::MultiplyGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 800))->key;
                            JsonConfigMgr::addAbilityString(this, v31);
                          }
                          else
                          {
                            *(_WORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
                            if ( *(_WORD *)(((v2 + 832) >> 3) + 0x7FFF8000) )
                              __asan_report_store16();
                            std::dynamic_pointer_cast<data::ElementReactionShockMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 832));
                            if ( std::operator!=<data::ElementReactionShockMixin>(
                                   (const std::shared_ptr<data::ElementReactionShockMixin> *)(v2 + 832),
                                   0LL) )
                            {
                              p_camp_global_key = &std::__shared_ptr_access<data::ElementReactionShockMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ElementReactionShockMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 832))->camp_global_key;
                              JsonConfigMgr::addAbilityString(this, p_camp_global_key);
                            }
                            else
                            {
                              *(_WORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
                              if ( *(_WORD *)(((v2 + 864) >> 3) + 0x7FFF8000) )
                                __asan_report_store16();
                              std::dynamic_pointer_cast<data::ServerUpdateGlobalValueMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 864));
                              if ( std::operator!=<data::ServerUpdateGlobalValueMixin>(
                                     (const std::shared_ptr<data::ServerUpdateGlobalValueMixin> *)(v2 + 864),
                                     0LL) )
                              {
                                v33 = &std::__shared_ptr_access<data::ServerUpdateGlobalValueMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ServerUpdateGlobalValueMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 864))->key;
                                JsonConfigMgr::addAbilityString(this, v33);
                              }
                              else
                              {
                                *(_WORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
                                if ( *(_WORD *)(((v2 + 896) >> 3) + 0x7FFF8000) )
                                  __asan_report_store16();
                                std::dynamic_pointer_cast<data::AttachModifierToSelfGlobalValueMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 896));
                                if ( std::operator!=<data::AttachModifierToSelfGlobalValueMixin>(
                                       (const std::shared_ptr<data::AttachModifierToSelfGlobalValueMixin> *)(v2 + 896),
                                       0LL) )
                                {
                                  v34 = &std::__shared_ptr_access<data::AttachModifierToSelfGlobalValueMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AttachModifierToSelfGlobalValueMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 896))->global_value_key;
                                  JsonConfigMgr::addAbilityString(this, v34);
                                }
                                else
                                {
                                  *(_WORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
                                  if ( *(_WORD *)(((v2 + 928) >> 3) + 0x7FFF8000) )
                                    __asan_report_store16();
                                  std::dynamic_pointer_cast<data::GadgetUpgradeChainMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 928));
                                  if ( std::operator!=<data::GadgetUpgradeChainMixin>(
                                         (const std::shared_ptr<data::GadgetUpgradeChainMixin> *)(v2 + 928),
                                         0LL) )
                                  {
                                    v35 = &std::__shared_ptr_access<data::GadgetUpgradeChainMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GadgetUpgradeChainMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 928))->global_value_key;
                                    JsonConfigMgr::addAbilityString(this, v35);
                                  }
                                  else
                                  {
                                    *(_WORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(_WORD *)(((v2 + 960) >> 3) + 0x7FFF8000) )
                                      __asan_report_store16();
                                    std::dynamic_pointer_cast<data::ElectricCoreLineMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 960));
                                    if ( std::operator!=<data::ElectricCoreLineMixin>(
                                           (const std::shared_ptr<data::ElectricCoreLineMixin> *)(v2 + 960),
                                           0LL) )
                                    {
                                      p_activate_skill_key = &std::__shared_ptr_access<data::ElectricCoreLineMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ElectricCoreLineMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 960))->activate_skill_key;
                                      JsonConfigMgr::addAbilityString(this, p_activate_skill_key);
                                    }
                                    else
                                    {
                                      *(_WORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                                      if ( *(_WORD *)(((v2 + 992) >> 3) + 0x7FFF8000) )
                                        __asan_report_store16();
                                      std::dynamic_pointer_cast<data::GetFightProperty,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 992));
                                      if ( std::operator!=<data::GetFightProperty>(
                                             (const std::shared_ptr<data::GetFightProperty> *)(v2 + 992),
                                             0LL) )
                                      {
                                        v37 = &std::__shared_ptr_access<data::GetFightProperty,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GetFightProperty,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 992))->global_value_key;
                                        JsonConfigMgr::addAbilityString(this, v37);
                                      }
                                      else
                                      {
                                        *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) )
                                          __asan_report_store16();
                                        std::dynamic_pointer_cast<data::AttachModifierToSelfGlobalValueNoInitMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1024));
                                        if ( std::operator!=<data::AttachModifierToSelfGlobalValueNoInitMixin>(
                                               (const std::shared_ptr<data::AttachModifierToSelfGlobalValueNoInitMixin> *)(v2 + 1024),
                                               0LL) )
                                        {
                                          v38 = &std::__shared_ptr_access<data::AttachModifierToSelfGlobalValueNoInitMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AttachModifierToSelfGlobalValueNoInitMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1024))->global_value_key;
                                          JsonConfigMgr::addAbilityString(this, v38);
                                        }
                                        else
                                        {
                                          *(_WORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(_WORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) )
                                            __asan_report_store16();
                                          std::dynamic_pointer_cast<data::AttachModifierToGlobalValueMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1056));
                                          if ( std::operator!=<data::AttachModifierToGlobalValueMixin>(
                                                 (const std::shared_ptr<data::AttachModifierToGlobalValueMixin> *)(v2 + 1056),
                                                 0LL) )
                                          {
                                            v39 = &std::__shared_ptr_access<data::AttachModifierToGlobalValueMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AttachModifierToGlobalValueMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1056))->global_value_key;
                                            JsonConfigMgr::addAbilityString(this, v39);
                                          }
                                          else
                                          {
                                            *(_WORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(_WORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) )
                                              __asan_report_store16();
                                            std::dynamic_pointer_cast<data::SetTargetNumToGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1088));
                                            if ( std::operator!=<data::SetTargetNumToGlobalValue>(
                                                   (const std::shared_ptr<data::SetTargetNumToGlobalValue> *)(v2 + 1088),
                                                   0LL) )
                                            {
                                              v40 = &std::__shared_ptr_access<data::SetTargetNumToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetTargetNumToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1088))->key;
                                              JsonConfigMgr::addAbilityString(this, v40);
                                            }
                                            else
                                            {
                                              *(_WORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(_WORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) )
                                                __asan_report_store16();
                                              std::dynamic_pointer_cast<data::GetHealAmountToGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1120));
                                              if ( std::operator!=<data::GetHealAmountToGlobalValue>(
                                                     (const std::shared_ptr<data::GetHealAmountToGlobalValue> *)(v2 + 1120),
                                                     0LL) )
                                              {
                                                v41 = &std::__shared_ptr_access<data::GetHealAmountToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GetHealAmountToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1120))->key;
                                                JsonConfigMgr::addAbilityString(this, v41);
                                              }
                                              else
                                              {
                                                *(_WORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(_WORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) )
                                                  __asan_report_store16();
                                                std::dynamic_pointer_cast<data::GetHPHealedToGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1152));
                                                if ( std::operator!=<data::GetHPHealedToGlobalValue>(
                                                       (const std::shared_ptr<data::GetHPHealedToGlobalValue> *)(v2 + 1152),
                                                       0LL) )
                                                {
                                                  v42 = &std::__shared_ptr_access<data::GetHPHealedToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GetHPHealedToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1152))->key;
                                                  JsonConfigMgr::addAbilityString(this, v42);
                                                }
                                                else
                                                {
                                                  *(_WORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(_WORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) )
                                                    __asan_report_store16();
                                                  std::dynamic_pointer_cast<data::FireworksLauncherMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1184));
                                                  if ( std::operator!=<data::FireworksLauncherMixin>(
                                                         (const std::shared_ptr<data::FireworksLauncherMixin> *)(v2 + 1184),
                                                         0LL) )
                                                  {
                                                    p_gv__fw__bullet_item_id = &std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1184))->gv__fw__bullet_item_id;
                                                    JsonConfigMgr::addAbilityString(this, p_gv__fw__bullet_item_id);
                                                    p_gv__fw__color_h = &std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1184))->gv__fw__color_h;
                                                    JsonConfigMgr::addAbilityString(this, p_gv__fw__color_h);
                                                    p_gv__fw__scale = &std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1184))->gv__fw__scale;
                                                    JsonConfigMgr::addAbilityString(this, p_gv__fw__scale);
                                                    p_gv__fw__angle = &std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1184))->gv__fw__angle;
                                                    JsonConfigMgr::addAbilityString(this, p_gv__fw__angle);
                                                    p_gv__fw__max_particle_count = &std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1184))->gv__fw__max_particle_count;
                                                    JsonConfigMgr::addAbilityString(this, p_gv__fw__max_particle_count);
                                                    p_gv__fw__face_to_camera = &std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1184))->gv__fw__face_to_camera;
                                                    JsonConfigMgr::addAbilityString(this, p_gv__fw__face_to_camera);
                                                    p_gv__fw__bullet_life_time = &std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::FireworksLauncherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1184))->gv__fw__bullet_life_time;
                                                    JsonConfigMgr::addAbilityString(this, p_gv__fw__bullet_life_time);
                                                  }
                                                  else
                                                  {
                                                    *(_WORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                                                    if ( *(_WORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) )
                                                      __asan_report_store16();
                                                    std::dynamic_pointer_cast<data::MonsterLandMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1216));
                                                    if ( std::operator!=<data::MonsterLandMixin>(
                                                           (const std::shared_ptr<data::MonsterLandMixin> *)(v2 + 1216),
                                                           0LL) )
                                                    {
                                                      for ( i_2 = 0; ; ++i_2 )
                                                      {
                                                        if ( *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3)
                                                                      + 0x7FFF8000) != 0
                                                          && *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3)
                                                                      + 0x7FFF8000) <= 3 )
                                                        {
                                                          __asan_report_load4(&this->ability_define_);
                                                        }
                                                        if ( i_2 >= this->ability_define_.ABILITY_SET_GLOBAL_POS_NUM )
                                                          break;
                                                        *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = 0;
                                                        *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(char *)(((v2 + 2560) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 2591) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 2591) >> 3) + 0x7FFF8000) )
                                                        {
                                                          __asan_report_store_n(v2 + 2560, 32LL);
                                                        }
                                                        std::to_string((std::string *)(v2 + 2560), i_2);
                                                        *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = 0;
                                                        p_drop_to_pos = &std::__shared_ptr_access<data::MonsterLandMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::MonsterLandMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1216))->drop_to_pos;
                                                        if ( *(char *)(((v2 + 2496) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) )
                                                        {
                                                          p_drop_to_pos = (std::string *)32;
                                                          __asan_report_store_n(v2 + 2496, 32LL);
                                                        }
                                                        std::operator+<char>(
                                                          (std::string *)(v2 + 2496),
                                                          p_drop_to_pos,
                                                          "_");
                                                        if ( *(char *)(((v2 + 2624) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 2655) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2655) >> 3)
                                                                                               + 0x7FFF8000) )
                                                        {
                                                          __asan_report_store_n(v2 + 2624, 32LL);
                                                        }
                                                        std::operator+<char>(
                                                          (std::string *)(v2 + 2624),
                                                          (std::string *)(v2 + 2496),
                                                          (std::string *)(v2 + 2560));
                                                        JsonConfigMgr::addAbilityString(
                                                          this,
                                                          (const std::string *)(v2 + 2624));
                                                        std::string::~string((void *)(v2 + 2624));
                                                        *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = -117901064;
                                                        std::string::~string((void *)(v2 + 2496));
                                                        *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = -117901064;
                                                        std::string::~string((void *)(v2 + 2560));
                                                        *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = -117901064;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      *(_WORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                                                      if ( *(_WORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) )
                                                        __asan_report_store16();
                                                      std::dynamic_pointer_cast<data::MonsterLaunchMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1248));
                                                      if ( std::operator!=<data::MonsterLaunchMixin>(
                                                             (const std::shared_ptr<data::MonsterLaunchMixin> *)(v2 + 1248),
                                                             0LL) )
                                                      {
                                                        for ( i_3 = 0; ; ++i_3 )
                                                        {
                                                          if ( *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3)
                                                                        + 0x7FFF8000) != 0
                                                            && *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3)
                                                                        + 0x7FFF8000) <= 3 )
                                                          {
                                                            __asan_report_load4(&this->ability_define_);
                                                          }
                                                          if ( i_3 >= this->ability_define_.ABILITY_SET_GLOBAL_POS_NUM )
                                                            break;
                                                          *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = 0;
                                                          *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = 0;
                                                          if ( *(char *)(((v2 + 2752) >> 3) + 0x7FFF8000) < 0
                                                            || *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) != 0
                                                            && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) )
                                                          {
                                                            __asan_report_store_n(v2 + 2752, 32LL);
                                                          }
                                                          std::to_string((std::string *)(v2 + 2752), i_3);
                                                          *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = 0;
                                                          p_launch_to_pos = &std::__shared_ptr_access<data::MonsterLaunchMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::MonsterLaunchMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1248))->launch_to_pos;
                                                          if ( *(char *)(((v2 + 2688) >> 3) + 0x7FFF8000) < 0
                                                            || *(_BYTE *)(((v2 + 2719) >> 3) + 0x7FFF8000) != 0
                                                            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2719) >> 3)
                                                                                                 + 0x7FFF8000) )
                                                          {
                                                            p_launch_to_pos = (std::string *)32;
                                                            __asan_report_store_n(v2 + 2688, 32LL);
                                                          }
                                                          std::operator+<char>(
                                                            (std::string *)(v2 + 2688),
                                                            p_launch_to_pos,
                                                            "_");
                                                          if ( *(char *)(((v2 + 2816) >> 3) + 0x7FFF8000) < 0
                                                            || *(_BYTE *)(((v2 + 2847) >> 3) + 0x7FFF8000) != 0
                                                            && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 2847) >> 3) + 0x7FFF8000) )
                                                          {
                                                            __asan_report_store_n(v2 + 2816, 32LL);
                                                          }
                                                          std::operator+<char>(
                                                            (std::string *)(v2 + 2816),
                                                            (std::string *)(v2 + 2688),
                                                            (std::string *)(v2 + 2752));
                                                          JsonConfigMgr::addAbilityString(
                                                            this,
                                                            (const std::string *)(v2 + 2816));
                                                          std::string::~string((void *)(v2 + 2816));
                                                          *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = -117901064;
                                                          std::string::~string((void *)(v2 + 2688));
                                                          *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = -117901064;
                                                          std::string::~string((void *)(v2 + 2752));
                                                          *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = -117901064;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(_WORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(_WORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) )
                                                          __asan_report_store16();
                                                        std::dynamic_pointer_cast<data::AddLogicStateValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1280));
                                                        if ( std::operator!=<data::AddLogicStateValue>(
                                                               (const std::shared_ptr<data::AddLogicStateValue> *)(v2 + 1280),
                                                               0LL) )
                                                        {
                                                          p_logic_state_name = &std::__shared_ptr_access<data::AddLogicStateValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AddLogicStateValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1280))->logic_state_name;
                                                          JsonConfigMgr::addAbilityString(this, p_logic_state_name);
                                                        }
                                                        else
                                                        {
                                                          *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
                                                          if ( *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) )
                                                            __asan_report_store16();
                                                          std::dynamic_pointer_cast<data::SetLogicStateValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1312));
                                                          if ( std::operator!=<data::SetLogicStateValue>(
                                                                 (const std::shared_ptr<data::SetLogicStateValue> *)(v2 + 1312),
                                                                 0LL) )
                                                          {
                                                            v53 = &std::__shared_ptr_access<data::SetLogicStateValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetLogicStateValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1312))->logic_state_name;
                                                            JsonConfigMgr::addAbilityString(this, v53);
                                                          }
                                                          else
                                                          {
                                                            *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
                                                            if ( *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) )
                                                              __asan_report_store16();
                                                            std::dynamic_pointer_cast<data::DamageStatisticsMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1344));
                                                            if ( std::operator!=<data::DamageStatisticsMixin>(
                                                                   (const std::shared_ptr<data::DamageStatisticsMixin> *)(v2 + 1344),
                                                                   0LL) )
                                                            {
                                                              p_damage_element_type_key = &std::__shared_ptr_access<data::DamageStatisticsMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DamageStatisticsMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1344))->damage_element_type_key;
                                                              JsonConfigMgr::addAbilityString(
                                                                this,
                                                                p_damage_element_type_key);
                                                              p_damage_amount_key = &std::__shared_ptr_access<data::DamageStatisticsMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DamageStatisticsMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1344))->damage_amount_key;
                                                              JsonConfigMgr::addAbilityString(this, p_damage_amount_key);
                                                            }
                                                            else
                                                            {
                                                              *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
                                                              if ( *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) )
                                                                __asan_report_store16();
                                                              std::dynamic_pointer_cast<data::ShootFromCameraMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1376));
                                                              if ( std::operator!=<data::ShootFromCameraMixin>(
                                                                     (const std::shared_ptr<data::ShootFromCameraMixin> *)(v2 + 1376),
                                                                     0LL) )
                                                              {
                                                                for ( i_4 = 0; ; ++i_4 )
                                                                {
                                                                  if ( *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3)
                                                                                + 0x7FFF8000) != 0
                                                                    && *(_BYTE *)(((unsigned __int64)&this->ability_define_ >> 3)
                                                                                + 0x7FFF8000) <= 3 )
                                                                  {
                                                                    __asan_report_load4(&this->ability_define_);
                                                                  }
                                                                  if ( i_4 >= this->ability_define_.ABILITY_SET_GLOBAL_POS_NUM )
                                                                    break;
                                                                  *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = 0;
                                                                  *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = 0;
                                                                  if ( *(char *)(((v2 + 2944) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 2975) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2975) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    __asan_report_store_n(v2 + 2944, 32LL);
                                                                  }
                                                                  std::to_string((std::string *)(v2 + 2944), i_4);
                                                                  *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = 0;
                                                                  p_gv_bullet_init_pos = &std::__shared_ptr_access<data::ShootFromCameraMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ShootFromCameraMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1376))->gv_bullet_init_pos;
                                                                  if ( *(char *)(((v2 + 2880) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 2911) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2911) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    p_gv_bullet_init_pos = (std::string *)32;
                                                                    __asan_report_store_n(v2 + 2880, 32LL);
                                                                  }
                                                                  std::operator+<char>(
                                                                    (std::string *)(v2 + 2880),
                                                                    p_gv_bullet_init_pos,
                                                                    "_");
                                                                  if ( *(char *)(((v2 + 3008) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 3039) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 3039) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    __asan_report_store_n(v2 + 3008, 32LL);
                                                                  }
                                                                  std::operator+<char>(
                                                                    (std::string *)(v2 + 3008),
                                                                    (std::string *)(v2 + 2880),
                                                                    (std::string *)(v2 + 2944));
                                                                  JsonConfigMgr::addAbilityString(
                                                                    this,
                                                                    (const std::string *)(v2 + 3008));
                                                                  std::string::~string((void *)(v2 + 3008));
                                                                  *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::string::~string((void *)(v2 + 2880));
                                                                  *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::string::~string((void *)(v2 + 2944));
                                                                  *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = -117901064;
                                                                  *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = 0;
                                                                  *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = 0;
                                                                  if ( *(char *)(((v2 + 3136) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 3167) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 3167) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    __asan_report_store_n(v2 + 3136, 32LL);
                                                                  }
                                                                  std::to_string((std::string *)(v2 + 3136), i_4);
                                                                  *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = 0;
                                                                  p_gv_bullet_forward = &std::__shared_ptr_access<data::ShootFromCameraMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ShootFromCameraMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1376))->gv_bullet_forward;
                                                                  if ( *(char *)(((v2 + 3072) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 3103) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 3103) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    p_gv_bullet_forward = (std::string *)32;
                                                                    __asan_report_store_n(v2 + 3072, 32LL);
                                                                  }
                                                                  std::operator+<char>(
                                                                    (std::string *)(v2 + 3072),
                                                                    p_gv_bullet_forward,
                                                                    "_");
                                                                  if ( *(char *)(((v2 + 3200) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    __asan_report_store_n(v2 + 3200, 32LL);
                                                                  }
                                                                  std::operator+<char>(
                                                                    (std::string *)(v2 + 3200),
                                                                    (std::string *)(v2 + 3072),
                                                                    (std::string *)(v2 + 3136));
                                                                  JsonConfigMgr::addAbilityString(
                                                                    this,
                                                                    (const std::string *)(v2 + 3200));
                                                                  std::string::~string((void *)(v2 + 3200));
                                                                  *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::string::~string((void *)(v2 + 3072));
                                                                  *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::string::~string((void *)(v2 + 3136));
                                                                  *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = -117901064;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                                                                if ( *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) )
                                                                  __asan_report_store16();
                                                                std::dynamic_pointer_cast<data::BroadcastGVMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1408));
                                                                if ( std::operator!=<data::BroadcastGVMixin>(
                                                                       (const std::shared_ptr<data::BroadcastGVMixin> *)(v2 + 1408),
                                                                       0LL) )
                                                                {
                                                                  p_sgv_idkey = &std::__shared_ptr_access<data::BroadcastGVMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::BroadcastGVMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1408))->sgv_idkey;
                                                                  JsonConfigMgr::addAbilityString(this, p_sgv_idkey);
                                                                  p_broadcast_gvkey = &std::__shared_ptr_access<data::BroadcastGVMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::BroadcastGVMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1408))->broadcast_gvkey;
                                                                  JsonConfigMgr::addAbilityString(
                                                                    this,
                                                                    p_broadcast_gvkey);
                                                                }
                                                                else
                                                                {
                                                                  *(_WORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
                                                                  if ( *(_WORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) )
                                                                    __asan_report_store16();
                                                                  std::dynamic_pointer_cast<data::ReceiveGVMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1440));
                                                                  if ( std::operator!=<data::ReceiveGVMixin>(
                                                                         (const std::shared_ptr<data::ReceiveGVMixin> *)(v2 + 1440),
                                                                         0LL) )
                                                                  {
                                                                    v60 = &std::__shared_ptr_access<data::ReceiveGVMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ReceiveGVMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1440))->sgv_idkey;
                                                                    JsonConfigMgr::addAbilityString(this, v60);
                                                                    v61 = &std::__shared_ptr_access<data::ReceiveGVMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ReceiveGVMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1440))->broadcast_gvkey;
                                                                    JsonConfigMgr::addAbilityString(this, v61);
                                                                    p_gv_key = &std::__shared_ptr_access<data::ReceiveGVMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ReceiveGVMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1440))->gv_key;
                                                                    JsonConfigMgr::addAbilityString(this, p_gv_key);
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_WORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(_WORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) )
                                                                      __asan_report_store16();
                                                                    std::dynamic_pointer_cast<data::MapGVToAnimationClipTimeMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1472));
                                                                    if ( std::operator!=<data::MapGVToAnimationClipTimeMixin>(
                                                                           (const std::shared_ptr<data::MapGVToAnimationClipTimeMixin> *)(v2 + 1472),
                                                                           0LL) )
                                                                    {
                                                                      v63 = &std::__shared_ptr_access<data::MapGVToAnimationClipTimeMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::MapGVToAnimationClipTimeMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1472))->gv_key;
                                                                      JsonConfigMgr::addAbilityString(this, v63);
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_WORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = 0;
                                                                      if ( *(_WORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) )
                                                                        __asan_report_store16();
                                                                      std::dynamic_pointer_cast<data::MapGVToEffectParticleSystemTimeMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1504));
                                                                      if ( std::operator!=<data::MapGVToEffectParticleSystemTimeMixin>(
                                                                             (const std::shared_ptr<data::MapGVToEffectParticleSystemTimeMixin> *)(v2 + 1504),
                                                                             0LL) )
                                                                      {
                                                                        v64 = &std::__shared_ptr_access<data::MapGVToEffectParticleSystemTimeMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::MapGVToEffectParticleSystemTimeMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1504))->gv_key;
                                                                        JsonConfigMgr::addAbilityString(this, v64);
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_WORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                                                                        if ( *(_WORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) )
                                                                          __asan_report_store16();
                                                                        std::dynamic_pointer_cast<data::SetGVToShaderParamMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1536));
                                                                        if ( std::operator!=<data::SetGVToShaderParamMixin>(
                                                                               (const std::shared_ptr<data::SetGVToShaderParamMixin> *)(v2 + 1536),
                                                                               0LL) )
                                                                        {
                                                                          v65 = &std::__shared_ptr_access<data::SetGVToShaderParamMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGVToShaderParamMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1536))->gv_key;
                                                                          JsonConfigMgr::addAbilityString(this, v65);
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_WORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
                                                                          if ( *(_WORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) )
                                                                            __asan_report_store16();
                                                                          std::dynamic_pointer_cast<data::SetGalleryInfoToGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1568));
                                                                          if ( std::operator!=<data::SetGalleryInfoToGlobalValue>(
                                                                                 (const std::shared_ptr<data::SetGalleryInfoToGlobalValue> *)(v2 + 1568),
                                                                                 0LL) )
                                                                          {
                                                                            v66 = &std::__shared_ptr_access<data::SetGalleryInfoToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetGalleryInfoToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1568))->global_value_key;
                                                                            JsonConfigMgr::addAbilityString(this, v66);
                                                                          }
                                                                          else
                                                                          {
                                                                            *(_WORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
                                                                            if ( *(_WORD *)(((v2 + 1600) >> 3)
                                                                                          + 0x7FFF8000) )
                                                                              __asan_report_store16();
                                                                            std::dynamic_pointer_cast<data::GetStrafeStaminaToGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1600));
                                                                            if ( std::operator!=<data::GetStrafeStaminaToGlobalValue>(
                                                                                   (const std::shared_ptr<data::GetStrafeStaminaToGlobalValue> *)(v2 + 1600),
                                                                                   0LL) )
                                                                            {
                                                                              v67 = &std::__shared_ptr_access<data::GetStrafeStaminaToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GetStrafeStaminaToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1600))->key;
                                                                              JsonConfigMgr::addAbilityString(this, v67);
                                                                            }
                                                                            else
                                                                            {
                                                                              *(_WORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = 0;
                                                                              if ( *(_WORD *)(((v2 + 1632) >> 3)
                                                                                            + 0x7FFF8000) )
                                                                                __asan_report_store16();
                                                                              std::dynamic_pointer_cast<data::SetNearestPosIndexToGlobalValue,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1632));
                                                                              if ( std::operator!=<data::SetNearestPosIndexToGlobalValue>(
                                                                                     (const std::shared_ptr<data::SetNearestPosIndexToGlobalValue> *)(v2 + 1632),
                                                                                     0LL) )
                                                                              {
                                                                                v68 = &std::__shared_ptr_access<data::SetNearestPosIndexToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SetNearestPosIndexToGlobalValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1632))->global_value_key;
                                                                                JsonConfigMgr::addAbilityString(
                                                                                  this,
                                                                                  v68);
                                                                              }
                                                                              else
                                                                              {
                                                                                *(_WORD *)(((v2 + 1664) >> 3)
                                                                                         + 0x7FFF8000) = 0;
                                                                                if ( *(_WORD *)(((v2 + 1664) >> 3)
                                                                                              + 0x7FFF8000) )
                                                                                  __asan_report_store16();
                                                                                std::dynamic_pointer_cast<data::ActivityBreakoutBossMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1664));
                                                                                if ( std::operator!=<data::ActivityBreakoutBossMixin>(
                                                                                       (const std::shared_ptr<data::ActivityBreakoutBossMixin> *)(v2 + 1664),
                                                                                       0LL) )
                                                                                {
                                                                                  p_hp_key = &std::__shared_ptr_access<data::ActivityBreakoutBossMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ActivityBreakoutBossMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1664))->hp_key;
                                                                                  JsonConfigMgr::addAbilityString(
                                                                                    this,
                                                                                    p_hp_key);
                                                                                  p_state_key = &std::__shared_ptr_access<data::ActivityBreakoutBossMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ActivityBreakoutBossMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1664))->state_key;
                                                                                  JsonConfigMgr::addAbilityString(
                                                                                    this,
                                                                                    p_state_key);
                                                                                  p_damage_key = &std::__shared_ptr_access<data::ActivityBreakoutBossMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ActivityBreakoutBossMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1664))->damage_key;
                                                                                  JsonConfigMgr::addAbilityString(
                                                                                    this,
                                                                                    p_damage_key);
                                                                                }
                                                                                else
                                                                                {
                                                                                  *(_WORD *)(((v2 + 1696) >> 3)
                                                                                           + 0x7FFF8000) = 0;
                                                                                  if ( *(_WORD *)(((v2 + 1696) >> 3)
                                                                                                + 0x7FFF8000) )
                                                                                    __asan_report_store16();
                                                                                  std::dynamic_pointer_cast<data::ActivityBreakoutTeleport,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v2 + 1696));
                                                                                  if ( std::operator!=<data::ActivityBreakoutTeleport>(
                                                                                         (const std::shared_ptr<data::ActivityBreakoutTeleport> *)(v2 + 1696),
                                                                                         0LL) )
                                                                                  {
                                                                                    v72 = &std::__shared_ptr_access<data::ActivityBreakoutTeleport,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ActivityBreakoutTeleport,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 1696))->global_value_key;
                                                                                    JsonConfigMgr::addAbilityString(
                                                                                      this,
                                                                                      v72);
                                                                                  }
                                                                                  std::shared_ptr<data::ActivityBreakoutTeleport>::~shared_ptr((std::shared_ptr<data::ActivityBreakoutTeleport> *const)(v2 + 1696));
                                                                                }
                                                                                std::shared_ptr<data::ActivityBreakoutBossMixin>::~shared_ptr((std::shared_ptr<data::ActivityBreakoutBossMixin> *const)(v2 + 1664));
                                                                              }
                                                                              std::shared_ptr<data::SetNearestPosIndexToGlobalValue>::~shared_ptr((std::shared_ptr<data::SetNearestPosIndexToGlobalValue> *const)(v2 + 1632));
                                                                            }
                                                                            std::shared_ptr<data::GetStrafeStaminaToGlobalValue>::~shared_ptr((std::shared_ptr<data::GetStrafeStaminaToGlobalValue> *const)(v2 + 1600));
                                                                          }
                                                                          std::shared_ptr<data::SetGalleryInfoToGlobalValue>::~shared_ptr((std::shared_ptr<data::SetGalleryInfoToGlobalValue> *const)(v2 + 1568));
                                                                        }
                                                                        std::shared_ptr<data::SetGVToShaderParamMixin>::~shared_ptr((std::shared_ptr<data::SetGVToShaderParamMixin> *const)(v2 + 1536));
                                                                      }
                                                                      std::shared_ptr<data::MapGVToEffectParticleSystemTimeMixin>::~shared_ptr((std::shared_ptr<data::MapGVToEffectParticleSystemTimeMixin> *const)(v2 + 1504));
                                                                    }
                                                                    std::shared_ptr<data::MapGVToAnimationClipTimeMixin>::~shared_ptr((std::shared_ptr<data::MapGVToAnimationClipTimeMixin> *const)(v2 + 1472));
                                                                  }
                                                                  std::shared_ptr<data::ReceiveGVMixin>::~shared_ptr((std::shared_ptr<data::ReceiveGVMixin> *const)(v2 + 1440));
                                                                }
                                                                std::shared_ptr<data::BroadcastGVMixin>::~shared_ptr((std::shared_ptr<data::BroadcastGVMixin> *const)(v2 + 1408));
                                                              }
                                                              std::shared_ptr<data::ShootFromCameraMixin>::~shared_ptr((std::shared_ptr<data::ShootFromCameraMixin> *const)(v2 + 1376));
                                                            }
                                                            std::shared_ptr<data::DamageStatisticsMixin>::~shared_ptr((std::shared_ptr<data::DamageStatisticsMixin> *const)(v2 + 1344));
                                                          }
                                                          std::shared_ptr<data::SetLogicStateValue>::~shared_ptr((std::shared_ptr<data::SetLogicStateValue> *const)(v2 + 1312));
                                                        }
                                                        std::shared_ptr<data::AddLogicStateValue>::~shared_ptr((std::shared_ptr<data::AddLogicStateValue> *const)(v2 + 1280));
                                                      }
                                                      std::shared_ptr<data::MonsterLaunchMixin>::~shared_ptr((std::shared_ptr<data::MonsterLaunchMixin> *const)(v2 + 1248));
                                                    }
                                                    std::shared_ptr<data::MonsterLandMixin>::~shared_ptr((std::shared_ptr<data::MonsterLandMixin> *const)(v2 + 1216));
                                                  }
                                                  std::shared_ptr<data::FireworksLauncherMixin>::~shared_ptr((std::shared_ptr<data::FireworksLauncherMixin> *const)(v2 + 1184));
                                                }
                                                std::shared_ptr<data::GetHPHealedToGlobalValue>::~shared_ptr((std::shared_ptr<data::GetHPHealedToGlobalValue> *const)(v2 + 1152));
                                              }
                                              std::shared_ptr<data::GetHealAmountToGlobalValue>::~shared_ptr((std::shared_ptr<data::GetHealAmountToGlobalValue> *const)(v2 + 1120));
                                            }
                                            std::shared_ptr<data::SetTargetNumToGlobalValue>::~shared_ptr((std::shared_ptr<data::SetTargetNumToGlobalValue> *const)(v2 + 1088));
                                          }
                                          std::shared_ptr<data::AttachModifierToGlobalValueMixin>::~shared_ptr((std::shared_ptr<data::AttachModifierToGlobalValueMixin> *const)(v2 + 1056));
                                        }
                                        std::shared_ptr<data::AttachModifierToSelfGlobalValueNoInitMixin>::~shared_ptr((std::shared_ptr<data::AttachModifierToSelfGlobalValueNoInitMixin> *const)(v2 + 1024));
                                      }
                                      std::shared_ptr<data::GetFightProperty>::~shared_ptr((std::shared_ptr<data::GetFightProperty> *const)(v2 + 992));
                                    }
                                    std::shared_ptr<data::ElectricCoreLineMixin>::~shared_ptr((std::shared_ptr<data::ElectricCoreLineMixin> *const)(v2 + 960));
                                  }
                                  std::shared_ptr<data::GadgetUpgradeChainMixin>::~shared_ptr((std::shared_ptr<data::GadgetUpgradeChainMixin> *const)(v2 + 928));
                                }
                                std::shared_ptr<data::AttachModifierToSelfGlobalValueMixin>::~shared_ptr((std::shared_ptr<data::AttachModifierToSelfGlobalValueMixin> *const)(v2 + 896));
                              }
                              std::shared_ptr<data::ServerUpdateGlobalValueMixin>::~shared_ptr((std::shared_ptr<data::ServerUpdateGlobalValueMixin> *const)(v2 + 864));
                            }
                            std::shared_ptr<data::ElementReactionShockMixin>::~shared_ptr((std::shared_ptr<data::ElementReactionShockMixin> *const)(v2 + 832));
                          }
                          std::shared_ptr<data::MultiplyGlobalValue>::~shared_ptr((std::shared_ptr<data::MultiplyGlobalValue> *const)(v2 + 800));
                        }
                        std::shared_ptr<data::SetGlobalValueList>::~shared_ptr((std::shared_ptr<data::SetGlobalValueList> *const)(v2 + 768));
                      }
                      std::shared_ptr<data::SetGlobalValue>::~shared_ptr((std::shared_ptr<data::SetGlobalValue> *const)(v2 + 736));
                    }
                    std::shared_ptr<data::SetCrashDamage>::~shared_ptr((std::shared_ptr<data::SetCrashDamage> *const)(v2 + 704));
                  }
                  std::shared_ptr<data::SetGlobalDir>::~shared_ptr((std::shared_ptr<data::SetGlobalDir> *const)(v2 + 672));
                }
                std::shared_ptr<data::SetGlobalPos>::~shared_ptr((std::shared_ptr<data::SetGlobalPos> *const)(v2 + 640));
              }
              std::shared_ptr<data::ClearGlobalValue>::~shared_ptr((std::shared_ptr<data::ClearGlobalValue> *const)(v2 + 608));
            }
            std::shared_ptr<data::SetGlobalValueByTargetDistance>::~shared_ptr((std::shared_ptr<data::SetGlobalValueByTargetDistance> *const)(v2 + 576));
          }
          std::shared_ptr<data::SetOverrideMapValue>::~shared_ptr((std::shared_ptr<data::SetOverrideMapValue> *const)(v2 + 544));
        }
        std::shared_ptr<data::SetRandomOverrideMapValue>::~shared_ptr((std::shared_ptr<data::SetRandomOverrideMapValue> *const)(v2 + 512));
      }
      std::shared_ptr<data::SetGlobalValueToOverrideMap>::~shared_ptr((std::shared_ptr<data::SetGlobalValueToOverrideMap> *const)(v2 + 480));
    }
    std::shared_ptr<data::AddGlobalValue>::~shared_ptr((std::shared_ptr<data::AddGlobalValue> *const)(v2 + 448));
    std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)(v2 + 416));
    std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr((std::shared_ptr<data::ConfigAbilityAction> *const)(v2 + 384));
    std::shared_ptr<data::BaseActionContainer>::~shared_ptr((std::shared_ptr<data::BaseActionContainer> *const)(v2 + 352));
    *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -1800;
    *(_WORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -1800;
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer> *,std::vector<std::shared_ptr<data::BaseActionContainer>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::BaseActionContainer>*,std::vector<std::shared_ptr<data::BaseActionContainer>> > *const)(v2 + 224));
  }
  *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -1800;
  *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
  std::vector<std::shared_ptr<data::BaseActionContainer>>::~vector((std::vector<std::shared_ptr<data::BaseActionContainer>> *const)(v2 + 1728));
  if ( v93 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8190) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 408) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 3264LL, v93);
  }
};

// Line 5434: range 000000000F2A73D4-000000000F2A741D
void __cdecl JsonConfigMgr::parseAbilityStringToHash(data::ConfigAbility &)::{lambda(std::any &)#1}::operator()(
        const JsonConfigMgr::parseAbilityStringToHash::<lambda(std::any&)> *const __closure,
        std::any *member)
{
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  JsonConfigMgr::checkAndParsePredicateStringToHash(__closure->__this, member);
};

// Line 5442: range 000000000F2A741E-000000000F2A7467
void __cdecl JsonConfigMgr::parseAbilityStringToHash(data::ConfigAbility &)::{lambda(std::any &)#2}::operator()(
        const JsonConfigMgr::parseAbilityStringToHash::<lambda(std::any&)> *const __closure,
        std::any *member)
{
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  JsonConfigMgr::checkAndParsePredicateStringToHash(__closure->__this, member);
};

// Line 5751: range 000000000F2ACF1C-000000000F2AD4F9
void __cdecl JsonConfigMgr::parseMiscAbilityStringToHash(JsonConfigMgr *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  const char *v4; // rax
  const std::string *p_PREFFIX_OVERLOAD_RATE; // rsi
  int32_t index; // [rsp+1Ch] [rbp-1B4h]
  char v7[432]; // [rsp+20h] [rbp-1B0h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(384LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "6 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 32"
                        "0 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = JsonConfigMgr::parseMiscAbilityStringToHash;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -218959118;
  v3[536862725] = -218959118;
  v3[536862727] = -218959118;
  v3[536862729] = -218959118;
  v3[536862731] = -202116109;
  std::function<void ()(std::any &)>::function<JsonConfigMgr::parseMiscAbilityStringToHash(void)::{lambda(std::any &)#1},void,void>(
    (std::function<void(std::any&)> *const)(v1 + 64),
    (JsonConfigMgr::parseMiscAbilityStringToHash::<lambda(std::any&)>)this);
  data::ElementDefine::foreachMember(&this->element_define_, (std::function<void(std::any&)> *)(v1 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  for ( index = 1; index <= 11; ++index )
  {
    *(_DWORD *)(((v1 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v1 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v1 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v1 + 48);
    v4 = data::enumValToStr((data::ElementReactionType)index);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v1 + 192),
      v4,
      (const std::allocator<char> *)(v1 + 48));
    if ( *(char *)(((v1 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v1 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v1 + 31) & 7) >= *(_BYTE *)(((v1 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v1 + 256, 32LL);
    }
    common::tools::StringUtils::toUpper((std::string *)(v1 + 256), (const std::string *)(v1 + 192));
    *(_DWORD *)(((v1 + 128) >> 3) + 0x7FFF8000) = 0;
    p_PREFFIX_OVERLOAD_RATE = &this->element_define_.PREFFIX_OVERLOAD_RATE;
    if ( *(char *)(((v1 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v1 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v1 - 97) & 7) >= *(_BYTE *)(((v1 + 159) >> 3) + 0x7FFF8000) )
    {
      p_PREFFIX_OVERLOAD_RATE = (const std::string *)32;
      __asan_report_store_n(v1 + 128, 32LL);
    }
    std::operator+<char>((std::string *)(v1 + 128), p_PREFFIX_OVERLOAD_RATE, "_");
    if ( *(char *)(((v1 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v1 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v1 + 320, 32LL);
    }
    std::operator+<char>((std::string *)(v1 + 320), (std::string *)(v1 + 128), (std::string *)(v1 + 256));
    JsonConfigMgr::addAbilityString(this, (const std::string *)(v1 + 320));
    std::string::~string((void *)(v1 + 320));
    *(_DWORD *)(((v1 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v1 + 128));
    *(_DWORD *)(((v1 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v1 + 256));
    *(_DWORD *)(((v1 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v1 + 192));
    *(_DWORD *)(((v1 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v1 + 48);
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  }
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5752: range 000000000F2AC58A-000000000F2ACF1A
void __cdecl JsonConfigMgr::parseMiscAbilityStringToHash(void)::{lambda(std::any &)#1}::operator()(
        const JsonConfigMgr::parseMiscAbilityStringToHash::<lambda(std::any&)> *const __closure,
        std::any *member)
{
  std::string *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::type_info *v5; // rax
  JsonConfigMgr *this; // r14
  const std::string *p_SUFFIX_REACTION_DAMAGE; // r15
  JsonConfigMgr *v8; // r14
  const std::string *p_SUFFIX_ELEMENT_STRENGTH; // r15
  JsonConfigMgr *v10; // r14
  JsonConfigMgr *v11; // rsi
  JsonConfigMgr *v12; // r14
  JsonConfigMgr *v13; // rsi
  char v14[528]; // [rsp+20h] [rbp-210h] BYREF

  v2 = (std::string *)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = (std::string *)v3;
  }
  v2->_M_dataplus._M_p = (std::string::pointer)1102416563;
  v2->_M_string_length = (std::string::size_type)"7 32 32 17 ability_name:5758 96 32 9 <unknown> 160 32 9 <unknown> 224 3"
                                                 "2 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  v2->_anon_0._M_allocated_capacity = (std::string::size_type)JsonConfigMgr::parseMiscAbilityStringToHash(void)::{lambda(std::any &)#1}::operator();
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  v5 = std::any::type(member);
  if ( !std::type_info::operator!=(v5, (const std::type_info *)&`typeinfo for'std::string) )
  {
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1]._anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1]._anon_0._M_allocated_capacity
                                                             + 15) >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    std::any_cast<std::string>(v2 + 1, member);
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    JsonConfigMgr::addAbilityString(__closure->__this, v2 + 1);
    if ( !std::string::find(&v2[1], "ElementAbility_", 0LL) )
    {
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      this = __closure->__this;
      p_SUFFIX_REACTION_DAMAGE = &__closure->__this->element_define_.SUFFIX_REACTION_DAMAGE;
      if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[3]._anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3]._anon_0._M_allocated_capacity + 15) >> 3)
                                                         + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[3], 32LL);
      }
      std::operator+<char>(v2 + 3, v2 + 1, "_");
      if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[5]._anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5]._anon_0._M_allocated_capacity
                                                               + 15) >> 3)
                                                             + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[5], 32LL);
      }
      std::operator+<char>(v2 + 5, v2 + 3, p_SUFFIX_REACTION_DAMAGE);
      JsonConfigMgr::addAbilityString(this, v2 + 5);
      std::string::~string(&v2[5]);
      *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = -117901064;
      std::string::~string(&v2[3]);
      *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      v8 = __closure->__this;
      *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = 0;
      p_SUFFIX_ELEMENT_STRENGTH = &__closure->__this->element_define_.SUFFIX_ELEMENT_STRENGTH;
      *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[7]._anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 - 32 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[7]._anon_0._M_allocated_capacity
                                                               + 15) >> 3)
                                                             + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[7], 32LL);
      }
      std::operator+<char>(v2 + 7, v2 + 1, "_");
      if ( *(char *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[9]._anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 - 32 + 95) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[9]._anon_0._M_allocated_capacity
                                                               + 15) >> 3)
                                                             + 0x7FFF8000) )
      {
        __asan_report_store_n(&v2[9], 32LL);
      }
      std::operator+<char>(v2 + 9, v2 + 7, p_SUFFIX_ELEMENT_STRENGTH);
      JsonConfigMgr::addAbilityString(v8, v2 + 9);
      std::string::~string(&v2[9]);
      *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = -117901064;
      std::string::~string(&v2[7]);
      *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      v10 = __closure->__this;
      *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = 0;
      v11 = __closure->__this;
      if ( *(char *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[11]._anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[11]._anon_0._M_allocated_capacity + 15) >> 3)
                                                         + 0x7FFF8000) )
      {
        v11 = (JsonConfigMgr *)32;
        __asan_report_store_n(&v2[11], 32LL);
      }
      JsonConfigMgr::getAbilityReactionCriticalName(v2 + 11, v11, v2 + 1);
      JsonConfigMgr::addAbilityString(v10, v2 + 11);
      std::string::~string(&v2[11]);
      *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      v12 = __closure->__this;
      *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = 0;
      v13 = __closure->__this;
      if ( *(char *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&v2[13]._anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v2 - 96 + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[13]._anon_0._M_allocated_capacity
                                                               + 15) >> 3)
                                                             + 0x7FFF8000) )
      {
        v13 = (JsonConfigMgr *)32;
        __asan_report_store_n(&v2[13], 32LL);
      }
      JsonConfigMgr::getAbilityReactionCriticalHurtName(v2 + 13, v13, v2 + 1);
      JsonConfigMgr::addAbilityString(v12, v2 + 13);
      std::string::~string(&v2[13]);
      *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = -117901064;
    }
    std::string::~string(&v2[1]);
  }
  if ( v14 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    v2->_M_dataplus._M_p = (std::string::pointer)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 5776: range 000000000F2AD4FA-000000000F2AD725
std::string *__cdecl JsonConfigMgr::getAbilityReactionCriticalName(
        std::string *retstr,
        const JsonConfigMgr *const this,
        const std::string *ability_name)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::getAbilityReactionCriticalName;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  if ( *(char *)(((v3 + 32) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 32, 32LL);
  }
  std::operator+<char>((std::string *)(v3 + 32), ability_name, "_");
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 32LL);
  }
  std::operator+<char>(retstr, (std::string *)(v3 + 32), &this->element_define_.SUFFIX_REACTION_CRITICAL);
  std::string::~string((void *)(v3 + 32));
  if ( v8 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 5781: range 000000000F2AD726-000000000F2AD951
std::string *__cdecl JsonConfigMgr::getAbilityReactionCriticalHurtName(
        std::string *retstr,
        const JsonConfigMgr *const this,
        const std::string *ability_name)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::getAbilityReactionCriticalHurtName;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  if ( *(char *)(((v3 + 32) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 32, 32LL);
  }
  std::operator+<char>((std::string *)(v3 + 32), ability_name, "_");
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 32LL);
  }
  std::operator+<char>(retstr, (std::string *)(v3 + 32), &this->element_define_.SUFFIX_REACTION_CRITICAL_HURT);
  std::string::~string((void *)(v3 + 32));
  if ( v8 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 5786: range 000000000F2AD952-000000000F2ADBF8
std::string *__cdecl JsonConfigMgr::getAbilityNamefromElementReactionType[abi:cxx11](
        std::string *retstr,
        const JsonConfigMgr *const this,
        data::ElementReactionType reaction_type)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::getAbilityNamefromElementReactionType[abi:cxx11];
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116351;
  switch ( reaction_type )
  {
    case Explode:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_EXPLODE_NAME);
      break;
    case Burning:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_BURNING_NAME);
      break;
    case Overgrow:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_OVERGROW);
      break;
    case Shock:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_ELECTRIC_NAME);
      break;
    case Superconductor:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_SUPERCONDUCTOR_NAME);
      break;
    case SwirlFire:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_SWIRL_FIRE_NAME);
      break;
    case SwirlWater:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_SWIRL_WATER_NAME);
      break;
    case SwirlElectric:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_SWIRL_ELECTRIC_NAME);
      break;
    case SwirlIce:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_SWIRL_ICE_NAME);
      break;
    case FrozenBroken:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_FROZEN_BROKEN_NAME);
      break;
    case OvergrowMushroomFire:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_OVERGROW_MUSHROOM_FIRE);
      break;
    case OvergrowMushroomElectric:
      std::string::basic_string(retstr, &this->element_define_.ABILITY_OVERGROW_MUSHROOM_ELECTRIC);
      break;
    default:
      std::allocator<char>::allocator(v3 + 32);
      std::string::basic_string<std::allocator<char>>(retstr, byte_1A4C6700, (const std::allocator<char> *)(v3 + 32));
      std::allocator<char>::~allocator(v3 + 32);
      break;
  }
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 5821: range 000000000F2ADBFA-000000000F2AE0B0
void __cdecl JsonConfigMgr::addAbilityString(JsonConfigMgr *const this, const std::string *str)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  __int64 StringHash; // rsi
  unsigned int *v6; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true>,bool> v7; // rax
  const std::string *v8; // r8
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>,bool> v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  char v15[224]; // [rsp+10h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 9 hash:5826 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::addAbilityString;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  if ( !common::tools::MiscUtils::isContains<std::unordered_map<std::string,unsigned int>,std::string>(
          &this->ability_str_hash_map_,
          str) )
  {
    StringHash = (unsigned int)getStringHash(str);
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 48, StringHash);
    *(_DWORD *)(v2 + 48) = StringHash;
    v7 = std::unordered_map<std::string,unsigned int>::emplace<std::string const&,unsigned int &>(
           &this->ability_str_hash_map_,
           str,
           (unsigned int *)(v2 + 48),
           (const std::string *)&this->ability_str_hash_map_,
           v6);
    if ( !v7.second )
    {
      if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "addAbilityString",
        5829);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 64),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v9, (const char (*)[15])"duplicate str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, str);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
      *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((unsigned __int64)&this->ability_string_hash_retcode_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ability_string_hash_retcode_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_store4(&this->ability_string_hash_retcode_, (((_BYTE)this - 28) & 7u) + 3);
      }
      this->ability_string_hash_retcode_ = -1;
    }
    v11 = std::unordered_map<unsigned int,std::string>::emplace<unsigned int &,std::string const&>(
            &this->ability_hash_str_map_,
            (unsigned int *)(v2 + 48),
            str,
            (unsigned int *)&this->ability_hash_str_map_,
            v8);
    if ( !v11.second )
    {
      *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "addAbilityString",
        5834);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v12, (const char (*)[16])"duplicate hash:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
      *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
      if ( *(_BYTE *)(((unsigned __int64)&this->ability_string_hash_retcode_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ability_string_hash_retcode_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_store4(&this->ability_string_hash_retcode_, (((_BYTE)this - 28) & 7u) + 3);
      }
      this->ability_string_hash_retcode_ = -1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5840: range 000000000F2AE0B2-000000000F2AE0DD
bool __cdecl JsonConfigMgr::isAbilityStringExist(const JsonConfigMgr *const this, const std::string *str)
{
  return common::tools::MiscUtils::isContains<std::unordered_map<std::string,unsigned int> const,std::string>(
           &this->ability_str_hash_map_,
           str);
};

// Line 5846: range 000000000F2AE0DE-000000000F2AE402
uint32_t __cdecl JsonConfigMgr::getAbilityHashFromString(const JsonConfigMgr *const this, const std::string *str)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  uint32_t result; // eax
  std::unordered_map<std::string,unsigned int> *p_ability_str_hash_map; // rdx
  std::unordered_map<std::string,unsigned int> *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rdx
  std::__detail::_Node_const_iterator<std::pair<const std::string,unsigned int>,false,true>::pointer v10; // rax
  char v11[192]; // [rsp+10h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 7 it:5851 64 8 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::getAbilityHashFromString;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -202116109;
  if ( (unsigned __int8)std::string::empty(str) )
  {
    result = 0;
  }
  else
  {
    p_ability_str_hash_map = &this->ability_str_hash_map_;
    if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 32, str);
    *(std::unordered_map<std::string,unsigned int>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,unsigned int>::find(
                                                                                   p_ability_str_hash_map,
                                                                                   str);
    v7 = &this->ability_str_hash_map_;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, str);
    *(std::unordered_map<std::string,unsigned int>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,unsigned int>::end(v7);
    v8 = std::__detail::operator==<std::pair<std::string const,unsigned int>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> *)(v2 + 32),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> *)(v2 + 64));
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/json_config_mgr.cpp",
        "getAbilityHashFromString",
        5854);
      v9 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             (common::milog::MiLogStream *const)(v2 + 96),
             (const char (*)[39])"[HASH] can't find ability string hash:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, str);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
      result = 0;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,unsigned int>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,unsigned int>,false,true> *const)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      result = v10->second;
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5862: range 000000000F2AE404-000000000F2AE769
const std::string *__fastcall JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](
        const JsonConfigMgr *const this,
        std::string *hash)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::string *result; // rax
  std::unordered_map<unsigned int,std::string> *p_ability_hash_str_map; // rdx
  std::unordered_map<unsigned int,std::string> *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  char v10[224]; // [rsp+10h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 9 hash:5861 64 8 7 it:5868 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11];
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = (_DWORD)hash;
  if ( !(_BYTE)`guard variable for'JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)::empty_str
    && __cxa_guard_acquire(&`guard variable for'JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)::empty_str) )
  {
    std::string::basic_string(&JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)const::empty_str);
    __cxa_guard_release(&`guard variable for'JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)::empty_str);
    hash = &JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)const::empty_str;
    __cxa_atexit(
      (void (__fastcall *)(void *))&std::string::~string,
      &JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)const::empty_str,
      &_dso_handle);
  }
  if ( *(_DWORD *)(v2 + 48) )
  {
    p_ability_hash_str_map = &this->ability_hash_str_map_;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, hash);
    *(std::unordered_map<unsigned int,std::string>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::string>::find(
                                                                                   p_ability_hash_str_map,
                                                                                   (const std::unordered_map<unsigned int,std::string>::key_type *)(v2 + 48));
    v7 = &this->ability_hash_str_map_;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 48);
    *(std::unordered_map<unsigned int,std::string>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::string>::end(v7);
    v8 = std::__detail::operator==<std::pair<unsigned int const,std::string>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::string >,false> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::string >,false> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/json_config_mgr.cpp",
        "getAbilityStringFromHash",
        5871);
      v9 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
             (common::milog::MiLogStream *const)(v2 + 128),
             (const char (*)[44])"[HASH] can't find ability string from hash:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
      result = &JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)const::empty_str;
    }
    else
    {
      result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::string>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::string >,false,false> *const)(v2 + 64))->second;
    }
  }
  else
  {
    result = &JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](unsigned int)const::empty_str;
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5879: range 000000000F2AE76A-000000000F2AF094
__int64 __fastcall JsonConfigMgr::findRoomSceneEntryPos(
        JsonConfigMgr *const this,
        __int64 scene_id,
        uint32_t room_scene_id,
        unsigned __int64 pos,
        unsigned __int64 rot)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  std::unordered_map<unsigned int,SceneJsonConfig> *v9; // rax
  bool v10; // al
  unsigned int v11; // r14d
  char *v12; // rsi
  bool v13; // al
  std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v14; // rdx
  unsigned int *p_second; // rax
  unsigned int second; // ecx
  char v17; // al
  HK4EDesignConfig *Config; // rax
  uint32_t DefaultWorldMainSceneId; // edx
  char v20; // al
  uint32_t v21; // edx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  __int64 result; // rax
  std::unordered_map<unsigned int,unsigned int> *room_entry_map; // [rsp+28h] [rbp-1B8h]
  char v33[432]; // [rsp+30h] [rbp-1B0h] BYREF

  v5 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(384LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 32 4 13 point_id:5891 48 4 18 main_scene_id:5892 64 4 13 scene_id:5878 80 4 18 room_scene_id:"
                        "5878 96 8 9 iter:5880 128 8 9 <unknown> 160 8 15 point_iter:5886 192 8 9 <unknown> 224 12 9 <unk"
                        "nown> 256 12 9 <unknown> 288 16 19 jump_point_ptr:5893 320 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = JsonConfigMgr::findRoomSceneEntryPos;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -234556924;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862726] = -218959360;
  v7[536862727] = -219020288;
  v7[536862728] = -219020288;
  v7[536862729] = -219021312;
  v7[536862731] = -202116109;
  *(_DWORD *)(v5 + 64) = scene_id;
  *(_DWORD *)(v5 + 80) = room_scene_id;
  p_scene_json_config_map = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
    p_scene_json_config_map = (std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(
                                                                                    v5 + 96,
                                                                                    scene_id);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v5 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                               p_scene_json_config_map,
                                                                               (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v5 + 64));
  v9 = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
    v9 = (std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v5 + 128, v5 + 64);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v5 + 128) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v9);
  v10 = std::__detail::operator==<std::pair<unsigned int const,SceneJsonConfig>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v5 + 96),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v5 + 128));
  *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v10 )
  {
    v11 = -1;
  }
  else
  {
    room_entry_map = &std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v5 + 96))->second.room_entry_map;
    *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v5 + 160, v5 + 128);
    *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v5 + 160) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                               room_entry_map,
                                                                               (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v5 + 80));
    *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v5 + 192, v5 + 80);
    *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v5 + 192) = std::unordered_map<unsigned int,unsigned int>::end(room_entry_map);
    v12 = (char *)(v5 + 192);
    v13 = std::__detail::operator==<std::pair<unsigned int const,unsigned int>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v5 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v5 + 192));
    *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v13 )
    {
      v11 = -1;
    }
    else
    {
      *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = 4;
      v14 = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v5 + 160));
      p_second = &v14->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      second = v14->second;
      v17 = *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000);
      if ( v17 != 0 && v17 <= 3 )
      {
        LOBYTE(v12) = v17 != 0;
        __asan_report_store4(v5 + 32, v12);
      }
      *(_DWORD *)(v5 + 32) = second;
      *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 4;
      Config = JsonConfigMgr::getConfig(this);
      DefaultWorldMainSceneId = TxtConfigMgr::getDefaultWorldMainSceneId(&Config->txt_config_mgr);
      v20 = *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000);
      if ( v20 != 0 && v20 <= 3 )
      {
        LOBYTE(v12) = v20 != 0;
        __asan_report_store4(v5 + 48, v12);
      }
      *(_DWORD *)(v5 + 48) = DefaultWorldMainSceneId;
      *(_WORD *)(((v5 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v5 + 32);
      v21 = *(_DWORD *)(v5 + 48);
      if ( *(_WORD *)(((v5 + 288) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      JsonConfigMgr::findScenePoint<data::PersonalSceneJumpPoint>(
        (const JsonConfigMgr *const)(v5 + 288),
        (uint32_t)this,
        v21);
      if ( std::operator==<data::PersonalSceneJumpPoint>(
             (const std::shared_ptr<data::PersonalSceneJumpPoint> *)(v5 + 288),
             0LL) )
      {
        *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_config_mgr.cpp",
          "findRoomSceneEntryPos",
          5896);
        v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 320),
                (const char (*)[16])"findScenePoint ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v5 + 48));
        v24 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v23, (const char (*)[2])",");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v5 + 32));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])" fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
        *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
        v11 = -1;
      }
      else
      {
        *(_WORD *)(((v5 + 224) >> 3) + 0x7FFF8000) = 1024;
        v26 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 288));
        Vector3::Vector3((Vector3 *const)(v5 + 224), &v26->pos);
        if ( (char)(pos & 7) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) && *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((pos + 11) & 7) >= *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(pos, 12LL);
        }
        if ( *(char *)(((v5 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 235) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 21) & 7) >= *(_BYTE *)(((v5 + 235) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v5 + 224, 12LL);
        }
        *(_QWORD *)pos = *(_QWORD *)(v5 + 224);
        *(_DWORD *)(pos + 8) = *(_DWORD *)(v5 + 232);
        *(_WORD *)(((v5 + 224) >> 3) + 0x7FFF8000) = -1800;
        *(_WORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = 1024;
        v27 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 288));
        Vector3::Vector3((Vector3 *const)(v5 + 256), &v27->rot);
        if ( (char)(rot & 7) >= *(_BYTE *)((rot >> 3) + 0x7FFF8000) && *(_BYTE *)((rot >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((rot + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((rot + 11) & 7) >= *(_BYTE *)(((rot + 11) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(rot, 12LL);
        }
        if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 267) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 11) & 7) >= *(_BYTE *)(((v5 + 267) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v5 + 256, 12LL);
        }
        *(_QWORD *)rot = *(_QWORD *)(v5 + 256);
        *(_DWORD *)(rot + 8) = *(_DWORD *)(v5 + 264);
        *(_WORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -1800;
        v11 = 0;
      }
      std::shared_ptr<data::PersonalSceneJumpPoint>::~shared_ptr((std::shared_ptr<data::PersonalSceneJumpPoint> *const)(v5 + 288));
    }
  }
  result = v11;
  if ( v33 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5906: range 000000000F2AF096-000000000F2AF35A
__int64 __fastcall JsonConfigMgr::findRoomPositionInWorld(
        const JsonConfigMgr *const this,
        __int64 scene_id,
        unsigned __int64 position)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,Vector3> *p_room_position_in_world; // rdx
  std::unordered_map<unsigned int,Vector3> *v7; // rdx
  bool v8; // al
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,Vector3>,false,false>::pointer v10; // rdx
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 scene_id:5905 64 8 9 iter:5907 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findRoomPositionInWorld;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = scene_id;
  p_room_position_in_world = &this->room_position_in_world_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, scene_id);
  *(std::unordered_map<unsigned int,Vector3>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,Vector3>::find(
                                                                             p_room_position_in_world,
                                                                             (const std::unordered_map<unsigned int,Vector3>::key_type *)(v3 + 48));
  v7 = &this->room_position_in_world_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,Vector3>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,Vector3>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,Vector3>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,Vector3>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,Vector3>,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0xFFFFFFFFLL;
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,Vector3>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,Vector3>,false,false> *const)(v3 + 64));
    if ( (char)(position & 7) >= *(_BYTE *)((position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((position + 11) & 7) >= *(_BYTE *)(((position + 11) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(position, 12LL);
    }
    if ( (((unsigned __int8)v10 + 4) & 7) >= *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&v10->second.z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v10 + 15) & 7) >= *(_BYTE *)((((unsigned __int64)&v10->second.z + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(&v10->second, 12LL);
    }
    *(_QWORD *)position = *(_QWORD *)&v10->second.x;
    *(float *)(position + 8) = v10->second.z;
    result = 0LL;
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5918: range 000000000F2AF35C-000000000F2AF5AA
__int64 __fastcall JsonConfigMgr::findMonsterAIConfigHash(
        const JsonConfigMgr *const this,
        __int64 monster_id,
        unsigned __int64 hash_value)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,int> *p_monster_config_ai_hash_value_map; // rdx
  std::unordered_map<unsigned int,int> *v7; // rdx
  char *v8; // rsi
  bool v9; // al
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,int>,false,false>::pointer v11; // rdx
  int *p_second; // rax
  int32_t second; // ecx
  char v14; // dl
  char v16[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 15 monster_id:5917 64 8 9 iter:5919 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findMonsterAIConfigHash;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = monster_id;
  p_monster_config_ai_hash_value_map = &this->monster_config_ai_hash_value_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, monster_id);
  *(std::unordered_map<unsigned int,int>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,int>::find(
                                                                         p_monster_config_ai_hash_value_map,
                                                                         (const std::unordered_map<unsigned int,int>::key_type *)(v3 + 48));
  v7 = &this->monster_config_ai_hash_value_map_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,int>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,int>::end(v7);
  v8 = (char *)(v3 + 96);
  v9 = std::__detail::operator==<std::pair<unsigned int const,int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,int>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,int>,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    result = 0xFFFFFFFFLL;
  }
  else
  {
    v11 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,int>,false,false> *const)(v3 + 64));
    p_second = &v11->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    second = v11->second;
    v14 = *(_BYTE *)((hash_value >> 3) + 0x7FFF8000);
    if ( v14 != 0 && (char)((hash_value & 7) + 3) >= v14 )
    {
      LOBYTE(v8) = v14 != 0;
      __asan_report_store4(hash_value, v8);
    }
    *(_DWORD *)hash_value = second;
    result = 0LL;
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5931: range 000000000F2AF5AC-000000000F2AF74E
const data::ConfigAbilityGroup *__cdecl JsonConfigMgr::findAbilityGroupConfig(
        const JsonConfigMgr *const this,
        const std::string *group_name)
{
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigAbilityGroupMap *p_config_ability_group_map; // rdx
  data::ConfigAbilityGroupMap *v6; // rdx
  bool v7; // al
  const data::ConfigAbilityGroup *result; // rax
  char v9[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)"2 32 8 9 iter:5932 64 8 9 <unknown>";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)JsonConfigMgr::findAbilityGroupConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  p_config_ability_group_map = &this->config_ability_group_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], group_name);
  v2[4]._M_cur = std::unordered_map<std::string,data::ConfigAbilityGroup>::find(p_config_ability_group_map, group_name)._M_cur;
  v6 = &this->config_ability_group_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], group_name);
  v2[8]._M_cur = std::unordered_map<std::string,data::ConfigAbilityGroup>::end(v6)._M_cur;
  v7 = std::__detail::operator==<std::pair<std::string const,data::ConfigAbilityGroup>,true>(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<std::string const,data::ConfigAbilityGroup>,false,true>::operator->(v2 + 4)->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5942: range 000000000F2AF750-000000000F2B04A8
__int64 __fastcall JsonConfigMgr::checkPointInLevel1Area(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t level1_area_id,
        const Vector3 *pos)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rsi
  float x; // ecx
  char v12; // dl
  const HK4EDesignConfig *Config; // rax
  __int64 v14; // rsi
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int v17; // eax
  const std::unordered_map<unsigned int,InteriorCheckablePolygon> *p_level1_area_polygon_map; // rdx
  const std::unordered_map<unsigned int,InteriorCheckablePolygon> *v19; // rdx
  bool v20; // al
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>::pointer v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // r14
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  int v36; // eax
  __int64 result; // rax
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-2F8h]
  const std::unordered_map<unsigned int,InteriorCheckablePolygon> *__for_range; // [rsp+30h] [rbp-2F0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>::reference v42; // [rsp+38h] [rbp-2E8h]
  std::tuple_element<0,std::pair<unsigned int const,InteriorCheckablePolygon> >::type *area_id; // [rsp+40h] [rbp-2E0h]
  std::tuple_element<1,const std::pair<unsigned int const,InteriorCheckablePolygon> >::type *polygon; // [rsp+48h] [rbp-2D8h]
  char v45[720]; // [rsp+50h] [rbp-2D0h] BYREF

  v5 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(672LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "14 32 4 13 scene_id:5941 48 4 19 level1_area_id:5941 64 8 10 point:5949 96 8 9 iter:5957 128 8 9"
                        " <unknown> 160 8 16 __for_begin:5971 192 8 14 __for_end:5971 224 32 9 <unknown> 288 32 9 <unknow"
                        "n> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = JsonConfigMgr::checkPointInLevel1Area;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -218959360;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862726] = -218959360;
  v7[536862728] = -218959118;
  v7[536862730] = -218959118;
  v7[536862732] = -218959118;
  v7[536862734] = -218959118;
  v7[536862736] = -218959118;
  v7[536862738] = -218959118;
  v7[536862740] = -202116109;
  *(_DWORD *)(v5 + 32) = scene_id;
  *(_DWORD *)(v5 + 48) = level1_area_id;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, *(unsigned int *)(v5 + 32));
  if ( !scene_json_config_ptr )
  {
    if ( *(char *)(((v5 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkPointInLevel1Area",
      5946);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v8,
           (const char (*)[36])"findSceneJsonConfig fail, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v5 + 32));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 224));
    v4 = -1;
    goto LABEL_50;
  }
  v10 = ((unsigned __int8)pos & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(pos);
  }
  x = pos->x;
  v12 = *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v12 != 0;
  if ( v12 != 0 && (char)((((_BYTE)pos + 8) & 7) + 3) >= v12 )
    __asan_report_load4(&pos->z);
  Vector2::Vector2((Vector2 *const)(v5 + 64), x, pos->z);
  if ( *(_DWORD *)(v5 + 48) )
  {
    Config = JsonConfigMgr::getConfig(this);
    v14 = *(unsigned int *)(v5 + 48);
    if ( WorldAreaExcelConfigMgr::findFirstLevelWorldAreaConfig(&Config->txt_config_mgr.world_area_config_mgr, v14) )
    {
      p_level1_area_polygon_map = &scene_json_config_ptr->level1_area_polygon_map;
      if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 96, v14);
      *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::const_iterator *)(v5 + 96) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::find(
                                                                                                  p_level1_area_polygon_map,
                                                                                                  (const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *)(v5 + 48));
      v19 = &scene_json_config_ptr->level1_area_polygon_map;
      if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 128, v5 + 48);
      *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::const_iterator *)(v5 + 128) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::end(v19);
      v20 = std::__detail::operator==<std::pair<unsigned int const,InteriorCheckablePolygon>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v5 + 96),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v5 + 128));
      *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
      if ( v20 )
      {
        *(_DWORD *)(((v5 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkPointInLevel1Area",
          5960);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 352),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                v21,
                (const char (*)[40])"area polygon not found, level1_area_id:");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v5 + 48));
        v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])" scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v5 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 352));
        v4 = -1;
        v17 = 0;
      }
      else
      {
        v25 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false> *const)(v5 + 96));
        if ( !InteriorCheckablePolygon::isPointInsidePolygon(&v25->second, (const Vector2 *)(v5 + 64)) )
        {
          *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkPointInLevel1Area",
            5965);
          v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 416),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v27 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v26, (const char (*)[5])"pos:");
          *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 480, 32LL);
          }
          Vector3::toString[abi:cxx11]((std::string *)(v5 + 480), pos);
          v28 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v27,
                  (const std::string *)(v5 + 480));
          v29 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  v28,
                  (const char (*)[28])" not inside level1_area_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, (const unsigned int *)(v5 + 48));
          std::string::~string((void *)(v5 + 480));
          *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 416));
          v4 = -1;
          v17 = 0;
        }
        else
        {
          v17 = 1;
        }
      }
    }
    else
    {
      if ( *(char *)(((v5 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkPointInLevel1Area",
        5954);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v16 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
              v15,
              (const char (*)[52])"findFirstLevelWorldAreaConfig fail, level1_area_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 288));
      v4 = -1;
      v17 = 0;
    }
    if ( v17 != 1 )
      goto LABEL_50;
LABEL_49:
    v4 = 0;
    goto LABEL_50;
  }
  __for_range = &scene_json_config_ptr->level1_area_polygon_map;
  if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 160, v10);
  *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::const_iterator *)(v5 + 160) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::begin(__for_range);
  if ( *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 192, v10);
  *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::const_iterator *)(v5 + 192) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,InteriorCheckablePolygon>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v5 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v5 + 192)) )
    {
      v36 = 1;
      goto LABEL_48;
    }
    v42 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false> *const)(v5 + 160));
    area_id = std::get<0ul,unsigned int const,InteriorCheckablePolygon>(v42);
    polygon = (std::tuple_element<1,const std::pair<unsigned int const,InteriorCheckablePolygon> >::type *)std::get<1ul,unsigned int const,InteriorCheckablePolygon>(v42);
    if ( InteriorCheckablePolygon::isPointInsidePolygon(polygon, (const Vector2 *)(v5 + 64)) )
      break;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false> *const)(v5 + 160));
  }
  if ( *(char *)(((v5 + 544) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 544, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 544),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_config_mgr.cpp",
    "checkPointInLevel1Area",
    5975);
  v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v5 + 544),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v31 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v30, (const char (*)[5])"pos:");
  if ( *(char *)(((v5 + 608) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 608, 32LL);
  }
  Vector3::toString[abi:cxx11]((std::string *)(v5 + 608), pos);
  v32 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, (const std::string *)(v5 + 608));
  v33 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v32, (const char (*)[21])" is inside scene_id:");
  v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v5 + 32));
  v35 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v34, (const char (*)[10])" area_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, area_id);
  std::string::~string((void *)(v5 + 608));
  *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = -117901064;
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 544));
  v4 = -1;
  v36 = 0;
LABEL_48:
  if ( v36 == 1 )
    goto LABEL_49;
LABEL_50:
  result = v4;
  if ( v45 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8040) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 5984: range 000000000F2B04AA-000000000F2B0F6A
int32_t __cdecl JsonConfigMgr::checkMixinConfig(JsonConfigMgr *const this)
{
  __int64 v1; // rsi
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  int v7; // r14d
  char *v8; // rsi
  bool v9; // r14
  int v10; // edx
  bool v11; // r14
  int v12; // edx
  int v13; // edx
  int v14; // eax
  int v15; // edx
  int v16; // eax
  int32_t result; // eax
  std::unordered_map<int,ConfigAbilityHashMap> *__for_range; // [rsp+10h] [rbp-270h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::reference __in; // [rsp+18h] [rbp-268h]
  std::unordered_map<int,ConfigAbilityOverride> *__for_range_0; // [rsp+30h] [rbp-250h]
  std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::reference v21; // [rsp+38h] [rbp-248h]
  std::tuple_element<1,std::pair<int const,ConfigAbilityOverride> >::type *config_override; // [rsp+48h] [rbp-238h]
  data::ConfigAbilityMixinArray *__for_range_1; // [rsp+50h] [rbp-230h]
  std::shared_ptr<data::ConfigAbilityMixin> *config_mixin_ptr; // [rsp+58h] [rbp-228h]
  data::ConfigAbilityModifierMap *__for_range_2; // [rsp+60h] [rbp-220h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true>::reference v26; // [rsp+68h] [rbp-218h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> > >::type *modifier_ptr; // [rsp+78h] [rbp-208h]
  data::ConfigAbilityMixinArray *__for_range_3; // [rsp+80h] [rbp-200h]
  std::shared_ptr<data::ConfigAbilityMixin> *config_mixin_ptr_0; // [rsp+88h] [rbp-1F8h]
  char v30[496]; // [rsp+90h] [rbp-1F0h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "13 32 8 16 __for_begin:5985 64 8 14 __for_end:5985 96 8 16 __for_begin:5987 128 8 14 __for_end:5"
                        "987 160 8 16 __for_begin:5994 192 8 14 __for_end:5994 224 8 16 __for_begin:6001 256 8 14 __for_e"
                        "nd:6001 288 8 16 __for_begin:6007 320 8 14 __for_end:6007 352 16 16 ability_ptr:5989 384 16 9 <u"
                        "nknown> 416 16 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkMixinConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -219021312;
  v5[536862732] = -219021312;
  v5[536862733] = -202178560;
  __for_range = &this->ability_config_group_map_;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, v1);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v3 + 32) = std::unordered_map<int,ConfigAbilityHashMap>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, v1);
  *(std::unordered_map<int,ConfigAbilityHashMap>::iterator *)(v3 + 64) = std::unordered_map<int,ConfigAbilityHashMap>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 64);
    if ( !std::__detail::operator!=<std::pair<int const,ConfigAbilityHashMap>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityHashMap>,false> *)(v3 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v3 + 32));
    std::get<0ul,int const,ConfigAbilityHashMap>(__in);
    __for_range_0 = &std::get<1ul,int const,ConfigAbilityHashMap>(__in)->config_ability_override_map;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, v6);
    *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v3 + 96) = std::unordered_map<int,ConfigAbilityOverride>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v6);
    *(std::unordered_map<int,ConfigAbilityOverride>::iterator *)(v3 + 128) = std::unordered_map<int,ConfigAbilityOverride>::end(__for_range_0);
    while ( std::__detail::operator!=<std::pair<int const,ConfigAbilityOverride>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v3 + 96),
              (const std::__detail::_Node_iterator_base<std::pair<int const,ConfigAbilityOverride>,false> *)(v3 + 128)) )
    {
      v21 = std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v3 + 96));
      std::get<0ul,int const,ConfigAbilityOverride>(v21);
      config_override = std::get<1ul,int const,ConfigAbilityOverride>(v21);
      *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
      std::shared_ptr<data::ConfigAbility>::shared_ptr(
        (std::shared_ptr<data::ConfigAbility> *const)(v3 + 352),
        &config_override->config_ability_ptr);
      if ( std::operator==<data::ConfigAbility>((const std::shared_ptr<data::ConfigAbility> *)(v3 + 352), 0LL) )
      {
        v7 = 0;
      }
      else
      {
        __for_range_1 = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 352))->ability_mixins;
        *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 160, 0LL);
        *(std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::iterator *)(v3 + 160) = std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::begin(__for_range_1);
        *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 192, 0LL);
        *(std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::iterator *)(v3 + 192) = std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::end(__for_range_1);
        while ( 1 )
        {
          v8 = (char *)(v3 + 192);
          if ( !__gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *)(v3 + 160),
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *)(v3 + 192)) )
            break;
          config_mixin_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *const)(v3 + 160));
          *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
          std::shared_ptr<data::ConfigAbilityMixin>::shared_ptr(
            (std::shared_ptr<data::ConfigAbilityMixin> *const)(v3 + 384),
            config_mixin_ptr);
          v8 = (char *)(v3 + 384);
          v9 = JsonConfigMgr::checkSingleMixin(this, (data::ConfigAbilityMixinPtr *)(v3 + 384)) != 0;
          std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)(v3 + 384));
          *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -1800;
          if ( v9 )
          {
            v2 = -1;
            v10 = 0;
            goto LABEL_28;
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *const)(v3 + 160));
        }
        v10 = 1;
LABEL_28:
        *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
        if ( v10 == 1 )
        {
          __for_range_2 = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 352))->modifiers;
          *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 224, v8);
          *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v3 + 224) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::begin(__for_range_2);
          *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 256, v8);
          *(std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::iterator *)(v3 + 256) = std::unordered_map<std::string,std::shared_ptr<data::ConfigAbilityModifier>>::end(__for_range_2);
          while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,true>(
                    (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v3 + 224),
                    (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,true> *)(v3 + 256)) )
          {
            v26 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v3 + 224));
            std::get<0ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v26);
            modifier_ptr = std::get<1ul,std::string const,std::shared_ptr<data::ConfigAbilityModifier>>(v26);
            if ( !std::operator==<data::ConfigAbilityModifier>(modifier_ptr, 0LL) )
            {
              __for_range_3 = &std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)modifier_ptr)->modifier_mixins;
              *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 288, 0LL);
              *(std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::iterator *)(v3 + 288) = std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::begin(__for_range_3);
              *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 320, 0LL);
              *(std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::iterator *)(v3 + 320) = std::vector<std::shared_ptr<data::ConfigAbilityMixin>>::end(__for_range_3);
              while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>(
                        (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *)(v3 + 288),
                        (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *)(v3 + 320)) )
              {
                config_mixin_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *const)(v3 + 288));
                *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
                std::shared_ptr<data::ConfigAbilityMixin>::shared_ptr(
                  (std::shared_ptr<data::ConfigAbilityMixin> *const)(v3 + 416),
                  config_mixin_ptr_0);
                v11 = JsonConfigMgr::checkSingleMixin(this, (data::ConfigAbilityMixinPtr *)(v3 + 416)) != 0;
                std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)(v3 + 416));
                *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -1800;
                if ( v11 )
                {
                  v2 = -1;
                  v12 = 0;
                  goto LABEL_47;
                }
                __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin> *,std::vector<std::shared_ptr<data::ConfigAbilityMixin>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityMixin>*,std::vector<std::shared_ptr<data::ConfigAbilityMixin>> > *const)(v3 + 288));
              }
              v12 = 1;
LABEL_47:
              *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
              if ( v12 != 1 )
              {
                v13 = 0;
                goto LABEL_51;
              }
            }
            std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityModifier>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityModifier> >,false,true> *const)(v3 + 224));
          }
          v13 = 1;
LABEL_51:
          *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
          if ( v13 == 1 )
            v7 = 2;
          else
            v7 = 1;
        }
        else
        {
          v7 = 1;
        }
      }
      std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v3 + 352));
      if ( v7 )
      {
        if ( v7 == 2 )
          v14 = 2;
        else
          v14 = 1;
      }
      else
      {
        v14 = 0;
      }
      *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -1800;
      if ( v14 && v14 != 2 )
      {
        v15 = 0;
        goto LABEL_64;
      }
      std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityOverride>,false,false> *const)(v3 + 96));
    }
    v15 = 1;
LABEL_64:
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    if ( v15 != 1 )
    {
      v16 = 0;
      goto LABEL_68;
    }
    std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<int const,ConfigAbilityHashMap>,false,false> *const)(v3 + 32));
  }
  v16 = 1;
LABEL_68:
  if ( v16 == 1 )
    v2 = 0;
  result = v2;
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6021: range 000000000F2B0F6C-000000000F2B2B69
int32_t __cdecl JsonConfigMgr::checkSingleMixin(
        JsonConfigMgr *const this,
        data::ConfigAbilityMixinPtr *p_config_mixin_ptr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *i; // r14
  char *j; // r14
  std::__shared_ptr_access<data::ModifyDamageMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  std::__shared_ptr_access<data::ServerFinishWatcherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::initializer_list<std::string > __l; // [rsp+10h] [rbp-830h]
  char v14[2064]; // [rsp+30h] [rbp-810h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(2016LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "43 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 1 9 <unknown> 3"
                        "04 1 9 <unknown> 320 1 9 <unknown> 336 1 9 <unknown> 352 1 9 <unknown> 368 1 9 <unknown> 384 1 9"
                        " <unknown> 400 1 9 <unknown> 416 1 9 <unknown> 432 1 9 <unknown> 448 1 9 <unknown> 464 1 9 <unkn"
                        "own> 480 1 9 <unknown> 496 1 9 <unknown> 512 1 9 <unknown> 528 1 9 <unknown> 544 1 9 <unknown> 5"
                        "60 1 9 <unknown> 576 1 9 <unknown> 592 1 9 <unknown> 608 1 9 <unknown> 624 1 9 <unknown> 640 16 "
                        "28 modify_damage_mixin_ptr:6060 672 16 30 server_finish_watcher_ptr:6070 704 32 9 <unknown> 768 "
                        "32 9 <unknown> 832 352 9 <unknown> 1248 640 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkSingleMixin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234753535;
  v4[536862730] = -234753535;
  v4[536862731] = -234753535;
  v4[536862732] = -234753535;
  v4[536862733] = -234753535;
  v4[536862734] = -234753535;
  v4[536862735] = -234753535;
  v4[536862736] = -234753535;
  v4[536862737] = -234753535;
  v4[536862738] = -234753535;
  v4[536862739] = -234753535;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862757] = -218959118;
  v4[536862758] = -218959118;
  v4[536862779] = -202116109;
  v4[536862780] = -202116109;
  v4[536862781] = -202116109;
  v4[536862782] = -202116109;
  if ( !(_BYTE)`guard variable for'JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::modify_damage_valid_predicate_set
    && __cxa_guard_acquire(&`guard variable for'JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::modify_damage_valid_predicate_set) )
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1248),
      "ByAny",
      (const std::allocator<char> *)(v2 + 48));
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1280),
      "ByAttackTags",
      (const std::allocator<char> *)(v2 + 64));
    std::allocator<char>::allocator(v2 + 80);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1312),
      "ByCompareWithTarget",
      (const std::allocator<char> *)(v2 + 80));
    std::allocator<char>::allocator(v2 + 96);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1344),
      "ByEntityTypes",
      (const std::allocator<char> *)(v2 + 96));
    std::allocator<char>::allocator(v2 + 112);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1376),
      "ByHasAbilityState",
      (const std::allocator<char> *)(v2 + 112));
    std::allocator<char>::allocator(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1408),
      "ByHasElement",
      (const std::allocator<char> *)(v2 + 128));
    std::allocator<char>::allocator(v2 + 144);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1440),
      "ByHasFeatureTag",
      (const std::allocator<char> *)(v2 + 144));
    std::allocator<char>::allocator(v2 + 160);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1472),
      "ByHasShield",
      (const std::allocator<char> *)(v2 + 160));
    std::allocator<char>::allocator(v2 + 176);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1504),
      "ByTargetGlobalValue",
      (const std::allocator<char> *)(v2 + 176));
    std::allocator<char>::allocator(v2 + 192);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1536),
      "ByTargetHPRatio",
      (const std::allocator<char> *)(v2 + 192));
    std::allocator<char>::allocator(v2 + 208);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1568),
      "ByHitBoxType",
      (const std::allocator<char> *)(v2 + 208));
    std::allocator<char>::allocator(v2 + 224);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1600),
      "ByTargetLayoutArea",
      (const std::allocator<char> *)(v2 + 224));
    std::allocator<char>::allocator(v2 + 240);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1632),
      "ByAttackType",
      (const std::allocator<char> *)(v2 + 240));
    std::allocator<char>::allocator(v2 + 256);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1664),
      "ByTargetForwardAndSelfPosition",
      (const std::allocator<char> *)(v2 + 256));
    std::allocator<char>::allocator(v2 + 272);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1696),
      "ByUnlockTalentParam",
      (const std::allocator<char> *)(v2 + 272));
    std::allocator<char>::allocator(v2 + 288);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1728),
      "ByHitElement",
      (const std::allocator<char> *)(v2 + 288));
    std::allocator<char>::allocator(v2 + 304);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1760),
      "ByElementReactionType",
      (const std::allocator<char> *)(v2 + 304));
    std::allocator<char>::allocator(v2 + 320);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1792),
      "ByTargetIsCaster",
      (const std::allocator<char> *)(v2 + 320));
    std::allocator<char>::allocator(v2 + 336);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1824),
      "ByNot",
      (const std::allocator<char> *)(v2 + 336));
    std::allocator<char>::allocator(v2 + 352);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1856),
      "ByAnd",
      (const std::allocator<char> *)(v2 + 352));
    std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 400));
    std::unordered_set<std::string>::unordered_set(
      (std::unordered_set<std::string> *const)&JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::modify_damage_valid_predicate_set,
      (std::initializer_list<std::string >)__PAIR128__(20LL, v2 + 1248),
      0LL,
      (const std::unordered_set<std::string>::hasher *)(v2 + 368),
      (const std::unordered_set<std::string>::key_equal *)(v2 + 384),
      (const std::unordered_set<std::string>::allocator_type *)(v2 + 400));
    __cxa_guard_release(&`guard variable for'JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::modify_damage_valid_predicate_set);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_set<std::string>::~unordered_set,
      (void *)&JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::modify_damage_valid_predicate_set,
      &_dso_handle);
    std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 400));
    *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
    for ( i = (char *)(v2 + 1888); i != (char *)(v2 + 1248); std::string::~string(i) )
      i -= 32;
    __asan_poison_stack_memory(v2 + 1248, 640LL);
    std::allocator<char>::~allocator(v2 + 352);
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 336);
    *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 320);
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 304);
    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 288);
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 272);
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 256);
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 240);
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 224);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 208);
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 192);
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 176);
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 160);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 144);
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 128);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 112);
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  }
  if ( !(_BYTE)`guard variable for'JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::server_finish_watcher_valid_predicate_set
    && __cxa_guard_acquire(&`guard variable for'JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::server_finish_watcher_valid_predicate_set) )
  {
    __asan_unpoison_stack_memory(v2 + 832, 352LL);
    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 416);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 832),
      "ByAny",
      (const std::allocator<char> *)(v2 + 416));
    *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 432);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 864),
      "ByAttackTags",
      (const std::allocator<char> *)(v2 + 432));
    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 448);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 896),
      "ByCompareWithTarget",
      (const std::allocator<char> *)(v2 + 448));
    *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 464);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 928),
      "ByEntityTypes",
      (const std::allocator<char> *)(v2 + 464));
    *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 480);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 960),
      "ByHasAbilityState",
      (const std::allocator<char> *)(v2 + 480));
    *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 496);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 992),
      "ByHasElement",
      (const std::allocator<char> *)(v2 + 496));
    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 512);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1024),
      "ByHasFeatureTag",
      (const std::allocator<char> *)(v2 + 512));
    *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 528);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1056),
      "ByHasShield",
      (const std::allocator<char> *)(v2 + 528));
    *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 544);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1088),
      "ByTargetGlobalValue",
      (const std::allocator<char> *)(v2 + 544));
    *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 560);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1120),
      "ByTargetHPRatio",
      (const std::allocator<char> *)(v2 + 560));
    *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 576);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1152),
      "ByTargetLayoutArea",
      (const std::allocator<char> *)(v2 + 576));
    __l._M_array = (std::initializer_list<std::string >::iterator)(v2 + 832);
    __l._M_len = 11LL;
    *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = 1;
    std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 624));
    std::unordered_set<std::string>::unordered_set(
      (std::unordered_set<std::string> *const)&JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::server_finish_watcher_valid_predicate_set,
      __l,
      0LL,
      (const std::unordered_set<std::string>::hasher *)(v2 + 592),
      (const std::unordered_set<std::string>::key_equal *)(v2 + 608),
      (const std::unordered_set<std::string>::allocator_type *)(v2 + 624));
    __cxa_guard_release(&`guard variable for'JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::server_finish_watcher_valid_predicate_set);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_set<std::string>::~unordered_set,
      (void *)&JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::server_finish_watcher_valid_predicate_set,
      &_dso_handle);
    std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 624));
    *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
    for ( j = (char *)(v2 + 1184); j != (char *)(v2 + 832); std::string::~string(j) )
      j -= 32;
    __asan_poison_stack_memory(v2 + 832, 352LL);
    std::allocator<char>::~allocator(v2 + 576);
    *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 560);
    *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 544);
    *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 528);
    *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 512);
    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 496);
    *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 480);
    *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 464);
    *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 448);
    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 432);
    *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
    std::allocator<char>::~allocator(v2 + 416);
    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
  }
  *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
  if ( *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  std::dynamic_pointer_cast<data::ModifyDamageMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(v2 + 640));
  if ( std::operator!=<data::ModifyDamageMixin>((const std::shared_ptr<data::ModifyDamageMixin> *)(v2 + 640), 0LL) )
  {
    v7 = std::__shared_ptr_access<data::ModifyDamageMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ModifyDamageMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 640));
    if ( JsonConfigMgr::checkMixinPredicates(
           this,
           &v7->predicates,
           &JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::modify_damage_valid_predicate_set) )
    {
      *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 704, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 704),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkSingleMixin",
        6065);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 704),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(v8, (const char (*)[48])byte_1A52D260);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
      *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ServerFinishWatcherMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(v2 + 672));
    if ( std::operator!=<data::ServerFinishWatcherMixin>(
           (const std::shared_ptr<data::ServerFinishWatcherMixin> *)(v2 + 672),
           0LL) )
    {
      v10 = std::__shared_ptr_access<data::ServerFinishWatcherMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ServerFinishWatcherMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 672));
      if ( JsonConfigMgr::checkMixinPredicates(
             this,
             &v10->predicates,
             &JsonConfigMgr::checkSingleMixin(std::shared_ptr<data::ConfigAbilityMixin>)::server_finish_watcher_valid_predicate_set) )
      {
        *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 768, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 768),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkSingleMixin",
          6075);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 768),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v11, (const char (*)[56])byte_1A52D2C0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
        *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      v9 = 0;
    }
    std::shared_ptr<data::ServerFinishWatcherMixin>::~shared_ptr((std::shared_ptr<data::ServerFinishWatcherMixin> *const)(v2 + 672));
  }
  std::shared_ptr<data::ModifyDamageMixin>::~shared_ptr((std::shared_ptr<data::ModifyDamageMixin> *const)(v2 + 640));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 252) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 2016LL, v14);
  }
  return v9;
};

// Line 6084: range 000000000F2B2B6A-000000000F2B2E6C
int32_t __cdecl JsonConfigMgr::checkMixinPredicates(
        JsonConfigMgr *const this,
        data::ConfigAbilityPredicateArray *predicates,
        const std::unordered_set<std::string> *valid_predicate_set)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::shared_ptr<data::ConfigAbilityPredicate> *v7; // rax
  bool v8; // r15
  int v9; // r15d
  int v10; // eax
  int32_t result; // eax
  char v13[208]; // [rsp+30h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 8 16 __for_begin:6085 64 8 14 __for_end:6085 96 16 18 predicate_ptr:6085 128 16 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::checkMixinPredicates;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 32, predicates);
  *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v4 + 32) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(predicates);
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, predicates);
  *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v4 + 64) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(predicates);
  while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v4 + 32),
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v4 + 64)) )
  {
    *(_WORD *)(((v4 + 96) >> 3) + 0x7FFF8000) = 0;
    v7 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v4 + 32));
    std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v4 + 96),
      v7);
    *(_WORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
    std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v4 + 128),
      (const std::shared_ptr<data::ConfigAbilityPredicate> *)(v4 + 96));
    v8 = !JsonConfigMgr::isMixinPredicateValid(this, (data::ConfigAbilityPredicatePtr *)(v4 + 128), valid_predicate_set);
    std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v4 + 128));
    *(_WORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -1800;
    if ( v8 )
    {
      v3 = -1;
      v9 = 0;
    }
    else
    {
      v9 = 1;
    }
    std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v4 + 96));
    if ( v9 != 1 )
    {
      v10 = 0;
      goto LABEL_17;
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v4 + 32));
  }
  v10 = 1;
LABEL_17:
  if ( v10 == 1 )
    v3 = 0;
  result = v3;
  if ( v13 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6096: range 000000000F2B2E6E-000000000F2B3FB3
bool __cdecl JsonConfigMgr::isMixinPredicateValid(
        JsonConfigMgr *const this,
        data::ConfigAbilityPredicatePtr *p_config_predicate_ptr,
        const std::unordered_set<std::string> *valid_predicate_set)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  const char *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned __int64 v12; // rax
  __int64 v13; // rsi
  __int64 v14; // rsi
  unsigned __int64 v15; // rax
  std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  char v20; // dl
  const char *v21; // rsi
  __int64 v22; // rax
  std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // al
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  const std::shared_ptr<data::ConfigAbilityPredicate> *v28; // rax
  bool v29; // r14
  common::milog::MiLogStream *v30; // rax
  int v31; // edx
  bool result; // al
  bool v33; // [rsp+17h] [rbp-319h]
  data::ConfigAbilityPredicateArray *__for_range; // [rsp+30h] [rbp-300h]
  char v37[752]; // [rsp+40h] [rbp-2F0h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "16 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 8 9 <unknown> 128 8 16"
                        " __for_begin:6130 160 8 14 __for_end:6130 192 16 15 by_any_ptr:6127 224 16 9 <unknown> 256 24 9 "
                        "<unknown> 320 32 9 <unknown> 384 32 14 type_name:6103 448 32 9 <unknown> 512 32 9 <unknown> 576 "
                        "32 9 <unknown> 640 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::isMixinPredicateValid;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -234881024;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -202116109;
  if ( std::operator==<data::ConfigAbilityPredicate>(p_config_predicate_ptr, 0LL) )
  {
    if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 320),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "isMixinPredicateValid",
      6099);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 320),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v6, (const char (*)[30])byte_1A52D520);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
    v33 = 0;
  }
  else
  {
    std::allocator<char>::allocator(v3 + 32);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_predicate_ptr);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 32LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 32LL);
    v9 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v8)(v7);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v3 + 384),
      v9,
      (const std::allocator<char> *)(v3 + 32));
    std::allocator<char>::~allocator(v3 + 32);
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<std::string> const,std::string>(
            valid_predicate_set,
            (const std::string *)(v3 + 384)) )
    {
      *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "isMixinPredicateValid",
        6106);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 448),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(v10, (const char (*)[54])byte_1A52D560);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v3 + 384));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
      *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
      v33 = 0;
    }
    else
    {
      if ( !(_BYTE)`guard variable for'JsonConfigMgr::isMixinPredicateValid(std::shared_ptr<data::ConfigAbilityPredicate>,std::unordered_set<std::string> const&)::valid_ability_targetting_set
        && __cxa_guard_acquire(&`guard variable for'JsonConfigMgr::isMixinPredicateValid(std::shared_ptr<data::ConfigAbilityPredicate>,std::unordered_set<std::string> const&)::valid_ability_targetting_set) )
      {
        v12 = ((v3 + 256) >> 3) + 2147450880;
        *(_WORD *)v12 = 0;
        *(_BYTE *)(v12 + 2) = 0;
        if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 256, v3 + 384);
        *(_DWORD *)(v3 + 256) = 0;
        v13 = (((_BYTE)v3 - 64 + 68) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 - 64 + 68) & 7) + 3) >= *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 260, v13);
        }
        *(_DWORD *)(v3 + 260) = 2;
        if ( *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 264, v13);
        *(_DWORD *)(v3 + 264) = 10;
        v14 = (((_BYTE)v3 - 64 + 76) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 268) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 - 64 + 76) & 7) + 3) >= *(_BYTE *)(((v3 + 268) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 268, v14);
        }
        *(_DWORD *)(v3 + 268) = 16;
        if ( *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 272, v14);
        *(_DWORD *)(v3 + 272) = 9;
        if ( *(_BYTE *)(((v3 + 276) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 - 64 + 84) & 7) + 3) >= *(_BYTE *)(((v3 + 276) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 276, (((_BYTE)v3 - 64 + 84) & 7u) + 3);
        }
        *(_DWORD *)(v3 + 276) = 12;
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<data::AbilityTargetting>::allocator((std::allocator<data::AbilityTargetting> *const)(v3 + 80));
        std::unordered_set<data::AbilityTargetting>::unordered_set(
          (std::unordered_set<data::AbilityTargetting> *const)&JsonConfigMgr::isMixinPredicateValid(std::shared_ptr<data::ConfigAbilityPredicate>,std::unordered_set<std::string> const&)::valid_ability_targetting_set,
          (std::initializer_list<data::AbilityTargetting>)__PAIR128__(6LL, v3 + 256),
          0LL,
          (const std::unordered_set<data::AbilityTargetting>::hasher *)(v3 + 48),
          (const std::unordered_set<data::AbilityTargetting>::key_equal *)(v3 + 64),
          (const std::unordered_set<data::AbilityTargetting>::allocator_type *)(v3 + 80));
        __cxa_guard_release(&`guard variable for'JsonConfigMgr::isMixinPredicateValid(std::shared_ptr<data::ConfigAbilityPredicate>,std::unordered_set<std::string> const&)::valid_ability_targetting_set);
        __cxa_atexit(
          (void (__fastcall *)(void *))std::unordered_set<data::AbilityTargetting>::~unordered_set,
          (void *)&JsonConfigMgr::isMixinPredicateValid(std::shared_ptr<data::ConfigAbilityPredicate>,std::unordered_set<std::string> const&)::valid_ability_targetting_set,
          &_dso_handle);
        std::allocator<data::AbilityTargetting>::~allocator((std::allocator<data::AbilityTargetting> *const)(v3 + 80));
        *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        v15 = ((v3 + 256) >> 3) + 2147450880;
        *(_WORD *)v15 = -1800;
        *(_BYTE *)(v15 + 2) = -8;
      }
      v16 = std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_predicate_ptr);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::AbilityTargetting> const,data::AbilityTargetting>(
              &JsonConfigMgr::isMixinPredicateValid(std::shared_ptr<data::ConfigAbilityPredicate>,std::unordered_set<std::string> const&)::valid_ability_targetting_set,
              &v16->target) )
      {
        *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 95) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "isMixinPredicateValid",
          6119);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 512),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = byte_1A52D5C0;
        v18 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(v17, (const char (*)[51])byte_1A52D5C0);
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
        v19 = std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_predicate_ptr);
        v20 = *(_BYTE *)(((unsigned __int64)&v19->target >> 3) + 0x7FFF8000);
        LOBYTE(v21) = v20 != 0;
        if ( v20 != 0 && v20 <= 3 )
          __asan_report_load4(&v19->target);
        v22 = (__int64)data::enumValToStr(v19->target);
        if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
          v22 = __asan_report_store8(v3 + 96, v21);
        *(_QWORD *)(v3 + 96) = v22;
        common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v18, (const char *const *)(v3 + 96));
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
        *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
        v33 = 0;
      }
      else
      {
        if ( !std::operator==<char>("ByTargetForwardAndSelfPosition", (const std::string *)(v3 + 384)) )
          goto LABEL_44;
        v23 = std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_predicate_ptr);
        if ( *(_BYTE *)(((unsigned __int64)&v23->target >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v23->target >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v23->target);
        }
        if ( v23->target == Target )
LABEL_44:
          v24 = 0;
        else
          v24 = 1;
        if ( v24 )
        {
          *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "isMixinPredicateValid",
            6124);
          v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v26 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v25, (const char (*)[31])byte_1A52D620);
          v27 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v26,
                  (const std::string *)(v3 + 384));
          common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v27, (const char (*)[23])byte_1A52D660);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
          *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
          v33 = 0;
        }
        else
        {
          *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ByAny,data::ConfigAbilityPredicate>((const std::shared_ptr<data::ConfigAbilityPredicate> *)(v3 + 192));
          if ( !std::operator!=<data::ByAny>((const std::shared_ptr<data::ByAny> *)(v3 + 192), 0LL) )
            goto LABEL_65;
          __for_range = &std::__shared_ptr_access<data::ByAny,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ByAny,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192))->predicates;
          *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 128, 0LL);
          *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v3 + 128) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(__for_range);
          *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 160, 0LL);
          *(std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::iterator *)(v3 + 160) = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(__for_range);
          while ( 1 )
          {
            if ( !__gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v3 + 128),
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *)(v3 + 160)) )
            {
              v31 = 1;
              goto LABEL_64;
            }
            v28 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v3 + 128));
            *(_WORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
            std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
              (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v3 + 224),
              v28);
            v29 = !JsonConfigMgr::isMixinPredicateValid(
                     this,
                     (data::ConfigAbilityPredicatePtr *)(v3 + 224),
                     valid_predicate_set);
            std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v3 + 224));
            *(_WORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              break;
            __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> *,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate>*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> > *const)(v3 + 128));
          }
          *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "isMixinPredicateValid",
            6134);
          v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v30, (const char (*)[56])byte_1A52D6A0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
          *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
          v33 = 0;
          v31 = 0;
LABEL_64:
          *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
          if ( v31 == 1 )
LABEL_65:
            v33 = 1;
          std::shared_ptr<data::ByAny>::~shared_ptr((std::shared_ptr<data::ByAny> *const)(v3 + 192));
        }
      }
    }
    std::string::~string((void *)(v3 + 384));
  }
  result = v33;
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6143: range 000000000F2B3FB4-000000000F2B4B61
const data::ConfigLevelArea *__fastcall JsonConfigMgr::findLevelAreaConfig(
        const JsonConfigMgr *const this,
        __int64 scene_id,
        unsigned __int64 pos)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  const std::unordered_map<unsigned int,SceneJsonConfig> *v7; // rax
  bool v8; // al
  const data::ConfigLevelArea *result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::pointer v10; // rax
  __int64 v11; // rsi
  float v12; // ecx
  char v13; // dl
  float v14; // xmm1_4
  double v15; // xmm0_8
  __int64 v16; // rsi
  float v17; // xmm1_4
  double v18; // xmm0_8
  float v19; // xmm1_4
  double v20; // xmm0_8
  float v21; // xmm1_4
  double v22; // xmm0_8
  const std::unordered_map<unsigned int,InteriorCheckablePolygon> *p_level_layout_area_polygon_map; // rcx
  const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *p_id; // rax
  __int64 v25; // rsi
  const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *v26; // rsi
  const std::unordered_map<unsigned int,InteriorCheckablePolygon> *v27; // rdx
  bool v28; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>::pointer v29; // rax
  uint32_t priority; // ecx
  uint32_t level; // ecx
  const data::ConfigLevelArea *level_area_ptr; // [rsp+28h] [rbp-1B8h]
  const SceneJsonConfig *scene_json_config; // [rsp+30h] [rbp-1B0h]
  const data::ConfigLevelLayout *level_layout; // [rsp+38h] [rbp-1A8h]
  __gnu_cxx::__normal_iterator<const data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> >::reference level_block; // [rsp+48h] [rbp-198h]
  const std::vector<data::ConfigLevelArea> *__for_range_0; // [rsp+50h] [rbp-190h]
  const data::ConfigLevelArea *level_area; // [rsp+58h] [rbp-188h]
  char v39[384]; // [rsp+60h] [rbp-180h] BYREF

  v3 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 48 4 13 scene_id:6142 64 8 9 iter:6144 96 8 9 <unknown> 128 8 10 point:6152 160 8 16 __for_be"
                        "gin:6153 192 8 14 __for_end:6153 224 8 16 __for_begin:6160 256 8 14 __for_end:6160 288 8 9 iter:"
                        "6170 320 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findLevelAreaConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -202116352;
  *(_DWORD *)(v3 + 48) = scene_id;
  p_scene_json_config_map = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    p_scene_json_config_map = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(
                                                                                          v3 + 64,
                                                                                          scene_id);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                                     p_scene_json_config_map,
                                                                                     (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v3 + 48));
  v7 = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    v7 = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,SceneJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0LL;
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v3 + 64));
    scene_json_config = &v10->second;
    level_area_ptr = 0LL;
    level_layout = &v10->second.level_layout;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    v11 = (unsigned int)(pos & 7) + 3;
    if ( *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0 && (char)((pos & 7) + 3) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) )
      __asan_report_load4(pos);
    v12 = *(float *)pos;
    v13 = *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000);
    LOBYTE(v11) = v13 != 0;
    if ( v13 != 0 && (char)(((pos + 8) & 7) + 3) >= v13 )
      __asan_report_load4(pos + 8);
    Vector2::Vector2((Vector2 *const)(v3 + 128), v12, *(float *)(pos + 8));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v11);
    *(std::vector<data::ConfigLevelBlock>::const_iterator *)(v3 + 160) = std::vector<data::ConfigLevelBlock>::begin(&level_layout->blocks);
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 192, v11);
    *(std::vector<data::ConfigLevelBlock>::const_iterator *)(v3 + 192) = std::vector<data::ConfigLevelBlock>::end(&level_layout->blocks);
    while ( __gnu_cxx::operator!=<data::ConfigLevelBlock const*,std::vector<data::ConfigLevelBlock>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *)(v3 + 160),
              (const __gnu_cxx::__normal_iterator<const data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *)(v3 + 192)) )
    {
      level_block = __gnu_cxx::__normal_iterator<data::ConfigLevelBlock const*,std::vector<data::ConfigLevelBlock>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *const)(v3 + 160));
      if ( *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0 && (char)((pos & 7) + 3) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) )
        __asan_report_load4(pos);
      v14 = *(float *)pos;
      if ( *(_BYTE *)(((unsigned __int64)level_block >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)level_block >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(level_block);
      }
      if ( level_block->min.x <= v14 )
      {
        LODWORD(v15) = *(_DWORD *)pos;
        if ( *(_BYTE *)(((unsigned __int64)&level_block->max >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&level_block->max >> 3) + 0x7FFF8000) <= 3 )
        {
          v15 = __asan_report_load4(&level_block->max);
        }
        if ( *(float *)&v15 <= level_block->max.x )
        {
          v16 = (((_BYTE)pos + 8) & 7u) + 3;
          if ( *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) != 0
            && (char)(((pos + 8) & 7) + 3) >= *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(pos + 8);
          }
          v17 = *(float *)(pos + 8);
          if ( *(_BYTE *)(((unsigned __int64)&level_block->min.z >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&level_block->min.z >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&level_block->min.z);
          }
          if ( level_block->min.z <= v17 )
          {
            LODWORD(v18) = *(_DWORD *)(pos + 8);
            if ( *(_BYTE *)(((unsigned __int64)&level_block->max.z >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&level_block->max.z >> 3) + 0x7FFF8000) <= 3 )
            {
              v18 = __asan_report_load4(&level_block->max.z);
            }
            if ( *(float *)&v18 <= level_block->max.z )
            {
              __for_range_0 = &level_block->level_areas;
              *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 224, v16);
              *(std::vector<data::ConfigLevelArea>::const_iterator *)(v3 + 224) = std::vector<data::ConfigLevelArea>::begin(__for_range_0);
              *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 256, v16);
              *(std::vector<data::ConfigLevelArea>::const_iterator *)(v3 + 256) = std::vector<data::ConfigLevelArea>::end(__for_range_0);
              while ( __gnu_cxx::operator!=<data::ConfigLevelArea const*,std::vector<data::ConfigLevelArea>>(
                        (const __gnu_cxx::__normal_iterator<const data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *)(v3 + 224),
                        (const __gnu_cxx::__normal_iterator<const data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *)(v3 + 256)) )
              {
                level_area = __gnu_cxx::__normal_iterator<data::ConfigLevelArea const*,std::vector<data::ConfigLevelArea>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *const)(v3 + 224));
                if ( *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0
                  && (char)((pos & 7) + 3) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(pos);
                }
                v19 = *(float *)pos;
                if ( *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.min_area >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)level_area + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.min_area >> 3)
                                                                            + 0x7FFF8000) )
                {
                  __asan_report_load4(&level_area->polygon_data.min_area);
                }
                if ( level_area->polygon_data.min_area.x <= v19 )
                {
                  LODWORD(v20) = *(_DWORD *)pos;
                  if ( *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.max_area >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)level_area + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.max_area >> 3)
                                                                              + 0x7FFF8000) )
                  {
                    v20 = __asan_report_load4(&level_area->polygon_data.max_area);
                  }
                  if ( *(float *)&v20 <= level_area->polygon_data.max_area.x )
                  {
                    if ( *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) != 0
                      && (char)(((pos + 8) & 7) + 3) >= *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(pos + 8);
                    }
                    v21 = *(float *)(pos + 8);
                    if ( *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.min_area.z >> 3) + 0x7FFF8000) != 0
                      && (char)((((_BYTE)level_area + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.min_area.z >> 3)
                                                                                + 0x7FFF8000) )
                    {
                      __asan_report_load4(&level_area->polygon_data.min_area.z);
                    }
                    if ( level_area->polygon_data.min_area.z <= v21 )
                    {
                      LODWORD(v22) = *(_DWORD *)(pos + 8);
                      if ( *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.max_area.z >> 3) + 0x7FFF8000) != 0
                        && (char)((((_BYTE)level_area + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area->polygon_data.max_area.z >> 3)
                                                                                  + 0x7FFF8000) )
                      {
                        v22 = __asan_report_load4(&level_area->polygon_data.max_area.z);
                      }
                      if ( *(float *)&v22 <= level_area->polygon_data.max_area.z )
                      {
                        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
                        p_level_layout_area_polygon_map = &scene_json_config->level_layout_area_polygon_map;
                        p_id = &level_area->id;
                        v25 = *(unsigned __int8 *)(((v3 + 288) >> 3) + 0x7FFF8000);
                        if ( (_BYTE)v25 )
                          p_id = (const std::unordered_map<unsigned int,InteriorCheckablePolygon>::key_type *)__asan_report_store8(v3 + 288, v25);
                        v26 = p_id;
                        *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::const_iterator *)(v3 + 288) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::find(p_level_layout_area_polygon_map, p_id);
                        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
                        v27 = &scene_json_config->level_layout_area_polygon_map;
                        if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
                          __asan_report_store8(v3 + 320, v26);
                        *(std::unordered_map<unsigned int,InteriorCheckablePolygon>::const_iterator *)(v3 + 320) = std::unordered_map<unsigned int,InteriorCheckablePolygon>::end(v27);
                        v28 = std::__detail::operator==<std::pair<unsigned int const,InteriorCheckablePolygon>,false>(
                                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v3 + 288),
                                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,InteriorCheckablePolygon>,false> *)(v3 + 320));
                        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
                        if ( !v28 )
                        {
                          v29 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,InteriorCheckablePolygon>,false,false> *const)(v3 + 288));
                          if ( InteriorCheckablePolygon::isPointInsidePolygon(&v29->second, (const Vector2 *)(v3 + 128)) )
                          {
                            if ( !level_area_ptr )
                              goto LABEL_76;
                            if ( *(_BYTE *)(((unsigned __int64)&level_area_ptr->priority >> 3) + 0x7FFF8000) != 0
                              && *(_BYTE *)(((unsigned __int64)&level_area_ptr->priority >> 3) + 0x7FFF8000) <= 3 )
                            {
                              __asan_report_load4(&level_area_ptr->priority);
                            }
                            priority = level_area_ptr->priority;
                            if ( *(_BYTE *)(((unsigned __int64)&level_area->priority >> 3) + 0x7FFF8000) != 0
                              && *(_BYTE *)(((unsigned __int64)&level_area->priority >> 3) + 0x7FFF8000) <= 3 )
                            {
                              __asan_report_load4(&level_area->priority);
                            }
                            if ( priority < level_area->priority )
                              goto LABEL_76;
                            if ( level_area_ptr->priority == level_area->priority )
                            {
                              if ( *(_BYTE *)(((unsigned __int64)&level_area_ptr->level >> 3) + 0x7FFF8000) != 0
                                && (char)((((_BYTE)level_area_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area_ptr->level >> 3)
                                                                                             + 0x7FFF8000) )
                              {
                                __asan_report_load4(&level_area_ptr->level);
                              }
                              level = level_area_ptr->level;
                              if ( *(_BYTE *)(((unsigned __int64)&level_area->level >> 3) + 0x7FFF8000) != 0
                                && (char)((((_BYTE)level_area + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area->level >> 3)
                                                                                         + 0x7FFF8000) )
                              {
                                __asan_report_load4(&level_area->level);
                              }
                              if ( level < level_area->level )
LABEL_76:
                                level_area_ptr = level_area;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
                __gnu_cxx::__normal_iterator<data::ConfigLevelArea const*,std::vector<data::ConfigLevelArea>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigLevelArea*,std::vector<data::ConfigLevelArea> > *const)(v3 + 224));
              }
              *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
            }
          }
        }
      }
      __gnu_cxx::__normal_iterator<data::ConfigLevelBlock const*,std::vector<data::ConfigLevelBlock>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigLevelBlock*,std::vector<data::ConfigLevelBlock> > *const)(v3 + 160));
    }
    result = level_area_ptr;
  }
  if ( v39 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 6191: range 000000000F2B4B62-000000000F2B6A4A
int32_t __cdecl JsonConfigMgr::rewriteCoopConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int v5; // esi
  std::string *p_coop_json_base_dir; // rsi
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  _DWORD *v14; // rax
  __int64 v15; // rsi
  unsigned int v16; // ecx
  char v17; // al
  char *v18; // rsi
  bool *v19; // r8
  unsigned int v20; // ecx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,bool>,false,false>,bool> v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  int v30; // ecx
  char v31; // al
  __int64 v32; // rsi
  int v33; // ecx
  char v34; // dl
  unsigned int v35; // ecx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  int v38; // ecx
  char v39; // dl
  MainCoopJsonConfig *v40; // r8
  std::unordered_map<unsigned int,std::pair<bool,int>>::key_type v41; // ecx
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  __int64 value; // rsi
  const bool *p_is_coop_var; // rdx
  std::pair<bool,int> *v46; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,MainCoopJsonConfig>,false,false>,bool> v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rdx
  unsigned __int64 v50; // rax
  _DWORD *v51; // rax
  int32_t ret; // [rsp+14h] [rbp-99Ch]
  std::unordered_map<unsigned int,unsigned int> *__for_range; // [rsp+20h] [rbp-990h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference __in; // [rsp+28h] [rbp-988h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *main_coop_id; // [rsp+30h] [rbp-980h]
  std::unordered_map<unsigned int,data::CoopSavePoint> *__for_range_0; // [rsp+40h] [rbp-970h]
  std::unordered_map<unsigned int,data::CoopTempValue> *__for_range_1; // [rsp+48h] [rbp-968h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopTempValue>,false,false>::reference v60; // [rsp+50h] [rbp-960h]
  std::tuple_element<0,std::pair<unsigned int const,data::CoopTempValue> >::type *id_0; // [rsp+58h] [rbp-958h]
  std::tuple_element<1,const std::pair<unsigned int const,data::CoopTempValue> >::type *temp_var; // [rsp+60h] [rbp-950h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopSavePoint>,false,false>::reference v63; // [rsp+68h] [rbp-948h]
  std::tuple_element<0,std::pair<unsigned int const,data::CoopSavePoint> >::type *id; // [rsp+70h] [rbp-940h]
  std::tuple_element<1,std::pair<unsigned int const,data::CoopSavePoint> >::type *save_point; // [rsp+78h] [rbp-938h]
  char v66[2352]; // [rsp+80h] [rbp-930h] BYREF

  v2 = (unsigned __int64)v66;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2304LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "24 32 4 9 <unknown> 48 8 16 __for_begin:6194 80 8 14 __for_end:6194 112 8 16 __for_begin:6222 14"
                        "4 8 14 __for_end:6222 176 8 16 __for_begin:6260 208 8 14 __for_end:6260 240 8 9 <unknown> 272 32"
                        " 21 coop_config_path:6196 336 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 32 9 <unk"
                        "nown> 592 32 9 <unknown> 656 32 9 <unknown> 720 32 9 <unknown> 784 32 9 <unknown> 848 32 9 <unkn"
                        "own> 912 32 9 <unknown> 976 32 9 <unknown> 1040 40 9 root:6197 1120 128 26 main_coop_json_config"
                        ":6220 1280 304 21 main_coop_config:6212 1648 520 8 ifs:6198";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::rewriteCoopConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -219021312;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -219021312;
  v4[536862752] = 62194;
  v4[536862753] = -234881024;
  v4[536862754] = -218959118;
  v4[536862759] = -218959118;
  v4[536862769] = -219021312;
  v4[536862770] = -218959118;
  v4[536862771] = 62194;
  v4[536862787] = -218103808;
  v4[536862788] = -202116109;
  v4[536862789] = -202116109;
  v4[536862790] = -202116109;
  v4[536862791] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.coop_config_mgr.main_coop_to_series_map;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,unsigned int>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v2 + 80) = std::unordered_map<unsigned int,unsigned int>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 80)) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 48));
    main_coop_id = std::get<0ul,unsigned int const,unsigned int>(__in);
    std::get<1ul,unsigned int const,unsigned int>(__in);
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)main_coop_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)main_coop_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)main_coop_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(main_coop_id);
    }
    v5 = *main_coop_id;
    if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
    {
      v5 = 32;
      __asan_report_store_n(v2 + 336, 32LL);
    }
    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v2 + 336), v5);
    p_coop_json_base_dir = &config->coop_json_base_dir;
    if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
    {
      p_coop_json_base_dir = (std::string *)32;
      __asan_report_store_n(v2 + 400, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 400), p_coop_json_base_dir, (std::string *)(v2 + 336));
    if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 272, 32LL);
    }
    std::operator+<char>((std::string *)(v2 + 272), (std::string *)(v2 + 400), ".json");
    std::string::~string((void *)(v2 + 400));
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v2 + 336));
    *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
    v7 = ((v2 + 1040) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    Json::Value::Value(v2 + 1040, 0LL);
    __asan_unpoison_stack_memory(v2 + 1648, 520LL);
    std::ifstream::basic_ifstream(v2 + 1648, v2 + 272, 8LL);
    if ( (unsigned __int8)std::ios::operator!(v2 + 1904) )
    {
      *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 464) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 464, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 464),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "rewriteCoopConfig",
        6201);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 464),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v8, (const char (*)[46])byte_1A52DA00);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, main_coop_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 464));
      *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      if ( parseJsonFile((const std::string *)(v2 + 272), (Json::Value *)(v2 + 1040)) )
      {
        __asan_unpoison_stack_memory(v2 + 1280, 304LL);
        data::ConfigMainCoopGroup::ConfigMainCoopGroup((data::ConfigMainCoopGroup *const)(v2 + 1280));
        if ( !data::ConfigMainCoopGroup::fromJson(
                (data::ConfigMainCoopGroup *const)(v2 + 1280),
                (const Json::Value *)(v2 + 1040)) )
        {
          *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 592) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 592, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 592),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteCoopConfig",
            6215);
          v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 592),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v13 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v12,
                  (const char (*)[25])"mapFromJson fails, path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 272));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 592));
          *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
          goto LABEL_109;
        }
        v14 = (_DWORD *)(((v2 + 1120) >> 3) + 2147450880);
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
        v14[3] = 0;
        MainCoopJsonConfig::MainCoopJsonConfig((MainCoopJsonConfig *const)(v2 + 1120));
        v15 = ((unsigned __int8)main_coop_id & 7u) + 3;
        if ( *(_BYTE *)(((unsigned __int64)main_coop_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)main_coop_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)main_coop_id >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(main_coop_id);
        }
        v16 = *main_coop_id;
        v17 = *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000);
        LOBYTE(v15) = v17 != 0;
        if ( v17 != 0 && v17 <= 3 )
          __asan_report_store4(v2 + 1120, v15);
        *(_DWORD *)(v2 + 1120) = v16;
        __for_range_0 = (std::unordered_map<unsigned int,data::CoopSavePoint> *)(v2 + 1392);
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 112, v15);
        *(std::unordered_map<unsigned int,data::CoopSavePoint>::iterator *)(v2 + 112) = std::unordered_map<unsigned int,data::CoopSavePoint>::begin(__for_range_0);
        *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 144, v15);
        *(std::unordered_map<unsigned int,data::CoopSavePoint>::iterator *)(v2 + 144) = std::unordered_map<unsigned int,data::CoopSavePoint>::end(__for_range_0);
        while ( 1 )
        {
          v18 = (char *)(v2 + 144);
          if ( !std::__detail::operator!=<std::pair<unsigned int const,data::CoopSavePoint>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CoopSavePoint>,false> *)(v2 + 112),
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CoopSavePoint>,false> *)(v2 + 144)) )
            break;
          v63 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopSavePoint>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopSavePoint>,false,false> *const)(v2 + 112));
          id = std::get<0ul,unsigned int const,data::CoopSavePoint>(v63);
          save_point = std::get<1ul,unsigned int const,data::CoopSavePoint>(v63);
          if ( *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(id);
          }
          v20 = *id;
          if ( *(_BYTE *)(((unsigned __int64)save_point >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)save_point & 7) + 3) >= *(_BYTE *)(((unsigned __int64)save_point >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(save_point);
          }
          if ( v20 == save_point->id )
          {
            v25 = std::unordered_map<unsigned int,bool>::emplace<unsigned int const&,bool &>(
                    (std::unordered_map<unsigned int,bool> *const)(v2 + 1128),
                    id,
                    &save_point->is_end,
                    (const unsigned int *)(v2 + 1128),
                    v19);
            if ( !v25.second )
            {
              *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 720) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 720, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 720),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "rewriteCoopConfig",
                6232);
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 720),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v27 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      v26,
                      (const char (*)[24])"duplicate main_coop_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, main_coop_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 720));
              *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
          }
          else
          {
            *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 656) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 656, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 656),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "rewriteCoopConfig",
              6226);
            v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 656),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v22 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                    v21,
                    (const char (*)[47])byte_1A52DAA0);
            v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, id);
            v24 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v23, (const char (*)[8])", path:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, (const std::string *)(v2 + 272));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 656));
            *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopSavePoint>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopSavePoint>,false,false> *const)(v2 + 112));
        }
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
        if ( *(_BYTE *)(((v2 + 1448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1448) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 1448);
        if ( *(_DWORD *)(v2 + 1448) )
        {
          if ( *(_BYTE *)(((v2 + 1448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1448) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 1448);
          v30 = *(_DWORD *)(v2 + 1448);
          v31 = *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000);
          if ( v31 != 0 && v31 <= 3 )
          {
            LOBYTE(v18) = v31 != 0;
            __asan_report_store4(v2 + 1184, v18);
          }
          *(_DWORD *)(v2 + 1184) = v30;
          v32 = (((_BYTE)v2 - 84) & 7u) + 3;
          if ( *(_BYTE *)(((v2 + 1452) >> 3) + 0x7FFF8000) != 0
            && (char)(((v2 - 84) & 7) + 3) >= *(_BYTE *)(((v2 + 1452) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v2 + 1452);
          }
          if ( *(_DWORD *)(v2 + 1452) )
          {
            if ( *(_BYTE *)(((v2 + 1452) >> 3) + 0x7FFF8000) != 0
              && (char)(((v2 - 84) & 7) + 3) >= *(_BYTE *)(((v2 + 1452) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v2 + 1452);
            }
            v35 = *(_DWORD *)(v2 + 1452);
            if ( *(_BYTE *)(((v2 + 1448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1448) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v2 + 1448);
            if ( v35 < *(_DWORD *)(v2 + 1448) )
            {
              *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 848) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 848, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 848),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "rewriteCoopConfig",
                6251);
              v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 848),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v37 = common::milog::MiLogStream::operator<<<char [76],(char *[76])0>(
                      v36,
                      (const char (*)[76])byte_1A52DC00);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, main_coop_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 848));
              *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
              goto LABEL_108;
            }
            v32 = (((_BYTE)v2 - 84) & 7u) + 3;
            if ( *(_BYTE *)(((v2 + 1452) >> 3) + 0x7FFF8000) != 0
              && (char)(((v2 - 84) & 7) + 3) >= *(_BYTE *)(((v2 + 1452) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v2 + 1452);
            }
            v38 = *(_DWORD *)(v2 + 1452);
            v39 = *(_BYTE *)(((v2 + 1188) >> 3) + 0x7FFF8000);
            LOBYTE(v32) = v39 != 0;
            if ( v39 != 0 && (char)(((v2 - 92) & 7) + 3) >= v39 )
              __asan_report_store4(v2 + 1188, v32);
            *(_DWORD *)(v2 + 1188) = v38;
          }
          else
          {
            v33 = *(_DWORD *)(v2 + 1184);
            v34 = *(_BYTE *)(((v2 + 1188) >> 3) + 0x7FFF8000);
            LOBYTE(v32) = v34 != 0;
            if ( v34 != 0 && (char)(((v2 - 92) & 7) + 3) >= v34 )
              __asan_report_store4(v2 + 1188, v32);
            *(_DWORD *)(v2 + 1188) = v33;
          }
          __for_range_1 = (std::unordered_map<unsigned int,data::CoopTempValue> *)(v2 + 1520);
          *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 176, v32);
          *(std::unordered_map<unsigned int,data::CoopTempValue>::iterator *)(v2 + 176) = std::unordered_map<unsigned int,data::CoopTempValue>::begin(__for_range_1);
          *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 208, v32);
          *(std::unordered_map<unsigned int,data::CoopTempValue>::iterator *)(v2 + 208) = std::unordered_map<unsigned int,data::CoopTempValue>::end(__for_range_1);
          while ( std::__detail::operator!=<std::pair<unsigned int const,data::CoopTempValue>,false>(
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CoopTempValue>,false> *)(v2 + 176),
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CoopTempValue>,false> *)(v2 + 208)) )
          {
            v60 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopTempValue>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopTempValue>,false,false> *const)(v2 + 176));
            id_0 = std::get<0ul,unsigned int const,data::CoopTempValue>(v60);
            temp_var = (std::tuple_element<1,const std::pair<unsigned int const,data::CoopTempValue> >::type *)std::get<1ul,unsigned int const,data::CoopTempValue>(v60);
            if ( *(_BYTE *)(((unsigned __int64)id_0 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id_0 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(id_0);
            }
            v41 = *id_0;
            if ( *(_BYTE *)(((unsigned __int64)temp_var >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)temp_var & 7) + 3) >= *(_BYTE *)(((unsigned __int64)temp_var >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(temp_var);
            }
            if ( v41 == temp_var->id )
            {
              *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
              if ( *(_BYTE *)(((unsigned __int64)&temp_var->value >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)temp_var + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&temp_var->value >> 3)
                                                                       + 0x7FFF8000) )
              {
                __asan_report_load4(&temp_var->value);
              }
              value = temp_var->value;
              if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v2 + 32, value);
              *(_DWORD *)(v2 + 32) = value;
              p_is_coop_var = &temp_var->is_coop_var;
              if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 240, value);
              *(std::pair<bool,int> *)(v2 + 240) = std::make_pair<bool const&,int>(p_is_coop_var, (int *)(v2 + 32));
              v46 = std::unordered_map<unsigned int,std::pair<bool,int>>::operator[](
                      (std::unordered_map<unsigned int,std::pair<bool,int>> *const)(v2 + 1192),
                      id_0);
              std::pair<bool,int>::operator=(
                v46,
                (std::conditional<true,std::pair<bool,int>&&,std::__nonesuch_no_braces&&>::type)(v2 + 240));
              *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
            }
            else
            {
              *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 912) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 912, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 912),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "rewriteCoopConfig",
                6265);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 912),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [76],(char *[76])0>(
                      v42,
                      (const char (*)[76])byte_1A52DC80);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, id_0);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 912));
              *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopTempValue>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::CoopTempValue>,false,false> *const)(v2 + 176));
          }
          *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
          v47 = std::unordered_map<unsigned int,MainCoopJsonConfig>::emplace<unsigned int const&,MainCoopJsonConfig&>(
                  &this->config_main_coop_map_,
                  main_coop_id,
                  (MainCoopJsonConfig *)(v2 + 1120),
                  (const unsigned int *)&this->config_main_coop_map_,
                  v40);
          if ( !v47.second )
          {
            *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 976) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 976, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 976),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "rewriteCoopConfig",
              6274);
            v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 976),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v49 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    v48,
                    (const char (*)[41])byte_1A52DD00);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, main_coop_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 976));
            *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
        }
        else
        {
          *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 784) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 784, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 784),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteCoopConfig",
            6239);
          v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 784),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v29 = common::milog::MiLogStream::operator<<<char [71],(char *[71])0>(v28, (const char (*)[71])byte_1A52DB80);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, main_coop_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 784));
          *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
LABEL_108:
        MainCoopJsonConfig::~MainCoopJsonConfig((MainCoopJsonConfig *const)(v2 + 1120));
LABEL_109:
        data::ConfigMainCoopGroup::~ConfigMainCoopGroup((data::ConfigMainCoopGroup *const)(v2 + 1280));
        goto LABEL_110;
      }
      *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 528) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 528, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 528),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "rewriteCoopConfig",
        6208);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 528),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v10,
              (const char (*)[28])"parseJsonFile fails , path:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v2 + 272));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 528));
      *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
LABEL_110:
    std::ifstream::~ifstream(v2 + 1648);
    Json::Value::~Value((Json::Value_0 *const)(v2 + 1040));
    std::string::~string((void *)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    v50 = ((v2 + 1040) >> 3) + 2147450880;
    *(_DWORD *)v50 = -117901064;
    *(_BYTE *)(v50 + 4) = -8;
    __asan_poison_stack_memory(v2 + 1648, 520LL);
    __asan_poison_stack_memory(v2 + 1280, 304LL);
    v51 = (_DWORD *)(((v2 + 1120) >> 3) + 2147450880);
    *v51 = -117901064;
    v51[1] = -117901064;
    v51[2] = -117901064;
    v51[3] = -117901064;
    std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 48));
  }
  if ( v66 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8118) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 288) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2304LL, v66);
  }
  return ret;
};

// Line 6284: range 000000000F2B6A4C-000000000F2B6BA2
bool __fastcall JsonConfigMgr::isMainCoopSavePoint(
        const JsonConfigMgr *const this,
        uint32_t main_coop_id,
        uint32_t save_point_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool result; // al
  const std::unordered_map<unsigned int,MainCoopJsonConfig>::mapped_type *v7; // rax
  char v9[128]; // [rsp+10h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 main_coop_id:6283 64 4 18 save_point_id:6283";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::isMainCoopSavePoint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = main_coop_id;
  *(_DWORD *)(v3 + 64) = save_point_id;
  if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,MainCoopJsonConfig> const,unsigned int>(
          &this->config_main_coop_map_,
          (const unsigned int *)(v3 + 48)) )
  {
    result = 0;
  }
  else
  {
    v7 = std::unordered_map<unsigned int,MainCoopJsonConfig>::at(
           &this->config_main_coop_map_,
           (const std::unordered_map<unsigned int,MainCoopJsonConfig>::key_type *)(v3 + 48));
    result = common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,bool> const,unsigned int>(
               &v7->point_end_map,
               (const unsigned int *)(v3 + 64));
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6294: range 000000000F2B6BA4-000000000F2B6D74
__int64 __fastcall JsonConfigMgr::isMainCoopEndSavePoint(
        const JsonConfigMgr *const this,
        uint32_t main_coop_id,
        uint32_t save_point_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 result; // rax
  const std::unordered_map<unsigned int,MainCoopJsonConfig>::mapped_type *v7; // rax
  const std::unordered_map<unsigned int,MainCoopJsonConfig>::mapped_type *v8; // rax
  char *v9; // rsi
  const std::unordered_map<unsigned int,bool>::mapped_type *v10; // rax
  unsigned __int8 *v11; // rdx
  char v12; // cl
  char v14[128]; // [rsp+10h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 main_coop_id:6293 64 4 18 save_point_id:6293";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::isMainCoopEndSavePoint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = main_coop_id;
  *(_DWORD *)(v3 + 64) = save_point_id;
  if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,MainCoopJsonConfig> const,unsigned int>(
          &this->config_main_coop_map_,
          (const unsigned int *)(v3 + 48)) )
  {
    result = 0LL;
  }
  else
  {
    v7 = std::unordered_map<unsigned int,MainCoopJsonConfig>::at(
           &this->config_main_coop_map_,
           (const std::unordered_map<unsigned int,MainCoopJsonConfig>::key_type *)(v3 + 48));
    if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,bool> const,unsigned int>(
            &v7->point_end_map,
            (const unsigned int *)(v3 + 64)) )
    {
      result = 0LL;
    }
    else
    {
      v8 = std::unordered_map<unsigned int,MainCoopJsonConfig>::at(
             &this->config_main_coop_map_,
             (const std::unordered_map<unsigned int,MainCoopJsonConfig>::key_type *)(v3 + 48));
      v9 = (char *)(v3 + 64);
      v10 = std::unordered_map<unsigned int,bool>::at(
              &v8->point_end_map,
              (const std::unordered_map<unsigned int,bool>::key_type *)(v3 + 64));
      v11 = (unsigned __int8 *)v10;
      v12 = *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000);
      if ( v12 != 0 && ((unsigned __int8)v10 & 7) >= v12 )
      {
        LOBYTE(v9) = v12 != 0;
        __asan_report_load1(v10, v9, v10);
      }
      result = *v11;
    }
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6307: range 000000000F2B6D76-000000000F2B6EA9
__int64 __fastcall JsonConfigMgr::getMainCoopDefaultConfidence(const JsonConfigMgr *const this, uint32_t main_coop_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  __int64 result; // rax
  const std::unordered_map<unsigned int,MainCoopJsonConfig>::mapped_type *v6; // rax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 17 main_coop_id:6306";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::getMainCoopDefaultConfidence;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = main_coop_id;
  if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,MainCoopJsonConfig> const,unsigned int>(
          &this->config_main_coop_map_,
          (const unsigned int *)(v2 + 32)) )
  {
    result = 0LL;
  }
  else
  {
    v6 = std::unordered_map<unsigned int,MainCoopJsonConfig>::at(
           &this->config_main_coop_map_,
           (const std::unordered_map<unsigned int,MainCoopJsonConfig>::key_type *)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v6->default_confidence >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v6->default_confidence >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v6->default_confidence);
    }
    result = v6->default_confidence;
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6316: range 000000000F2B6EAA-000000000F2B6FE6
__int64 __fastcall JsonConfigMgr::getMainCoopMaxConfidence(const JsonConfigMgr *const this, uint32_t main_coop_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  __int64 result; // rax
  const std::unordered_map<unsigned int,MainCoopJsonConfig>::mapped_type *v6; // rdx
  uint32_t *p_max_confidence; // rax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 17 main_coop_id:6315";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::getMainCoopMaxConfidence;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = main_coop_id;
  if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,MainCoopJsonConfig> const,unsigned int>(
          &this->config_main_coop_map_,
          (const unsigned int *)(v2 + 32)) )
  {
    result = 0LL;
  }
  else
  {
    v6 = std::unordered_map<unsigned int,MainCoopJsonConfig>::at(
           &this->config_main_coop_map_,
           (const std::unordered_map<unsigned int,MainCoopJsonConfig>::key_type *)(v2 + 32));
    p_max_confidence = &v6->max_confidence;
    if ( *(_BYTE *)(((unsigned __int64)p_max_confidence >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_max_confidence & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_max_confidence >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(p_max_confidence);
    }
    result = v6->max_confidence;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6325: range 000000000F2B6FE8-000000000F2B71A9
const MainCoopJsonConfig *__fastcall JsonConfigMgr::findMainCoopJsonConfig(
        const JsonConfigMgr *const this,
        __int64 main_coop_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,MainCoopJsonConfig> *p_config_main_coop_map; // rdx
  std::unordered_map<unsigned int,MainCoopJsonConfig> *v6; // rdx
  bool v7; // al
  const MainCoopJsonConfig *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 17 main_coop_id:6324 64 8 9 iter:6326 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findMainCoopJsonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = main_coop_id;
  p_config_main_coop_map = &this->config_main_coop_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, main_coop_id);
  *(std::unordered_map<unsigned int,MainCoopJsonConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,MainCoopJsonConfig>::find(
                                                                                        p_config_main_coop_map,
                                                                                        (const std::unordered_map<unsigned int,MainCoopJsonConfig>::key_type *)(v2 + 48));
  v6 = &this->config_main_coop_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,MainCoopJsonConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,MainCoopJsonConfig>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,MainCoopJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,MainCoopJsonConfig>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,MainCoopJsonConfig>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,MainCoopJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,MainCoopJsonConfig>,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6336: range 000000000F2B71AA-000000000F2B74D4
bool __fastcall JsonConfigMgr::isCoopVar(const JsonConfigMgr *const this, __int64 main_coop_id, uint32_t key)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,MainCoopJsonConfig> *p_config_main_coop_map; // rdx
  std::unordered_map<unsigned int,MainCoopJsonConfig> *v7; // rdx
  bool v8; // al
  bool result; // al
  std::unordered_map<unsigned int,std::pair<bool,int>> *p_temp_var_map; // rdx
  std::unordered_map<unsigned int,std::pair<bool,int>> *v11; // rdx
  bool v12; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<bool,int> >,false,false>::pointer v13; // rax
  _DWORD *p_first; // rdx
  char v16[224]; // [rsp+10h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 17 main_coop_id:6335 48 4 8 key:6335 64 8 9 iter:6337 96 8 9 <unknown> 128 8 13 var_iter:"
                        "6342 160 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::isCoopVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -202116352;
  *(_DWORD *)(v3 + 32) = main_coop_id;
  *(_DWORD *)(v3 + 48) = key;
  p_config_main_coop_map = &this->config_main_coop_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, main_coop_id);
  *(std::unordered_map<unsigned int,MainCoopJsonConfig>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,MainCoopJsonConfig>::find(
                                                                                        p_config_main_coop_map,
                                                                                        (const std::unordered_map<unsigned int,MainCoopJsonConfig>::key_type *)(v3 + 32));
  v7 = &this->config_main_coop_map_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::unordered_map<unsigned int,MainCoopJsonConfig>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,MainCoopJsonConfig>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,MainCoopJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,MainCoopJsonConfig>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,MainCoopJsonConfig>,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0;
  }
  else
  {
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    p_temp_var_map = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,MainCoopJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,MainCoopJsonConfig>,false,false> *const)(v3 + 64))->second.temp_var_map;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v3 + 96);
    *(std::unordered_map<unsigned int,std::pair<bool,int>>::const_iterator *)(v3 + 128) = std::unordered_map<unsigned int,std::pair<bool,int>>::find(
                                                                                            p_temp_var_map,
                                                                                            (const std::unordered_map<unsigned int,std::pair<bool,int>>::key_type *)(v3 + 48));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    v11 = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,MainCoopJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,MainCoopJsonConfig>,false,false> *const)(v3 + 64))->second.temp_var_map;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v3 + 48);
    *(std::unordered_map<unsigned int,std::pair<bool,int>>::const_iterator *)(v3 + 160) = std::unordered_map<unsigned int,std::pair<bool,int>>::end(v11);
    v12 = std::__detail::operator==<std::pair<unsigned int const,std::pair<bool,int>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<bool,int> >,false> *)(v3 + 128),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<bool,int> >,false> *)(v3 + 160));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v12 )
    {
      result = 0;
    }
    else
    {
      v13 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<bool,int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<bool,int> >,false,false> *const)(v3 + 128));
      p_first = &v13->first;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v13);
      }
      result = *p_first != 0;
    }
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6351: range 000000000F2B74D6-000000000F2B7B4D
int32_t __cdecl JsonConfigMgr::rewriteHomeModuleConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  unsigned int first; // ecx
  char v7; // al
  uint32_t world_scene_id; // ecx
  char v9; // al
  std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  std::unordered_map<unsigned int,SceneJsonConfig> *v11; // rax
  bool v12; // al
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::pointer v18; // rax
  __int64 v19; // rsi
  uint32_t RoomSceneIdByFurnitureId; // ecx
  char v21; // dl
  int32_t result; // eax
  int32_t ret; // [rsp+18h] [rbp-148h]
  uint32_t main_house_furniture_id; // [rsp+1Ch] [rbp-144h]
  data::HomeworldModuleExcelConfigMap *__for_range; // [rsp+28h] [rbp-138h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false,false>::reference p; // [rsp+30h] [rbp-130h]
  char v28[288]; // [rsp+40h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 4 14 module_id:6356 48 4 19 world_scene_id:6358 64 8 16 __for_begin:6354 96 8 14 __for_end:"
                        "6354 128 8 9 iter:6359 160 8 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::rewriteHomeModuleConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -202116109;
  ret = 0;
  __for_range = &config->txt_config_mgr.home_config_mgr.homeworld_module_excel_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,data::HomeworldModuleExcelConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::HomeworldModuleExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::unordered_map<unsigned int,data::HomeworldModuleExcelConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::HomeworldModuleExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false> *)(v2 + 96)) )
      break;
    p = std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false,false> *const)(v2 + 64));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p);
    }
    first = p->first;
    v7 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(v2 + 32, v5);
    }
    *(_DWORD *)(v2 + 32) = first;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&p->second.world_scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&p->second.world_scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&p->second.world_scene_id);
    }
    world_scene_id = p->second.world_scene_id;
    v9 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
    LOBYTE(v5) = v9 != 0;
    if ( v9 != 0 && v9 <= 3 )
      __asan_report_store4(v2 + 48, v5);
    *(_DWORD *)(v2 + 48) = world_scene_id;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    p_scene_json_config_map = &this->scene_json_config_map_;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      p_scene_json_config_map = (std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v2 + 128, v5);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 128) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                                  p_scene_json_config_map,
                                                                                  (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v2 + 48));
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    v11 = &this->scene_json_config_map_;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      v11 = (std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v2 + 160, v2 + 48);
    *(std::unordered_map<unsigned int,SceneJsonConfig>::iterator *)(v2 + 160) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v11);
    v12 = std::__detail::operator==<std::pair<unsigned int const,SceneJsonConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 128),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 160));
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v12 )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "rewriteHomeModuleConfig",
        6362);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v13, (const char (*)[14])byte_1A52DF60);
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v2 + 32));
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v15, (const char (*)[16])byte_1A52DFA0);
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v17, (const char (*)[36])byte_1A52DFE0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      v18 = std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&v18->second.home_config.main_house >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v18->second.home_config.main_house >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v18->second.home_config.main_house);
      }
      main_house_furniture_id = v18->second.home_config.main_house.furniture_id;
      v19 = main_house_furniture_id;
      RoomSceneIdByFurnitureId = HomeWorldExcelConfigMgr::getRoomSceneIdByFurnitureId(
                                   &config->txt_config_mgr.home_config_mgr,
                                   main_house_furniture_id);
      v21 = *(_BYTE *)(((unsigned __int64)&p->second.default_room_scene_id >> 3) + 0x7FFF8000);
      if ( v21 != 0 && (char)((((_BYTE)p + 28) & 7) + 3) >= v21 )
      {
        LOBYTE(v19) = v21 != 0;
        __asan_report_store4(&p->second.default_room_scene_id, v19);
      }
      p->second.default_room_scene_id = RoomSceneIdByFurnitureId;
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::HomeworldModuleExcelConfig>,false,false> *const)(v2 + 64));
  }
  result = ret;
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6376: range 000000000F2B7B4E-000000000F2B7D03
const data::ConfigSceneHomeInfo *__fastcall JsonConfigMgr::findSceneHomeConfig(
        const JsonConfigMgr *const this,
        __int64 scene_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  const std::unordered_map<unsigned int,SceneJsonConfig> *v6; // rax
  bool v7; // al
  const data::ConfigSceneHomeInfo *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 scene_id:6375 64 8 9 iter:6377 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findSceneHomeConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = scene_id;
  p_scene_json_config_map = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    p_scene_json_config_map = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(
                                                                                          v2 + 64,
                                                                                          scene_id);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                                     p_scene_json_config_map,
                                                                                     (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v2 + 48));
  v6 = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    v6 = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,SceneJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v2 + 64))->second.home_config;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6387: range 000000000F2B7D04-000000000F2B80AC
std::vector<data::ConfigWeekendDjinn>::const_reference __fastcall JsonConfigMgr::findWeekendDjinnPosConfig(
        const JsonConfigMgr *const this,
        __int64 scene_id,
        uint32_t block_id,
        uint32_t index)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::unordered_map<unsigned int,SceneJsonConfig> *p_scene_json_config_map; // rax
  const std::unordered_map<unsigned int,SceneJsonConfig> *v8; // rax
  char *v9; // rsi
  bool v10; // al
  std::vector<data::ConfigWeekendDjinn>::const_reference result; // rax
  const data::ConfigHomeBlock *home_block_config_ptr; // [rsp+28h] [rbp-F8h]
  data::ConfigHomeBlockList *__for_range; // [rsp+30h] [rbp-F0h]
  __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> >::reference home_block_config; // [rsp+38h] [rbp-E8h]
  char v17[224]; // [rsp+40h] [rbp-E0h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 13 scene_id:6386 64 8 9 iter:6388 96 8 9 <unknown> 128 8 16 __for_begin:6394 160 8 14 __for_end:6394";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findWeekendDjinnPosConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -202116352;
  *(_DWORD *)(v4 + 48) = scene_id;
  p_scene_json_config_map = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    p_scene_json_config_map = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(
                                                                                          v4 + 64,
                                                                                          scene_id);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,SceneJsonConfig>::find(
                                                                                     p_scene_json_config_map,
                                                                                     (const std::unordered_map<unsigned int,SceneJsonConfig>::key_type *)(v4 + 48));
  v8 = &this->scene_json_config_map_;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    v8 = (const std::unordered_map<unsigned int,SceneJsonConfig> *)__asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<unsigned int,SceneJsonConfig>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,SceneJsonConfig>::end(v8);
  v9 = (char *)(v4 + 96);
  v10 = std::__detail::operator==<std::pair<unsigned int const,SceneJsonConfig>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v4 + 64),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,SceneJsonConfig>,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v10 )
  {
    result = 0LL;
  }
  else
  {
    home_block_config_ptr = 0LL;
    __for_range = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,SceneJsonConfig>,false,false> *const)(v4 + 64))->second.home_config.block_arrangement_info_list;
    *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 128, v9);
    *(std::vector<data::ConfigHomeBlock>::const_iterator *)(v4 + 128) = std::vector<data::ConfigHomeBlock>::begin(__for_range);
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 160, v9);
    *(std::vector<data::ConfigHomeBlock>::const_iterator *)(v4 + 160) = std::vector<data::ConfigHomeBlock>::end(__for_range);
    while ( __gnu_cxx::operator!=<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *)(v4 + 128),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *)(v4 + 160)) )
    {
      home_block_config = __gnu_cxx::__normal_iterator<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *const)(v4 + 128));
      if ( *(_BYTE *)(((unsigned __int64)home_block_config >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)home_block_config >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(home_block_config);
      }
      if ( block_id == home_block_config->block_id )
      {
        home_block_config_ptr = home_block_config;
        break;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeBlock const*,std::vector<data::ConfigHomeBlock>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeBlock*,std::vector<data::ConfigHomeBlock> > *const)(v4 + 128));
    }
    *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( home_block_config_ptr )
    {
      if ( index < std::vector<data::ConfigWeekendDjinn>::size(&home_block_config_ptr->weekend_djinn_info_list) )
        result = std::vector<data::ConfigWeekendDjinn>::operator[](
                   &home_block_config_ptr->weekend_djinn_info_list,
                   index);
      else
        result = 0LL;
    }
    else
    {
      result = 0LL;
    }
  }
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6414: range 000000000F2B80AE-000000000F2B83F2
const data::ConfigHomeworldBlockAutoGen *__fastcall JsonConfigMgr::findHomeBlockAutoGenConfig(
        const JsonConfigMgr *const this,
        __int64 scene_id,
        uint32_t block_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen> *p_home_scene_auto_gen_json_config_map; // rdx
  std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen> *v7; // rdx
  char *v8; // rsi
  bool v9; // al
  const data::ConfigHomeworldBlockAutoGen *result; // rax
  __gnu_cxx::__normal_iterator<const data::ConfigHomeworldBlockAutoGen*,std::vector<data::ConfigHomeworldBlockAutoGen> >::reference v11; // rax
  const data::ConfigHomeworldBlockAutoGen *home_block_auto_gen_config_ptr; // [rsp+18h] [rbp-F8h]
  data::ConfigHomeworldBlockAutoGenList *__for_range; // [rsp+20h] [rbp-F0h]
  const data::ConfigHomeworldBlockAutoGen *home_block_auto_gen_config; // [rsp+28h] [rbp-E8h]
  char v16[224]; // [rsp+30h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 13 scene_id:6413 64 8 9 iter:6415 96 8 9 <unknown> 128 8 16 __for_begin:6421 160 8 14 __for_end:6421";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findHomeBlockAutoGenConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -202116352;
  *(_DWORD *)(v3 + 48) = scene_id;
  p_home_scene_auto_gen_json_config_map = &this->home_scene_auto_gen_json_config_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, scene_id);
  *(std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen>::find(p_home_scene_auto_gen_json_config_map, (const std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen>::key_type *)(v3 + 48));
  v7 = &this->home_scene_auto_gen_json_config_map_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::ConfigHomeworldSceneAutoGen>::end(v7);
  v8 = (char *)(v3 + 96);
  v9 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigHomeworldSceneAutoGen>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeworldSceneAutoGen>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeworldSceneAutoGen>,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    result = 0LL;
  }
  else
  {
    home_block_auto_gen_config_ptr = 0LL;
    __for_range = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigHomeworldSceneAutoGen>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigHomeworldSceneAutoGen>,false,false> *const)(v3 + 64))->second.block_list;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v8);
    *(std::vector<data::ConfigHomeworldBlockAutoGen>::const_iterator *)(v3 + 128) = std::vector<data::ConfigHomeworldBlockAutoGen>::begin(__for_range);
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v8);
    *(std::vector<data::ConfigHomeworldBlockAutoGen>::const_iterator *)(v3 + 160) = std::vector<data::ConfigHomeworldBlockAutoGen>::end(__for_range);
    while ( __gnu_cxx::operator!=<data::ConfigHomeworldBlockAutoGen const*,std::vector<data::ConfigHomeworldBlockAutoGen>>(
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeworldBlockAutoGen*,std::vector<data::ConfigHomeworldBlockAutoGen> > *)(v3 + 128),
              (const __gnu_cxx::__normal_iterator<const data::ConfigHomeworldBlockAutoGen*,std::vector<data::ConfigHomeworldBlockAutoGen> > *)(v3 + 160)) )
    {
      v11 = __gnu_cxx::__normal_iterator<data::ConfigHomeworldBlockAutoGen const*,std::vector<data::ConfigHomeworldBlockAutoGen>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigHomeworldBlockAutoGen*,std::vector<data::ConfigHomeworldBlockAutoGen> > *const)(v3 + 128));
      home_block_auto_gen_config = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      if ( block_id == home_block_auto_gen_config->block_id )
      {
        home_block_auto_gen_config_ptr = home_block_auto_gen_config;
        break;
      }
      __gnu_cxx::__normal_iterator<data::ConfigHomeworldBlockAutoGen const*,std::vector<data::ConfigHomeworldBlockAutoGen>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigHomeworldBlockAutoGen*,std::vector<data::ConfigHomeworldBlockAutoGen> > *const)(v3 + 128));
    }
    result = home_block_auto_gen_config_ptr;
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6433: range 000000000F2B83F4-000000000F2B85B5
const FurnitureSuiteJsonConfig *__fastcall JsonConfigMgr::findFurnitureSuiteJsonConfig(
        const JsonConfigMgr *const this,
        __int64 suite_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,FurnitureSuiteJsonConfig> *p_furniture_suite_map; // rdx
  std::unordered_map<unsigned int,FurnitureSuiteJsonConfig> *v6; // rdx
  bool v7; // al
  const FurnitureSuiteJsonConfig *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 suite_id:6432 64 8 9 iter:6434 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findFurnitureSuiteJsonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = suite_id;
  p_furniture_suite_map = &this->furniture_suite_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, suite_id);
  *(std::unordered_map<unsigned int,FurnitureSuiteJsonConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,FurnitureSuiteJsonConfig>::find(
                                                                                              p_furniture_suite_map,
                                                                                              (const std::unordered_map<unsigned int,FurnitureSuiteJsonConfig>::key_type *)(v2 + 48));
  v6 = &this->furniture_suite_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,FurnitureSuiteJsonConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,FurnitureSuiteJsonConfig>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,FurnitureSuiteJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,FurnitureSuiteJsonConfig>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,FurnitureSuiteJsonConfig>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,FurnitureSuiteJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,FurnitureSuiteJsonConfig>,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6443: range 000000000F2B85B6-000000000F2B87B5
const data::ConfigClimateArea *__fastcall JsonConfigMgr::findClimateAreaConfig(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t climate_area_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const data::ConfigClimateArea *result; // rax
  bool v7; // al
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+10h] [rbp-B0h]
  const std::unordered_map<unsigned int,data::ConfigClimateArea> *config_climate_area_map; // [rsp+18h] [rbp-A8h]
  char v11[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 20 climate_area_id:6442 64 8 9 iter:6450 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findClimateAreaConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = climate_area_id;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, scene_id);
  if ( scene_json_config_ptr )
  {
    config_climate_area_map = &scene_json_config_ptr->config_climate_area_map;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 64, scene_id);
    *(std::unordered_map<unsigned int,data::ConfigClimateArea>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::ConfigClimateArea>::find(
                                                                                               config_climate_area_map,
                                                                                               (const std::unordered_map<unsigned int,data::ConfigClimateArea>::key_type *)(v3 + 48));
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, v3 + 48);
    *(std::unordered_map<unsigned int,data::ConfigClimateArea>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::ConfigClimateArea>::end(config_climate_area_map);
    v7 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigClimateArea>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)(v3 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v7 )
      result = 0LL;
    else
      result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false> *const)(v3 + 64))->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6459: range 000000000F2B87B6-000000000F2B89F8
// local variable allocation has failed, the output may be wrong!
data::ConfigClimateInfoPtr __cdecl JsonConfigMgr::findClimateInfoConfig(
        const JsonConfigMgr *const this,
        data::JsonClimateType json_climate_type)
{
  data::JsonClimateType v2; // edx
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>> *v6; // rcx
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>> *v7; // rdx
  bool v8; // al
  data::ConfigClimateInfoPtr result; // rax
  std::shared_ptr<data::ConfigClimateInfo> *p_second; // rdx
  data::JsonClimateType json_climate_typea; // [rsp+Ch] [rbp-B4h]
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  json_climate_typea = v2;
  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 9 <unknown> 64 8 9 iter:6460 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findClimateInfoConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  v6 = (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>> *)(*(_QWORD *)&json_climate_type
                                                                                         + 6056LL);
  if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 48, (unsigned int)json_climate_typea);
  *(_DWORD *)(v3 + 48) = json_climate_typea;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, (unsigned int)json_climate_typea);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>>::find(v6, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>>::key_type *)(v3 + 48));
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
  v7 = (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>> *)(*(_QWORD *)&json_climate_type
                                                                                         + 6056LL);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigClimateInfo>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<data::ConfigClimateInfo>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigClimateInfo> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigClimateInfo> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    std::shared_ptr<data::ConfigClimateInfo>::shared_ptr((std::shared_ptr<data::ConfigClimateInfo> *const)this, 0LL);
  }
  else
  {
    p_second = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigClimateInfo>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigClimateInfo> >,false,false> *const)(v3 + 64))->second;
    std::shared_ptr<data::ConfigClimateInfo>::shared_ptr(
      (std::shared_ptr<data::ConfigClimateInfo> *const)this,
      p_second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigClimateInfo,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 6469: range 000000000F2B89FA-000000000F2B8A38
bool __cdecl JsonConfigMgr::isTransClimate(data::JsonClimateType json_climate_type)
{
  return (unsigned int)json_climate_type <= TsurumiRegionalMist && ((1LL << json_climate_type) & 0x2A00) != 0;
};

// Line 6484: range 000000000F2B8A3A-000000000F2B8A77
proto::EnterReason __cdecl JsonConfigMgr::getTransClimateEnterSceneReason(data::JsonClimateType json_climate_type)
{
  if ( json_climate_type == TsurumiRegionalMist )
    return 76;
  if ( json_climate_type > TsurumiRegionalMist )
    return 73;
  if ( json_climate_type == TransClimate )
    return 73;
  if ( json_climate_type == TsurumiMist )
    return 75;
  else
    return 73;
};

// Line 6501: range 000000000F2B8A78-000000000F2B8B75
const ConfigSceneWeatherArea *__fastcall JsonConfigMgr::findConfigSceneWeatherArea(
        const JsonConfigMgr *const this,
        uint32_t scene_id,
        uint32_t weather_area_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  const ConfigSceneWeatherArea *result; // rax
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+18h] [rbp-68h]
  char v9[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 20 weather_area_id:6500";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findConfigSceneWeatherArea;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = weather_area_id;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, scene_id);
  if ( scene_json_config_ptr )
    result = common::tools::MiscUtils::findMapValuePointer<std::unordered_map<unsigned int,ConfigSceneWeatherArea> const>(
               &scene_json_config_ptr->config_scene_weather_area_map,
               (const std::unordered_map<unsigned int,ConfigSceneWeatherArea>::key_type *)(v3 + 32));
  else
    result = 0LL;
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6511: range 000000000F2B8B76-000000000F2B9311
int32_t __cdecl JsonConfigMgr::checkAndProcServerGlobalValue(
        JsonConfigMgr *const this,
        const data::ConfigGlobalValue *global_value)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-1E4h]
  data::FloatMap *__for_range_0; // [rsp+28h] [rbp-1D8h]
  std::__detail::_Node_const_iterator<std::pair<const std::string,float>,false,true>::reference v18; // [rsp+30h] [rbp-1D0h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *key_0; // [rsp+38h] [rbp-1C8h]
  std::tuple_element<1,const std::pair<const std::string,float> >::type *val; // [rsp+40h] [rbp-1C0h]
  const std::string *key; // [rsp+48h] [rbp-1B8h]
  char v22[432]; // [rsp+50h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 8 16 __for_begin:6513 64 8 14 __for_end:6513 96 8 16 __for_begin:6524 128 8 14 __for_end:65"
                        "24 160 32 9 <unknown> 224 32 9 <unknown> 288 56 21 global_value_set:6512";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkAndProcServerGlobalValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218103808;
  v4[536862731] = -202116109;
  std::unordered_set<std::string>::unordered_set((std::unordered_set<std::string> *const)(v2 + 288));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, global_value);
  *(std::vector<std::string>::const_iterator *)(v2 + 32) = std::vector<std::string>::begin(&global_value->server_global_values);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, global_value);
  *(std::vector<std::string>::const_iterator *)(v2 + 64) = std::vector<std::string>::end(&global_value->server_global_values);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !__gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v2 + 32),
            (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v2 + 64)) )
      break;
    key = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v2 + 32));
    JsonConfigMgr::addAbilityString(this, key);
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "checkAndProcServerGlobalValue",
      6517);
    v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           (common::milog::MiLogStream *const)(v2 + 160),
           (const char (*)[32])"[SERVER_GLOBAL_VALUE] load key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, key);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::unordered_set<std::string>::insert((std::unordered_set<std::string> *const)(v2 + 288), key);
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v2 + 32));
  }
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  ret = 0;
  __for_range_0 = &global_value->init_server_global_values;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v5);
  *(std::unordered_map<std::string,float>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,float>::begin(__for_range_0);
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 128, v5);
  *(std::unordered_map<std::string,float>::const_iterator *)(v2 + 128) = std::unordered_map<std::string,float>::end(__for_range_0);
  while ( std::__detail::operator!=<std::pair<std::string const,float>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,float>,true> *)(v2 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,float>,true> *)(v2 + 128)) )
  {
    v18 = std::__detail::_Node_const_iterator<std::pair<std::string const,float>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,float>,false,true> *const)(v2 + 96));
    key_0 = std::get<0ul,std::string const,float>(v18);
    val = (std::tuple_element<1,const std::pair<const std::string,float> >::type *)std::get<1ul,std::string const,float>(v18);
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<std::string>,std::string>(
            (std::unordered_set<std::string> *)(v2 + 288),
            key_0) )
    {
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 1) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkAndProcServerGlobalValue",
        6528);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 224),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v7, (const char (*)[30])byte_1A52E380);
      v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, key_0);
      v10 = common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v9, (const char (*)[3])": ");
      v11 = common::milog::MiLogStream::operator<<<float,(float *)0>(v10, val);
      v12 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v11, (const char (*)[2])")");
      v13 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v12, (const char (*)[22])byte_1A52E3C0);
      common::milog::MiLogStream::operator<<<std::string>(v13, (const std::unordered_set<std::string> *)(v2 + 288));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    std::__detail::_Node_const_iterator<std::pair<std::string const,float>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,float>,false,true> *const)(v2 + 96));
  }
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
  std::unordered_set<std::string>::~unordered_set((std::unordered_set<std::string> *const)(v2 + 288));
  result = ret;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6537: range 000000000F2B9312-000000000F2B9532
bool __cdecl JsonConfigMgr::findGadgetInitServerGlobalValue(
        JsonConfigMgr *const this,
        uint32_t gadget_id,
        const std::string *key,
        float *value)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  bool v7; // r15
  std::unordered_map<std::string,float> *p_init_server_global_values; // rdx
  int v9; // xmm0_4
  bool result; // al
  float *value_ptr; // [rsp+28h] [rbp-78h]
  char v14[112]; // [rsp+30h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 15 config_ptr:6538";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findGadgetInitServerGlobalValue;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  JsonConfigMgr::findGadgetConfig(
    (const JsonConfigMgr *const)(v4 + 32),
    (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *)this,
    gadget_id);
  if ( std::operator==<data::ConfigGadget>(0LL, (const std::shared_ptr<data::ConfigGadget> *)(v4 + 32)) )
  {
    v7 = 0;
  }
  else
  {
    p_init_server_global_values = &std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32))->global_value.init_server_global_values;
    value_ptr = common::tools::MiscUtils::findMapValuePointer<std::unordered_map<std::string,float>>(
                  p_init_server_global_values,
                  key);
    if ( value_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)value_ptr >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)value_ptr & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value_ptr >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(value_ptr);
      }
      v9 = *(_DWORD *)value_ptr;
      if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(value, ((unsigned __int8)value & 7u) + 3);
      }
      *(_DWORD *)value = v9;
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
  }
  std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6553: range 000000000F2B9534-000000000F2B96D6
const data::ConfigAbilityGroup *__cdecl JsonConfigMgr::findAvatarAbilityGroup(
        const JsonConfigMgr *const this,
        const std::string *ability_group_name)
{
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigAbilityGroupMap *p_config_ability_group_map; // rdx
  data::ConfigAbilityGroupMap *v6; // rdx
  bool v7; // al
  const data::ConfigAbilityGroup *result; // rax
  char v9[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)"2 32 8 9 iter:6554 64 8 9 <unknown>";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)JsonConfigMgr::findAvatarAbilityGroup;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  p_config_ability_group_map = &this->config_ability_group_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], ability_group_name);
  v2[4]._M_cur = std::unordered_map<std::string,data::ConfigAbilityGroup>::find(
                   p_config_ability_group_map,
                   ability_group_name)._M_cur;
  v6 = &this->config_ability_group_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], ability_group_name);
  v2[8]._M_cur = std::unordered_map<std::string,data::ConfigAbilityGroup>::end(v6)._M_cur;
  v7 = std::__detail::operator==<std::pair<std::string const,data::ConfigAbilityGroup>,true>(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<std::string const,data::ConfigAbilityGroup>,false,true>::operator->(v2 + 4)->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6563: range 000000000F2B96D8-000000000F2B987A
const data::ConfigAbilityGroup *__cdecl JsonConfigMgr::findTeamAbilityGroup(
        const JsonConfigMgr *const this,
        const std::string *ability_group_name)
{
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigAbilityGroupMap *p_config_team_ability_group_map; // rdx
  data::ConfigAbilityGroupMap *v6; // rdx
  bool v7; // al
  const data::ConfigAbilityGroup *result; // rax
  char v9[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigAbilityGroup>,false,true> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)"2 32 8 9 iter:6564 64 8 9 <unknown>";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)JsonConfigMgr::findTeamAbilityGroup;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  p_config_team_ability_group_map = &this->config_team_ability_group_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], ability_group_name);
  v2[4]._M_cur = std::unordered_map<std::string,data::ConfigAbilityGroup>::find(
                   p_config_team_ability_group_map,
                   ability_group_name)._M_cur;
  v6 = &this->config_team_ability_group_map_;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], ability_group_name);
  v2[8]._M_cur = std::unordered_map<std::string,data::ConfigAbilityGroup>::end(v6)._M_cur;
  v7 = std::__detail::operator==<std::pair<std::string const,data::ConfigAbilityGroup>,true>(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<std::string const,data::ConfigAbilityGroup>,false,true>::operator->(v2 + 4)->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAbilityGroup>,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6573: range 000000000F2B987C-000000000F2B9A3D
const data::ConfigHomeFishpond *__fastcall JsonConfigMgr::findHomeFishpondConfig(
        const JsonConfigMgr *const this,
        __int64 furniture_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigHomeFishpondSet *p_fishpond_json_config; // rdx
  data::ConfigHomeFishpondSet *v6; // rdx
  bool v7; // al
  const data::ConfigHomeFishpond *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 17 furniture_id:6572 64 8 9 iter:6574 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findHomeFishpondConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = furniture_id;
  p_fishpond_json_config = &this->fishpond_json_config_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, furniture_id);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishpond>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::ConfigHomeFishpond>::find(
                                                                                              &p_fishpond_json_config->fishpond_map,
                                                                                              (const std::unordered_map<unsigned int,data::ConfigHomeFishpond>::key_type *)(v2 + 48));
  v6 = &this->fishpond_json_config_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishpond>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::ConfigHomeFishpond>::end(&v6->fishpond_map);
  v7 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigHomeFishpond>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishpond>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishpond>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigHomeFishpond>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigHomeFishpond>,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6583: range 000000000F2B9A3E-000000000F2B9BFF
const data::ConfigHomeFishtank *__fastcall JsonConfigMgr::findHomeFishtankConfig(
        const JsonConfigMgr *const this,
        __int64 furniture_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigHomeFishtankSet *p_fishtank_json_config; // rdx
  data::ConfigHomeFishtankSet *v6; // rdx
  bool v7; // al
  const data::ConfigHomeFishtank *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 17 furniture_id:6582 64 8 9 iter:6584 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findHomeFishtankConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = furniture_id;
  p_fishtank_json_config = &this->fishtank_json_config_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, furniture_id);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishtank>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::ConfigHomeFishtank>::find(
                                                                                              &p_fishtank_json_config->fishtank_map,
                                                                                              (const std::unordered_map<unsigned int,data::ConfigHomeFishtank>::key_type *)(v2 + 48));
  v6 = &this->fishtank_json_config_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,data::ConfigHomeFishtank>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::ConfigHomeFishtank>::end(&v6->fishtank_map);
  v7 = std::__detail::operator==<std::pair<unsigned int const,data::ConfigHomeFishtank>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishtank>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigHomeFishtank>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigHomeFishtank>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigHomeFishtank>,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6593: range 000000000F2B9C00-000000000F2B9DC1
const FurnitureGroupJsonConfig *__fastcall JsonConfigMgr::findFurnitureGroupConfig(
        const JsonConfigMgr *const this,
        __int64 furniture_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,FurnitureGroupJsonConfig> *p_home_furniture_group_config_map; // rdx
  std::unordered_map<unsigned int,FurnitureGroupJsonConfig> *v6; // rdx
  bool v7; // al
  const FurnitureGroupJsonConfig *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 17 furniture_id:6592 64 8 9 iter:6594 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findFurnitureGroupConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = furniture_id;
  p_home_furniture_group_config_map = &this->home_furniture_group_config_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, furniture_id);
  *(std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::find(
                                                                                              p_home_furniture_group_config_map,
                                                                                              (const std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::key_type *)(v2 + 48));
  v6 = &this->home_furniture_group_config_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,FurnitureGroupJsonConfig>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,FurnitureGroupJsonConfig>,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6603: range 000000000F2B9DC2-000000000F2BADF6
__int64 __fastcall JsonConfigMgr::getCustomGadgetTreeSize(
        JsonConfigMgr *const this,
        uint32_t gadget_id,
        std::vector<unsigned int> *path_vec)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  HK4EDesignConfig *Config; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // edx
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  char *v16; // rsi
  __int64 slot_config_id; // rsi
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // eax
  char *v24; // rsi
  unsigned int *v25; // rax
  int *v26; // rdx
  int v27; // ecx
  char v28; // al
  char v29; // al
  common::milog::MiLogStream *v30; // rax
  int v31; // eax
  int v32; // edx
  __int64 result; // rax
  int32_t tree_size; // [rsp+24h] [rbp-2FCh]
  uint32_t parts_tree_max_size; // [rsp+28h] [rbp-2F8h]
  int32_t parts_tree_size; // [rsp+2Ch] [rbp-2F4h]
  data::GadgetExcelConfig *gadget_excel_config_ptr; // [rsp+30h] [rbp-2F0h]
  const data::ConfigCustomGadgetNode *custom_gadget_node_config; // [rsp+38h] [rbp-2E8h]
  const std::unordered_map<std::string,data::CustomGadgetNodeSlot> *__for_range; // [rsp+40h] [rbp-2E0h]
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true>::reference v41; // [rsp+48h] [rbp-2D8h]
  std::tuple_element<0,std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *slot_identifier; // [rsp+50h] [rbp-2D0h]
  std::tuple_element<1,const std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *slot_config; // [rsp+58h] [rbp-2C8h]
  const data::CustomSlotConfig *excel_slot_config_ptr; // [rsp+60h] [rbp-2C0h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+68h] [rbp-2B8h]
  char v46[688]; // [rsp+70h] [rbp-2B0h] BYREF

  v4 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(640LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "14 48 4 13 parts_id:6649 64 4 19 part_gadget_id:6651 80 4 14 gadget_id:6602 96 8 16 __for_begin:"
                        "6638 128 8 14 __for_end:6638 160 8 16 __for_begin:6649 192 8 14 __for_end:6649 224 16 22 config_"
                        "gadget_ptr:6623 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 "
                        "32 9 <unknown> 576 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::getCustomGadgetTreeSize;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -218959360;
  v6[536862726] = -218959360;
  v6[536862727] = -219021312;
  v6[536862729] = -218959118;
  v6[536862731] = -218959118;
  v6[536862733] = -218959118;
  v6[536862735] = -218959118;
  v6[536862737] = -218959118;
  v6[536862739] = -202116109;
  *(_DWORD *)(v4 + 80) = gadget_id;
  if ( common::tools::MiscUtils::isContains<unsigned int>(path_vec, (const unsigned int *)(v4 + 80)) )
  {
    if ( *(char *)(((v4 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "getCustomGadgetTreeSize",
      6606);
    v7 = common::milog::MiLogStream::operator<<<char [97],(char *[97])0>(
           (common::milog::MiLogStream *const)(v4 + 256),
           (const char (*)[97])byte_1A52E6C0);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 80));
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" path_vec:");
    common::milog::MiLogStream::operator<<<unsigned int>(v9, path_vec);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 256));
    v3 = -1;
  }
  else
  {
    Config = JsonConfigMgr::getConfig(this);
    gadget_excel_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(
                                &Config->txt_config_mgr.gadget_config_mgr,
                                *(_DWORD *)(v4 + 80));
    if ( gadget_excel_config_ptr )
    {
      tree_size = 1;
      if ( *(_BYTE *)(((unsigned __int64)&gadget_excel_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)gadget_excel_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_excel_config_ptr->type >> 3)
                                                                               + 0x7FFF8000) )
      {
        __asan_report_load4(&gadget_excel_config_ptr->type);
      }
      if ( gadget_excel_config_ptr->type == CustomGadget )
      {
        v12 = *(_DWORD *)(v4 + 80);
        if ( *(_WORD *)(((v4 + 224) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        JsonConfigMgr::findGadgetConfig(
          (const JsonConfigMgr *const)(v4 + 224),
          (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *)this,
          v12);
        if ( std::operator==<data::ConfigGadget>(0LL, (const std::shared_ptr<data::ConfigGadget> *)(v4 + 224)) )
        {
          if ( *(char *)(((v4 + 384) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 384, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 384),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_config_mgr.cpp",
            "getCustomGadgetTreeSize",
            6626);
          v13 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
                  (common::milog::MiLogStream *const)(v4 + 384),
                  (const char (*)[66])byte_1A52E800);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 384));
          *(_DWORD *)(((v4 + 384) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
        }
        else
        {
          v14 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          custom_gadget_node_config = &v14->misc.custom_gadget_node;
          if ( std::unordered_map<std::string,data::CustomGadgetNodeSlot>::empty(&v14->misc.custom_gadget_node.slot_map) )
          {
            if ( *(char *)(((v4 + 448) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 479) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 479) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 448, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 448),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_config_mgr.cpp",
              "getCustomGadgetTreeSize",
              6633);
            v15 = common::milog::MiLogStream::operator<<<char [105],(char *[105])0>(
                    (common::milog::MiLogStream *const)(v4 + 448),
                    (const char (*)[105])byte_1A52E880);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 448));
            *(_DWORD *)(((v4 + 448) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
          }
          else
          {
            v16 = (char *)(v4 + 80);
            std::vector<unsigned int>::push_back(path_vec, (const std::vector<unsigned int>::value_type *)(v4 + 80));
            __for_range = &custom_gadget_node_config->slot_map;
            if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v4 + 96, v16);
            *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v4 + 96) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::begin(__for_range);
            if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v4 + 128, v16);
            *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v4 + 128) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::end(__for_range);
            while ( 1 )
            {
              if ( !std::__detail::operator!=<std::pair<std::string const,data::CustomGadgetNodeSlot>,true>(
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v4 + 96),
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v4 + 128)) )
              {
                v23 = 1;
                goto LABEL_73;
              }
              v41 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::CustomGadgetNodeSlot>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true> *const)(v4 + 96));
              slot_identifier = std::get<0ul,std::string const,data::CustomGadgetNodeSlot>(v41);
              slot_config = (std::tuple_element<1,const std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *)std::get<1ul,std::string const,data::CustomGadgetNodeSlot>(v41);
              if ( *(_BYTE *)(((unsigned __int64)&slot_config->slot_config_id >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&slot_config->slot_config_id >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&slot_config->slot_config_id);
              }
              slot_config_id = slot_config->slot_config_id;
              excel_slot_config_ptr = JsonConfigMgr::getCustomSlotExcelConfig(this, slot_config_id);
              if ( !excel_slot_config_ptr )
                break;
              parts_tree_max_size = 0;
              __for_range_0 = &excel_slot_config_ptr->optional_parts_id_list;
              *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v4 + 160, slot_config_id);
              *(std::vector<unsigned int>::const_iterator *)(v4 + 160) = std::vector<unsigned int>::begin(__for_range_0);
              *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v4 + 192, slot_config_id);
              *(std::vector<unsigned int>::const_iterator *)(v4 + 192) = std::vector<unsigned int>::end(__for_range_0);
              while ( 1 )
              {
                v24 = (char *)(v4 + 192);
                if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                        (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 160),
                        (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 192)) )
                  break;
                *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = 4;
                v25 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 160));
                v26 = (int *)v25;
                if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v25);
                }
                v27 = *v26;
                v28 = *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000);
                if ( v28 != 0 && v28 <= 3 )
                {
                  LOBYTE(v24) = v28 != 0;
                  __asan_report_store4(v4 + 48, v24);
                }
                *(_DWORD *)(v4 + 48) = v27;
                *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 4;
                if ( JsonConfigMgr::getCustomSlotGadgetId(this, *(_DWORD *)(v4 + 48), (uint32_t *)(v4 + 64)) )
                  goto LABEL_52;
                if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v4 + 64);
                if ( *(_DWORD *)(v4 + 64) )
                  v29 = 0;
                else
LABEL_52:
                  v29 = 1;
                if ( v29 )
                {
                  *(_DWORD *)(((v4 + 576) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v4 + 576) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v4 + 607) >> 3) + 0x7FFF8000) != 0
                    && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 607) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v4 + 576, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v4 + 576),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_config_mgr.cpp",
                    "getCustomGadgetTreeSize",
                    6654);
                  v30 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
                          (common::milog::MiLogStream *const)(v4 + 576),
                          (const char (*)[63])byte_1A52EA00);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v30,
                    (const unsigned int *)(v4 + 48));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 576));
                  *(_DWORD *)(((v4 + 576) >> 3) + 0x7FFF8000) = -117901064;
                  v3 = -1;
                  v31 = 0;
                }
                else
                {
                  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v4 + 64);
                  parts_tree_size = JsonConfigMgr::getCustomGadgetTreeSize(this, *(_DWORD *)(v4 + 64), path_vec);
                  if ( parts_tree_size >= 0 )
                  {
                    if ( parts_tree_max_size < parts_tree_size )
                      parts_tree_max_size = parts_tree_size;
                    v31 = 1;
                  }
                  else
                  {
                    v3 = -1;
                    v31 = 0;
                  }
                }
                *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
                if ( v31 != 1 )
                {
                  v32 = 0;
                  goto LABEL_69;
                }
                __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 160));
              }
              v32 = 1;
LABEL_69:
              *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = -8;
              if ( v32 != 1 )
              {
                v23 = 0;
                goto LABEL_73;
              }
              tree_size += parts_tree_max_size;
              std::__detail::_Node_const_iterator<std::pair<std::string const,data::CustomGadgetNodeSlot>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true> *const)(v4 + 96));
            }
            *(_DWORD *)(((v4 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_config_mgr.cpp",
              "getCustomGadgetTreeSize",
              6643);
            v18 = common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(
                    (common::milog::MiLogStream *const)(v4 + 512),
                    (const char (*)[59])byte_1A52E920);
            v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v18,
                    (const unsigned int *)(v4 + 80));
            v20 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    v19,
                    (const char (*)[18])" slot_identifier:");
            v21 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, slot_identifier);
            v22 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    v21,
                    (const char (*)[17])" slot_config_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &slot_config->slot_config_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 512));
            *(_DWORD *)(((v4 + 512) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v23 = 0;
LABEL_73:
            *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( v23 == 1 )
            {
              std::vector<unsigned int>::pop_back(path_vec);
              v3 = tree_size;
            }
          }
        }
        std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v4 + 224));
      }
      else
      {
        v3 = 1;
      }
    }
    else
    {
      if ( *(char *)(((v4 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "getCustomGadgetTreeSize",
        6613);
      v11 = common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(
              (common::milog::MiLogStream *const)(v4 + 320),
              (const char (*)[64])byte_1A52E7A0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 320));
      v3 = -1;
    }
  }
  result = v3;
  if ( v46 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF804C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6674: range 000000000F2BADF8-000000000F2BB574
int32_t __cdecl JsonConfigMgr::checkCustomGadgetConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  unsigned __int64 v6; // rax
  __int64 v7; // rsi
  int CustomGadgetTreeSize; // edx
  char v9; // al
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  char *v13; // rsi
  HK4EDesignConfig *v14; // rax
  uint32_t CustomGadgetPartsMaxNum; // edx
  char v16; // al
  unsigned int v17; // ecx
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  unsigned __int64 v23; // rax
  int32_t result; // eax
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *__for_range; // [rsp+18h] [rbp-188h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false>::reference v26; // [rsp+20h] [rbp-180h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> > >::type *gadget_id; // [rsp+28h] [rbp-178h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> > >::type *config_gadget_ptr; // [rsp+30h] [rbp-170h]
  char v29[352]; // [rsp+40h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 4 14 tree_size:6684 48 4 17 max_part_num:6688 64 8 16 __for_begin:6675 96 8 14 __for_end:66"
                        "75 128 24 13 path_vec:6683 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkCustomGadgetConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -234881024;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  __for_range = &this->config_id_gadget_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false> *)(v2 + 96)) )
  {
    v26 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false> *const)(v2 + 64));
    gadget_id = std::get<0ul,unsigned int const,std::shared_ptr<data::ConfigGadget>>(v26);
    config_gadget_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<data::ConfigGadget>>(v26);
    v5 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_gadget_ptr);
    if ( !std::unordered_map<std::string,data::CustomGadgetNodeSlot>::empty(&v5->misc.custom_gadget_node.slot_map) )
    {
      v6 = ((v2 + 128) >> 3) + 2147450880;
      *(_WORD *)v6 = 0;
      *(_BYTE *)(v6 + 2) = 0;
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 128));
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)gadget_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)gadget_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)gadget_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(gadget_id);
      }
      v7 = *gadget_id;
      CustomGadgetTreeSize = JsonConfigMgr::getCustomGadgetTreeSize(this, v7, (std::vector<unsigned int> *)(v2 + 128));
      v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
      if ( v9 != 0 && v9 <= 3 )
      {
        LOBYTE(v7) = v9 != 0;
        __asan_report_store4(v2 + 32, v7);
      }
      *(_DWORD *)(v2 + 32) = CustomGadgetTreeSize;
      if ( *(int *)(v2 + 32) > 0 )
      {
        *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_config_mgr.cpp",
          "checkCustomGadgetConfig",
          6687);
        v10 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                (common::milog::MiLogStream *const)(v2 + 192),
                (const char (*)[18])"custom gadget id:");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, gadget_id);
        v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])" tree size: ");
        v13 = (char *)(v2 + 32);
        common::milog::MiLogStream::operator<<<int,(int *)0>(v12, (const int *)(v2 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
        *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
        v14 = JsonConfigMgr::getConfig(this);
        CustomGadgetPartsMaxNum = ConstValueExcelConfigMgr::getCustomGadgetPartsMaxNum(&v14->txt_config_mgr.const_value_config_mgr);
        v16 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
        if ( v16 != 0 && v16 <= 3 )
        {
          LOBYTE(v13) = v16 != 0;
          __asan_report_store4(v2 + 48, v13);
        }
        *(_DWORD *)(v2 + 48) = CustomGadgetPartsMaxNum;
        v17 = *(_DWORD *)(v2 + 48) + 1;
        if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 32);
        if ( v17 < *(_DWORD *)(v2 + 32) )
        {
          *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_config_mgr.cpp",
            "checkCustomGadgetConfig",
            6691);
          v18 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  (common::milog::MiLogStream *const)(v2 + 256),
                  (const char (*)[42])byte_1A52EBA0);
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, gadget_id);
          v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])" tree size: ");
          v21 = common::milog::MiLogStream::operator<<<int,(int *)0>(v20, (const int *)(v2 + 32));
          v22 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  v21,
                  (const char (*)[27])" reach max part num limit:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
          *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
        }
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 128));
    }
    v23 = ((v2 + 128) >> 3) + 2147450880;
    *(_WORD *)v23 = -1800;
    *(_BYTE *)(v23 + 2) = -8;
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigGadget> >,false,false> *const)(v2 + 64));
  }
  result = 0;
  if ( v29 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6700: range 000000000F2BB576-000000000F2BC2CE
int32_t __cdecl JsonConfigMgr::convertCustomTreeInfo(
        const JsonConfigMgr *const this,
        uint32_t gadget_id,
        const google::protobuf::RepeatedPtrField<proto::CustomCommonNodeInfo> *node_list,
        std::vector<std::shared_ptr<CustomCommonNodeData>> *result_node_vec)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  char *v8; // rsi
  unsigned __int64 v9; // rax
  char v10; // dl
  char *v11; // rsi
  char *v12; // rsi
  _BOOL4 v13; // r15d
  google::protobuf::uint32 v14; // r15d
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  char v16; // cl
  const std::string *v17; // r15
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  const std::string *v19; // rsi
  int v20; // ecx
  char v21; // al
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v22; // r15
  common::milog::MiLogStream *v24; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v30; // rax
  const std::shared_ptr<CustomCommonNodeData> *v31; // rax
  std::map<std::string,unsigned int> *p_child_map; // r15
  std::string *p_slot_identifier; // rsi
  std::map<std::string,unsigned int>::mapped_type *v34; // rax
  _DWORD *v35; // rdx
  char v36; // cl
  common::milog::MiLogStream *v37; // rax
  int v38; // r15d
  int v39; // edx
  int32_t result; // eax
  int v43; // [rsp+20h] [rbp-250h]
  google::protobuf::internal::RepeatedPtrIterator<const proto::CustomCommonNodeInfo>::reference node_info; // [rsp+38h] [rbp-238h]
  char v46[560]; // [rsp+40h] [rbp-230h] BYREF

  v5 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(512LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "11 48 4 17 parent_index:6720 64 8 16 __for_begin:6710 96 8 14 __for_end:6710 128 8 9 <unknown> 1"
                        "60 16 13 root_ptr:6701 192 16 13 node_ptr:6712 224 16 15 parent_ptr:6728 256 32 9 <unknown> 320 "
                        "32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = JsonConfigMgr::convertCustomTreeInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -218959360;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -219021312;
  v7[536862726] = -219021312;
  v7[536862727] = -219021312;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -202116109;
  if ( *(_WORD *)(((v5 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<CustomCommonNodeData>();
  v8 = (char *)(v5 + 160);
  if ( std::operator==<CustomCommonNodeData>(0LL, (const std::shared_ptr<CustomCommonNodeData> *)(v5 + 160)) )
  {
    if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "convertCustomTreeInfo",
      6704);
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      (common::milog::MiLogStream *const)(v5 + 256),
      (const char (*)[43])"create CustomCommonNodeData share ptr fail");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
    *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
    v4 = -1;
  }
  else
  {
    v9 = (unsigned __int64)std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
    v10 = *(_BYTE *)((v9 >> 3) + 0x7FFF8000);
    if ( v10 != 0 && v10 <= 3 )
    {
      LOBYTE(v8) = v10 != 0;
      v9 = __asan_report_store4(v9, v8);
    }
    *(_DWORD *)v9 = gadget_id;
    v11 = (char *)(v5 + 160);
    std::vector<std::shared_ptr<CustomCommonNodeData>>::push_back(
      result_node_vec,
      (const std::vector<std::shared_ptr<CustomCommonNodeData>>::value_type *)(v5 + 160));
    if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v5 + 64, v11);
    *(google::protobuf::RepeatedPtrField<proto::CustomCommonNodeInfo>::const_iterator *)(v5 + 64) = google::protobuf::RepeatedPtrField<proto::CustomCommonNodeInfo>::begin(node_list);
    if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v5 + 96, v11);
    *(google::protobuf::RepeatedPtrField<proto::CustomCommonNodeInfo>::const_iterator *)(v5 + 96) = google::protobuf::RepeatedPtrField<proto::CustomCommonNodeInfo>::end(node_list);
    while ( google::protobuf::internal::RepeatedPtrIterator<proto::CustomCommonNodeInfo const>::operator!=(
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::CustomCommonNodeInfo> *const)(v5 + 64),
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::CustomCommonNodeInfo>::iterator *)(v5 + 96)) )
    {
      node_info = google::protobuf::internal::RepeatedPtrIterator<proto::CustomCommonNodeInfo const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::CustomCommonNodeInfo> *const)(v5 + 64));
      *(_WORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v5 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<CustomCommonNodeData>();
      v12 = (char *)(v5 + 192);
      if ( std::operator==<CustomCommonNodeData>(0LL, (const std::shared_ptr<CustomCommonNodeData> *)(v5 + 192)) )
      {
        *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_config_mgr.cpp",
          "convertCustomTreeInfo",
          6715);
        common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
          (common::milog::MiLogStream *const)(v5 + 320),
          (const char (*)[43])"create CustomGadgetNodeData share ptr fail");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
        *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v13 = 0;
      }
      else
      {
        v14 = proto::CustomCommonNodeInfo::config_id(node_info);
        v15 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        v16 = *(_BYTE *)(((unsigned __int64)&v15->config_id >> 3) + 0x7FFF8000);
        if ( v16 != 0 && (char)((((_BYTE)v15 + 4) & 7) + 3) >= v16 )
        {
          LOBYTE(v12) = v16 != 0;
          __asan_report_store4(&v15->config_id, v12);
        }
        v15->config_id = v14;
        v17 = proto::CustomCommonNodeInfo::slot_identifier[abi:cxx11](node_info);
        v18 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        v19 = v17;
        std::string::operator=(&v18->slot_identifier, v17);
        *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 4;
        v20 = proto::CustomCommonNodeInfo::parent_index(node_info) + 1;
        v21 = *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000);
        if ( v21 != 0 && v21 <= 3 )
        {
          LOBYTE(v19) = v21 != 0;
          __asan_report_store4(v5 + 48, v19);
        }
        *(_DWORD *)(v5 + 48) = v20;
        if ( *(int *)(v5 + 48) < 0
          || (v22 = *(int *)(v5 + 48), v22 >= std::vector<std::shared_ptr<CustomCommonNodeData>>::size(result_node_vec)) )
        {
          *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 384, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 384),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_config_mgr.cpp",
            "convertCustomTreeInfo",
            6723);
          v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 384),
                  (const char (*)[16])"slot_identifier");
          v25 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
          v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, &v25->slot_identifier);
          v27 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v26,
                  (const char (*)[23])" invalid parent_index:");
          v28 = common::milog::MiLogStream::operator<<<int,(int *)0>(v27, (const int *)(v5 + 48));
          v29 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v28,
                  (const char (*)[23])" result_node_vec size:");
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
          v30 = std::vector<std::shared_ptr<CustomCommonNodeData>>::size(result_node_vec);
          if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
            v30 = __asan_report_store8(v5 + 128, " result_node_vec size:");
          *(_QWORD *)(v5 + 128) = v30;
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v29,
            (const unsigned __int64 *)(v5 + 128));
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
          *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v13 = 0;
        }
        else
        {
          *(_WORD *)(((v5 + 224) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v5 + 48);
          v31 = std::vector<std::shared_ptr<CustomCommonNodeData>>::operator[](result_node_vec, *(int *)(v5 + 48));
          std::shared_ptr<CustomCommonNodeData>::shared_ptr(
            (std::shared_ptr<CustomCommonNodeData> *const)(v5 + 224),
            v31);
          if ( std::operator!=<CustomCommonNodeData>(0LL, (const std::shared_ptr<CustomCommonNodeData> *)(v5 + 224)) )
          {
            v43 = std::vector<std::shared_ptr<CustomCommonNodeData>>::size(result_node_vec);
            p_child_map = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224))->child_map;
            p_slot_identifier = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192))->slot_identifier;
            v34 = std::map<std::string,unsigned int>::operator[](p_child_map, p_slot_identifier);
            v35 = v34;
            v36 = *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000);
            if ( v36 != 0 && (char)(((unsigned __int8)v34 & 7) + 3) >= v36 )
            {
              LOBYTE(p_slot_identifier) = v36 != 0;
              __asan_report_store4(v34, p_slot_identifier);
            }
            *v35 = v43;
            std::vector<std::shared_ptr<CustomCommonNodeData>>::push_back(
              result_node_vec,
              (const std::vector<std::shared_ptr<CustomCommonNodeData>>::value_type *)(v5 + 192));
            v38 = 1;
          }
          else
          {
            *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 448) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 448, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 448),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_config_mgr.cpp",
              "convertCustomTreeInfo",
              6736);
            v37 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    (common::milog::MiLogStream *const)(v5 + 448),
                    (const char (*)[34])"parent_ptr is null, parent_index:");
            common::milog::MiLogStream::operator<<<int,(int *)0>(v37, (const int *)(v5 + 48));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 448));
            *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v38 = 0;
          }
          std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 224));
          *(_WORD *)(((v5 + 224) >> 3) + 0x7FFF8000) = -1800;
          v13 = v38 == 1;
        }
      }
      std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 192));
      *(_WORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -1800;
      *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( !v13 )
      {
        v39 = 0;
        goto LABEL_52;
      }
      google::protobuf::internal::RepeatedPtrIterator<proto::CustomCommonNodeInfo const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::CustomCommonNodeInfo> *const)(v5 + 64));
    }
    v39 = 1;
LABEL_52:
    *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v39 == 1 )
      v4 = 0;
  }
  std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 160));
  result = v4;
  if ( v46 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6746: range 000000000F2BC2D0-000000000F2BD52B
int32_t __cdecl JsonConfigMgr::checkCustomTreeInfo(
        const JsonConfigMgr *const this,
        const std::vector<std::shared_ptr<CustomCommonNodeData>> *node_vec,
        std::map<unsigned int,unsigned int> *need_item_count_map,
        std::unordered_map<unsigned int,unsigned int> *pass_part_item_count_map)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  const HK4EDesignConfig *Config; // rax
  uint32_t CustomGadgetPartsMaxNum; // edx
  char v10; // al
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v11; // rcx
  char v12; // al
  common::milog::MiLogStream *v13; // r14
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  const std::queue<std::shared_ptr<CustomCommonNodeData>>::value_type *v17; // rax
  const std::shared_ptr<CustomCommonNodeData> *v18; // rax
  _BOOL4 v19; // r15d
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  int gadget_id; // edx
  char *v22; // rsi
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  _BOOL4 v25; // r15d
  bool v26; // r15
  std::map<std::string,unsigned int> *p_child_map; // rdx
  common::milog::MiLogStream *v28; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rdx
  int v32; // edx
  __int64 v33; // r14
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v37; // rax
  const std::vector<std::shared_ptr<CustomCommonNodeData>> *node_veca; // [rsp+20h] [rbp-3D0h]
  data::CustomGadgetNodeSlotMap *__for_range; // [rsp+40h] [rbp-3B0h]
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true>::reference v43; // [rsp+48h] [rbp-3A8h]
  std::tuple_element<0,std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *slot_identifier; // [rsp+50h] [rbp-3A0h]
  std::tuple_element<1,const std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *slot_config; // [rsp+58h] [rbp-398h]
  char v46[912]; // [rsp+60h] [rbp-390h] BYREF

  node_veca = node_vec;
  v5 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(864LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "17 48 4 21 max_sub_node_num:6748 64 4 24 checked_child_count:6763 80 8 9 <unknown> 112 8 16 __fo"
                        "r_begin:6784 144 8 14 __for_end:6784 176 8 9 <unknown> 208 16 13 node_ptr:6768 240 16 22 config_"
                        "gadget_ptr:6776 272 16 9 <unknown> 304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496 "
                        "32 9 <unknown> 560 32 9 <unknown> 624 32 9 <unknown> 688 32 9 <unknown> 752 80 15 node_queue:6764";
  *(_QWORD *)(v5 + 16) = JsonConfigMgr::checkCustomTreeInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = 61956;
  v7[536862722] = -234881024;
  v7[536862723] = 62194;
  v7[536862723] = -234881024;
  v7[536862724] = 62194;
  v7[536862724] = -234881024;
  v7[536862725] = 62194;
  v7[536862725] = -234881024;
  v7[536862726] = 62194;
  v7[536862727] = 62194;
  v7[536862728] = 62194;
  v7[536862729] = 62194;
  v7[536862730] = -219021312;
  v7[536862731] = 62194;
  v7[536862732] = -219021312;
  v7[536862733] = 62194;
  v7[536862734] = -219021312;
  v7[536862735] = 62194;
  v7[536862736] = -219021312;
  v7[536862737] = 62194;
  v7[536862738] = -219021312;
  v7[536862739] = 62194;
  v7[536862740] = -219021312;
  v7[536862741] = 62194;
  v7[536862742] = -219021312;
  v7[536862743] = 62194;
  v7[536862746] = -202116109;
  Config = JsonConfigMgr::getConfig(this);
  CustomGadgetPartsMaxNum = ConstValueExcelConfigMgr::getCustomGadgetPartsMaxNum(&Config->txt_config_mgr.const_value_config_mgr);
  v10 = *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(node_vec) = v10 != 0;
    __asan_report_store4(v5 + 48, node_vec);
  }
  *(_DWORD *)(v5 + 48) = CustomGadgetPartsMaxNum;
  v11 = std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_veca);
  v12 = *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000);
  LOBYTE(node_vec) = v12 != 0;
  if ( v12 != 0 && v12 <= 3 )
    __asan_report_load4(v5 + 48);
  if ( v11 <= (unsigned int)(*(_DWORD *)(v5 + 48) + 1) )
  {
    if ( std::vector<std::shared_ptr<CustomCommonNodeData>>::empty(node_veca) )
    {
      if ( *(char *)(((v5 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 113) & 7) >= *(_BYTE *)(((v5 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 368, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 368),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "checkCustomTreeInfo",
        6758);
      common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
        (common::milog::MiLogStream *const)(v5 + 368),
        (const char (*)[15])"node_vec empty");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 368));
      v4 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v5 + 64, node_vec);
      *(_DWORD *)(v5 + 64) = 0;
      std::queue<std::shared_ptr<CustomCommonNodeData>>::queue<std::deque<std::shared_ptr<CustomCommonNodeData>>,void>((std::queue<std::shared_ptr<CustomCommonNodeData>> *const)(v5 + 752));
      v17 = std::vector<std::shared_ptr<CustomCommonNodeData>>::front(node_veca);
      std::queue<std::shared_ptr<CustomCommonNodeData>>::push(
        (std::queue<std::shared_ptr<CustomCommonNodeData>> *const)(v5 + 752),
        v17);
      while ( !std::queue<std::shared_ptr<CustomCommonNodeData>>::empty((const std::queue<std::shared_ptr<CustomCommonNodeData>> *const)(v5 + 752)) )
      {
        *(_WORD *)(((v5 + 208) >> 3) + 0x7FFF8000) = 0;
        v18 = std::queue<std::shared_ptr<CustomCommonNodeData>>::front((std::queue<std::shared_ptr<CustomCommonNodeData>> *const)(v5 + 752));
        std::shared_ptr<CustomCommonNodeData>::shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 208), v18);
        if ( std::operator==<CustomCommonNodeData>(0LL, (const std::shared_ptr<CustomCommonNodeData> *)(v5 + 208)) )
        {
          *(_DWORD *)(((v5 + 432) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 432) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 463) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 49) & 7) >= *(_BYTE *)(((v5 + 463) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 432, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 432),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_config_mgr.cpp",
            "checkCustomTreeInfo",
            6771);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
            (common::milog::MiLogStream *const)(v5 + 432),
            (const char (*)[17])"node_ptr is null");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 432));
          *(_DWORD *)(((v5 + 432) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v19 = 0;
        }
        else
        {
          std::queue<std::shared_ptr<CustomCommonNodeData>>::pop((std::queue<std::shared_ptr<CustomCommonNodeData>> *const)(v5 + 752));
          *(_WORD *)(((v5 + 240) >> 3) + 0x7FFF8000) = 0;
          v20 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208));
          if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(v20);
          }
          gadget_id = v20->gadget_id;
          if ( *(_WORD *)(((v5 + 240) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          JsonConfigMgr::findGadgetConfig(
            (const JsonConfigMgr *const)(v5 + 240),
            (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *)this,
            gadget_id);
          v22 = (char *)(v5 + 240);
          if ( std::operator==<data::ConfigGadget>(0LL, (const std::shared_ptr<data::ConfigGadget> *)(v5 + 240)) )
          {
            *(_DWORD *)(((v5 + 496) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 496) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 527) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 - 16 + 31) & 7) >= *(_BYTE *)(((v5 + 527) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 496, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 496),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_config_mgr.cpp",
              "checkCustomTreeInfo",
              6779);
            v23 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                    (common::milog::MiLogStream *const)(v5 + 496),
                    (const char (*)[42])"can't find gadget json config, gadget_id:");
            v24 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208));
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &v24->gadget_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 496));
            *(_DWORD *)(((v5 + 496) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v25 = 0;
          }
          else
          {
            __for_range = &std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 240))->misc.custom_gadget_node.slot_map;
            *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v5 + 112, v22);
            *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v5 + 112) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::begin(__for_range);
            *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v5 + 144, v22);
            *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v5 + 144) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::end(__for_range);
            while ( 1 )
            {
              if ( !std::__detail::operator!=<std::pair<std::string const,data::CustomGadgetNodeSlot>,true>(
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v5 + 112),
                      (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v5 + 144)) )
              {
                v32 = 1;
                goto LABEL_50;
              }
              v43 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::CustomGadgetNodeSlot>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true> *const)(v5 + 112));
              slot_identifier = std::get<0ul,std::string const,data::CustomGadgetNodeSlot>(v43);
              slot_config = (std::tuple_element<1,const std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *)std::get<1ul,std::string const,data::CustomGadgetNodeSlot>(v43);
              *(_DWORD *)(((v5 + 560) >> 3) + 0x7FFF8000) = 0;
              std::string::basic_string(v5 + 560, slot_identifier);
              *(_WORD *)(((v5 + 272) >> 3) + 0x7FFF8000) = 0;
              std::shared_ptr<CustomCommonNodeData>::shared_ptr(
                (std::shared_ptr<CustomCommonNodeData> *const)(v5 + 272),
                (const std::shared_ptr<CustomCommonNodeData> *)(v5 + 208));
              v26 = JsonConfigMgr::checkCustomSlotInfo(
                      this,
                      (CustomCommonNodeDataPtr *)(v5 + 272),
                      (std::string *)(v5 + 560),
                      slot_config,
                      node_veca,
                      (std::queue<std::shared_ptr<CustomCommonNodeData>> *)(v5 + 752),
                      need_item_count_map,
                      pass_part_item_count_map) == 0;
              std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 272));
              *(_WORD *)(((v5 + 272) >> 3) + 0x7FFF8000) = -1800;
              std::string::~string((void *)(v5 + 560));
              *(_DWORD *)(((v5 + 560) >> 3) + 0x7FFF8000) = -117901064;
              if ( !v26 )
                break;
              p_child_map = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208))->child_map;
              if ( common::tools::MiscUtils::isContains<std::map<std::string,unsigned int>,std::string>(
                     p_child_map,
                     slot_identifier) )
              {
                if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v5 + 64);
                ++*(_DWORD *)(v5 + 64);
              }
              std::__detail::_Node_const_iterator<std::pair<std::string const,data::CustomGadgetNodeSlot>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true> *const)(v5 + 112));
            }
            *(_DWORD *)(((v5 + 624) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 624) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 655) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 - 113) & 7) >= *(_BYTE *)(((v5 + 655) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 624, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 624),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_config_mgr.cpp",
              "checkCustomTreeInfo",
              6796);
            v28 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                    (common::milog::MiLogStream *const)(v5 + 624),
                    (const char (*)[37])"checkCustomSlotInfo fail, gadget_id:");
            v29 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208));
            v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &v29->gadget_id);
            v31 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    v30,
                    (const char (*)[18])" slot_identifier:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, slot_identifier);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 624));
            *(_DWORD *)(((v5 + 624) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v32 = 0;
LABEL_50:
            *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) = -8;
            v25 = v32 == 1;
          }
          std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v5 + 240));
          v19 = v25;
        }
        std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 208));
        *(_WORD *)(((v5 + 208) >> 3) + 0x7FFF8000) = -1800;
        *(_WORD *)(((v5 + 240) >> 3) + 0x7FFF8000) = -1800;
        if ( !v19 )
          goto LABEL_63;
      }
      if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v5 + 64);
      v33 = (unsigned int)(*(_DWORD *)(v5 + 64) + 1);
      if ( v33 == std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_veca) )
      {
        v4 = 0;
      }
      else
      {
        *(_DWORD *)(((v5 + 688) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 688) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 719) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 49) & 7) >= *(_BYTE *)(((v5 + 719) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 688, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 688),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_config_mgr.cpp",
          "checkCustomTreeInfo",
          6804);
        v34 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                (common::milog::MiLogStream *const)(v5 + 688),
                (const char (*)[21])"checked_child_count:");
        v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v34,
                (const unsigned int *)(v5 + 64));
        v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v35,
                (const char (*)[16])" node_vec size:");
        *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) = 0;
        v37 = std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_veca);
        if ( *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) )
          v37 = __asan_report_store8(v5 + 176, " node_vec size:");
        *(_QWORD *)(v5 + 176) = v37;
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v36,
          (const unsigned __int64 *)(v5 + 176));
        *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 688));
        *(_DWORD *)(((v5 + 688) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
      }
LABEL_63:
      std::queue<std::shared_ptr<CustomCommonNodeData>>::~queue((std::queue<std::shared_ptr<CustomCommonNodeData>> *const)(v5 + 752));
    }
  }
  else
  {
    if ( *(char *)(((v5 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 + 79) & 7) >= *(_BYTE *)(((v5 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 304, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 304),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "checkCustomTreeInfo",
      6751);
    v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
            (common::milog::MiLogStream *const)(v5 + 304),
            (const char (*)[15])"node_vec size:");
    v14 = std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_veca);
    if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) )
      v14 = __asan_report_store8(v5 + 80, "node_vec size:");
    *(_QWORD *)(v5 + 80) = v14;
    v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v13,
            (const unsigned __int64 *)(v5 + 80));
    v16 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v15, (const char (*)[19])" max_sub_node_num:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v5 + 48));
    *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 304));
    v4 = -1;
  }
  if ( v46 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0LL;
    memset(
      (void *)((unsigned __int64)(v7 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v7 + 2147450880 - (((_DWORD)v7 + 2147450888) & 0xFFFFFFF8) + 96) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v5 >> 3) + 0x7FFF8068) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8068) = -168430091;
  }
  return v4;
};

// Line 6813: range 000000000F2BD52C-000000000F2BEB8C
int32_t __cdecl JsonConfigMgr::checkCustomSlotInfo(
        const JsonConfigMgr *const this,
        CustomCommonNodeDataPtr *p_node_ptr,
        std::string *p_slot_identifier,
        const data::CustomGadgetNodeSlot *json_slot_config,
        const std::vector<std::shared_ptr<CustomCommonNodeData>> *node_vec,
        std::queue<std::shared_ptr<CustomCommonNodeData>> *node_queue,
        std::map<unsigned int,unsigned int> *need_item_count_map,
        std::unordered_map<unsigned int,unsigned int> *pass_part_item_count_map)
{
  int32_t v8; // r14d
  unsigned __int64 v9; // r13
  __int64 v10; // rax
  _DWORD *v11; // r12
  __int64 slot_config_id; // rsi
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::map<std::string,unsigned int> *p_child_map; // rdx
  std::map<std::string,unsigned int> *v17; // rdx
  char *v18; // rsi
  bool v19; // al
  std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::pointer v20; // rax
  unsigned int second; // ecx
  char v22; // al
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v23; // r15
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v27; // rax
  _BOOL4 v28; // eax
  const std::shared_ptr<CustomCommonNodeData> *v29; // rax
  char *v30; // rsi
  common::milog::MiLogStream *v31; // rax
  int v32; // r15d
  __int64 v33; // rax
  char v34; // dl
  _BOOL8 v35; // rdx
  common::milog::MiLogStream *v36; // rdx
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  uint32_t *p_config_id; // rsi
  HomeWorldExcelConfigMgr *p_home_config_mgr; // r15
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rdx
  uint32_t *v47; // rax
  common::milog::MiLogStream *v48; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v51; // rax
  char v52; // cl
  std::map<unsigned int,unsigned int>::mapped_type *v53; // rax
  char v54; // cl
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rdx
  uint32_t *v56; // rax
  uint32_t config_id; // ecx
  __int64 v58; // rsi
  common::milog::MiLogStream *v59; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v60; // rax
  int v61; // eax
  int v62; // r15d
  unsigned __int64 v63; // rax
  char v64; // dl
  __int64 v65; // rax
  char v66; // dl
  _BOOL8 v67; // rdx
  GadgetExcelConfigMgr *p_gadget_config_mgr; // rcx
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v72; // rax
  common::milog::MiLogStream *v73; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  int32_t result; // eax
  const data::CustomSlotConfig *excel_slot_config_ptr; // [rsp+48h] [rbp-348h]
  const data::CusmtomGadgetConfigIdExcelConfig *custom_gadget_config_ptr; // [rsp+50h] [rbp-340h]
  const data::GadgetExcelConfig *child_gadget_config_ptr; // [rsp+58h] [rbp-338h]
  char v87[816]; // [rsp+60h] [rbp-330h] BYREF

  v9 = (unsigned __int64)v87;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v10 = __asan_stack_malloc_4(768LL);
    if ( v10 )
      v9 = v10;
  }
  *(_QWORD *)v9 = 1102416563LL;
  *(_QWORD *)(v9 + 8) = "15 32 4 16 child_index:6830 48 4 20 child_gadget_id:6874 64 8 15 child_iter:6826 96 8 9 <unknown"
                        "> 128 8 9 <unknown> 160 16 14 child_ptr:6836 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unk"
                        "nown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unkn"
                        "own> 704 32 9 <unknown>";
  *(_QWORD *)(v9 + 16) = JsonConfigMgr::checkCustomSlotInfo;
  v11 = (_DWORD *)(v9 >> 3);
  v11[536862720] = -235802127;
  v11[536862721] = -234556924;
  v11[536862722] = -218959360;
  v11[536862723] = -218959360;
  v11[536862724] = -218959360;
  v11[536862725] = -219021312;
  v11[536862727] = -218959118;
  v11[536862729] = -218959118;
  v11[536862731] = -218959118;
  v11[536862733] = -218959118;
  v11[536862735] = -218959118;
  v11[536862737] = -218959118;
  v11[536862739] = -218959118;
  v11[536862741] = -218959118;
  v11[536862743] = -202116109;
  if ( std::operator==<CustomCommonNodeData>(0LL, p_node_ptr) )
  {
    v8 = -1;
    goto LABEL_92;
  }
  if ( *(_BYTE *)(((unsigned __int64)&json_slot_config->slot_config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&json_slot_config->slot_config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&json_slot_config->slot_config_id);
  }
  slot_config_id = json_slot_config->slot_config_id;
  excel_slot_config_ptr = JsonConfigMgr::getCustomSlotExcelConfig(this, slot_config_id);
  if ( !excel_slot_config_ptr )
  {
    if ( *(char *)(((v9 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v9 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v9 - 64 + 31) & 7) >= *(_BYTE *)(((v9 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v9 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v9 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "checkCustomSlotInfo",
      6822);
    v13 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            (common::milog::MiLogStream *const)(v9 + 192),
            (const char (*)[41])"can't find slot config, slot_identifier:");
    v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, p_slot_identifier);
    v15 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v14, (const char (*)[17])" slot_config_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &json_slot_config->slot_config_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 192));
    v8 = -1;
    goto LABEL_92;
  }
  p_child_map = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_node_ptr)->child_map;
  if ( *(_BYTE *)(((v9 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v9 + 64, slot_config_id);
  *(std::map<std::string,unsigned int>::iterator *)(v9 + 64) = std::map<std::string,unsigned int>::find(
                                                                 p_child_map,
                                                                 p_slot_identifier);
  v17 = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_node_ptr)->child_map;
  if ( *(_BYTE *)(((v9 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v9 + 96, p_slot_identifier);
  *(std::map<std::string,unsigned int>::iterator *)(v9 + 96) = std::map<std::string,unsigned int>::end(v17);
  v18 = (char *)(v9 + 96);
  v19 = std::operator!=(
          (const std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Self *)(v9 + 64),
          (const std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Self *)(v9 + 96));
  *(_BYTE *)(((v9 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v19 )
  {
    *(_BYTE *)(((v9 + 32) >> 3) + 0x7FFF8000) = 4;
    v20 = std::_Rb_tree_iterator<std::pair<std::string const,unsigned int>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> > *const)(v9 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v20->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v20->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v20->second);
    }
    second = v20->second;
    v22 = *(_BYTE *)(((v9 + 32) >> 3) + 0x7FFF8000);
    if ( v22 != 0 && v22 <= 3 )
    {
      LOBYTE(v18) = v22 != 0;
      __asan_report_store4(v9 + 32, v18);
    }
    *(_DWORD *)(v9 + 32) = second;
    v23 = *(unsigned int *)(v9 + 32);
    if ( v23 >= std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_vec) )
    {
      *(_DWORD *)(((v9 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v9 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v9 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v9 + 31) & 7) >= *(_BYTE *)(((v9 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v9 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v9 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "checkCustomSlotInfo",
        6833);
      v24 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
              (common::milog::MiLogStream *const)(v9 + 256),
              (const char (*)[13])"child_index:");
      v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v9 + 32));
      v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v25, (const char (*)[16])" node_vec size:");
      *(_BYTE *)(((v9 + 128) >> 3) + 0x7FFF8000) = 0;
      v27 = std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_vec);
      if ( *(_BYTE *)(((v9 + 128) >> 3) + 0x7FFF8000) )
        v27 = __asan_report_store8(v9 + 128, " node_vec size:");
      *(_QWORD *)(v9 + 128) = v27;
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
        v26,
        (const unsigned __int64 *)(v9 + 128));
      *(_BYTE *)(((v9 + 128) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 256));
      v8 = -1;
      v28 = 0;
LABEL_83:
      if ( !v28 )
        goto LABEL_92;
LABEL_91:
      v8 = 0;
      goto LABEL_92;
    }
    *(_WORD *)(((v9 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v9 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v9 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v9 + 32);
    v29 = std::vector<std::shared_ptr<CustomCommonNodeData>>::operator[](node_vec, *(unsigned int *)(v9 + 32));
    std::shared_ptr<CustomCommonNodeData>::shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v9 + 160), v29);
    v30 = (char *)(v9 + 160);
    if ( std::operator==<CustomCommonNodeData>(0LL, (const std::shared_ptr<CustomCommonNodeData> *)(v9 + 160)) )
    {
      *(_DWORD *)(((v9 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v9 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v9 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v9 + 95) & 7) >= *(_BYTE *)(((v9 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v9 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v9 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "checkCustomSlotInfo",
        6839);
      v31 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)(v9 + 320),
              (const char (*)[35])"child_ptr is nullptr, child_index:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v9 + 32));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 320));
      *(_DWORD *)(((v9 + 320) >> 3) + 0x7FFF8000) = -117901064;
      v8 = -1;
      v32 = 0;
    }
    else
    {
      v33 = (__int64)std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
      v34 = *(_BYTE *)(((unsigned __int64)(v33 + 88) >> 3) + 0x7FFF8000);
      LOBYTE(v30) = v34 != 0;
      v35 = v34 < 0;
      if ( v35 )
        v33 = __asan_report_load1(v33 + 88, v30, v35);
      if ( *(_BYTE *)(v33 + 88) )
      {
        *(_DWORD *)(((v9 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v9 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v9 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v9 - 97) & 7) >= *(_BYTE *)(((v9 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v9 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v9 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_config_mgr.cpp",
          "checkCustomSlotInfo",
          6845);
        v36 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                (common::milog::MiLogStream *const)(v9 + 384),
                (const char (*)[36])"slot have checked, slot_identifier:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v36, p_slot_identifier);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 384));
        *(_DWORD *)(((v9 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v8 = -1;
        v32 = 0;
      }
      else
      {
        v37 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
        if ( common::tools::MiscUtils::isContains<unsigned int>(
               &excel_slot_config_ptr->optional_parts_id_list,
               &v37->config_id) )
        {
          p_config_id = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160))->config_id;
          if ( !common::tools::MiscUtils::isContains<unsigned int>(
                  &excel_slot_config_ptr->default_parts_id_list,
                  p_config_id) )
          {
            p_home_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.home_config_mgr;
            v46 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
            v47 = &v46->config_id;
            if ( *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v47 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v47);
            }
            custom_gadget_config_ptr = data::HomeWorldExcelConfigMgrBase::findCusmtomGadgetConfigIdExcelConfig(
                                         p_home_config_mgr,
                                         v46->config_id);
            if ( !custom_gadget_config_ptr )
            {
              *(_DWORD *)(((v9 + 512) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v9 + 512) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v9 + 543) >> 3) + 0x7FFF8000) != 0
                && (char)((v9 + 31) & 7) >= *(_BYTE *)(((v9 + 543) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v9 + 512, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v9 + 512),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_config_mgr.cpp",
                "checkCustomSlotInfo",
                6860);
              v48 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                      (common::milog::MiLogStream *const)(v9 + 512),
                      (const char (*)[45])"find custom gadget config failed, config_id:");
              v49 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v48, &v49->config_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 512));
              *(_DWORD *)(((v9 + 512) >> 3) + 0x7FFF8000) = -117901064;
              v8 = -1;
              v32 = 0;
              goto LABEL_82;
            }
            v50 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
            if ( common::tools::MiscUtils::isContains<unsigned int>(
                   &excel_slot_config_ptr->pass_part_id_list,
                   &v50->config_id) )
            {
              p_config_id = &custom_gadget_config_ptr->item_id;
              v51 = std::unordered_map<unsigned int,unsigned int>::operator[](
                      pass_part_item_count_map,
                      &custom_gadget_config_ptr->item_id);
              v52 = *(_BYTE *)(((unsigned __int64)v51 >> 3) + 0x7FFF8000);
              LOBYTE(p_config_id) = v52 != 0;
              if ( v52 != 0 && (char)(((unsigned __int8)v51 & 7) + 3) >= v52 )
                __asan_report_load4(v51);
              ++*v51;
            }
            else
            {
              p_config_id = &custom_gadget_config_ptr->item_id;
              v53 = std::map<unsigned int,unsigned int>::operator[](
                      need_item_count_map,
                      &custom_gadget_config_ptr->item_id);
              v54 = *(_BYTE *)(((unsigned __int64)v53 >> 3) + 0x7FFF8000);
              LOBYTE(p_config_id) = v54 != 0;
              if ( v54 != 0 && (char)(((unsigned __int8)v53 & 7) + 3) >= v54 )
                __asan_report_load4(v53);
              ++*v53;
            }
          }
          *(_BYTE *)(((v9 + 48) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v9 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v9 + 48) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v9 + 48, p_config_id);
          *(_DWORD *)(v9 + 48) = 0;
          v55 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
          v56 = &v55->config_id;
          if ( *(_BYTE *)(((unsigned __int64)v56 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v56 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v56 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v56);
          }
          config_id = v55->config_id;
          v58 = config_id;
          if ( JsonConfigMgr::getCustomSlotGadgetId(this, config_id, (uint32_t *)(v9 + 48)) )
          {
            *(_DWORD *)(((v9 + 576) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v9 + 576) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v9 + 607) >> 3) + 0x7FFF8000) != 0
              && (char)((v9 + 95) & 7) >= *(_BYTE *)(((v9 + 607) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v9 + 576, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v9 + 576),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_config_mgr.cpp",
              "checkCustomSlotInfo",
              6877);
            v59 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    (common::milog::MiLogStream *const)(v9 + 576),
                    (const char (*)[39])"getCustomSlotGadgetId fails, config_id");
            v60 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v59, &v60->config_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 576));
            *(_DWORD *)(((v9 + 576) >> 3) + 0x7FFF8000) = -117901064;
            v8 = -1;
            v32 = 0;
          }
          else
          {
            v61 = *(unsigned __int8 *)(((v9 + 48) >> 3) + 0x7FFF8000);
            if ( (_BYTE)v61 != 0 && (char)v61 <= 3 )
              __asan_report_load4(v9 + 48);
            v62 = *(_DWORD *)(v9 + 48);
            v63 = (unsigned __int64)std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
            v64 = *(_BYTE *)((v63 >> 3) + 0x7FFF8000);
            if ( v64 != 0 && v64 <= 3 )
            {
              LOBYTE(v58) = v64 != 0;
              v63 = __asan_report_store4(v63, v58);
            }
            *(_DWORD *)v63 = v62;
            v65 = (__int64)std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
            v66 = *(_BYTE *)(((unsigned __int64)(v65 + 88) >> 3) + 0x7FFF8000);
            LOBYTE(v58) = v66 != 0;
            v67 = v66 < 0;
            if ( v67 )
              v65 = __asan_report_store1(v65 + 88, v58, v67);
            *(_BYTE *)(v65 + 88) = 1;
            p_gadget_config_mgr = &JsonConfigMgr::getConfig(this)->txt_config_mgr.gadget_config_mgr;
            if ( *(_BYTE *)(((v9 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v9 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v9 + 48);
            child_gadget_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(
                                        p_gadget_config_mgr,
                                        *(_DWORD *)(v9 + 48));
            if ( child_gadget_config_ptr )
            {
              if ( *(_BYTE *)(((unsigned __int64)&child_gadget_config_ptr->type >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)child_gadget_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&child_gadget_config_ptr->type >> 3)
                                                                                       + 0x7FFF8000) )
              {
                __asan_report_load4(&child_gadget_config_ptr->type);
              }
              if ( child_gadget_config_ptr->type == CustomGadget )
                std::queue<std::shared_ptr<CustomCommonNodeData>>::push(
                  node_queue,
                  (const std::queue<std::shared_ptr<CustomCommonNodeData>>::value_type *)(v9 + 160));
              v32 = 1;
            }
            else
            {
              *(_DWORD *)(((v9 + 640) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v9 + 640) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v9 + 671) >> 3) + 0x7FFF8000) != 0
                && (char)((v9 - 97) & 7) >= *(_BYTE *)(((v9 + 671) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v9 + 640, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v9 + 640),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_config_mgr.cpp",
                "checkCustomSlotInfo",
                6885);
              v69 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                      (common::milog::MiLogStream *const)(v9 + 640),
                      (const char (*)[40])"findGadgetExcelConfig fails, gadget_id:");
              v70 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v69,
                      (const unsigned int *)(v9 + 48));
              v71 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v70,
                      (const char (*)[11])" config_id");
              v72 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v71, &v72->config_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 640));
              *(_DWORD *)(((v9 + 640) >> 3) + 0x7FFF8000) = -117901064;
              v8 = -1;
              v32 = 0;
            }
          }
          goto LABEL_82;
        }
        *(_DWORD *)(((v9 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v9 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v9 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v9 - 64 + 31) & 7) >= *(_BYTE *)(((v9 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v9 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v9 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_config_mgr.cpp",
          "checkCustomSlotInfo",
          6850);
        v38 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                (common::milog::MiLogStream *const)(v9 + 448),
                (const char (*)[17])"slot_identifier:");
        v39 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v38, p_slot_identifier);
        v40 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v39,
                (const char (*)[17])" slot config id:");
        v41 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 160));
        v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, &v41->config_id);
        v43 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                v42,
                (const char (*)[32])" not in optional_parts_id_list:");
        common::milog::MiLogStream::operator<<<unsigned int>(v43, &excel_slot_config_ptr->optional_parts_id_list);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 448));
        *(_DWORD *)(((v9 + 448) >> 3) + 0x7FFF8000) = -117901064;
        v8 = -1;
        v32 = 0;
      }
    }
LABEL_82:
    std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v9 + 160));
    v28 = v32 == 1;
    goto LABEL_83;
  }
  if ( *(char *)(((unsigned __int64)&excel_slot_config_ptr->is_necessary >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&excel_slot_config_ptr->is_necessary, v18, &excel_slot_config_ptr->is_necessary);
  if ( !excel_slot_config_ptr->is_necessary )
    goto LABEL_91;
  *(_DWORD *)(((v9 + 704) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v9 + 704) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v9 + 735) >> 3) + 0x7FFF8000) != 0
    && (char)((v9 - 64 + 31) & 7) >= *(_BYTE *)(((v9 + 735) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v9 + 704, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v9 + 704),
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/json_config_mgr.cpp",
    "checkCustomSlotInfo",
    6899);
  v73 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
          (common::milog::MiLogStream *const)(v9 + 704),
          (const char (*)[11])"gadget_id:");
  v74 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_node_ptr);
  v75 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v73, &v74->gadget_id);
  v76 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v75, (const char (*)[17])" slot_config_id:");
  v77 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v76, &excel_slot_config_ptr->slot_id);
  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v77, (const char (*)[17])"can not be empty");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v9 + 704));
  v8 = -1;
LABEL_92:
  result = v8;
  if ( v87 == (char *)v9 )
  {
    *(_QWORD *)((v9 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v9 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v9 >> 3) + 0x7FFF8054) = 0;
    *(_DWORD *)((v9 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v9 = 1172321806LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6908: range 000000000F2BEB8E-000000000F2BEBBE
const data::CustomSlotConfig *__cdecl JsonConfigMgr::getCustomSlotExcelConfig(
        const JsonConfigMgr *const this,
        uint32_t slot_id)
{
  const HK4EDesignConfig *Config; // rax

  Config = JsonConfigMgr::getConfig(this);
  return data::HomeWorldExcelConfigMgrBase::findCusmtomGadgetSlotExcelConfig(
           &Config->txt_config_mgr.home_config_mgr,
           slot_id);
};

// Line 6913: range 000000000F2BEBC0-000000000F2BEE6F
__int64 __fastcall JsonConfigMgr::getCustomSlotGadgetId(
        const JsonConfigMgr *const this,
        uint32_t config_id,
        unsigned __int64 gadget_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  const HK4EDesignConfig *Config; // rax
  __int64 v7; // rsi
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  uint32_t v10; // ecx
  char v11; // dl
  const data::CusmtomGadgetConfigIdExcelConfig *custom_gadget_config_ptr; // [rsp+28h] [rbp-A8h]
  char v14[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 config_id:6912 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::getCustomSlotGadgetId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 48) = config_id;
  Config = JsonConfigMgr::getConfig(this);
  v7 = *(unsigned int *)(v3 + 48);
  custom_gadget_config_ptr = data::HomeWorldExcelConfigMgrBase::findCusmtomGadgetConfigIdExcelConfig(
                               &Config->txt_config_mgr.home_config_mgr,
                               v7);
  if ( custom_gadget_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&custom_gadget_config_ptr->gadget_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&custom_gadget_config_ptr->gadget_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&custom_gadget_config_ptr->gadget_id);
    }
    v10 = custom_gadget_config_ptr->gadget_id;
    v11 = *(_BYTE *)((gadget_id >> 3) + 0x7FFF8000);
    if ( v11 != 0 && (char)((gadget_id & 7) + 3) >= v11 )
    {
      LOBYTE(v7) = v11 != 0;
      __asan_report_store4(gadget_id, v7);
    }
    *(_DWORD *)gadget_id = v10;
    result = 0LL;
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_config_mgr.cpp",
      "getCustomSlotGadgetId",
      6917);
    v8 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[45])"custom_gadget_config_ptr is null, config_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6925: range 000000000F2BEE70-000000000F2C013C
int32_t __cdecl JsonConfigMgr::getCustomGadgetSlotInfo(
        const JsonConfigMgr *const this,
        const std::vector<std::shared_ptr<CustomCommonNodeData>> *node_vec,
        uint32_t *slot_config_id,
        uint32_t *slot_gadget_id)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  const std::shared_ptr<CustomCommonNodeData> *v8; // rax
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int gadget_id; // edx
  char *v11; // rsi
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::unordered_map<std::string,data::CustomGadgetNodeSlot>::size_type v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  char *v19; // rsi
  bool v20; // al
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true>::pointer v21; // rax
  uint32_t v22; // ecx
  char v23; // dl
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::map<std::string,unsigned int> *p_child_map; // rdx
  std::map<std::string,unsigned int> *v26; // rdx
  char *v27; // rsi
  bool v28; // al
  common::milog::MiLogStream *v29; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  _BOOL4 v31; // eax
  std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::pointer v32; // rax
  unsigned int second; // ecx
  char v34; // al
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v35; // r15
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // r14
  std::vector<std::shared_ptr<CustomCommonNodeData>>::size_type v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  const std::shared_ptr<CustomCommonNodeData> *v43; // rax
  char *v44; // rsi
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // r14
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  int v49; // r15d
  std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  uint32_t v51; // ecx
  char v52; // dl
  int32_t result; // eax
  data::CustomGadgetNodeSlotMap *slot_config_map; // [rsp+38h] [rbp-358h]
  char v58[848]; // [rsp+40h] [rbp-350h] BYREF

  v5 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(800LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "17 48 4 16 child_index:6969 64 8 9 <unknown> 96 8 21 slot_config_iter:6951 128 8 9 <unknown> 160"
                        " 8 15 child_iter:6963 192 8 9 <unknown> 224 8 9 <unknown> 256 16 13 root_ptr:6931 288 16 22 gadg"
                        "et_config_ptr:6937 320 16 14 child_ptr:6975 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unkn"
                        "own> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = JsonConfigMgr::getCustomGadgetSlotInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -218959360;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862726] = -218959360;
  v7[536862727] = -218959360;
  v7[536862728] = -219021312;
  v7[536862729] = -219021312;
  v7[536862730] = -219021312;
  v7[536862732] = -218959118;
  v7[536862734] = -218959118;
  v7[536862736] = -218959118;
  v7[536862738] = -218959118;
  v7[536862740] = -218959118;
  v7[536862742] = -218959118;
  v7[536862744] = -202116109;
  if ( !std::vector<std::shared_ptr<CustomCommonNodeData>>::empty(node_vec) )
  {
    v8 = std::vector<std::shared_ptr<CustomCommonNodeData>>::front(node_vec);
    std::shared_ptr<CustomCommonNodeData>::shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 256), v8);
    if ( std::operator==<CustomCommonNodeData>(0LL, (const std::shared_ptr<CustomCommonNodeData> *)(v5 + 256)) )
    {
      if ( *(char *)(((v5 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 65) & 7) >= *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "getCustomGadgetSlotInfo",
        6934);
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
        (common::milog::MiLogStream *const)(v5 + 416),
        (const char (*)[20])"root_ptr is nullptr");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 416));
      *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
      goto LABEL_73;
    }
    v9 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
    if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(v9);
    }
    gadget_id = v9->gadget_id;
    if ( *(_WORD *)(((v5 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    JsonConfigMgr::findGadgetConfig(
      (const JsonConfigMgr *const)(v5 + 288),
      (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigGadget>> *)this,
      gadget_id);
    v11 = (char *)(v5 + 288);
    if ( std::operator==<data::ConfigGadget>(0LL, (const std::shared_ptr<data::ConfigGadget> *)(v5 + 288)) )
    {
      if ( *(char *)(((v5 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 32 + 31) & 7) >= *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "getCustomGadgetSlotInfo",
        6940);
      v12 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              (common::milog::MiLogStream *const)(v5 + 480),
              (const char (*)[42])"can't find gadget json config, gadget_id:");
      v13 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &v13->gadget_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 480));
      *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      slot_config_map = &std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 288))->misc.custom_gadget_node.slot_map;
      if ( std::unordered_map<std::string,data::CustomGadgetNodeSlot>::size(slot_config_map) == 1 )
      {
        if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 96, v11);
        *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v5 + 96) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::begin(slot_config_map);
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 128, v11);
        *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v5 + 128) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::end(slot_config_map);
        v19 = (char *)(v5 + 128);
        v20 = std::__detail::operator!=<std::pair<std::string const,data::CustomGadgetNodeSlot>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v5 + 96),
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v5 + 128));
        *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
        if ( v20 )
        {
          v21 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::CustomGadgetNodeSlot>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true> *const)(v5 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&v21->second.slot_config_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v21->second.slot_config_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&v21->second.slot_config_id);
          }
          v22 = v21->second.slot_config_id;
          v23 = *(_BYTE *)(((unsigned __int64)slot_config_id >> 3) + 0x7FFF8000);
          LOBYTE(v19) = v23 != 0;
          if ( v23 != 0 && (char)(((unsigned __int8)slot_config_id & 7) + 3) >= v23 )
            __asan_report_store4(slot_config_id, v19);
          *slot_config_id = v22;
        }
        v24 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
        if ( std::map<std::string,unsigned int>::empty(&v24->child_map) )
        {
          if ( *(_BYTE *)(((unsigned __int64)slot_gadget_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)slot_gadget_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)slot_gadget_id >> 3)
                                                                             + 0x7FFF8000) )
          {
            __asan_report_store4(slot_gadget_id, ((unsigned __int8)slot_gadget_id & 7u) + 3);
          }
          *slot_gadget_id = 0;
        }
        else
        {
          *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
          p_child_map = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256))->child_map;
          if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 160, v19);
          *(std::map<std::string,unsigned int>::iterator *)(v5 + 160) = std::map<std::string,unsigned int>::begin(p_child_map);
          *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = 0;
          v26 = &std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256))->child_map;
          if ( *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 192, v19);
          *(std::map<std::string,unsigned int>::iterator *)(v5 + 192) = std::map<std::string,unsigned int>::end(v26);
          v27 = (char *)(v5 + 192);
          v28 = std::operator==(
                  (const std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Self *)(v5 + 160),
                  (const std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Self *)(v5 + 192));
          *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = -8;
          if ( v28 )
          {
            *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 608) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 608, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 608),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_config_mgr.cpp",
              "getCustomGadgetSlotInfo",
              6966);
            v29 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    (common::milog::MiLogStream *const)(v5 + 608),
                    (const char (*)[39])"get child map begin failed, gadget_id:");
            v30 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &v30->gadget_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 608));
            *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v31 = 0;
          }
          else
          {
            *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 4;
            v32 = std::_Rb_tree_iterator<std::pair<std::string const,unsigned int>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> > *const)(v5 + 160));
            if ( *(_BYTE *)(((unsigned __int64)&v32->second >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v32->second >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v32->second);
            }
            second = v32->second;
            v34 = *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000);
            if ( v34 != 0 && v34 <= 3 )
            {
              LOBYTE(v27) = v34 != 0;
              __asan_report_store4(v5 + 48, v27);
            }
            *(_DWORD *)(v5 + 48) = second;
            v35 = *(unsigned int *)(v5 + 48);
            if ( v35 < std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_vec) )
            {
              *(_WORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v5 + 48);
              v43 = std::vector<std::shared_ptr<CustomCommonNodeData>>::operator[](node_vec, *(unsigned int *)(v5 + 48));
              std::shared_ptr<CustomCommonNodeData>::shared_ptr(
                (std::shared_ptr<CustomCommonNodeData> *const)(v5 + 320),
                v43);
              v44 = (char *)(v5 + 320);
              if ( std::operator==<CustomCommonNodeData>(0LL, (const std::shared_ptr<CustomCommonNodeData> *)(v5 + 320)) )
              {
                *(_DWORD *)(((v5 + 736) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 736) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 767) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 - 32 + 31) & 7) >= *(_BYTE *)(((v5 + 767) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 736, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 736),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_config_mgr.cpp",
                  "getCustomGadgetSlotInfo",
                  6978);
                v45 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                        (common::milog::MiLogStream *const)(v5 + 736),
                        (const char (*)[35])"child_ptr is nullptr, child_index:");
                v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v45,
                        (const unsigned int *)(v5 + 48));
                v47 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v46,
                        (const char (*)[12])" gadget_id:");
                v48 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v47, &v48->gadget_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 736));
                *(_DWORD *)(((v5 + 736) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v49 = 0;
              }
              else
              {
                v50 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 320));
                if ( *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(v50);
                }
                v51 = v50->gadget_id;
                v52 = *(_BYTE *)(((unsigned __int64)slot_gadget_id >> 3) + 0x7FFF8000);
                if ( v52 != 0 && (char)(((unsigned __int8)slot_gadget_id & 7) + 3) >= v52 )
                {
                  LOBYTE(v44) = v52 != 0;
                  __asan_report_store4(slot_gadget_id, v44);
                }
                *slot_gadget_id = v51;
                v49 = 1;
              }
              std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 320));
              v31 = v49 == 1;
            }
            else
            {
              *(_DWORD *)(((v5 + 672) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 672) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 703) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 - 65) & 7) >= *(_BYTE *)(((v5 + 703) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 672, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 672),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_config_mgr.cpp",
                "getCustomGadgetSlotInfo",
                6972);
              v36 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      (common::milog::MiLogStream *const)(v5 + 672),
                      (const char (*)[13])"child_index:");
              v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v36,
                      (const unsigned int *)(v5 + 48));
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])" node_vec size:");
              *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = 0;
              v39 = std::vector<std::shared_ptr<CustomCommonNodeData>>::size(node_vec);
              if ( *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) )
                v39 = __asan_report_store8(v5 + 224, " node_vec size:");
              *(_QWORD *)(v5 + 224) = v39;
              v40 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v38,
                      (const unsigned __int64 *)(v5 + 224));
              v41 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v40,
                      (const char (*)[12])" gadget_id:");
              v42 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, &v42->gadget_id);
              *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 672));
              *(_DWORD *)(((v5 + 672) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v31 = 0;
            }
          }
          *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -1800;
          if ( !v31 )
            goto LABEL_72;
        }
        v4 = 0;
      }
      else
      {
        if ( *(char *)(((v5 + 544) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 544, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 544),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_config_mgr.cpp",
          "getCustomGadgetSlotInfo",
          6948);
        v14 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                (common::milog::MiLogStream *const)(v5 + 544),
                (const char (*)[22])"slot_config_map size:");
        v15 = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::size(slot_config_map);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          v15 = __asan_report_store8(v5 + 64, "slot_config_map size:");
        *(_QWORD *)(v5 + 64) = v15;
        v16 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v14,
                (const unsigned __int64 *)(v5 + 64));
        v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" gadget_id:");
        v18 = std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CustomCommonNodeData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &v18->gadget_id);
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 544));
        *(_DWORD *)(((v5 + 544) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
      }
    }
LABEL_72:
    std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v5 + 288));
LABEL_73:
    std::shared_ptr<CustomCommonNodeData>::~shared_ptr((std::shared_ptr<CustomCommonNodeData> *const)(v5 + 256));
    goto LABEL_74;
  }
  if ( *(char *)(((v5 + 352) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 383) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 383) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 352, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 352),
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/json_config_mgr.cpp",
    "getCustomGadgetSlotInfo",
    6928);
  common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
    (common::milog::MiLogStream *const)(v5 + 352),
    (const char (*)[15])"node_vec empty");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 352));
  v4 = -1;
LABEL_74:
  result = v4;
  if ( v58 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8060) = -168430091;
  }
  return result;
};

// Line 6988: range 000000000F2C013E-000000000F2C03F4
int32_t __cdecl JsonConfigMgr::assignAttackIdToConfigAttackInfo(
        JsonConfigMgr *const this,
        data::ConfigAttackInfo *config_attack_info)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rdx
  int32_t result; // eax
  uint32_t v8; // ecx
  char v9; // al
  data::ConfigAttackInfo *config_attack_infoa; // [rsp+0h] [rbp-90h]
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  config_attack_infoa = config_attack_info;
  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::assignAttackIdToConfigAttackInfo;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)config_attack_info >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)config_attack_info >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(config_attack_info);
  }
  if ( config_attack_info->attack_id )
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "assignAttackIdToConfigAttackInfo",
      6991);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v6 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
           v5,
           (const char (*)[42])"config_attack_info already has attack_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config_attack_info->attack_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->total_config_attack_info_count_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->total_config_attack_info_count_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->total_config_attack_info_count_);
    }
    v8 = ++this->total_config_attack_info_count_;
    v9 = *(_BYTE *)(((unsigned __int64)config_attack_info >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      LOBYTE(config_attack_info) = v9 != 0;
      __asan_report_store4(config_attack_infoa, config_attack_info);
    }
    config_attack_infoa->attack_id = v8;
    result = 0;
  }
  if ( v11 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6999: range 000000000F2C03F6-000000000F2C0738
int32_t __cdecl JsonConfigMgr::assignAttackIdToAllConfigAttackInfoInConfigCombat(
        JsonConfigMgr *const this,
        data::ConfigCombat *config_combat)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::ConfigAttackInfo *p_attack_info; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  int v9; // eax
  int32_t result; // eax
  data::ConfigAnimEventMap *__for_range; // [rsp+10h] [rbp-F0h]
  std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true>::reference __in; // [rsp+18h] [rbp-E8h]
  const std::string *anim_event_id; // [rsp+20h] [rbp-E0h]
  char v14[208]; // [rsp+30h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 8 16 __for_begin:7000 64 8 14 __for_end:7000 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::assignAttackIdToAllConfigAttackInfoInConfigCombat;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -202116109;
  __for_range = &config_combat->anim_events;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, config_combat);
  *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v3 + 32) = std::unordered_map<std::string,data::ConfigAttackEvent>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, config_combat);
  *(std::unordered_map<std::string,data::ConfigAttackEvent>::iterator *)(v3 + 64) = std::unordered_map<std::string,data::ConfigAttackEvent>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<std::string const,data::ConfigAttackEvent>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigAttackEvent>,true> *)(v3 + 64)) )
    {
      v9 = 1;
      goto LABEL_16;
    }
    __in = std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v3 + 32));
    anim_event_id = std::get<0ul,std::string const,data::ConfigAttackEvent>(__in);
    p_attack_info = &std::get<1ul,std::string const,data::ConfigAttackEvent>(__in)->attack_info;
    if ( JsonConfigMgr::assignAttackIdToConfigAttackInfo(this, p_attack_info) )
      break;
    std::__detail::_Node_iterator<std::pair<std::string const,data::ConfigAttackEvent>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigAttackEvent>,false,true> *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 96, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 96),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_config_mgr.cpp",
    "assignAttackIdToAllConfigAttackInfoInConfigCombat",
    7004);
  v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v3 + 96),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v8 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
         v7,
         (const char (*)[54])"assignAttackIdToConfigAttackInfo fail, anim_event_id:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, anim_event_id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
  v2 = -1;
  v9 = 0;
LABEL_16:
  if ( v9 == 1 )
    v2 = 0;
  result = v2;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 7012: range 000000000F2C073A-000000000F2C0935
__int64 __fastcall JsonConfigMgr::getFurnitureIdByGroupId(const JsonConfigMgr *const this, __int64 group_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,unsigned int> *p_groupid_to_furnitureid_map; // rdx
  std::map<unsigned int,unsigned int> *v6; // rdx
  bool v7; // al
  __int64 result; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v9; // rdx
  unsigned int *p_second; // rax
  char v11[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 group_id:7011 64 8 9 iter:7013 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::getFurnitureIdByGroupId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = group_id;
  p_groupid_to_furnitureid_map = &this->groupid_to_furnitureid_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, group_id);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                        p_groupid_to_furnitureid_map,
                                                                        (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->groupid_to_furnitureid_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 96) = std::map<unsigned int,unsigned int>::end(v6);
  v7 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    result = 0LL;
  }
  else
  {
    v9 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
    p_second = &v9->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v9->second;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7022: range 000000000F2C0936-000000000F2C17B7
int32_t __cdecl JsonConfigMgr::rewriteRegionalPlayConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int *p_bind_polygon_type; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  uint32_t *p_bind_scene; // rax
  const std::string *v10; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,std::string > >,bool> v11; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  char v19; // dl
  const std::string *v20; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<const data::PolygonType,std::string > >,bool> v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  char v25; // dl
  const char *v26; // rsi
  __int64 Description; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  __gnu_cxx::__normal_iterator<data::ConfigRegionalPlayVarData*,std::vector<data::ConfigRegionalPlayVarData> >::reference v30; // rax
  __int64 var_type; // rsi
  unsigned __int64 v32; // rax
  int v33; // ecx
  char v34; // al
  float init_value; // xmm0_4
  RegionalPlayVarJsonConfig *v36; // rax
  unsigned int *v37; // rcx
  RegionalPlayVarJsonConfig *v38; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,RegionalPlayVarJsonConfig> >,bool> v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  unsigned __int64 v44; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-284h]
  data::ConfigRegionalPlayMap *__for_range; // [rsp+20h] [rbp-280h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true>::reference v48; // [rsp+28h] [rbp-278h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> > >::type *play_name; // [rsp+30h] [rbp-270h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> > >::type *config_ptr; // [rsp+38h] [rbp-268h]
  data::ConfigRegionalPlayVarDataArray *__for_range_0; // [rsp+40h] [rbp-260h]
  const data::ConfigRegionalPlayVarData *v52; // [rsp+48h] [rbp-258h]
  char v53[592]; // [rsp+50h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 32 4 13 var_type:7050 48 8 16 __for_begin:7026 80 8 14 __for_end:7026 112 8 9 <unknown> 144 8"
                        " 16 __for_begin:7048 176 8 14 __for_end:7048 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unk"
                        "nown> 400 32 9 <unknown> 464 40 20 var_json_config:7052";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::rewriteRegionalPlayConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  ret = 0;
  __for_range = &this->config_regional_play_map_;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 48, config);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::iterator *)(v2 + 48) = std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, config);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::iterator *)(v2 + 80) = std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true> *)(v2 + 48),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true> *)(v2 + 80)) )
  {
    v48 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true> *const)(v2 + 48));
    play_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>(v48);
    config_ptr = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>(v48);
    p_bind_polygon_type = (unsigned int *)config_ptr;
    if ( std::operator==<data::ConfigRegionalPlayBase>(0LL, config_ptr) )
    {
      *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 208, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 208),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "rewriteRegionalPlayConfig",
        7030);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 208),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             v6,
             (const char (*)[43])"config_ptr is nullptr, regional play name:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, play_name);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
      *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
      p_bind_scene = &v8->bind_scene;
      if ( *(_BYTE *)(((unsigned __int64)p_bind_scene >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_bind_scene & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_bind_scene >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(p_bind_scene);
      }
      if ( v8->bind_scene )
      {
        p_bind_polygon_type = &std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr)->bind_scene;
        v11 = std::map<unsigned int,std::string>::emplace<unsigned int &,std::string const&>(
                &this->regional_play_scene_2_name_map_,
                p_bind_polygon_type,
                play_name,
                p_bind_polygon_type,
                v10);
        if ( !v11.second )
        {
          *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 272, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 272),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteRegionalPlayConfig",
            7037);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 272),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v14 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  v13,
                  (const char (*)[37])"bind scene id duplicated, scene id: ");
          v15 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &v15->bind_scene);
          v17 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v16,
                  (const char (*)[23])" ,regional play name: ");
          p_bind_polygon_type = (unsigned int *)play_name;
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, play_name);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
          *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      v18 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
      v19 = *(_BYTE *)(((unsigned __int64)&v18->bind_polygon_type >> 3) + 0x7FFF8000);
      LOBYTE(p_bind_polygon_type) = v19 != 0;
      if ( v19 != 0 && v19 <= 3 )
        __asan_report_load4(&v18->bind_polygon_type);
      if ( v18->bind_polygon_type )
      {
        p_bind_polygon_type = (unsigned int *)&std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr)->bind_polygon_type;
        v21 = std::map<data::PolygonType,std::string>::emplace<data::PolygonType&,std::string const&>(
                &this->regional_play_polygon_2_name_map_,
                (data::PolygonType *)p_bind_polygon_type,
                play_name,
                (data::PolygonType *)p_bind_polygon_type,
                v20);
        if ( !v21.second )
        {
          *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 336, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 336),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteRegionalPlayConfig",
            7044);
          v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 336),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v26 = "duplicated bind polygon type: ";
          v23 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  v22,
                  (const char (*)[31])"duplicated bind polygon type: ");
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
          v24 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
          v25 = *(_BYTE *)(((unsigned __int64)&v24->bind_polygon_type >> 3) + 0x7FFF8000);
          LOBYTE(v26) = v25 != 0;
          if ( v25 != 0 && v25 <= 3 )
            __asan_report_load4(&v24->bind_polygon_type);
          Description = (__int64)data::getDescription(v24->bind_polygon_type);
          if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
            Description = __asan_report_store8(v2 + 112, v26);
          *(_QWORD *)(v2 + 112) = Description;
          v28 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                  v23,
                  (const char *const *)(v2 + 112));
          v29 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v28,
                  (const char (*)[23])" ,regional play name: ");
          p_bind_polygon_type = (unsigned int *)play_name;
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, play_name);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
          *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      __for_range_0 = &std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr)->var_list;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 144, p_bind_polygon_type);
      *(std::vector<data::ConfigRegionalPlayVarData>::iterator *)(v2 + 144) = std::vector<data::ConfigRegionalPlayVarData>::begin(__for_range_0);
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 176, p_bind_polygon_type);
      *(std::vector<data::ConfigRegionalPlayVarData>::iterator *)(v2 + 176) = std::vector<data::ConfigRegionalPlayVarData>::end(__for_range_0);
      while ( __gnu_cxx::operator!=<data::ConfigRegionalPlayVarData *,std::vector<data::ConfigRegionalPlayVarData>>(
                (const __gnu_cxx::__normal_iterator<data::ConfigRegionalPlayVarData*,std::vector<data::ConfigRegionalPlayVarData> > *)(v2 + 144),
                (const __gnu_cxx::__normal_iterator<data::ConfigRegionalPlayVarData*,std::vector<data::ConfigRegionalPlayVarData> > *)(v2 + 176)) )
      {
        v30 = __gnu_cxx::__normal_iterator<data::ConfigRegionalPlayVarData *,std::vector<data::ConfigRegionalPlayVarData>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigRegionalPlayVarData*,std::vector<data::ConfigRegionalPlayVarData> > *const)(v2 + 144));
        v52 = v30;
        *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v30);
        }
        var_type = (unsigned int)v52->var_type;
        if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 32, var_type);
        *(_DWORD *)(v2 + 32) = var_type;
        v32 = ((v2 + 464) >> 3) + 2147450880;
        *(_DWORD *)v32 = 0;
        *(_BYTE *)(v32 + 4) = 0;
        RegionalPlayVarJsonConfig::RegionalPlayVarJsonConfig((RegionalPlayVarJsonConfig *const)(v2 + 464));
        if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 32);
        v33 = *(_DWORD *)(v2 + 32);
        v34 = *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000);
        if ( v34 != 0 && v34 <= 3 )
        {
          LOBYTE(var_type) = v34 != 0;
          __asan_report_store4(v2 + 464, var_type);
        }
        *(_DWORD *)(v2 + 464) = v33;
        if ( *(_BYTE *)(((unsigned __int64)&v52->init_value >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v52 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v52->init_value >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&v52->init_value);
        }
        init_value = v52->init_value;
        if ( *(_BYTE *)(((v2 + 468) >> 3) + 0x7FFF8000) != 0
          && (char)(((v2 - 48 + 4) & 7) + 3) >= *(_BYTE *)(((v2 + 468) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v2 + 468, (((_BYTE)v2 - 48 + 4) & 7u) + 3);
        }
        *(float *)(v2 + 468) = init_value;
        std::string::operator=(v2 + 472, play_name);
        v36 = std::move<RegionalPlayVarJsonConfig &>((RegionalPlayVarJsonConfig *)(v2 + 464));
        v39 = std::map<unsigned int,RegionalPlayVarJsonConfig>::emplace<unsigned int &,RegionalPlayVarJsonConfig>(
                &this->regional_play_var_config_map_,
                (unsigned int *)(v2 + 32),
                v36,
                v37,
                v38);
        if ( !v39.second )
        {
          *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteRegionalPlayConfig",
            7058);
          v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 400),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v41 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v40,
                  (const char (*)[22])"duplicated var_type: ");
          v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v41,
                  (const unsigned int *)(v2 + 32));
          v43 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v42,
                  (const char (*)[23])" ,regional play name: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, play_name);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
          *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        RegionalPlayVarJsonConfig::~RegionalPlayVarJsonConfig((RegionalPlayVarJsonConfig *const)(v2 + 464));
        *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
        v44 = ((v2 + 464) >> 3) + 2147450880;
        *(_DWORD *)v44 = -117901064;
        *(_BYTE *)(v44 + 4) = -8;
        __gnu_cxx::__normal_iterator<data::ConfigRegionalPlayVarData *,std::vector<data::ConfigRegionalPlayVarData>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigRegionalPlayVarData*,std::vector<data::ConfigRegionalPlayVarData> > *const)(v2 + 144));
      }
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    }
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true> *const)(v2 + 48));
  }
  result = ret;
  if ( v53 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 7068: range 000000000F2C17B8-000000000F2C20CC
int32_t __cdecl JsonConfigMgr::rewriteDeathZoneConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  unsigned int *v7; // rax
  const unsigned int *v8; // r8
  int *v9; // rdx
  int v10; // ecx
  char v11; // al
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  char *v17; // rsi
  unsigned int *v18; // rax
  const unsigned int *v19; // r8
  int *v20; // rdx
  int v21; // ecx
  char v22; // al
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-1D4h]
  std::map<unsigned int,data::ConfigDeathZone> *__for_range; // [rsp+20h] [rbp-1D0h]
  std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::reference v31; // [rsp+28h] [rbp-1C8h]
  std::tuple_element<0,std::pair<unsigned int const,data::ConfigDeathZone> >::type *death_zone_id; // [rsp+30h] [rbp-1C0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigDeathZone> >::type *death_zone_config; // [rsp+38h] [rbp-1B8h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+40h] [rbp-1B0h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+48h] [rbp-1A8h]
  char v36[416]; // [rsp+50h] [rbp-1A0h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 32 4 15 polygon_id:7072 48 4 13 group_id:7080 64 8 16 __for_begin:7070 96 8 14 __for_end:7070"
                        " 128 8 16 __for_begin:7072 160 8 14 __for_end:7072 192 8 16 __for_begin:7080 224 8 14 __for_end:"
                        "7080 256 32 9 <unknown> 320 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::rewriteDeathZoneConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -202116109;
  ret = 0;
  __for_range = &this->death_zone_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::map<unsigned int,data::ConfigDeathZone>::iterator *)(v2 + 64) = std::map<unsigned int,data::ConfigDeathZone>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::map<unsigned int,data::ConfigDeathZone>::iterator *)(v2 + 96) = std::map<unsigned int,data::ConfigDeathZone>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::_Self *)(v2 + 64),
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::_Self *)(v2 + 96)) )
      break;
    v31 = std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> > *const)(v2 + 64));
    death_zone_id = std::get<0ul,unsigned int const,data::ConfigDeathZone>(v31);
    death_zone_config = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigDeathZone> >::type *)std::get<1ul,unsigned int const,data::ConfigDeathZone>(v31);
    __for_range_0 = &death_zone_config->polygon_list;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 128) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 160) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v2 + 160);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 160)) )
        break;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
      v7 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
      v9 = (int *)v7;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      v10 = *v9;
      v11 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
      if ( v11 != 0 && v11 <= 3 )
      {
        LOBYTE(v6) = v11 != 0;
        __asan_report_store4(v2 + 32, v6);
      }
      *(_DWORD *)(v2 + 32) = v10;
      v12 = std::map<unsigned int,unsigned int>::emplace<unsigned int &,unsigned int const&>(
              &this->polygon_2_death_zone_map_,
              (unsigned int *)(v2 + 32),
              death_zone_id,
              (unsigned int *)&this->polygon_2_death_zone_map_,
              v8);
      if ( !v12.second )
      {
        *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 256, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 256),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewriteDeathZoneConfig",
          7076);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 256),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v13,
                (const char (*)[36])"[DEATH_ZONE] duplicated polygon_id:");
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v14,
                (const unsigned int *)(v2 + 32));
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v15,
                (const char (*)[16])" death_zone_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, death_zone_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
        *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &death_zone_config->group_list;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v6);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 192) = std::vector<unsigned int>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v6);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 224) = std::vector<unsigned int>::end(__for_range_1);
    while ( 1 )
    {
      v17 = (char *)(v2 + 224);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 192),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 224)) )
        break;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
      v18 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
      v20 = (int *)v18;
      if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v18);
      }
      v21 = *v20;
      v22 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v22 != 0 && v22 <= 3 )
      {
        LOBYTE(v17) = v22 != 0;
        __asan_report_store4(v2 + 48, v17);
      }
      *(_DWORD *)(v2 + 48) = v21;
      v23 = std::map<unsigned int,unsigned int>::emplace<unsigned int &,unsigned int const&>(
              &this->group_2_death_zone_map_,
              (unsigned int *)(v2 + 48),
              death_zone_id,
              (unsigned int *)&this->group_2_death_zone_map_,
              v19);
      if ( !v23.second )
      {
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "rewriteDeathZoneConfig",
          7084);
        v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 320),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v25 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                v24,
                (const char (*)[34])"[DEATH_ZONE] duplicated group_id:");
        v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v2 + 48));
        v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v26,
                (const char (*)[16])" death_zone_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, death_zone_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
    }
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> > *const)(v2 + 64));
  }
  result = ret;
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7093: range 000000000F2C20CE-000000000F2C257F
int32_t __cdecl JsonConfigMgr::rewriteGlobalCombatAntiCheatAttackTagWhiteListConfig(
        JsonConfigMgr *const this,
        HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::pair<std::__detail::_Node_iterator<std::string,true,true>,bool> v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  int v9; // edx
  common::milog::MiLogStream *v10; // rax
  int32_t result; // eax
  data::StringList *__for_range; // [rsp+10h] [rbp-120h]
  std::string *attack_tag; // [rsp+18h] [rbp-118h]
  char v14[272]; // [rsp+20h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 16 __for_begin:7095 64 8 14 __for_end:7095 96 32 9 <unknown> 160 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::rewriteGlobalCombatAntiCheatAttackTagWhiteListConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  std::unordered_set<std::string>::clear(&this->combat_anti_cheat_attack_tag_white_set_);
  __for_range = &this->config_global_combat_.combat_anti_cheat_attack_tag_white_list;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, config);
  *(std::vector<std::string>::iterator *)(v3 + 32) = std::vector<std::string>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, config);
  *(std::vector<std::string>::iterator *)(v3 + 64) = std::vector<std::string>::end(__for_range);
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 32),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 64)) )
    {
      v9 = 1;
      goto LABEL_16;
    }
    attack_tag = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 32));
    v6 = std::unordered_set<std::string>::insert(&this->combat_anti_cheat_attack_tag_white_set_, attack_tag);
    if ( !v6.second )
      break;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 96, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 96),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_config_mgr.cpp",
    "rewriteGlobalCombatAntiCheatAttackTagWhiteListConfig",
    7099);
  v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v3 + 96),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v8 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
         v7,
         (const char (*)[63])"combat_anti_cheat_attack_tag_white_list duplicate, attack tag:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, attack_tag);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
  *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -117901064;
  v2 = -1;
  v9 = 0;
LABEL_16:
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v9 == 1 )
  {
    *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "rewriteGlobalCombatAntiCheatAttackTagWhiteListConfig",
      7103);
    v10 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            (common::milog::MiLogStream *const)(v3 + 160),
            (const char (*)[40])"combat_anti_cheat_attack_tag_white_set:");
    common::milog::MiLogStream::operator<<<std::string>(v10, &this->combat_anti_cheat_attack_tag_white_set_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
    v2 = 0;
  }
  result = v2;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 7108: range 000000000F2C2580-000000000F2C398E
int32_t __cdecl JsonConfigMgr::rewriteGlobalCombatConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  int32_t StringHash; // edx
  char v8; // al
  std::pair<std::_Rb_tree_const_iterator<int>,bool> v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  int v12; // edx
  common::milog::MiLogStream *v13; // rax
  std::set<int> *p_global_combat_level_element_abilities_hash_set; // rsi
  char *v15; // rsi
  int32_t v16; // edx
  char v17; // al
  std::pair<std::_Rb_tree_const_iterator<int>,bool> v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  int v21; // edx
  common::milog::MiLogStream *v22; // rax
  std::unordered_map<std::string,std::unordered_map<std::string,float>>::size_type v23; // rsi
  char *v24; // rsi
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  _BOOL4 v27; // eax
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>> *p_elem_amplify_damage_map; // rcx
  int v29; // edi
  char v30; // al
  std::unordered_map<std::string,float>::size_type v31; // rsi
  const float *v32; // r8
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rdx
  int v35; // eax
  __int64 v36; // rsi
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,float>,false,false>,bool> v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rdx
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  int v42; // edx
  int v43; // eax
  data::StringArray *__for_range; // [rsp+28h] [rbp-3D8h]
  std::string *ability_name; // [rsp+30h] [rbp-3D0h]
  data::StringArray *__for_range_0; // [rsp+38h] [rbp-3C8h]
  std::string *ability_name_0; // [rsp+40h] [rbp-3C0h]
  data::StringFloatMapMap *__for_range_1; // [rsp+48h] [rbp-3B8h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::unordered_map<std::string,float> >,false,true>::reference v51; // [rsp+50h] [rbp-3B0h]
  std::tuple_element<0,std::pair<const std::string,std::unordered_map<std::string,float> > >::type *reaction_type_str; // [rsp+58h] [rbp-3A8h]
  std::tuple_element<1,const std::pair<const std::string,std::unordered_map<std::string,float> > >::type *config_element_type_value_map; // [rsp+60h] [rbp-3A0h]
  std::unordered_map<unsigned int,float> *elem_ratio_map; // [rsp+68h] [rbp-398h]
  std::__detail::_Node_const_iterator<std::pair<const std::string,float>,false,true>::reference v55; // [rsp+78h] [rbp-388h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *element_type_str; // [rsp+80h] [rbp-380h]
  std::tuple_element<1,const std::pair<const std::string,float> >::type *value; // [rsp+88h] [rbp-378h]
  char v58[880]; // [rsp+90h] [rbp-370h] BYREF

  v3 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(832LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "21 32 4 9 <unknown> 48 4 9 <unknown> 64 4 18 reaction_type:7137 80 4 9 <unknown> 96 4 17 element"
                        "_type:7147 112 4 9 <unknown> 128 8 16 __for_begin:7111 160 8 14 __for_end:7111 192 8 16 __for_be"
                        "gin:7123 224 8 14 __for_end:7123 256 8 16 __for_begin:7135 288 8 14 __for_end:7135 320 8 16 __fo"
                        "r_begin:7145 352 8 14 __for_end:7145 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 57"
                        "6 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::rewriteGlobalCombatConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -218959360;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -218959118;
  v5[536862743] = -218959118;
  v5[536862745] = -202116109;
  std::set<int>::clear(&this->global_combat_level_element_abilities_hash_set_);
  __for_range = &this->config_global_combat_.default_abilities.level_element_abilities;
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, config);
  *(std::vector<std::string>::iterator *)(v3 + 128) = std::vector<std::string>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 160, config);
  *(std::vector<std::string>::iterator *)(v3 + 160) = std::vector<std::string>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 160);
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 128),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 160)) )
    {
      v12 = 1;
      goto LABEL_18;
    }
    ability_name = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 128));
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
    StringHash = getStringHash(ability_name);
    v8 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
    if ( v8 != 0 && v8 <= 3 )
    {
      LOBYTE(v6) = v8 != 0;
      __asan_report_store4(v3 + 32, v6);
    }
    *(_DWORD *)(v3 + 32) = StringHash;
    v9 = std::set<int>::insert(
           &this->global_combat_level_element_abilities_hash_set_,
           (std::set<int>::value_type *)(v3 + 32));
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( !v9.second )
      break;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 128));
  }
  *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 384, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 384),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_config_mgr.cpp",
    "rewriteGlobalCombatConfig",
    7115);
  v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 384),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v11 = common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
          v10,
          (const char (*)[72])"global_combat_level_element_abilities_hash_set duplicate, ability_name:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, ability_name);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
  *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -117901064;
  v2 = -1;
  v12 = 0;
LABEL_18:
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  if ( v12 == 1 )
  {
    *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 448, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 448),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_config_mgr.cpp",
      "rewriteGlobalCombatConfig",
      7119);
    v13 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
            (common::milog::MiLogStream *const)(v3 + 448),
            (const char (*)[48])"global_combat_level_element_abilities_hash_set:");
    p_global_combat_level_element_abilities_hash_set = &this->global_combat_level_element_abilities_hash_set_;
    common::milog::MiLogStream::operator<<<int>(v13, &this->global_combat_level_element_abilities_hash_set_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
    *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
    std::set<int>::clear(&this->global_combat_evaluate_global_value_abilities_hash_set_);
    __for_range_0 = &this->config_global_combat_.default_abilities.evaluate_global_value_abilities;
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 192, p_global_combat_level_element_abilities_hash_set);
    *(std::vector<std::string>::iterator *)(v3 + 192) = std::vector<std::string>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 224, p_global_combat_level_element_abilities_hash_set);
    *(std::vector<std::string>::iterator *)(v3 + 224) = std::vector<std::string>::end(__for_range_0);
    while ( 1 )
    {
      v15 = (char *)(v3 + 224);
      if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 192),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 224)) )
      {
        v21 = 1;
        goto LABEL_35;
      }
      ability_name_0 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 192));
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      v16 = getStringHash(ability_name_0);
      v17 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( v17 != 0 && v17 <= 3 )
      {
        LOBYTE(v15) = v17 != 0;
        __asan_report_store4(v3 + 48, v15);
      }
      *(_DWORD *)(v3 + 48) = v16;
      v18 = std::set<int>::insert(
              &this->global_combat_evaluate_global_value_abilities_hash_set_,
              (std::set<int>::value_type *)(v3 + 48));
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( !v18.second )
        break;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v3 + 192));
    }
    *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 512, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 512),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "rewriteGlobalCombatConfig",
      7127);
    v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 512),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v20 = common::milog::MiLogStream::operator<<<char [80],(char *[80])0>(
            v19,
            (const char (*)[80])"global_combat_evaluate_global_value_abilities_hash_set duplicate, ability_name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, ability_name_0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
    *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v21 = 0;
LABEL_35:
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
    if ( v21 == 1 )
    {
      *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 576, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 576),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/json_config_mgr.cpp",
        "rewriteGlobalCombatConfig",
        7131);
      v22 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
              (common::milog::MiLogStream *const)(v3 + 576),
              (const char (*)[56])"global_combat_evaluate_global_value_abilities_hash_set:");
      common::milog::MiLogStream::operator<<<int>(v22, &this->global_combat_evaluate_global_value_abilities_hash_set_);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
      *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
      v23 = std::unordered_map<std::string,std::unordered_map<std::string,float>>::size(&this->config_global_combat_.elem_amplify_damage);
      std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>>::reserve(
        &this->elem_amplify_damage_map_,
        v23);
      __for_range_1 = &this->config_global_combat_.elem_amplify_damage;
      *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 256, v23);
      *(std::unordered_map<std::string,std::unordered_map<std::string,float>>::iterator *)(v3 + 256) = std::unordered_map<std::string,std::unordered_map<std::string,float>>::begin(__for_range_1);
      *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 288, v23);
      *(std::unordered_map<std::string,std::unordered_map<std::string,float>>::iterator *)(v3 + 288) = std::unordered_map<std::string,std::unordered_map<std::string,float>>::end(__for_range_1);
      while ( std::__detail::operator!=<std::pair<std::string const,std::unordered_map<std::string,float>>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::unordered_map<std::string,float> >,true> *)(v3 + 256),
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::unordered_map<std::string,float> >,true> *)(v3 + 288)) )
      {
        v51 = std::__detail::_Node_iterator<std::pair<std::string const,std::unordered_map<std::string,float>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::unordered_map<std::string,float> >,false,true> *const)(v3 + 256));
        reaction_type_str = std::get<0ul,std::string const,std::unordered_map<std::string,float>>(v51);
        config_element_type_value_map = (std::tuple_element<1,const std::pair<const std::string,std::unordered_map<std::string,float> > >::type *)std::get<1ul,std::string const,std::unordered_map<std::string,float>>(v51);
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 64, v3 + 288);
        *(_DWORD *)(v3 + 64) = 0;
        v24 = (char *)(v3 + 64);
        if ( !data::enumStrToVal(reaction_type_str, (data::ElementReactionType *)(v3 + 64)) )
        {
          *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "rewriteGlobalCombatConfig",
            7140);
          v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v26 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  v25,
                  (const char (*)[27])"invalid reaction_type_str:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, reaction_type_str);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
          *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v27 = 0;
        }
        else
        {
          p_elem_amplify_damage_map = &this->elem_amplify_damage_map_;
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v3 + 64);
          v29 = *(_DWORD *)(v3 + 64);
          v30 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
          if ( v30 != 0 && v30 <= 3 )
          {
            v29 = v3 + 80;
            LOBYTE(v24) = v30 != 0;
            __asan_report_store4(v3 + 80, v24);
          }
          *(_DWORD *)(v3 + 80) = v29;
          elem_ratio_map = std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>>::operator[](
                             p_elem_amplify_damage_map,
                             (std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>>::key_type *)(v3 + 80));
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
          v31 = std::unordered_map<std::string,float>::size(config_element_type_value_map);
          std::unordered_map<unsigned int,float>::reserve(elem_ratio_map, v31);
          *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 320, v31);
          *(std::unordered_map<std::string,float>::const_iterator *)(v3 + 320) = std::unordered_map<std::string,float>::begin(config_element_type_value_map);
          *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 352, v31);
          *(std::unordered_map<std::string,float>::const_iterator *)(v3 + 352) = std::unordered_map<std::string,float>::end(config_element_type_value_map);
          while ( std::__detail::operator!=<std::pair<std::string const,float>,true>(
                    (const std::__detail::_Node_iterator_base<std::pair<const std::string,float>,true> *)(v3 + 320),
                    (const std::__detail::_Node_iterator_base<std::pair<const std::string,float>,true> *)(v3 + 352)) )
          {
            v55 = std::__detail::_Node_const_iterator<std::pair<std::string const,float>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,float>,false,true> *const)(v3 + 320));
            element_type_str = std::get<0ul,std::string const,float>(v55);
            value = (std::tuple_element<1,const std::pair<const std::string,float> >::type *)std::get<1ul,std::string const,float>(v55);
            *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 96, v3 + 352);
            *(_DWORD *)(v3 + 96) = 0;
            if ( !data::enumStrToVal(element_type_str, (data::ElementType *)(v3 + 96)) )
            {
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 704) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 704, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 704),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "rewriteGlobalCombatConfig",
                7150);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 704),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      v33,
                      (const char (*)[26])"invalid element_type_str:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v34, element_type_str);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 704));
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v35 = 0;
            }
            else
            {
              *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
              if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v3 + 96);
              v36 = *(unsigned int *)(v3 + 96);
              if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 112, v36);
              *(_DWORD *)(v3 + 112) = v36;
              v37 = std::unordered_map<unsigned int,float>::emplace<unsigned int,float const&>(
                      elem_ratio_map,
                      (unsigned int *)(v3 + 112),
                      value,
                      (unsigned int *)(v3 + 112),
                      v32);
              *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
              if ( !v37.second )
              {
                *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 768) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 768, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 768),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_config_mgr.cpp",
                  "rewriteGlobalCombatConfig",
                  7155);
                v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 768),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v39 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                        v38,
                        (const char (*)[28])"duplicate element_type_str:");
                v40 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v39, element_type_str);
                v41 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                        v40,
                        (const char (*)[23])" in reaction_type_str:");
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v41, reaction_type_str);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 768));
                *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v35 = 0;
              }
              else
              {
                v35 = 1;
              }
            }
            *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
            if ( v35 != 1 )
            {
              v42 = 0;
              goto LABEL_79;
            }
            std::__detail::_Node_const_iterator<std::pair<std::string const,float>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,float>,false,true> *const)(v3 + 320));
          }
          v42 = 1;
LABEL_79:
          *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = -8;
          v27 = v42 == 1;
        }
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( !v27 )
        {
          v43 = 0;
          goto LABEL_84;
        }
        std::__detail::_Node_iterator<std::pair<std::string const,std::unordered_map<std::string,float>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::unordered_map<std::string,float> >,false,true> *const)(v3 + 256));
      }
      v43 = 1;
LABEL_84:
      if ( v43 == 1 )
        v2 = 0;
    }
  }
  if ( v58 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 104) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 7165: range 000000000F2C3990-000000000F2C47A6
int32_t __cdecl JsonConfigMgr::checkRegionalPlayConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  int v8; // eax
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rdx
  uint32_t *p_bind_scene; // rax
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  uint32_t *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  const char *v16; // rsi
  common::milog::MiLogStream *v17; // rcx
  char v18; // al
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  int v25; // r15d
  std::__shared_ptr_access<data::ConfigRegionalPlayMichiaeMatsuri,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rcx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rdx
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  int32_t result; // eax
  data::SceneType scene_type; // [rsp+2Ch] [rbp-274h]
  data::ConfigRegionalPlayMap *__for_range; // [rsp+30h] [rbp-270h]
  std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true>::reference v36; // [rsp+38h] [rbp-268h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> > >::type *play_name; // [rsp+40h] [rbp-260h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> > >::type *config_ptr; // [rsp+48h] [rbp-258h]
  char v39[592]; // [rsp+50h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 48 4 9 <unknown> 64 8 16 __for_begin:7166 96 8 14 __for_end:7166 128 16 23 michiae_config_ptr"
                        ":7192 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unkn"
                        "own> 480 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::checkRegionalPlayConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -219021312;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -218959118;
  v5[536862734] = -218959118;
  v5[536862736] = -202116109;
  __for_range = &this->config_regional_play_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, config);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::iterator *)(v3 + 64) = std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, config);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::iterator *)(v3 + 96) = std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true> *)(v3 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true> *)(v3 + 96)) )
    {
      v8 = 1;
      goto LABEL_58;
    }
    v36 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true> *const)(v3 + 64));
    play_name = std::get<0ul,std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>(v36);
    config_ptr = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>(v36);
    if ( std::operator==<data::ConfigRegionalPlayBase>(0LL, config_ptr) )
    {
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkRegionalPlayConfig",
        7170);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
             v6,
             (const char (*)[41])"config_ptr is null, regional play name: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, play_name);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v2 = -1;
      v8 = 0;
      goto LABEL_58;
    }
    v9 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
    p_bind_scene = &v9->bind_scene;
    if ( *(_BYTE *)(((unsigned __int64)p_bind_scene >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_bind_scene & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_bind_scene >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_bind_scene);
    }
    if ( v9->bind_scene )
    {
      v11 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
      v12 = &v11->bind_scene;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      scene_type = SceneExcelConfigMgr::getSceneTypeBySceneId(&config->txt_config_mgr.scene_config_mgr, v11->bind_scene);
      if ( scene_type != SCENE_WORLD )
      {
        *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkRegionalPlayConfig",
          7180);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                v13,
                (const char (*)[40])"scene type invalid, regional play name:");
        v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, play_name);
        v16 = " ,scene type: ";
        v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v15, (const char (*)[15])" ,scene type: ");
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
        v18 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
        if ( v18 != 0 && v18 <= 3 )
        {
          LOBYTE(v16) = v18 != 0;
          __asan_report_store4(v3 + 48, v16);
        }
        *(_DWORD *)(v3 + 48) = scene_type;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 48));
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
        v2 = -1;
        v8 = 0;
        goto LABEL_58;
      }
      v19 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&v19->bind_polygon_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v19->bind_polygon_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v19->bind_polygon_type);
      }
      if ( v19->bind_polygon_type )
      {
        *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 288, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 288),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkRegionalPlayConfig",
          7185);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 288),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v20, (const char (*)[46])byte_1A530AA0);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, play_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
        v2 = -1;
        v8 = 0;
        goto LABEL_58;
      }
    }
    v22 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&v22->play_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v22->play_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v22->play_type);
    }
    if ( v22->play_type != MichiaeMatsuri )
      break;
    *(_WORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigRegionalPlayMichiaeMatsuri,data::ConfigRegionalPlayBase>((const std::shared_ptr<data::ConfigRegionalPlayBase> *)(v3 + 128));
    if ( std::operator==<data::ConfigRegionalPlayMichiaeMatsuri>(
           0LL,
           (const std::shared_ptr<data::ConfigRegionalPlayMichiaeMatsuri> *)(v3 + 128)) )
    {
      *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkRegionalPlayConfig",
        7195);
      v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 352),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v24 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
              v23,
              (const char (*)[70])"[Michiae_Matsuri] michiae_config_ptr is nullptr, regional play name: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, play_name);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 352));
      *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v25 = 0;
    }
    else
    {
      v26 = std::__shared_ptr_access<data::ConfigRegionalPlayMichiaeMatsuri,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigRegionalPlayMichiaeMatsuri,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( JsonConfigMgr::checkMichiaeMatsuriRegionalPlayConfig(this, config, play_name, v26) )
      {
        *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkRegionalPlayConfig",
          7200);
        v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v28 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                v27,
                (const char (*)[65])"checkMichiaeMatsuriRegionalPlayConfig fail, regional play name: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, play_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 416));
        *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v25 = 0;
      }
      else
      {
        v25 = 1;
      }
    }
    std::shared_ptr<data::ConfigRegionalPlayMichiaeMatsuri>::~shared_ptr((std::shared_ptr<data::ConfigRegionalPlayMichiaeMatsuri> *const)(v3 + 128));
    *(_WORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -1800;
    if ( v25 != 1 )
    {
      v8 = 0;
      goto LABEL_58;
    }
LABEL_56:
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true> *const)(v3 + 64));
  }
  v29 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
  if ( *(_BYTE *)(((unsigned __int64)&v29->play_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v29->play_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v29->play_type);
  }
  if ( v29->play_type != DeathZone_0 )
    goto LABEL_56;
  v30 = std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
  if ( *(_BYTE *)(((unsigned __int64)&v30->bind_polygon_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v30->bind_polygon_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v30->bind_polygon_type);
  }
  if ( v30->bind_polygon_type == DeathZone )
    goto LABEL_56;
  *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 480, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 480),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_config_mgr.cpp",
    "checkRegionalPlayConfig",
    7208);
  v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 480),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v32 = common::milog::MiLogStream::operator<<<char [85],(char *[85])0>(v31, (const char (*)[85])byte_1A530C00);
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v32, play_name);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
  v2 = -1;
  v8 = 0;
LABEL_58:
  if ( v8 == 1 )
    v2 = 0;
  result = v2;
  if ( v39 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 7217: range 000000000F2C47A8-000000000F2C5108
int32_t __cdecl JsonConfigMgr::checkMichiaeMatsuriRegionalPlayConfig(
        const JsonConfigMgr *const this,
        HK4EDesignConfig *config,
        const std::string *play_name,
        const data::ConfigRegionalPlayMichiaeMatsuri *michiae_config)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  OfferingExcelConfigMgr *p_offering_config_mgr; // rdx
  __int64 offering_id; // rsi
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  uint32_t foundation_level; // edx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int v28; // eax
  int32_t result; // eax
  const OfferingExcelConfigMgr *offering_config_mgr; // [rsp+28h] [rbp-1C8h]
  ActivityMichiaeMatsuriExcelConfigMgr *activity_michiae_matsuri_config_mgr; // [rsp+30h] [rbp-1C0h]
  const data::OfferingOpenStateConfig *offering_config_ptr; // [rsp+38h] [rbp-1B8h]
  std::unordered_map<unsigned int,data::MichiaeAntiErosionExcelConfig> *__for_range; // [rsp+40h] [rbp-1B0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false,false>::reference v36; // [rsp+48h] [rbp-1A8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig> >::type *anti_erosion_config; // [rsp+58h] [rbp-198h]
  char v38[400]; // [rsp+60h] [rbp-190h] BYREF

  v5 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(352LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 32 8 16 __for_begin:7236 64 8 14 __for_end:7236 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 "
                        "<unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = JsonConfigMgr::checkMichiaeMatsuriRegionalPlayConfig;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959118;
  v7[536862730] = -202116109;
  offering_config_mgr = &config->txt_config_mgr.offering_config_mgr;
  activity_michiae_matsuri_config_mgr = &config->txt_config_mgr.activity_michiae_matsuri_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&michiae_config->offering_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&michiae_config->offering_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&michiae_config->offering_id);
  }
  if ( !OfferingExcelConfigMgr::isOfferingIdValid(offering_config_mgr, michiae_config->offering_id) )
  {
    if ( *(char *)(((v5 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "checkMichiaeMatsuriRegionalPlayConfig",
      7222);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           v8,
           (const char (*)[39])"[Michiae_Matsuri] invalid offering_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &michiae_config->offering_id);
    v11 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v10,
            (const char (*)[23])", regional play name: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, play_name);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 96));
    v4 = -1;
  }
  else
  {
    p_offering_config_mgr = &config->txt_config_mgr.offering_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&michiae_config->offering_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&michiae_config->offering_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&michiae_config->offering_id);
    }
    offering_id = michiae_config->offering_id;
    offering_config_ptr = data::OfferingExcelConfigMgrBase::findOfferingOpenStateConfig(
                            p_offering_config_mgr,
                            offering_id);
    if ( offering_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&offering_config_ptr->max_level_limit_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&offering_config_ptr->max_level_limit_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&offering_config_ptr->max_level_limit_type);
      }
      if ( offering_config_ptr->max_level_limit_type == OFFERING_MAX_LEVEL_LIMIT_MICHIAE )
      {
        __for_range = &activity_michiae_matsuri_config_mgr->michiae_anti_erosion_excel_config_map;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, offering_id);
        *(std::unordered_map<unsigned int,data::MichiaeAntiErosionExcelConfig>::iterator *)(v5 + 32) = std::unordered_map<unsigned int,data::MichiaeAntiErosionExcelConfig>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, offering_id);
        *(std::unordered_map<unsigned int,data::MichiaeAntiErosionExcelConfig>::iterator *)(v5 + 64) = std::unordered_map<unsigned int,data::MichiaeAntiErosionExcelConfig>::end(__for_range);
        while ( 1 )
        {
          if ( !std::__detail::operator!=<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false> *)(v5 + 32),
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false> *)(v5 + 64)) )
          {
            v28 = 1;
            goto LABEL_38;
          }
          v36 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false,false> *const)(v5 + 32));
          std::get<0ul,unsigned int const,data::MichiaeAntiErosionExcelConfig>(v36);
          anti_erosion_config = (std::tuple_element<1,const std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig> >::type *)std::get<1ul,unsigned int const,data::MichiaeAntiErosionExcelConfig>(v36);
          if ( *(_BYTE *)(((unsigned __int64)&anti_erosion_config->foundation_level >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&anti_erosion_config->foundation_level >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&anti_erosion_config->foundation_level);
          }
          foundation_level = anti_erosion_config->foundation_level;
          if ( *(_BYTE *)(((unsigned __int64)&michiae_config->offering_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&michiae_config->offering_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&michiae_config->offering_id);
          }
          if ( !OfferingExcelConfigMgr::findLevelUpConfig(
                  offering_config_mgr,
                  michiae_config->offering_id,
                  foundation_level) )
            break;
          std::__detail::_Node_iterator<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::MichiaeAntiErosionExcelConfig>,false,false> *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 288) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 288, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 288),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkMichiaeMatsuriRegionalPlayConfig",
          7240);
        v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 288),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v24 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                v23,
                (const char (*)[43])"[Michiae_Matsuri] AntiErosion offering_id:");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &michiae_config->offering_id);
        v26 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])byte_1A530EC0);
        v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v26,
                &anti_erosion_config->foundation_level);
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v27, (const char (*)[7])byte_1A527260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 288));
        v4 = -1;
        v28 = 0;
LABEL_38:
        if ( v28 == 1 )
          v4 = 0;
      }
      else
      {
        if ( *(char *)(((v5 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 1) & 7) >= *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkMichiaeMatsuriRegionalPlayConfig",
          7233);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v19 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                v18,
                (const char (*)[43])"[Michiae_Matsuri] not michiae offering_id:");
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &michiae_config->offering_id);
        v21 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                v20,
                (const char (*)[23])", regional play name: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, play_name);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 224));
        v4 = -1;
      }
    }
    else
    {
      if ( *(char *)(((v5 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 65) & 7) >= *(_BYTE *)(((v5 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkMichiaeMatsuriRegionalPlayConfig",
        7228);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              v14,
              (const char (*)[39])"[Michiae_Matsuri] invalid offering_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &michiae_config->offering_id);
      v17 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              v16,
              (const char (*)[23])", regional play name: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, play_name);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 160));
      v4 = -1;
    }
  }
  result = v4;
  if ( v38 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 7248: range 000000000F2C510A-000000000F2C5F7A
int32_t __cdecl JsonConfigMgr::checkDeathZoneConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  RegionPlayLevelExcelConfigMgr *p_region_play_level_config_mgr; // rdx
  uint32_t *level; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  char *v12; // rsi
  unsigned int *v13; // rax
  int *v14; // rdx
  int v15; // ecx
  char v16; // al
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  char *v21; // rsi
  unsigned int *v22; // rax
  int *v23; // rdx
  int v24; // ecx
  char v25; // al
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+14h] [rbp-2ACh]
  std::map<unsigned int,data::ConfigDeathZone> *__for_range; // [rsp+18h] [rbp-2A8h]
  std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::reference v38; // [rsp+20h] [rbp-2A0h]
  std::tuple_element<0,std::pair<unsigned int const,data::ConfigDeathZone> >::type *death_zone_id; // [rsp+28h] [rbp-298h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigDeathZone> >::type *death_zone_config; // [rsp+30h] [rbp-290h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+40h] [rbp-280h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+48h] [rbp-278h]
  const data::ConfigCommonPolygon *polygon_config_ptr; // [rsp+50h] [rbp-270h]
  char v44[608]; // [rsp+60h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 32 4 13 group_id:7265 48 4 15 polygon_id:7277 64 8 16 __for_begin:7250 96 8 14 __for_end:7250"
                        " 128 8 16 __for_begin:7265 160 8 14 __for_end:7265 192 8 16 __for_begin:7277 224 8 14 __for_end:"
                        "7277 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::checkDeathZoneConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  ret = 0;
  __for_range = &this->death_zone_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, config);
  *(std::map<unsigned int,data::ConfigDeathZone>::iterator *)(v2 + 64) = std::map<unsigned int,data::ConfigDeathZone>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config);
  *(std::map<unsigned int,data::ConfigDeathZone>::iterator *)(v2 + 96) = std::map<unsigned int,data::ConfigDeathZone>::end(__for_range);
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::_Self *)(v2 + 64),
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::_Self *)(v2 + 96)) )
  {
    v38 = std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> > *const)(v2 + 64));
    death_zone_id = std::get<0ul,unsigned int const,data::ConfigDeathZone>(v38);
    death_zone_config = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigDeathZone> >::type *)std::get<1ul,unsigned int const,data::ConfigDeathZone>(v38);
    if ( *(_BYTE *)(((unsigned __int64)death_zone_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)death_zone_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)death_zone_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(death_zone_id);
    }
    if ( !*death_zone_id )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkDeathZoneConfig",
        7254);
      v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
        v5,
        (const char (*)[35])"[DEATH_ZONE] death_zone_id is zero");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    p_region_play_level_config_mgr = &config->txt_config_mgr.region_play_level_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&death_zone_config->level >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&death_zone_config->level >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&death_zone_config->level);
    }
    level = (uint32_t *)death_zone_config->level;
    if ( !data::RegionPlayLevelExcelConfigMgrBase::findDeathRegionLevelExcelConfig(
            p_region_play_level_config_mgr,
            (uint32_t)level) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "checkDeathZoneConfig",
        7261);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 320),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(v8, (const char (*)[63])byte_1A5310A0);
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &death_zone_config->id);
      v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v10, (const char (*)[15])byte_1A531100);
      level = &death_zone_config->level;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &death_zone_config->level);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    __for_range_0 = &death_zone_config->group_list;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, level);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 128) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, level);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 160) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v12 = (char *)(v2 + 160);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 160)) )
        break;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
      v13 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
      v14 = (int *)v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v13);
      }
      v15 = *v14;
      v16 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
      if ( v16 != 0 && v16 <= 3 )
      {
        LOBYTE(v12) = v16 != 0;
        __asan_report_store4(v2 + 32, v12);
      }
      *(_DWORD *)(v2 + 32) = v15;
      if ( !LuaConfigMgr::findGroupScriptConfig(&config->lua_config_mgr, *(_DWORD *)(v2 + 32)) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkDeathZoneConfig",
          7270);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v17,
                (const char (*)[18])"invalid group_id:");
        v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v18,
                (const unsigned int *)(v2 + 32));
        v20 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v19, (const char (*)[12])byte_1A531140);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &death_zone_config->id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &death_zone_config->polygon_list;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v12);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 192) = std::vector<unsigned int>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v12);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 224) = std::vector<unsigned int>::end(__for_range_1);
    while ( 1 )
    {
      v21 = (char *)(v2 + 224);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 192),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 224)) )
        break;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
      v22 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
      v23 = (int *)v22;
      if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v22);
      }
      v24 = *v23;
      v25 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v25 != 0 && v25 <= 3 )
      {
        LOBYTE(v21) = v25 != 0;
        __asan_report_store4(v2 + 48, v21);
      }
      *(_DWORD *)(v2 + 48) = v24;
      polygon_config_ptr = JsonConfigMgr::findCommonPolygonConfig(this, *(_DWORD *)(v2 + 48));
      if ( polygon_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&polygon_config_ptr->polygon_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)polygon_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&polygon_config_ptr->polygon_type >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4(&polygon_config_ptr->polygon_type);
        }
        if ( polygon_config_ptr->polygon_type != DeathZone )
        {
          *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "checkDeathZoneConfig",
            7288);
          v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v31 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                  v30,
                  (const char (*)[56])"[DEATH_ZONE] polygon_type is not DeathZone, polygon_id:");
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v2 + 48));
          v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v32,
                  (const char (*)[16])" death_zone_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, death_zone_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
          *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      else
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_config_mgr.cpp",
          "checkDeathZoneConfig",
          7282);
        v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 448),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v27 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                v26,
                (const char (*)[57])"[DEATH_ZONE] findCommonPolygonConfig failed, polygon_id:");
        v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v27,
                (const unsigned int *)(v2 + 48));
        v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v28,
                (const char (*)[16])" death_zone_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, death_zone_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
    }
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,data::ConfigDeathZone> > *const)(v2 + 64));
  }
  result = ret;
  if ( v44 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7297: range 000000000F2C5F7C-000000000F2C614D
data::ConfigRegionalPlayBasePtr __cdecl JsonConfigMgr::findRegionalPlayConfig(
        const JsonConfigMgr *const this,
        const std::string *play_name)
{
  const std::string *v2; // rdx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true> *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>> *p_M_string_length; // rdx
  const std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>> *v7; // rdx
  bool v8; // al
  data::ConfigRegionalPlayBasePtr result; // rax
  std::shared_ptr<data::ConfigRegionalPlayBase> *p_second; // rdx
  const std::string *play_namea; // [rsp+8h] [rbp-98h]
  char v12[128]; // [rsp+20h] [rbp-80h] BYREF

  play_namea = v2;
  v3 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true> *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,false,true> *)v4;
  }
  v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true>::__node_type *)1102416563;
  v3[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true>::__node_type *)"2 32 8 9 iter:7298 64 8 9 <unknown>";
  v3[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true>::__node_type *)JsonConfigMgr::findRegionalPlayConfig;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  p_M_string_length = (const std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>> *)&play_name[235]._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[4], play_name);
  v3[4]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::find(
                   p_M_string_length,
                   play_namea)._M_cur;
  v7 = (const std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>> *)&play_name[235]._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[8], play_namea);
  v3[8]._M_cur = std::unordered_map<std::string,std::shared_ptr<data::ConfigRegionalPlayBase>>::end(v7)._M_cur;
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,true>(
         v3 + 4,
         v3 + 8);
  *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    std::shared_ptr<data::ConfigRegionalPlayBase>::shared_ptr(
      (std::shared_ptr<data::ConfigRegionalPlayBase> *const)this,
      0LL);
  }
  else
  {
    p_second = &std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigRegionalPlayBase>>,false,true>::operator->(v3 + 4)->second;
    std::shared_ptr<data::ConfigRegionalPlayBase>::shared_ptr(
      (std::shared_ptr<data::ConfigRegionalPlayBase> *const)this,
      p_second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigRegionalPlayBase> >,true>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigRegionalPlayBase,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 7308: range 000000000F2C614E-000000000F2C638E
std::string *__fastcall JsonConfigMgr::findRegionalPlayNameBySceneId[abi:cxx11](
        std::string *retstr,
        const JsonConfigMgr *const this,
        uint32_t scene_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::map<unsigned int,std::string> *p_regional_play_scene_2_name_map; // rdx
  std::map<unsigned int,std::string> *v7; // rdx
  bool v8; // al
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::string > >::pointer v9; // rax
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 1 9 <unknown> 48 4 13 scene_id:7307 64 8 9 iter:7309 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findRegionalPlayNameBySceneId[abi:cxx11];
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = scene_id;
  p_regional_play_scene_2_name_map = &this->regional_play_scene_2_name_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, this);
  *(std::map<unsigned int,std::string>::const_iterator *)(v3 + 64) = std::map<unsigned int,std::string>::find(
                                                                       p_regional_play_scene_2_name_map,
                                                                       (const std::map<unsigned int,std::string>::key_type *)(v3 + 48));
  v7 = &this->regional_play_scene_2_name_map_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::map<unsigned int,std::string>::const_iterator *)(v3 + 96) = std::map<unsigned int,std::string>::end(v7);
  v8 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::string > >::_Self *)(v3 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::string > >::_Self *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v3 + 32);
    std::string::basic_string<std::allocator<char>>(retstr, byte_1A4C6700, (const std::allocator<char> *)(v3 + 32));
    std::allocator<char>::~allocator(v3 + 32);
  }
  else
  {
    v9 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::string > > *const)(v3 + 64));
    std::string::basic_string(retstr, &v9->second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 7319: range 000000000F2C6390-000000000F2C664D
std::string *__cdecl JsonConfigMgr::findRegionalPlayNameByPolygonId[abi:cxx11](
        std::string *retstr,
        const JsonConfigMgr *const this,
        uint32_t polygon_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::map<data::PolygonType,std::string> *p_regional_play_polygon_2_name_map; // rdx
  const std::map<data::PolygonType,std::string>::key_type *p_polygon_type; // rcx
  __int64 v8; // rsi
  const std::map<data::PolygonType,std::string>::key_type *v9; // rsi
  std::map<data::PolygonType,std::string> *v10; // rdx
  bool v11; // al
  std::string *p_second; // rdx
  const data::ConfigCommonPolygon *polygon_config_ptr; // [rsp+28h] [rbp-A8h]
  char v17[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 1 9 <unknown> 48 1 9 <unknown> 64 8 9 iter:7325 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::findRegionalPlayNameByPolygonId[abi:cxx11];
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  polygon_config_ptr = JsonConfigMgr::findCommonPolygonConfig(this, polygon_id);
  if ( polygon_config_ptr )
  {
    p_regional_play_polygon_2_name_map = &this->regional_play_polygon_2_name_map_;
    p_polygon_type = &polygon_config_ptr->polygon_type;
    v8 = *(unsigned __int8 *)(((v3 + 64) >> 3) + 0x7FFF8000);
    if ( (_BYTE)v8 )
      __asan_report_store8(v3 + 64, v8);
    v9 = p_polygon_type;
    *(std::map<data::PolygonType,std::string>::const_iterator *)(v3 + 64) = std::map<data::PolygonType,std::string>::find(
                                                                              p_regional_play_polygon_2_name_map,
                                                                              p_polygon_type);
    v10 = &this->regional_play_polygon_2_name_map_;
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, v9);
    *(std::map<data::PolygonType,std::string>::const_iterator *)(v3 + 96) = std::map<data::PolygonType,std::string>::end(v10);
    v11 = std::operator==(
            (const std::_Rb_tree_const_iterator<std::pair<const data::PolygonType,std::string > >::_Self *)(v3 + 64),
            (const std::_Rb_tree_const_iterator<std::pair<const data::PolygonType,std::string > >::_Self *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v11 )
    {
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v3 + 48);
      std::string::basic_string<std::allocator<char>>(retstr, byte_1A4C6700, (const std::allocator<char> *)(v3 + 48));
      std::allocator<char>::~allocator(v3 + 48);
    }
    else
    {
      p_second = &std::_Rb_tree_const_iterator<std::pair<data::PolygonType const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::PolygonType,std::string > > *const)(v3 + 64))->second;
      std::string::basic_string(retstr, p_second);
    }
  }
  else
  {
    std::allocator<char>::allocator(v3 + 32);
    std::string::basic_string<std::allocator<char>>(retstr, byte_1A4C6700, (const std::allocator<char> *)(v3 + 32));
    std::allocator<char>::~allocator(v3 + 32);
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 7335: range 000000000F2C664E-000000000F2C680F
const RegionalPlayVarJsonConfig *__fastcall JsonConfigMgr::findRegionalPlayVarJsonConfig(
        const JsonConfigMgr *const this,
        __int64 var_type)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,RegionalPlayVarJsonConfig> *p_regional_play_var_config_map; // rdx
  std::map<unsigned int,RegionalPlayVarJsonConfig> *v6; // rdx
  bool v7; // al
  const RegionalPlayVarJsonConfig *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 var_type:7334 64 8 9 iter:7336 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findRegionalPlayVarJsonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = var_type;
  p_regional_play_var_config_map = &this->regional_play_var_config_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, var_type);
  *(std::map<unsigned int,RegionalPlayVarJsonConfig>::const_iterator *)(v2 + 64) = std::map<unsigned int,RegionalPlayVarJsonConfig>::find(
                                                                                     p_regional_play_var_config_map,
                                                                                     (const std::map<unsigned int,RegionalPlayVarJsonConfig>::key_type *)(v2 + 48));
  v6 = &this->regional_play_var_config_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,RegionalPlayVarJsonConfig>::const_iterator *)(v2 + 96) = std::map<unsigned int,RegionalPlayVarJsonConfig>::end(v6);
  v7 = std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,RegionalPlayVarJsonConfig> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,RegionalPlayVarJsonConfig> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,RegionalPlayVarJsonConfig>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,RegionalPlayVarJsonConfig> > *const)(v2 + 64))->second;
  else
    result = 0LL;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7346: range 000000000F2C6810-000000000F2C69D1
const data::ConfigDeathZone *__fastcall JsonConfigMgr::findDeathZoneConfig(
        const JsonConfigMgr *const this,
        __int64 death_zone_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,data::ConfigDeathZone> *p_death_zone_map; // rdx
  std::map<unsigned int,data::ConfigDeathZone> *v6; // rdx
  bool v7; // al
  const data::ConfigDeathZone *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 18 death_zone_id:7345 64 8 9 iter:7347 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findDeathZoneConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = death_zone_id;
  p_death_zone_map = &this->death_zone_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, death_zone_id);
  *(std::map<unsigned int,data::ConfigDeathZone>::const_iterator *)(v2 + 64) = std::map<unsigned int,data::ConfigDeathZone>::find(
                                                                                 p_death_zone_map,
                                                                                 (const std::map<unsigned int,data::ConfigDeathZone>::key_type *)(v2 + 48));
  v6 = &this->death_zone_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,data::ConfigDeathZone>::const_iterator *)(v2 + 96) = std::map<unsigned int,data::ConfigDeathZone>::end(v6);
  v7 = std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigDeathZone> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigDeathZone>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::ConfigDeathZone> > *const)(v2 + 64))->second;
  else
    result = 0LL;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7356: range 000000000F2C69D2-000000000F2C6BCD
__int64 __fastcall JsonConfigMgr::findDeathZoneIdByPolygonId(const JsonConfigMgr *const this, __int64 polygon_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,unsigned int> *p_polygon_2_death_zone_map; // rdx
  std::map<unsigned int,unsigned int> *v6; // rdx
  bool v7; // al
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v8; // rdx
  unsigned int *p_second; // rax
  __int64 result; // rax
  char v11[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 polygon_id:7355 64 8 9 iter:7357 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findDeathZoneIdByPolygonId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = polygon_id;
  p_polygon_2_death_zone_map = &this->polygon_2_death_zone_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, polygon_id);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                        p_polygon_2_death_zone_map,
                                                                        (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->polygon_2_death_zone_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 96) = std::map<unsigned int,unsigned int>::end(v6);
  v7 = std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    v8 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
    p_second = &v8->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v8->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7366: range 000000000F2C6BCE-000000000F2C6DC9
__int64 __fastcall JsonConfigMgr::findDeathZoneIdByGroupId(const JsonConfigMgr *const this, __int64 group_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,unsigned int> *p_group_2_death_zone_map; // rdx
  std::map<unsigned int,unsigned int> *v6; // rdx
  bool v7; // al
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v8; // rdx
  unsigned int *p_second; // rax
  __int64 result; // rax
  char v11[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 group_id:7365 64 8 9 iter:7367 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findDeathZoneIdByGroupId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = group_id;
  p_group_2_death_zone_map = &this->group_2_death_zone_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, group_id);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                        p_group_2_death_zone_map,
                                                                        (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->group_2_death_zone_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 96) = std::map<unsigned int,unsigned int>::end(v6);
  v7 = std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    v8 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
    p_second = &v8->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v8->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7376: range 000000000F2C6DCA-000000000F2C72BF
const data::ConfigCommonPolygon *__fastcall JsonConfigMgr::findCommonPolygonConfig(
        const JsonConfigMgr *const this,
        __int64 polygon_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::map<unsigned int,unsigned int> *p_common_polygon_2_scene_map; // rdx
  std::map<unsigned int,unsigned int> *v6; // rdx
  char *v7; // rsi
  bool v8; // al
  const data::ConfigCommonPolygon *result; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v10; // rdx
  unsigned int *p_second; // rax
  unsigned int second; // ecx
  char v13; // al
  __int64 v14; // rsi
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  bool v18; // al
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+10h] [rbp-130h]
  const std::unordered_map<unsigned int,data::ConfigCommonPolygon> *config_common_polygon_map; // [rsp+18h] [rbp-128h]
  char v21[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 4 13 scene_id:7382 48 4 15 polygon_id:7375 64 8 25 polygon_2_scene_iter:7377 96 8 9 <unknow"
                        "n> 128 8 24 common_polygon_iter:7390 160 8 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findCommonPolygonConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -202116109;
  *(_DWORD *)(v2 + 48) = polygon_id;
  p_common_polygon_2_scene_map = &this->common_polygon_2_scene_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, polygon_id);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                        p_common_polygon_2_scene_map,
                                                                        (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->common_polygon_2_scene_map_;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 96) = std::map<unsigned int,unsigned int>::end(v6);
  v7 = (char *)(v2 + 96);
  v8 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0LL;
  }
  else
  {
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v10 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
    p_second = &v10->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    second = v10->second;
    v13 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      LOBYTE(v7) = v13 != 0;
      __asan_report_store4(v2 + 32, v7);
    }
    *(_DWORD *)(v2 + 32) = second;
    v14 = *(unsigned int *)(v2 + 32);
    scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(this, v14);
    if ( scene_json_config_ptr )
    {
      config_common_polygon_map = &scene_json_config_ptr->config_common_polygon_map;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 128, v14);
      *(std::unordered_map<unsigned int,data::ConfigCommonPolygon>::const_iterator *)(v2 + 128) = std::unordered_map<unsigned int,data::ConfigCommonPolygon>::find(
                                                                                                    config_common_polygon_map,
                                                                                                    (const std::unordered_map<unsigned int,data::ConfigCommonPolygon>::key_type *)(v2 + 48));
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 160, v2 + 48);
      *(std::unordered_map<unsigned int,data::ConfigCommonPolygon>::const_iterator *)(v2 + 160) = std::unordered_map<unsigned int,data::ConfigCommonPolygon>::end(config_common_polygon_map);
      v18 = std::__detail::operator!=<std::pair<unsigned int const,data::ConfigCommonPolygon>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigCommonPolygon>,false> *)(v2 + 128),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigCommonPolygon>,false> *)(v2 + 160));
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( v18 )
        result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false> *const)(v2 + 128))->second;
      else
        result = 0LL;
    }
    else
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_config_mgr.cpp",
        "findCommonPolygonConfig",
        7386);
      v15 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              (common::milog::MiLogStream *const)(v2 + 192),
              (const char (*)[37])"findSceneJsonConfig fails, scene_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v2 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v16, (const char (*)[13])" polygon_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0LL;
    }
  }
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7399: range 000000000F2C72C0-000000000F2C72F1
bool __cdecl JsonConfigMgr::checkAttackTagInWhiteList(const JsonConfigMgr *const this, const std::string *attack_tag)
{
  return std::unordered_set<std::string>::count(&this->combat_anti_cheat_attack_tag_white_set_, attack_tag) != 0;
};

// Line 7404: range 000000000F2C72F2-000000000F2C73F8
_BOOL8 __fastcall JsonConfigMgr::isGlobalCombatLevelElementAbility(
        const JsonConfigMgr *const this,
        int32_t ability_name_hash)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  _BOOL8 result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 22 ability_name_hash:7403";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::isGlobalCombatLevelElementAbility;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = ability_name_hash;
  result = std::set<int>::count(
             &this->global_combat_level_element_abilities_hash_set_,
             (const std::set<int>::key_type *)(v2 + 32))
        || std::set<int>::count(
             &this->global_combat_evaluate_global_value_abilities_hash_set_,
             (const std::set<int>::key_type *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7410: range 000000000F2C73FA-000000000F2C8A2B
int32_t __cdecl JsonConfigMgr::loadSGVRegisterConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  bool v6; // r14
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int32_t v10; // r14d
  unsigned __int64 v11; // rax
  int32_t AllFilesWithExtension; // edx
  char v13; // al
  char *v14; // rsi
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  unsigned __int64 v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rdx
  char *v24; // rsi
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  common::milog::MiLogStream *v27; // rdx
  __int64 v28; // r14
  std::vector<std::string>::size_type v29; // rax
  common::milog::MiLogStream *v30; // rdx
  common::milog::MiLogStream *v31; // r14
  unsigned __int64 v32; // rax
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-690h]
  std::string *sgv_register_json_path; // [rsp+18h] [rbp-688h]
  std::vector<std::string> *__for_range_0; // [rsp+20h] [rbp-680h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference sgv_string; // [rsp+28h] [rbp-678h]
  char v38[1648]; // [rsp+30h] [rbp-670h] BYREF

  v2 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1600LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 1 9 <unknown> 64 4 8 ret:7411 80 8 16 __for_begin:7425 112 8 14 __for_end:7425 144 8 16 __"
                        "for_begin:7448 176 8 14 __for_end:7448 208 24 13 file_vec:7418 272 32 21 sgv_register_dir:7412 3"
                        "36 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 32 9 <unknown> 592 32 9 <unknown> 65"
                        "6 32 24 config_sgv_register:7441 720 32 9 <unknown> 784 32 9 <unknown> 848 32 9 <unknown> 912 32"
                        " 9 <unknown> 976 40 9 <unknown> 1056 40 9 root:7433 1136 392 7 ss:7456";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadSGVRegisterConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -218959360;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -219021312;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -234881024;
  v4[536862752] = -218959118;
  v4[536862754] = -218959360;
  v4[536862755] = 62194;
  v4[536862767] = -218103808;
  v4[536862768] = -202116109;
  v4[536862769] = -202116109;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, config);
  *(_DWORD *)(v2 + 64) = 0;
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 272, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 272), p_json_config_base_dir, "sgv_register/");
  std::filesystem::__cxx11::path::path<std::string,std::filesystem::__cxx11::path>(
    (std::filesystem::__cxx11::path *const)(v2 + 976),
    (const std::string *)(v2 + 272),
    auto_format);
  v6 = !std::filesystem::is_directory((const std::filesystem::__cxx11::path *)(v2 + 976));
  std::filesystem::__cxx11::path::~path((std::filesystem::__cxx11::path *const)(v2 + 976));
  v7 = ((v2 + 976) >> 3) + 2147450880;
  *(_DWORD *)v7 = -117901064;
  *(_BYTE *)(v7 + 4) = -8;
  if ( v6 )
  {
    *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 336, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 336),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadSGVRegisterConfig",
      7415);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 336),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v8, (const char (*)[45])byte_1A5317A0);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v2 + 272));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
    *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
    v10 = 0;
  }
  else
  {
    v11 = ((v2 + 208) >> 3) + 2147450880;
    *(_WORD *)v11 = 0;
    *(_BYTE *)(v11 + 2) = 0;
    std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 208));
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 400),
      ".json",
      (const std::allocator<char> *)(v2 + 48));
    v14 = (char *)(v2 + 400);
    AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                              (const std::string *)(v2 + 272),
                              (const std::string *)(v2 + 400),
                              (std::vector<std::string> *)(v2 + 208));
    v13 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
    LOBYTE(v14) = v13 != 0;
    if ( v13 != 0 && v13 <= 3 )
      __asan_report_store4(v2 + 64, v14);
    *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
    std::string::~string((void *)(v2 + 400));
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 64);
    if ( *(_DWORD *)(v2 + 64) )
    {
      *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 464) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 464, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 464),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_config_mgr.cpp",
        "loadSGVRegisterConfig",
        7422);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 464),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v16 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(v15, (const char (*)[48])byte_1A531800);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v2 + 272));
      v18 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])" ret: ");
      common::milog::MiLogStream::operator<<<int,(int *)0>(v18, (const int *)(v2 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 464));
      *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -117901064;
      v10 = 0;
    }
    else
    {
      __for_range = (std::vector<std::string> *)(v2 + 208);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 80, v14);
      *(std::vector<std::string>::iterator *)(v2 + 80) = std::vector<std::string>::begin(__for_range);
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 112, v14);
      *(std::vector<std::string>::iterator *)(v2 + 112) = std::vector<std::string>::end(__for_range);
      while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
                (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 80),
                (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 112)) )
      {
        sgv_register_json_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
        if ( common::tools::FileUtils::fileExists(sgv_register_json_path) )
        {
          *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 528) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 528, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 528),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_config_mgr.cpp",
            "loadSGVRegisterConfig",
            7429);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 528),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v19,
                  (const char (*)[15])"not find file:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, sgv_register_json_path);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 528));
          *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = -117901064;
        }
        else
        {
          v21 = ((v2 + 1056) >> 3) + 2147450880;
          *(_DWORD *)v21 = 0;
          *(_BYTE *)(v21 + 4) = 0;
          Json::Value::Value(v2 + 1056, 0LL);
          if ( !parseJsonFile(sgv_register_json_path, (Json::Value *)(v2 + 1056)) )
          {
            *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 592) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 592, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 592),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_config_mgr.cpp",
              "loadSGVRegisterConfig",
              7436);
            v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 592),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v23 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                    v22,
                    (const char (*)[44])"parseJsonFile fail, sgv_register_json_path:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, sgv_register_json_path);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 592));
            *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = -117901064;
            if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v2 + 64, sgv_register_json_path);
            *(_DWORD *)(v2 + 64) = -1;
          }
          else
          {
            *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = 0;
            data::ConfigSGVRegister::ConfigSGVRegister((data::ConfigSGVRegister *const)(v2 + 656));
            v24 = (char *)(v2 + 1056);
            if ( !data::ConfigSGVRegister::fromJson(
                    (data::ConfigSGVRegister *const)(v2 + 656),
                    (const Json::Value *)(v2 + 1056)) )
            {
              *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 720) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 720, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 720),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_config_mgr.cpp",
                "loadSGVRegisterConfig",
                7444);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 720),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v26 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                      v25,
                      (const char (*)[39])"fromJson fail, sgv_register_json_path:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, sgv_register_json_path);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 720));
              *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = -117901064;
              if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v2 + 64, sgv_register_json_path);
              *(_DWORD *)(v2 + 64) = -1;
            }
            else
            {
              __for_range_0 = (std::vector<std::string> *)(v2 + 656);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 144, v24);
              *(std::vector<std::string>::iterator *)(v2 + 144) = std::vector<std::string>::begin(__for_range_0);
              *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 176, v24);
              *(std::vector<std::string>::iterator *)(v2 + 176) = std::vector<std::string>::end(__for_range_0);
              while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
                        (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 144),
                        (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 176)) )
              {
                sgv_string = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 144));
                if ( common::tools::MiscUtils::isContains<std::set<std::string>,std::string>(
                       &this->config_sgv_register_set_,
                       sgv_string) )
                {
                  *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 784) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 784, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 784),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_config_mgr.cpp",
                    "loadSGVRegisterConfig",
                    7452);
                  v27 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                          (common::milog::MiLogStream *const)(v2 + 784),
                          (const char (*)[26])"dumplicate sgv_register: ");
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, sgv_string);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 784));
                  *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = -117901064;
                }
                std::set<std::string>::emplace<std::string const&>(
                  &this->config_sgv_register_set_,
                  sgv_string,
                  (const std::string *)&this->config_sgv_register_set_);
                __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 144));
              }
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
              __asan_unpoison_stack_memory(v2 + 1136, 392LL);
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v2 + 1136);
              v28 = std::operator<<<std::char_traits<char>>(v2 + 1152, " sgv_list size:");
              v29 = std::vector<std::string>::size((const std::vector<std::string> *const)(v2 + 656));
              std::ostream::operator<<(v28, v29);
              *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 848) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 848, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 848),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/json_config_mgr.cpp",
                "loadSGVRegisterConfig",
                7458);
              v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      (common::milog::MiLogStream *const)(v2 + 848),
                      (const char (*)[11])"load path:");
              v31 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, sgv_register_json_path);
              *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 912) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 912, 32LL);
              }
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v2 + 912, v2 + 1136);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, (const std::string *)(v2 + 912));
              std::string::~string((void *)(v2 + 912));
              *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = -117901064;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 848));
              *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = -117901064;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v2 + 1136);
            }
            data::ConfigSGVRegister::~ConfigSGVRegister((data::ConfigSGVRegister *const)(v2 + 656));
          }
          Json::Value::~Value((Json::Value_0 *const)(v2 + 1056));
        }
        v32 = ((v2 + 1056) >> 3) + 2147450880;
        *(_DWORD *)v32 = -117901064;
        *(_BYTE *)(v32 + 4) = -8;
        *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = -117901064;
        __asan_poison_stack_memory(v2 + 1136, 392LL);
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
      }
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v2 + 64);
      v10 = *(_DWORD *)(v2 + 64);
    }
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 208));
  }
  std::string::~string((void *)(v2 + 272));
  if ( v38 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 200) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1600LL, v38);
  }
  return v10;
};

// Line 7464: range 000000000F2C8A2C-000000000F2CA0FC
int32_t __cdecl JsonConfigMgr::loadCustomDungeonAdventureConfig(JsonConfigMgr *const this, HK4EDesignConfig *config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::string *p_json_config_base_dir; // rsi
  int32_t AllFilesWithExtension; // edx
  char v7; // al
  int *v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t v11; // r15d
  unsigned __int64 v12; // rax
  common::milog::MiLogStream *v13; // rdx
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rax
  common::milog::MiLogStream *v17; // rdx
  const proto::ServerCustomDungeon *v18; // rax
  google::protobuf::uint64 v19; // rax
  const proto::ServerCustomDungeon *v20; // rax
  char v21; // al
  proto::ServerCustomDungeon *v22; // rcx
  proto::CustomDungeonBriefRedisData *v23; // rcx
  proto::CustomDungeonBriefRedisData *v24; // rax
  proto::CustomDungeonSocialRedisData *v25; // rax
  unsigned __int64 v26; // rax
  std::__enable_if_t_52 v27; // rax
  bool v28; // r15
  unsigned __int64 v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  unsigned __int64 v36; // rax
  unsigned __int64 v37; // rax
  unsigned __int64 v38; // rax
  unsigned __int64 v39; // rax
  common::milog::MiLogStream *v40; // r15
  std::map<long unsigned int,proto::CustomDungeonAdventure>::size_type v41; // rax
  int configa; // [rsp+0h] [rbp-530h]
  JsonConfigMgr *thisa; // [rsp+8h] [rbp-528h]
  std::vector<std::string> *__for_range; // [rsp+10h] [rbp-520h]
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference file_path; // [rsp+18h] [rbp-518h]
  const std::string *file_patha; // [rsp+18h] [rbp-518h]
  int v48; // [rsp+20h] [rbp-510h] BYREF
  void *v49; // [rsp+28h] [rbp-508h]
  int v50; // [rsp+30h] [rbp-500h]
  char v51; // [rsp+38h] [rbp-4F8h]

  thisa = this;
  configa = (int)config;
  v2 = (unsigned __int64)&v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "22 32 1 9 <unknown> 48 1 11 option:7487 64 4 8 ret:7466 80 8 16 __for_begin:7473 112 8 14 __for_"
                        "end:7473 144 8 17 dungeon_guid:7494 176 8 9 <unknown> 208 24 13 file_vec:7465 272 32 9 <unknown>"
                        " 336 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 32 13 json_str:7484 592 32 9 <unkn"
                        "own> 656 32 9 <unknown> 720 32 9 <unknown> 784 32 9 <unknown> 848 40 9 root:7476 928 40 20 proto"
                        "_adventure:7486 1008 40 11 status:7488 1088 48 16 json_writer:7483 1168 48 9 <unknown>";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::loadCustomDungeonAdventureConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -218959360;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -219021312;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -234881024;
  v4[536862748] = -218959118;
  v4[536862750] = -218959360;
  v4[536862751] = 62194;
  v4[536862752] = -234881024;
  v4[536862753] = -218959118;
  v4[536862755] = -219021312;
  v4[536862756] = 62194;
  v4[536862758] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 208));
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, config);
  *(_DWORD *)(v2 + 64) = 0;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 336),
    ".json",
    (const std::allocator<char> *)(v2 + 32));
  p_json_config_base_dir = &config->json_config_base_dir;
  if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
  {
    p_json_config_base_dir = (std::string *)32;
    __asan_report_store_n(v2 + 272, 32LL);
  }
  std::operator+<char>((std::string *)(v2 + 272), p_json_config_base_dir, "custom_level_adventure/");
  v8 = (int *)(v2 + 336);
  AllFilesWithExtension = common::tools::FileUtils::getAllFilesWithExtension(
                            (const std::string *)(v2 + 272),
                            (const std::string *)(v2 + 336),
                            (std::vector<std::string> *)(v2 + 208));
  v7 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v7 != 0;
  if ( v7 != 0 && v7 <= 3 )
    __asan_report_store4(v2 + 64, v8);
  *(_DWORD *)(v2 + 64) = AllFilesWithExtension;
  std::string::~string((void *)(v2 + 272));
  *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
  std::string::~string((void *)(v2 + 336));
  *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 64);
  if ( *(_DWORD *)(v2 + 64) )
  {
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 400, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 400),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_config_mgr.cpp",
      "loadCustomDungeonAdventureConfig",
      7470);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 400),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v9, (const char (*)[37])byte_1A5211C0);
    common::milog::MiLogStream::operator<<<int,(int *)0>(v10, (const int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
    *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -117901064;
    v11 = -1;
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v2 + 208);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 80, v8);
    *(std::vector<std::string>::iterator *)(v2 + 80) = std::vector<std::string>::begin(__for_range);
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v8);
    *(std::vector<std::string>::iterator *)(v2 + 112) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 80),
              (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v2 + 112)) )
    {
      file_path = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
      std::string::operator=(&JsonConfigMgr::cur_load_json_file_name_[abi:cxx11], file_path);
      v12 = ((v2 + 848) >> 3) + 2147450880;
      *(_DWORD *)v12 = 0;
      *(_BYTE *)(v12 + 4) = 0;
      Json::Value::Value(v2 + 848, 0LL);
      if ( !parseJsonFile(file_path, (Json::Value *)(v2 + 848)) )
      {
        *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 464) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 495) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 464, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 464),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_config_mgr.cpp",
          "loadCustomDungeonAdventureConfig",
          7479);
        v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                (common::milog::MiLogStream *const)(v2 + 464),
                (const char (*)[27])"parseJsonFile fails, path:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, file_path);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 464));
        *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -117901064;
      }
      else
      {
        v14 = ((v2 + 1088) >> 3) + 2147450880;
        *(_DWORD *)v14 = 0;
        *(_WORD *)(v14 + 4) = 0;
        Json::FastWriter::FastWriter((Json::FastWriter *const)(v2 + 1088));
        *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 528) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 528, 32LL);
        }
        Json::FastWriter::write[abi:cxx11](
          (Json::String *)(v2 + 528),
          (Json::FastWriter *const)(v2 + 1088),
          (const Json::Value *)(v2 + 848));
        v15 = ((v2 + 928) >> 3) + 2147450880;
        *(_DWORD *)v15 = 0;
        *(_BYTE *)(v15 + 4) = 0;
        proto::CustomDungeonAdventure::CustomDungeonAdventure((proto::CustomDungeonAdventure *const)(v2 + 928));
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
        google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v2 + 48));
        v16 = ((v2 + 1008) >> 3) + 2147450880;
        *(_DWORD *)v16 = 0;
        *(_BYTE *)(v16 + 4) = 0;
        if ( *(char *)(((v2 + 1008) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1047) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 55) & 7) >= *(_BYTE *)(((v2 + 1047) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1008, 40LL);
        }
        google::protobuf::util::JsonStringToMessage(
          (google::protobuf::util::Status *)(v2 + 1008),
          configa,
          (int)thisa,
          (int)__for_range,
          (int)file_path,
          v48,
          v49,
          v50,
          v51);
        if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v2 + 1008)) )
        {
          *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 592) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 623) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 592, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 592),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_config_mgr.cpp",
            "loadCustomDungeonAdventureConfig",
            7491);
          v17 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  (common::milog::MiLogStream *const)(v2 + 592),
                  (const char (*)[41])"parse json string to proto failed, path:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, file_patha);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 592));
          *(_DWORD *)(((v2 + 592) >> 3) + 0x7FFF8000) = -117901064;
        }
        else
        {
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
          v18 = proto::CustomDungeonAdventure::custom_dungeon((const proto::CustomDungeonAdventure *const)(v2 + 928));
          v19 = proto::ServerCustomDungeon::dungeon_guid(v18);
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            v19 = __asan_report_store8(v2 + 144, v2 + 528);
          *(_QWORD *)(v2 + 144) = v19;
          if ( !CustomDungeonExcelConfigMgr::isAdventureDungeon(*(_QWORD *)(v2 + 144)) )
            goto LABEL_41;
          if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
            __asan_report_load8(v2 + 144);
          if ( *(_QWORD *)(v2 + 144)
            && (v20 = proto::CustomDungeonAdventure::custom_dungeon((const proto::CustomDungeonAdventure *const)(v2 + 928)),
                proto::ServerCustomDungeon::dungeon_id(v20)) )
          {
            v21 = 0;
          }
          else
          {
LABEL_41:
            v21 = 1;
          }
          if ( !v21 )
          {
            if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
              __asan_report_load8(v2 + 144);
            *(_QWORD *)(v2 + 144) &= 0xFFFFFFFF00000000LL;
            v22 = proto::CustomDungeonAdventure::mutable_custom_dungeon((proto::CustomDungeonAdventure *const)(v2 + 928));
            if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
              __asan_report_load8(v2 + 144);
            proto::ServerCustomDungeon::set_dungeon_guid(v22, *(_QWORD *)(v2 + 144));
            v23 = proto::CustomDungeonAdventure::mutable_dungeon_brief((proto::CustomDungeonAdventure *const)(v2 + 928));
            if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
              __asan_report_load8(v2 + 144);
            proto::CustomDungeonBriefRedisData::set_dungeon_guid(v23, *(_QWORD *)(v2 + 144));
            v24 = proto::CustomDungeonAdventure::mutable_dungeon_brief((proto::CustomDungeonAdventure *const)(v2 + 928));
            v25 = proto::CustomDungeonBriefRedisData::mutable_social(v24);
            proto::CustomDungeonSocialRedisData::Clear(v25);
            v26 = ((v2 + 1168) >> 3) + 2147450880;
            *(_DWORD *)v26 = 0;
            *(_WORD *)(v26 + 4) = 0;
            if ( *(char *)(((v2 + 1168) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 112 + 47) & 7) >= *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1168, 48LL);
            }
            std::make_pair<unsigned long &,proto::CustomDungeonAdventure &>(
              (std::pair<long unsigned int,proto::CustomDungeonAdventure> *)(v2 + 1168),
              (unsigned __int64 *)(v2 + 144),
              (proto::CustomDungeonAdventure *)(v2 + 928));
            v27 = std::map<unsigned long,proto::CustomDungeonAdventure>::insert<std::pair<unsigned long,proto::CustomDungeonAdventure>>(
                    &thisa->custom_dungeon_adventure_map_,
                    (std::pair<long unsigned int,proto::CustomDungeonAdventure> *)(v2 + 1168));
            v28 = !v27.second;
            std::pair<unsigned long,proto::CustomDungeonAdventure>::~pair((std::pair<long unsigned int,proto::CustomDungeonAdventure> *const)(v2 + 1168));
            v29 = ((v2 + 1168) >> 3) + 2147450880;
            *(_DWORD *)v29 = -117901064;
            *(_WORD *)(v29 + 4) = -1800;
            if ( v28 )
            {
              *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 656) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 687) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 656, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 656),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_config_mgr.cpp",
                "loadCustomDungeonAdventureConfig",
                7506);
              v30 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                      (common::milog::MiLogStream *const)(v2 + 656),
                      (const char (*)[49])"repeated custom dungeon adventure, dungeon_guid:");
              v31 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v30,
                      (const unsigned __int64 *)(v2 + 144));
              v32 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v31,
                      (const char (*)[12])" file_path:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v32, file_patha);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 656));
              *(_DWORD *)(((v2 + 656) >> 3) + 0x7FFF8000) = -117901064;
            }
            else
            {
              std::vector<unsigned long>::push_back(
                &thisa->custom_dungeon_adventure_vec_,
                (const std::vector<long unsigned int>::value_type *)(v2 + 144));
              *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 720) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 751) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 720, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 720),
                &common::milog::MiLogDefault::default_log_obj_,
                2u,
                "./src/json_config_mgr.cpp",
                "loadCustomDungeonAdventureConfig",
                7511);
              v33 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      (common::milog::MiLogStream *const)(v2 + 720),
                      (const char (*)[36])"load custom dungeon adventrue guid:");
              v34 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v33,
                      (const unsigned __int64 *)(v2 + 144));
              v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v34,
                      (const char (*)[16])" from filepath:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, file_patha);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 720));
              *(_DWORD *)(((v2 + 720) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
        }
        google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v2 + 1008));
        proto::CustomDungeonAdventure::~CustomDungeonAdventure((proto::CustomDungeonAdventure *const)(v2 + 928));
        std::string::~string((void *)(v2 + 528));
        Json::FastWriter::~FastWriter((Json::FastWriter *const)(v2 + 1088));
      }
      Json::Value::~Value((Json::Value_0 *const)(v2 + 848));
      v36 = ((v2 + 848) >> 3) + 2147450880;
      *(_DWORD *)v36 = -117901064;
      *(_BYTE *)(v36 + 4) = -8;
      v37 = ((v2 + 1088) >> 3) + 2147450880;
      *(_DWORD *)v37 = -117901064;
      *(_WORD *)(v37 + 4) = -1800;
      *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = -117901064;
      v38 = ((v2 + 928) >> 3) + 2147450880;
      *(_DWORD *)v38 = -117901064;
      *(_BYTE *)(v38 + 4) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      v39 = ((v2 + 1008) >> 3) + 2147450880;
      *(_DWORD *)v39 = -117901064;
      *(_BYTE *)(v39 + 4) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v2 + 80));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 784) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 815) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 784, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 784),
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/json_config_mgr.cpp",
      "loadCustomDungeonAdventureConfig",
      7514);
    v40 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v2 + 784),
            (const char (*)[36])"load custom_dungeon adventure size:");
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    v41 = std::map<unsigned long,proto::CustomDungeonAdventure>::size(&thisa->custom_dungeon_adventure_map_);
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      v41 = __asan_report_store8(v2 + 176, "load custom_dungeon adventure size:");
    *(_QWORD *)(v2 + 176) = v41;
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v40, (const unsigned __int64 *)(v2 + 176));
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 784));
    *(_DWORD *)(((v2 + 784) >> 3) + 0x7FFF8000) = -117901064;
    v11 = 0;
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 208));
  if ( &v48 == (int *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 156) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, &v48);
  }
  return v11;
};

// Line 7519: range 000000000F2CA0FE-000000000F2CA5A0
void __cdecl JsonConfigMgr::randomSelectCustomDungeonAdventure(
        JsonConfigMgr *const this,
        std::map<long unsigned int,proto::CustomDungeonBriefRedisData> *brief_map,
        uint32_t num)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  char *v7; // rsi
  unsigned __int64 v8; // rax
  __int64 v9; // rdx
  std::map<long unsigned int,proto::CustomDungeonAdventure> *p_custom_dungeon_adventure_map; // rdx
  std::map<long unsigned int,proto::CustomDungeonAdventure> *v11; // rdx
  bool v12; // al
  std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::CustomDungeonAdventure> >::pointer v13; // rax
  const proto::CustomDungeonBriefRedisData *v14; // r14
  proto::CustomDungeonBriefRedisData *v15; // rax
  std::vector<long unsigned int> *__for_range; // [rsp+28h] [rbp-138h]
  char v19[304]; // [rsp+30h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 8 17 dungeon_guid:7526 64 8 16 __for_begin:7526 96 8 14 __for_end:7526 128 8 9 iter:7528 16"
                        "0 8 9 <unknown> 192 24 22 selected_guid_vec:7524";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::randomSelectCustomDungeonAdventure;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  if ( num )
  {
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 192));
    v6 = (char *)(v3 + 192);
    common::tools::RandomUtils::quickRandomSelect<unsigned long>(
      &this->custom_dungeon_adventure_vec_,
      (std::vector<long unsigned int> *)(v3 + 192),
      num);
    __for_range = (std::vector<long unsigned int> *)(v3 + 192);
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 64, v6);
    *(std::vector<long unsigned int>::iterator *)(v3 + 64) = std::vector<unsigned long>::begin(__for_range);
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, v6);
    *(std::vector<long unsigned int>::iterator *)(v3 + 96) = std::vector<unsigned long>::end(__for_range);
    while ( 1 )
    {
      v7 = (char *)(v3 + 96);
      if ( !__gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 64),
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 96)) )
        break;
      *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 0;
      v8 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)(v3 + 64));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(v8);
      v9 = *(_QWORD *)v8;
      if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 32, v7);
      *(_QWORD *)(v3 + 32) = v9;
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
      p_custom_dungeon_adventure_map = &this->custom_dungeon_adventure_map_;
      if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 128, v7);
      *(std::map<long unsigned int,proto::CustomDungeonAdventure>::iterator *)(v3 + 128) = std::map<unsigned long,proto::CustomDungeonAdventure>::find(
                                                                                             p_custom_dungeon_adventure_map,
                                                                                             (const std::map<long unsigned int,proto::CustomDungeonAdventure>::key_type *)(v3 + 32));
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      v11 = &this->custom_dungeon_adventure_map_;
      if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 160, v3 + 32);
      *(std::map<long unsigned int,proto::CustomDungeonAdventure>::iterator *)(v3 + 160) = std::map<unsigned long,proto::CustomDungeonAdventure>::end(v11);
      v12 = std::operator==(
              (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::CustomDungeonAdventure> >::_Self *)(v3 + 128),
              (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::CustomDungeonAdventure> >::_Self *)(v3 + 160));
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( !v12 )
      {
        v13 = std::_Rb_tree_iterator<std::pair<unsigned long const,proto::CustomDungeonAdventure>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::CustomDungeonAdventure> > *const)(v3 + 128));
        v14 = proto::CustomDungeonAdventure::dungeon_brief(&v13->second);
        v15 = std::map<unsigned long,proto::CustomDungeonBriefRedisData>::operator[](
                brief_map,
                (const std::map<long unsigned int,proto::CustomDungeonBriefRedisData>::key_type *)(v3 + 32));
        proto::CustomDungeonBriefRedisData::operator=(v15, v14);
      }
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)(v3 + 64));
    }
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 192));
  }
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7538: range 000000000F2CA5A2-000000000F2CA730
void __cdecl JsonConfigMgr::randomSelectCustomDungeonAdventure(
        JsonConfigMgr *const this,
        std::set<long unsigned int> *guid_set,
        uint32_t num)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned __int64 *M_current; // r14
  unsigned __int64 *v7; // rcx
  char v9[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 24 22 selected_guid_vec:7543";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::randomSelectCustomDungeonAdventure;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218103808;
  v5[536862722] = -202116109;
  if ( num )
  {
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 32));
    common::tools::RandomUtils::quickRandomSelect<unsigned long>(
      &this->custom_dungeon_adventure_vec_,
      (std::vector<long unsigned int> *)(v3 + 32),
      num);
    M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 32))._M_current;
    v7 = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 32))._M_current;
    std::set<unsigned long>::insert<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>>(
      guid_set,
      (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)v7,
      (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current);
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 32));
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7549: range 000000000F2CA732-000000000F2CA911
bool __fastcall JsonConfigMgr::isMonserPoseIdValid(
        const JsonConfigMgr *const this,
        __int64 monster_id,
        uint32_t pose_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::map<unsigned int,std::unordered_set<unsigned int>> *p_monster_valid_pose_id_set_map; // rdx
  std::map<unsigned int,std::unordered_set<unsigned int>> *v7; // rdx
  bool v8; // al
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> > >::pointer v9; // rax
  bool result; // al
  char v12[160]; // [rsp+10h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 15 monster_id:7548 48 4 12 pose_id:7548 64 8 9 iter:7550 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = JsonConfigMgr::isMonserPoseIdValid;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 32) = monster_id;
  *(_DWORD *)(v3 + 48) = pose_id;
  p_monster_valid_pose_id_set_map = &this->monster_valid_pose_id_set_map_;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, monster_id);
  *(std::map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 64) = std::map<unsigned int,std::unordered_set<unsigned int>>::find(
                                                                                            p_monster_valid_pose_id_set_map,
                                                                                            (const std::map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->monster_valid_pose_id_set_map_;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 96) = std::map<unsigned int,std::unordered_set<unsigned int>>::end(v7);
  v8 = std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> > >::_Self *)(v3 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> > >::_Self *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    v9 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> > > *const)(v3 + 64));
    result = common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
               &v9->second,
               (const unsigned int *)(v3 + 48));
  }
  else
  {
    result = 0;
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7559: range 000000000F2CA912-000000000F2CAAD6
const proto::CustomDungeonAdventure *__fastcall JsonConfigMgr::findCustomDungeonAdventure(
        const JsonConfigMgr *const this,
        uint64_t dungeon_guid)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<long unsigned int,proto::CustomDungeonAdventure> *p_custom_dungeon_adventure_map; // rdx
  std::map<long unsigned int,proto::CustomDungeonAdventure> *v6; // rdx
  bool v7; // al
  const proto::CustomDungeonAdventure *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 9 iter:7560 64 8 9 <unknown> 96 8 17 dungeon_guid:7558";
  *(_QWORD *)(v2 + 16) = JsonConfigMgr::findCustomDungeonAdventure;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_QWORD *)(v2 + 96) = dungeon_guid;
  p_custom_dungeon_adventure_map = &this->custom_dungeon_adventure_map_;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, dungeon_guid);
  *(std::map<long unsigned int,proto::CustomDungeonAdventure>::const_iterator *)(v2 + 32) = std::map<unsigned long,proto::CustomDungeonAdventure>::find(
                                                                                              p_custom_dungeon_adventure_map,
                                                                                              (const std::map<long unsigned int,proto::CustomDungeonAdventure>::key_type *)(v2 + 96));
  v6 = &this->custom_dungeon_adventure_map_;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v2 + 96);
  *(std::map<long unsigned int,proto::CustomDungeonAdventure>::const_iterator *)(v2 + 64) = std::map<unsigned long,proto::CustomDungeonAdventure>::end(v6);
  v7 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::CustomDungeonAdventure> >::_Self *)(v2 + 32),
         (const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::CustomDungeonAdventure> >::_Self *)(v2 + 64));
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::_Rb_tree_const_iterator<std::pair<unsigned long const,proto::CustomDungeonAdventure>>::operator->((const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::CustomDungeonAdventure> > *const)(v2 + 32))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7570: range 000000000F2CAAD8-000000000F2CAD1A
const JsonConfigMgr *__fastcall JsonConfigMgr::findLocalEntity(
        const JsonConfigMgr *const this,
        const JsonConfigMgr *scene_id,
        uint32_t entity_id,
        int a4)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>> *p_local_entity_map; // rdx
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>> *v8; // rdx
  bool v9; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false,false>::pointer v10; // rax
  int v11; // edx
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-A8h]
  char v16[160]; // [rsp+30h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 14 entity_id:7569 64 8 7 it:7574 96 8 9 <unknown>";
  *(_QWORD *)(v4 + 16) = JsonConfigMgr::findLocalEntity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 48) = a4;
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(scene_id, entity_id);
  if ( !scene_json_config_ptr )
    goto LABEL_13;
  p_local_entity_map = &scene_json_config_ptr->local_entity_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, entity_id);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::find(p_local_entity_map, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::key_type *)(v4 + 48));
  v8 = &scene_json_config_ptr->local_entity_map;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigLocalEntity>>::end(v8);
  v9 = std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigLocalEntity> >,false,false> *const)(v4 + 64));
    std::shared_ptr<data::ConfigLocalEntity>::shared_ptr(
      (std::shared_ptr<data::ConfigLocalEntity> *const)this,
      &v10->second);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
LABEL_13:
    std::shared_ptr<data::ConfigLocalEntity>::shared_ptr((std::shared_ptr<data::ConfigLocalEntity> *const)this, 0LL);
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};
