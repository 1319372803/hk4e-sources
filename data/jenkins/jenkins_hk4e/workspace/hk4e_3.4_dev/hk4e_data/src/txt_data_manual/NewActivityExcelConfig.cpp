// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/txt_data_manual/NewActivityExcelConfig.cpp

// Line 24: range 000000001354FA56-000000001354FE9E
void __fastcall insertDropSubjectTree(
        std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *p_node_ptr,
        const std::unordered_set<unsigned int> *meet_cond_set,
        const std::vector<std::pair<unsigned int,unsigned int>> *drop_subject_vec,
        std::vector<std::pair<unsigned int,unsigned int>>::iterator iter,
        const LevelDropMap *level_drop_map)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > >::mapped_type *v8; // rsi
  bool v9; // al
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > > *p_next_activity_drop_index_node_map; // r14
  const std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > >::key_type *v11; // rax
  unsigned __int64 v12; // rax
  const std::pair<unsigned int,unsigned int> *M_current; // r14
  std::vector<std::pair<unsigned int,unsigned int>>::const_iterator v14; // rax
  std::set<std::pair<unsigned int,unsigned int>> *v15; // r14
  std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  unsigned __int64 v17; // rax
  std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > >::mapped_type *next_node_ptr; // [rsp+38h] [rbp-118h]
  char v25[272]; // [rsp+40h] [rbp-110h] BYREF

  v5 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(224LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 48 8 9 <unknown> 80 8 7 iter:23 112 16 9 <unknown> 144 48 9 <unknown>";
  *(_QWORD *)(v5 + 16) = insertDropSubjectTree;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61937;
  v7[536862721] = -234881024;
  v7[536862722] = 62194;
  v7[536862722] = -234881024;
  v7[536862723] = 62194;
  v7[536862724] = 62194;
  v7[536862726] = -202116109;
  *(std::vector<std::pair<unsigned int,unsigned int>>::iterator *)(v5 + 80) = iter;
  if ( !std::vector<std::pair<unsigned int,unsigned int>>::empty(drop_subject_vec) )
  {
    v8 = 0LL;
    if ( !std::operator==<ActivityDropIndexNode>((const std::shared_ptr<ActivityDropIndexNode> *)p_node_ptr, 0LL) )
    {
      while ( 1 )
      {
        *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 48, v8);
        *(std::vector<std::pair<unsigned int,unsigned int>>::const_iterator *)(v5 + 48) = std::vector<std::pair<unsigned int,unsigned int>>::end(drop_subject_vec);
        v9 = __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> const*,std::vector<std::pair<unsigned int,unsigned int>>>(
               (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v5 + 80),
               (const __gnu_cxx::__normal_iterator<const std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v5 + 48));
        *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
        if ( !v9 )
          break;
        p_next_activity_drop_index_node_map = &std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_node_ptr)->next_activity_drop_index_node_map;
        v11 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)(v5 + 80));
        next_node_ptr = std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::shared_ptr<ActivityDropIndexNode>>>>::operator[](
                          p_next_activity_drop_index_node_map,
                          v11);
        if ( std::operator==<ActivityDropIndexNode>(0LL, next_node_ptr) )
        {
          *(_WORD *)(((v5 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v5 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          common::tools::perf::make_shared<ActivityDropIndexNode>();
          std::shared_ptr<ActivityDropIndexNode>::operator=(
            next_node_ptr,
            (std::shared_ptr<ActivityDropIndexNode> *)(v5 + 112));
          std::shared_ptr<ActivityDropIndexNode>::~shared_ptr((std::shared_ptr<ActivityDropIndexNode> *const)(v5 + 112));
          *(_WORD *)(((v5 + 112) >> 3) + 0x7FFF8000) = -1800;
        }
        v8 = next_node_ptr;
        std::shared_ptr<ActivityDropIndexNode>::operator=(
          (std::shared_ptr<ActivityDropIndexNode> *const)p_node_ptr,
          next_node_ptr);
        __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)(v5 + 80));
      }
      if ( !std::operator==<ActivityDropIndexNode>((const std::shared_ptr<ActivityDropIndexNode> *)p_node_ptr, 0LL) )
      {
        v12 = ((v5 + 144) >> 3) + 2147450880;
        *(_DWORD *)v12 = 0;
        *(_WORD *)(v12 + 4) = 0;
        M_current = std::vector<std::pair<unsigned int,unsigned int>>::end(drop_subject_vec)._M_current;
        v14._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin(drop_subject_vec)._M_current;
        std::set<std::pair<unsigned int,unsigned int>>::set<__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> const*,std::vector<std::pair<unsigned int,unsigned int>>>>(
          (std::set<std::pair<unsigned int,unsigned int>> *const)(v5 + 144),
          v14,
          (__gnu_cxx::__normal_iterator<const std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >)M_current);
        v15 = std::move<std::set<std::pair<unsigned int,unsigned int>>>((std::set<std::pair<unsigned int,unsigned int>> *)(v5 + 144));
        v16 = std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_node_ptr);
        std::set<std::pair<unsigned int,unsigned int>>::operator=(&v16->subject_set, v15);
        std::set<std::pair<unsigned int,unsigned int>>::~set((std::set<std::pair<unsigned int,unsigned int>> *const)(v5 + 144));
        v17 = ((v5 + 144) >> 3) + 2147450880;
        *(_DWORD *)v17 = -117901064;
        *(_WORD *)(v17 + 4) = -1800;
        v18 = std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_node_ptr);
        std::unordered_set<unsigned int>::operator=(&v18->cond_meet_set, meet_cond_set);
        v19 = std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_node_ptr);
        std::map<unsigned int,unsigned int>::operator=(&v19->level_drop_map, level_drop_map);
      }
    }
  }
  if ( v25 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 52: range 000000001354FE9F-0000000013550F67
std::map<unsigned int,unsigned int> *__fastcall findDropIdBySubjectTree(
        std::map<unsigned int,unsigned int> *retstr,
        const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *p_node_ptr,
        const std::set<unsigned int> *meet_cond_set,
        const ActivityDropExcludeSet *exclude_set,
        const std::vector<std::pair<unsigned int,unsigned int>> *drop_subject_vec,
        std::vector<std::pair<unsigned int,unsigned int>>::iterator iter,
        uint32_t config_level)
{
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  bool v10; // al
  char *v11; // rsi
  bool v12; // al
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > > *p_next_activity_drop_index_node_map; // r14
  const std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > >::key_type *v14; // rcx
  const std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > >::key_type *v15; // rsi
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > > *v16; // rdx
  bool v17; // al
  int v18; // eax
  std::__detail::_Node_iterator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> >,false,true>::pointer v19; // rax
  int v20; // r14d
  std::set<std::pair<unsigned int,unsigned int>> *p_subject_set; // rdx
  bool v22; // al
  std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rcx
  std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rcx
  bool v25; // al
  std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rcx
  char *v27; // rsi
  bool v28; // al
  std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  char *v30; // rsi
  unsigned int *v31; // rax
  int *v32; // rdx
  int v33; // ecx
  char v34; // al
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::pointer v35; // rax
  std::map<unsigned int,unsigned int>::mapped_type *v36; // rax
  unsigned __int64 v37; // rax
  uint32_t v38; // r14d
  std::pair<unsigned int,unsigned int> *M_current; // r15
  char *v40; // rsi
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v41; // rdx
  std::map<unsigned int,unsigned int>::mapped_type *v42; // rax
  std::map<unsigned int,unsigned int>::mapped_type v43; // esi
  unsigned __int64 v44; // rax
  bool is_cond_meet; // [rsp+4Fh] [rbp-311h]
  std::unordered_set<unsigned int> *__for_range; // [rsp+50h] [rbp-310h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+58h] [rbp-308h]
  const std::map<unsigned int,unsigned int>::key_type *drop_id; // [rsp+60h] [rbp-300h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *drop_count; // [rsp+68h] [rbp-2F8h]
  char v56[752]; // [rsp+70h] [rbp-2F0h] BYREF

  v7 = (unsigned __int64)v56;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_4(704LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "20 48 4 10 cond_id:91 64 4 15 config_level:51 80 8 9 <unknown> 112 8 9 <unknown> 144 8 7 jter:64"
                        " 176 8 9 <unknown> 208 8 9 <unknown> 240 8 9 <unknown> 272 8 13 level_iter:78 304 8 9 <unknown> "
                        "336 8 9 <unknown> 368 8 14 __for_begin:91 400 8 12 __for_end:91 432 8 9 <unknown> 464 8 15 __for"
                        "_begin:109 496 8 13 __for_end:109 528 8 7 iter:51 560 16 16 next_node_ptr:69 592 16 9 <unknown> "
                        "624 48 9 <unknown>";
  *(_QWORD *)(v7 + 16) = findDropIdBySubjectTree;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556943;
  v9[536862722] = 61956;
  v9[536862722] = -234881024;
  v9[536862723] = 62194;
  v9[536862723] = -234881024;
  v9[536862724] = 62194;
  v9[536862724] = -234881024;
  v9[536862725] = 62194;
  v9[536862725] = -234881024;
  v9[536862726] = 62194;
  v9[536862726] = -234881024;
  v9[536862727] = 62194;
  v9[536862727] = -234881024;
  v9[536862728] = 62194;
  v9[536862728] = -234881024;
  v9[536862729] = 62194;
  v9[536862729] = -234881024;
  v9[536862730] = 62194;
  v9[536862730] = -234881024;
  v9[536862731] = 62194;
  v9[536862731] = -234881024;
  v9[536862732] = 62194;
  v9[536862732] = -234881024;
  v9[536862733] = 62194;
  v9[536862733] = -234881024;
  v9[536862734] = 62194;
  v9[536862734] = -234881024;
  v9[536862735] = 62194;
  v9[536862735] = -234881024;
  v9[536862736] = 62194;
  v9[536862736] = -234881024;
  v9[536862737] = 62194;
  v9[536862738] = 62194;
  v9[536862739] = 62194;
  v9[536862741] = -202116109;
  *(std::vector<std::pair<unsigned int,unsigned int>>::iterator *)(v7 + 528) = iter;
  *(_DWORD *)(v7 + 64) = config_level;
  std::map<unsigned int,unsigned int>::map(retstr);
  if ( *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v7 + 80, p_node_ptr);
  *(std::vector<std::pair<unsigned int,unsigned int>>::const_iterator *)(v7 + 80) = std::vector<std::pair<unsigned int,unsigned int>>::end(drop_subject_vec);
  v10 = __gnu_cxx::operator==<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> const*,std::vector<std::pair<unsigned int,unsigned int>>>(
          (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v7 + 528),
          (const __gnu_cxx::__normal_iterator<const std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v7 + 80));
  *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) = -8;
  if ( !v10 )
  {
    v11 = 0LL;
    if ( !std::operator==<ActivityDropIndexNode>((const std::shared_ptr<ActivityDropIndexNode> *)p_node_ptr, 0LL) )
    {
      while ( 1 )
      {
        *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 112, v11);
        *(std::vector<std::pair<unsigned int,unsigned int>>::const_iterator *)(v7 + 112) = std::vector<std::pair<unsigned int,unsigned int>>::end(drop_subject_vec);
        v12 = __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> const*,std::vector<std::pair<unsigned int,unsigned int>>>(
                (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v7 + 528),
                (const __gnu_cxx::__normal_iterator<const std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v7 + 112));
        *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) = -8;
        if ( !v12 )
          break;
        *(_BYTE *)(((v7 + 144) >> 3) + 0x7FFF8000) = 0;
        p_next_activity_drop_index_node_map = &std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_node_ptr)->next_activity_drop_index_node_map;
        v14 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)(v7 + 528));
        if ( *(_BYTE *)(((v7 + 144) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 144, v7 + 112);
        v15 = v14;
        *(std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > >::iterator *)(v7 + 144) = std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::shared_ptr<ActivityDropIndexNode>>>>::find(p_next_activity_drop_index_node_map, v14);
        *(_BYTE *)(((v7 + 176) >> 3) + 0x7FFF8000) = 0;
        v16 = &std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_node_ptr)->next_activity_drop_index_node_map;
        if ( *(_BYTE *)(((v7 + 176) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v7 + 176, v15);
        *(std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> > > >::iterator *)(v7 + 176) = std::unordered_map<std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::shared_ptr<ActivityDropIndexNode>>>>::end(v16);
        v11 = (char *)(v7 + 176);
        v17 = std::__detail::operator==<std::pair<std::pair const<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> >,true> *)(v7 + 144),
                (const std::__detail::_Node_iterator_base<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> >,true> *)(v7 + 176));
        *(_BYTE *)(((v7 + 176) >> 3) + 0x7FFF8000) = -8;
        if ( v17 )
        {
          v18 = 0;
        }
        else
        {
          *(_WORD *)(((v7 + 560) >> 3) + 0x7FFF8000) = 0;
          v19 = std::__detail::_Node_iterator<std::pair<std::pair const<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::pair<unsigned int,unsigned int>,std::shared_ptr<ActivityDropIndexNode> >,false,true> *const)(v7 + 144));
          std::shared_ptr<ActivityDropIndexNode>::shared_ptr(
            (std::shared_ptr<ActivityDropIndexNode> *const)(v7 + 560),
            &v19->second);
          v11 = 0LL;
          if ( std::operator==<ActivityDropIndexNode>((const std::shared_ptr<ActivityDropIndexNode> *)(v7 + 560), 0LL) )
          {
            v20 = 0;
          }
          else
          {
            *(_BYTE *)(((v7 + 240) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v7 + 240) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 240, 0LL);
            *(std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>> >,std::equal_to<std::set<std::pair<unsigned int,unsigned int>> >,std::allocator<std::set<std::pair<unsigned int,unsigned int>> > >::const_iterator *)(v7 + 240) = std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>>>,std::equal_to<std::set<std::pair<unsigned int,unsigned int>>>,std::allocator<std::set<std::pair<unsigned int,unsigned int>>>>::end(exclude_set);
            *(_BYTE *)(((v7 + 208) >> 3) + 0x7FFF8000) = 0;
            p_subject_set = &std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 560))->subject_set;
            if ( *(_BYTE *)(((v7 + 208) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 208, 0LL);
            *(std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>> >,std::equal_to<std::set<std::pair<unsigned int,unsigned int>> >,std::allocator<std::set<std::pair<unsigned int,unsigned int>> > >::const_iterator *)(v7 + 208) = std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>>>,std::equal_to<std::set<std::pair<unsigned int,unsigned int>>>,std::allocator<std::set<std::pair<unsigned int,unsigned int>>>>::find(exclude_set, p_subject_set);
            v22 = std::__detail::operator==<std::set<std::pair<unsigned int,unsigned int>>,true>(
                    (const std::__detail::_Node_iterator_base<std::set<std::pair<unsigned int,unsigned int>>,true> *)(v7 + 208),
                    (const std::__detail::_Node_iterator_base<std::set<std::pair<unsigned int,unsigned int>>,true> *)(v7 + 240));
            *(_BYTE *)(((v7 + 208) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v7 + 240) >> 3) + 0x7FFF8000) = -8;
            if ( v22 )
            {
              *(_BYTE *)(((v7 + 272) >> 3) + 0x7FFF8000) = 0;
              v23 = std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 560));
              if ( *(_BYTE *)(((v7 + 272) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v7 + 272, v7 + 240);
              *(std::map<unsigned int,unsigned int>::iterator *)(v7 + 272) = std::map<unsigned int,unsigned int>::upper_bound(
                                                                               &v23->level_drop_map,
                                                                               (const std::map<unsigned int,unsigned int>::key_type *)(v7 + 64));
              *(_BYTE *)(((v7 + 304) >> 3) + 0x7FFF8000) = 0;
              v24 = std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 560));
              if ( *(_BYTE *)(((v7 + 304) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v7 + 304, v7 + 64);
              *(std::map<unsigned int,unsigned int>::iterator *)(v7 + 304) = std::map<unsigned int,unsigned int>::begin(&v24->level_drop_map);
              v25 = std::operator==(
                      (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v7 + 272),
                      (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v7 + 304));
              *(_BYTE *)(((v7 + 304) >> 3) + 0x7FFF8000) = -8;
              if ( !v25 )
              {
                std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator--((std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)(v7 + 272));
                *(_BYTE *)(((v7 + 336) >> 3) + 0x7FFF8000) = 0;
                v26 = std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 560));
                if ( *(_BYTE *)(((v7 + 336) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v7 + 336, v7 + 304);
                *(std::map<unsigned int,unsigned int>::iterator *)(v7 + 336) = std::map<unsigned int,unsigned int>::end(&v26->level_drop_map);
                v27 = (char *)(v7 + 336);
                v28 = std::operator==(
                        (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v7 + 272),
                        (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v7 + 336));
                *(_BYTE *)(((v7 + 336) >> 3) + 0x7FFF8000) = -8;
                if ( !v28 )
                {
                  v29 = std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 560));
                  if ( std::unordered_set<unsigned int>::empty(&v29->cond_meet_set) )
                    goto LABEL_47;
                  is_cond_meet = 0;
                  __for_range = &std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 560))->cond_meet_set;
                  *(_BYTE *)(((v7 + 368) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v7 + 368) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v7 + 368, v27);
                  *(std::unordered_set<unsigned int>::iterator *)(v7 + 368) = std::unordered_set<unsigned int>::begin(__for_range);
                  *(_BYTE *)(((v7 + 400) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v7 + 400) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v7 + 400, v27);
                  *(std::unordered_set<unsigned int>::iterator *)(v7 + 400) = std::unordered_set<unsigned int>::end(__for_range);
                  while ( 1 )
                  {
                    v30 = (char *)(v7 + 400);
                    if ( !std::__detail::operator!=<unsigned int,false>(
                            (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v7 + 368),
                            (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v7 + 400)) )
                      break;
                    *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) = 4;
                    v31 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_iterator<unsigned int,true,false> *const)(v7 + 368));
                    v32 = (int *)v31;
                    if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v31);
                    }
                    v33 = *v32;
                    v34 = *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000);
                    if ( v34 != 0 && v34 <= 3 )
                    {
                      LOBYTE(v30) = v34 != 0;
                      __asan_report_store4(v7 + 48, v30);
                    }
                    *(_DWORD *)(v7 + 48) = v33;
                    if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
                           meet_cond_set,
                           (const unsigned int *)(v7 + 48)) )
                    {
                      is_cond_meet = 1;
                      break;
                    }
                    std::__detail::_Node_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_iterator<unsigned int,true,false> *const)(v7 + 368));
                  }
                  *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v7 + 368) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v7 + 400) >> 3) + 0x7FFF8000) = -8;
                  if ( is_cond_meet )
                  {
LABEL_47:
                    v35 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)(v7 + 272));
                    v36 = std::map<unsigned int,unsigned int>::operator[](retstr, &v35->second);
                    if ( *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v36 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v36);
                    }
                    ++*v36;
                  }
                }
              }
              *(_BYTE *)(((v7 + 272) >> 3) + 0x7FFF8000) = -8;
            }
            v37 = ((v7 + 624) >> 3) + 2147450880;
            *(_DWORD *)v37 = 0;
            *(_WORD *)(v37 + 4) = 0;
            v38 = *(_DWORD *)(v7 + 64);
            M_current = std::next<__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>>(
                          *(__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v7 + 528),
                          1LL)._M_current;
            *(_WORD *)(((v7 + 592) >> 3) + 0x7FFF8000) = 0;
            std::shared_ptr<ActivityDropIndexNode>::shared_ptr(
              (std::shared_ptr<ActivityDropIndexNode> *const)(v7 + 592),
              (const std::shared_ptr<ActivityDropIndexNode> *)(v7 + 560));
            if ( *(char *)(((v7 + 624) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v7 + 671) >> 3) + 0x7FFF8000) != 0
              && (char)((v7 - 97) & 7) >= *(_BYTE *)(((v7 + 671) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v7 + 624, 48LL);
            }
            v40 = (char *)(v7 + 592);
            findDropIdBySubjectTree(
              (std::map<unsigned int,unsigned int> *)(v7 + 624),
              (ActivityDropIndexNodePtr *)(v7 + 592),
              meet_cond_set,
              exclude_set,
              drop_subject_vec,
              (std::vector<std::pair<unsigned int,unsigned int>>::iterator)M_current,
              v38);
            __for_range_0 = (std::map<unsigned int,unsigned int> *)(v7 + 624);
            std::shared_ptr<ActivityDropIndexNode>::~shared_ptr((std::shared_ptr<ActivityDropIndexNode> *const)(v7 + 592));
            *(_WORD *)(((v7 + 592) >> 3) + 0x7FFF8000) = -1800;
            *(_BYTE *)(((v7 + 464) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v7 + 464) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 464, v40);
            *(std::map<unsigned int,unsigned int>::iterator *)(v7 + 464) = std::map<unsigned int,unsigned int>::begin(__for_range_0);
            *(_BYTE *)(((v7 + 496) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v7 + 496) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v7 + 496, v40);
            *(std::map<unsigned int,unsigned int>::iterator *)(v7 + 496) = std::map<unsigned int,unsigned int>::end(__for_range_0);
            while ( 1 )
            {
              v11 = (char *)(v7 + 496);
              if ( !std::operator!=(
                      (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v7 + 464),
                      (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v7 + 496)) )
                break;
              *(_BYTE *)(((v7 + 432) >> 3) + 0x7FFF8000) = 0;
              v41 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)(v7 + 464));
              if ( *(_BYTE *)(((v7 + 432) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v7 + 432, v11);
              if ( ((unsigned __int8)v41 & 7) >= *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&v41->second + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)v41 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v41->second + 3) >> 3)
                                                                + 0x7FFF8000) )
              {
                __asan_report_load_n(v41, 8LL);
              }
              *(std::pair<unsigned int const,unsigned int> *)(v7 + 432) = *v41;
              drop_id = std::get<0ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v7 + 432));
              drop_count = std::get<1ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v7 + 432));
              v42 = std::map<unsigned int,unsigned int>::operator[](retstr, drop_id);
              if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v42 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v42);
              }
              v43 = *v42;
              if ( *(_BYTE *)(((unsigned __int64)drop_count >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)drop_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)drop_count >> 3)
                                                                             + 0x7FFF8000) )
              {
                __asan_report_load4(drop_count);
              }
              *v42 = v43 + *drop_count;
              std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)(v7 + 464));
            }
            std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v7 + 624));
            *(_BYTE *)(((v7 + 432) >> 3) + 0x7FFF8000) = -8;
            v44 = ((v7 + 624) >> 3) + 2147450880;
            *(_DWORD *)v44 = -117901064;
            *(_WORD *)(v44 + 4) = -1800;
            *(_BYTE *)(((v7 + 464) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v7 + 496) >> 3) + 0x7FFF8000) = -8;
            v20 = 1;
          }
          std::shared_ptr<ActivityDropIndexNode>::~shared_ptr((std::shared_ptr<ActivityDropIndexNode> *const)(v7 + 560));
          v18 = v20 == 1 ? 2 : 1;
        }
        *(_BYTE *)(((v7 + 144) >> 3) + 0x7FFF8000) = -8;
        *(_WORD *)(((v7 + 560) >> 3) + 0x7FFF8000) = -1800;
        if ( v18 )
        {
          if ( v18 != 2 )
            break;
        }
        __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)(v7 + 528));
      }
    }
  }
  if ( v56 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v9 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v9 + 2147450880 - (((_DWORD)v9 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 123: range 0000000013550F68-0000000013552207
int32_t __cdecl NewActivityExcelConfigMgr::rewriteConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int32_t ret; // [rsp+1Ch] [rbp-384h]
  char v20[896]; // [rsp+20h] [rbp-380h] BYREF

  v2 = (common::milog::MiLogStream *)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(864LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"13 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)NewActivityExcelConfigMgr::rewriteConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -202116109;
  ret = 0;
  if ( NewActivityExcelConfigMgr::rewriteActivityItemLimitType(this) )
  {
    ret = -1;
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      128);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      v5,
      (const char (*)[35])"rewriteActivityItemLimitType fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    *(_DWORD *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityDropExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[3], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 3,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      134);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 3, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      v6,
      (const char (*)[40])"rewriteNewActivityDropExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 3);
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityScheduleExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[5], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 5,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      140);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 5, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
      v7,
      (const char (*)[44])"rewriteNewActivityScheduleExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 5);
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[7], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 7,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      146);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 7, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      v8,
      (const char (*)[36])"rewriteNewActivityExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 7);
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityCondExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[9], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 9,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      152);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 9, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      v9,
      (const char (*)[40])"rewriteNewActivityCondExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 9);
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityCondGroupExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[11], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 11,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      157);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 11,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      v10,
      (const char (*)[45])"rewriteNewActivityCondGroupExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 11);
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteActitivityWatcherConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[13], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      162);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 13,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      v11,
      (const char (*)[37])"rewriteActitivityWatcherConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 13);
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteActivitySaleConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[15], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      168);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 15,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      v12,
      (const char (*)[32])"rewriteActivitySaleConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 15);
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityScoreLimitConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[17], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      173);
    v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 17,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
      v13,
      (const char (*)[41])"rewriteNewActivityScoreLimitConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 17);
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityScoreRewardConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[19], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 19,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      178);
    v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 19,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      v14,
      (const char (*)[42])"rewriteNewActivityScoreRewardConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 19);
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityTimeGroupConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[21], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      183);
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 21,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      v15,
      (const char (*)[40])"rewriteNewActivityTimeGroupConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 21);
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityOverlapExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[23], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 23,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      188);
    v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 23,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      v16,
      (const char (*)[43])"rewriteNewActivityOverlapExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 23);
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::rewriteNewActivityPushtipsExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[25], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 25,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteConfig",
      193);
    v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 25,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
      v17,
      (const char (*)[44])"rewriteNewActivityPushtipsExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 25);
  }
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8068) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8068) = -168430091;
  }
  return ret;
};

// Line 199: range 0000000013552208-00000000135534A7
int32_t __cdecl NewActivityExcelConfigMgr::checkConfig(
        NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  common::milog::MiLogStream *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int32_t ret; // [rsp+1Ch] [rbp-384h]
  char v20[896]; // [rsp+20h] [rbp-380h] BYREF

  v2 = (common::milog::MiLogStream *)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(864LL);
    if ( v3 )
      v2 = (common::milog::MiLogStream *)v3;
  }
  v2->log_ = (common::milog::MiLog *)1102416563;
  v2->ostr_ptr_._M_ptr = (std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type *)"13 32 32 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown>";
  v2->ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)NewActivityExcelConfigMgr::checkConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -202116109;
  ret = 0;
  if ( NewActivityExcelConfigMgr::checkActivityItemLimitType(this) )
  {
    ret = -1;
    if ( *(char *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[1].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[1], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      204);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 1, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
      v5,
      (const char (*)[33])"checkActivityItemLimitType fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 1);
    *(_DWORD *)(((unsigned __int64)&v2[1] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[3].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[3], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 3,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      210);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 3, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
      v6,
      (const char (*)[38])"checkNewActivityDropExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 3);
    *(_DWORD *)(((unsigned __int64)&v2[3] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityScheduleExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[5].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[5], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 5,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      216);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 5, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      v7,
      (const char (*)[42])"checkNewActivityScheduleExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 5);
    *(_DWORD *)(((unsigned __int64)&v2[5] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[7].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[7], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 7,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      222);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 7, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      v8,
      (const char (*)[34])"checkNewActivityExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 7);
    *(_DWORD *)(((unsigned __int64)&v2[7] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityCondGroupExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[9].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[9], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 9,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      228);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2 + 9, (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      v9,
      (const char (*)[43])"checkNewActivityCondGroupExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 9);
    *(_DWORD *)(((unsigned __int64)&v2[9] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityCondExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[11].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[11], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 11,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      234);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 11,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
      v10,
      (const char (*)[38])"checkNewActivityCondExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 11);
    *(_DWORD *)(((unsigned __int64)&v2[11] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkActitivityWatcherConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[13].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[13], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      240);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 13,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      v11,
      (const char (*)[35])"checkActitivityWatcherConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 13);
    *(_DWORD *)(((unsigned __int64)&v2[13] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkActivityAvatarSelectionConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[15].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[15], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      245);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 15,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
      v12,
      (const char (*)[41])"checkActivityAvatarSelectionConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 15);
    *(_DWORD *)(((unsigned __int64)&v2[15] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityScoreLimitConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[17].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[17], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      250);
    v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 17,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
      v13,
      (const char (*)[39])"checkNewActivityScoreLimitConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 17);
    *(_DWORD *)(((unsigned __int64)&v2[17] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityScoreRewardConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 127) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[19].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[19], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 19,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      255);
    v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 19,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      v14,
      (const char (*)[40])"checkNewActivityScoreRewardConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 19);
    *(_DWORD *)(((unsigned __int64)&v2[19] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityTimeGroupConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 65) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[21].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[21], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      260);
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 21,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
      v15,
      (const char (*)[38])"checkNewActivityTimeGroupConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 21);
    *(_DWORD *)(((unsigned __int64)&v2[21] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityEntryConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 - 1) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[23].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[23], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 23,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      265);
    v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 23,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      v16,
      (const char (*)[34])"checkNewActivityEntryConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 23);
    *(_DWORD *)(((unsigned __int64)&v2[23] >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( NewActivityExcelConfigMgr::checkNewActivityPushtipsExcelConfig(this, txt_config_mgr) )
  {
    ret = -1;
    *(_DWORD *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((unsigned __int64)&v2[25] >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 63) & 7) >= *(_BYTE *)((((unsigned __int64)&v2[25].ostr_ + 7) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(&v2[25], 32LL);
    }
    common::milog::MiLogStream::create(
      v2 + 25,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkConfig",
      270);
    v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            v2 + 25,
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      v17,
      (const char (*)[42])"checkNewActivityPushtipsExcelConfig fails");
    common::milog::MiLogStream::~MiLogStream(v2 + 25);
  }
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8068) = 0;
  }
  else
  {
    v2->log_ = (common::milog::MiLog *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8068) = -168430091;
  }
  return ret;
};

// Line 276: range 00000000135534A8-0000000013553505
bool __cdecl NewActivityExcelConfigMgr::isScheduleBeginning(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id,
        uint32_t end_time_offset)
{
  __int64 now; // [rsp+18h] [rbp-8h]

  now = common::tools::TimeUtils::getNow();
  return now < NewActivityExcelConfigMgr::getScheduleEndTime(this, schedule_id, end_time_offset)
      && now >= NewActivityExcelConfigMgr::getScheduleBeginTime(this, schedule_id);
};

// Line 283: range 0000000013553506-0000000013553540
bool __cdecl NewActivityExcelConfigMgr::isScheduleEnd(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id,
        uint32_t end_time_offset)
{
  time_t ScheduleEndTime; // rbx

  ScheduleEndTime = NewActivityExcelConfigMgr::getScheduleEndTime(this, schedule_id, end_time_offset);
  return ScheduleEndTime <= common::tools::TimeUtils::getNow();
};

// Line 288: range 0000000013553542-0000000013553581
bool __cdecl NewActivityExcelConfigMgr::isScheduleNotBegin(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id)
{
  unsigned int begin_time; // [rsp+1Ch] [rbp-4h]

  begin_time = NewActivityExcelConfigMgr::getScheduleBeginTime(this, schedule_id);
  return begin_time && common::tools::TimeUtils::getNow() < begin_time;
};

// Line 296: range 0000000013553582-00000000135535EF
uint32_t __cdecl NewActivityExcelConfigMgr::getScheduleBeginTime(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id)
{
  const data::NewActivityScheduleExcelConfig *conf_ptr; // [rsp+18h] [rbp-8h]

  conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(this, schedule_id);
  if ( !conf_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&conf_ptr->begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&conf_ptr->begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&conf_ptr->begin_time);
  }
  return conf_ptr->begin_time;
};

// Line 304: range 00000000135535F0-000000001355379E
uint32_t __cdecl NewActivityExcelConfigMgr::getScheduleEndTime(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id,
        uint32_t end_time_offset)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  uint32_t result; // eax
  __int64 v7; // rsi
  uint32_t v8; // ecx
  char v9; // al
  uint32_t *v10; // rax
  uint32_t *v11; // rdx
  const data::NewActivityScheduleExcelConfig *conf_ptr; // [rsp+18h] [rbp-68h]
  char v14[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::getScheduleEndTime;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(this, schedule_id);
  if ( conf_ptr )
  {
    v7 = (((_BYTE)conf_ptr + 84) & 7u) + 3;
    if ( *(_BYTE *)(((unsigned __int64)&conf_ptr->end_time >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)conf_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&conf_ptr->end_time >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&conf_ptr->end_time);
    }
    v8 = conf_ptr->end_time + end_time_offset;
    v9 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      LOBYTE(v7) = v9 != 0;
      __asan_report_store4(v3 + 32, v7);
    }
    *(_DWORD *)(v3 + 32) = v8;
    v10 = (uint32_t *)std::max<unsigned int>(&conf_ptr->end_time, (const unsigned int *)(v3 + 32));
    v11 = v10;
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v10);
    }
    result = *v11;
  }
  else
  {
    result = 0;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 312: range 00000000135537A0-00000000135537C7
bool __cdecl NewActivityExcelConfigMgr::isScheduleIdValid(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id)
{
  return data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(this, schedule_id) != 0LL;
};

// Line 317: range 00000000135537C8-0000000013553A74
void __cdecl NewActivityExcelConfigMgr::findNowAndFutureScheduleIdVec(
        const NewActivityExcelConfigMgr *const this,
        std::vector<unsigned int> *schedule_vec)
{
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5; // al
  data::NewActivityScheduleExcelConfigMap *__for_range; // [rsp+10h] [rbp-A0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::reference v7; // [rsp+18h] [rbp-98h]
  uint32_t *schedule_id; // [rsp+20h] [rbp-90h]
  char v9[128]; // [rsp+30h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>::__node_type *)"2 32 8 15 __for_begin:318 64 8 13 __for_end:318";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>::__node_type *)NewActivityExcelConfigMgr::findNowAndFutureScheduleIdVec;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  __for_range = &this->new_activity_schedule_excel_config_map;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], schedule_vec);
  v2[4]._M_cur = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::begin(__for_range)._M_cur;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], schedule_vec);
  v2[8]._M_cur = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>(
            v2 + 4,
            v2 + 8) )
  {
    v7 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator*(v2 + 4);
    schedule_id = std::get<0ul,unsigned int const,data::NewActivityScheduleExcelConfig>(v7);
    std::get<1ul,unsigned int const,data::NewActivityScheduleExcelConfig>(v7);
    if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(schedule_id);
    }
    if ( NewActivityExcelConfigMgr::isScheduleBeginning(this, *schedule_id, 0) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(schedule_id);
    }
    if ( NewActivityExcelConfigMgr::isScheduleNotBegin(this, *schedule_id) )
LABEL_16:
      v5 = 1;
    else
      v5 = 0;
    if ( v5 )
      std::vector<unsigned int>::push_back(schedule_vec, schedule_id);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator++(v2 + 4);
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 328: range 0000000013553A76-0000000013553DDF
void __cdecl NewActivityExcelConfigMgr::findNowAndFutureScheduleConfig(
        const NewActivityExcelConfigMgr *const this,
        std::vector<const data::NewActivityScheduleExcelConfig*> *schedule_config_vec)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5; // al
  const NewActivityExcelConfigMgr *v6; // rcx
  __int64 v7; // rsi
  __int64 NewActivityScheduleExcelConfig; // rax
  data::NewActivityScheduleExcelConfigMap *__for_range; // [rsp+10h] [rbp-C0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::reference v11; // [rsp+18h] [rbp-B8h]
  uint32_t *schedule_id; // [rsp+20h] [rbp-B0h]
  char v13[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 15 __for_begin:329 64 8 13 __for_end:329 96 8 12 conf_ptr:333";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::findNowAndFutureScheduleConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  __for_range = &this->new_activity_schedule_excel_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, schedule_config_vec);
  *(std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::const_iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, schedule_config_vec);
  *(std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false> *)(v2 + 64)) )
  {
    v11 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *const)(v2 + 32));
    schedule_id = std::get<0ul,unsigned int const,data::NewActivityScheduleExcelConfig>(v11);
    std::get<1ul,unsigned int const,data::NewActivityScheduleExcelConfig>(v11);
    if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(schedule_id);
    }
    if ( NewActivityExcelConfigMgr::isScheduleBeginning(this, *schedule_id, 0) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(schedule_id);
    }
    if ( NewActivityExcelConfigMgr::isScheduleNotBegin(this, *schedule_id) )
LABEL_16:
      v5 = 1;
    else
      v5 = 0;
    if ( v5 )
    {
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      v6 = this;
      if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(schedule_id);
      }
      v7 = *schedule_id;
      NewActivityScheduleExcelConfig = (__int64)data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(
                                                  v6,
                                                  v7);
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
        NewActivityScheduleExcelConfig = __asan_report_store8(v2 + 96, v7);
      *(_QWORD *)(v2 + 96) = NewActivityScheduleExcelConfig;
      if ( *(_QWORD *)(v2 + 96) )
        std::vector<data::NewActivityScheduleExcelConfig const*>::push_back(
          schedule_config_vec,
          (const std::vector<const data::NewActivityScheduleExcelConfig*>::value_type *)(v2 + 96));
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *const)(v2 + 32));
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 342: range 0000000013553DE0-0000000013554267
const data::NewActivityScheduleExcelConfig *__fastcall NewActivityExcelConfigMgr::findNowAndFutureScheduleConfig(
        const NewActivityExcelConfigMgr *const this,
        __int64 activity_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::unordered_map<unsigned int,std::vector<unsigned int>> *p_activity_id_schedule_vec_map; // rdx
  std::unordered_map<unsigned int,std::vector<unsigned int>> *v6; // rdx
  char *v7; // rsi
  bool v8; // al
  const data::NewActivityScheduleExcelConfig *result; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v10; // rax
  const NewActivityExcelConfigMgr *v11; // rcx
  uint32_t earliest_begin_time; // [rsp+14h] [rbp-10Ch]
  const data::NewActivityScheduleExcelConfig *earliest_schedule; // [rsp+18h] [rbp-108h]
  __int64 now; // [rsp+20h] [rbp-100h]
  std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-F8h]
  const unsigned int *schedule_id; // [rsp+30h] [rbp-F0h]
  const data::NewActivityScheduleExcelConfig *conf_ptr; // [rsp+38h] [rbp-E8h]
  char v18[224]; // [rsp+40h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 15 activity_id:341 64 8 8 iter:343 96 8 9 <unknown> 128 8 15 __for_begin:351 160 8 13 __for_end:351";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::findNowAndFutureScheduleConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -202116352;
  *(_DWORD *)(v2 + 48) = activity_id;
  p_activity_id_schedule_vec_map = &this->activity_id_schedule_vec_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, activity_id);
  *(std::unordered_map<unsigned int,std::vector<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::vector<unsigned int>>::find(
                                                                                               p_activity_id_schedule_vec_map,
                                                                                               (const std::unordered_map<unsigned int,std::vector<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->activity_id_schedule_vec_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::vector<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::vector<unsigned int>>::end(v6);
  v7 = (char *)(v2 + 96);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::vector<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0LL;
  }
  else
  {
    earliest_begin_time = -1;
    earliest_schedule = 0LL;
    now = common::tools::TimeUtils::getNow();
    __for_range = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int> >,false,false> *const)(v2 + 64))->second;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v7);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 128) = std::vector<unsigned int>::begin(__for_range);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v7);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 160) = std::vector<unsigned int>::end(__for_range);
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 160)) )
    {
      v10 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
      schedule_id = v10;
      v11 = this;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(v11, *schedule_id);
      if ( conf_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&conf_ptr->begin_time >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&conf_ptr->begin_time >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&conf_ptr->begin_time);
        }
        if ( now < conf_ptr->begin_time )
          goto LABEL_25;
        if ( *(_BYTE *)(((unsigned __int64)&conf_ptr->end_time >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)conf_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&conf_ptr->end_time >> 3)
                                                                  + 0x7FFF8000) )
        {
          __asan_report_load4(&conf_ptr->end_time);
        }
        if ( now < conf_ptr->end_time )
        {
LABEL_25:
          if ( *(_BYTE *)(((unsigned __int64)&conf_ptr->begin_time >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&conf_ptr->begin_time >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&conf_ptr->begin_time);
          }
          if ( earliest_begin_time > conf_ptr->begin_time )
          {
            earliest_begin_time = conf_ptr->begin_time;
            earliest_schedule = conf_ptr;
          }
        }
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
    }
    result = earliest_schedule;
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 373: range 0000000013554268-000000001355429D
const data::NewActivityExcelConfig *__cdecl NewActivityExcelConfigMgr::findActivityConfigPtrByScheduleId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id)
{
  uint32_t ActivityIdByScheduleId; // eax

  ActivityIdByScheduleId = NewActivityExcelConfigMgr::getActivityIdByScheduleId(this, schedule_id);
  return data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(this, ActivityIdByScheduleId);
};

// Line 378: range 000000001355429E-00000000135544B6
bool __cdecl NewActivityExcelConfigMgr::foundGroupExec(
        const NewActivityExcelConfigMgr *const this,
        const std::vector<data::NewActivityExec> *vec)
{
  bool v2; // r15
  __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int v6; // eax
  bool result; // al
  const data::NewActivityExec *exec; // [rsp+18h] [rbp-98h]
  char v9[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (__gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (__gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)v4;
  }
  v3->_M_current = (const data::NewActivityExec *)1102416563;
  v3[1]._M_current = (const data::NewActivityExec *)"2 32 8 15 __for_begin:379 64 8 13 __for_end:379";
  v3[2]._M_current = (const data::NewActivityExec *)NewActivityExcelConfigMgr::foundGroupExec;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[4], vec);
  v3[4]._M_current = std::vector<data::NewActivityExec>::begin(vec)._M_current;
  if ( *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[8], vec);
  v3[8]._M_current = std::vector<data::NewActivityExec>::end(vec)._M_current;
  while ( __gnu_cxx::operator!=<data::NewActivityExec const*,std::vector<data::NewActivityExec>>(v3 + 4, v3 + 8) )
  {
    exec = __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator*(v3 + 4);
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    if ( exec->type == NEW_ACTIVITY_ACTION_FORBID_GROUP || exec->type == NEW_ACTIVITY_ACTION_ACTIVE_GROUP )
    {
      v2 = 1;
      v6 = 0;
      goto LABEL_17;
    }
    __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator++(v3 + 4);
  }
  v6 = 1;
LABEL_17:
  if ( v6 == 1 )
    v2 = 0;
  result = v2;
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_M_current = (const data::NewActivityExec *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 392: range 00000000135544B8-0000000013554735
bool __cdecl NewActivityExcelConfigMgr::foundGroupInCondVec(
        const NewActivityExcelConfigMgr *const this,
        const std::vector<unsigned int> *cond_vec)
{
  bool v2; // r15
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v6; // rax
  const NewActivityExcelConfigMgr *v7; // rcx
  int v9; // eax
  bool result; // al
  const unsigned int *cond_id; // [rsp+20h] [rbp-A0h]
  const data::NewActivityCondExcelConfig *cond_conf_ptr; // [rsp+28h] [rbp-98h]
  char v13[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)v4;
  }
  v3->_M_current = (const unsigned int *)1102416563;
  v3[1]._M_current = (const unsigned int *)"2 32 8 15 __for_begin:393 64 8 13 __for_end:393";
  v3[2]._M_current = (const unsigned int *)NewActivityExcelConfigMgr::foundGroupInCondVec;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[4], cond_vec);
  v3[4]._M_current = std::vector<unsigned int>::begin(cond_vec)._M_current;
  if ( *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[8], cond_vec);
  v3[8]._M_current = std::vector<unsigned int>::end(cond_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(v3 + 4, v3 + 8) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(v3 + 4);
    cond_id = v6;
    v7 = this;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    cond_conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityCondExcelConfig(v7, *cond_id);
    if ( cond_conf_ptr )
    {
      if ( NewActivityExcelConfigMgr::foundGroupExec(this, &cond_conf_ptr->meet_exec)
        || NewActivityExcelConfigMgr::foundGroupExec(this, &cond_conf_ptr->expire_exec) )
      {
        v2 = 1;
        v9 = 0;
        goto LABEL_21;
      }
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(v3 + 4);
  }
  v9 = 1;
LABEL_21:
  if ( v9 == 1 )
    v2 = 0;
  result = v2;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_M_current = (const unsigned int *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 408: range 0000000013554736-0000000013554982
bool __cdecl NewActivityExcelConfigMgr::foundGroupInCondGroupVec(
        const NewActivityExcelConfigMgr *const this,
        const std::vector<unsigned int> *cond_group_vec)
{
  bool v2; // r15
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v6; // rax
  const NewActivityExcelConfigMgr *v7; // rcx
  int v8; // eax
  bool result; // al
  const unsigned int *cond_group_id; // [rsp+20h] [rbp-A0h]
  const data::NewActivityCondGroupExcelConfig *group_conf_ptr; // [rsp+28h] [rbp-98h]
  char v12[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)v4;
  }
  v3->_M_current = (const unsigned int *)1102416563;
  v3[1]._M_current = (const unsigned int *)"2 32 8 15 __for_begin:409 64 8 13 __for_end:409";
  v3[2]._M_current = (const unsigned int *)NewActivityExcelConfigMgr::foundGroupInCondGroupVec;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v3[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[4], cond_group_vec);
  v3[4]._M_current = std::vector<unsigned int>::begin(cond_group_vec)._M_current;
  if ( *(_BYTE *)(((unsigned __int64)&v3[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v3[8], cond_group_vec);
  v3[8]._M_current = std::vector<unsigned int>::end(cond_group_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(v3 + 4, v3 + 8) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(v3 + 4);
    cond_group_id = v6;
    v7 = this;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    group_conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityCondGroupExcelConfig(v7, *cond_group_id);
    if ( group_conf_ptr && NewActivityExcelConfigMgr::foundGroupInCondVec(this, &group_conf_ptr->cond_id) )
    {
      v2 = 1;
      v8 = 0;
      goto LABEL_17;
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(v3 + 4);
  }
  v8 = 1;
LABEL_17:
  if ( v8 == 1 )
    v2 = 0;
  result = v2;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_M_current = (const unsigned int *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 425: range 0000000013554984-0000000013554B90
void __cdecl NewActivityExcelConfigMgr::getHaveGroupActionActivity(
        const NewActivityExcelConfigMgr *const this,
        std::set<unsigned int> *activity_set)
{
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::NewActivityExcelConfigMap *__for_range; // [rsp+10h] [rbp-A0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::reference v6; // [rsp+18h] [rbp-98h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityExcelConfig> >::type *activity_conf; // [rsp+28h] [rbp-88h]
  char v8[128]; // [rsp+30h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false> *)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false>::__node_type *)"2 32 8 15 __for_begin:426 64 8 13 __for_end:426";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false>::__node_type *)NewActivityExcelConfigMgr::getHaveGroupActionActivity;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  __for_range = &this->new_activity_excel_config_map;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], activity_set);
  v2[4]._M_cur = std::unordered_map<unsigned int,data::NewActivityExcelConfig>::begin(__for_range)._M_cur;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], activity_set);
  v2[8]._M_cur = std::unordered_map<unsigned int,data::NewActivityExcelConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityExcelConfig>,false>(v2 + 4, v2 + 8) )
  {
    v6 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::operator*(v2 + 4);
    std::get<0ul,unsigned int const,data::NewActivityExcelConfig>(v6);
    activity_conf = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityExcelConfig>(v6);
    if ( NewActivityExcelConfigMgr::foundGroupInCondGroupVec(this, &activity_conf->cond_group_id) )
      std::set<unsigned int>::insert(activity_set, &activity_conf->activity_id);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::operator++(v2 + 4);
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 436: range 0000000013554B92-0000000013554BC3
data::NewActivityType __cdecl NewActivityExcelConfigMgr::getActivityTypeByScheduleId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id)
{
  uint32_t ActivityIdByScheduleId; // edx

  ActivityIdByScheduleId = NewActivityExcelConfigMgr::getActivityIdByScheduleId(this, schedule_id);
  return NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(this, ActivityIdByScheduleId);
};

// Line 441: range 0000000013554BC4-0000000013554C31
uint32_t __cdecl NewActivityExcelConfigMgr::getActivityIdByScheduleId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id)
{
  const data::NewActivityScheduleExcelConfig *conf_ptr; // [rsp+18h] [rbp-8h]

  conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(this, schedule_id);
  if ( !conf_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&conf_ptr->activity_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&conf_ptr->activity_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&conf_ptr->activity_id);
  }
  return conf_ptr->activity_id;
};

// Line 449: range 0000000013554C32-0000000013554CA7
data::NewActivityType __cdecl NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id)
{
  const data::NewActivityExcelConfig *conf_ptr; // [rsp+18h] [rbp-8h]

  conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(this, activity_id);
  if ( !conf_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&conf_ptr->activity_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)conf_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&conf_ptr->activity_type >> 3)
                                                            + 0x7FFF8000) )
  {
    __asan_report_load4(&conf_ptr->activity_type);
  }
  return conf_ptr->activity_type;
};

// Line 457: range 0000000013554CA8-0000000013554E88
bool __fastcall NewActivityExcelConfigMgr::isActivityContainsCondId(
        const NewActivityExcelConfigMgr *const this,
        __int64 activity_id,
        uint32_t cond_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_activity_cond_set_map; // rdx
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *v7; // rdx
  bool v8; // al
  bool result; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false>::pointer v10; // rax
  char v12[160]; // [rsp+10h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 15 activity_id:456 48 4 11 cond_id:456 64 8 8 iter:458 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::isActivityContainsCondId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 32) = activity_id;
  *(_DWORD *)(v3 + 48) = cond_id;
  p_activity_cond_set_map = &this->activity_cond_set_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, activity_id);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(p_activity_cond_set_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->activity_cond_set_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0;
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v3 + 64));
    result = common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
               &v10->second,
               (const unsigned int *)(v3 + 48));
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 465: range 0000000013554E8A-00000000135550A7
const std::unordered_set<unsigned int> *__fastcall NewActivityExcelConfigMgr::getActivityCondSet(
        const NewActivityExcelConfigMgr *const this,
        std::unordered_set<unsigned int> *activity_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_activity_cond_set_map; // rdx
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *v6; // rdx
  bool v7; // al
  const std::unordered_set<unsigned int> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 activity_id:464 64 8 8 iter:468 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::getActivityCondSet;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = (_DWORD)activity_id;
  if ( !(_BYTE)`guard variable for'NewActivityExcelConfigMgr::getActivityCondSet(unsigned int)::empty
    && __cxa_guard_acquire(&`guard variable for'NewActivityExcelConfigMgr::getActivityCondSet(unsigned int)::empty) )
  {
    std::unordered_set<unsigned int>::unordered_set(&NewActivityExcelConfigMgr::getActivityCondSet(unsigned int)const::empty);
    __cxa_guard_release(&`guard variable for'NewActivityExcelConfigMgr::getActivityCondSet(unsigned int)::empty);
    activity_id = &NewActivityExcelConfigMgr::getActivityCondSet(unsigned int)const::empty;
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_set<unsigned int>::~unordered_set,
      &NewActivityExcelConfigMgr::getActivityCondSet(unsigned int)const::empty,
      &_dso_handle);
  }
  p_activity_cond_set_map = &this->activity_cond_set_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, activity_id);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(p_activity_cond_set_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->activity_cond_set_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &NewActivityExcelConfigMgr::getActivityCondSet(unsigned int)const::empty;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 475: range 00000000135550A8-00000000135552C5
const std::unordered_set<unsigned int> *__fastcall NewActivityExcelConfigMgr::getActivitySetByCondId(
        const NewActivityExcelConfigMgr *const this,
        std::unordered_set<unsigned int> *cond_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_cond_activity_set_map; // rdx
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *v6; // rdx
  bool v7; // al
  const std::unordered_set<unsigned int> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 11 cond_id:474 64 8 8 iter:477 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::getActivitySetByCondId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = (_DWORD)cond_id;
  if ( !(_BYTE)`guard variable for'NewActivityExcelConfigMgr::getActivitySetByCondId(unsigned int)::empty_set
    && __cxa_guard_acquire(&`guard variable for'NewActivityExcelConfigMgr::getActivitySetByCondId(unsigned int)::empty_set) )
  {
    std::unordered_set<unsigned int>::unordered_set(&NewActivityExcelConfigMgr::getActivitySetByCondId(unsigned int)const::empty_set);
    __cxa_guard_release(&`guard variable for'NewActivityExcelConfigMgr::getActivitySetByCondId(unsigned int)::empty_set);
    cond_id = &NewActivityExcelConfigMgr::getActivitySetByCondId(unsigned int)const::empty_set;
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_set<unsigned int>::~unordered_set,
      &NewActivityExcelConfigMgr::getActivitySetByCondId(unsigned int)const::empty_set,
      &_dso_handle);
  }
  p_cond_activity_set_map = &this->cond_activity_set_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, cond_id);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(p_cond_activity_set_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->cond_activity_set_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &NewActivityExcelConfigMgr::getActivitySetByCondId(unsigned int)const::empty_set;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 487: range 00000000135552C6-00000000135556E9
__int64 __fastcall NewActivityExcelConfigMgr::getActivityIdByCondId(
        const NewActivityExcelConfigMgr *const this,
        __int64 cond_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_cond_activity_set_map; // rdx
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *v6; // rdx
  bool v7; // al
  __int64 result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_const_iterator<unsigned int,true,false>::reference v12; // rax
  unsigned int *v13; // rdx
  std::unordered_set<unsigned int> *activity_id_set; // [rsp+18h] [rbp-108h]
  char v15[256]; // [rsp+20h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 11 cond_id:486 64 8 8 iter:488 96 8 9 <unknown> 128 8 9 <unknown> 160 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::getActivityIdByCondId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -202116109;
  *(_DWORD *)(v2 + 48) = cond_id;
  p_cond_activity_set_map = &this->cond_activity_set_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, cond_id);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(p_cond_activity_set_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->cond_activity_set_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    result = 0LL;
  }
  else
  {
    activity_id_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 64))->second;
    if ( !std::unordered_set<unsigned int>::empty(activity_id_set) )
    {
      if ( std::unordered_set<unsigned int>::size(activity_id_set) <= 1 )
      {
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 128, v2 + 96);
        *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 128) = std::unordered_set<unsigned int>::begin(activity_id_set);
        v12 = std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 128));
        v13 = (unsigned int *)v12;
        if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v12);
        }
        result = *v13;
      }
      else
      {
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 160, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 160),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "getActivityIdByCondId",
          498);
        v9 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
               (common::milog::MiLogStream *const)(v2 + 160),
               (const char (*)[8])"CondId:");
        v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v9,
                (const unsigned int *)(v2 + 48));
        v11 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                v10,
                (const char (*)[28])" find multiple acitivityid:");
        common::milog::MiLogStream::operator<<<unsigned int>(v11, activity_id_set);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
        result = 0LL;
      }
    }
    else
    {
      result = 0LL;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 507: range 00000000135556EA-0000000013555757
data::ItemLimitType __cdecl NewActivityExcelConfigMgr::getDropItemLimitType(
        const NewActivityExcelConfigMgr *const this,
        data::NewActivityType activity_type)
{
  const data::NewActivityItemLimitExcelConfig *activity_item_limit_type_config_ptr; // [rsp+18h] [rbp-8h]

  activity_item_limit_type_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityItemLimitExcelConfig(
                                          this,
                                          (unsigned int)activity_type);
  if ( !activity_item_limit_type_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&activity_item_limit_type_config_ptr->drop_item_limit_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&activity_item_limit_type_config_ptr->drop_item_limit_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&activity_item_limit_type_config_ptr->drop_item_limit_type);
  }
  return activity_item_limit_type_config_ptr->drop_item_limit_type;
};

// Line 517: range 0000000013555758-00000000135557CD
data::ItemLimitType __cdecl NewActivityExcelConfigMgr::getRewardItemLimitType(
        const NewActivityExcelConfigMgr *const this,
        data::NewActivityType activity_type)
{
  const data::NewActivityItemLimitExcelConfig *activity_item_limit_type_config_ptr; // [rsp+18h] [rbp-8h]

  activity_item_limit_type_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityItemLimitExcelConfig(
                                          this,
                                          (unsigned int)activity_type);
  if ( !activity_item_limit_type_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&activity_item_limit_type_config_ptr->reward_item_limit_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)activity_item_limit_type_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&activity_item_limit_type_config_ptr->reward_item_limit_type >> 3)
                                                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&activity_item_limit_type_config_ptr->reward_item_limit_type);
  }
  return activity_item_limit_type_config_ptr->reward_item_limit_type;
};

// Line 527: range 00000000135557CE-0000000013555843
data::ItemLimitType __cdecl NewActivityExcelConfigMgr::getAvatarSelectionLimitType(
        const NewActivityExcelConfigMgr *const this,
        data::NewActivityType activity_type)
{
  const data::NewActivityItemLimitExcelConfig *activity_item_limit_type_config_ptr; // [rsp+18h] [rbp-8h]

  activity_item_limit_type_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityItemLimitExcelConfig(
                                          this,
                                          (unsigned int)activity_type);
  if ( !activity_item_limit_type_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&activity_item_limit_type_config_ptr->avatar_limit_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)activity_item_limit_type_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&activity_item_limit_type_config_ptr->avatar_limit_type >> 3)
                                                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&activity_item_limit_type_config_ptr->avatar_limit_type);
  }
  return activity_item_limit_type_config_ptr->avatar_limit_type;
};

// Line 537: range 0000000013555844-0000000013555875
data::ItemLimitType __cdecl NewActivityExcelConfigMgr::getDropItemLimitTypeByActivityId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id)
{
  data::NewActivityType ActivitiyTypeByActivityId; // edx

  ActivitiyTypeByActivityId = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(this, activity_id);
  return NewActivityExcelConfigMgr::getDropItemLimitType(this, ActivitiyTypeByActivityId);
};

// Line 542: range 0000000013555876-00000000135558A7
data::ItemLimitType __cdecl NewActivityExcelConfigMgr::getRewardItemLimitTypeByActivityId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id)
{
  data::NewActivityType ActivitiyTypeByActivityId; // edx

  ActivitiyTypeByActivityId = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(this, activity_id);
  return NewActivityExcelConfigMgr::getRewardItemLimitType(this, ActivitiyTypeByActivityId);
};

// Line 547: range 00000000135558A8-00000000135558D9
data::ItemLimitType __cdecl NewActivityExcelConfigMgr::getAvatarSelectionLimitTypeByActivityId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id)
{
  data::NewActivityType ActivitiyTypeByActivityId; // edx

  ActivitiyTypeByActivityId = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(this, activity_id);
  return NewActivityExcelConfigMgr::getAvatarSelectionLimitType(this, ActivitiyTypeByActivityId);
};

// Line 553: range 00000000135558DA-0000000013555B28
__int64 __fastcall NewActivityExcelConfigMgr::checkAndFindActivityTypeByItemLimitType(
        const NewActivityExcelConfigMgr *const this,
        __int64 item_limit_type,
        unsigned __int64 activity_type)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<data::ItemLimitType,data::NewActivityType> *p_item_limit_activity_type_map; // rdx
  std::unordered_map<data::ItemLimitType,data::NewActivityType> *v7; // rdx
  char *v8; // rsi
  bool v9; // al
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<const data::ItemLimitType,data::NewActivityType>,false,false>::pointer v11; // rdx
  data::NewActivityType *p_second; // rax
  data::NewActivityType second; // ecx
  char v14; // dl
  char v16[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 19 item_limit_type:552 64 8 8 iter:554 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkAndFindActivityTypeByItemLimitType;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = item_limit_type;
  p_item_limit_activity_type_map = &this->item_limit_activity_type_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, item_limit_type);
  *(std::unordered_map<data::ItemLimitType,data::NewActivityType>::const_iterator *)(v3 + 64) = std::unordered_map<data::ItemLimitType,data::NewActivityType>::find(
                                                                                                  p_item_limit_activity_type_map,
                                                                                                  (const std::unordered_map<data::ItemLimitType,data::NewActivityType>::key_type *)(v3 + 48));
  v7 = &this->item_limit_activity_type_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<data::ItemLimitType,data::NewActivityType>::const_iterator *)(v3 + 96) = std::unordered_map<data::ItemLimitType,data::NewActivityType>::end(v7);
  v8 = (char *)(v3 + 96);
  v9 = std::__detail::operator==<std::pair<data::ItemLimitType const,data::NewActivityType>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<const data::ItemLimitType,data::NewActivityType>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<const data::ItemLimitType,data::NewActivityType>,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    result = 0xFFFFFFFFLL;
  }
  else
  {
    v11 = std::__detail::_Node_const_iterator<std::pair<data::ItemLimitType const,data::NewActivityType>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<const data::ItemLimitType,data::NewActivityType>,false,false> *const)(v3 + 64));
    p_second = &v11->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    second = v11->second;
    v14 = *(_BYTE *)((activity_type >> 3) + 0x7FFF8000);
    if ( v14 != 0 && (char)((activity_type & 7) + 3) >= v14 )
    {
      LOBYTE(v8) = v14 != 0;
      __asan_report_store4(activity_type, v8);
    }
    *(_DWORD *)activity_type = second;
    result = 0LL;
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 565: range 0000000013555B2A-0000000013555E63
bool __fastcall NewActivityExcelConfigMgr::isCrossActivityBeginTime(
        const NewActivityExcelConfigMgr *const this,
        __int64 activity_type,
        uint32_t last_refresh_time,
        uint32_t current_time)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::unordered_map<data::NewActivityType,std::set<unsigned int>> *p_activity_open_time_set_map; // rdx
  std::unordered_map<data::NewActivityType,std::set<unsigned int>> *v8; // rdx
  bool v9; // al
  bool result; // al
  bool v11; // al
  std::_Rb_tree_const_iterator<unsigned int>::reference v12; // rax
  _DWORD *v13; // rdx
  std::set<unsigned int> *open_time_set; // [rsp+28h] [rbp-E8h]
  char v17[224]; // [rsp+30h] [rbp-E0h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 4 17 activity_type:564 48 4 21 last_refresh_time:564 64 8 22 open_time_set_iter:566 96 8 9 "
                        "<unknown> 128 8 8 iter:572 160 8 9 <unknown>";
  *(_QWORD *)(v4 + 16) = NewActivityExcelConfigMgr::isCrossActivityBeginTime;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -202116352;
  *(_DWORD *)(v4 + 32) = activity_type;
  *(_DWORD *)(v4 + 48) = last_refresh_time;
  p_activity_open_time_set_map = &this->activity_open_time_set_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, activity_type);
  *(std::unordered_map<data::NewActivityType,std::set<unsigned int>>::const_iterator *)(v4 + 64) = std::unordered_map<data::NewActivityType,std::set<unsigned int>>::find(
                                                                                                     p_activity_open_time_set_map,
                                                                                                     (const std::unordered_map<data::NewActivityType,std::set<unsigned int>>::key_type *)(v4 + 32));
  v8 = &this->activity_open_time_set_map;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 32);
  *(std::unordered_map<data::NewActivityType,std::set<unsigned int>>::const_iterator *)(v4 + 96) = std::unordered_map<data::NewActivityType,std::set<unsigned int>>::end(v8);
  v9 = std::__detail::operator==<std::pair<data::NewActivityType const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<const data::NewActivityType,std::set<unsigned int> >,false> *)(v4 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<const data::NewActivityType,std::set<unsigned int> >,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    result = 0;
  }
  else
  {
    open_time_set = &std::__detail::_Node_const_iterator<std::pair<data::NewActivityType const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<const data::NewActivityType,std::set<unsigned int> >,false,false> *const)(v4 + 64))->second;
    *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 128, v4 + 96);
    *(std::set<unsigned int>::const_iterator *)(v4 + 128) = std::set<unsigned int>::upper_bound(
                                                              open_time_set,
                                                              (const std::set<unsigned int>::key_type *)(v4 + 48));
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 160, v4 + 48);
    *(std::set<unsigned int>::iterator *)(v4 + 160) = std::set<unsigned int>::end(open_time_set);
    v11 = std::operator==(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 128),
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 160));
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v11 )
    {
      result = 0;
    }
    else
    {
      v12 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v4 + 128));
      v13 = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      result = current_time >= *v13;
    }
  }
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 581: range 0000000013555E64-0000000013556044
bool __fastcall NewActivityExcelConfigMgr::isActivityContainsWatcher(
        const NewActivityExcelConfigMgr *const this,
        __int64 activity_id,
        uint32_t watcher_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_activity_watcher_set_map; // rdx
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *v7; // rdx
  bool v8; // al
  bool result; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false>::pointer v10; // rax
  char v12[160]; // [rsp+10h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 15 activity_id:580 48 4 14 watcher_id:580 64 8 8 iter:582 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::isActivityContainsWatcher;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 32) = activity_id;
  *(_DWORD *)(v3 + 48) = watcher_id;
  p_activity_watcher_set_map = &this->activity_watcher_set_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, activity_id);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(p_activity_watcher_set_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->activity_watcher_set_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0;
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v3 + 64));
    result = common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
               &v10->second,
               (const unsigned int *)(v3 + 48));
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 589: range 0000000013556046-0000000013556263
const std::unordered_set<unsigned int> *__fastcall NewActivityExcelConfigMgr::findNewActivityWatcherSet(
        const NewActivityExcelConfigMgr *const this,
        std::unordered_set<unsigned int> *activity_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_activity_watcher_set_map; // rdx
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *v6; // rdx
  bool v7; // al
  const std::unordered_set<unsigned int> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 activity_id:588 64 8 8 iter:592 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::findNewActivityWatcherSet;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = (_DWORD)activity_id;
  if ( !(_BYTE)`guard variable for'NewActivityExcelConfigMgr::findNewActivityWatcherSet(unsigned int)::empty
    && __cxa_guard_acquire(&`guard variable for'NewActivityExcelConfigMgr::findNewActivityWatcherSet(unsigned int)::empty) )
  {
    std::unordered_set<unsigned int>::unordered_set(&NewActivityExcelConfigMgr::findNewActivityWatcherSet(unsigned int)const::empty);
    __cxa_guard_release(&`guard variable for'NewActivityExcelConfigMgr::findNewActivityWatcherSet(unsigned int)::empty);
    activity_id = &NewActivityExcelConfigMgr::findNewActivityWatcherSet(unsigned int)const::empty;
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_set<unsigned int>::~unordered_set,
      &NewActivityExcelConfigMgr::findNewActivityWatcherSet(unsigned int)const::empty,
      &_dso_handle);
  }
  p_activity_watcher_set_map = &this->activity_watcher_set_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, activity_id);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(p_activity_watcher_set_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->activity_watcher_set_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = &NewActivityExcelConfigMgr::findNewActivityWatcherSet(unsigned int)const::empty;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 599: range 0000000013556264-000000001355645F
__int64 __fastcall NewActivityExcelConfigMgr::findActivityIdByWatcherId(
        const NewActivityExcelConfigMgr *const this,
        __int64 watcher_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,unsigned int> *p_watcher_activity_map; // rdx
  std::unordered_map<unsigned int,unsigned int> *v6; // rdx
  bool v7; // al
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v9; // rdx
  unsigned int *p_second; // rax
  char v11[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 watcher_id:598 64 8 8 iter:600 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::findActivityIdByWatcherId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = watcher_id;
  p_watcher_activity_map = &this->watcher_activity_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, watcher_id);
  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                  p_watcher_activity_map,
                                                                                  (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->watcher_activity_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,unsigned int>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    result = 0LL;
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 64));
    p_second = &v9->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v9->second;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 608: range 0000000013556460-000000001355667D
const std::unordered_set<unsigned int> *__fastcall NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds(
        const NewActivityExcelConfigMgr *const this,
        __int64 talk_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_talk_id_activity_map; // rdx
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *v6; // rdx
  bool v7; // al
  const std::unordered_set<unsigned int> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 11 talk_id:607 64 8 8 iter:609 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = talk_id;
  p_talk_id_activity_map = &this->talk_id_activity_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, talk_id);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(p_talk_id_activity_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->talk_id_activity_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    if ( !(_BYTE)`guard variable for'NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds(unsigned int)::empty_activity_id_set
      && __cxa_guard_acquire(&`guard variable for'NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds(unsigned int)::empty_activity_id_set) )
    {
      std::unordered_set<unsigned int>::unordered_set(&NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds(unsigned int)const::empty_activity_id_set);
      __cxa_guard_release(&`guard variable for'NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds(unsigned int)::empty_activity_id_set);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_set<unsigned int>::~unordered_set,
        &NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds(unsigned int)const::empty_activity_id_set,
        &_dso_handle);
    }
    result = &NewActivityExcelConfigMgr::getTalkIdRelatedActivityIds(unsigned int)const::empty_activity_id_set;
  }
  else
  {
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 620: range 000000001355667E-0000000013556931
const std::unordered_set<unsigned int> *__fastcall NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds(
        const NewActivityExcelConfigMgr *const this,
        __int64 group_id,
        uint32_t config_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>> *p_group_config_activity_map; // rdx
  bool v7; // al
  const std::unordered_set<unsigned int> *result; // rax
  char v10[208]; // [rsp+10h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 12 group_id:619 48 4 13 config_id:619 64 8 8 iter:621 96 8 9 <unknown> 128 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -202116352;
  *(_DWORD *)(v3 + 32) = group_id;
  *(_DWORD *)(v3 + 48) = config_id;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, group_id);
  *(std::pair<unsigned int,unsigned int> *)(v3 + 96) = std::make_pair<unsigned int &,unsigned int &>(
                                                         (unsigned int *)(v3 + 32),
                                                         (unsigned int *)(v3 + 48));
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, v3 + 48);
  *(std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 64) = std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>>::find(&this->group_config_activity_map, (const std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>>::key_type *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
  p_group_config_activity_map = &this->group_config_activity_map;
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, v3 + 96);
  *(std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>>::const_iterator *)(v3 + 128) = std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>>::end(p_group_config_activity_map);
  v7 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int> > >::_Self *)(v3 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int> > >::_Self *)(v3 + 128));
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    if ( !(_BYTE)`guard variable for'NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds(unsigned int,unsigned int)::empty_activity_id_set
      && __cxa_guard_acquire(&`guard variable for'NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds(unsigned int,unsigned int)::empty_activity_id_set) )
    {
      std::unordered_set<unsigned int>::unordered_set(&NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds(unsigned int,unsigned int)const::empty_activity_id_set);
      __cxa_guard_release(&`guard variable for'NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds(unsigned int,unsigned int)::empty_activity_id_set);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_set<unsigned int>::~unordered_set,
        &NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds(unsigned int,unsigned int)const::empty_activity_id_set,
        &_dso_handle);
    }
    result = &NewActivityExcelConfigMgr::getGroupConfigRelatedActivityIds(unsigned int,unsigned int)const::empty_activity_id_set;
  }
  else
  {
    result = &std::_Rb_tree_const_iterator<std::pair<std::pair const<unsigned int,unsigned int>,std::unordered_set<unsigned int>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int> > > *const)(v3 + 64))->second;
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 632: range 0000000013556932-0000000013556BBE
std::set<unsigned int> *__fastcall NewActivityExcelConfigMgr::getActivityCreateNpcRelatedGroups(
        std::set<unsigned int> *retstr,
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_activity_create_npc_group_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v9; // rax
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 15 activity_id:631 64 8 8 iter:633 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::getActivityCreateNpcRelatedGroups;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = activity_id;
  p_activity_create_npc_group_map = &this->activity_create_npc_group_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, this);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_activity_create_npc_group_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
  v7 = &this->activity_create_npc_group_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(retstr, 48LL);
    }
    *(_QWORD *)retstr->_M_t._M_impl.gap0 = 0LL;
    *(_QWORD *)&retstr->_M_t._M_impl._M_header._M_color = 0LL;
    retstr->_M_t._M_impl._M_header._M_parent = 0LL;
    retstr->_M_t._M_impl._M_header._M_left = 0LL;
    retstr->_M_t._M_impl._M_header._M_right = 0LL;
    retstr->_M_t._M_impl._M_node_count = 0LL;
    std::set<unsigned int>::set(retstr);
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64));
    std::set<unsigned int>::set(retstr, &v9->second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 643: range 0000000013556BC0-0000000013556C91
bool __fastcall NewActivityExcelConfigMgr::isScheduleCondQuestId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 quest_id:642";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::isScheduleCondQuestId;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = quest_id;
  result = common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
             &this->schedule_cond_finish_quest_set,
             (const unsigned int *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 648: range 0000000013556C92-0000000013556D63
bool __fastcall NewActivityExcelConfigMgr::isActivityCondItemId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t item_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 11 item_id:647";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::isActivityCondItemId;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = item_id;
  result = common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
             &this->activity_cond_item_set,
             (const unsigned int *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 653: range 0000000013556D64-0000000013556E35
bool __fastcall NewActivityExcelConfigMgr::isActivityCondOfferingId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t offering_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 offering_id:652";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::isActivityCondOfferingId;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = offering_id;
  result = common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
             &this->activity_cond_offering_id_set,
             (const unsigned int *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 659: range 0000000013556E36-0000000013557648
int32_t __cdecl NewActivityExcelConfigMgr::rewriteActivityItemLimitType(NewActivityExcelConfigMgr *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const data::NewActivityType *v5; // r8
  data::ItemLimitType *p_reward_item_limit_type; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<const data::ItemLimitType,data::NewActivityType>,false,false>,bool> v7; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  std::pair<std::__detail::_Node_iterator<std::pair<const data::ItemLimitType,data::NewActivityType>,false,false>,bool> v13; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  std::pair<std::__detail::_Node_iterator<std::pair<const data::ItemLimitType,data::NewActivityType>,false,false>,bool> v19; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-164h]
  data::NewActivityItemLimitExcelConfigMap *__for_range; // [rsp+20h] [rbp-160h]
  std::__detail::_Node_iterator<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false,false>::reference v28; // [rsp+28h] [rbp-158h]
  std::tuple_element<0,std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig> >::type *activity_type; // [rsp+30h] [rbp-150h]
  std::tuple_element<1,const std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig> >::type *activity_item_limit_config; // [rsp+38h] [rbp-148h]
  char v31[320]; // [rsp+40h] [rbp-140h] BYREF

  v2 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 15 __for_begin:661 64 8 13 __for_end:661 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::rewriteActivityItemLimitType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -202116109;
  ret = 0;
  __for_range = &this->new_activity_item_limit_excel_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::iterator *)(v2 + 32) = std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::iterator *)(v2 + 64) = std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<data::NewActivityType const,data::NewActivityItemLimitExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false> *)(v2 + 64)) )
  {
    v28 = std::__detail::_Node_iterator<std::pair<data::NewActivityType const,data::NewActivityItemLimitExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false,false> *const)(v2 + 32));
    activity_type = std::get<0ul,data::NewActivityType const,data::NewActivityItemLimitExcelConfig>(v28);
    activity_item_limit_config = (std::tuple_element<1,const std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig> >::type *)std::get<1ul,data::NewActivityType const,data::NewActivityItemLimitExcelConfig>(v28);
    p_reward_item_limit_type = &activity_item_limit_config->reward_item_limit_type;
    if ( *(_BYTE *)(((unsigned __int64)p_reward_item_limit_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_reward_item_limit_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_reward_item_limit_type >> 3)
                                                                                 + 0x7FFF8000) )
    {
      __asan_report_load4(p_reward_item_limit_type);
    }
    if ( activity_item_limit_config->reward_item_limit_type )
    {
      v7 = std::unordered_map<data::ItemLimitType,data::NewActivityType>::emplace<data::ItemLimitType const&,data::NewActivityType const&>(
             &this->item_limit_activity_type_map,
             &activity_item_limit_config->reward_item_limit_type,
             activity_type,
             (const data::ItemLimitType *)&this->item_limit_activity_type_map,
             v5);
      if ( !v7.second )
      {
        *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 96, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 96),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteActivityItemLimitType",
          666);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 96),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v10 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v9,
                (const char (*)[36])"duplicate activity_item_limit_type:");
        v11 = common::milog::MiLogStream::operator<<<data::ItemLimitType,(data::ItemLimitType*)0>(
                v10,
                &activity_item_limit_config->reward_item_limit_type);
        v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v11,
                (const char (*)[16])" activity_type:");
        common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(v12, activity_type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
        *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&activity_item_limit_config->drop_item_limit_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&activity_item_limit_config->drop_item_limit_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&activity_item_limit_config->drop_item_limit_type);
    }
    if ( activity_item_limit_config->drop_item_limit_type )
    {
      v13 = std::unordered_map<data::ItemLimitType,data::NewActivityType>::emplace<data::ItemLimitType const&,data::NewActivityType const&>(
              &this->item_limit_activity_type_map,
              &activity_item_limit_config->drop_item_limit_type,
              activity_type,
              (const data::ItemLimitType *)&this->item_limit_activity_type_map,
              v5);
      if ( !v13.second )
      {
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 160, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 160),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteActivityItemLimitType",
          672);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 160),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v15,
                (const char (*)[36])"duplicate activity_item_limit_type:");
        v17 = common::milog::MiLogStream::operator<<<data::ItemLimitType,(data::ItemLimitType*)0>(
                v16,
                &activity_item_limit_config->drop_item_limit_type);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v17,
                (const char (*)[16])" activity_type:");
        common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(v18, activity_type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&activity_item_limit_config->avatar_limit_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)activity_item_limit_config + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&activity_item_limit_config->avatar_limit_type >> 3)
                                                                                + 0x7FFF8000) )
    {
      __asan_report_load4(&activity_item_limit_config->avatar_limit_type);
    }
    if ( activity_item_limit_config->avatar_limit_type )
    {
      v19 = std::unordered_map<data::ItemLimitType,data::NewActivityType>::emplace<data::ItemLimitType const&,data::NewActivityType const&>(
              &this->item_limit_activity_type_map,
              &activity_item_limit_config->avatar_limit_type,
              activity_type,
              (const data::ItemLimitType *)&this->item_limit_activity_type_map,
              v5);
      if ( !v19.second )
      {
        *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteActivityItemLimitType",
          678);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v21,
                (const char (*)[36])"duplicate activity_item_limit_type:");
        v23 = common::milog::MiLogStream::operator<<<data::ItemLimitType,(data::ItemLimitType*)0>(
                v22,
                &activity_item_limit_config->avatar_limit_type);
        v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v23,
                (const char (*)[16])" activity_type:");
        common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(v24, activity_type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
        *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
    }
    std::__detail::_Node_iterator<std::pair<data::NewActivityType const,data::NewActivityItemLimitExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v31 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 687: range 000000001355764A-00000000135582F5
int32_t __cdecl NewActivityExcelConfigMgr::checkActivityItemLimitType(NewActivityExcelConfigMgr *const this)
{
  __int64 v1; // rsi
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // r14
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  const std::map<data::NewActivityType,std::pair<std::string,std::string >> *v11; // rsi
  common::milog::MiLogStream *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  const std::map<data::NewActivityType,std::pair<std::string,std::string >> *v15; // rdx
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  __int64 v20; // rsi
  __int64 v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int v24; // eax
  int32_t result; // eax
  const std::map<data::NewActivityType,std::pair<std::string,std::string >> *__for_range; // [rsp+10h] [rbp-2D0h]
  data::NewActivityItemLimitExcelConfigMap *__for_range_0; // [rsp+18h] [rbp-2C8h]
  std::__detail::_Node_iterator<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false,false>::reference v28; // [rsp+20h] [rbp-2C0h]
  std::tuple_element<0,std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig> >::type *activity_type_0; // [rsp+28h] [rbp-2B8h]
  std::tuple_element<1,const std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig> >::type *config; // [rsp+30h] [rbp-2B0h]
  std::_Rb_tree_const_iterator<std::pair<const data::NewActivityType,std::pair<std::string,std::string > > >::reference v31; // [rsp+38h] [rbp-2A8h]
  std::tuple_element<0,std::pair<const data::NewActivityType,std::pair<std::string,std::string > > >::type *activity_type; // [rsp+40h] [rbp-2A0h]
  char v33[656]; // [rsp+50h] [rbp-290h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 32 8 15 __for_begin:688 64 8 13 __for_end:688 96 8 15 __for_begin:701 128 8 13 __for_end:701 "
                        "160 8 9 <unknown> 192 16 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 41"
                        "6 64 9 <unknown> 512 64 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkActivityItemLimitType;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -219021312;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -218959118;
  v5[536862735] = -218959118;
  v5[536862738] = -202116109;
  __for_range = data::getNewActivityTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, v1);
  *(std::map<data::NewActivityType,std::pair<std::string,std::string >>::const_iterator *)(v3 + 32) = std::map<data::NewActivityType,std::pair<std::string,std::string>>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, v1);
  *(std::map<data::NewActivityType,std::pair<std::string,std::string >>::const_iterator *)(v3 + 64) = std::map<data::NewActivityType,std::pair<std::string,std::string>>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 64);
    if ( !std::operator!=(
            (const std::_Rb_tree_const_iterator<std::pair<const data::NewActivityType,std::pair<std::string,std::string > > >::_Self *)(v3 + 32),
            (const std::_Rb_tree_const_iterator<std::pair<const data::NewActivityType,std::pair<std::string,std::string > > >::_Self *)(v3 + 64)) )
      break;
    v31 = std::_Rb_tree_const_iterator<std::pair<data::NewActivityType const,std::pair<std::string,std::string>>>::operator*((const std::_Rb_tree_const_iterator<std::pair<const data::NewActivityType,std::pair<std::string,std::string > > > *const)(v3 + 32));
    activity_type = std::get<0ul,data::NewActivityType const,std::pair<std::string,std::string>>(v31);
    std::get<1ul,data::NewActivityType const,std::pair<std::string,std::string>>(v31);
    if ( *(_BYTE *)(((unsigned __int64)activity_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)activity_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)activity_type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(activity_type);
    }
    if ( *activity_type
      && !common::tools::MiscUtils::isContains<std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>,data::NewActivityType>(
            &this->new_activity_item_limit_excel_config_map,
            activity_type) )
    {
      *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkActivityItemLimitType",
        696);
      v7 = common::milog::MiLogStream::operator<<<char [77],(char *[77])0>(
             (common::milog::MiLogStream *const)(v3 + 224),
             (const char (*)[77])"check NewActivityItemLimitData.txt fail! Config not found for activity_type:");
      v8 = common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(v7, activity_type);
      v9 = (_DWORD *)(((v3 + 512) >> 3) + 2147450880);
      *v9 = 0;
      v9[1] = 0;
      v10 = (_DWORD *)(((v3 + 416) >> 3) + 2147450880);
      *v10 = 0;
      v10[1] = 0;
      *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      *(std::pair<char const*,char const*> *)(v3 + 192) = std::make_pair<char const(&)[1],char const(&)[1]>(
                                                            (const char (*)[1])byte_1AB07460,
                                                            (const char (*)[1])byte_1AB07460);
      std::pair<std::string,std::string>::pair<char const*,char const*,true>(
        (std::pair<std::string,std::string > *const)(v3 + 416),
        (std::pair<char const*,char const*> *)(v3 + 192));
      v11 = data::getNewActivityTypeEnumMap[abi:cxx11]();
      if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
      {
        v11 = (const std::map<data::NewActivityType,std::pair<std::string,std::string >> *)64;
        __asan_report_store_n(v3 + 512, 64LL);
      }
      common::tools::MiscUtils::findMapWithDefaultValue<std::map<data::NewActivityType,std::pair<std::string,std::string>>>(
        (std::map<data::NewActivityType,std::pair<std::string,std::string >>::mapped_type *)(v3 + 512),
        v11,
        activity_type,
        (std::map<data::NewActivityType,std::pair<std::string,std::string >>::mapped_type *)(v3 + 416));
      v12 = common::milog::MiLogStream::operator<<<std::string,std::string>(
              v8,
              (const std::pair<std::string,std::string > *)(v3 + 512));
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v12, (const char (*)[32])byte_1AB792E0);
      std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v3 + 512));
      v13 = (_DWORD *)(((v3 + 512) >> 3) + 2147450880);
      *v13 = -117901064;
      v13[1] = -117901064;
      std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v3 + 416));
      v14 = (_DWORD *)(((v3 + 416) >> 3) + 2147450880);
      *v14 = -117901064;
      v14[1] = -117901064;
      *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -1800;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
      *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -117901064;
    }
    std::_Rb_tree_const_iterator<std::pair<data::NewActivityType const,std::pair<std::string,std::string>>>::operator++((std::_Rb_tree_const_iterator<std::pair<const data::NewActivityType,std::pair<std::string,std::string > > > *const)(v3 + 32));
  }
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  __for_range_0 = &this->new_activity_item_limit_excel_config_map;
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v6);
  *(std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::iterator *)(v3 + 96) = std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::begin(__for_range_0);
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, v6);
  *(std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::iterator *)(v3 + 128) = std::unordered_map<data::NewActivityType,data::NewActivityItemLimitExcelConfig>::end(__for_range_0);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<data::NewActivityType const,data::NewActivityItemLimitExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false> *)(v3 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false> *)(v3 + 128)) )
    {
      v24 = 1;
      goto LABEL_51;
    }
    v28 = std::__detail::_Node_iterator<std::pair<data::NewActivityType const,data::NewActivityItemLimitExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false,false> *const)(v3 + 96));
    activity_type_0 = std::get<0ul,data::NewActivityType const,data::NewActivityItemLimitExcelConfig>(v28);
    config = (std::tuple_element<1,const std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig> >::type *)std::get<1ul,data::NewActivityType const,data::NewActivityItemLimitExcelConfig>(v28);
    v15 = data::getNewActivityTypeEnumMap[abi:cxx11]();
    if ( !common::tools::MiscUtils::isContains<std::map<data::NewActivityType,std::pair<std::string,std::string>> const,data::NewActivityType>(
            v15,
            activity_type_0) )
    {
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkActivityItemLimitType",
        705);
      v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
              (common::milog::MiLogStream *const)(v3 + 288),
              (const char (*)[15])"activity_type:");
      v17 = common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(
              v16,
              activity_type_0);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        v17,
        (const char (*)[30])" not found in enum defination");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
    }
    if ( *(_BYTE *)(((unsigned __int64)&config->reward_item_limit_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->reward_item_limit_type >> 3)
                                                            + 0x7FFF8000) )
    {
      __asan_report_load4(&config->reward_item_limit_type);
    }
    if ( config->reward_item_limit_type )
      goto LABEL_58;
    if ( *(_BYTE *)(((unsigned __int64)&config->drop_item_limit_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config->drop_item_limit_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config->drop_item_limit_type);
    }
    if ( config->drop_item_limit_type )
      goto LABEL_58;
    if ( *(_BYTE *)(((unsigned __int64)&config->avatar_limit_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->avatar_limit_type >> 3)
                                                            + 0x7FFF8000) )
    {
      __asan_report_load4(&config->avatar_limit_type);
    }
    if ( config->avatar_limit_type )
    {
LABEL_58:
      if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,data::NewActivityType>(
             &this->allow_overlap_activity_set,
             activity_type_0) )
      {
        break;
      }
    }
    std::__detail::_Node_iterator<std::pair<data::NewActivityType const,data::NewActivityItemLimitExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<const data::NewActivityType,data::NewActivityItemLimitExcelConfig>,false,false> *const)(v3 + 96));
  }
  *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 352) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 352, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 352),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "checkActivityItemLimitType",
    713);
  v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 352),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v18, (const char (*)[15])"activity_type:");
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
  v20 = ((unsigned __int8)activity_type_0 & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)activity_type_0 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)activity_type_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)activity_type_0 >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(activity_type_0);
  }
  v21 = (__int64)data::enumValToStr(*activity_type_0, v20);
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    v21 = __asan_report_store8(v3 + 160, v20);
  *(_QWORD *)(v3 + 160) = v21;
  v22 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v19, (const char *const *)(v3 + 160));
  v23 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v22,
          (const char (*)[22])" has item_limit_type,");
  common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
    v23,
    (const char (*)[32])" but is also allowed to overlap");
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 352));
  v2 = -1;
  v24 = 0;
LABEL_51:
  if ( v24 == 1 )
    v2 = 0;
  result = v2;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 723: range 00000000135582F6-00000000135598A9
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityDropExcelConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  unsigned __int64 v6; // rax
  char *v7; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v8; // rax
  int *v9; // rdx
  int v10; // ecx
  char v11; // al
  uint32_t activity_id; // ecx
  char v13; // al
  char *v14; // rsi
  unsigned __int64 v15; // rax
  int subject_type; // eax
  unsigned int *v17; // r8
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  unsigned int StringHash; // eax
  std::string *v23; // r8
  __int64 v24; // rsi
  int v25; // ecx
  char v26; // al
  std::unordered_map<unsigned int,std::string> *p_tag_hash_map; // rcx
  std::string *p_drop_param; // rdx
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>,bool> >::type *v29; // rax
  __int64 v30; // rsi
  __int64 v31; // rdx
  std::unordered_map<unsigned int,std::string> *v32; // rdx
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>::pointer v33; // rax
  char v34; // dl
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>::pointer v40; // rax
  int v41; // edx
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  unsigned __int64 v46; // rax
  std::vector<std::pair<unsigned int,unsigned int>>::iterator v47; // rax
  unsigned __int64 v48; // rax
  unsigned __int64 v49; // rax
  unsigned __int64 v50; // rax
  char __last; // [rsp+18h] [rbp-438h]
  common::milog::MiLogStream *__lasta; // [rsp+18h] [rbp-438h]
  std::pair<unsigned int,unsigned int> *__lastb; // [rsp+18h] [rbp-438h]
  std::pair<unsigned int,unsigned int> *__lastc; // [rsp+18h] [rbp-438h]
  int32_t ret; // [rsp+3Ch] [rbp-414h]
  data::NewActivityDropExcelConfigVec *__for_range; // [rsp+40h] [rbp-410h]
  data::NewActivityDropExcelConfig *excel_config; // [rsp+48h] [rbp-408h]
  std::vector<unsigned int> *__for_range_0; // [rsp+50h] [rbp-400h]
  std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::mapped_type *root_node_ptr; // [rsp+58h] [rbp-3F8h]
  std::vector<data::NewActivityDropSubjectConfig> *__for_range_1; // [rsp+60h] [rbp-3F0h]
  data::NewActivityDropSubjectConfig *subject_config; // [rsp+68h] [rbp-3E8h]
  std::tuple_element<0,std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>,bool> >::type *iter; // [rsp+70h] [rbp-3E0h]
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>,bool> >::type *succ; // [rsp+78h] [rbp-3D8h]
  char v65[976]; // [rsp+80h] [rbp-3D0h] BYREF

  v2 = (unsigned __int64)v65;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(928LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "23 48 1 9 <unknown> 64 1 9 <unknown> 80 4 11 cond_id:728 96 4 15 activity_id:732 112 4 15 subjec"
                        "t_key:746 128 4 14 hash_value:765 144 8 15 __for_begin:725 176 8 13 __for_end:725 208 8 15 __for"
                        "_begin:728 240 8 13 __for_end:728 272 8 15 __for_begin:740 304 8 13 __for_end:740 336 8 9 <unkno"
                        "wn> 368 8 9 <unknown> 400 16 9 <unknown> 432 16 9 <unknown> 464 16 9 <unknown> 496 24 20 drop_su"
                        "bject_vec:739 560 32 9 <unknown> 624 32 9 <unknown> 688 32 9 <unknown> 752 48 18 level_drop_map:"
                        "787 832 56 12 cond_set:727";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityDropExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = 61956;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862729] = -234881024;
  v4[536862730] = 62194;
  v4[536862730] = -234881024;
  v4[536862731] = 62194;
  v4[536862731] = -234881024;
  v4[536862732] = 62194;
  v4[536862733] = 62194;
  v4[536862734] = 62194;
  v4[536862735] = 62194;
  v4[536862736] = -218959360;
  v4[536862737] = 62194;
  v4[536862738] = -219021312;
  v4[536862739] = 62194;
  v4[536862740] = -219021312;
  v4[536862741] = 62194;
  v4[536862742] = -219021312;
  v4[536862743] = 62194;
  v4[536862745] = -218959118;
  v4[536862747] = -218103808;
  v4[536862748] = -202116109;
  ret = 0;
  __for_range = &this->new_activity_drop_excel_config_vec;
  if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 144, txt_config_mgr);
  *(std::vector<data::NewActivityDropExcelConfig>::iterator *)(v2 + 144) = std::vector<data::NewActivityDropExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 176, txt_config_mgr);
  *(std::vector<data::NewActivityDropExcelConfig>::iterator *)(v2 + 176) = std::vector<data::NewActivityDropExcelConfig>::end(__for_range);
LABEL_9:
  v5 = (char *)(v2 + 176);
  if ( __gnu_cxx::operator!=<data::NewActivityDropExcelConfig *,std::vector<data::NewActivityDropExcelConfig>>(
         (const __gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *)(v2 + 144),
         (const __gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *)(v2 + 176)) )
  {
    excel_config = __gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig *,std::vector<data::NewActivityDropExcelConfig>>::operator*((const __gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *const)(v2 + 144));
    v6 = ((v2 + 832) >> 3) + 2147450880;
    *(_DWORD *)v6 = 0;
    *(_WORD *)(v6 + 4) = 0;
    *(_BYTE *)(v6 + 6) = 0;
    std::unordered_set<unsigned int>::unordered_set((std::unordered_set<unsigned int> *const)(v2 + 832));
    __for_range_0 = &excel_config->cond_id;
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, v5);
    *(std::vector<unsigned int>::iterator *)(v2 + 208) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, v5);
    *(std::vector<unsigned int>::iterator *)(v2 + 240) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v7 = (char *)(v2 + 240);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 208),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 240)) )
        break;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 4;
      v8 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 208));
      v9 = (int *)v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      v10 = *v9;
      v11 = *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000);
      if ( v11 != 0 && v11 <= 3 )
      {
        LOBYTE(v7) = v11 != 0;
        __asan_report_store4(v2 + 80, v7);
      }
      *(_DWORD *)(v2 + 80) = v10;
      std::unordered_set<unsigned int>::insert(
        (std::unordered_set<unsigned int> *const)(v2 + 832),
        (const std::unordered_set<unsigned int>::value_type *)(v2 + 80));
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 208));
    }
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&excel_config->activity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&excel_config->activity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&excel_config->activity_id);
    }
    activity_id = excel_config->activity_id;
    v13 = *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      LOBYTE(v7) = v13 != 0;
      __asan_report_store4(v2 + 96, v7);
    }
    *(_DWORD *)(v2 + 96) = activity_id;
    root_node_ptr = std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::operator[](
                      &this->activity_drop_subject_map,
                      (const std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::key_type *)(v2 + 96));
    v14 = 0LL;
    if ( std::operator==<ActivityDropIndexNode>(root_node_ptr, 0LL) )
    {
      *(_WORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 400) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<ActivityDropIndexNode>();
      v14 = (char *)(v2 + 400);
      std::shared_ptr<ActivityDropIndexNode>::operator=(
        root_node_ptr,
        (std::shared_ptr<ActivityDropIndexNode> *)(v2 + 400));
      std::shared_ptr<ActivityDropIndexNode>::~shared_ptr((std::shared_ptr<ActivityDropIndexNode> *const)(v2 + 400));
      *(_WORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = -1800;
    }
    v15 = ((v2 + 496) >> 3) + 2147450880;
    *(_WORD *)v15 = 0;
    *(_BYTE *)(v15 + 2) = 0;
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 496));
    __for_range_1 = &excel_config->activity_drop_subject;
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 272, v14);
    *(std::vector<data::NewActivityDropSubjectConfig>::iterator *)(v2 + 272) = std::vector<data::NewActivityDropSubjectConfig>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 304, v14);
    *(std::vector<data::NewActivityDropSubjectConfig>::iterator *)(v2 + 304) = std::vector<data::NewActivityDropSubjectConfig>::end(__for_range_1);
    while ( 1 )
    {
      if ( !__gnu_cxx::operator!=<data::NewActivityDropSubjectConfig *,std::vector<data::NewActivityDropSubjectConfig>>(
              (const __gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *)(v2 + 272),
              (const __gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *)(v2 + 304)) )
      {
        *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
        if ( !std::vector<std::pair<unsigned int,unsigned int>>::empty((const std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 496)) )
        {
          v46 = ((v2 + 752) >> 3) + 2147450880;
          *(_DWORD *)v46 = 0;
          *(_WORD *)(v46 + 4) = 0;
          *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
          std::pair<unsigned int const,unsigned int>::pair<unsigned int &,unsigned int &,true>(
            (std::pair<unsigned int const,unsigned int> *const)(v2 + 368),
            &excel_config->min_level,
            &excel_config->drop_id);
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
          std::allocator<std::pair<unsigned int const,unsigned int>>::allocator((std::allocator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
          std::map<unsigned int,unsigned int>::map(
            (std::map<unsigned int,unsigned int> *const)(v2 + 752),
            (std::initializer_list<std::pair<unsigned int const,unsigned int> >)__PAIR128__(1LL, v2 + 368),
            (const std::less<unsigned int> *)(v2 + 48),
            (const std::map<unsigned int,unsigned int>::allocator_type *)(v2 + 64));
          std::allocator<std::pair<unsigned int const,unsigned int>>::~allocator((std::allocator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
          *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
          __lastb = std::vector<std::pair<unsigned int,unsigned int>>::end((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 496))._M_current;
          v47._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 496))._M_current;
          std::sort<__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>>(
            v47,
            (__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >)__lastb);
          __lastc = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 496))._M_current;
          *(_WORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
          std::shared_ptr<ActivityDropIndexNode>::shared_ptr(
            (std::shared_ptr<ActivityDropIndexNode> *const)(v2 + 464),
            root_node_ptr);
          insertDropSubjectTree(
            (std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *)(v2 + 464),
            (const std::unordered_set<unsigned int> *)(v2 + 832),
            (const std::vector<std::pair<unsigned int,unsigned int>> *)(v2 + 496),
            (std::vector<std::pair<unsigned int,unsigned int>>::iterator)__lastc,
            (const LevelDropMap *)(v2 + 752));
          std::shared_ptr<ActivityDropIndexNode>::~shared_ptr((std::shared_ptr<ActivityDropIndexNode> *const)(v2 + 464));
          *(_WORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -1800;
          std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v2 + 752));
        }
        std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 496));
        std::unordered_set<unsigned int>::~unordered_set((std::unordered_set<unsigned int> *const)(v2 + 832));
        v48 = ((v2 + 832) >> 3) + 2147450880;
        *(_DWORD *)v48 = -117901064;
        *(_WORD *)(v48 + 4) = -1800;
        *(_BYTE *)(v48 + 6) = -8;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        v49 = ((v2 + 496) >> 3) + 2147450880;
        *(_WORD *)v49 = -1800;
        *(_BYTE *)(v49 + 2) = -8;
        v50 = ((v2 + 752) >> 3) + 2147450880;
        *(_DWORD *)v50 = -117901064;
        *(_WORD *)(v50 + 4) = -1800;
        __gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig *,std::vector<data::NewActivityDropExcelConfig>>::operator++((__gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *const)(v2 + 144));
        goto LABEL_9;
      }
      subject_config = __gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig *,std::vector<data::NewActivityDropSubjectConfig>>::operator*((const __gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *const)(v2 + 272));
      if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&subject_config->subject_type);
      }
      if ( subject_config->subject_type )
      {
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 112, v2 + 304);
        *(_DWORD *)(v2 + 112) = 0;
        if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&subject_config->subject_type);
        }
        subject_type = subject_config->subject_type;
        if ( subject_type > 6 )
        {
LABEL_76:
          *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 688) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 719) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 688, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 688),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteNewActivityDropExcelConfig",
            777);
          v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 688),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v43 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v42, (const char (*)[13])"ActivityId: ");
          v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v43,
                  (const unsigned int *)(v2 + 96));
          v45 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v44, (const char (*)[29])byte_1AB79740);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v45, &subject_config->drop_param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 688));
          *(_DWORD *)(((v2 + 688) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
          goto LABEL_80;
        }
        if ( subject_type >= 4 || subject_type == 1 )
        {
          if ( !common::tools::StringUtils::strToNum<unsigned int>(
                  &subject_config->drop_param,
                  (unsigned int *)(v2 + 112),
                  1) )
            goto LABEL_79;
          *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 560) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 560, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 560),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteNewActivityDropExcelConfig",
            756);
          v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 560),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])"ActivityId: ");
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v2 + 96));
          v21 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v20, (const char (*)[17])byte_1AB796C0);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, &subject_config->drop_param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 560));
          *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        else
        {
          if ( subject_type <= 0 || (unsigned int)(subject_type - 2) > 1 )
            goto LABEL_76;
          *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 4;
          StringHash = getStringHash(&subject_config->drop_param);
          v24 = StringHash;
          if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 128, StringHash);
          *(_DWORD *)(v2 + 128) = v24;
          v25 = *(_DWORD *)(v2 + 128);
          v26 = *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000);
          if ( v26 != 0 && v26 <= 3 )
          {
            LOBYTE(v24) = v26 != 0;
            __asan_report_store4(v2 + 112, v24);
          }
          *(_DWORD *)(v2 + 112) = v25;
          *(_WORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
          p_tag_hash_map = &this->tag_hash_map;
          p_drop_param = &subject_config->drop_param;
          if ( *(_WORD *)(((v2 + 432) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          *(std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>,bool> *)(v2 + 432) = std::unordered_map<unsigned int,std::string>::emplace<unsigned int &,std::string&>(p_tag_hash_map, (unsigned int *)(v2 + 128), p_drop_param, (unsigned int *)p_tag_hash_map, v23);
          iter = std::get<0ul,std::__detail::_Node_iterator<std::pair<unsigned int const,std::string>,false,false>,bool>((std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>,bool> *)(v2 + 432));
          v29 = std::get<1ul,std::__detail::_Node_iterator<std::pair<unsigned int const,std::string>,false,false>,bool>((std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::string >,false,false>,bool> *)(v2 + 432));
          succ = v29;
          __last = 0;
          v30 = (unsigned __int8)v29 & 7;
          v31 = (*(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v30 >= *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000));
          if ( (_BYTE)v31 )
            __asan_report_load1(v29, v30, v31);
          if ( *succ )
            goto LABEL_66;
          *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
          v32 = &this->tag_hash_map;
          if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 336, v30);
          *(std::unordered_map<unsigned int,std::string>::iterator *)(v2 + 336) = std::unordered_map<unsigned int,std::string>::end(v32);
          __last = 1;
          if ( std::__detail::operator!=<std::pair<unsigned int const,std::string>,false>(
                 iter,
                 (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::string >,false> *)(v2 + 336))
            && (v33 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::string>,false,false>::operator->(iter),
                std::operator!=<char>(&v33->second, &subject_config->drop_param)) )
          {
            v34 = 1;
          }
          else
          {
LABEL_66:
            v34 = 0;
          }
          if ( __last )
            *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
          if ( v34 )
          {
            *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 624) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 655) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 624, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 624),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityDropExcelConfig",
              770);
            v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 624),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v36 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v35,
                    (const char (*)[13])"ActivityId: ");
            v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v36,
                    (const unsigned int *)(v2 + 96));
            v38 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    v37,
                    (const char (*)[23])byte_1AB79700);
            v39 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v38, &subject_config->drop_param);
            __lasta = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v39, (const char (*)[2])" ");
            v40 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::string>,false,false>::operator->(iter);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(__lasta, &v40->second);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 624));
            *(_DWORD *)(((v2 + 624) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
            v41 = 0;
          }
          else
          {
            v41 = 1;
          }
          *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = -1800;
          if ( v41 )
LABEL_79:
            std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<data::NewActivityDropType &,unsigned int &>(
              (std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 496),
              &subject_config->subject_type,
              (unsigned int *)(v2 + 112),
              &subject_config->subject_type,
              v17);
        }
      }
LABEL_80:
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      __gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig *,std::vector<data::NewActivityDropSubjectConfig>>::operator++((__gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *const)(v2 + 272));
    }
  }
  if ( v65 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 116) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8070) = -168430091;
  }
  return ret;
};

// Line 795: range 0000000013559B16-000000001355BBEF
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const NewActivityExcelConfigMgr *v6; // rdx
  __int64 activity_id; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  _BOOL4 v10; // edx
  unsigned __int64 v11; // rax
  unsigned int *v12; // r8
  int v13; // eax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  MonsterExcelConfigMgr *p_monster_config_mgr; // rcx
  int v17; // eax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  __int64 v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  __int64 StringHash; // rsi
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  __int64 v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // r14
  uint32_t v33; // esi
  __int64 v34; // rsi
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // r14
  __int64 v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // r14
  uint32_t v42; // esi
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  GatherExcelConfigMgr *p_gather_config_mgr; // rcx
  int v46; // eax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // r14
  __int64 v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  int v57; // eax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // r14
  __int64 v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  int v69; // edx
  data::NewActivityType ActivitiyTypeByActivityId; // edx
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  unsigned __int64 v79; // rax
  int v80; // eax
  int v82; // [rsp+Ch] [rbp-574h]
  int32_t ret; // [rsp+28h] [rbp-558h]
  data::ItemLimitType item_limit_type; // [rsp+2Ch] [rbp-554h]
  data::NewActivityDropExcelConfigVec *__for_range; // [rsp+30h] [rbp-550h]
  const data::NewActivityDropExcelConfig *drop_config; // [rsp+38h] [rbp-548h]
  const std::vector<data::NewActivityDropSubjectConfig> *__for_range_0; // [rsp+40h] [rbp-540h]
  const data::NewActivityDropSubjectConfig *subject_config; // [rsp+48h] [rbp-538h]
  char v90[1328]; // [rsp+50h] [rbp-530h] BYREF

  v3 = (unsigned __int64)v90;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1280LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "25 48 4 15 subject_key:821 64 8 17 find_hash_str:796 96 8 15 __for_begin:807 128 8 13 __for_end:"
                        "807 160 8 15 __for_begin:815 192 8 13 __for_end:815 224 8 9 <unknown> 256 8 9 <unknown> 288 8 9 "
                        "<unknown> 320 8 9 <unknown> 352 8 9 <unknown> 384 24 15 subject_vec:814 448 32 9 <unknown> 512 3"
                        "2 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32"
                        " 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 "
                        "32 9 <unknown> 1216 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -218959360;
  v5[536862732] = -234881024;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -218959118;
  v5[536862743] = -218959118;
  v5[536862745] = -218959118;
  v5[536862747] = -218959118;
  v5[536862749] = -218959118;
  v5[536862751] = -218959118;
  v5[536862753] = -218959118;
  v5[536862755] = -218959118;
  v5[536862757] = -218959118;
  v5[536862759] = -202116109;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(_QWORD *)(v3 + 64) = this;
  ret = 0;
  __for_range = &this->new_activity_drop_excel_config_vec;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, txt_config_mgr);
  *(std::vector<data::NewActivityDropExcelConfig>::const_iterator *)(v3 + 96) = std::vector<data::NewActivityDropExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, txt_config_mgr);
  *(std::vector<data::NewActivityDropExcelConfig>::const_iterator *)(v3 + 128) = std::vector<data::NewActivityDropExcelConfig>::end(__for_range);
  while ( __gnu_cxx::operator!=<data::NewActivityDropExcelConfig const*,std::vector<data::NewActivityDropExcelConfig>>(
            (const __gnu_cxx::__normal_iterator<const data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *)(v3 + 96),
            (const __gnu_cxx::__normal_iterator<const data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *)(v3 + 128)) )
  {
    drop_config = __gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig const*,std::vector<data::NewActivityDropExcelConfig>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *const)(v3 + 96));
    v6 = this;
    if ( *(_BYTE *)(((unsigned __int64)&drop_config->activity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&drop_config->activity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&drop_config->activity_id);
    }
    activity_id = drop_config->activity_id;
    if ( data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v6, activity_id) )
    {
      v11 = ((v3 + 384) >> 3) + 2147450880;
      *(_WORD *)v11 = 0;
      *(_BYTE *)(v11 + 2) = 0;
      std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 384));
      __for_range_0 = &drop_config->activity_drop_subject;
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 160, activity_id);
      *(std::vector<data::NewActivityDropSubjectConfig>::const_iterator *)(v3 + 160) = std::vector<data::NewActivityDropSubjectConfig>::begin(__for_range_0);
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 192, activity_id);
      *(std::vector<data::NewActivityDropSubjectConfig>::const_iterator *)(v3 + 192) = std::vector<data::NewActivityDropSubjectConfig>::end(__for_range_0);
      while ( __gnu_cxx::operator!=<data::NewActivityDropSubjectConfig const*,std::vector<data::NewActivityDropSubjectConfig>>(
                (const __gnu_cxx::__normal_iterator<const data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *)(v3 + 160),
                (const __gnu_cxx::__normal_iterator<const data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *)(v3 + 192)) )
      {
        subject_config = __gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig const*,std::vector<data::NewActivityDropSubjectConfig>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *const)(v3 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&subject_config->subject_type);
        }
        if ( subject_config->subject_type )
        {
          *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 48, v3 + 192);
          *(_DWORD *)(v3 + 48) = 0;
          if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&subject_config->subject_type);
          }
          switch ( subject_config->subject_type )
          {
            case NEW_ACTIVITY_DROP_TYPE_MONSTER_ID:
              if ( common::tools::StringUtils::strToNum<unsigned int>(
                     &subject_config->drop_param,
                     (unsigned int *)(v3 + 48),
                     1) )
              {
                *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 512, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 512),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityDropExcelConfig",
                  828);
                v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 512),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v15 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v14,
                        (const char (*)[17])byte_1AB796C0);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, &subject_config->drop_param);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
                *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v13 = 1;
              }
              else
              {
                p_monster_config_mgr = &txt_config_mgr->monster_config_mgr;
                v17 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
                if ( (_BYTE)v17 != 0 && (char)v17 <= 3 )
                  __asan_report_load4(v3 + 48);
                if ( data::MonsterExcelConfigMgrBase::findMonsterExcelConfig(
                       p_monster_config_mgr,
                       *(unsigned int *)(v3 + 48)) )
                {
                  goto LABEL_106;
                }
                *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 576, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 576),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityDropExcelConfig",
                  833);
                v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 576),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                        v18,
                        (const char (*)[13])"ActivityId: ");
                v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v19,
                        &drop_config->activity_id);
                v21 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                        v20,
                        (const char (*)[23])byte_1AB79A80);
                *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&subject_config->subject_type);
                }
                v22 = (__int64)data::enumValToStr(subject_config->subject_type, (__int64)byte_1AB79A80);
                if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
                  v22 = __asan_report_store8(v3 + 224, byte_1AB79A80);
                *(_QWORD *)(v3 + 224) = v22;
                v23 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                        v21,
                        (const char *const *)(v3 + 224));
                v24 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                        v23,
                        (const char (*)[23])byte_1AB79AC0);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v24,
                  (const unsigned int *)(v3 + 48));
                *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
                *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v13 = 1;
              }
              break;
            case NEW_ACTIVITY_DROP_TYPE_DROP_TAG:
              StringHash = (unsigned int)getStringHash(&subject_config->drop_param);
              if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 48, StringHash);
              *(_DWORD *)(v3 + 48) = StringHash;
              if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::string> const,unsigned int>(
                     &txt_config_mgr->drop_config_mgr.monster_drop_tag_hash_map,
                     (const unsigned int *)(v3 + 48)) )
              {
                goto LABEL_106;
              }
              *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 640, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 640),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkNewActivityDropExcelConfig",
                845);
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 640),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v27 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v26,
                      (const char (*)[13])"ActivityId: ");
              v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v27,
                      &drop_config->activity_id);
              v29 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                      v28,
                      (const char (*)[23])byte_1AB79A80);
              *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&subject_config->subject_type);
              }
              v30 = (__int64)data::enumValToStr(subject_config->subject_type, (__int64)byte_1AB79A80);
              if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
                v30 = __asan_report_store8(v3 + 256, byte_1AB79A80);
              *(_QWORD *)(v3 + 256) = v30;
              v31 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                      v29,
                      (const char *const *)(v3 + 256));
              v32 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                      v31,
                      (const char (*)[21])byte_1AB79B00);
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v3 + 48);
              v33 = *(_DWORD *)(v3 + 48);
              if ( *(char *)(((v3 + 704) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) )
              {
                v33 = 32;
                __asan_report_store_n(v3 + 704, 32LL);
              }
              NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig(TxtConfigMgr const&)const::{lambda(unsigned int)#1}::operator()(
                (std::string *)(v3 + 704),
                (const NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig::<lambda(uint32_t)> *const)(v3 + 64),
                v33);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v32, (const std::string *)(v3 + 704));
              std::string::~string((void *)(v3 + 704));
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = -117901064;
              *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
              *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v13 = 1;
              break;
            case NEW_ACTIVITY_DROP_TYPE_MONSTER_TAG:
              v34 = (unsigned int)getStringHash(&subject_config->drop_param);
              if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 48, v34);
              *(_DWORD *)(v3 + 48) = v34;
              if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::string> const,unsigned int>(
                     &txt_config_mgr->monster_config_mgr.monster_sub_tag_hash_map,
                     (const unsigned int *)(v3 + 48)) )
              {
                goto LABEL_106;
              }
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 768) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 768, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 768),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkNewActivityDropExcelConfig",
                857);
              v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 768),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v36 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v35,
                      (const char (*)[13])"ActivityId: ");
              v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v36,
                      &drop_config->activity_id);
              v38 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                      v37,
                      (const char (*)[23])byte_1AB79A80);
              *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&subject_config->subject_type);
              }
              v39 = (__int64)data::enumValToStr(subject_config->subject_type, (__int64)byte_1AB79A80);
              if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
                v39 = __asan_report_store8(v3 + 288, byte_1AB79A80);
              *(_QWORD *)(v3 + 288) = v39;
              v40 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                      v38,
                      (const char *const *)(v3 + 288));
              v41 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      v40,
                      (const char (*)[24])byte_1AB79B40);
              *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v3 + 48);
              v42 = *(_DWORD *)(v3 + 48);
              if ( *(char *)(((v3 + 832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) )
              {
                v42 = 32;
                __asan_report_store_n(v3 + 832, 32LL);
              }
              NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig(TxtConfigMgr const&)const::{lambda(unsigned int)#1}::operator()(
                (std::string *)(v3 + 832),
                (const NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig::<lambda(uint32_t)> *const)(v3 + 64),
                v42);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v41, (const std::string *)(v3 + 832));
              std::string::~string((void *)(v3 + 832));
              *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = -117901064;
              *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 768));
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v13 = 1;
              break;
            case NEW_ACTIVITY_DROP_TYPE_GATHER:
              if ( common::tools::StringUtils::strToNum<unsigned int>(
                     &subject_config->drop_param,
                     (unsigned int *)(v3 + 48),
                     1) )
              {
                *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 896) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 896, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 896),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityDropExcelConfig",
                  868);
                v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 896),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v44 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v43,
                        (const char (*)[17])byte_1AB796C0);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v44, &subject_config->drop_param);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 896));
                *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v13 = 1;
              }
              else
              {
                p_gather_config_mgr = &txt_config_mgr->gather_config_mgr;
                v46 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
                if ( (_BYTE)v46 != 0 && (char)v46 <= 3 )
                  __asan_report_load4(v3 + 48);
                if ( data::GatherExcelConfigMgrBase::findGatherExcelConfig(
                       p_gather_config_mgr,
                       *(unsigned int *)(v3 + 48)) )
                {
                  goto LABEL_106;
                }
                *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 960) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 960, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 960),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityDropExcelConfig",
                  873);
                v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 960),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v48 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                        v47,
                        (const char (*)[13])"ActivityId: ");
                v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v48,
                        &drop_config->activity_id);
                v50 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                        v49,
                        (const char (*)[23])byte_1AB79A80);
                *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&subject_config->subject_type);
                }
                v51 = (__int64)data::enumValToStr(subject_config->subject_type, (__int64)byte_1AB79A80);
                if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
                  v51 = __asan_report_store8(v3 + 320, byte_1AB79A80);
                *(_QWORD *)(v3 + 320) = v51;
                v52 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                        v50,
                        (const char *const *)(v3 + 320));
                v53 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                        v52,
                        (const char (*)[24])byte_1AB79B80);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v53,
                  (const unsigned int *)(v3 + 48));
                *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 960));
                *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v13 = 1;
              }
              break;
            case NEW_ACTIVITY_DROP_TYPE_SUB_FIELD_DROP:
              if ( common::tools::StringUtils::strToNum<unsigned int>(
                     &subject_config->drop_param,
                     (unsigned int *)(v3 + 48),
                     1) )
              {
                *(_DWORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1024) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1055) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1055) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1024, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1024),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityDropExcelConfig",
                  884);
                v54 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1024),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v55 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v54,
                        (const char (*)[17])byte_1AB796C0);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v55, &subject_config->drop_param);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1024));
                *(_DWORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v13 = 1;
              }
              else
              {
                p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
                v57 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
                if ( (_BYTE)v57 != 0 && (char)v57 <= 3 )
                  __asan_report_load4(v3 + 48);
                if ( DropExcelConfigMgr::findDropSubfieldExcelConfig(p_drop_config_mgr, *(unsigned int *)(v3 + 48)) )
                  goto LABEL_106;
                *(_DWORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1088) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1119) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1119) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1088, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1088),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityDropExcelConfig",
                  889);
                v58 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1088),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v59 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                        v58,
                        (const char (*)[13])"ActivityId: ");
                v60 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v59,
                        &drop_config->activity_id);
                v61 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                        v60,
                        (const char (*)[23])byte_1AB79A80);
                *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&subject_config->subject_type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&subject_config->subject_type);
                }
                v62 = (__int64)data::enumValToStr(subject_config->subject_type, (__int64)byte_1AB79A80);
                if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
                  v62 = __asan_report_store8(v3 + 352, byte_1AB79A80);
                *(_QWORD *)(v3 + 352) = v62;
                v63 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                        v61,
                        (const char *const *)(v3 + 352));
                v64 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                        v63,
                        (const char (*)[29])byte_1AB79BC0);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v64,
                  (const unsigned int *)(v3 + 48));
                *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = -8;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1088));
                *(_DWORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v13 = 1;
              }
              break;
            case NEW_ACTIVITY_DROP_TYPE_CLIMATE_AREA_ID:
LABEL_106:
              std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<data::NewActivityDropType const&,unsigned int &>(
                (std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 384),
                &subject_config->subject_type,
                (unsigned int *)(v3 + 48),
                &subject_config->subject_type,
                v12);
              v13 = 2;
              break;
            default:
              *(_DWORD *)(((v3 + 1152) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1152) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1183) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1183) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1152, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1152),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkNewActivityDropExcelConfig",
                901);
              v65 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1152),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v66 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v65,
                      (const char (*)[13])"ActivityId: ");
              v67 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v66,
                      &drop_config->activity_id);
              v68 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      v67,
                      (const char (*)[32])byte_1AB79C00);
              common::milog::MiLogStream::operator<<<data::NewActivityDropType,(data::NewActivityDropType*)0>(
                v68,
                &subject_config->subject_type);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1152));
              *(_DWORD *)(((v3 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v13 = 1;
              break;
          }
        }
        else
        {
          v13 = 0;
        }
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        if ( v13 && v13 != 2 )
        {
          v69 = 0;
          goto LABEL_112;
        }
        __gnu_cxx::__normal_iterator<data::NewActivityDropSubjectConfig const*,std::vector<data::NewActivityDropSubjectConfig>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityDropSubjectConfig*,std::vector<data::NewActivityDropSubjectConfig> > *const)(v3 + 160));
      }
      v69 = 1;
LABEL_112:
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
      if ( v69 == 1 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&drop_config->activity_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&drop_config->activity_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&drop_config->activity_id);
        }
        ActivitiyTypeByActivityId = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(
                                      this,
                                      drop_config->activity_id);
        item_limit_type = NewActivityExcelConfigMgr::getDropItemLimitType(this, ActivitiyTypeByActivityId);
        if ( *(_BYTE *)(((unsigned __int64)&drop_config->drop_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)drop_config + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&drop_config->drop_id >> 3)
                                                                     + 0x7FFF8000) )
        {
          __asan_report_load4(&drop_config->drop_id);
        }
        if ( (unsigned __int8)TxtConfigMgr::isValidDropIdAndMatchItemLimitType(
                                txt_config_mgr,
                                drop_config->drop_id,
                                item_limit_type) != 1 )
        {
          *(_DWORD *)(((v3 + 1216) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1216) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1216, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1216),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "checkNewActivityDropExcelConfig",
            909);
          v71 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1216),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v72 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v71, (const char (*)[46])byte_1AB79C40);
          v73 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v72, &drop_config->activity_id);
          v74 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v73, (const char (*)[29])byte_1AB79CA0);
          v75 = common::milog::MiLogStream::operator<<<std::pair<unsigned int,unsigned int>>(
                  v74,
                  (const std::vector<std::pair<unsigned int,unsigned int>> *)(v3 + 384));
          v76 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v75, (const char (*)[17])byte_1AB79CE0);
          v77 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v76, &drop_config->min_level);
          v78 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v77, (const char (*)[13])byte_1AB79D20);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v78, &drop_config->drop_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1216));
          *(_DWORD *)(((v3 + 1216) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        v82 = 1;
      }
      else
      {
        v82 = 0;
      }
      std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 384));
      v10 = v82 == 1;
    }
    else
    {
      *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityDropExcelConfig",
        811);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 448),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(v8, (const char (*)[35])byte_1AB79A20);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &drop_config->activity_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
      *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v10 = 0;
    }
    v79 = ((v3 + 384) >> 3) + 2147450880;
    *(_WORD *)v79 = -1800;
    *(_BYTE *)(v79 + 2) = -8;
    if ( !v10 )
    {
      v80 = 0;
      goto LABEL_128;
    }
    __gnu_cxx::__normal_iterator<data::NewActivityDropExcelConfig const*,std::vector<data::NewActivityDropExcelConfig>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityDropExcelConfig*,std::vector<data::NewActivityDropExcelConfig> > *const)(v3 + 96));
  }
  v80 = 1;
LABEL_128:
  if ( v80 == 1 )
    v2 = ret;
  if ( v90 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8098) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 160) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1280LL, v90);
  }
  return v2;
};

// Line 796: range 00000000135598AA-0000000013559B14
std::string *__fastcall NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig(TxtConfigMgr const&)const::{lambda(unsigned int)#1}::operator()(
        std::string *retstr,
        unsigned __int64 __closure,
        uint32_t tag_hash)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::string> *v6; // rdx
  std::unordered_map<unsigned int,std::string> *v7; // rdx
  bool v8; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::string >,false,false>::pointer v9; // rax
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 1 9 <unknown> 48 4 12 tag_hash:796 64 8 8 iter:798 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkNewActivityDropExcelConfig(TxtConfigMgr const&)const::{lambda(unsigned int)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = tag_hash;
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v6 = (std::unordered_map<unsigned int,std::string> *)(*(_QWORD *)__closure + 784LL);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, __closure);
  *(std::unordered_map<unsigned int,std::string>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::string>::find(
                                                                                 v6,
                                                                                 (const std::unordered_map<unsigned int,std::string>::key_type *)(v3 + 48));
  v7 = (std::unordered_map<unsigned int,std::string> *)(*(_QWORD *)__closure + 784LL);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::string>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::string>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::string>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::string >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::string >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v3 + 32);
    std::string::basic_string<std::allocator<char>>(retstr, byte_1AB07460, (const std::allocator<char> *)(v3 + 32));
    std::allocator<char>::~allocator(v3 + 32);
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::string>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::string >,false,false> *const)(v3 + 64));
    std::string::basic_string(retstr, &v9->second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 918: range 000000001355BBF0-000000001355C607
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityScheduleExcelConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 v5; // rsi
  __int64 v6; // rsi
  uint32_t begin_time; // ecx
  char v8; // al
  __int64 v9; // rsi
  uint32_t end_time; // ecx
  char v11; // dl
  __int64 activity_id; // rsi
  data::NewActivityType ActivitiyTypeByActivityId; // edx
  char v14; // al
  std::vector<unsigned int> *v15; // rdx
  std::vector<unsigned int> *v16; // rdx
  uint32_t *p_begin_time; // rsi
  __int64 v18; // rsi
  data::NewActivityType v19; // edx
  char v20; // al
  std::set<unsigned int> *v21; // rax
  char *v22; // rsi
  char *v23; // rsi
  __gnu_cxx::__normal_iterator<int*,std::vector<int> >::reference v24; // rax
  std::unordered_set<unsigned int> *p_schedule_cond_finish_quest_set; // rcx
  int v26; // edi
  char v27; // al
  int32_t result; // eax
  data::DbActivityScheduleConfigMgr *db_activity_schedule_config; // [rsp+10h] [rbp-1A0h]
  data::NewActivityScheduleExcelConfigMap *__for_range; // [rsp+18h] [rbp-198h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::reference __in; // [rsp+20h] [rbp-190h]
  std::vector<unsigned int>::value_type *schedule_id; // [rsp+28h] [rbp-188h]
  std::tuple_element<1,std::pair<unsigned int const,data::NewActivityScheduleExcelConfig> >::type *schedule_conf; // [rsp+30h] [rbp-180h]
  const data::ActivityScheduleConfig *db_schedule_config_ptr; // [rsp+38h] [rbp-178h]
  std::vector<data::NewActivityScheduleCond> *__for_range_0; // [rsp+40h] [rbp-170h]
  data::NewActivityScheduleCond *cond; // [rsp+48h] [rbp-168h]
  std::vector<int> *__for_range_1; // [rsp+50h] [rbp-160h]
  int *quest_id; // [rsp+58h] [rbp-158h]
  char v40[336]; // [rsp+60h] [rbp-150h] BYREF

  v2 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 4 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 8 15 __for_begin:921 128 8 13 __for_end:"
                        "921 160 8 15 __for_begin:945 192 8 13 __for_end:945 224 8 15 __for_begin:949 256 8 13 __for_end:949";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityScheduleExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -234556924;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -202116352;
  db_activity_schedule_config = &TxtConfigMgr::getConfig(txt_config_mgr)->db_config_mgr.db_local_config_mgr.activity_schedule_config_mgr;
  __for_range = &this->new_activity_schedule_excel_config_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 128, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::iterator *)(v2 + 128) = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false> *)(v2 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false> *)(v2 + 128)) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *const)(v2 + 96));
    schedule_id = std::get<0ul,unsigned int const,data::NewActivityScheduleExcelConfig>(__in);
    schedule_conf = std::get<1ul,unsigned int const,data::NewActivityScheduleExcelConfig>(__in);
    if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(schedule_id);
    }
    v5 = *schedule_id;
    db_schedule_config_ptr = data::DbActivityScheduleConfigMgr::findActivityScheduleConfig(
                               db_activity_schedule_config,
                               v5);
    if ( db_schedule_config_ptr )
    {
      v6 = (((_BYTE)db_schedule_config_ptr + 4) & 7u) + 3;
      if ( *(_BYTE *)(((unsigned __int64)&db_schedule_config_ptr->begin_time >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)db_schedule_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&db_schedule_config_ptr->begin_time >> 3)
                                                                             + 0x7FFF8000) )
      {
        __asan_report_load4(&db_schedule_config_ptr->begin_time);
      }
      begin_time = db_schedule_config_ptr->begin_time;
      v8 = *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000);
      if ( v8 != 0 && v8 <= 3 )
      {
        LOBYTE(v6) = v8 != 0;
        __asan_report_store4(&schedule_conf->begin_time, v6);
      }
      schedule_conf->begin_time = begin_time;
      v9 = (((_BYTE)db_schedule_config_ptr + 8) & 7u) + 3;
      if ( *(_BYTE *)(((unsigned __int64)&db_schedule_config_ptr->end_time >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)db_schedule_config_ptr + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&db_schedule_config_ptr->end_time >> 3)
                                                                             + 0x7FFF8000) )
      {
        __asan_report_load4(&db_schedule_config_ptr->end_time);
      }
      end_time = db_schedule_config_ptr->end_time;
      v11 = *(_BYTE *)(((unsigned __int64)&schedule_conf->end_time >> 3) + 0x7FFF8000);
      if ( v11 != 0 && (char)((((_BYTE)schedule_conf + 84) & 7) + 3) >= v11 )
      {
        LOBYTE(v9) = v11 != 0;
        __asan_report_store4(&schedule_conf->end_time, v9);
      }
      schedule_conf->end_time = end_time;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&schedule_conf->begin_time, v5);
      }
      schedule_conf->begin_time = 0;
      if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->end_time >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)schedule_conf + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf->end_time >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_store4(&schedule_conf->end_time, (((_BYTE)schedule_conf + 84) & 7u) + 3);
      }
      schedule_conf->end_time = 0;
    }
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&schedule_conf->activity_id);
    }
    activity_id = schedule_conf->activity_id;
    ActivitiyTypeByActivityId = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(this, activity_id);
    v14 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
    if ( v14 != 0 && v14 <= 3 )
    {
      LOBYTE(activity_id) = v14 != 0;
      __asan_report_store4(v2 + 48, activity_id);
    }
    *(_DWORD *)(v2 + 48) = ActivitiyTypeByActivityId;
    v15 = std::unordered_map<unsigned int,std::vector<unsigned int>>::operator[](
            &this->activity_type_schedule_vec_map,
            (std::unordered_map<unsigned int,std::vector<unsigned int>>::key_type *)(v2 + 48));
    std::vector<unsigned int>::push_back(v15, schedule_id);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    v16 = std::unordered_map<unsigned int,std::vector<unsigned int>>::operator[](
            &this->activity_id_schedule_vec_map,
            &schedule_conf->activity_id);
    p_begin_time = schedule_id;
    std::vector<unsigned int>::push_back(v16, schedule_id);
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&schedule_conf->begin_time);
    }
    if ( schedule_conf->begin_time )
    {
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&schedule_conf->activity_id);
      }
      v18 = schedule_conf->activity_id;
      v19 = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(this, v18);
      v20 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
      if ( v20 != 0 && v20 <= 3 )
      {
        LOBYTE(v18) = v20 != 0;
        __asan_report_store4(v2 + 64, v18);
      }
      *(_DWORD *)(v2 + 64) = v19;
      v21 = std::unordered_map<data::NewActivityType,std::set<unsigned int>>::operator[](
              &this->activity_open_time_set_map,
              (std::unordered_map<data::NewActivityType,std::set<unsigned int>>::key_type *)(v2 + 64));
      p_begin_time = &schedule_conf->begin_time;
      std::set<unsigned int>::insert(v21, &schedule_conf->begin_time);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    }
    __for_range_0 = &schedule_conf->cond;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, p_begin_time);
    *(std::vector<data::NewActivityScheduleCond>::iterator *)(v2 + 160) = std::vector<data::NewActivityScheduleCond>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, p_begin_time);
    *(std::vector<data::NewActivityScheduleCond>::iterator *)(v2 + 192) = std::vector<data::NewActivityScheduleCond>::end(__for_range_0);
    while ( 1 )
    {
      v22 = (char *)(v2 + 192);
      if ( !__gnu_cxx::operator!=<data::NewActivityScheduleCond *,std::vector<data::NewActivityScheduleCond>>(
              (const __gnu_cxx::__normal_iterator<data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *)(v2 + 160),
              (const __gnu_cxx::__normal_iterator<data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *)(v2 + 192)) )
        break;
      cond = __gnu_cxx::__normal_iterator<data::NewActivityScheduleCond *,std::vector<data::NewActivityScheduleCond>>::operator*((const __gnu_cxx::__normal_iterator<data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *const)(v2 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&cond->type);
      }
      if ( cond->type == NEW_ACTIVITY_SCHEDULE_COND_QUEST_FINISH )
      {
        __for_range_1 = &cond->param;
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 224, v22);
        *(std::vector<int>::iterator *)(v2 + 224) = std::vector<int>::begin(__for_range_1);
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 256, v22);
        *(std::vector<int>::iterator *)(v2 + 256) = std::vector<int>::end(__for_range_1);
        while ( 1 )
        {
          v23 = (char *)(v2 + 256);
          if ( !__gnu_cxx::operator!=<int *,std::vector<int>>(
                  (const __gnu_cxx::__normal_iterator<int*,std::vector<int> > *)(v2 + 224),
                  (const __gnu_cxx::__normal_iterator<int*,std::vector<int> > *)(v2 + 256)) )
            break;
          v24 = __gnu_cxx::__normal_iterator<int *,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int*,std::vector<int> > *const)(v2 + 224));
          quest_id = v24;
          p_schedule_cond_finish_quest_set = &this->schedule_cond_finish_quest_set;
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v24);
          }
          v26 = *quest_id;
          v27 = *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000);
          if ( v27 != 0 && v27 <= 3 )
          {
            v26 = v2 + 80;
            LOBYTE(v23) = v27 != 0;
            __asan_report_store4(v2 + 80, v23);
          }
          *(_DWORD *)(v2 + 80) = v26;
          std::unordered_set<unsigned int>::insert(
            p_schedule_cond_finish_quest_set,
            (std::unordered_set<unsigned int>::value_type *)(v2 + 80));
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
          __gnu_cxx::__normal_iterator<int *,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int*,std::vector<int> > *const)(v2 + 224));
        }
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      }
      __gnu_cxx::__normal_iterator<data::NewActivityScheduleCond *,std::vector<data::NewActivityScheduleCond>>::operator++((__gnu_cxx::__normal_iterator<data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *const)(v2 + 160));
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *const)(v2 + 96));
  }
  result = 0;
  if ( v40 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 963: range 000000001355C608-000000001355D0B3
__int64 __fastcall NewActivityExcelConfigMgr::validScheduleCond(
        uint32_t schedule_id,
        const data::NewActivityScheduleCond *cond,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  data::NewActivityScheduleCondType type; // eax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::vector<int>::size_type v16; // rax
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v17; // rax
  int *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  const int *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v27; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  int v32; // eax
  __int64 result; // rax
  std::vector<int> *__for_range; // [rsp+20h] [rbp-220h]
  const int *param; // [rsp+28h] [rbp-218h]
  char v37[528]; // [rsp+30h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 48 4 15 schedule_id:962 64 8 9 <unknown> 96 8 15 __for_begin:995 128 8 13 __for_end:995 160 32"
                        " 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = NewActivityExcelConfigMgr::validScheduleCond;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862726] = -218959118;
  v6[536862728] = -218959118;
  v6[536862730] = -218959118;
  v6[536862732] = -218959118;
  v6[536862734] = -202116109;
  *(_DWORD *)(v4 + 48) = schedule_id;
  if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&cond->type);
  }
  if ( !data::isValidNewActivityScheduleCondType(cond->type) )
  {
    if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "validScheduleCond",
      966);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v7, (const char (*)[14])"schedule_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v9, (const char (*)[26])byte_1AB79FA0);
    common::milog::MiLogStream::operator<<<data::NewActivityScheduleCondType,(data::NewActivityScheduleCondType*)0>(
      v10,
      &cond->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 160));
    v3 = 0;
    goto LABEL_47;
  }
  if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&cond->type);
  }
  type = cond->type;
  if ( type == NEW_ACTIVITY_SCHEDULE_COND_PLAYER_LEVEL_GREATER )
  {
    if ( std::vector<int>::size(&cond->param) == 1 )
    {
      v17 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                &cond->param,
                                                                                0LL);
      v18 = v17;
      if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v17);
      }
      if ( *v18 >= 0 )
        goto LABEL_46;
      if ( *(char *)(((v4 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 32 + 95) & 7) >= *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "validScheduleCond",
        981);
      v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v19, (const char (*)[14])"schedule_id: ");
      v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v4 + 48));
      v22 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(v21, (const char (*)[53])byte_1AB7A040);
      v23 = std::vector<int>::operator[](&cond->param, 0LL);
      common::milog::MiLogStream::operator<<<int,(int *)0>(v22, v23);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 288));
      v3 = 0;
    }
    else
    {
      if ( *(char *)(((v4 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 32 + 31) & 7) >= *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "validScheduleCond",
        976);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 224),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])"schedule_id: ");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 48));
      v15 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(v14, (const char (*)[48])byte_1AB79FE0);
      v16 = std::vector<int>::size(&cond->param);
      if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
        v16 = __asan_report_store8(v4 + 64, byte_1AB79FE0);
      *(_QWORD *)(v4 + 64) = v16;
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v15, (const unsigned __int64 *)(v4 + 64));
      *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 224));
      v3 = 0;
    }
  }
  else
  {
    if ( type != NEW_ACTIVITY_SCHEDULE_COND_QUEST_FINISH )
    {
LABEL_46:
      v3 = 1;
      goto LABEL_47;
    }
    if ( std::vector<int>::empty(&cond->param) )
    {
      if ( *(char *)(((v4 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "validScheduleCond",
        991);
      v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 352),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v25 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v24, (const char (*)[14])"schedule_id: ");
      v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v26, (const char (*)[42])byte_1AB7A0A0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 352));
      v3 = 0;
    }
    else
    {
      __for_range = &cond->param;
      if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 96, cond);
      *(std::vector<int>::const_iterator *)(v4 + 96) = std::vector<int>::begin(__for_range);
      if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 128, cond);
      *(std::vector<int>::const_iterator *)(v4 + 128) = std::vector<int>::end(__for_range);
      while ( 1 )
      {
        if ( !__gnu_cxx::operator!=<int const*,std::vector<int>>(
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v4 + 96),
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v4 + 128)) )
        {
          v32 = 1;
          goto LABEL_45;
        }
        v27 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v4 + 96));
        param = v27;
        p_quest_config_mgr = &txt_config_mgr->quest_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v27 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v27);
        }
        if ( !data::QuestExcelConfigMgrBase::findQuestExcelConfig(p_quest_config_mgr, *(unsigned int *)param) )
          break;
        __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v4 + 96));
      }
      if ( *(char *)(((v4 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "validScheduleCond",
        999);
      v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 416),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v30 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v29, (const char (*)[22])byte_1AB7A100);
      v31 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              v30,
              (const char (*)[23])" quest_id is invalid: ");
      common::milog::MiLogStream::operator<<<int,(int *)0>(v31, param);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
      v3 = 0;
      v32 = 0;
LABEL_45:
      if ( v32 == 1 )
        goto LABEL_46;
    }
  }
LABEL_47:
  result = v3;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 1013: range 000000001355D0B4-000000001355D0D0
bool __cdecl NewActivityExcelConfigMgr::isLogicTypeValid(data::LogicType type)
{
  return (unsigned int)type <= LOGIC_A_AND_B_OR_ETCAND;
};

// Line 1032: range 000000001355D0D2-000000001355FE4D
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityScheduleExcelConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  const NewActivityExcelConfigMgr *v7; // rdx
  __int64 activity_id; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  uint32_t begin_time; // ecx
  char v14; // dl
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  const NewActivityExcelConfigMgr *v28; // rdx
  __int64 v29; // rsi
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rdx
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  unsigned __int64 v34; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v35; // rax
  const NewActivityExcelConfigMgr *v36; // rcx
  __int64 v37; // rsi
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rdx
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v42; // rax
  const NewActivityExcelConfigMgr *v43; // rcx
  __int64 v44; // rsi
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rdx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rdx
  char *v49; // rsi
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v50; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rdx
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rdx
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rdx
  __int64 v58; // rsi
  __int64 v59; // rdx
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rdx
  common::milog::MiLogStream *v63; // rax
  __int64 v64; // rsi
  __int64 v65; // rdx
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rdx
  common::milog::MiLogStream *v69; // rax
  unsigned __int64 v70; // rax
  char *v71; // rsi
  unsigned int *v72; // rax
  int *v73; // rdx
  int v74; // ecx
  char v75; // al
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v76; // rax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rdx
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  QuestExcelConfigMgr *v81; // rcx
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rdx
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // rax
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rdx
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // rax
  unsigned __int64 v90; // rax
  unsigned __int64 v91; // rax
  char *v92; // rsi
  unsigned int v93; // ecx
  uint32_t v94; // esi
  common::milog::MiLogStream *v95; // rax
  common::milog::MiLogStream *v96; // rdx
  common::milog::MiLogStream *v97; // rax
  common::milog::MiLogStream *v98; // rdx
  common::milog::MiLogStream *v99; // rax
  common::milog::MiLogStream *v100; // rdx
  common::milog::MiLogStream *v101; // rax
  int v102; // eax
  int32_t v103; // ebx
  bool have_error; // [rsp+17h] [rbp-819h]
  data::NewActivityScheduleExcelConfigMap *__for_range; // [rsp+18h] [rbp-818h]
  std::unordered_map<unsigned int,std::vector<unsigned int>> *__for_range_6; // [rsp+20h] [rbp-810h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int> >,false,false>::reference v109; // [rsp+28h] [rbp-808h]
  std::tuple_element<0,std::pair<unsigned int const,std::vector<unsigned int> > >::type *activity_type; // [rsp+30h] [rbp-800h]
  std::tuple_element<1,const std::pair<unsigned int const,std::vector<unsigned int> > >::type *schedule_id_vec; // [rsp+38h] [rbp-7F8h]
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference schedule_id_0; // [rsp+48h] [rbp-7E8h]
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference comp_schedule_id; // [rsp+58h] [rbp-7D8h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::reference v114; // [rsp+60h] [rbp-7D0h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityScheduleExcelConfig> >::type *schedule_id; // [rsp+68h] [rbp-7C8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityScheduleExcelConfig> >::type *schedule_conf; // [rsp+70h] [rbp-7C0h]
  const std::vector<data::NewActivityScheduleCond> *__for_range_0; // [rsp+78h] [rbp-7B8h]
  const data::NewActivityExcelConfig *activity_config_ptr; // [rsp+80h] [rbp-7B0h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+88h] [rbp-7A8h]
  const std::vector<unsigned int> *__for_range_5; // [rsp+90h] [rbp-7A0h]
  const unsigned int *cond_group_id; // [rsp+98h] [rbp-798h]
  const data::NewActivityCondGroupExcelConfig *cond_group_config_ptr; // [rsp+A0h] [rbp-790h]
  const std::vector<unsigned int> *__for_range_2; // [rsp+A8h] [rbp-788h]
  const unsigned int *cond_id; // [rsp+B0h] [rbp-780h]
  const data::NewActivityCondExcelConfig *cond_config_ptr; // [rsp+B8h] [rbp-778h]
  const std::vector<data::NewActivityCond> *__for_range_3; // [rsp+C0h] [rbp-770h]
  const data::NewActivityCond *cond_0; // [rsp+C8h] [rbp-768h]
  const std::vector<int> *__for_range_4; // [rsp+D0h] [rbp-760h]
  const int *quest_id; // [rsp+D8h] [rbp-758h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+E0h] [rbp-750h]
  __gnu_cxx::__normal_iterator<const data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> >::reference cond; // [rsp+E8h] [rbp-748h]
  char v132[1856]; // [rsp+F0h] [rbp-740h] BYREF

  v2 = (unsigned __int64)v132;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1824LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "38 48 4 13 quest_id:1147 64 8 16 __for_begin:1034 96 8 14 __for_end:1034 128 8 16 __for_begin:10"
                        "77 160 8 14 __for_end:1077 192 8 16 __for_begin:1095 224 8 14 __for_end:1095 256 8 16 __for_begi"
                        "n:1104 288 8 14 __for_end:1104 320 8 16 __for_begin:1113 352 8 14 __for_end:1113 384 8 16 __for_"
                        "begin:1117 416 8 14 __for_end:1117 448 8 16 __for_begin:1147 480 8 14 __for_end:1147 512 8 16 __"
                        "for_begin:1171 544 8 14 __for_end:1171 576 8 16 __for_begin:1179 608 8 14 __for_end:1179 640 8 1"
                        "6 __for_begin:1181 672 8 14 __for_end:1181 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unkno"
                        "wn> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unk"
                        "nown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 "
                        "<unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 48 21 pre_quest_id_set:1094 1744 48 18 ch"
                        "eck_dup_set:1146";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::checkNewActivityScheduleExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862736] = -218959360;
  v4[536862737] = -218959360;
  v4[536862738] = -218959360;
  v4[536862739] = -218959360;
  v4[536862740] = -218959360;
  v4[536862741] = -218959360;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -219021312;
  v4[536862774] = 62194;
  v4[536862776] = -202116109;
  have_error = 0;
  __for_range = &this->new_activity_schedule_excel_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::NewActivityScheduleExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false> *)(v2 + 96)) )
      break;
    v114 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *const)(v2 + 64));
    schedule_id = std::get<0ul,unsigned int const,data::NewActivityScheduleExcelConfig>(v114);
    schedule_conf = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityScheduleExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityScheduleExcelConfig>(v114);
    if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(schedule_id);
    }
    if ( !*schedule_id )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 704, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 704),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityScheduleExcelConfig",
        1039);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 704),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])"schedule_id can't be 0");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
      *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
    }
    v7 = this;
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&schedule_conf->activity_id);
    }
    activity_id = schedule_conf->activity_id;
    if ( !data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v7, activity_id) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 768, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 768),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityScheduleExcelConfig",
        1046);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 768),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])"schedule_id: ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, schedule_id);
      v12 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v11,
              (const char (*)[25])" has error activity_id: ");
      activity_id = (__int64)&schedule_conf->activity_id;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &schedule_conf->activity_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
      *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
    }
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&schedule_conf->begin_time);
    }
    if ( schedule_conf->begin_time )
      goto LABEL_28;
    activity_id = (((_BYTE)schedule_conf + 84) & 7u) + 3;
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->end_time >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)schedule_conf + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf->end_time >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&schedule_conf->end_time);
    }
    if ( schedule_conf->end_time )
    {
LABEL_28:
      if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&schedule_conf->begin_time);
      }
      begin_time = schedule_conf->begin_time;
      v14 = *(_BYTE *)(((unsigned __int64)&schedule_conf->end_time >> 3) + 0x7FFF8000);
      LOBYTE(activity_id) = v14 != 0;
      if ( v14 != 0 && (char)((((_BYTE)schedule_conf + 84) & 7) + 3) >= v14 )
        __asan_report_load4(&schedule_conf->end_time);
      if ( begin_time >= schedule_conf->end_time )
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 832, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 832),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityScheduleExcelConfig",
          1059);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 832),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v15, (const char (*)[14])"schedule_id: ");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, schedule_id);
        v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v17, (const char (*)[14])" begin_time: ");
        v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &schedule_conf->begin_time);
        v20 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v19,
                (const char (*)[25])" is later than end_time:");
        activity_id = (__int64)&schedule_conf->end_time;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &schedule_conf->end_time);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
        *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
      }
      if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&schedule_conf->begin_time >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&schedule_conf->begin_time);
      }
      if ( !schedule_conf->begin_time )
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 896, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 896),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityScheduleExcelConfig",
          1065);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v21, (const char (*)[14])"schedule_id: ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, schedule_id);
        activity_id = (__int64)byte_1AB7A660;
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v23, (const char (*)[22])byte_1AB7A660);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
        *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->cond_comb >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&schedule_conf->cond_comb >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&schedule_conf->cond_comb);
    }
    if ( !NewActivityExcelConfigMgr::isLogicTypeValid(schedule_conf->cond_comb) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 960, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 960),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityScheduleExcelConfig",
        1073);
      v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 960),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v25 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v24, (const char (*)[14])"schedule_id: ");
      v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, schedule_id);
      v27 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v26, (const char (*)[26])byte_1AB7A6A0);
      activity_id = (__int64)&schedule_conf->cond_comb;
      common::milog::MiLogStream::operator<<<data::LogicType,(data::LogicType*)0>(v27, &schedule_conf->cond_comb);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
      *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
    }
    __for_range_0 = &schedule_conf->cond;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, activity_id);
    *(std::vector<data::NewActivityScheduleCond>::const_iterator *)(v2 + 128) = std::vector<data::NewActivityScheduleCond>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, activity_id);
    *(std::vector<data::NewActivityScheduleCond>::const_iterator *)(v2 + 160) = std::vector<data::NewActivityScheduleCond>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::NewActivityScheduleCond const*,std::vector<data::NewActivityScheduleCond>>(
              (const __gnu_cxx::__normal_iterator<const data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<const data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *)(v2 + 160)) )
    {
      cond = __gnu_cxx::__normal_iterator<data::NewActivityScheduleCond const*,std::vector<data::NewActivityScheduleCond>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *const)(v2 + 128));
      if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(schedule_id);
      }
      if ( (unsigned __int8)NewActivityExcelConfigMgr::validScheduleCond(*schedule_id, cond, txt_config_mgr) != 1 )
        have_error = 1;
      __gnu_cxx::__normal_iterator<data::NewActivityScheduleCond const*,std::vector<data::NewActivityScheduleCond>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityScheduleCond*,std::vector<data::NewActivityScheduleCond> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    v28 = this;
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&schedule_conf->activity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&schedule_conf->activity_id);
    }
    v29 = schedule_conf->activity_id;
    activity_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v28, v29);
    if ( activity_config_ptr )
    {
      v34 = ((v2 + 1664) >> 3) + 2147450880;
      *(_DWORD *)v34 = 0;
      *(_WORD *)(v34 + 4) = 0;
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 1664));
      __for_range_1 = &activity_config_ptr->cond_group_id;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 192, v29);
      *(std::vector<unsigned int>::const_iterator *)(v2 + 192) = std::vector<unsigned int>::begin(__for_range_1);
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 224, v29);
      *(std::vector<unsigned int>::const_iterator *)(v2 + 224) = std::vector<unsigned int>::end(__for_range_1);
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 192),
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 224)) )
      {
        v35 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
        cond_group_id = v35;
        v36 = this;
        if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v35);
        }
        v37 = *cond_group_id;
        cond_group_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityCondGroupExcelConfig(v36, v37);
        if ( cond_group_config_ptr )
        {
          __for_range_2 = &cond_group_config_ptr->cond_id;
          *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 256, v37);
          *(std::vector<unsigned int>::const_iterator *)(v2 + 256) = std::vector<unsigned int>::begin(__for_range_2);
          *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 288, v37);
          *(std::vector<unsigned int>::const_iterator *)(v2 + 288) = std::vector<unsigned int>::end(__for_range_2);
          while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 256),
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 288)) )
          {
            v42 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 256));
            cond_id = v42;
            v43 = this;
            if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v42 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v42);
            }
            v44 = *cond_id;
            cond_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityCondExcelConfig(v43, v44);
            if ( cond_config_ptr )
            {
              __for_range_3 = &cond_config_ptr->cond;
              *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 320, v44);
              *(std::vector<data::NewActivityCond>::const_iterator *)(v2 + 320) = std::vector<data::NewActivityCond>::begin(__for_range_3);
              *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 352, v44);
              *(std::vector<data::NewActivityCond>::const_iterator *)(v2 + 352) = std::vector<data::NewActivityCond>::end(__for_range_3);
              while ( 1 )
              {
                v49 = (char *)(v2 + 352);
                if ( !__gnu_cxx::operator!=<data::NewActivityCond const*,std::vector<data::NewActivityCond>>(
                        (const __gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *)(v2 + 320),
                        (const __gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *)(v2 + 352)) )
                  break;
                cond_0 = __gnu_cxx::__normal_iterator<data::NewActivityCond const*,std::vector<data::NewActivityCond>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *const)(v2 + 320));
                if ( *(_BYTE *)(((unsigned __int64)&cond_0->type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&cond_0->type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&cond_0->type);
                }
                if ( cond_0->type == NEW_ACTIVITY_COND_QUEST_FINISH_ALLOW_QUICK_OPEN )
                {
                  __for_range_4 = &cond_0->param;
                  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 384, v49);
                  *(std::vector<int>::const_iterator *)(v2 + 384) = std::vector<int>::begin(__for_range_4);
                  *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 416, v49);
                  *(std::vector<int>::const_iterator *)(v2 + 416) = std::vector<int>::end(__for_range_4);
                  while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                            (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 384),
                            (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 416)) )
                  {
                    v50 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 384));
                    quest_id = v50;
                    p_quest_config_mgr = &txt_config_mgr->quest_config_mgr;
                    if ( *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v50 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v50);
                    }
                    quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                                         p_quest_config_mgr,
                                         *(unsigned int *)quest_id);
                    if ( quest_config_ptr )
                    {
                      std::set<unsigned int>::emplace<unsigned int const&>(
                        (std::set<unsigned int> *const)(v2 + 1664),
                        &quest_config_ptr->main_id,
                        &quest_config_ptr->main_id);
                    }
                    else
                    {
                      have_error = 1;
                      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1216, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1216),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                        "checkNewActivityScheduleExcelConfig",
                        1123);
                      v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v2 + 1216),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      v53 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                              v52,
                              (const char (*)[14])"schedule_id: ");
                      v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, schedule_id);
                      v55 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                              v54,
                              (const char (*)[12])", cond_id: ");
                      v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v55, cond_id);
                      v57 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                              v56,
                              (const char (*)[44])byte_1AB7A820);
                      common::milog::MiLogStream::operator<<<int,(int *)0>(v57, quest_id);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
                      *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                    }
                    __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 384));
                  }
                  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
                }
                __gnu_cxx::__normal_iterator<data::NewActivityCond const*,std::vector<data::NewActivityCond>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *const)(v2 + 320));
              }
              *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
            }
            else
            {
              have_error = 1;
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1152, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1152),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkNewActivityScheduleExcelConfig",
                1110);
              v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1152),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v46 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v45,
                      (const char (*)[14])"schedule_id: ");
              v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, schedule_id);
              v48 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                      v47,
                      (const char (*)[27])byte_1AB7A7A0);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v48, cond_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
            }
            __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 256));
          }
          *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
        }
        else
        {
          have_error = 1;
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1088, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1088),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "checkNewActivityScheduleExcelConfig",
            1101);
          v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1088),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v39 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v38,
                  (const char (*)[14])"schedule_id: ");
          v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, schedule_id);
          v41 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v40, (const char (*)[37])byte_1AB7A740);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, cond_group_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
        }
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
      }
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      v58 = ((_BYTE)schedule_conf + 92) & 7;
      v59 = (*(_BYTE *)(((unsigned __int64)&schedule_conf->allow_quick_open >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v58 >= *(_BYTE *)(((unsigned __int64)&schedule_conf->allow_quick_open >> 3) + 0x7FFF8000));
      if ( (_BYTE)v59 )
        __asan_report_load1(&schedule_conf->allow_quick_open, v58, v59);
      if ( !schedule_conf->allow_quick_open
        && !std::vector<unsigned int>::empty(&schedule_conf->quick_open_pre_quest_list) )
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1280, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1280),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityScheduleExcelConfig",
          1137);
        v61 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1280),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v62 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v61, (const char (*)[14])"schedule_id: ");
        v63 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v62, schedule_id);
        common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(v63, (const char (*)[64])byte_1AB7A880);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
        *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
      }
      else
      {
        v64 = ((_BYTE)schedule_conf + 92) & 7;
        v65 = (*(_BYTE *)(((unsigned __int64)&schedule_conf->allow_quick_open >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v64 >= *(_BYTE *)(((unsigned __int64)&schedule_conf->allow_quick_open >> 3) + 0x7FFF8000));
        if ( (_BYTE)v65 )
          __asan_report_load1(&schedule_conf->allow_quick_open, v64, v65);
        if ( !schedule_conf->allow_quick_open
          && !std::set<unsigned int>::empty((const std::set<unsigned int> *const)(v2 + 1664)) )
        {
          have_error = 1;
          *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1344, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1344),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "checkNewActivityScheduleExcelConfig",
            1142);
          v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1344),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v68 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v67,
                  (const char (*)[14])"schedule_id: ");
          v69 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, schedule_id);
          common::milog::MiLogStream::operator<<<char [79],(char *[79])0>(v69, (const char (*)[79])byte_1AB7A8E0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
          *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
        }
        else
        {
          v70 = ((v2 + 1744) >> 3) + 2147450880;
          *(_DWORD *)v70 = 0;
          *(_WORD *)(v70 + 4) = 0;
          std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 1744));
          __for_range_5 = &schedule_conf->quick_open_pre_quest_list;
          *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 448, v64);
          *(std::vector<unsigned int>::const_iterator *)(v2 + 448) = std::vector<unsigned int>::begin(__for_range_5);
          *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 480, v64);
          *(std::vector<unsigned int>::const_iterator *)(v2 + 480) = std::vector<unsigned int>::end(__for_range_5);
          while ( 1 )
          {
            v71 = (char *)(v2 + 480);
            if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 448),
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 480)) )
              break;
            *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
            v72 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 448));
            v73 = (int *)v72;
            if ( *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v72 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v72);
            }
            v74 = *v73;
            v75 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
            if ( v75 != 0 && v75 <= 3 )
            {
              LOBYTE(v71) = v75 != 0;
              __asan_report_store4(v2 + 48, v71);
            }
            *(_DWORD *)(v2 + 48) = v74;
            v76 = std::set<unsigned int>::emplace<unsigned int &>(
                    (std::set<unsigned int> *const)(v2 + 1744),
                    (unsigned int *)(v2 + 48),
                    (unsigned int *)(v2 + 48));
            if ( !v76.second )
            {
              have_error = 1;
              *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1408) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1408, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1408),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkNewActivityScheduleExcelConfig",
                1152);
              v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1408),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v78 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v77,
                      (const char (*)[14])"schedule_id: ");
              v79 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v78, schedule_id);
              v80 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                      v79,
                      (const char (*)[51])byte_1AB7A960);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v80,
                (const unsigned int *)(v2 + 48));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1408));
              *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
            }
            else
            {
              v81 = &txt_config_mgr->quest_config_mgr;
              if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v2 + 48);
              if ( data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(v81, *(unsigned int *)(v2 + 48)) )
              {
                if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
                        (std::set<unsigned int> *)(v2 + 1664),
                        (const unsigned int *)(v2 + 48)) )
                {
                  have_error = 1;
                  *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1536) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1536, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1536),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                    "checkNewActivityScheduleExcelConfig",
                    1164);
                  v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1536),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v87 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v86,
                          (const char (*)[14])"schedule_id: ");
                  v88 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v87, schedule_id);
                  v89 = common::milog::MiLogStream::operator<<<char [73],(char *[73])0>(
                          v88,
                          (const char (*)[73])byte_1AB7AA20);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v89,
                    (const unsigned int *)(v2 + 48));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1536));
                  *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -117901064;
                }
              }
              else
              {
                have_error = 1;
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1472, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1472),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityScheduleExcelConfig",
                  1158);
                v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1472),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v83 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v82,
                        (const char (*)[14])"schedule_id: ");
                v84 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v83, schedule_id);
                v85 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                        v84,
                        (const char (*)[57])byte_1AB7A9C0);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v85,
                  (const unsigned int *)(v2 + 48));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -117901064;
              }
            }
            __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 448));
          }
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 1744));
          v90 = ((v2 + 1744) >> 3) + 2147450880;
          *(_DWORD *)v90 = -117901064;
          *(_WORD *)(v90 + 4) = -1800;
        }
      }
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 1664));
    }
    else
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1024, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1024),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityScheduleExcelConfig",
        1089);
      v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 1024),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v31 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v30, (const char (*)[14])"schedule_id: ");
      v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, schedule_id);
      v33 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(v32, (const char (*)[39])byte_1AB7A6E0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, &schedule_conf->activity_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
      *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
    }
    v91 = ((v2 + 1664) >> 3) + 2147450880;
    *(_DWORD *)v91 = -117901064;
    *(_WORD *)(v91 + 4) = -1800;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityScheduleExcelConfig>,false,false> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  __for_range_6 = &this->activity_type_schedule_vec_map;
  *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 512, v5);
  *(std::unordered_map<unsigned int,std::vector<unsigned int>>::const_iterator *)(v2 + 512) = std::unordered_map<unsigned int,std::vector<unsigned int>>::begin(__for_range_6);
  *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 544, v5);
  *(std::unordered_map<unsigned int,std::vector<unsigned int>>::const_iterator *)(v2 + 544) = std::unordered_map<unsigned int,std::vector<unsigned int>>::end(__for_range_6);
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::vector<unsigned int>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<unsigned int> >,false> *)(v2 + 512),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<unsigned int> >,false> *)(v2 + 544)) )
  {
    v109 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int> >,false,false> *const)(v2 + 512));
    activity_type = std::get<0ul,unsigned int const,std::vector<unsigned int>>(v109);
    schedule_id_vec = (std::tuple_element<1,const std::pair<unsigned int const,std::vector<unsigned int> > >::type *)std::get<1ul,unsigned int const,std::vector<unsigned int>>(v109);
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
            &this->allow_overlap_activity_set,
            activity_type) )
    {
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 576, activity_type);
      *(std::vector<unsigned int>::const_iterator *)(v2 + 576) = std::vector<unsigned int>::begin(schedule_id_vec);
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 608, activity_type);
      *(std::vector<unsigned int>::const_iterator *)(v2 + 608) = std::vector<unsigned int>::end(schedule_id_vec);
      while ( 1 )
      {
        v92 = (char *)(v2 + 608);
        if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 576),
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 608)) )
          break;
        schedule_id_0 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 576));
        *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 640, v92);
        *(std::vector<unsigned int>::const_iterator *)(v2 + 640) = std::vector<unsigned int>::begin(schedule_id_vec);
        *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 672, v92);
        *(std::vector<unsigned int>::const_iterator *)(v2 + 672) = std::vector<unsigned int>::end(schedule_id_vec);
        while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 640),
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 672)) )
        {
          comp_schedule_id = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 640));
          if ( *(_BYTE *)(((unsigned __int64)schedule_id_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)schedule_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id_0 >> 3)
                                                                            + 0x7FFF8000) )
          {
            __asan_report_load4(schedule_id_0);
          }
          v93 = *schedule_id_0;
          if ( *(_BYTE *)(((unsigned __int64)comp_schedule_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)comp_schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)comp_schedule_id >> 3)
                                                                               + 0x7FFF8000) )
          {
            __asan_report_load4(comp_schedule_id);
          }
          if ( v93 != *comp_schedule_id )
          {
            if ( *(_BYTE *)(((unsigned __int64)comp_schedule_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)comp_schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)comp_schedule_id >> 3)
                                                                                 + 0x7FFF8000) )
            {
              __asan_report_load4(comp_schedule_id);
            }
            v94 = *comp_schedule_id;
            if ( *(_BYTE *)(((unsigned __int64)schedule_id_0 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)schedule_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id_0 >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load4(schedule_id_0);
            }
            if ( NewActivityExcelConfigMgr::isSchedulesOverlap(this, *schedule_id_0, v94) )
            {
              have_error = 1;
              *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1600) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1600, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1600),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkNewActivityScheduleExcelConfig",
                1188);
              v95 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1600),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v96 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v95,
                      (const char (*)[16])"activity_type: ");
              v97 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v96, activity_type);
              v98 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v97,
                      (const char (*)[16])" schedule_id1: ");
              v99 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v98, schedule_id_0);
              v100 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                       v99,
                       (const char (*)[15])" schedule_id2:");
              v101 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v100, comp_schedule_id);
              common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v101, (const char (*)[12])"is overlap!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1600));
              *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 640));
        }
        *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 576));
      }
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int> >,false,false> *const)(v2 + 512));
  }
  if ( have_error )
    v102 = -1;
  else
    v102 = 0;
  v103 = v102;
  if ( v132 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80DC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 228) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1824LL, v132);
  }
  return v103;
};

// Line 1199: range 000000001355FE4E-000000001356148E
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityExcelConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v7; // rax
  NewActivityExcelConfigMgr *v8; // rcx
  __int64 v9; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v10; // rax
  NewActivityExcelConfigMgr *v11; // rcx
  std::unordered_set<unsigned int> *v12; // rdx
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v18; // rax
  NewActivityExcelConfigMgr *v19; // rcx
  __int64 v20; // rsi
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // rax
  std::unordered_set<unsigned int> *v26; // rdx
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v27; // rax
  const unsigned int *v28; // r8
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>,bool> v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v40; // rax
  const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *v41; // rsi
  __int64 v42; // rdx
  char *v43; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v44; // rax
  int *v45; // rdx
  int v46; // ecx
  char v47; // al
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rdx
  MaterialExcelConfigMgr *p_material_config_mgr; // rdx
  __int64 v53; // rsi
  const unsigned int *v54; // r8
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rdx
  std::map<proto::VirtualItem,unsigned int> *p_coin_type_activity_id_map; // rcx
  int v60; // edi
  char v61; // al
  std::pair<std::_Rb_tree_iterator<std::pair<const proto::VirtualItem,unsigned int> >,bool> v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rdx
  uint32_t ret; // [rsp+1Ch] [rbp-3F4h]
  data::NewActivityExcelConfigMap *__for_range; // [rsp+20h] [rbp-3F0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::reference __in; // [rsp+28h] [rbp-3E8h]
  const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *activity_id; // [rsp+30h] [rbp-3E0h]
  std::tuple_element<1,std::pair<unsigned int const,data::NewActivityExcelConfig> >::type *activity_config; // [rsp+38h] [rbp-3D8h]
  std::vector<unsigned int> *__for_range_0; // [rsp+40h] [rbp-3D0h]
  std::vector<unsigned int> *__for_range_2; // [rsp+48h] [rbp-3C8h]
  std::vector<unsigned int> *__for_range_3; // [rsp+58h] [rbp-3B8h]
  unsigned int *watcher_id; // [rsp+68h] [rbp-3A8h]
  data::NewActivityWatcherConfig *watcher_config_ptr; // [rsp+70h] [rbp-3A0h]
  unsigned int *group_id; // [rsp+78h] [rbp-398h]
  data::NewActivityCondGroupExcelConfig *group_conf_ptr; // [rsp+80h] [rbp-390h]
  std::vector<unsigned int> *__for_range_1; // [rsp+88h] [rbp-388h]
  unsigned int *cond_id; // [rsp+90h] [rbp-380h]
  char v84[880]; // [rsp+A0h] [rbp-370h] BYREF

  v2 = (unsigned __int64)v84;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(832LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 32 4 12 coin_id:1245 48 4 9 <unknown> 64 8 16 __for_begin:1201 96 8 14 __for_end:1201 128 8 1"
                        "6 __for_begin:1203 160 8 14 __for_end:1203 192 8 16 __for_begin:1208 224 8 14 __for_end:1208 256"
                        " 8 16 __for_begin:1220 288 8 14 __for_end:1220 320 8 16 __for_begin:1245 352 8 14 __for_end:1245"
                        " 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> "
                        "704 32 9 <unknown> 768 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -202116109;
  ret = 0;
  __for_range = &this->new_activity_excel_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityExcelConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityExcelConfig>::iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::NewActivityExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false> *)(v2 + 96)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false> *const)(v2 + 64));
    activity_id = std::get<0ul,unsigned int const,data::NewActivityExcelConfig>(__in);
    activity_config = std::get<1ul,unsigned int const,data::NewActivityExcelConfig>(__in);
    __for_range_0 = &activity_config->cond_group_id;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<unsigned int>::iterator *)(v2 + 128) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::vector<unsigned int>::iterator *)(v2 + 160) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v2 + 160);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 160)) )
        break;
      v7 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 128));
      group_id = v7;
      v8 = this;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      v9 = *group_id;
      group_conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityCondGroupExcelConfig(v8, v9);
      if ( group_conf_ptr )
      {
        __for_range_1 = &group_conf_ptr->cond_id;
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 192, v9);
        *(std::vector<unsigned int>::iterator *)(v2 + 192) = std::vector<unsigned int>::begin(__for_range_1);
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 224, v9);
        *(std::vector<unsigned int>::iterator *)(v2 + 224) = std::vector<unsigned int>::end(__for_range_1);
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 192),
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 224)) )
        {
          v10 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 192));
          cond_id = v10;
          v11 = this;
          if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v10);
          }
          if ( data::NewActivityExcelConfigMgrBase::findNewActivityCondExcelConfig(v11, *cond_id) )
          {
            v12 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                    &this->activity_cond_set_map,
                    activity_id);
            v13 = std::unordered_set<unsigned int>::insert(v12, cond_id);
            if ( !v13.second )
            {
              *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 384, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 384),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "rewriteNewActivityExcelConfig",
                1215);
              v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 384),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v15 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      v14,
                      (const char (*)[19])"duplicate cond_id:");
              v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, cond_id);
              v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      v16,
                      (const char (*)[17])" in activity_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, activity_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
              *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
          }
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 192));
        }
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    __for_range_2 = &activity_config->watcher_id;
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 256, v6);
    *(std::vector<unsigned int>::iterator *)(v2 + 256) = std::vector<unsigned int>::begin(__for_range_2);
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 288, v6);
    *(std::vector<unsigned int>::iterator *)(v2 + 288) = std::vector<unsigned int>::end(__for_range_2);
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 256),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 288)) )
    {
      v18 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 256));
      watcher_id = v18;
      v19 = this;
      if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v18);
      }
      v20 = *watcher_id;
      watcher_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityWatcherConfig(v19, v20);
      if ( !watcher_config_ptr )
        goto LABEL_47;
      if ( *(char *)(((unsigned __int64)&watcher_config_ptr->is_disuse >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&watcher_config_ptr->is_disuse, v20, &watcher_config_ptr->is_disuse);
      if ( !watcher_config_ptr->is_disuse )
      {
        v26 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                &this->activity_watcher_set_map,
                activity_id);
        v27 = std::unordered_set<unsigned int>::insert(v26, watcher_id);
        if ( !v27.second )
        {
          *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteNewActivityExcelConfig",
            1231);
          v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v30 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v29,
                  (const char (*)[22])"duplicate watcher_id:");
          v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, watcher_id);
          v32 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v31,
                  (const char (*)[17])" in activity_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, activity_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
          *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        v33 = std::unordered_map<unsigned int,unsigned int>::emplace<unsigned int &,unsigned int const&>(
                &this->watcher_activity_map,
                watcher_id,
                activity_id,
                (unsigned int *)&this->watcher_activity_map,
                v28);
        if ( !v33.second )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteNewActivityExcelConfig",
            1236);
          v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v35 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  v34,
                  (const char (*)[27])"duplicate used watcher_id:");
          v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, watcher_id);
          v37 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v36,
                  (const char (*)[17])" in activity_id:");
          v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, activity_id);
          v39 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v38,
                  (const char (*)[18])" and activity_id:");
          v40 = std::unordered_map<unsigned int,unsigned int>::operator[](&this->watcher_activity_map, watcher_id);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, v40);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      else
      {
LABEL_47:
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteNewActivityExcelConfig",
          1225);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 448),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v21, (const char (*)[12])"watcher_id:");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, watcher_id);
        v24 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v23,
                (const char (*)[17])" in activity_id:");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, activity_id);
        common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v25, (const char (*)[12])" is invalid");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 256));
    }
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
    v41 = (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(((_BYTE)activity_config
                                                                                               + 73) & 7);
    v42 = (*(_BYTE *)(((unsigned __int64)&activity_config->is_clear_activity_bin >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v41 >= *(_BYTE *)(((unsigned __int64)&activity_config->is_clear_activity_bin >> 3) + 0x7FFF8000));
    if ( (_BYTE)v42 )
      __asan_report_load1(&activity_config->is_clear_activity_bin, v41, v42);
    if ( activity_config->is_clear_activity_bin )
    {
      v41 = activity_id;
      std::set<unsigned int>::insert(&this->clear_bin_activity_id_set, activity_id);
    }
    __for_range_3 = &activity_config->activity_coin_id_list;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 320, v41);
    *(std::vector<unsigned int>::iterator *)(v2 + 320) = std::vector<unsigned int>::begin(__for_range_3);
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 352, v41);
    *(std::vector<unsigned int>::iterator *)(v2 + 352) = std::vector<unsigned int>::end(__for_range_3);
    while ( 1 )
    {
      v43 = (char *)(v2 + 352);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 320),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 352)) )
        break;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
      v44 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 320));
      v45 = (int *)v44;
      if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v44 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v44);
      }
      v46 = *v45;
      v47 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
      if ( v47 != 0 && v47 <= 3 )
      {
        LOBYTE(v43) = v47 != 0;
        __asan_report_store4(v2 + 32, v43);
      }
      *(_DWORD *)(v2 + 32) = v46;
      if ( !proto::VirtualItem_IsValid(*(_DWORD *)(v2 + 32)) )
      {
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteNewActivityExcelConfig",
          1249);
        v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 640),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v49 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(v48, (const char (*)[48])byte_1AB7AF60);
        v50 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v49,
                (const unsigned int *)(v2 + 32));
        v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v50,
                (const char (*)[16])", activity_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, activity_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
      }
      else
      {
        p_material_config_mgr = &txt_config_mgr->material_config_mgr;
        if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 32);
        v53 = *(unsigned int *)(v2 + 32);
        if ( data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(p_material_config_mgr, v53) )
        {
          p_coin_type_activity_id_map = &this->coin_type_activity_id_map;
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 32);
          v60 = *(_DWORD *)(v2 + 32);
          v61 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
          if ( v61 != 0 && v61 <= 3 )
          {
            v60 = v2 + 48;
            LOBYTE(v53) = v61 != 0;
            __asan_report_store4(v2 + 48, v53);
          }
          *(_DWORD *)(v2 + 48) = v60;
          v62 = std::map<proto::VirtualItem,unsigned int>::emplace<proto::VirtualItem,unsigned int const&>(
                  p_coin_type_activity_id_map,
                  (proto::VirtualItem *)(v2 + 48),
                  activity_id,
                  (proto::VirtualItem *)p_coin_type_activity_id_map,
                  v54);
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
          if ( !v62.second )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityExcelConfig",
              1262);
            v63 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 768),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v64 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                    v63,
                    (const char (*)[47])byte_1AB7B060);
            v65 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v64,
                    (const unsigned int *)(v2 + 32));
            v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    v65,
                    (const char (*)[16])", activity_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v66, activity_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
        }
        else
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 704, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 704),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteNewActivityExcelConfig",
            1256);
          v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 704),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v56 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(v55, (const char (*)[62])byte_1AB7B000);
          v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v56,
                  (const unsigned int *)(v2 + 32));
          v58 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v57,
                  (const char (*)[16])", activity_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v58, activity_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 320));
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false> *const)(v2 + 64));
  }
  if ( v84 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 104) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return ret;
};

// Line 1273: range 0000000013561490-0000000013561DC8
__int64 __fastcall NewActivityExcelConfigMgr::genQuestCond(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr,
        uint32_t activity_id,
        uint32_t cond_id,
        const std::vector<data::NewActivityExec> *exec_vec,
        ActivityCondExecPolicy exec_policy)
{
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  char *v9; // rsi
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  __int64 v11; // rsi
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned __int64 v15; // rax
  data::QuestCond *v16; // rax
  data::QuestCond *v17; // rdx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned __int64 v21; // rax
  __int64 result; // rax
  unsigned int ret; // [rsp+34h] [rbp-1FCh]
  const data::NewActivityExec *exec; // [rsp+40h] [rbp-1F0h]
  const std::vector<std::string> *__for_range_0; // [rsp+48h] [rbp-1E8h]
  const std::string *elem; // [rsp+50h] [rbp-1E0h]
  data::QuestExcelConfig *quest_config; // [rsp+58h] [rbp-1D8h]
  char v32[464]; // [rsp+60h] [rbp-1D0h] BYREF

  v6 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(416LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "10 32 4 13 quest_id:1282 48 4 12 cond_id:1272 64 4 16 exec_policy:1272 80 8 16 __for_begin:1275 "
                        "112 8 14 __for_end:1275 144 8 16 __for_begin:1280 176 8 14 __for_end:1280 208 32 9 <unknown> 272"
                        " 32 9 <unknown> 336 40 9 cond:1292";
  *(_QWORD *)(v6 + 16) = NewActivityExcelConfigMgr::genQuestCond;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556924;
  v8[536862722] = 61956;
  v8[536862722] = -234881024;
  v8[536862723] = 62194;
  v8[536862723] = -234881024;
  v8[536862724] = 62194;
  v8[536862724] = -234881024;
  v8[536862725] = 62194;
  v8[536862725] = -234881024;
  v8[536862726] = 62194;
  v8[536862727] = -219021312;
  v8[536862728] = 62194;
  v8[536862729] = -219021312;
  v8[536862730] = 62194;
  v8[536862731] = -218103808;
  v8[536862732] = -202116109;
  *(_DWORD *)(v6 + 48) = cond_id;
  *(_DWORD *)(v6 + 64) = exec_policy;
  ret = 0;
  if ( *(_BYTE *)(((v6 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v6 + 80, txt_config_mgr);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v6 + 80) = std::vector<data::NewActivityExec>::begin(exec_vec);
  if ( *(_BYTE *)(((v6 + 112) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v6 + 112, txt_config_mgr);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v6 + 112) = std::vector<data::NewActivityExec>::end(exec_vec);
  while ( 1 )
  {
    v9 = (char *)(v6 + 112);
    if ( !__gnu_cxx::operator!=<data::NewActivityExec const*,std::vector<data::NewActivityExec>>(
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v6 + 80),
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v6 + 112)) )
      break;
    exec = __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v6 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    if ( exec->type == NEW_ACTIVITY_ACTION_ACCEPT_QUEST && std::vector<std::string>::size(&exec->param) )
    {
      __for_range_0 = &exec->param;
      *(_BYTE *)(((v6 + 144) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 144) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 144, v9);
      *(std::vector<std::string>::const_iterator *)(v6 + 144) = std::vector<std::string>::begin(__for_range_0);
      *(_BYTE *)(((v6 + 176) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 176) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 176, v9);
      *(std::vector<std::string>::const_iterator *)(v6 + 176) = std::vector<std::string>::end(__for_range_0);
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v6 + 144),
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v6 + 176)) )
      {
        elem = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v6 + 144));
        *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v6 + 32, v6 + 176);
        *(_DWORD *)(v6 + 32) = 0;
        if ( !common::tools::StringUtils::strToNum<unsigned int>(elem, (unsigned int *)(v6 + 32), 1) )
        {
          p_quest_config_mgr = &txt_config_mgr->quest_config_mgr;
          if ( *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v6 + 32);
          v11 = *(unsigned int *)(v6 + 32);
          quest_config = data::QuestExcelConfigMgrBase::findQuestExcelConfig(p_quest_config_mgr, v11);
          if ( quest_config )
          {
            v15 = ((v6 + 336) >> 3) + 2147450880;
            *(_DWORD *)v15 = 0;
            *(_BYTE *)(v15 + 4) = 0;
            data::QuestCond::QuestCond((data::QuestCond *const)(v6 + 336));
            if ( *(_BYTE *)(((v6 + 344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 344) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v6 + 344, v11);
            *(_DWORD *)(v6 + 344) = 30;
            std::vector<int>::emplace_back<unsigned int &>(
              (std::vector<int> *const)(v6 + 352),
              (unsigned int *)(v6 + 48),
              (unsigned int *)(v6 + 352));
            std::vector<int>::emplace_back<ActivityCondExecPolicy &>(
              (std::vector<int> *const)(v6 + 352),
              (ActivityCondExecPolicy *)(v6 + 64),
              (ActivityCondExecPolicy *)(v6 + 352));
            v16 = std::move<data::QuestCond &>((data::QuestCond *)(v6 + 336));
            std::vector<data::QuestCond>::emplace_back<data::QuestCond>(&quest_config->accept_cond, v16, v17);
            *(_DWORD *)(((v6 + 272) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v6 + 272) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v6 + 303) >> 3) + 0x7FFF8000) != 0
              && (char)((v6 + 47) & 7) >= *(_BYTE *)(((v6 + 303) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v6 + 272, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v6 + 272),
              &common::milog::MiLogDefault::default_log_obj_,
              2u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "genQuestCond",
              1297);
            v18 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                    (common::milog::MiLogStream *const)(v6 + 272),
                    (const char (*)[10])"quest_id:");
            v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v18,
                    (const unsigned int *)(v6 + 32));
            v20 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                    v19,
                    (const char (*)[43])" accept cond add QUEST_COND_ACTIVITY_COND ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v6 + 48));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 272));
            *(_DWORD *)(((v6 + 272) >> 3) + 0x7FFF8000) = -117901064;
            data::QuestCond::~QuestCond((data::QuestCond *const)(v6 + 336));
          }
          else
          {
            ret = -1;
            *(_DWORD *)(((v6 + 208) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v6 + 208) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v6 + 239) >> 3) + 0x7FFF8000) != 0
              && (char)((v6 - 96 + 79) & 7) >= *(_BYTE *)(((v6 + 239) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v6 + 208, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v6 + 208),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "genQuestCond",
              1289);
            v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v6 + 208),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v12,
                    (const char (*)[20])byte_1AB7B200);
            v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v13,
                    (const unsigned int *)(v6 + 32));
            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v14, (const char (*)[34])byte_1AB7B240);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 208));
            *(_DWORD *)(((v6 + 208) >> 3) + 0x7FFF8000) = -117901064;
          }
        }
        *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) = -8;
        v21 = ((v6 + 336) >> 3) + 2147450880;
        *(_DWORD *)v21 = -117901064;
        *(_BYTE *)(v21 + 4) = -8;
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v6 + 144));
      }
      *(_BYTE *)(((v6 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v6 + 176) >> 3) + 0x7FFF8000) = -8;
    }
    __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v6 + 80));
  }
  result = ret;
  if ( v32 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 1305: range 0000000013561DCA-00000000135631F7
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityExcelConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::NewActivityType *p_activity_type; // rax
  data::NewActivityType *v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v11; // rax
  const NewActivityExcelConfigMgr *v12; // rcx
  __int64 v13; // rsi
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  char *v18; // rsi
  unsigned int *v19; // rax
  int *v20; // rdx
  int v21; // ecx
  char v22; // al
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  __int64 v27; // rsi
  __int64 v28; // rdx
  ExhibitionExcelConfigMgr *p_exhibition_config_mgr; // rcx
  unsigned int *v30; // rax
  int *v31; // rdx
  int v32; // ecx
  char v33; // al
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v38; // rax
  const NewActivityExcelConfigMgr *v39; // rcx
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  WatcherExcelConfigMgr *p_watcher_config_mgr; // rcx
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rdx
  int32_t result; // eax
  bool have_error; // [rsp+17h] [rbp-399h]
  data::NewActivityExcelConfigMap *__for_range; // [rsp+18h] [rbp-398h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::reference v51; // [rsp+20h] [rbp-390h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityExcelConfig> >::type *activity_id; // [rsp+28h] [rbp-388h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityExcelConfig> >::type *activity_config; // [rsp+30h] [rbp-380h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+38h] [rbp-378h]
  const std::set<unsigned int> *series_id_set_ptr; // [rsp+40h] [rbp-370h]
  const data::ExhibitionSeriesExcelConfig *series_config_ptr; // [rsp+50h] [rbp-360h]
  const std::vector<unsigned int> *__for_range_3; // [rsp+58h] [rbp-358h]
  const unsigned int *watcher_id; // [rsp+60h] [rbp-350h]
  const unsigned int *group_id; // [rsp+70h] [rbp-340h]
  const data::NewActivityCondGroupExcelConfig *group_conf_ptr; // [rsp+78h] [rbp-338h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+80h] [rbp-330h]
  char v62[800]; // [rsp+90h] [rbp-320h] BYREF

  v2 = (unsigned __int64)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(768LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 32 4 12 cond_id:1326 48 4 14 series_id:1349 64 8 16 __for_begin:1307 96 8 14 __for_end:1307 1"
                        "28 8 16 __for_begin:1317 160 8 14 __for_end:1317 192 8 16 __for_begin:1326 224 8 14 __for_end:13"
                        "26 256 8 16 __for_begin:1349 288 8 14 __for_end:1349 320 8 16 __for_begin:1365 352 8 14 __for_en"
                        "d:1365 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unk"
                        "nown> 704 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::checkNewActivityExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -202116109;
  have_error = 0;
  __for_range = &this->new_activity_excel_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityExcelConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityExcelConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::NewActivityExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityExcelConfig>,false> *)(v2 + 96)) )
  {
    v51 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false> *const)(v2 + 64));
    activity_id = std::get<0ul,unsigned int const,data::NewActivityExcelConfig>(v51);
    activity_config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityExcelConfig>(v51);
    p_activity_type = &activity_config->activity_type;
    v6 = (data::NewActivityType *)((((_BYTE)activity_config + 12) & 7u) + 3);
    if ( *(_BYTE *)(((unsigned __int64)p_activity_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_activity_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_activity_type >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(p_activity_type);
    }
    if ( !data::isValidNewActivityType(activity_config->activity_type) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityExcelConfig",
        1313);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 384),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v7, (const char (*)[14])"activity_id: ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, activity_id);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              v9,
              (const char (*)[27])" has error activity_type: ");
      v6 = &activity_config->activity_type;
      common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(
        v10,
        &activity_config->activity_type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
    }
    __for_range_0 = &activity_config->cond_group_id;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v6);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 128) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v6);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 160) = std::vector<unsigned int>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 160)) )
    {
      v11 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
      group_id = v11;
      v12 = this;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      v13 = *group_id;
      group_conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityCondGroupExcelConfig(v12, v13);
      if ( group_conf_ptr )
      {
        __for_range_1 = &group_conf_ptr->cond_id;
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 192, v13);
        *(std::vector<unsigned int>::const_iterator *)(v2 + 192) = std::vector<unsigned int>::begin(__for_range_1);
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 224, v13);
        *(std::vector<unsigned int>::const_iterator *)(v2 + 224) = std::vector<unsigned int>::end(__for_range_1);
        while ( 1 )
        {
          v18 = (char *)(v2 + 224);
          if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 192),
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 224)) )
            break;
          *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
          v19 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
          v20 = (int *)v19;
          if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v19);
          }
          v21 = *v20;
          v22 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
          if ( v22 != 0 && v22 <= 3 )
          {
            LOBYTE(v18) = v22 != 0;
            __asan_report_store4(v2 + 32, v18);
          }
          *(_DWORD *)(v2 + 32) = v21;
          if ( !data::NewActivityExcelConfigMgrBase::findNewActivityCondExcelConfig(this, *(unsigned int *)(v2 + 32)) )
          {
            have_error = 1;
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "checkNewActivityExcelConfig",
              1332);
            v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 512),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])"group_id: ");
            v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, group_id);
            v26 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                    v25,
                    (const char (*)[21])" has error cond_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v2 + 32));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
          }
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 192));
        }
        *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      }
      else
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityExcelConfig",
          1323);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 448),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v14, (const char (*)[14])"activity_id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, activity_id);
        v17 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                v16,
                (const char (*)[22])" has error group_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, group_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    v27 = ((_BYTE)activity_config + 73) & 7;
    v28 = (*(_BYTE *)(((unsigned __int64)&activity_config->is_clear_activity_bin >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v27 >= *(_BYTE *)(((unsigned __int64)&activity_config->is_clear_activity_bin >> 3) + 0x7FFF8000));
    if ( (_BYTE)v28 )
      __asan_report_load1(&activity_config->is_clear_activity_bin, v27, v28);
    if ( activity_config->is_clear_activity_bin )
    {
      p_exhibition_config_mgr = &txt_config_mgr->exhibition_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)activity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(activity_id);
      }
      v27 = *activity_id;
      series_id_set_ptr = ExhibitionExcelConfigMgr::getSeriesIdSetByActivityId(p_exhibition_config_mgr, v27);
      if ( series_id_set_ptr )
      {
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 256, v27);
        *(std::set<unsigned int>::iterator *)(v2 + 256) = std::set<unsigned int>::begin(series_id_set_ptr);
        *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 288, v27);
        *(std::set<unsigned int>::iterator *)(v2 + 288) = std::set<unsigned int>::end(series_id_set_ptr);
        while ( 1 )
        {
          v27 = v2 + 288;
          if ( !std::operator!=(
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v2 + 256),
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v2 + 288)) )
            break;
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
          v30 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v2 + 256));
          v31 = (int *)v30;
          if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v30);
          }
          v32 = *v31;
          v33 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
          if ( v33 != 0 && v33 <= 3 )
          {
            LOBYTE(v27) = v33 != 0;
            __asan_report_store4(v2 + 48, v27);
          }
          *(_DWORD *)(v2 + 48) = v32;
          series_config_ptr = data::ExhibitionExcelConfigMgrBase::findExhibitionSeriesExcelConfig(
                                &txt_config_mgr->exhibition_config_mgr,
                                *(unsigned int *)(v2 + 48));
          if ( series_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&series_config_ptr->series_type >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)series_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&series_config_ptr->series_type >> 3)
                                                                               + 0x7FFF8000) )
            {
              __asan_report_load4(&series_config_ptr->series_type);
            }
            if ( series_config_ptr->series_type == EXHIBITION_SERIES_ACTIVITY )
            {
              if ( *(char *)(((unsigned __int64)&series_config_ptr->is_reset_when_start >> 3) + 0x7FFF8000) < 0 )
                __asan_report_load1(
                  &series_config_ptr->is_reset_when_start,
                  (((_BYTE)series_config_ptr + 12) & 7u) + 3,
                  &series_config_ptr->is_reset_when_start);
              if ( !series_config_ptr->is_reset_when_start )
              {
                have_error = 1;
                *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 576, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 576),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "checkNewActivityExcelConfig",
                  1359);
                v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 576),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v35 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v34,
                        (const char (*)[14])"activity_id: ");
                v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, activity_id);
                v37 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                        v36,
                        (const char (*)[27])" has not clean series id: ");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v37,
                  (const unsigned int *)(v2 + 48));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
                *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
              }
            }
          }
          std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v2 + 256));
        }
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      }
    }
    __for_range_3 = &activity_config->watcher_id;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 320, v27);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 320) = std::vector<unsigned int>::begin(__for_range_3);
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 352, v27);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 352) = std::vector<unsigned int>::end(__for_range_3);
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 320),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 352)) )
    {
      v38 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 320));
      watcher_id = v38;
      v39 = this;
      if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v38 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v38);
      }
      if ( !data::NewActivityExcelConfigMgrBase::findNewActivityWatcherConfig(v39, *watcher_id) )
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityExcelConfig",
          1371);
        v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 640),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v41 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v40, (const char (*)[14])"activity_id: ");
        v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, activity_id);
        v43 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                v42,
                (const char (*)[24])" has error watcher_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, watcher_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
      }
      p_watcher_config_mgr = &txt_config_mgr->watcher_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)watcher_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)watcher_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)watcher_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(watcher_id);
      }
      if ( !WatcherExcelConfigMgr::findWatcherConfig(p_watcher_config_mgr, *watcher_id) )
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 704, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 704),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityExcelConfig",
          1377);
        v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 704),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v46 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                v45,
                (const char (*)[30])"findWatcherConfig failed, id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, watcher_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 320));
    }
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityExcelConfig>,false,false> *const)(v2 + 64));
  }
  if ( have_error )
    result = -1;
  else
    result = 0;
  if ( v62 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 96) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1386: range 00000000135631F8-00000000135636DF
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityCondGroupExcelConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>,bool> v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  int32_t result; // eax
  bool is_error; // [rsp+1Fh] [rbp-131h]
  data::NewActivityCondGroupExcelConfigMap *__for_range; // [rsp+20h] [rbp-130h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false>::reference __in; // [rsp+28h] [rbp-128h]
  const unsigned int *group_id; // [rsp+30h] [rbp-120h]
  std::vector<unsigned int> *__for_range_0; // [rsp+40h] [rbp-110h]
  unsigned int *cond_id; // [rsp+48h] [rbp-108h]
  char v18[256]; // [rsp+50h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 16 __for_begin:1389 64 8 14 __for_end:1389 96 8 16 __for_begin:1391 128 8 14 __for_end:13"
                        "91 160 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityCondGroupExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -202116109;
  is_error = 0;
  __for_range = &this->new_activity_cond_group_excel_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false> *)(v2 + 64)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false> *const)(v2 + 32));
    group_id = std::get<0ul,unsigned int const,data::NewActivityCondGroupExcelConfig>(__in);
    __for_range_0 = &std::get<1ul,unsigned int const,data::NewActivityCondGroupExcelConfig>(__in)->cond_id;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::vector<unsigned int>::iterator *)(v2 + 96) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<unsigned int>::iterator *)(v2 + 128) = std::vector<unsigned int>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v2 + 128)) )
    {
      cond_id = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 96));
      v6 = std::unordered_map<unsigned int,unsigned int>::try_emplace<unsigned int const&>(
             &this->cond_to_condgroup_map,
             cond_id,
             group_id,
             (const unsigned int *)&this->cond_to_condgroup_map);
      if ( !v6.second )
      {
        is_error = 1;
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 160, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 160),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteNewActivityCondGroupExcelConfig",
          1396);
        v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 160),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v8 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
               v7,
               (const char (*)[40])"cond in multiple cond groups, cond_id: ");
        v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, cond_id);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v9, (const char (*)[16])"cond_group_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, group_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false> *const)(v2 + 32));
  }
  if ( is_error )
    result = -1;
  else
    result = 0;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1406: range 00000000135636E0-0000000013563BFD
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityCondGroupExcelConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v6; // rax
  const NewActivityExcelConfigMgr *v7; // rcx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  int32_t result; // eax
  bool have_error; // [rsp+17h] [rbp-139h]
  data::NewActivityCondGroupExcelConfigMap *__for_range; // [rsp+18h] [rbp-138h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false>::reference v15; // [rsp+20h] [rbp-130h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig> >::type *group_id; // [rsp+28h] [rbp-128h]
  std::vector<unsigned int> *__for_range_0; // [rsp+38h] [rbp-118h]
  const unsigned int *cond_id; // [rsp+40h] [rbp-110h]
  char v19[256]; // [rsp+50h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 8 16 __for_begin:1408 64 8 14 __for_end:1408 96 8 16 __for_begin:1411 128 8 14 __for_end:14"
                        "11 160 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::checkNewActivityCondGroupExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -202116109;
  have_error = 0;
  __for_range = &this->new_activity_cond_group_excel_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::const_iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityCondGroupExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false> *)(v2 + 64)) )
      break;
    v15 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false> *const)(v2 + 32));
    group_id = std::get<0ul,unsigned int const,data::NewActivityCondGroupExcelConfig>(v15);
    __for_range_0 = &std::get<1ul,unsigned int const,data::NewActivityCondGroupExcelConfig>(v15)->cond_id;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 96) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 128) = std::vector<unsigned int>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 128)) )
    {
      v6 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 96));
      cond_id = v6;
      v7 = this;
      if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v6);
      }
      if ( !data::NewActivityExcelConfigMgrBase::findNewActivityCondExcelConfig(v7, *cond_id) )
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 160, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 160),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityCondGroupExcelConfig",
          1417);
        v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 160),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])"group_id: ");
        v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, group_id);
        v11 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                v10,
                (const char (*)[21])" has error cond_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, cond_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
        *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondGroupExcelConfig>,false,false> *const)(v2 + 32));
  }
  if ( have_error )
    result = -1;
  else
    result = 0;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1427: range 0000000013563BFE-0000000013563C28
ActivityGroupType __cdecl NewActivityExcelConfigMgr::getActivityGroupType(data::NewActivityActionType type)
{
  if ( type == NEW_ACTIVITY_ACTION_FORBID_GROUP )
    return 1;
  if ( type == NEW_ACTIVITY_ACTION_ACTIVE_GROUP )
    return 2;
  return 0;
};

// Line 1443: range 0000000013563C2A-0000000013564844
_BOOL8 __fastcall NewActivityExcelConfigMgr::rewriteGroupAction(
        TxtConfigMgr *txt_config_mgr,
        __int64 cond_id,
        uint32_t main_secen_id,
        const std::vector<data::NewActivityExec> *exec_vec,
        std::set<unsigned int> *check_set)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  char *v8; // rsi
  ActivityGroupType ActivityGroupType; // edx
  char v10; // al
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  ActivityGroupType *v31; // rcx
  std::pair<unsigned int,ActivityGroupType> *v32; // r8
  _BOOL8 result; // rax
  bool have_error; // [rsp+27h] [rbp-259h]
  const data::NewActivityExec *exec; // [rsp+30h] [rbp-250h]
  const std::vector<std::string> *__for_range_0; // [rsp+38h] [rbp-248h]
  const std::string *param; // [rsp+40h] [rbp-240h]
  GroupInfoScriptConfig *group_info_config; // [rsp+48h] [rbp-238h]
  char v41[560]; // [rsp+50h] [rbp-230h] BYREF

  v5 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(512LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 48 4 24 activity_group_type:1447 64 4 13 group_id:1452 80 4 12 cond_id:1442 96 8 16 __for_beg"
                        "in:1445 128 8 14 __for_end:1445 160 8 16 __for_begin:1450 192 8 14 __for_end:1450 224 8 9 <unkno"
                        "wn> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = NewActivityExcelConfigMgr::rewriteGroupAction;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -234556924;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862726] = -218959360;
  v7[536862727] = -218959360;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -202116109;
  *(_DWORD *)(v5 + 80) = cond_id;
  have_error = 0;
  if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 96, cond_id);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v5 + 96) = std::vector<data::NewActivityExec>::begin(exec_vec);
  if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 128, cond_id);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v5 + 128) = std::vector<data::NewActivityExec>::end(exec_vec);
  while ( 1 )
  {
    v8 = (char *)(v5 + 128);
    if ( !__gnu_cxx::operator!=<data::NewActivityExec const*,std::vector<data::NewActivityExec>>(
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v5 + 96),
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v5 + 128)) )
      break;
    exec = __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v5 + 96));
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    ActivityGroupType = NewActivityExcelConfigMgr::getActivityGroupType(exec->type);
    v10 = *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000);
    LOBYTE(v8) = v10 != 0;
    if ( v10 != 0 && v10 <= 3 )
      __asan_report_store4(v5 + 48, v8);
    *(_DWORD *)(v5 + 48) = ActivityGroupType;
    if ( *(_DWORD *)(v5 + 48) )
    {
      __for_range_0 = &exec->param;
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 160, v8);
      *(std::vector<std::string>::const_iterator *)(v5 + 160) = std::vector<std::string>::begin(__for_range_0);
      *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 192, v8);
      *(std::vector<std::string>::const_iterator *)(v5 + 192) = std::vector<std::string>::end(__for_range_0);
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v5 + 160),
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v5 + 192)) )
      {
        param = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v5 + 160));
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 64, v5 + 192);
        *(_DWORD *)(v5 + 64) = 0;
        if ( common::tools::StringUtils::strToNum<unsigned int>(param, (unsigned int *)(v5 + 64), 1) )
        {
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteGroupAction",
            1455);
          v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v11, (const char (*)[10])"strToNum ");
          v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, param);
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          have_error = 1;
        }
        else
        {
          p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
          if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v5 + 64);
          group_info_config = LuaConfigMgr::findGroupInfoConfigNoConst(p_lua_config_mgr, *(_DWORD *)(v5 + 64));
          if ( group_info_config )
          {
            if ( *(_BYTE *)(((unsigned __int64)&group_info_config->activity_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&group_info_config->activity_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&group_info_config->activity_id);
            }
            if ( group_info_config->activity_id
              && !NewActivityExcelConfigMgr::isActivityContainsCondId(
                    &txt_config_mgr->new_activity_config_mgr,
                    group_info_config->activity_id,
                    *(_DWORD *)(v5 + 80)) )
            {
              *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 384, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 384),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "rewriteGroupAction",
                1475);
              v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 384),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v21 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
                      v20,
                      (const char (*)[66])byte_1AB7BC20);
              v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v21,
                      (const unsigned int *)(v5 + 64));
              v23 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v22,
                      (const char (*)[14])" activity_id:");
              v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v23,
                      &group_info_config->activity_id);
              v25 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      v24,
                      (const char (*)[10])" cond_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v5 + 80));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
              *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
              have_error = 1;
            }
            else
            {
              v26 = std::set<unsigned int>::insert(check_set, (const std::set<unsigned int>::value_type *)(v5 + 64));
              if ( !v26.second )
              {
                *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 448) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 448, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 448),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "rewriteGroupAction",
                  1482);
                v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v5 + 448),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v28 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                        v27,
                        (const char (*)[62])byte_1AB7BCE0);
                v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v28,
                        (const unsigned int *)(v5 + 64));
                v30 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                        v29,
                        (const char (*)[10])" cond_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v30,
                  (const unsigned int *)(v5 + 80));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 448));
                *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
                have_error = 1;
              }
              else
              {
                *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = 0;
                std::pair<unsigned int,ActivityGroupType>::pair<unsigned int &,ActivityGroupType&,true>(
                  (std::pair<unsigned int,ActivityGroupType> *const)(v5 + 224),
                  (unsigned int *)(v5 + 80),
                  (ActivityGroupType *)(v5 + 48));
                std::multimap<unsigned int,std::pair<unsigned int,ActivityGroupType>>::emplace<ActivityGroupType&,std::pair<unsigned int,ActivityGroupType>>(
                  &group_info_config->cond_mmap,
                  (ActivityGroupType *)(v5 + 48),
                  (std::pair<unsigned int,ActivityGroupType> *)(v5 + 224),
                  v31,
                  v32);
                *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = -8;
              }
            }
          }
          else
          {
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteGroupAction",
              1463);
            v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v16 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                    v15,
                    (const char (*)[67])byte_1AB7BB60);
            v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v16,
                    (const unsigned int *)(v5 + 64));
            v18 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v17, (const char (*)[10])" cond_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v5 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            have_error = 1;
          }
        }
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v5 + 160));
      }
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
    __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v5 + 96));
  }
  result = !have_error;
  if ( v41 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1495: range 0000000013564846-00000000135680BC
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityCondExcelConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  char *v6; // rsi
  unsigned int *v7; // rax
  int *v8; // rdx
  int v9; // ecx
  char v10; // al
  std::unordered_set<unsigned int> *v11; // rdx
  unsigned __int64 v12; // rax
  const std::vector<data::NewActivityExec> *p_meet_exec; // rcx
  uint32_t v14; // edi
  common::milog::MiLogStream *v15; // rax
  char *v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  std::vector<int>::const_reference v19; // rax
  _DWORD *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  std::vector<int>::const_reference v23; // rax
  unsigned int *v24; // rdx
  __int64 v25; // rsi
  std::unordered_set<unsigned int> *v26; // r15
  std::unordered_set<unsigned int>::const_iterator v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // r15
  std::vector<int>::size_type v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rdx
  int v35; // eax
  std::vector<int>::const_reference v36; // rax
  unsigned int *v37; // rdx
  __int64 v38; // rsi
  std::vector<int>::const_reference v39; // rax
  unsigned int *v40; // rdx
  __int64 v41; // rsi
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rdx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rdx
  std::unordered_set<unsigned int> *v51; // r15
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *M_cur; // rsi
  char *v53; // rsi
  unsigned int *v54; // rax
  int *v55; // rdx
  int v56; // ecx
  char v57; // al
  std::set<unsigned int> *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rdx
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rdx
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v63; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  __int64 v65; // rsi
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rdx
  std::unordered_set<unsigned int> *p_schedule_cond_finish_quest_set; // rcx
  int v70; // edi
  char v71; // al
  common::milog::MiLogStream *v72; // rax
  char *v73; // rsi
  int *v74; // rax
  int *v75; // rdx
  int v76; // ecx
  char v77; // al
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  std::vector<int>::const_reference v84; // rax
  unsigned int *v85; // rdx
  __int64 v86; // rsi
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // rax
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // r15
  std::vector<int>::size_type v94; // rax
  std::vector<int>::const_reference v95; // rax
  unsigned int *v96; // rdx
  __int64 v97; // rsi
  char *v98; // rsi
  common::milog::MiLogStream *v99; // rax
  common::milog::MiLogStream *v100; // rdx
  common::milog::MiLogStream *v101; // rax
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // rdx
  common::milog::MiLogStream *v104; // rax
  unsigned __int64 v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *__last; // [rsp+8h] [rbp-928h]
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *__lasta; // [rsp+8h] [rbp-928h]
  int32_t ret; // [rsp+20h] [rbp-910h]
  uint32_t main_secen_id; // [rsp+24h] [rbp-90Ch]
  size_t idx; // [rsp+28h] [rbp-908h]
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *__for_range; // [rsp+30h] [rbp-900h]
  data::NewActivityCondExcelConfigMap *__for_range_1; // [rsp+38h] [rbp-8F8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false>::reference __in; // [rsp+40h] [rbp-8F0h]
  const unsigned int *cond_id; // [rsp+48h] [rbp-8E8h]
  std::tuple_element<1,std::pair<unsigned int const,data::NewActivityCondExcelConfig> >::type *cond_config; // [rsp+50h] [rbp-8E0h]
  std::vector<data::NewActivityCond> *__for_range_2; // [rsp+58h] [rbp-8D8h]
  std::vector<data::NewActivityExec> *__for_range_6; // [rsp+60h] [rbp-8D0h]
  std::vector<data::NewActivityExec> *__for_range_7; // [rsp+68h] [rbp-8C8h]
  data::NewActivityExec *exec_0; // [rsp+70h] [rbp-8C0h]
  data::NewActivityExec *exec; // [rsp+78h] [rbp-8B8h]
  const data::NewActivityCond *cond; // [rsp+80h] [rbp-8B0h]
  const std::vector<int> *__for_range_5; // [rsp+88h] [rbp-8A8h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+90h] [rbp-8A0h]
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::mapped_type *related_activity_id_set_0; // [rsp+98h] [rbp-898h]
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::mapped_type *related_activity_id_set; // [rsp+A8h] [rbp-888h]
  const std::vector<int> *__for_range_4; // [rsp+B0h] [rbp-880h]
  const int *quest_id; // [rsp+B8h] [rbp-878h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false>::reference v134; // [rsp+C0h] [rbp-870h]
  std::tuple_element<0,std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *activity_id; // [rsp+C8h] [rbp-868h]
  const std::tuple_element<1,std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *__for_range_0; // [rsp+D8h] [rbp-858h]
  char v137[2128]; // [rsp+E0h] [rbp-850h] BYREF

  v2 = (unsigned __int64)v137;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2080LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "49 32 4 12 cond_id:1499 48 4 12 talk_id:1547 64 4 13 group_id:1568 80 4 14 config_id:1569 96 4 1"
                        "6 activity_id:1585 112 4 9 <unknown> 128 4 15 watcher_id:1627 144 4 12 item_id:1647 160 4 16 off"
                        "ering_id:1667 176 8 16 __for_begin:1497 208 8 14 __for_end:1497 240 8 16 __for_begin:1499 272 8 "
                        "14 __for_end:1499 304 8 16 __for_begin:1507 336 8 14 __for_end:1507 368 8 16 __for_begin:1528 40"
                        "0 8 14 __for_end:1528 432 8 9 <unknown> 464 8 9 <unknown> 496 8 16 __for_begin:1585 528 8 14 __f"
                        "or_end:1585 560 8 16 __for_begin:1607 592 8 14 __for_end:1607 624 8 16 __for_begin:1627 656 8 14"
                        " __for_end:1627 688 8 9 <unknown> 720 8 16 __for_begin:1680 752 8 14 __for_end:1680 784 8 16 __f"
                        "or_begin:1689 816 8 14 __for_end:1689 848 32 9 <unknown> 912 32 9 <unknown> 976 32 9 <unknown> 1"
                        "040 32 9 <unknown> 1104 32 9 <unknown> 1168 32 9 <unknown> 1232 32 9 <unknown> 1296 32 9 <unknow"
                        "n> 1360 32 9 <unknown> 1424 32 9 <unknown> 1488 32 9 <unknown> 1552 32 9 <unknown> 1616 32 9 <un"
                        "known> 1680 32 9 <unknown> 1744 32 9 <unknown> 1808 32 9 <unknown> 1872 32 9 <unknown> 1936 32 9"
                        " <unknown> 2000 48 14 check_set:1509";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityCondExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -234556924;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = 61956;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862729] = -234881024;
  v4[536862730] = 62194;
  v4[536862730] = -234881024;
  v4[536862731] = 62194;
  v4[536862731] = -234881024;
  v4[536862732] = 62194;
  v4[536862732] = -234881024;
  v4[536862733] = 62194;
  v4[536862733] = -234881024;
  v4[536862734] = 62194;
  v4[536862734] = -234881024;
  v4[536862735] = 62194;
  v4[536862735] = -234881024;
  v4[536862736] = 62194;
  v4[536862736] = -234881024;
  v4[536862737] = 62194;
  v4[536862737] = -234881024;
  v4[536862738] = 62194;
  v4[536862738] = -234881024;
  v4[536862739] = 62194;
  v4[536862739] = -234881024;
  v4[536862740] = 62194;
  v4[536862740] = -234881024;
  v4[536862741] = 62194;
  v4[536862741] = -234881024;
  v4[536862742] = 62194;
  v4[536862742] = -234881024;
  v4[536862743] = 62194;
  v4[536862743] = -234881024;
  v4[536862744] = 62194;
  v4[536862744] = -234881024;
  v4[536862745] = 62194;
  v4[536862745] = -234881024;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -219021312;
  v4[536862752] = 62194;
  v4[536862753] = -219021312;
  v4[536862754] = 62194;
  v4[536862755] = -219021312;
  v4[536862756] = 62194;
  v4[536862757] = -219021312;
  v4[536862758] = 62194;
  v4[536862759] = -219021312;
  v4[536862760] = 62194;
  v4[536862761] = -219021312;
  v4[536862762] = 62194;
  v4[536862763] = -219021312;
  v4[536862764] = 62194;
  v4[536862765] = -219021312;
  v4[536862766] = 62194;
  v4[536862767] = -219021312;
  v4[536862768] = 62194;
  v4[536862769] = -219021312;
  v4[536862770] = 62194;
  v4[536862771] = -219021312;
  v4[536862772] = 62194;
  v4[536862773] = -219021312;
  v4[536862774] = 62194;
  v4[536862775] = -219021312;
  v4[536862776] = 62194;
  v4[536862777] = -219021312;
  v4[536862778] = 62194;
  v4[536862779] = -219021312;
  v4[536862780] = 62194;
  v4[536862781] = -219021312;
  v4[536862782] = 62194;
  v4[536862784] = -202116109;
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::clear(&this->cond_activity_set_map);
  __for_range = &this->activity_cond_set_map;
  if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 176, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::iterator *)(v2 + 176) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 208, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::iterator *)(v2 + 208) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 208);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 176),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 208)) )
      break;
    v134 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 176));
    activity_id = std::get<0ul,unsigned int const,std::unordered_set<unsigned int>>(v134);
    __for_range_0 = std::get<1ul,unsigned int const,std::unordered_set<unsigned int>>(v134);
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, v5);
    *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 240) = std::unordered_set<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 272, v5);
    *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 272) = std::unordered_set<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v2 + 272);
      if ( !std::__detail::operator!=<unsigned int,false>(
              (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 240),
              (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 272)) )
        break;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
      v7 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 240));
      v8 = (int *)v7;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      v9 = *v8;
      v10 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
      if ( v10 != 0 && v10 <= 3 )
      {
        LOBYTE(v6) = v10 != 0;
        __asan_report_store4(v2 + 32, v6);
      }
      *(_DWORD *)(v2 + 32) = v9;
      v11 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
              &this->cond_activity_set_map,
              (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 32));
      std::unordered_set<unsigned int>::insert(v11, activity_id);
      std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 240));
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 176));
  }
  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
  ret = 0;
  main_secen_id = TxtConfigMgr::getDefaultWorldMainSceneId(txt_config_mgr);
  __for_range_1 = &this->new_activity_cond_excel_config_map;
  *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 304, v5);
  *(std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::iterator *)(v2 + 304) = std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::begin(__for_range_1);
  *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 336, v5);
  *(std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::iterator *)(v2 + 336) = std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::end(__for_range_1);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false> *)(v2 + 304),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false> *)(v2 + 336)) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false> *const)(v2 + 304));
    cond_id = std::get<0ul,unsigned int const,data::NewActivityCondExcelConfig>(__in);
    cond_config = std::get<1ul,unsigned int const,data::NewActivityCondExcelConfig>(__in);
    v12 = ((v2 + 2000) >> 3) + 2147450880;
    *(_DWORD *)v12 = 0;
    *(_WORD *)(v12 + 4) = 0;
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 2000));
    p_meet_exec = &cond_config->meet_exec;
    v14 = main_secen_id;
    if ( *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)cond_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) )
    {
      v14 = (unsigned int)cond_id;
      __asan_report_load4(cond_id);
    }
    if ( !NewActivityExcelConfigMgr::rewriteGroupAction(
            txt_config_mgr,
            *cond_id,
            v14,
            p_meet_exec,
            (std::set<unsigned int> *)(v2 + 2000)) )
    {
      *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 848) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 879) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 848, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 848),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteNewActivityCondExcelConfig",
        1512);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 848),
              (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        v15,
        (const char (*)[26])"rewrite group_exec failed");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 848));
      *(_DWORD *)(((v2 + 848) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    common::tools::MiscUtils::removeEmptyElement<data::NewActivityCond,data::NewActivityCondType data::NewActivityCond::*>(
      &cond_config->cond,
      (data::NewActivityCondType *)8);
    __for_range_2 = &cond_config->cond;
    *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 368, 8LL);
    *(std::vector<data::NewActivityCond>::iterator *)(v2 + 368) = std::vector<data::NewActivityCond>::begin(__for_range_2);
    *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 400, 8LL);
    *(std::vector<data::NewActivityCond>::iterator *)(v2 + 400) = std::vector<data::NewActivityCond>::end(__for_range_2);
    while ( 1 )
    {
      v16 = (char *)(v2 + 400);
      if ( !__gnu_cxx::operator!=<data::NewActivityCond *,std::vector<data::NewActivityCond>>(
              (const __gnu_cxx::__normal_iterator<data::NewActivityCond*,std::vector<data::NewActivityCond> > *)(v2 + 368),
              (const __gnu_cxx::__normal_iterator<data::NewActivityCond*,std::vector<data::NewActivityCond> > *)(v2 + 400)) )
        break;
      cond = __gnu_cxx::__normal_iterator<data::NewActivityCond *,std::vector<data::NewActivityCond>>::operator*((const __gnu_cxx::__normal_iterator<data::NewActivityCond*,std::vector<data::NewActivityCond> > *const)(v2 + 368));
      if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&cond->type);
      }
      switch ( cond->type )
      {
        case NEW_ACTIVITY_COND_NONE:
          *(_DWORD *)(((v2 + 1296) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1296) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1327) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 1327) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1296, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1296),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteNewActivityCondExcelConfig",
            1594);
          v59 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1296),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v60 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v59,
                  (const char (*)[25])"cond.type is 0, cond_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, cond_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1296));
          *(_DWORD *)(((v2 + 1296) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
          break;
        case NEW_ACTIVITY_COND_QUEST_FINISH:
        case NEW_ACTIVITY_COND_QUEST_FINISH_ALLOW_QUICK_OPEN:
          if ( std::vector<int>::empty(&cond->param) )
          {
            *(_DWORD *)(((v2 + 1360) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1360) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1391) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 1391) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1360, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1360),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityCondExcelConfig",
              1603);
            v61 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1360),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v62 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    v61,
                    (const char (*)[39])"activity cond param is empty, cond_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v62, cond_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1360));
            *(_DWORD *)(((v2 + 1360) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            __for_range_4 = &cond->param;
            *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 560, v16);
            *(std::vector<int>::const_iterator *)(v2 + 560) = std::vector<int>::begin(__for_range_4);
            *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 592, v16);
            *(std::vector<int>::const_iterator *)(v2 + 592) = std::vector<int>::end(__for_range_4);
            while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                      (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 560),
                      (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 592)) )
            {
              v63 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 560));
              quest_id = v63;
              p_quest_config_mgr = &txt_config_mgr->quest_config_mgr;
              if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v63);
              }
              v65 = *(unsigned int *)quest_id;
              if ( !data::QuestExcelConfigMgrBase::findQuestExcelConfig(p_quest_config_mgr, v65) )
              {
                *(_DWORD *)(((v2 + 1424) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1424) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1455) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 1455) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1424, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1424),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "rewriteNewActivityCondExcelConfig",
                  1611);
                v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1424),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v67 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                        v66,
                        (const char (*)[22])byte_1AB7A100);
                v68 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                        v67,
                        (const char (*)[23])" quest_id is invalid: ");
                common::milog::MiLogStream::operator<<<int,(int *)0>(v68, quest_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1424));
                *(_DWORD *)(((v2 + 1424) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
                break;
              }
              p_schedule_cond_finish_quest_set = &this->schedule_cond_finish_quest_set;
              *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 4;
              if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3)
                                                                           + 0x7FFF8000) )
              {
                __asan_report_load4(quest_id);
              }
              v70 = *quest_id;
              v71 = *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000);
              if ( v71 != 0 && v71 <= 3 )
              {
                v70 = v2 + 112;
                LOBYTE(v65) = v71 != 0;
                __asan_report_store4(v2 + 112, v65);
              }
              *(_DWORD *)(v2 + 112) = v70;
              std::unordered_set<unsigned int>::insert(
                p_schedule_cond_finish_quest_set,
                (std::unordered_set<unsigned int>::value_type *)(v2 + 112));
              *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
              __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 560));
            }
            *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
          }
          break;
        case NEW_ACTIVITY_COND_FINISH_TALK:
        case NEW_ACTIVITY_COND_NOT_FINISH_TALK:
          if ( std::vector<int>::empty(&cond->param) )
          {
            *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 912) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 943) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 912, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 912),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityCondExcelConfig",
              1537);
            v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 912),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v18 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    v17,
                    (const char (*)[39])"activity cond param is empty, cond_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, cond_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 912));
            *(_DWORD *)(((v2 + 912) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            v19 = std::vector<int>::operator[](&cond->param, 0LL);
            v20 = v19;
            if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v19);
            }
            if ( *v20 )
            {
              *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
              v23 = std::vector<int>::operator[](&cond->param, 0LL);
              v24 = (unsigned int *)v23;
              if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v23);
              }
              v25 = *v24;
              if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v2 + 48, v25);
              *(_DWORD *)(v2 + 48) = v25;
              related_activity_id_set = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                                          &this->cond_activity_set_map,
                                          cond_id);
              v26 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                      &this->talk_id_activity_map,
                      (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
              __last = std::unordered_set<unsigned int>::end(related_activity_id_set)._M_cur;
              v27._M_cur = std::unordered_set<unsigned int>::begin(related_activity_id_set)._M_cur;
              std::unordered_set<unsigned int>::insert<std::__detail::_Node_const_iterator<unsigned int,true,false>>(
                v26,
                v27,
                (std::__detail::_Node_const_iterator<unsigned int,true,false>)__last);
            }
            else
            {
              *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 976) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1007) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 976, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 976),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "rewriteNewActivityCondExcelConfig",
                1543);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 976),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                      v21,
                      (const char (*)[35])"activity cond param is 0, cond_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, cond_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 976));
              *(_DWORD *)(((v2 + 976) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
          }
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
          break;
        case NEW_ACTIVITY_COND_CREATE_NPC:
          if ( std::vector<int>::empty(&cond->param) )
          {
            *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1040) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 1071) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1040, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1040),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityCondExcelConfig",
              1556);
            v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1040),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v29 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    v28,
                    (const char (*)[39])"activity cond param is empty, cond_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, cond_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1040));
            *(_DWORD *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            for ( idx = 0LL; idx < std::vector<int>::size(&cond->param); idx += 2LL )
            {
              if ( idx + 1 < std::vector<int>::size(&cond->param) )
              {
                *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 4;
                v36 = std::vector<int>::operator[](&cond->param, idx);
                v37 = (unsigned int *)v36;
                if ( *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v36 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v36);
                }
                v38 = *v37;
                if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_store4(v2 + 64, v38);
                *(_DWORD *)(v2 + 64) = v38;
                *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 4;
                v39 = std::vector<int>::operator[](&cond->param, idx + 1);
                v40 = (unsigned int *)v39;
                if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v39);
                }
                v41 = *v40;
                if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_store4(v2 + 80, v41);
                *(_DWORD *)(v2 + 80) = v41;
                p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
                if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v2 + 64);
                group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(p_lua_config_mgr, *(_DWORD *)(v2 + 64));
                if ( group_script_config_ptr )
                {
                  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v2 + 80);
                  if ( GroupScriptConfig::findNpcConfig(group_script_config_ptr, *(unsigned int *)(v2 + 80)) )
                  {
                    related_activity_id_set_0 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                                                  &this->cond_activity_set_map,
                                                  cond_id);
                    *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 464, cond_id);
                    *(std::pair<unsigned int,unsigned int> *)(v2 + 464) = std::make_pair<unsigned int &,unsigned int &>(
                                                                            (unsigned int *)(v2 + 64),
                                                                            (unsigned int *)(v2 + 80));
                    v51 = std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>>::operator[](
                            &this->group_config_activity_map,
                            (std::map<std::pair<unsigned int,unsigned int>,std::unordered_set<unsigned int>>::key_type *)(v2 + 464));
                    __lasta = std::unordered_set<unsigned int>::end(related_activity_id_set_0)._M_cur;
                    M_cur = std::unordered_set<unsigned int>::begin(related_activity_id_set_0)._M_cur;
                    std::unordered_set<unsigned int>::insert<std::__detail::_Node_const_iterator<unsigned int,true,false>>(
                      v51,
                      (std::__detail::_Node_const_iterator<unsigned int,true,false>)M_cur,
                      (std::__detail::_Node_const_iterator<unsigned int,true,false>)__lasta);
                    *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 496, M_cur);
                    *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 496) = std::unordered_set<unsigned int>::begin(related_activity_id_set_0);
                    *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 528, M_cur);
                    *(std::unordered_set<unsigned int>::const_iterator *)(v2 + 528) = std::unordered_set<unsigned int>::end(related_activity_id_set_0);
                    while ( 1 )
                    {
                      v53 = (char *)(v2 + 528);
                      if ( !std::__detail::operator!=<unsigned int,false>(
                              (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 496),
                              (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v2 + 528)) )
                        break;
                      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 4;
                      v54 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 496));
                      v55 = (int *)v54;
                      if ( *(_BYTE *)(((unsigned __int64)v54 >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)v54 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v54 >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_load4(v54);
                      }
                      v56 = *v55;
                      v57 = *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000);
                      if ( v57 != 0 && v57 <= 3 )
                      {
                        LOBYTE(v53) = v57 != 0;
                        __asan_report_store4(v2 + 96, v53);
                      }
                      *(_DWORD *)(v2 + 96) = v56;
                      v58 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                              &this->activity_create_npc_group_map,
                              (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 96));
                      std::set<unsigned int>::insert(v58, (const std::set<unsigned int>::value_type *)(v2 + 64));
                      std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v2 + 496));
                    }
                    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
                    v35 = 1;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1232) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1232) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1263) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1263) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1232, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1232),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                      "rewriteNewActivityCondExcelConfig",
                      1579);
                    v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 1232),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v48 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                            v47,
                            (const char (*)[29])byte_1AB7C380);
                    v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                            v48,
                            (const unsigned int *)(v2 + 80));
                    v50 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                            v49,
                            (const char (*)[10])" cond_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, cond_id);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1232));
                    *(_DWORD *)(((v2 + 1232) >> 3) + 0x7FFF8000) = -117901064;
                    ret = -1;
                    v35 = 0;
                  }
                }
                else
                {
                  *(_DWORD *)(((v2 + 1168) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1168) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1199) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 1199) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1168, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1168),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                    "rewriteNewActivityCondExcelConfig",
                    1573);
                  v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1168),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v44 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                          v43,
                          (const char (*)[25])byte_1AB7C340);
                  v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v44,
                          (const unsigned int *)(v2 + 64));
                  v46 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                          v45,
                          (const char (*)[10])" cond_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, cond_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1168));
                  *(_DWORD *)(((v2 + 1168) >> 3) + 0x7FFF8000) = -117901064;
                  ret = -1;
                  v35 = 0;
                }
              }
              else
              {
                *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1104) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 1135) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1104, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1104),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "rewriteNewActivityCondExcelConfig",
                  1564);
                v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1104),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v31 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                        v30,
                        (const char (*)[28])byte_1AB7C300);
                *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
                v32 = std::vector<int>::size(&cond->param);
                if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) )
                  v32 = __asan_report_store8(v2 + 432, byte_1AB7C300);
                *(_QWORD *)(v2 + 432) = v32;
                v33 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                        v31,
                        (const unsigned __int64 *)(v2 + 432));
                v34 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                        v33,
                        (const char (*)[10])" cond_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, cond_id);
                *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1104));
                *(_DWORD *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
                v35 = 0;
              }
              *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
              if ( v35 != 1 )
                break;
            }
          }
          break;
        case NEW_ACTIVITY_COND_FINISH_WATCHER:
          if ( std::vector<int>::empty(&cond->param) )
          {
            *(_DWORD *)(((v2 + 1488) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1488) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1519) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1519) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1488, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1488),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityCondExcelConfig",
              1623);
            v72 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    (common::milog::MiLogStream *const)(v2 + 1488),
                    (const char (*)[34])"cond param size error, cond_type:");
            common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
              v72,
              &cond->type);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1488));
            *(_DWORD *)(((v2 + 1488) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          else
          {
            __for_range_5 = &cond->param;
            *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 624, v16);
            *(std::vector<int>::const_iterator *)(v2 + 624) = std::vector<int>::begin(__for_range_5);
            *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v2 + 656, v16);
            *(std::vector<int>::const_iterator *)(v2 + 656) = std::vector<int>::end(__for_range_5);
            while ( 1 )
            {
              v73 = (char *)(v2 + 656);
              if ( !__gnu_cxx::operator!=<int const*,std::vector<int>>(
                      (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 624),
                      (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 656)) )
                break;
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 4;
              v74 = (int *)__gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 624));
              v75 = v74;
              if ( *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v74 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v74);
              }
              v76 = *v75;
              v77 = *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000);
              if ( v77 != 0 && v77 <= 3 )
              {
                LOBYTE(v73) = v77 != 0;
                __asan_report_store4(v2 + 128, v73);
              }
              *(_DWORD *)(v2 + 128) = v76;
              if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,data::NewActivityWatcherConfig>,int>(
                      &this->new_activity_watcher_config_map,
                      (const int *)(v2 + 128)) )
              {
                *(_DWORD *)(((v2 + 1552) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1552) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1583) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 1583) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1552, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1552),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "rewriteNewActivityCondExcelConfig",
                  1631);
                v78 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1552),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v79 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                        v78,
                        (const char (*)[40])byte_1AB7C460);
                common::milog::MiLogStream::operator<<<int,(int *)0>(v79, (const int *)(v2 + 128));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1552));
                *(_DWORD *)(((v2 + 1552) >> 3) + 0x7FFF8000) = -117901064;
                ret = -1;
                break;
              }
              __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 624));
            }
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
          }
          break;
        case NEW_ACTIVITY_COND_ITEM_COUNT_GREATER:
          if ( std::vector<int>::size(&cond->param) > 1 )
          {
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 4;
            v84 = std::vector<int>::operator[](&cond->param, 0LL);
            v85 = (unsigned int *)v84;
            if ( *(_BYTE *)(((unsigned __int64)v84 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v84 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v84 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v84);
            }
            v86 = *v85;
            if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v2 + 144, v86);
            *(_DWORD *)(v2 + 144) = v86;
            if ( !ItemExcelConfigMgr::findItemConfig(&txt_config_mgr->item_config_mgr, *(unsigned int *)(v2 + 144)) )
            {
              *(_DWORD *)(((v2 + 1680) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1680) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1711) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 1711) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1680, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1680),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "rewriteNewActivityCondExcelConfig",
                1650);
              v87 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1680),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v88 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v87,
                      (const char (*)[12])"cond_type: ");
              v89 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                      v88,
                      &cond->type);
              v90 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v89,
                      (const char (*)[11])" item_id: ");
              v91 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v90,
                      (const unsigned int *)(v2 + 144));
              common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v91, (const char (*)[12])" not found.");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1680));
              *(_DWORD *)(((v2 + 1680) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            std::unordered_set<unsigned int>::insert(
              &this->activity_cond_item_set,
              (const std::unordered_set<unsigned int>::value_type *)(v2 + 144));
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
          }
          else
          {
            *(_DWORD *)(((v2 + 1616) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1616) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1647) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 1647) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1616, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1616),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityCondExcelConfig",
              1642);
            v80 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1616),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v81 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v80,
                    (const char (*)[12])"cond_type: ");
            v82 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                    v81,
                    &cond->type);
            v83 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v82,
                    (const char (*)[20])" param not enough: ");
            common::milog::MiLogStream::operator<<<int>(v83, &cond->param);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1616));
            *(_DWORD *)(((v2 + 1616) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          break;
        case NEW_ACTIVITY_COND_OFFERING_LEVEL_GREAT_EQUAL:
          if ( std::vector<int>::size(&cond->param) > 1 )
          {
            *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 4;
            v95 = std::vector<int>::operator[](&cond->param, 0LL);
            v96 = (unsigned int *)v95;
            if ( *(_BYTE *)(((unsigned __int64)v95 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v95 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v95 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v95);
            }
            v97 = *v96;
            if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v2 + 160, v97);
            *(_DWORD *)(v2 + 160) = v97;
            std::set<unsigned int>::insert(
              &this->activity_cond_offering_id_set,
              (const std::set<unsigned int>::value_type *)(v2 + 160));
            *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
          }
          else
          {
            *(_DWORD *)(((v2 + 1744) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1744) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1775) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 1775) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1744, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1744),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteNewActivityCondExcelConfig",
              1661);
            v92 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1744),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v93 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                    v92,
                    (const char (*)[37])"param size not enough, param.size():");
            *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = 0;
            v94 = std::vector<int>::size(&cond->param);
            if ( *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) )
              v94 = __asan_report_store8(v2 + 688, "param size not enough, param.size():");
            *(_QWORD *)(v2 + 688) = v94;
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v93,
              (const unsigned __int64 *)(v2 + 688));
            *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1744));
            *(_DWORD *)(((v2 + 1744) >> 3) + 0x7FFF8000) = -117901064;
            ret = -1;
          }
          break;
        default:
          break;
      }
      __gnu_cxx::__normal_iterator<data::NewActivityCond *,std::vector<data::NewActivityCond>>::operator++((__gnu_cxx::__normal_iterator<data::NewActivityCond*,std::vector<data::NewActivityCond> > *const)(v2 + 368));
    }
    *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
    __for_range_6 = &cond_config->meet_exec;
    *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 720, v16);
    *(std::vector<data::NewActivityExec>::iterator *)(v2 + 720) = std::vector<data::NewActivityExec>::begin(__for_range_6);
    *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 752, v16);
    *(std::vector<data::NewActivityExec>::iterator *)(v2 + 752) = std::vector<data::NewActivityExec>::end(__for_range_6);
    while ( 1 )
    {
      v98 = (char *)(v2 + 752);
      if ( !__gnu_cxx::operator!=<data::NewActivityExec *,std::vector<data::NewActivityExec>>(
              (const __gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v2 + 720),
              (const __gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v2 + 752)) )
        break;
      exec = __gnu_cxx::__normal_iterator<data::NewActivityExec *,std::vector<data::NewActivityExec>>::operator*((const __gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v2 + 720));
      if ( *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)cond_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(cond_id);
      }
      if ( NewActivityExcelConfigMgr::rewriteExecConfig(this, txt_config_mgr, exec, *cond_id, 1) )
      {
        ret = -1;
        *(_DWORD *)(((v2 + 1808) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1808) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1839) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 47) & 7) >= *(_BYTE *)(((v2 + 1839) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1808, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1808),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteNewActivityCondExcelConfig",
          1685);
        v99 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1808),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v100 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v99, (const char (*)[9])"cond_id:");
        v101 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v100, cond_id);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          v101,
          (const char (*)[23])"rewrite MeetExec fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1808));
        *(_DWORD *)(((v2 + 1808) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<data::NewActivityExec *,std::vector<data::NewActivityExec>>::operator++((__gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v2 + 720));
    }
    *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
    __for_range_7 = &cond_config->expire_exec;
    *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 784, v98);
    *(std::vector<data::NewActivityExec>::iterator *)(v2 + 784) = std::vector<data::NewActivityExec>::begin(__for_range_7);
    *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 816, v98);
    *(std::vector<data::NewActivityExec>::iterator *)(v2 + 816) = std::vector<data::NewActivityExec>::end(__for_range_7);
    while ( __gnu_cxx::operator!=<data::NewActivityExec *,std::vector<data::NewActivityExec>>(
              (const __gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v2 + 784),
              (const __gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v2 + 816)) )
    {
      exec_0 = __gnu_cxx::__normal_iterator<data::NewActivityExec *,std::vector<data::NewActivityExec>>::operator*((const __gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v2 + 784));
      if ( *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)cond_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(cond_id);
      }
      if ( NewActivityExcelConfigMgr::rewriteExecConfig(this, txt_config_mgr, exec_0, *cond_id, 0) )
      {
        ret = -1;
        *(_DWORD *)(((v2 + 1872) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1872) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1903) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 1903) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1872, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1872),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteNewActivityCondExcelConfig",
          1694);
        v102 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 1872),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v103 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v102, (const char (*)[9])"cond_id:");
        v104 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v103, cond_id);
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          v104,
          (const char (*)[25])"rewrite ExpireExec fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1872));
        *(_DWORD *)(((v2 + 1872) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<data::NewActivityExec *,std::vector<data::NewActivityExec>>::operator++((__gnu_cxx::__normal_iterator<data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v2 + 784));
    }
    *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = -8;
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 2000));
    v105 = ((v2 + 2000) >> 3) + 2147450880;
    *(_DWORD *)v105 = -117901064;
    *(_WORD *)(v105 + 4) = -1800;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false> *const)(v2 + 304));
  }
  *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
  *(_DWORD *)(((v2 + 1936) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 1936) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 1967) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 81) & 7) >= *(_BYTE *)(((v2 + 1967) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 1936, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 1936),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "rewriteNewActivityCondExcelConfig",
    1700);
  v106 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           (common::milog::MiLogStream *const)(v2 + 1936),
           (const char (*)[26])" banner conds map, meet: ");
  v107 = common::milog::MiLogStream::operator<<<unsigned int,std::set<unsigned int>>(
           v106,
           &this->activity_banner_meet_cond_ids_map);
  v108 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v107, (const char (*)[11])"; expire: ");
  common::milog::MiLogStream::operator<<<unsigned int,std::set<unsigned int>>(
    v108,
    &this->activity_banner_expire_cond_ids_map);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1936));
  if ( v137 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80FC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 260) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2080LL, v137);
  }
  return ret;
};

// Line 1706: range 00000000135680BE-0000000013571143
bool __cdecl NewActivityExcelConfigMgr::isCondValid(
        const data::NewActivityCond *cond,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::vector<int>::size_type v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v10; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::vector<int>::const_reference v20; // rax
  unsigned int *v21; // rdx
  __int64 v22; // rsi
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::vector<int>::const_reference v31; // rax
  unsigned int *v32; // rdx
  __int64 v33; // rsi
  std::vector<int>::const_reference v34; // rax
  unsigned int *v35; // rdx
  __int64 v36; // rsi
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  char *v50; // rsi
  int *v51; // rax
  int *v52; // rdx
  int v53; // ecx
  char v54; // al
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  std::vector<int>::const_reference v63; // rax
  unsigned int *v64; // rdx
  __int64 v65; // rsi
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  std::vector<int>::const_reference v74; // rax
  unsigned int *v75; // rdx
  __int64 v76; // rsi
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  std::vector<int>::const_reference v85; // rax
  unsigned int *v86; // rdx
  __int64 v87; // rsi
  std::vector<int>::const_reference v88; // rax
  unsigned int *v89; // rdx
  __int64 v90; // rsi
  const data::ActivityRegionSearchMgrBase *p_region_search_config_mgr; // rcx
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // rax
  common::milog::MiLogStream *v94; // rax
  common::milog::MiLogStream *v95; // rax
  const RegionSearchExcelConfigMgr *v96; // rcx
  __int64 v97; // rsi
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // rax
  common::milog::MiLogStream *v100; // rax
  common::milog::MiLogStream *v101; // rax
  bool v102; // al
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // rax
  common::milog::MiLogStream *v110; // rax
  std::vector<int>::const_reference v111; // rax
  unsigned int *v112; // rdx
  __int64 v113; // rsi
  common::milog::MiLogStream *v114; // rax
  common::milog::MiLogStream *v115; // rax
  common::milog::MiLogStream *v116; // rax
  common::milog::MiLogStream *v117; // rax
  common::milog::MiLogStream *v118; // rax
  common::milog::MiLogStream *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // rax
  __int64 v122; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v123; // rax
  int *v124; // rdx
  int v125; // ecx
  char v126; // al
  common::milog::MiLogStream *v127; // rax
  common::milog::MiLogStream *v128; // rax
  common::milog::MiLogStream *v129; // rax
  common::milog::MiLogStream *v130; // rax
  common::milog::MiLogStream *v131; // rax
  common::milog::MiLogStream *v132; // rax
  common::milog::MiLogStream *v133; // rax
  common::milog::MiLogStream *v134; // rax
  common::milog::MiLogStream *v135; // rax
  common::milog::MiLogStream *v136; // rax
  common::milog::MiLogStream *v137; // rax
  common::milog::MiLogStream *v138; // rax
  std::vector<int>::const_reference v139; // rax
  unsigned int *v140; // rdx
  __int64 v141; // rsi
  common::milog::MiLogStream *v142; // rax
  common::milog::MiLogStream *v143; // rax
  common::milog::MiLogStream *v144; // rax
  common::milog::MiLogStream *v145; // rax
  common::milog::MiLogStream *v146; // rax
  common::milog::MiLogStream *v147; // rax
  common::milog::MiLogStream *v148; // rax
  common::milog::MiLogStream *v149; // rax
  char *v150; // rsi
  int *v151; // rax
  int *v152; // rdx
  int v153; // ecx
  char v154; // al
  common::milog::MiLogStream *v155; // rax
  common::milog::MiLogStream *v156; // rax
  const ActivityChannellerSlabExcelConfigMgr *p_activity_channeller_slab_config_mgr; // rcx
  common::milog::MiLogStream *v158; // rax
  common::milog::MiLogStream *v159; // rax
  common::milog::MiLogStream *v160; // rax
  common::milog::MiLogStream *v161; // rax
  common::milog::MiLogStream *v162; // rax
  common::milog::MiLogStream *v163; // rax
  std::vector<int>::const_reference v164; // rax
  unsigned int *v165; // rdx
  __int64 v166; // rsi
  unsigned __int64 v167; // rcx
  std::vector<int>::const_reference v168; // rax
  unsigned int *v169; // rdx
  __int64 v170; // rsi
  JsonConfigMgr *p_json_config_mgr; // rsi
  int v172; // ecx
  uint32_t v173; // edx
  bool v174; // r15
  common::milog::MiLogStream *v175; // rax
  common::milog::MiLogStream *v176; // rax
  common::milog::MiLogStream *v177; // rax
  common::milog::MiLogStream *v178; // rax
  common::milog::MiLogStream *v179; // rax
  common::milog::MiLogStream *v180; // rax
  common::milog::MiLogStream *v181; // rax
  common::milog::MiLogStream *v182; // rax
  std::vector<int>::const_reference v183; // rax
  unsigned int *v184; // rdx
  __int64 v185; // rsi
  common::milog::MiLogStream *v186; // rax
  common::milog::MiLogStream *v187; // rax
  common::milog::MiLogStream *v188; // rax
  common::milog::MiLogStream *v189; // rax
  common::milog::MiLogStream *v190; // rax
  common::milog::MiLogStream *v191; // rax
  common::milog::MiLogStream *v192; // rax
  common::milog::MiLogStream *v193; // rax
  common::milog::MiLogStream *v194; // rax
  std::vector<int>::const_reference v195; // rax
  unsigned int *v196; // rdx
  __int64 v197; // rsi
  common::milog::MiLogStream *v198; // rax
  common::milog::MiLogStream *v199; // rax
  common::milog::MiLogStream *v200; // rax
  common::milog::MiLogStream *v201; // rax
  common::milog::MiLogStream *v202; // rax
  common::milog::MiLogStream *v203; // rax
  common::milog::MiLogStream *v204; // rax
  common::milog::MiLogStream *v205; // rax
  common::milog::MiLogStream *v206; // rax
  std::vector<int>::const_reference v207; // rax
  unsigned int *v208; // rdx
  __int64 v209; // rsi
  common::milog::MiLogStream *v210; // rax
  common::milog::MiLogStream *v211; // rax
  common::milog::MiLogStream *v212; // rax
  common::milog::MiLogStream *v213; // rax
  common::milog::MiLogStream *v214; // rax
  common::milog::MiLogStream *v215; // rax
  common::milog::MiLogStream *v216; // rax
  common::milog::MiLogStream *v217; // rax
  common::milog::MiLogStream *v218; // rax
  std::vector<int>::const_reference v219; // rax
  unsigned int *v220; // rdx
  __int64 v221; // rsi
  common::milog::MiLogStream *v222; // rax
  common::milog::MiLogStream *v223; // rax
  common::milog::MiLogStream *v224; // rax
  common::milog::MiLogStream *v225; // rax
  common::milog::MiLogStream *v226; // rax
  common::milog::MiLogStream *v227; // rax
  common::milog::MiLogStream *v228; // rax
  common::milog::MiLogStream *v229; // rax
  common::milog::MiLogStream *v230; // rax
  common::milog::MiLogStream *v231; // rax
  common::milog::MiLogStream *v232; // rax
  common::milog::MiLogStream *v233; // rax
  common::milog::MiLogStream *v234; // rax
  common::milog::MiLogStream *v235; // rax
  std::vector<int>::const_reference v236; // rax
  unsigned int *v237; // rdx
  common::milog::MiLogStream *v238; // rax
  common::milog::MiLogStream *v239; // rax
  common::milog::MiLogStream *v240; // rax
  common::milog::MiLogStream *v241; // rax
  common::milog::MiLogStream *v242; // rax
  common::milog::MiLogStream *v243; // rax
  common::milog::MiLogStream *v244; // rax
  common::milog::MiLogStream *v245; // rax
  common::milog::MiLogStream *v246; // rax
  common::milog::MiLogStream *v247; // rax
  common::milog::MiLogStream *v248; // rax
  common::milog::MiLogStream *v249; // rax
  std::vector<int>::const_reference v250; // rax
  unsigned int *v251; // rdx
  common::milog::MiLogStream *v252; // rax
  common::milog::MiLogStream *v253; // rax
  common::milog::MiLogStream *v254; // rax
  common::milog::MiLogStream *v255; // rax
  common::milog::MiLogStream *v256; // rax
  common::milog::MiLogStream *v257; // rax
  common::milog::MiLogStream *v258; // rax
  common::milog::MiLogStream *v259; // rax
  std::vector<int>::const_reference v260; // rax
  _DWORD *v261; // rdx
  common::milog::MiLogStream *v262; // rax
  common::milog::MiLogStream *v263; // rax
  common::milog::MiLogStream *v264; // rax
  common::milog::MiLogStream *v265; // rax
  common::milog::MiLogStream *v266; // rax
  common::milog::MiLogStream *v267; // rax
  common::milog::MiLogStream *v268; // rax
  common::milog::MiLogStream *v269; // rax
  std::vector<int>::const_reference v270; // rax
  _DWORD *v271; // rdx
  common::milog::MiLogStream *v272; // rax
  common::milog::MiLogStream *v273; // rax
  common::milog::MiLogStream *v274; // rax
  common::milog::MiLogStream *v275; // rax
  common::milog::MiLogStream *v276; // rax
  common::milog::MiLogStream *v277; // rax
  common::milog::MiLogStream *v278; // rax
  common::milog::MiLogStream *v279; // rax
  std::vector<int>::const_reference v280; // rax
  unsigned int *v281; // rdx
  __int64 v282; // rsi
  common::milog::MiLogStream *v283; // rax
  common::milog::MiLogStream *v284; // rax
  common::milog::MiLogStream *v285; // rax
  common::milog::MiLogStream *v286; // rax
  common::milog::MiLogStream *v287; // rax
  common::milog::MiLogStream *v288; // rax
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v289; // rax
  unsigned int *v290; // rdx
  __int64 v291; // rsi
  common::milog::MiLogStream *v292; // rax
  common::milog::MiLogStream *v293; // rax
  common::milog::MiLogStream *v294; // rax
  common::milog::MiLogStream *v295; // rax
  common::milog::MiLogStream *v296; // rax
  common::milog::MiLogStream *v297; // rax
  std::vector<int>::const_reference v298; // rax
  unsigned int *v299; // rdx
  __int64 v300; // rsi
  JsonConfigMgr *v301; // rcx
  common::milog::MiLogStream *v302; // rax
  common::milog::MiLogStream *v303; // rax
  common::milog::MiLogStream *v304; // rax
  common::milog::MiLogStream *v305; // rax
  common::milog::MiLogStream *v306; // rax
  common::milog::MiLogStream *v307; // rax
  common::milog::MiLogStream *v308; // rax
  common::milog::MiLogStream *v309; // rax
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v310; // rax
  unsigned int *v311; // rdx
  __int64 v312; // rsi
  common::milog::MiLogStream *v313; // rax
  common::milog::MiLogStream *v314; // rax
  common::milog::MiLogStream *v315; // rax
  common::milog::MiLogStream *v316; // rax
  common::milog::MiLogStream *v317; // rax
  common::milog::MiLogStream *v318; // rax
  std::vector<int>::const_reference v319; // rax
  unsigned int *v320; // rdx
  __int64 v321; // rsi
  common::milog::MiLogStream *v322; // rax
  common::milog::MiLogStream *v323; // rax
  common::milog::MiLogStream *v324; // rax
  common::milog::MiLogStream *v325; // rax
  common::milog::MiLogStream *v326; // rax
  common::milog::MiLogStream *v327; // rax
  std::vector<int>::const_reference v328; // rax
  unsigned int *v329; // rdx
  __int64 v330; // rsi
  uint32_t *v331; // rax
  uint32_t *v332; // rdx
  const OfferingExcelConfigMgr *p_offering_config_mgr; // rcx
  common::milog::MiLogStream *v334; // rax
  common::milog::MiLogStream *v335; // rax
  common::milog::MiLogStream *v336; // rax
  common::milog::MiLogStream *v337; // rax
  common::milog::MiLogStream *v338; // rax
  common::milog::MiLogStream *v339; // rax
  common::milog::MiLogStream *v340; // rax
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v341; // rax
  int *v342; // rdx
  common::milog::MiLogStream *v343; // rax
  common::milog::MiLogStream *v344; // r15
  const int *v345; // rax
  common::milog::MiLogStream *v346; // rax
  common::milog::MiLogStream *v347; // rax
  common::milog::MiLogStream *v348; // rax
  common::milog::MiLogStream *v349; // rax
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v350; // rax
  unsigned int *v351; // rdx
  __int64 v352; // rsi
  const data::ActivityRockBoardExploreExcelConfigMgrBase *p_activity_rock_board_explore_config_mgr; // rcx
  char v354; // al
  common::milog::MiLogStream *v355; // rax
  common::milog::MiLogStream *v356; // rax
  common::milog::MiLogStream *v357; // rax
  common::milog::MiLogStream *v358; // rax
  common::milog::MiLogStream *v359; // rax
  common::milog::MiLogStream *v360; // rax
  __gnu_cxx::__normal_iterator<int const*,std::vector<int> >::reference v361; // rax
  unsigned int *v362; // rdx
  __int64 v363; // rsi
  common::milog::MiLogStream *v364; // rax
  common::milog::MiLogStream *v365; // rax
  common::milog::MiLogStream *v366; // rax
  common::milog::MiLogStream *v367; // rax
  common::milog::MiLogStream *v368; // rax
  common::milog::MiLogStream *v369; // rax
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v370; // rax
  int *v371; // rdx
  common::milog::MiLogStream *v372; // rax
  common::milog::MiLogStream *v373; // r15
  const int *v374; // rax
  common::milog::MiLogStream *v375; // rax
  common::milog::MiLogStream *v376; // rax
  common::milog::MiLogStream *v377; // rax
  common::milog::MiLogStream *v378; // rax
  std::vector<int>::const_reference v379; // rax
  unsigned int *v380; // rdx
  common::milog::MiLogStream *v381; // rax
  common::milog::MiLogStream *v382; // rax
  common::milog::MiLogStream *v383; // rax
  common::milog::MiLogStream *v384; // rax
  common::milog::MiLogStream *v385; // rax
  common::milog::MiLogStream *v386; // rax
  common::milog::MiLogStream *v387; // rax
  common::milog::MiLogStream *v388; // rax
  std::vector<int>::const_reference v389; // rax
  unsigned int *v390; // rdx
  common::milog::MiLogStream *v391; // rax
  common::milog::MiLogStream *v392; // r15
  const int *v393; // rax
  common::milog::MiLogStream *v394; // rax
  common::milog::MiLogStream *v395; // rax
  common::milog::MiLogStream *v396; // rax
  common::milog::MiLogStream *v397; // rax
  __int64 v398; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v399; // rax
  int *v400; // rdx
  int v401; // ecx
  char v402; // al
  common::milog::MiLogStream *v403; // rax
  common::milog::MiLogStream *v404; // rax
  common::milog::MiLogStream *v405; // rax
  common::milog::MiLogStream *v406; // rax
  common::milog::MiLogStream *v407; // rax
  const TxtConfigMgr *txt_config_mgra; // [rsp+0h] [rbp-17E0h]
  bool rlt; // [rsp+1Bh] [rbp-17C5h]
  int i_0; // [rsp+1Ch] [rbp-17C4h]
  uint32_t offering_level; // [rsp+24h] [rbp-17BCh]
  size_t i; // [rsp+38h] [rbp-17A8h]
  std::vector<int> *__for_range_4; // [rsp+48h] [rbp-1798h]
  std::vector<int> *__for_range_5; // [rsp+50h] [rbp-1790h]
  std::vector<int> *__for_range_3; // [rsp+58h] [rbp-1788h]
  std::vector<int> *__for_range_2; // [rsp+60h] [rbp-1780h]
  const data::GroupLinksBundleExcelConfig *config_ptr; // [rsp+80h] [rbp-1760h]
  const std::unordered_set<unsigned int> *group_link_set_ptr; // [rsp+88h] [rbp-1758h]
  std::vector<int> *__for_range_1; // [rsp+98h] [rbp-1748h]
  const std::set<unsigned int> *search_set_ptr; // [rsp+A8h] [rbp-1738h]
  std::vector<int> *__for_range_0; // [rsp+B0h] [rbp-1730h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+B8h] [rbp-1728h]
  std::vector<int> *__for_range; // [rsp+C0h] [rbp-1720h]
  const int *quest_id; // [rsp+C8h] [rbp-1718h]
  char v426[5904]; // [rsp+D0h] [rbp-1710h] BYREF

  txt_config_mgra = txt_config_mgr;
  v2 = (unsigned __int64)v426;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_7(5856LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "120 48 4 12 talk_id:1752 64 4 13 group_id:1772 80 4 18 npc_config_id:1773 96 4 15 watcher_id:179"
                        "7 112 4 12 play_id:1816 128 4 12 play_id:1834 144 4 12 play_id:1852 160 4 14 search_id:1853 176 "
                        "4 18 mechanicus_id:1883 192 4 10 param:1908 208 4 16 schedule_id:1946 224 4 13 stage_id:1963 240"
                        " 4 13 scene_id:1990 256 4 13 point_id:1993 272 4 13 bonus_id:2013 288 4 12 item_id:2032 304 4 8 "
                        "key:2052 320 4 14 bundle_id:2070 336 4 13 stage_id:2183 352 4 13 level_id:2201 368 4 15 dungeon_"
                        "id:2221 384 4 11 pos_id:2237 400 4 13 stage_id:2258 416 4 16 offering_id:2281 432 4 13 stage_id:"
                        "2320 448 4 13 stage_id:2340 464 4 13 level_id:2415 480 8 16 param_count:1708 512 8 16 __for_begi"
                        "n:1730 544 8 14 __for_end:1730 576 8 16 __for_begin:1797 608 8 14 __for_end:1797 640 8 9 <unknow"
                        "n> 672 8 9 <unknown> 704 8 16 __for_begin:1963 736 8 14 __for_end:1963 768 8 16 __for_begin:2201"
                        " 800 8 14 __for_end:2201 832 8 16 __for_begin:2237 864 8 14 __for_end:2237 896 8 16 __for_begin:"
                        "2320 928 8 14 __for_end:2320 960 8 16 __for_begin:2340 992 8 14 __for_end:2340 1024 16 9 <unknow"
                        "n> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <un"
                        "known> 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 32 9 <unknown> 1568 32 9 <unknown> 1632 32 9"
                        " <unknown> 1696 32 9 <unknown> 1760 32 9 <unknown> 1824 32 9 <unknown> 1888 32 9 <unknown> 1952 "
                        "32 9 <unknown> 2016 32 9 <unknown> 2080 32 9 <unknown> 2144 32 9 <unknown> 2208 32 9 <unknown> 2"
                        "272 32 9 <unknown> 2336 32 9 <unknown> 2400 32 9 <unknown> 2464 32 9 <unknown> 2528 32 9 <unknow"
                        "n> 2592 32 9 <unknown> 2656 32 9 <unknown> 2720 32 9 <unknown> 2784 32 9 <unknown> 2848 32 9 <un"
                        "known> 2912 32 9 <unknown> 2976 32 9 <unknown> 3040 32 9 <unknown> 3104 32 9 <unknown> 3168 32 9"
                        " <unknown> 3232 32 9 <unknown> 3296 32 9 <unknown> 3360 32 9 <unknown> 3424 32 9 <unknown> 3488 "
                        "32 9 <unknown> 3552 32 9 <unknown> 3616 32 9 <unknown> 3680 32 9 <unknown> 3744 32 9 <unknown> 3"
                        "808 32 9 <unknown> 3872 32 9 <unknown> 3936 32 9 <unknown> 4000 32 9 <unknown> 4064 32 9 <unknow"
                        "n> 4128 32 9 <unknown> 4192 32 9 <unknown> 4256 32 9 <unknown> 4320 32 9 <unknown> 4384 32 9 <un"
                        "known> 4448 32 9 <unknown> 4512 32 9 <unknown> 4576 32 9 <unknown> 4640 32 9 <unknown> 4704 32 9"
                        " <unknown> 4768 32 9 <unknown> 4832 32 9 <unknown> 4896 32 9 <unknown> 4960 32 9 <unknown> 5024 "
                        "32 9 <unknown> 5088 32 9 <unknown> 5152 32 9 <unknown> 5216 32 9 <unknown> 5280 32 9 <unknown> 5"
                        "344 32 9 <unknown> 5408 32 9 <unknown> 5472 32 9 <unknown> 5536 32 9 <unknown> 5600 32 9 <unknow"
                        "n> 5664 32 9 <unknown> 5728 32 9 <unknown> 5792 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::isCondValid;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -234556924;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -234556924;
  v4[536862735] = -218959360;
  v4[536862736] = -218959360;
  v4[536862737] = -218959360;
  v4[536862738] = -218959360;
  v4[536862739] = -218959360;
  v4[536862740] = -218959360;
  v4[536862741] = -218959360;
  v4[536862742] = -218959360;
  v4[536862743] = -218959360;
  v4[536862744] = -218959360;
  v4[536862745] = -218959360;
  v4[536862746] = -218959360;
  v4[536862747] = -218959360;
  v4[536862748] = -218959360;
  v4[536862749] = -218959360;
  v4[536862750] = -218959360;
  v4[536862751] = -218959360;
  v4[536862752] = -219021312;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -218959118;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -218959118;
  v4[536862780] = -218959118;
  v4[536862782] = -218959118;
  v4[536862784] = -218959118;
  v4[536862786] = -218959118;
  v4[536862788] = -218959118;
  v4[536862790] = -218959118;
  v4[536862792] = -218959118;
  v4[536862794] = -218959118;
  v4[536862796] = -218959118;
  v4[536862798] = -218959118;
  v4[536862800] = -218959118;
  v4[536862802] = -218959118;
  v4[536862804] = -218959118;
  v4[536862806] = -218959118;
  v4[536862808] = -218959118;
  v4[536862810] = -218959118;
  v4[536862812] = -218959118;
  v4[536862814] = -218959118;
  v4[536862816] = -218959118;
  v4[536862818] = -218959118;
  v4[536862820] = -218959118;
  v4[536862822] = -218959118;
  v4[536862824] = -218959118;
  v4[536862826] = -218959118;
  v4[536862828] = -218959118;
  v4[536862830] = -218959118;
  v4[536862832] = -218959118;
  v4[536862834] = -218959118;
  v4[536862836] = -218959118;
  v4[536862838] = -218959118;
  v4[536862840] = -218959118;
  v4[536862842] = -218959118;
  v4[536862844] = -218959118;
  v4[536862846] = -218959118;
  v4[536862848] = -218959118;
  v4[536862850] = -218959118;
  v4[536862852] = -218959118;
  v4[536862854] = -218959118;
  v4[536862856] = -218959118;
  v4[536862858] = -218959118;
  v4[536862860] = -218959118;
  v4[536862862] = -218959118;
  v4[536862864] = -218959118;
  v4[536862866] = -218959118;
  v4[536862868] = -218959118;
  v4[536862870] = -218959118;
  v4[536862872] = -218959118;
  v4[536862874] = -218959118;
  v4[536862876] = -218959118;
  v4[536862878] = -218959118;
  v4[536862880] = -218959118;
  v4[536862882] = -218959118;
  v4[536862884] = -218959118;
  v4[536862886] = -218959118;
  v4[536862888] = -218959118;
  v4[536862890] = -218959118;
  v4[536862892] = -218959118;
  v4[536862894] = -218959118;
  v4[536862896] = -218959118;
  v4[536862898] = -218959118;
  v4[536862900] = -218959118;
  v4[536862902] = -202116109;
  rlt = 1;
  v5 = std::vector<int>::size(&cond->param);
  if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
    v5 = __asan_report_store8(v2 + 480, txt_config_mgr);
  *(_QWORD *)(v2 + 480) = v5;
  if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&cond->type);
  }
  switch ( cond->type )
  {
    case NEW_ACTIVITY_COND_NONE:
    case NEW_ACTIVITY_COND_TIME_GREATER:
    case NEW_ACTIVITY_COND_TIME_LESS:
    case NEW_ACTIVITY_COND_PLAYER_LEVEL_GREATER:
    case NEW_ACTIVITY_COND_LUMINANCE_STONE_CHALLENGE_FINAL_GALLERY_COMPLETE:
    case NEW_ACTIVITY_COND_VINTAGE_STORE_ROUND_SETTLE:
      break;
    case NEW_ACTIVITY_COND_QUEST_FINISH:
    case NEW_ACTIVITY_COND_QUEST_FINISH_ALLOW_QUICK_OPEN:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        __for_range = &cond->param;
        if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 512, txt_config_mgr);
        *(std::vector<int>::const_iterator *)(v2 + 512) = std::vector<int>::begin(__for_range);
        if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 544, txt_config_mgr);
        *(std::vector<int>::const_iterator *)(v2 + 544) = std::vector<int>::end(__for_range);
        while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 512),
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 544)) )
        {
          v10 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 512));
          quest_id = v10;
          p_quest_config_mgr = &txt_config_mgr->quest_config_mgr;
          if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v10);
          }
          if ( !data::QuestExcelConfigMgrBase::findQuestExcelConfig(p_quest_config_mgr, *(unsigned int *)quest_id) )
          {
            if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1120, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1120),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              1734);
            v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1120),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v13 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v12,
                    (const char (*)[12])"cond_type: ");
            v14 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                    v13,
                    &cond->type);
            v15 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    v14,
                    (const char (*)[23])" quest_id is invalid: ");
            common::milog::MiLogStream::operator<<<int,(int *)0>(v15, quest_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
            rlt = 0;
            goto LABEL_598;
          }
          __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 512));
        }
      }
      else
      {
        if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1056, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1056),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1725);
        v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 1056),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v6, (const char (*)[12])"cond_type: ");
        v8 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
               v7,
               &cond->type);
        v9 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
               v8,
               (const char (*)[55])" param count invalid, expect: greater than 0, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v9,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1056));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_TALK:
    case NEW_ACTIVITY_COND_NOT_FINISH_TALK:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v20 = std::vector<int>::operator[](&cond->param, 0LL);
        v21 = (unsigned int *)v20;
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v20);
        }
        v22 = *v21;
        if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 48, v22);
        *(_DWORD *)(v2 + 48) = v22;
        if ( !data::QuestExcelConfigMgrBase::findTalkExcelConfig(
                &txt_config_mgra->quest_config_mgr,
                *(unsigned int *)(v2 + 48)) )
        {
          if ( *(char *)(((v2 + 1248) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1248, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1248),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1755);
          v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1248),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])"cond_type: ");
          v25 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                  v24,
                  &cond->type);
          v26 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v25,
                  (const char (*)[22])" talk_id is invalid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1248));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 1184) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1184, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1184),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1747);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1184),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])"cond_type: ");
        v18 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                v17,
                &cond->type);
        v19 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v18,
                (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v19,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1184));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_CREATE_NPC:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) <= 1uLL || (*(_QWORD *)(v2 + 480) & 1LL) != 0 )
      {
        if ( *(char *)(((v2 + 1312) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1312, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1312),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1765);
        v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1312),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v27, (const char (*)[12])"cond_type: ");
        v29 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                v28,
                &cond->type);
        v30 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                v29,
                (const char (*)[43])" param count invalid, expect: 2n, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v30,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1312));
        rlt = 0;
      }
      else
      {
        for ( i = 0LL; ; i += 2LL )
        {
          if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
            __asan_report_load8(v2 + 480);
          if ( i >= *(_QWORD *)(v2 + 480) )
            break;
          *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 4;
          v31 = std::vector<int>::operator[](&cond->param, i);
          v32 = (unsigned int *)v31;
          if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v31);
          }
          v33 = *v32;
          if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 64, v33);
          *(_DWORD *)(v2 + 64) = v33;
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 4;
          v34 = std::vector<int>::operator[](&cond->param, i + 1);
          v35 = (unsigned int *)v34;
          if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v34 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v34);
          }
          v36 = *v35;
          if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 80, v36);
          *(_DWORD *)(v2 + 80) = v36;
          p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgra)->lua_config_mgr;
          if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 64);
          group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(p_lua_config_mgr, *(_DWORD *)(v2 + 64));
          if ( group_script_config_ptr )
          {
            if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v2 + 80);
            if ( !GroupScriptConfig::findNpcConfig(group_script_config_ptr, *(unsigned int *)(v2 + 80)) )
            {
              *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1440) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1471) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1471) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1440, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1440),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "isCondValid",
                1783);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1440),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v42,
                      (const char (*)[12])"cond_type: ");
              v44 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                      v43,
                      &cond->type);
              v45 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                      v44,
                      (const char (*)[28])" npc_config_id is invalid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v45,
                (const unsigned int *)(v2 + 80));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1440));
              *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -117901064;
              rlt = 0;
            }
          }
          else
          {
            *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1376) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1376, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1376),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              1777);
            v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1376),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v39 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v38,
                    (const char (*)[12])"cond_type: ");
            v40 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                    v39,
                    &cond->type);
            v41 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    v40,
                    (const char (*)[23])" group_id is invalid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, (const unsigned int *)(v2 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1376));
            *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -117901064;
            rlt = 0;
          }
          *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        }
      }
      break;
    case NEW_ACTIVITY_COND_SALESMAN_CAN_DELIVER:
    case NEW_ACTIVITY_COND_SALESMAN_CAN_GET_REWARD:
    case NEW_ACTIVITY_COND_ASTER_MID_CAMP_REFRESHABLE:
    case NEW_ACTIVITY_COND_FINISH_WATER_SPIRIT_PHASE:
    case NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_ANY_ONEOFF_DUNGEON:
    case NEW_ACTIVITY_COND_PLANT_FLOWER_CAN_DELIVER:
    case NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_ANY_STAGE_ALL_CAMP:
    case NEW_ACTIVITY_COND_FINISH_POTION_ANY_LEVEL:
    case NEW_ACTIVITY_COND_FINISH_MUSIC_GAME_ALL_LEVEL:
    case NEW_ACTIVITY_COND_FINISH_ANY_ARENA_CHALLENGE_LEVEL:
    case NEW_ACTIVITY_COND_GACHA_CAN_CREATE_ROBOT:
    case NEW_ACTIVITY_COND_FINISH_ANY_INSTABLE_SPRAY_CHALLENGE_STAGE:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        if ( *(char *)(((v2 + 2400) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2431) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 2431) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2400, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2400),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1932);
        v131 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 2400),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v132 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v131, (const char (*)[12])"cond_type: ");
        v133 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v132,
                 &cond->type);
        v134 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v133,
                 (const char (*)[42])" param count invalid, expect: 0, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v134,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2400));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_WATCHER:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( !*(_QWORD *)(v2 + 480) )
      {
        if ( *(char *)(((v2 + 1504) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1504, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1504),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1794);
        v46 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1504),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v47 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v46, (const char (*)[12])"cond_type: ");
        v48 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                v47,
                &cond->type);
        v49 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                v48,
                (const char (*)[55])" param count invalid, expect: greater than 0, acutal: ");
        txt_config_mgr = (const TxtConfigMgr *)(v2 + 480);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v49,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1504));
        *(_DWORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = -117901064;
        rlt = 0;
      }
      __for_range_0 = &cond->param;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 576, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 576) = std::vector<int>::begin(__for_range_0);
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 608, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 608) = std::vector<int>::end(__for_range_0);
      while ( 1 )
      {
        v50 = (char *)(v2 + 608);
        if ( !__gnu_cxx::operator!=<int const*,std::vector<int>>(
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 576),
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 608)) )
          break;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 4;
        v51 = (int *)__gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 576));
        v52 = v51;
        if ( *(_BYTE *)(((unsigned __int64)v51 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v51 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v51 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v51);
        }
        v53 = *v52;
        v54 = *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000);
        if ( v54 != 0 && v54 <= 3 )
        {
          LOBYTE(v50) = v54 != 0;
          __asan_report_store4(v2 + 96, v50);
        }
        *(_DWORD *)(v2 + 96) = v53;
        if ( !WatcherExcelConfigMgr::findWatcherConfig(&txt_config_mgra->watcher_config_mgr, *(_DWORD *)(v2 + 96)) )
        {
          *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1568) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1599) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 1599) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1568, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1568),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1801);
          v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1568),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v56 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v55, (const char (*)[12])"cond_type: ");
          v57 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                  v56,
                  &cond->type);
          v58 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v57,
                  (const char (*)[25])" watcher_id is invalid: ");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v58, (const int *)(v2 + 96));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1568));
          *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -117901064;
          rlt = 0;
        }
        __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 576));
      }
      break;
    case NEW_ACTIVITY_COND_DAYS_GREAT_EQUAL:
    case NEW_ACTIVITY_COND_DAYS_LESS:
    case NEW_ACTIVITY_COND_PLAYER_LEVEL_GREAT_EQUAL:
    case NEW_ACTIVITY_COND_SEA_LAMP_POPULARIT:
    case NEW_ACTIVITY_COND_SEA_LAMP_PHASE:
    case NEW_ACTIVITY_COND_FINISH_FIND_HILICHURL_LEVEL_EQUAL:
    case NEW_ACTIVITY_COND_FINISH_FIND_HILICHURL_LEVEL_LESS:
    case NEW_ACTIVITY_COND_LUNA_RITE_ATMOSPHERE:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v122 = 0LL;
        v123 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                   &cond->param,
                                                                                   0LL);
        v124 = v123;
        if ( *(_BYTE *)(((unsigned __int64)v123 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v123 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v123 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v123);
        }
        v125 = *v124;
        v126 = *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000);
        if ( v126 != 0 && v126 <= 3 )
        {
          LOBYTE(v122) = v126 != 0;
          __asan_report_store4(v2 + 192, v122);
        }
        *(_DWORD *)(v2 + 192) = v125;
        if ( *(int *)(v2 + 192) < 0 )
        {
          if ( *(char *)(((v2 + 2336) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 2367) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 2367) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 2336, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 2336),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1911);
          v127 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 2336),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v128 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v127,
                   (const char (*)[12])"cond_type: ");
          v129 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v128,
                   &cond->type);
          v130 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                   v129,
                   (const char (*)[37])" param should be positive, aucutal: ");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v130, (const int *)(v2 + 192));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2336));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 2272) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2303) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 2303) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2272, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2272),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1903);
        v118 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 2272),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v119 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v118, (const char (*)[12])"cond_type: ");
        v120 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v119,
                 &cond->type);
        v121 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v120,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v121,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2272));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_SCENE_MP_PLAY_ACTIVATED:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v63 = std::vector<int>::operator[](&cond->param, 0LL);
        v64 = (unsigned int *)v63;
        if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v63);
        }
        v65 = *v64;
        if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 112, v65);
        *(_DWORD *)(v2 + 112) = v65;
        if ( !MpPlayExcelConfigMgr::isMpPlayValid(&txt_config_mgra->mp_play_config_mgr, *(unsigned int *)(v2 + 112)) )
        {
          if ( *(char *)(((v2 + 1696) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1696, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1696),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1819);
          v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1696),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v67 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v66, (const char (*)[12])"cond_type: ");
          v68 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                  v67,
                  &cond->type);
          v69 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v68,
                  (const char (*)[22])" play_id is invalid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v69, (const unsigned int *)(v2 + 112));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1696));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 1632) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1632, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1632),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1811);
        v59 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1632),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v60 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v59, (const char (*)[12])"cond_type: ");
        v61 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                v60,
                &cond->type);
        v62 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v61,
                (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v62,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1632));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_MECHANICUS_OPEN:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v111 = std::vector<int>::operator[](&cond->param, 0LL);
        v112 = (unsigned int *)v111;
        if ( *(_BYTE *)(((unsigned __int64)v111 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v111 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v111 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v111);
        }
        v113 = *v112;
        if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 176, v113);
        *(_DWORD *)(v2 + 176) = v113;
        if ( !data::TreatreMechanicusExcelConfigMgrBase::findMechanicusExcelConfig(
                &txt_config_mgra->mechanicus_config_mgr,
                *(unsigned int *)(v2 + 176)) )
        {
          if ( *(char *)(((v2 + 2208) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 2239) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 2239) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 2208, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 2208),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1886);
          v114 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 2208),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v115 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v114,
                   (const char (*)[12])"cond_type: ");
          v116 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v115,
                   &cond->type);
          v117 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                   v116,
                   (const char (*)[28])" mechanicus_id is invalid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v117, (const unsigned int *)(v2 + 176));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2208));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 2144) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2144, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2144),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1878);
        v107 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 2144),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v108 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v107, (const char (*)[12])"cond_type: ");
        v109 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v108,
                 &cond->type);
        v110 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v109,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v110,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2144));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_REGION_SEARCH_LOGIC:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) > 1uLL )
      {
        v85 = std::vector<int>::operator[](&cond->param, 0LL);
        v86 = (unsigned int *)v85;
        if ( *(_BYTE *)(((unsigned __int64)v85 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v85 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v85 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v85);
        }
        v87 = *v86;
        if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 144, v87);
        *(_DWORD *)(v2 + 144) = v87;
        v88 = std::vector<int>::operator[](&cond->param, 1uLL);
        v89 = (unsigned int *)v88;
        if ( *(_BYTE *)(((unsigned __int64)v88 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v88 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v88 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v88);
        }
        v90 = *v89;
        if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 160, v90);
        *(_DWORD *)(v2 + 160) = v90;
        p_region_search_config_mgr = &txt_config_mgra->region_search_config_mgr;
        if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 144);
        if ( !data::ActivityRegionSearchMgrBase::findRegionSearchExcelConfig(
                p_region_search_config_mgr,
                *(unsigned int *)(v2 + 144)) )
        {
          if ( *(char *)(((v2 + 1952) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1983) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1983) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1952, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1952),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1856);
          v92 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1952),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v93 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v92, (const char (*)[12])"cond_type: ");
          v94 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                  v93,
                  &cond->type);
          v95 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v94,
                  (const char (*)[22])" play_id is invalid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v95, (const unsigned int *)(v2 + 144));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1952));
          *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = -117901064;
          rlt = 0;
        }
        v96 = &txt_config_mgra->region_search_config_mgr;
        if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 144);
        v97 = *(unsigned int *)(v2 + 144);
        search_set_ptr = RegionSearchExcelConfigMgr::findSearchSetByPlay(v96, v97);
        if ( search_set_ptr )
        {
          *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 672, v97);
          *(std::set<unsigned int>::iterator *)(v2 + 672) = std::set<unsigned int>::end(search_set_ptr);
          *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v2 + 640, v97);
          *(std::set<unsigned int>::const_iterator *)(v2 + 640) = std::set<unsigned int>::find(
                                                                    search_set_ptr,
                                                                    (const std::set<unsigned int>::key_type *)(v2 + 160));
          v102 = std::operator==(
                   (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v2 + 640),
                   (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v2 + 672));
          *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
          if ( v102 )
          {
            *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 2080) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 2111) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 2111) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 2080, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 2080),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              1868);
            v103 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v2 + 2080),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v104 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v103,
                     (const char (*)[12])"cond_type: ");
            v105 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                     v104,
                     &cond->type);
            v106 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                     v105,
                     (const char (*)[24])" search_id is invalid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v106,
              (const unsigned int *)(v2 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2080));
            rlt = 0;
          }
        }
        else
        {
          *(_DWORD *)(((v2 + 2016) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 2016) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 2047) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 2047) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 2016, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 2016),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1863);
          v98 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 2016),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v99 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v98, (const char (*)[12])"cond_type: ");
          v100 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v99,
                   &cond->type);
          v101 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                   v100,
                   (const char (*)[22])" no search set for : ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v101, (const unsigned int *)(v2 + 144));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2016));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 1888) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1919) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1919) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1888, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1888),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1847);
        v81 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1888),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v82 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v81, (const char (*)[12])"cond_type: ");
        v83 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                v82,
                &cond->type);
        v84 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v83,
                (const char (*)[42])" param count invalid, expect: 2, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v84,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1888));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_REGION_SEARCH:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v74 = std::vector<int>::operator[](&cond->param, 0LL);
        v75 = (unsigned int *)v74;
        if ( *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v74 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v74);
        }
        v76 = *v75;
        if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 128, v76);
        *(_DWORD *)(v2 + 128) = v76;
        if ( !data::ActivityRegionSearchMgrBase::findRegionSearchExcelConfig(
                &txt_config_mgra->region_search_config_mgr,
                *(unsigned int *)(v2 + 128)) )
        {
          if ( *(char *)(((v2 + 1824) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1855) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 1855) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1824, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1824),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1837);
          v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1824),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v78 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v77, (const char (*)[12])"cond_type: ");
          v79 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                  v78,
                  &cond->type);
          v80 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v79,
                  (const char (*)[22])" play_id is invalid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v80, (const unsigned int *)(v2 + 128));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1824));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 1760) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1760, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1760),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1829);
        v70 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1760),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v71 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v70, (const char (*)[12])"cond_type: ");
        v72 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                v71,
                &cond->type);
        v73 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v72,
                (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v73,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1760));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_ONEOFF_DUNGEON_IN_STAGE:
    case NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_APPOINTED_STAGE_ALL_CAMP:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( !*(_QWORD *)(v2 + 480) )
      {
        if ( *(char *)(((v2 + 2592) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2623) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 2623) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2592, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2592),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1960);
        v146 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 2592),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v147 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v146, (const char (*)[12])"cond_type: ");
        v148 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v147,
                 &cond->type);
        v149 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                 v148,
                 (const char (*)[55])" param count invalid, expect: greater than 0, acutal: ");
        txt_config_mgr = (const TxtConfigMgr *)(v2 + 480);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v149,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2592));
        *(_DWORD *)(((v2 + 2592) >> 3) + 0x7FFF8000) = -117901064;
        rlt = 0;
      }
      __for_range_1 = &cond->param;
      *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 704, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 704) = std::vector<int>::begin(__for_range_1);
      *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 736, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 736) = std::vector<int>::end(__for_range_1);
      while ( 1 )
      {
        v150 = (char *)(v2 + 736);
        if ( !__gnu_cxx::operator!=<int const*,std::vector<int>>(
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 704),
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 736)) )
          break;
        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 4;
        v151 = (int *)__gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 704));
        v152 = v151;
        if ( *(_BYTE *)(((unsigned __int64)v151 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v151 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v151 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v151);
        }
        v153 = *v152;
        v154 = *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000);
        if ( v154 != 0 && v154 <= 3 )
        {
          LOBYTE(v150) = v154 != 0;
          __asan_report_store4(v2 + 224, v150);
        }
        *(_DWORD *)(v2 + 224) = v153;
        if ( *(int *)(v2 + 224) > 0 )
        {
          p_activity_channeller_slab_config_mgr = &txt_config_mgra->activity_channeller_slab_config_mgr;
          if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 224);
          if ( !ActivityChannellerSlabExcelConfigMgr::getRoundCampsMapByStageID(
                  p_activity_channeller_slab_config_mgr,
                  *(unsigned int *)(v2 + 224)) )
          {
            *(_DWORD *)(((v2 + 2720) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 2720) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 2751) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 2751) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 2720, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 2720),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              1974);
            v158 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v2 + 2720),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v159 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                     v158,
                     (const char (*)[35])" param config not found for stage:");
            common::milog::MiLogStream::operator<<<int,(int *)0>(v159, (const int *)(v2 + 224));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2720));
            *(_DWORD *)(((v2 + 2720) >> 3) + 0x7FFF8000) = -117901064;
            rlt = 0;
          }
        }
        else
        {
          *(_DWORD *)(((v2 + 2656) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 2656) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 2687) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 2687) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 2656, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 2656),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1967);
          v155 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 2656),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v156 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                   v155,
                   (const char (*)[31])" stage param must be posivie: ");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v156, (const int *)(v2 + 224));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2656));
          *(_DWORD *)(((v2 + 2656) >> 3) + 0x7FFF8000) = -117901064;
          rlt = 0;
        }
        __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 704));
      }
      break;
    case NEW_ACTIVITY_COND_SEPCIFIED_ACTIVITY_END:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v139 = std::vector<int>::operator[](&cond->param, 0LL);
        v140 = (unsigned int *)v139;
        if ( *(_BYTE *)(((unsigned __int64)v139 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v139 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v139 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v139);
        }
        v141 = *v140;
        if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 208, v141);
        *(_DWORD *)(v2 + 208) = v141;
        if ( !NewActivityExcelConfigMgr::isScheduleIdValid(
                &txt_config_mgra->new_activity_config_mgr,
                *(_DWORD *)(v2 + 208)) )
        {
          if ( *(char *)(((v2 + 2528) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 2559) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 2559) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 2528, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 2528),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            1949);
          v142 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 2528),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v143 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v142,
                   (const char (*)[12])"cond_type: ");
          v144 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v143,
                   &cond->type);
          v145 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                   v144,
                   (const char (*)[26])" schedule_id is invalid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v145, (const unsigned int *)(v2 + 208));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2528));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 2464) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2495) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 2495) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2464, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2464),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1941);
        v135 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 2464),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v136 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v135, (const char (*)[12])"cond_type: ");
        v137 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v136,
                 &cond->type);
        v138 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v137,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v138,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2464));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_UNLOCKED_ALL_LISTED_SCENE_POINTS:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) > 1uLL )
      {
        v164 = std::vector<int>::operator[](&cond->param, 0LL);
        v165 = (unsigned int *)v164;
        if ( *(_BYTE *)(((unsigned __int64)v164 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v164 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v164 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v164);
        }
        v166 = *v165;
        if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 240, v166);
        *(_DWORD *)(v2 + 240) = v166;
        for ( i_0 = 1; ; ++i_0 )
        {
          v167 = i_0;
          if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
            __asan_report_load8(v2 + 480);
          if ( v167 >= *(_QWORD *)(v2 + 480) )
            break;
          *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 4;
          v168 = std::vector<int>::operator[](&cond->param, i_0);
          v169 = (unsigned int *)v168;
          if ( *(_BYTE *)(((unsigned __int64)v168 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v168 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v168 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v168);
          }
          v170 = *v169;
          if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 256, v170);
          *(_DWORD *)(v2 + 256) = v170;
          *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
          p_json_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgra)->json_config_mgr;
          if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 256);
          v172 = *(_DWORD *)(v2 + 256);
          if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v2 + 240);
          v173 = *(_DWORD *)(v2 + 240);
          if ( *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          JsonConfigMgr::findScenePoint((const JsonConfigMgr *const)(v2 + 1024), p_json_config_mgr, v173, v172);
          v174 = std::operator==<data::ConfigScenePoint>(
                   0LL,
                   (const std::shared_ptr<data::ConfigScenePoint> *)(v2 + 1024));
          std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v2 + 1024));
          *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -1800;
          if ( v174 )
          {
            *(_DWORD *)(((v2 + 2848) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 2848) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 2879) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 2879) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 2848, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 2848),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              1996);
            v175 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v2 + 2848),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v176 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                     v175,
                     (const char (*)[33])"findScenePoint failed, scene_id:");
            v177 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v176,
                     (const unsigned int *)(v2 + 240));
            v178 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v177,
                     (const char (*)[12])", point_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v178,
              (const unsigned int *)(v2 + 256));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2848));
            *(_DWORD *)(((v2 + 2848) >> 3) + 0x7FFF8000) = -117901064;
            rlt = 0;
          }
          *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 2784) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2815) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 2815) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2784, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2784),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          1985);
        v160 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 2784),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v161 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v160, (const char (*)[12])"cond_type: ");
        v162 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v161,
                 &cond->type);
        v163 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                 v162,
                 (const char (*)[55])" param count invalid, expect: greater than 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v163,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2784));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_TREASURE_MAP_BONUS_SPOT_GOT_ANY_FRAGMENT:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v183 = std::vector<int>::operator[](&cond->param, 0LL);
        v184 = (unsigned int *)v183;
        if ( *(_BYTE *)(((unsigned __int64)v183 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v183 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v183 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v183);
        }
        v185 = *v184;
        if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 272, v185);
        *(_DWORD *)(v2 + 272) = v185;
        if ( !data::ActivityTreasureMapExcelConfigMgrBase::findTreasureMapBonusRegionExcelConfig(
                &txt_config_mgra->activity_treasure_map_config_mgr,
                *(unsigned int *)(v2 + 272)) )
        {
          if ( *(char *)(((v2 + 2976) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 3007) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3007) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 2976, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 2976),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2017);
          v186 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 2976),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v187 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v186,
                   (const char (*)[12])"cond_type: ");
          v188 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v187,
                   &cond->type);
          v189 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v188, (const char (*)[11])" bonus_id:");
          v190 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v189,
                   (const unsigned int *)(v2 + 272));
          common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v190,
            (const char (*)[23])"  not found in config.");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2976));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 2912) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 2943) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 2943) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 2912, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 2912),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2008);
        v179 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 2912),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v180 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v179, (const char (*)[12])"cond_type: ");
        v181 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v180,
                 &cond->type);
        v182 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v181,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v182,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2912));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_ITEM_COUNT_GREATER:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) > 1uLL )
      {
        v195 = std::vector<int>::operator[](&cond->param, 0LL);
        v196 = (unsigned int *)v195;
        if ( *(_BYTE *)(((unsigned __int64)v195 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v195 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v195 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v195);
        }
        v197 = *v196;
        if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 288, v197);
        *(_DWORD *)(v2 + 288) = v197;
        if ( !ItemExcelConfigMgr::findItemConfig(&txt_config_mgra->item_config_mgr, *(unsigned int *)(v2 + 288)) )
        {
          if ( *(char *)(((v2 + 3104) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 3135) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 3135) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 3104, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 3104),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2035);
          v198 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 3104),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v199 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v198,
                   (const char (*)[12])"cond_type: ");
          v200 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v199,
                   &cond->type);
          v201 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v200, (const char (*)[11])" item_id: ");
          v202 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v201,
                   (const unsigned int *)(v2 + 288));
          common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v202, (const char (*)[12])" not found.");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3104));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 3040) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 3071) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 3071) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 3040, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 3040),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2027);
        v191 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 3040),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v192 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v191, (const char (*)[12])"cond_type: ");
        v193 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v192,
                 &cond->type);
        v194 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v193,
                 (const char (*)[42])" param count invalid, expect: 2, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v194,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3040));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_QUEST_GLOBAL_VAR_GREATER:
    case NEW_ACTIVITY_COND_QUEST_GLOBAL_VAR_LESS:
    case NEW_ACTIVITY_COND_QUEST_GLOBAL_VAR_EQUAL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) > 1uLL )
      {
        v207 = std::vector<int>::operator[](&cond->param, 0LL);
        v208 = (unsigned int *)v207;
        if ( *(_BYTE *)(((unsigned __int64)v207 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v207 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v207 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v207);
        }
        v209 = *v208;
        if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 304, v209);
        *(_DWORD *)(v2 + 304) = v209;
        if ( !data::QuestExcelConfigMgrBase::findQuestGlobalVarConfig(
                &txt_config_mgra->quest_config_mgr,
                *(unsigned int *)(v2 + 304)) )
        {
          if ( *(char *)(((v2 + 3232) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 3263) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3263) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 3232, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 3232),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2055);
          v210 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 3232),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v211 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v210,
                   (const char (*)[12])"cond_type: ");
          v212 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v211,
                   &cond->type);
          v213 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                   v212,
                   (const char (*)[22])byte_1AB7D920);
          v214 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v213,
                   (const unsigned int *)(v2 + 304));
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v214, (const char (*)[31])byte_1AB7D960);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3232));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 3168) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 3199) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 3199) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 3168, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 3168),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2047);
        v203 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 3168),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v204 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v203, (const char (*)[12])"cond_type: ");
        v205 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v204,
                 &cond->type);
        v206 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v205,
                 (const char (*)[42])" param count invalid, expect: 2, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v206,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3168));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_DIG_ACTIVITY:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v236 = std::vector<int>::operator[](&cond->param, 0LL);
        v237 = (unsigned int *)v236;
        if ( *(_BYTE *)(((unsigned __int64)v236 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v236 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v236 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v236);
        }
        group_link_set_ptr = ActivityDigExcelConfigMgr::getGroupBundleIdSet(
                               &txt_config_mgr->activity_dig_config_mgr,
                               *v237);
        if ( group_link_set_ptr )
        {
          if ( std::unordered_set<unsigned int>::empty(group_link_set_ptr) )
          {
            if ( *(char *)(((v2 + 3616) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 3647) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 3647) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 3616, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 3616),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              2103);
            v242 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v2 + 3616),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v243 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v242,
                     (const char (*)[12])"cond_type: ");
            v244 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                     v243,
                     &cond->type);
            v245 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                     v244,
                     (const char (*)[25])" stage_id error. param: ");
            common::milog::MiLogStream::operator<<<int>(v245, &cond->param);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3616));
            rlt = 0;
          }
        }
        else
        {
          if ( *(char *)(((v2 + 3552) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 3583) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 3583) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 3552, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 3552),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2098);
          v238 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 3552),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v239 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v238,
                   (const char (*)[12])"cond_type: ");
          v240 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v239,
                   &cond->type);
          v241 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   v240,
                   (const char (*)[25])" stage_id error. param: ");
          common::milog::MiLogStream::operator<<<int>(v241, &cond->param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3552));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 3488) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 3519) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3519) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 3488, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 3488),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2089);
        v232 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 3488),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v233 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v232, (const char (*)[12])"cond_type: ");
        v234 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v233,
                 &cond->type);
        v235 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v234,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v235,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3488));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_GROUP_BUNDLE_FINISHED:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v219 = std::vector<int>::operator[](&cond->param, 0LL);
        v220 = (unsigned int *)v219;
        if ( *(_BYTE *)(((unsigned __int64)v219 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v219 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v219 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v219);
        }
        v221 = *v220;
        if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 320, v221);
        *(_DWORD *)(v2 + 320) = v221;
        config_ptr = data::ActivityGroupLinksExcelConfigMgrBase::findGroupLinksBundleExcelConfig(
                       &txt_config_mgra->activity_group_links_config_mgr,
                       *(unsigned int *)(v2 + 320));
        if ( config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&config_ptr->link_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_ptr->link_type >> 3)
                                                                      + 0x7FFF8000) )
          {
            __asan_report_load4(&config_ptr->link_type);
          }
          if ( config_ptr->link_type )
          {
            if ( *(char *)(((v2 + 3424) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 3455) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 3455) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 3424, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 3424),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              2079);
            v227 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v2 + 3424),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v228 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v227,
                     (const char (*)[12])"cond_type: ");
            v229 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                     v228,
                     &cond->type);
            v230 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                     v229,
                     (const char (*)[13])" bundle_id: ");
            v231 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v230,
                     (const unsigned int *)(v2 + 320));
            common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v231, (const char (*)[24])byte_1AB7DA20);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3424));
            rlt = 0;
          }
        }
        else
        {
          if ( *(char *)(((v2 + 3360) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 3391) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 3391) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 3360, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 3360),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2074);
          v222 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 3360),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v223 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v222,
                   (const char (*)[12])"cond_type: ");
          v224 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v223,
                   &cond->type);
          v225 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                   v224,
                   (const char (*)[13])" bundle_id: ");
          v226 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v225,
                   (const unsigned int *)(v2 + 320));
          common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v226, (const char (*)[24])byte_1AB7D9E0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3360));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 3296) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 3327) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 3327) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 3296, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 3296),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2065);
        v215 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 3296),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v216 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v215, (const char (*)[12])"cond_type: ");
        v217 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v216,
                 &cond->type);
        v218 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v217,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v218,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3296));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_HACHI_STAGE:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v250 = std::vector<int>::operator[](&cond->param, 0LL);
        v251 = (unsigned int *)v250;
        if ( *(_BYTE *)(((unsigned __int64)v250 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v250 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v250 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v250);
        }
        if ( !ActivityHachiExcelConfigMgr::findStageInfoByStageId(&txt_config_mgr->activity_hachi_config_mgr, *v251) )
        {
          if ( *(char *)(((v2 + 3744) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 3775) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3775) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 3744, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 3744),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2122);
          v252 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 3744),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v253 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v252,
                   (const char (*)[12])"cond_type: ");
          v254 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v253,
                   &cond->type);
          v255 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                   v254,
                   (const char (*)[29])" stage_id not found. param: ");
          common::milog::MiLogStream::operator<<<int>(v255, &cond->param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3744));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 3680) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 3711) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 3711) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 3680, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 3680),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2113);
        v246 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 3680),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v247 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v246, (const char (*)[12])"cond_type: ");
        v248 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v247,
                 &cond->type);
        v249 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v248,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v249,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3680));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_HACHI_FINISH_STEALTH_STAGE_EQUAL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v260 = std::vector<int>::operator[](&cond->param, 0LL);
        v261 = v260;
        if ( *(_BYTE *)(((unsigned __int64)v260 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v260 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v260 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v260);
        }
        if ( *v261
          && !ActivityHachiExcelConfigMgr::findStageInfoByStageId(
                &txt_config_mgr->activity_hachi_config_mgr,
                (unsigned int)*v261) )
        {
          if ( *(char *)(((v2 + 3872) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 3903) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 3903) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 3872, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 3872),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2145);
          v262 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 3872),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v263 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v262,
                   (const char (*)[12])"cond_type: ");
          v264 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v263,
                   &cond->type);
          v265 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                   v264,
                   (const char (*)[29])" stage_id not found. param: ");
          common::milog::MiLogStream::operator<<<int>(v265, &cond->param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3872));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 3808) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 3839) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 3839) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 3808, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 3808),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2132);
        v256 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 3808),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v257 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v256, (const char (*)[12])"cond_type: ");
        v258 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v257,
                 &cond->type);
        v259 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v258,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v259,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3808));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_HACHI_FINISH_BATTLE_STAGE_EQUAL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v270 = std::vector<int>::operator[](&cond->param, 0LL);
        v271 = v270;
        if ( *(_BYTE *)(((unsigned __int64)v270 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v270 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v270 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v270);
        }
        if ( *v271
          && !ActivityHachiExcelConfigMgr::findStageInfoByStageId(
                &txt_config_mgr->activity_hachi_config_mgr,
                (unsigned int)*v271) )
        {
          if ( *(char *)(((v2 + 4000) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4031) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4031) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4000, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4000),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2168);
          v272 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4000),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v273 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v272,
                   (const char (*)[12])"cond_type: ");
          v274 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v273,
                   &cond->type);
          v275 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                   v274,
                   (const char (*)[29])" stage_id not found. param: ");
          common::milog::MiLogStream::operator<<<int>(v275, &cond->param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4000));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 3936) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 3967) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 3967) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 3936, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 3936),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2155);
        v266 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 3936),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v267 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v266, (const char (*)[12])"cond_type: ");
        v268 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v267,
                 &cond->type);
        v269 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v268,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v269,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3936));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_SALVAGE_STAGE:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v280 = std::vector<int>::operator[](&cond->param, 0LL);
        v281 = (unsigned int *)v280;
        if ( *(_BYTE *)(((unsigned __int64)v280 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v280 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v280 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v280);
        }
        v282 = *v281;
        if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 336, v282);
        *(_DWORD *)(v2 + 336) = v282;
        if ( !data::ActivitySeaLampExcelConfigMgrBase::findSalvageStageDataExcelConfig(
                &txt_config_mgra->activity_sea_lamp_config_mgr,
                *(unsigned int *)(v2 + 336)) )
        {
          if ( *(char *)(((v2 + 4128) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4159) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 4159) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4128, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4128),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2186);
          v283 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4128),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v284 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                   v283,
                   (const char (*)[39])byte_1AB7DAE0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v284, (const unsigned int *)(v2 + 336));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4128));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 4064) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 4095) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 4095) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 4064, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 4064),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2178);
        v276 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 4064),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v277 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v276, (const char (*)[12])"cond_type: ");
        v278 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v277,
                 &cond->type);
        v279 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v278,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v279,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4064));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_BARTENDER_LEVEL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        __for_range_2 = &cond->param;
        if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 768, txt_config_mgr);
        *(std::vector<int>::const_iterator *)(v2 + 768) = std::vector<int>::begin(__for_range_2);
        if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 800, txt_config_mgr);
        *(std::vector<int>::const_iterator *)(v2 + 800) = std::vector<int>::end(__for_range_2);
        while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 768),
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 800)) )
        {
          *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 4;
          v289 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 768));
          v290 = (unsigned int *)v289;
          if ( *(_BYTE *)(((unsigned __int64)v289 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v289 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v289 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v289);
          }
          v291 = *v290;
          if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 352, v291);
          *(_DWORD *)(v2 + 352) = v291;
          if ( !data::ActivityBartenderExcelConfigMgrBase::findBartenderLevelExcelConfig(
                  &txt_config_mgra->activity_bartender_config_mgr,
                  *(unsigned int *)(v2 + 352)) )
          {
            *(_DWORD *)(((v2 + 4256) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 4256) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 4287) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4287) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 4256, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 4256),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              2205);
            v292 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v2 + 4256),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v293 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                     v292,
                     (const char (*)[48])"findBartenderLevelExcelConfig failed, level_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v293,
              (const unsigned int *)(v2 + 352));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4256));
            *(_DWORD *)(((v2 + 4256) >> 3) + 0x7FFF8000) = -117901064;
            rlt = 0;
          }
          __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 768));
        }
      }
      else
      {
        if ( *(char *)(((v2 + 4192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 4223) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 4223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 4192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 4192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2196);
        v285 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 4192),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v286 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v285, (const char (*)[12])"cond_type: ");
        v287 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v286,
                 &cond->type);
        v288 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                 v287,
                 (const char (*)[55])" param count invalid, expect: greater than 0, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v288,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4192));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_CUSTOM_DUNGEON_OFFICIAL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v298 = std::vector<int>::operator[](&cond->param, 0LL);
        v299 = (unsigned int *)v298;
        if ( *(_BYTE *)(((unsigned __int64)v298 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v298 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v298 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v298);
        }
        v300 = *v299;
        if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 368, v300);
        *(_DWORD *)(v2 + 368) = v300;
        v301 = &TxtConfigMgr::getConfig(txt_config_mgra)->json_config_mgr;
        if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 368);
        if ( !JsonConfigMgr::findCustomDungeonConfig(v301, *(unsigned int *)(v2 + 368)) )
        {
          if ( *(char *)(((v2 + 4384) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4415) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 4415) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4384, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4384),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2224);
          v302 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4384),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v303 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v302,
                   (const char (*)[12])"cond_type: ");
          v304 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v303,
                   &cond->type);
          v305 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   v304,
                   (const char (*)[25])" dungeon_id is invalid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v305, (const unsigned int *)(v2 + 368));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4384));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 4320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 4351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 4351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 4320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 4320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2216);
        v294 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 4320),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v295 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v294, (const char (*)[12])"cond_type: ");
        v296 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v295,
                 &cond->type);
        v297 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v296,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v297,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4320));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_PHOTO_POS_ID:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( !*(_QWORD *)(v2 + 480) )
      {
        if ( *(char *)(((v2 + 4448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 4479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 4479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 4448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 4448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2234);
        v306 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 4448),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v307 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v306, (const char (*)[12])"cond_type: ");
        v308 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v307,
                 &cond->type);
        v309 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                 v308,
                 (const char (*)[55])" param count invalid, expect: greater than 0, acutal: ");
        txt_config_mgr = (const TxtConfigMgr *)(v2 + 480);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v309,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4448));
        *(_DWORD *)(((v2 + 4448) >> 3) + 0x7FFF8000) = -117901064;
        rlt = 0;
      }
      __for_range_3 = &cond->param;
      *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 832, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 832) = std::vector<int>::begin(__for_range_3);
      *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 864, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 864) = std::vector<int>::end(__for_range_3);
      while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 832),
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 864)) )
      {
        *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 4;
        v310 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 832));
        v311 = (unsigned int *)v310;
        if ( *(_BYTE *)(((unsigned __int64)v310 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v310 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v310 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v310);
        }
        v312 = *v311;
        if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 384, v312);
        *(_DWORD *)(v2 + 384) = v312;
        if ( !data::ActivityPhotographExcelConfigMgrBase::findActivityPhotographPosExcelConfig(
                &txt_config_mgra->activity_photograph_config_mgr,
                *(unsigned int *)(v2 + 384)) )
        {
          *(_DWORD *)(((v2 + 4512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 4512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4543) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2241);
          v313 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4512),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v314 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                   v313,
                   (const char (*)[41])byte_1AB7DBE0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v314, (const unsigned int *)(v2 + 384));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4512));
          *(_DWORD *)(((v2 + 4512) >> 3) + 0x7FFF8000) = -117901064;
          rlt = 0;
        }
        __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 832));
      }
      break;
    case NEW_ACTIVITY_COND_CURRENT_LUMINANCE_STONE_CHALLENGE_STAGE:
    case NEW_ACTIVITY_COND_LUMINANCE_STONE_CHALLENGE_STAGE_GREAT_EQUAL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) == 1LL )
      {
        v319 = std::vector<int>::operator[](&cond->param, 0LL);
        v320 = (unsigned int *)v319;
        if ( *(_BYTE *)(((unsigned __int64)v319 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v319 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v319 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v319);
        }
        v321 = *v320;
        if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 400, v321);
        *(_DWORD *)(v2 + 400) = v321;
        if ( !data::ActivityLumianceStoneChallengeExcelConfigMgrBase::findLuminanceStoneChallengeStageExcelConfig(
                &txt_config_mgra->activity_luminance_stone_challenge_config_mgr,
                *(unsigned int *)(v2 + 400)) )
        {
          if ( *(char *)(((v2 + 4640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 4671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2261);
          v322 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4640),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v323 = common::milog::MiLogStream::operator<<<char [73],(char *[73])0>(
                   v322,
                   (const char (*)[73])"[Luminance Stone Challenge] cannot find correspoinding stage, stage_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v323, (const unsigned int *)(v2 + 400));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4640));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 4576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 4607) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 4607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 4576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 4576),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2252);
        v315 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 4576),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v316 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v315, (const char (*)[12])"cond_type: ");
        v317 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v316,
                 &cond->type);
        v318 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v317,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v318,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4576));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_OFFERING_LEVEL_GREAT_EQUAL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) > 1uLL )
      {
        v328 = std::vector<int>::operator[](&cond->param, 0LL);
        v329 = (unsigned int *)v328;
        if ( *(_BYTE *)(((unsigned __int64)v328 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v328 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v328 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v328);
        }
        v330 = *v329;
        if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 416, v330);
        *(_DWORD *)(v2 + 416) = v330;
        v331 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v332 = v331;
        if ( *(_BYTE *)(((unsigned __int64)v331 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v331 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v331 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v331);
        }
        offering_level = *v332;
        p_offering_config_mgr = &txt_config_mgra->offering_config_mgr;
        if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 416);
        if ( !OfferingExcelConfigMgr::isOfferingIdValid(p_offering_config_mgr, *(_DWORD *)(v2 + 416)) )
        {
          if ( *(char *)(((v2 + 4768) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4799) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4799) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4768, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4768),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2285);
          v334 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4768),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v335 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                   v334,
                   (const char (*)[37])"offering id not valid, offering_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v335, (const unsigned int *)(v2 + 416));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4768));
          *(_DWORD *)(((v2 + 4768) >> 3) + 0x7FFF8000) = -117901064;
          rlt = 0;
        }
        if ( !offering_level )
        {
          *(_DWORD *)(((v2 + 4832) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 4832) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4863) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 4863) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4832, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4832),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2290);
          v336 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4832),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            v336,
            (const char (*)[30])"offering level cannot be zero");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4832));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 4704) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 4735) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 4735) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 4704, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 4704),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2275);
        v324 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 4704),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v325 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v324, (const char (*)[12])"cond_type: ");
        v326 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v325,
                 &cond->type);
        v327 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v326,
                 (const char (*)[42])" param count invalid, expect: 2, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v327,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4704));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_TREASURE_SEELIE_FINISH_REGION:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v341 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                   &cond->param,
                                                                                   0LL);
        v342 = v341;
        if ( *(_BYTE *)(((unsigned __int64)v341 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v341 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v341 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v341);
        }
        if ( *v342 <= 0 )
        {
          if ( *(char *)(((v2 + 4960) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 4991) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 4991) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 4960, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 4960),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2307);
          v343 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 4960),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v344 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                   v343,
                   (const char (*)[33])"param open day must be positive:");
          v345 = std::vector<int>::operator[](&cond->param, 0LL);
          common::milog::MiLogStream::operator<<<int,(int *)0>(v344, v345);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4960));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 4896) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 4927) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 4927) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 4896, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 4896),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2300);
        v337 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 4896),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v338 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v337, (const char (*)[12])"cond_type: ");
        v339 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v338,
                 &cond->type);
        v340 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v339,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v340,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4896));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_SEEK_PRESENT_STAGE:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        __for_range_5 = &cond->param;
        if ( *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 960, txt_config_mgr);
        *(std::vector<int>::const_iterator *)(v2 + 960) = std::vector<int>::begin(__for_range_5);
        if ( *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 992, txt_config_mgr);
        *(std::vector<int>::const_iterator *)(v2 + 992) = std::vector<int>::end(__for_range_5);
        while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 960),
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 992)) )
        {
          *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 4;
          v361 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 960));
          v362 = (unsigned int *)v361;
          if ( *(_BYTE *)(((unsigned __int64)v361 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v361 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v361 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v361);
          }
          v363 = *v362;
          if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v2 + 448, v363);
          *(_DWORD *)(v2 + 448) = v363;
          if ( !ActivityVintageExcelConfigMgr::isPresentStageValid(
                  &txt_config_mgra->activity_vintage_config_mgr,
                  *(unsigned int *)(v2 + 448)) )
          {
            *(_DWORD *)(((v2 + 5216) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 5216) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 5247) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 5247) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 5216, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 5216),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "isCondValid",
              2344);
            v364 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v2 + 5216),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v365 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                     v364,
                     (const char (*)[37])"[VINTAGE] stageid invalid, stage_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v365,
              (const unsigned int *)(v2 + 448));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5216));
            *(_DWORD *)(((v2 + 5216) >> 3) + 0x7FFF8000) = -117901064;
            rlt = 0;
          }
          __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 960));
        }
      }
      else
      {
        if ( *(char *)(((v2 + 5152) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 5183) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 5183) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 5152, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 5152),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2335);
        v357 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 5152),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v358 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v357, (const char (*)[12])"cond_type: ");
        v359 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v358,
                 &cond->type);
        v360 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v359,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v360,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5152));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FINISH_ROCK_BOARD_EXPLORE_STAGE:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( !*(_QWORD *)(v2 + 480) )
      {
        if ( *(char *)(((v2 + 5024) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 5055) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5055) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 5024, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 5024),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2317);
        v346 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 5024),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v347 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v346, (const char (*)[12])"cond_type: ");
        v348 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v347,
                 &cond->type);
        v349 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                 v348,
                 (const char (*)[55])" param count invalid, expect: greater than 0, acutal: ");
        txt_config_mgr = (const TxtConfigMgr *)(v2 + 480);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v349,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5024));
        *(_DWORD *)(((v2 + 5024) >> 3) + 0x7FFF8000) = -117901064;
        rlt = 0;
      }
      __for_range_4 = &cond->param;
      *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 896, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 896) = std::vector<int>::begin(__for_range_4);
      *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 928, txt_config_mgr);
      *(std::vector<int>::const_iterator *)(v2 + 928) = std::vector<int>::end(__for_range_4);
      while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 896),
                (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)(v2 + 928)) )
      {
        *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 4;
        v350 = __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 896));
        v351 = (unsigned int *)v350;
        if ( *(_BYTE *)(((unsigned __int64)v350 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v350 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v350 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v350);
        }
        v352 = *v351;
        if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 432, v352);
        *(_DWORD *)(v2 + 432) = v352;
        if ( data::ActivityRockBoardExploreExcelConfigMgrBase::findActivityRockBoardExploreStageExcelConfig(
               &txt_config_mgra->activity_rock_board_explore_config_mgr,
               *(unsigned int *)(v2 + 432)) )
        {
          goto LABEL_518;
        }
        p_activity_rock_board_explore_config_mgr = &txt_config_mgra->activity_rock_board_explore_config_mgr;
        if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v2 + 432);
        if ( data::ActivityRockBoardExploreExcelConfigMgrBase::findActivityRockBoardExploreQuestExcelConfig(
               p_activity_rock_board_explore_config_mgr,
               *(unsigned int *)(v2 + 432)) )
        {
LABEL_518:
          v354 = 0;
        }
        else
        {
          v354 = 1;
        }
        if ( v354 )
        {
          *(_DWORD *)(((v2 + 5088) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 5088) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 5119) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 5119) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 5088, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 5088),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2325);
          v355 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 5088),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v356 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                   v355,
                   (const char (*)[49])byte_1AB7DDC0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v356, (const unsigned int *)(v2 + 432));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5088));
          *(_DWORD *)(((v2 + 5088) >> 3) + 0x7FFF8000) = -117901064;
          rlt = 0;
        }
        __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)(v2 + 896));
      }
      break;
    case NEW_ACTIVITY_COND_VINTAGE_STORE_ROUND:
    case NEW_ACTIVITY_COND_VINTAGE_MARKET_COIN_A:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v370 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                   &cond->param,
                                                                                   0LL);
        v371 = v370;
        if ( *(_BYTE *)(((unsigned __int64)v370 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v370 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v370 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v370);
        }
        if ( *v371 <= 0 )
        {
          if ( *(char *)(((v2 + 5344) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 5375) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 5375) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 5344, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 5344),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2363);
          v372 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 5344),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v373 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                   v372,
                   (const char (*)[24])"param must be positive:");
          v374 = std::vector<int>::operator[](&cond->param, 0LL);
          common::milog::MiLogStream::operator<<<int,(int *)0>(v373, v374);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5344));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 5280) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 5311) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5311) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 5280, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 5280),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2356);
        v366 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 5280),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v367 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v366, (const char (*)[12])"cond_type: ");
        v368 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v367,
                 &cond->type);
        v369 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v368,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v369,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5280));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_FUNGUS_FIGHTER_FINISH_CAMP:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v379 = std::vector<int>::operator[](&cond->param, 0LL);
        v380 = (unsigned int *)v379;
        if ( *(_BYTE *)(((unsigned __int64)v379 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v379 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v379 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v379);
        }
        if ( !data::ActivityFungusFighterExcelConfigMgrBase::findFungusCampExcelConfig(
                &txt_config_mgr->activity_fungus_fighter_config_mgr,
                *v380) )
        {
          if ( *(char *)(((v2 + 5472) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 5503) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 5503) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 5472, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 5472),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2386);
          v381 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 5472),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v382 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v381,
                   (const char (*)[12])"cond_type: ");
          v383 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                   v382,
                   &cond->type);
          v384 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                   v383,
                   (const char (*)[28])" camp_id not found. param: ");
          common::milog::MiLogStream::operator<<<int>(v384, &cond->param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5472));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 5408) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 5439) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 5439) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 5408, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 5408),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2377);
        v375 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 5408),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v376 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v375, (const char (*)[12])"cond_type: ");
        v377 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v376,
                 &cond->type);
        v378 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v377,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v378,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5408));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_BRICK_BREAKER_STAGE_LEVEL_FINISH:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) <= 1uLL )
      {
        if ( *(char *)(((v2 + 5536) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 5567) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5567) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 5536, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 5536),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2396);
        v385 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 5536),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v386 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v385, (const char (*)[12])"cond_type: ");
        v387 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v386,
                 &cond->type);
        v388 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v387,
                 (const char (*)[42])" param count invalid, expect: 2, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v388,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5536));
        *(_DWORD *)(((v2 + 5536) >> 3) + 0x7FFF8000) = -117901064;
        rlt = 0;
      }
      v389 = std::vector<int>::operator[](&cond->param, 0LL);
      v390 = (unsigned int *)v389;
      if ( *(_BYTE *)(((unsigned __int64)v389 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v389 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v389 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v389);
      }
      if ( !data::ActivityBrickBreakerExcelConfigMgrBase::findBrickBreakerStageExcelConfig(
              &txt_config_mgr->activity_brick_breaker_config_mgr,
              *v390) )
      {
        *(_DWORD *)(((v2 + 5600) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 5600) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 5631) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 5631) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 5600, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 5600),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2401);
        v391 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 5600),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v392 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                 v391,
                 (const char (*)[51])"findBrickBreakerStageExcelConfig failed, stage_id:");
        v393 = std::vector<int>::operator[](&cond->param, 0LL);
        common::milog::MiLogStream::operator<<<int,(int *)0>(v392, v393);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5600));
        rlt = 0;
      }
      break;
    case NEW_ACTIVITY_COND_DUEL_HEART_FINISH_LEVEL:
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v2 + 480);
      if ( *(_QWORD *)(v2 + 480) )
      {
        v398 = 0LL;
        v399 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                   &cond->param,
                                                                                   0LL);
        v400 = v399;
        if ( *(_BYTE *)(((unsigned __int64)v399 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v399 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v399 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v399);
        }
        v401 = *v400;
        v402 = *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000);
        if ( v402 != 0 && v402 <= 3 )
        {
          LOBYTE(v398) = v402 != 0;
          __asan_report_store4(v2 + 464, v398);
        }
        *(_DWORD *)(v2 + 464) = v401;
        if ( !data::ActivityDuelHeartConfigMgrBase::findActivityDuelHeartLevelExcelConfig(
                &txt_config_mgra->activity_duel_heart_config_mgr,
                *(unsigned int *)(v2 + 464)) )
        {
          if ( *(char *)(((v2 + 5728) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 5759) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 5759) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 5728, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 5728),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "isCondValid",
            2418);
          v403 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v2 + 5728),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v404 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   v403,
                   (const char (*)[25])"level config not found: ");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v404, (const int *)(v2 + 464));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5728));
          rlt = 0;
        }
      }
      else
      {
        if ( *(char *)(((v2 + 5664) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 5695) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 5695) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 5664, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 5664),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "isCondValid",
          2410);
        v394 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 5664),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v395 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v394, (const char (*)[12])"cond_type: ");
        v396 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
                 v395,
                 &cond->type);
        v397 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 v396,
                 (const char (*)[42])" param count invalid, expect: 1, acutal: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v397,
          (const unsigned __int64 *)(v2 + 480));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5664));
        rlt = 0;
      }
      break;
    default:
      if ( *(char *)(((v2 + 5792) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 5823) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5823) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 5792, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 5792),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "isCondValid",
        2426);
      v405 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 5792),
               (const char (*)[16])"[CONFIG_ERROR] ");
      v406 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v405, (const char (*)[12])"cond_type: ");
      v407 = common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
               v406,
               &cond->type);
      common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v407, (const char (*)[12])" is invalid");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5792));
      rlt = 0;
      break;
  }
LABEL_598:
  if ( v426 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 132) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v2 >> 3) + 0x7FFF8088) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8090) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8098) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B0) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80C8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80D0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80D8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80F8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8100) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8108) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8110) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8118) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8120) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8128) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8130) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8138) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8140) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8148) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8150) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8158) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8160) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8168) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8170) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8178) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8180) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8188) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8190) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8198) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81A0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81A8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81B0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81B8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81C0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81C8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81D0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81D8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81E0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81E8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81F0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81F8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8200) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8208) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8210) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8218) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8220) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8228) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8230) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8238) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8240) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8248) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8250) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8258) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8260) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8268) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8270) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8278) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8280) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8288) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8290) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8298) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82A0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82A8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF82B0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82B8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82C0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82C8) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82D0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82D8) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_7(v2, 5856LL, v426);
  }
  return rlt;
};

// Line 2436: range 0000000013571144-000000001357181D
__int64 __fastcall NewActivityExcelConfigMgr::rewriteExecConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr,
        const data::NewActivityExec *exec,
        uint32_t cond_id,
        bool is_meet)
{
  unsigned int v5; // r14d
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  data::NewActivityActionType type; // eax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int v14; // eax
  MailExcelConfigMgr *p_mail_config_mgr; // rcx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::map<unsigned int,std::set<unsigned int>> *p_activity_banner_meet_cond_ids_map; // rax
  __int64 v19; // rsi
  int ActivityIdByCondId; // edx
  char v21; // al
  std::set<unsigned int> *v22; // rax
  __int64 result; // rax
  std::map<unsigned int,std::set<unsigned int>> *activity_cond_ids_map; // [rsp+28h] [rbp-158h]
  char v28[336]; // [rsp+30h] [rbp-150h] BYREF

  v6 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(288LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "6 48 4 19 mail_config_id:2449 64 4 21 cond_activity_id:2465 80 4 12 cond_id:2435 96 32 9 <unknow"
                        "n> 160 32 9 <unknown> 224 32 9 <unknown>";
  *(_QWORD *)(v6 + 16) = NewActivityExcelConfigMgr::rewriteExecConfig;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556943;
  v8[536862722] = -234556924;
  v8[536862724] = -218959118;
  v8[536862726] = -218959118;
  v8[536862728] = -202116109;
  *(_DWORD *)(v6 + 80) = cond_id;
  if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&exec->type);
  }
  type = exec->type;
  if ( type == NEW_ACTIVITY_ACTION_ACTIVITY_BANNER_NOTIFY )
  {
    if ( is_meet )
      p_activity_banner_meet_cond_ids_map = &this->activity_banner_meet_cond_ids_map;
    else
      p_activity_banner_meet_cond_ids_map = &this->activity_banner_expire_cond_ids_map;
    activity_cond_ids_map = p_activity_banner_meet_cond_ids_map;
    v19 = *(unsigned int *)(v6 + 80);
    ActivityIdByCondId = NewActivityExcelConfigMgr::getActivityIdByCondId(this, v19);
    v21 = *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000);
    if ( v21 != 0 && v21 <= 3 )
    {
      LOBYTE(v19) = v21 != 0;
      __asan_report_store4(v6 + 64, v19);
    }
    *(_DWORD *)(v6 + 64) = ActivityIdByCondId;
    if ( *(_DWORD *)(v6 + 64) )
    {
      v22 = std::map<unsigned int,std::set<unsigned int>>::operator[](
              activity_cond_ids_map,
              (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v6 + 64));
      std::set<unsigned int>::insert(v22, (const std::set<unsigned int>::value_type *)(v6 + 80));
    }
    goto LABEL_39;
  }
  if ( type > NEW_ACTIVITY_ACTION_ACTIVITY_BANNER_NOTIFY )
  {
LABEL_39:
    v5 = 0;
    goto LABEL_40;
  }
  if ( type <= NEW_ACTIVITY_ACTION_CLOSE_MECHANICUS )
  {
    if ( type >= NEW_ACTIVITY_ACTION_OPEN_MECHANICUS
      && NewActivityExcelConfigMgr::rewriteOpenAndCloseMechanicus(this, txt_config_mgr, *(_DWORD *)(v6 + 80), exec) )
    {
      if ( *(char *)(((v6 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v6 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v6 + 127) & 7) >= *(_BYTE *)(((v6 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v6 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v6 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteExecConfig",
        2443);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v6 + 96),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
              v10,
              (const char (*)[46])"rewriteOpenAndCloseMechanicus fails, cond_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v6 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 96));
      v5 = -1;
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if ( type != NEW_ACTIVITY_ACTION_SEND_MAIL )
    goto LABEL_39;
  if ( *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v6 + 48, txt_config_mgr);
  *(_DWORD *)(v6 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v6 + 48)) )
  {
    if ( *(char *)(((v6 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 - 65) & 7) >= *(_BYTE *)(((v6 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v6 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v6 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteExecConfig",
      2452);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v6 + 160),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v13 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
            v12,
            (const char (*)[48])"parse mail_config_id and reward_id fail, params");
    common::milog::MiLogStream::operator<<<std::string>(v13, &exec->param);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 160));
    v5 = -1;
    v14 = 0;
  }
  else
  {
    p_mail_config_mgr = &txt_config_mgr->mail_config_mgr;
    if ( *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v6 + 48);
    if ( (unsigned int)MailExcelConfigMgr::checkAndRecordMailIdAndLimitType(
                         p_mail_config_mgr,
                         *(_DWORD *)(v6 + 48),
                         ITEM_LIMIT_ACTIVITY_CONDITION_MAIL_REWARD) )
    {
      if ( *(char *)(((v6 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v6 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v6 - 32 + 31) & 7) >= *(_BYTE *)(((v6 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v6 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v6 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteExecConfig",
        2457);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v6 + 224),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v16,
              (const char (*)[24])"invalid mail_config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v6 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 224));
      v5 = -1;
      v14 = 0;
    }
    else
    {
      v14 = 1;
    }
  }
  if ( v14 )
    goto LABEL_39;
LABEL_40:
  result = v5;
  if ( v28 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2480: range 000000001357181E-000000001359276C
bool NewActivityExcelConfigMgr::isExecValid(const NewActivityExcelConfigMgr *const this, const TxtConfigMgr *txt_config_mgr, const data::NewActivityExec *exec, uint32_t cond_id, ActivityCondExecPolicy exec_policy, WeatherExecCheckInfo *weather_exec_check_info);

// Line 4516: range 000000001359276E-0000000013592DE1
_BOOL8 __fastcall NewActivityExcelConfigMgr::isExecVecValid(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::vector<data::NewActivityExec> *exec_vec,
        uint32_t cond_id,
        ActivityCondExecPolicy exec_policy)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  _BOOL4 v16; // r14d
  _BOOL8 result; // rax
  bool is_exec_vec_valid; // [rsp+2Fh] [rbp-181h]
  const data::NewActivityExec *exec; // [rsp+38h] [rbp-178h]
  char v22[368]; // [rsp+40h] [rbp-170h] BYREF

  v5 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 32 4 12 cond_id:4515 48 8 16 __for_begin:4519 80 8 14 __for_end:4519 112 32 9 <unknown> 176 32"
                        " 9 <unknown> 240 48 28 weather_exec_check_info:4518";
  *(_QWORD *)(v5 + 16) = NewActivityExcelConfigMgr::isExecVecValid;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862721] = -234881024;
  v7[536862722] = 62194;
  v7[536862722] = -234881024;
  v7[536862723] = 62194;
  v7[536862724] = -219021312;
  v7[536862725] = 62194;
  v7[536862726] = -219021312;
  v7[536862727] = 62194;
  v7[536862729] = -202116109;
  *(_DWORD *)(v5 + 32) = cond_id;
  is_exec_vec_valid = 1;
  std::map<bool,std::map<unsigned int,std::set<unsigned int>>>::map((std::map<bool,std::map<unsigned int,std::set<unsigned int>>> *const)(v5 + 240));
  if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 48, txt_config_mgr);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v5 + 48) = std::vector<data::NewActivityExec>::begin(exec_vec);
  if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 80, txt_config_mgr);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v5 + 80) = std::vector<data::NewActivityExec>::end(exec_vec);
  while ( __gnu_cxx::operator!=<data::NewActivityExec const*,std::vector<data::NewActivityExec>>(
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v5 + 48),
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v5 + 80)) )
  {
    exec = __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v5 + 48));
    if ( !NewActivityExcelConfigMgr::isExecValid(
            this,
            txt_config_mgr,
            exec,
            *(_DWORD *)(v5 + 32),
            ACTIVITY_COND_EXEC_MEET,
            (WeatherExecCheckInfo *)(v5 + 240)) )
    {
      *(_DWORD *)(((v5 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 112) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 143) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 113) & 7) >= *(_BYTE *)(((v5 + 143) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 112, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 112),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "isExecVecValid",
        4523);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v5 + 112),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v8, (const char (*)[10])"cond_id: ");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v5 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v10,
              (const char (*)[18])" has error exec: ");
      common::milog::MiLogStream::operator<<<data::NewActivityActionType,(data::NewActivityActionType*)0>(
        v11,
        &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 112));
      *(_DWORD *)(((v5 + 112) >> 3) + 0x7FFF8000) = -117901064;
      is_exec_vec_valid = 0;
    }
    __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v5 + 48));
  }
  *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
  if ( WeatherExcelConfigMgr::checkWeatherExecCheckInfo(
         &txt_config_mgr->weather_config_mgr,
         (const WeatherExecCheckInfo *)(v5 + 240),
         1) )
  {
    *(_DWORD *)(((v5 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v5 + 176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 207) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 49) & 7) >= *(_BYTE *)(((v5 + 207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 176, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 176),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "isExecVecValid",
      4529);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v5 + 176),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v13 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v12, (const char (*)[9])"cond_id:");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 32));
    v15 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
            v14,
            (const char (*)[58])" checkWeatherExecCheckInfo fail, weather_exec_check_info:");
    common::milog::MiLogStream::operator<<<bool,std::map<unsigned int,std::set<unsigned int>>>(
      v15,
      (const std::map<bool,std::map<unsigned int,std::set<unsigned int>>> *)(v5 + 240));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 176));
    *(_DWORD *)(((v5 + 176) >> 3) + 0x7FFF8000) = -117901064;
    v16 = 0;
  }
  else
  {
    v16 = is_exec_vec_valid;
  }
  std::map<bool,std::map<unsigned int,std::set<unsigned int>>>::~map((std::map<bool,std::map<unsigned int,std::set<unsigned int>>> *const)(v5 + 240));
  result = v16;
  if ( v22 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4537: range 0000000013592DE2-000000001359370C
int32_t __cdecl NewActivityExcelConfigMgr::rewriteOpenAndCloseMechanicus(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr,
        uint32_t cond_id,
        const data::NewActivityExec *exec)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int32_t result; // eax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  TreatreMechanicusExcelConfigMgr *p_mechanicus_config_mgr; // rcx
  int v17; // eax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  __int64 v21; // rsi
  int ActivityIdByCondId; // edx
  char v23; // al
  std::map<unsigned int,unsigned int>::mapped_type *v24; // rax
  _DWORD *v25; // rdx
  std::map<unsigned int,unsigned int>::mapped_type *v26; // rax
  int *v27; // rdx
  int v28; // ecx
  char v29; // al
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // r14
  std::map<unsigned int,unsigned int>::mapped_type *v36; // rax
  int v37; // r14d
  char *v38; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v39; // rax
  _DWORD *v40; // rdx
  char v41; // cl
  char v44[368]; // [rsp+20h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 4 18 mechanicus_id:4544 48 4 16 activity_id:4555 64 32 9 <unknown> 128 32 9 <unknown> 192 3"
                        "2 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = NewActivityExcelConfigMgr::rewriteOpenAndCloseMechanicus;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -218959118;
  v6[536862729] = -202116109;
  if ( std::vector<std::string>::empty(&exec->param) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteOpenAndCloseMechanicus",
      4541);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])"exec_type: ");
    v9 = common::milog::MiLogStream::operator<<<data::NewActivityActionType,(data::NewActivityActionType*)0>(
           v8,
           &exec->type);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v9, (const char (*)[22])" param num is empty()");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = -1;
    goto LABEL_43;
  }
  if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v4 + 32, txt_config_mgr);
  *(_DWORD *)(v4 + 32) = 0;
  v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v4 + 32), 1) )
  {
    if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteOpenAndCloseMechanicus",
      4547);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v4 + 128),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v12, (const char (*)[15])"mechanicus_id:");
    v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
    common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v15, (const char (*)[16])" strToNum fails");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
    result = -1;
    goto LABEL_43;
  }
  p_mechanicus_config_mgr = &txt_config_mgr->mechanicus_config_mgr;
  v17 = *(unsigned __int8 *)(((v4 + 32) >> 3) + 0x7FFF8000);
  if ( (_BYTE)v17 != 0 && (char)v17 <= 3 )
    __asan_report_load4(v4 + 32);
  if ( !data::TreatreMechanicusExcelConfigMgrBase::findMechanicusExcelConfig(
          p_mechanicus_config_mgr,
          *(unsigned int *)(v4 + 32)) )
  {
    if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteOpenAndCloseMechanicus",
      4552);
    v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v4 + 192),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v18, (const char (*)[15])"mechanicus_id:");
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v20, (const char (*)[7])byte_1AB81140);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
    result = -1;
    goto LABEL_43;
  }
  v21 = cond_id;
  ActivityIdByCondId = NewActivityExcelConfigMgr::getActivityIdByCondId(this, cond_id);
  v23 = *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000);
  if ( v23 != 0 && v23 <= 3 )
  {
    LOBYTE(v21) = v23 != 0;
    __asan_report_store4(v4 + 48, v21);
  }
  *(_DWORD *)(v4 + 48) = ActivityIdByCondId;
  if ( !*(_DWORD *)(v4 + 48) )
  {
LABEL_42:
    result = 0;
    goto LABEL_43;
  }
  v24 = std::map<unsigned int,unsigned int>::operator[](
          &this->activity_mechanicus_map,
          (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 48));
  v25 = v24;
  if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v24);
  }
  if ( !*v25 )
    goto LABEL_32;
  v26 = std::map<unsigned int,unsigned int>::operator[](
          &this->activity_mechanicus_map,
          (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 48));
  v27 = (int *)v26;
  if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v26);
  }
  v28 = *v27;
  if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v4 + 32);
  if ( v28 == *(_DWORD *)(v4 + 32) )
LABEL_32:
    v29 = 0;
  else
    v29 = 1;
  if ( !v29 )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v4 + 32);
    v37 = *(_DWORD *)(v4 + 32);
    v38 = (char *)(v4 + 48);
    v39 = std::map<unsigned int,unsigned int>::operator[](
            &this->activity_mechanicus_map,
            (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 48));
    v40 = v39;
    v41 = *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000);
    if ( v41 != 0 && (char)(((unsigned __int8)v39 & 7) + 3) >= v41 )
    {
      LOBYTE(v38) = v41 != 0;
      __asan_report_store4(v39, v38);
    }
    *v40 = v37;
    goto LABEL_42;
  }
  if ( *(char *)(((v4 + 256) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) != 0
    && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v4 + 256, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v4 + 256),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "rewriteOpenAndCloseMechanicus",
    4560);
  v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v4 + 256),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v31 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v30, (const char (*)[13])"activity_id:");
  v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v4 + 48));
  v33 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v32, (const char (*)[30])byte_1AB842C0);
  v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v4 + 32));
  v35 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v34, (const char (*)[2])",");
  v36 = std::map<unsigned int,unsigned int>::operator[](
          &this->activity_mechanicus_map,
          (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 48));
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, v36);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 256));
  result = -1;
LABEL_43:
  if ( v44 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4569: range 000000001359370E-000000001359496C
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityCondExcelConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  data::NewActivityCondDefaultStateType *p_default_state; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  const char *v15; // rsi
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  common::milog::MiLogStream *v34; // rax
  int32_t result; // eax
  bool have_error; // [rsp+1Fh] [rbp-351h]
  data::NewActivityCondExcelConfigMap *__for_range; // [rsp+20h] [rbp-350h]
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *__for_range_1; // [rsp+28h] [rbp-348h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false>::reference v40; // [rsp+30h] [rbp-340h]
  std::tuple_element<0,std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *cond_id_0; // [rsp+38h] [rbp-338h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *activity_id_set; // [rsp+40h] [rbp-330h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false>::reference v43; // [rsp+48h] [rbp-328h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityCondExcelConfig> >::type *cond_id; // [rsp+50h] [rbp-320h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityCondExcelConfig> >::type *cond_conf; // [rsp+58h] [rbp-318h]
  const std::vector<data::NewActivityCond> *__for_range_0; // [rsp+60h] [rbp-310h]
  const data::NewActivityCond *cond; // [rsp+68h] [rbp-308h]
  char v48[768]; // [rsp+70h] [rbp-300h] BYREF

  v2 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(736LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 32 8 16 __for_begin:4571 64 8 14 __for_end:4571 96 8 16 __for_begin:4592 128 8 14 __for_end:4"
                        "592 160 8 16 __for_begin:4627 192 8 14 __for_end:4627 224 32 9 <unknown> 288 32 9 <unknown> 352 "
                        "32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::checkNewActivityCondExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -202116109;
  have_error = 0;
  __for_range = &this->new_activity_cond_excel_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::const_iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityCondExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 64);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false> *)(v2 + 64)) )
      break;
    v43 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false> *const)(v2 + 32));
    cond_id = std::get<0ul,unsigned int const,data::NewActivityCondExcelConfig>(v43);
    cond_conf = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityCondExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityCondExcelConfig>(v43);
    p_default_state = &cond_conf->default_state;
    if ( *(_BYTE *)(((unsigned __int64)p_default_state >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_default_state & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_default_state >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(p_default_state);
    }
    if ( !data::isValidNewActivityCondDefaultStateType(cond_conf->default_state) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityCondExcelConfig",
        4577);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 224),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v7, (const char (*)[10])"cond_id: ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, cond_id);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              v9,
              (const char (*)[27])" has error default_state: ");
      common::milog::MiLogStream::operator<<<data::NewActivityCondDefaultStateType,(data::NewActivityCondDefaultStateType*)0>(
        v10,
        &cond_conf->default_state);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    }
    if ( *(_BYTE *)(((unsigned __int64)&cond_conf->cond_comb >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)cond_conf + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&cond_conf->cond_comb >> 3)
                                                               + 0x7FFF8000) )
    {
      __asan_report_load4(&cond_conf->cond_comb);
    }
    if ( !NewActivityExcelConfigMgr::isLogicTypeValid(cond_conf->cond_comb) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityCondExcelConfig",
        4583);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v11, (const char (*)[10])"cond_id: ");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, cond_id);
      v14 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              v13,
              (const char (*)[23])" has error cond_comb: ");
      common::milog::MiLogStream::operator<<<data::LogicType,(data::LogicType*)0>(v14, &cond_conf->cond_comb);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    }
    v15 = (const char *)cond_id;
    if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int> const,unsigned int>(
            &this->cond_to_condgroup_map,
            cond_id) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityCondExcelConfig",
        4589);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 352),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v16, (const char (*)[10])"cond_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, cond_id);
      v15 = " does not appear in cond group table";
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        v18,
        (const char (*)[37])" does not appear in cond group table");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
    }
    __for_range_0 = &cond_conf->cond;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v15);
    *(std::vector<data::NewActivityCond>::const_iterator *)(v2 + 96) = std::vector<data::NewActivityCond>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v15);
    *(std::vector<data::NewActivityCond>::const_iterator *)(v2 + 128) = std::vector<data::NewActivityCond>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::NewActivityCond const*,std::vector<data::NewActivityCond>>(
              (const __gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *)(v2 + 96),
              (const __gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *)(v2 + 128)) )
    {
      cond = __gnu_cxx::__normal_iterator<data::NewActivityCond const*,std::vector<data::NewActivityCond>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *const)(v2 + 96));
      if ( !NewActivityExcelConfigMgr::isCondValid(cond, txt_config_mgr) )
      {
        have_error = 1;
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityCondExcelConfig",
          4597);
        v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])"cond_id: ");
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, cond_id);
        v22 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v21,
                (const char (*)[18])" has error cond: ");
        common::milog::MiLogStream::operator<<<data::NewActivityCondType,(data::NewActivityCondType*)0>(
          v22,
          &cond->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      }
      __gnu_cxx::__normal_iterator<data::NewActivityCond const*,std::vector<data::NewActivityCond>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityCond*,std::vector<data::NewActivityCond> > *const)(v2 + 96));
    }
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)cond_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(cond_id);
    }
    if ( !NewActivityExcelConfigMgr::isExecVecValid(
            this,
            txt_config_mgr,
            &cond_conf->meet_exec,
            *cond_id,
            ACTIVITY_COND_EXEC_MEET) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityCondExcelConfig",
        4605);
      v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 480),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v24 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v23, (const char (*)[10])"cond_id: ");
      v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, cond_id);
      common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v25, (const char (*)[11])" has error");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
    }
    if ( *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)cond_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(cond_id);
    }
    if ( !NewActivityExcelConfigMgr::isExecVecValid(
            this,
            txt_config_mgr,
            &cond_conf->expire_exec,
            *cond_id,
            ACTIVITY_COND_EXEC_EXPIRE) )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityCondExcelConfig",
        4610);
      v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 544),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v27 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v26, (const char (*)[10])"cond_id: ");
      v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, cond_id);
      common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v28, (const char (*)[11])" has error");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
    }
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
            &NewActivityExcelConfigMgr::dynamic_group_check_cond_white_set,
            cond_id)
      && NewActivityExcelConfigMgr::checkDynamicGroupExecComplete(this, &cond_conf->meet_exec, &cond_conf->expire_exec) )
    {
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 608, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 608),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityCondExcelConfig",
        4621);
      v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 608),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v30 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v29, (const char (*)[10])"cond_id: ");
      v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, cond_id);
      common::milog::MiLogStream::operator<<<char [83],(char *[83])0>(v31, (const char (*)[83])byte_1AB845E0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
      have_error = 1;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityCondExcelConfig>,false,false> *const)(v2 + 32));
  }
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  __for_range_1 = &this->cond_activity_set_map;
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 160, v5);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 160) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::begin(__for_range_1);
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 192, v5);
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v2 + 192) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(__for_range_1);
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v2 + 192)) )
  {
    v40 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 160));
    cond_id_0 = std::get<0ul,unsigned int const,std::unordered_set<unsigned int>>(v40);
    activity_id_set = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *)std::get<1ul,unsigned int const,std::unordered_set<unsigned int>>(v40);
    if ( std::unordered_set<unsigned int>::size(activity_id_set) > 1 )
    {
      have_error = 1;
      *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 672, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 672),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityCondExcelConfig",
        4632);
      v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 672),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v33 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v32, (const char (*)[9])"cond_id:");
      v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, cond_id_0);
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v34, (const char (*)[36])byte_1AB84660);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
      *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v2 + 160));
  }
  if ( have_error )
    result = -1;
  else
    result = 0;
  if ( v48 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 92) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 4640: range 000000001359496E-0000000013594E6C
int32_t __cdecl NewActivityExcelConfigMgr::rewriteActitivityWatcherConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  WatcherExcelConfigMgr *p_watcher_config_mgr; // rdi
  data::WatcherConfig *v6; // rcx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-124h]
  data::NewActivityWatcherConfigMap *__for_range; // [rsp+20h] [rbp-120h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false>::reference __in; // [rsp+28h] [rbp-118h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityWatcherConfig> >::type *id; // [rsp+30h] [rbp-110h]
  char v15[256]; // [rsp+40h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 8 16 __for_begin:4642 64 8 14 __for_end:4642 96 32 9 <unknown> 160 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::rewriteActitivityWatcherConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -218959118;
  v4[536862726] = -202116109;
  ret = 0;
  __for_range = &this->new_activity_watcher_config_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false> *)(v2 + 64)) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false> *const)(v2 + 32));
    id = std::get<0ul,unsigned int const,data::NewActivityWatcherConfig>(__in);
    p_watcher_config_mgr = &txt_config_mgr->watcher_config_mgr;
    v6 = (data::WatcherConfig *)std::get<1ul,unsigned int const,data::NewActivityWatcherConfig>(__in);
    if ( *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) )
    {
      p_watcher_config_mgr = (WatcherExcelConfigMgr *)id;
      __asan_report_load4(id);
    }
    if ( WatcherExcelConfigMgr::addWatcherConfig(p_watcher_config_mgr, *id, v6) )
    {
      ret = -1;
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteActitivityWatcherConfig",
        4647);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 96),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             v7,
             (const char (*)[29])"addWatcherConfig failed, id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
    }
    else
    {
      *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteActitivityWatcherConfig",
        4651);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 160),
             (const char (*)[16])"add watcher id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
      *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4659: range 0000000013594E6E-0000000013595DA5
int32_t __cdecl NewActivityExcelConfigMgr::rewriteActivitySaleConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::NewActivitySaleType *p_sale_type; // rax
  __int64 v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  _BOOL4 v10; // eax
  __int64 *v11; // rdx
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  int v16; // r15d
  WeaponExcelConfigMgr *p_weapon_config_mgr; // rcx
  int v18; // eax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  const std::string *v21; // rax
  ActivityWeaponUpgradeSaleConfig *v22; // r8
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  const std::string *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,std::any> >,bool> v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  int v31; // eax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int32_t result; // eax
  data::NewActivitySaleExcelConfigMap *__for_range; // [rsp+20h] [rbp-290h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false,false>::reference v37; // [rsp+28h] [rbp-288h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivitySaleExcelConfig> >::type *id; // [rsp+30h] [rbp-280h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivitySaleExcelConfig> >::type *config; // [rsp+38h] [rbp-278h]
  char v40[624]; // [rsp+40h] [rbp-270h] BYREF

  v3 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(576LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 32 8 16 __for_begin:4660 64 8 14 __for_end:4660 96 16 16 sale_config:4671 128 32 9 <unknown> "
                        "192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 5"
                        "12 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::rewriteActivitySaleConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -202116109;
  __for_range = &this->new_activity_sale_excel_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivitySaleExcelConfig>::iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::NewActivitySaleExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivitySaleExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::NewActivitySaleExcelConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false> *)(v3 + 64)) )
    {
      v31 = 1;
      goto LABEL_56;
    }
    v37 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false,false> *const)(v3 + 32));
    id = std::get<0ul,unsigned int const,data::NewActivitySaleExcelConfig>(v37);
    config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivitySaleExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivitySaleExcelConfig>(v37);
    p_sale_type = &config->sale_type;
    v7 = (((_BYTE)config + 12) & 7u) + 3;
    if ( *(_BYTE *)(((unsigned __int64)p_sale_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_sale_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_sale_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_sale_type);
    }
    if ( config->sale_type != NEW_ACTIVITY_SALE_TYPE_WEAPON_UPGRADE )
      break;
    if ( std::vector<std::string>::size(&config->sale_param) > 1 )
    {
      *(_WORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
      v11 = &`vtable for'ActivityWeaponUpgradeSaleConfig + 2;
      if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 96, v7);
      *(_QWORD *)(v3 + 96) = v11;
      if ( *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 104, v7);
      *(_DWORD *)(v3 + 104) = 0;
      if ( *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 + 108) & 7) + 3) >= *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 108, (((_BYTE)v3 + 108) & 7u) + 3);
      }
      *(_DWORD *)(v3 + 108) = 0;
      v12 = std::vector<std::string>::operator[](&config->sale_param, 0LL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 104), 1) )
      {
        *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteActivitySaleConfig",
          4674);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v13,
                (const char (*)[18])"strToNum failed, ");
        v15 = std::vector<std::string>::operator[](&config->sale_param, 0LL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v16 = 0;
      }
      else
      {
        p_weapon_config_mgr = &txt_config_mgr->weapon_config_mgr;
        v18 = *(unsigned __int8 *)(((v3 + 104) >> 3) + 0x7FFF8000);
        if ( (_BYTE)v18 != 0 && (char)v18 <= 3 )
          __asan_report_load4(v3 + 104);
        if ( data::WeaponExcelConfigMgrBase::findWeaponExcelConfig(p_weapon_config_mgr, *(unsigned int *)(v3 + 104)) )
        {
          v21 = std::vector<std::string>::operator[](&config->sale_param, 1uLL);
          if ( common::tools::StringUtils::strToNum<float>(v21, (float *)(v3 + 108), 1) )
          {
            *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "rewriteActivitySaleConfig",
              4684);
            v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v24 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    v23,
                    (const char (*)[18])"strToNum failed, ");
            v25 = std::vector<std::string>::operator[](&config->sale_param, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, v25);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
            *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v16 = 0;
          }
          else
          {
            if ( *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) != 0
              && (char)(((v3 + 108) & 7) + 3) >= *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v3 + 108);
            }
            if ( *(float *)(v3 + 108) > 1.0 )
            {
              v28 = std::map<unsigned int,std::any>::emplace<unsigned int const&,ActivityWeaponUpgradeSaleConfig &>(
                      &this->activity_sale_config_map,
                      id,
                      (ActivityWeaponUpgradeSaleConfig *)(v3 + 96),
                      (const unsigned int *)&this->activity_sale_config_map,
                      v22);
              if ( !v28.second )
              {
                *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 448, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 448),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                  "rewriteActivitySaleConfig",
                  4694);
                v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 448),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v30 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                        v29,
                        (const char (*)[23])"duplicate sale_id, id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
                *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v16 = 0;
              }
              else
              {
                v16 = 1;
              }
            }
            else
            {
              *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 384, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 384),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "rewriteActivitySaleConfig",
                4689);
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 384),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v27 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                      v26,
                      (const char (*)[39])byte_1AB849C0);
              common::milog::MiLogStream::operator<<<float,(float *)0>(v27, (const float *)(v3 + 108));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
              *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v16 = 0;
            }
          }
        }
        else
        {
          *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "rewriteActivitySaleConfig",
            4679);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v19, (const char (*)[27])byte_1AB84980);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 104));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v16 = 0;
        }
      }
      ActivityWeaponUpgradeSaleConfig::~ActivityWeaponUpgradeSaleConfig((ActivityWeaponUpgradeSaleConfig *const)(v3 + 96));
      v10 = v16 != 0;
    }
    else
    {
      *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteActivitySaleConfig",
        4668);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v8, (const char (*)[30])byte_1AB84900);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v10 = 0;
    }
    *(_WORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -1800;
    if ( !v10 )
    {
      v31 = 0;
      goto LABEL_56;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivitySaleExcelConfig>,false,false> *const)(v3 + 32));
  }
  *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 512, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 512),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "rewriteActivitySaleConfig",
    4700);
  v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 512),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v33 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v32, (const char (*)[33])byte_1AB84A60);
  common::milog::MiLogStream::operator<<<data::NewActivitySaleType,(data::NewActivitySaleType*)0>(
    v33,
    &config->sale_type);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
  v2 = -1;
  v31 = 0;
LABEL_56:
  if ( v31 == 1 )
    v2 = 0;
  result = v2;
  if ( v40 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4708: range 0000000013595DA6-0000000013596771
int32_t __cdecl NewActivityExcelConfigMgr::checkActitivityWatcherConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  WatcherExcelConfigMgr *p_watcher_config_mgr; // rcx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  __int64 v9; // rsi
  int ActivityIdByWatcherId; // edx
  char v11; // al
  RewardExcelConfigMgr *p_reward_config_mgr; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  data::NewActivityType ActivitiyTypeByActivityId; // edx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+18h] [rbp-188h]
  data::ItemLimitType item_limit_type; // [rsp+1Ch] [rbp-184h]
  data::NewActivityWatcherConfigMap *__for_range; // [rsp+20h] [rbp-180h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false>::reference v33; // [rsp+28h] [rbp-178h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityWatcherConfig> >::type *watcher_id; // [rsp+30h] [rbp-170h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityWatcherConfig> >::type *watcher_config; // [rsp+38h] [rbp-168h]
  char v36[352]; // [rsp+40h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 48 4 16 activity_id:4728 64 8 16 __for_begin:4710 96 8 14 __for_end:4710 128 32 9 <unknown> 19"
                        "2 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::checkActitivityWatcherConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  ret = 0;
  __for_range = &this->new_activity_watcher_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::NewActivityWatcherConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false> *)(v2 + 96)) )
  {
    v33 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false> *const)(v2 + 64));
    watcher_id = std::get<0ul,unsigned int const,data::NewActivityWatcherConfig>(v33);
    watcher_config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityWatcherConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityWatcherConfig>(v33);
    if ( *(char *)(((unsigned __int64)&watcher_config->is_disuse >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&watcher_config->is_disuse, v2 + 96, &watcher_config->is_disuse);
    if ( !watcher_config->is_disuse )
    {
      p_watcher_config_mgr = &txt_config_mgr->watcher_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)watcher_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)watcher_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)watcher_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(watcher_id);
      }
      if ( WatcherExcelConfigMgr::findWatcherConfig(p_watcher_config_mgr, *watcher_id) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&watcher_config->reward_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)watcher_config + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&watcher_config->reward_id >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(&watcher_config->reward_id);
        }
        if ( watcher_config->reward_id )
        {
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)watcher_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)watcher_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)watcher_id >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(watcher_id);
          }
          v9 = *watcher_id;
          ActivityIdByWatcherId = NewActivityExcelConfigMgr::findActivityIdByWatcherId(this, v9);
          v11 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
          if ( v11 != 0 && v11 <= 3 )
          {
            LOBYTE(v9) = v11 != 0;
            __asan_report_store4(v2 + 48, v9);
          }
          *(_DWORD *)(v2 + 48) = ActivityIdByWatcherId;
          if ( *(_DWORD *)(v2 + 48) )
          {
            if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v2 + 48);
            ActivitiyTypeByActivityId = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(
                                          this,
                                          *(_DWORD *)(v2 + 48));
            item_limit_type = NewActivityExcelConfigMgr::getRewardItemLimitType(this, ActivitiyTypeByActivityId);
            if ( *(_BYTE *)(((unsigned __int64)&watcher_config->reward_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)watcher_config + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&watcher_config->reward_id >> 3)
                                                                             + 0x7FFF8000) )
            {
              __asan_report_load4(&watcher_config->reward_id);
            }
            if ( (unsigned __int8)TxtConfigMgr::isValidRewardIdAndMatchItemLimitType(
                                    txt_config_mgr,
                                    watcher_config->reward_id,
                                    item_limit_type) != 1 )
            {
              ret = -1;
              *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 256, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 256),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkActitivityWatcherConfig",
                4744);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 256),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v21,
                      (const char (*)[13])"activity_id:");
              v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v22,
                      (const unsigned int *)(v2 + 48));
              v24 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v23,
                      (const char (*)[13])" watcher_id:");
              v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, watcher_id);
              v26 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      v25,
                      (const char (*)[19])byte_1AB84C20);
              v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v26,
                      &watcher_config->reward_id);
              common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v27, (const char (*)[7])byte_1AB81140);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
              *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
          else
          {
            p_reward_config_mgr = &txt_config_mgr->reward_config_mgr;
            if ( *(_BYTE *)(((unsigned __int64)&watcher_config->reward_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)watcher_config + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&watcher_config->reward_id >> 3)
                                                                             + 0x7FFF8000) )
            {
              __asan_report_load4(&watcher_config->reward_id);
            }
            if ( !data::RewardExcelConfigMgrBase::findRewardExcelConfig(p_reward_config_mgr, watcher_config->reward_id) )
            {
              *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 192, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 192),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkActitivityWatcherConfig",
                4734);
              v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 192),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v13,
                      (const char (*)[13])"activity_id:");
              v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v14,
                      (const unsigned int *)(v2 + 48));
              v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v15,
                      (const char (*)[13])" watcher_id:");
              v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, watcher_id);
              v18 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      v17,
                      (const char (*)[19])byte_1AB84C20);
              v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v18,
                      &watcher_config->reward_id);
              common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])byte_1AB84C60);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
              *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
          }
        }
      }
      else
      {
        ret = -1;
        *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 128, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 128),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkActitivityWatcherConfig",
          4719);
        v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v2 + 128),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v6, (const char (*)[12])"watcher_id:");
        v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, watcher_id);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v8, (const char (*)[19])byte_1AB84BA0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
        *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
      }
    }
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityWatcherConfig>,false,false> *const)(v2 + 64));
  }
  result = ret;
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4752: range 0000000013596772-0000000013598C91
int32_t __cdecl NewActivityExcelConfigMgr::checkActivityAvatarSelectionConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 v5; // rsi
  uint32_t ActivityIdByScheduleId; // edx
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const NewActivityExcelConfigMgr *v14; // rcx
  __int64 cond_id; // rsi
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  char *v21; // rsi
  unsigned int *v22; // rax
  int *v23; // rdx
  int v24; // ecx
  char v25; // al
  const std::unordered_set<unsigned int> *v26; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  common::milog::MiLogStream *v36; // rax
  __int64 v37; // rsi
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rdx
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rdx
  common::milog::MiLogStream *v43; // rax
  char *v44; // rsi
  unsigned int *v45; // rax
  int *v46; // rdx
  int v47; // ecx
  char v48; // al
  __int64 v49; // rsi
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rdx
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  MaterialExcelConfigMgr *p_material_config_mgr; // rcx
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rdx
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rdx
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rdx
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rdx
  common::milog::MiLogStream *v71; // rax
  std::vector<unsigned int>::size_type v72; // r15
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rdx
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // r15
  std::vector<unsigned int>::size_type v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // r15
  std::vector<unsigned int>::size_type v80; // rax
  common::milog::MiLogStream *v81; // rax
  char *v82; // rsi
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v83; // rax
  MaterialExcelConfigMgr *v84; // rcx
  common::milog::MiLogStream *v85; // rax
  common::milog::MiLogStream *v86; // rdx
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rdx
  common::milog::MiLogStream *v89; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v90; // rax
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rdx
  common::milog::MiLogStream *v93; // rax
  int32_t ret; // [rsp+18h] [rbp-668h]
  data::NewActivityType activity_type; // [rsp+1Ch] [rbp-664h]
  data::NewActivityAvatarSelectionExcelConfigMap *__for_range; // [rsp+20h] [rbp-660h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false,false>::reference v99; // [rsp+28h] [rbp-658h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig> >::type *schedule_id; // [rsp+30h] [rbp-650h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig> >::type *selection_config; // [rsp+38h] [rbp-648h]
  const data::NewActivityCondExcelConfig *cond_config_ptr; // [rsp+40h] [rbp-640h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+48h] [rbp-638h]
  const data::NewActivityItemLimitExcelConfig *item_limit_config_ptr; // [rsp+50h] [rbp-630h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+58h] [rbp-628h]
  const std::vector<unsigned int> *cost_item_id_list; // [rsp+60h] [rbp-620h]
  const std::vector<unsigned int> *cost_item_num_list; // [rsp+68h] [rbp-618h]
  const unsigned int *item_num; // [rsp+80h] [rbp-600h]
  const unsigned int *item_id; // [rsp+88h] [rbp-5F8h]
  const data::RewardExcelConfig *reward_config_ptr; // [rsp+90h] [rbp-5F0h]
  const std::vector<data::RewardItemConfig> *__for_range_2; // [rsp+98h] [rbp-5E8h]
  const data::RewardItemConfig *item_config; // [rsp+A0h] [rbp-5E0h]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+A8h] [rbp-5D8h]
  char v114[1488]; // [rsp+B0h] [rbp-5D0h] BYREF

  v2 = (unsigned __int64)v114;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1440LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "32 32 4 16 activity_id:4757 48 4 15 watcher_id:4771 64 4 14 reward_id:4804 80 4 15 avatar_num:48"
                        "13 96 8 16 __for_begin:4754 128 8 14 __for_end:4754 160 8 16 __for_begin:4771 192 8 14 __for_end"
                        ":4771 224 8 16 __for_begin:4804 256 8 14 __for_end:4804 288 8 16 __for_begin:4814 320 8 14 __for"
                        "_end:4814 352 8 9 <unknown> 384 8 9 <unknown> 416 8 16 __for_begin:4861 448 8 14 __for_end:4861 "
                        "480 8 16 __for_begin:4870 512 8 14 __for_end:4870 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9"
                        " <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 "
                        "<unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 3"
                        "2 9 <unknown> 1376 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::checkActivityAvatarSelectionConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -234556924;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862736] = -218959360;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -202116109;
  ret = 0;
  __for_range = &this->new_activity_avatar_selection_excel_config_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityAvatarSelectionExcelConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::NewActivityAvatarSelectionExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 128, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityAvatarSelectionExcelConfig>::const_iterator *)(v2 + 128) = std::unordered_map<unsigned int,data::NewActivityAvatarSelectionExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false> *)(v2 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false> *)(v2 + 128)) )
  {
    v99 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false,false> *const)(v2 + 96));
    schedule_id = std::get<0ul,unsigned int const,data::NewActivityAvatarSelectionExcelConfig>(v99);
    selection_config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityAvatarSelectionExcelConfig>(v99);
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(schedule_id);
    }
    v5 = *schedule_id;
    ActivityIdByScheduleId = NewActivityExcelConfigMgr::getActivityIdByScheduleId(this, v5);
    v7 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(v2 + 32, v5);
    }
    *(_DWORD *)(v2 + 32) = ActivityIdByScheduleId;
    if ( *(_BYTE *)(((unsigned __int64)&selection_config->cond_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)selection_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&selection_config->cond_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&selection_config->cond_id);
    }
    if ( !NewActivityExcelConfigMgr::isActivityContainsCondId(
            this,
            *(unsigned int *)(v2 + 32),
            selection_config->cond_id) )
    {
      ret = -1;
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkActivityAvatarSelectionConfig",
        4761);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 544),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])"ScheduleId:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, schedule_id);
      v11 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v10, (const char (*)[21])byte_1AB85020);
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 32));
      v13 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v12, (const char (*)[17])byte_1AB85060);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &selection_config->cond_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
    }
    else
    {
      v14 = this;
      if ( *(_BYTE *)(((unsigned __int64)&selection_config->cond_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)selection_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&selection_config->cond_id >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&selection_config->cond_id);
      }
      cond_id = selection_config->cond_id;
      cond_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityCondExcelConfig(v14, cond_id);
      if ( !cond_config_ptr )
        goto LABEL_26;
      if ( *(char *)(((unsigned __int64)&cond_config_ptr->is_notify_client >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&cond_config_ptr->is_notify_client, cond_id, &cond_config_ptr->is_notify_client);
      if ( cond_config_ptr->is_notify_client )
      {
        __for_range_0 = &selection_config->watcher_id_list;
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 160, cond_id);
        *(std::vector<unsigned int>::const_iterator *)(v2 + 160) = std::vector<unsigned int>::begin(__for_range_0);
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v2 + 192, cond_id);
        *(std::vector<unsigned int>::const_iterator *)(v2 + 192) = std::vector<unsigned int>::end(__for_range_0);
        while ( 1 )
        {
          v21 = (char *)(v2 + 192);
          if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 160),
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 192)) )
            break;
          *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
          v22 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 160));
          v23 = (int *)v22;
          if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v22);
          }
          v24 = *v23;
          v25 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
          if ( v25 != 0 && v25 <= 3 )
          {
            LOBYTE(v21) = v25 != 0;
            __asan_report_store4(v2 + 48, v21);
          }
          *(_DWORD *)(v2 + 48) = v24;
          if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::unordered_set<unsigned int>> const,unsigned int>(
                  &this->activity_watcher_set_map,
                  (const unsigned int *)(v2 + 32))
            || (v26 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::at(
                        &this->activity_watcher_set_map,
                        (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 32)),
                !common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
                   v26,
                   (const unsigned int *)(v2 + 48))) )
          {
            ret = -1;
            *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 672, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 672),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "checkActivityAvatarSelectionConfig",
              4776);
            v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 672),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v29 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v28,
                    (const char (*)[12])"ScheduleId:");
            v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, schedule_id);
            v31 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v30,
                    (const char (*)[20])byte_1AB85120);
            v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v31,
                    (const unsigned int *)(v2 + 48));
            v33 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    v32,
                    (const char (*)[34])byte_1AB85160);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v2 + 32));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
            *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          }
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 160));
        }
        *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
        if ( *(_BYTE *)(((unsigned __int64)schedule_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)schedule_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)schedule_id >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(schedule_id);
        }
        activity_type = NewActivityExcelConfigMgr::getActivityTypeByScheduleId(this, *schedule_id);
        item_limit_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityItemLimitExcelConfig(
                                  this,
                                  (unsigned int)activity_type);
        if ( item_limit_config_ptr )
        {
          v37 = (((_BYTE)item_limit_config_ptr + 20) & 7u) + 3;
          if ( *(_BYTE *)(((unsigned __int64)&item_limit_config_ptr->avatar_limit_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)item_limit_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&item_limit_config_ptr->avatar_limit_type >> 3)
                                                                                 + 0x7FFF8000) )
          {
            __asan_report_load4(&item_limit_config_ptr->avatar_limit_type);
          }
          if ( item_limit_config_ptr->avatar_limit_type > (unsigned int)ITEM_LIMIT_UNLIMITED )
          {
            if ( std::vector<unsigned int>::empty(&selection_config->avatar_reward_list) )
            {
              ret = -1;
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkActivityAvatarSelectionConfig",
                4801);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 864),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v41,
                      (const char (*)[12])"ScheduleId:");
              v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v42, schedule_id);
              common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(v43, (const char (*)[35])byte_1AB85280);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
            }
            else
            {
              __for_range_1 = &selection_config->avatar_reward_list;
              *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 224, v37);
              *(std::vector<unsigned int>::const_iterator *)(v2 + 224) = std::vector<unsigned int>::begin(__for_range_1);
              *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v2 + 256, v37);
              *(std::vector<unsigned int>::const_iterator *)(v2 + 256) = std::vector<unsigned int>::end(__for_range_1);
              while ( 1 )
              {
                v44 = (char *)(v2 + 256);
                if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                        (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 224),
                        (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 256)) )
                  break;
                *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 4;
                v45 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 224));
                v46 = (int *)v45;
                if ( *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v45 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v45);
                }
                v47 = *v46;
                v48 = *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000);
                if ( v48 != 0 && v48 <= 3 )
                {
                  LOBYTE(v44) = v48 != 0;
                  __asan_report_store4(v2 + 64, v44);
                }
                *(_DWORD *)(v2 + 64) = v47;
                v49 = *(unsigned int *)(v2 + 64);
                reward_config_ptr = data::RewardExcelConfigMgrBase::findRewardExcelConfig(
                                      &txt_config_mgr->reward_config_mgr,
                                      v49);
                if ( reward_config_ptr )
                {
                  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 4;
                  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_store4(v2 + 80, v49);
                  *(_DWORD *)(v2 + 80) = 0;
                  __for_range_2 = &reward_config_ptr->reward_item_list;
                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 288, v49);
                  *(std::vector<data::RewardItemConfig>::const_iterator *)(v2 + 288) = std::vector<data::RewardItemConfig>::begin(__for_range_2);
                  *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v2 + 320, v49);
                  *(std::vector<data::RewardItemConfig>::const_iterator *)(v2 + 320) = std::vector<data::RewardItemConfig>::end(__for_range_2);
                  while ( __gnu_cxx::operator!=<data::RewardItemConfig const*,std::vector<data::RewardItemConfig>>(
                            (const __gnu_cxx::__normal_iterator<const data::RewardItemConfig*,std::vector<data::RewardItemConfig> > *)(v2 + 288),
                            (const __gnu_cxx::__normal_iterator<const data::RewardItemConfig*,std::vector<data::RewardItemConfig> > *)(v2 + 320)) )
                  {
                    item_config = __gnu_cxx::__normal_iterator<data::RewardItemConfig const*,std::vector<data::RewardItemConfig>>::operator*((const __gnu_cxx::__normal_iterator<const data::RewardItemConfig*,std::vector<data::RewardItemConfig> > *const)(v2 + 288));
                    p_material_config_mgr = &txt_config_mgr->material_config_mgr;
                    if ( *(_BYTE *)(((unsigned __int64)&item_config->item_id >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((unsigned __int64)&item_config->item_id >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(&item_config->item_id);
                    }
                    material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(
                                            p_material_config_mgr,
                                            item_config->item_id);
                    if ( material_config_ptr )
                    {
                      if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3) + 0x7FFF8000) != 0
                        && (char)((((_BYTE)material_config_ptr + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3)
                                                                                           + 0x7FFF8000) )
                      {
                        __asan_report_load4(&material_config_ptr->material_type);
                      }
                      if ( material_config_ptr->material_type == MATERIAL_AVATAR )
                      {
                        if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0
                          && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
                        {
                          __asan_report_load4(v2 + 80);
                        }
                        ++*(_DWORD *)(v2 + 80);
                      }
                    }
                    __gnu_cxx::__normal_iterator<data::RewardItemConfig const*,std::vector<data::RewardItemConfig>>::operator++((__gnu_cxx::__normal_iterator<const data::RewardItemConfig*,std::vector<data::RewardItemConfig> > *const)(v2 + 288));
                  }
                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
                  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v2 + 80);
                  if ( *(_DWORD *)(v2 + 80) != 1 )
                  {
                    ret = -1;
                    *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 992, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 992),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                      "checkActivityAvatarSelectionConfig",
                      4825);
                    v56 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 992),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v57 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                            v56,
                            (const char (*)[12])"ScheduleId:");
                    v58 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v57, schedule_id);
                    v59 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                            v58,
                            (const char (*)[19])byte_1AB84C20);
                    v60 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                            v59,
                            (const unsigned int *)(v2 + 64));
                    v61 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                            v60,
                            (const char (*)[29])byte_1AB852E0);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v61,
                      (const unsigned int *)(v2 + 80));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
                    *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -117901064;
                  }
                }
                else
                {
                  ret = -1;
                  *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 928) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 928, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 928),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                    "checkActivityAvatarSelectionConfig",
                    4810);
                  v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 928),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v51 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v50,
                          (const char (*)[12])"ScheduleId:");
                  v52 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, schedule_id);
                  v53 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                          v52,
                          (const char (*)[19])byte_1AB84C20);
                  v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v53,
                          (const unsigned int *)(v2 + 64));
                  common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v54, (const char (*)[7])byte_1AB81140);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 928));
                  *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
                }
                *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
                __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 224));
              }
              *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
              if ( *(char *)(((unsigned __int64)&selection_config->is_not_consume_item >> 3) + 0x7FFF8000) < 0 )
                __asan_report_load1(&selection_config->is_not_consume_item, v44, &selection_config->is_not_consume_item);
              if ( selection_config->is_not_consume_item )
              {
                if ( !std::vector<unsigned int>::empty(&selection_config->cost_item_id_list)
                  || !std::vector<unsigned int>::empty(&selection_config->cost_item_num_list) )
                {
                  ret = -1;
                  *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1056, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1056),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                    "checkActivityAvatarSelectionConfig",
                    4835);
                  v63 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1056),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v64 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v63,
                          (const char (*)[12])"ScheduleId:");
                  v65 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v64, schedule_id);
                  common::milog::MiLogStream::operator<<<char [76],(char *[76])0>(
                    v65,
                    (const char (*)[76])byte_1AB85320);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1056));
                  *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
                }
              }
              else
              {
                cost_item_id_list = &selection_config->cost_item_id_list;
                cost_item_num_list = &selection_config->cost_item_num_list;
                if ( std::vector<unsigned int>::empty(&selection_config->cost_item_id_list) )
                {
                  ret = -1;
                  *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1120, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1120),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                    "checkActivityAvatarSelectionConfig",
                    4846);
                  v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1120),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v67 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v66,
                          (const char (*)[12])"ScheduleId:");
                  v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, schedule_id);
                  common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    v68,
                    (const char (*)[29])byte_1AB853A0);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
                  *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -117901064;
                }
                else if ( std::vector<unsigned int>::empty(cost_item_num_list) )
                {
                  ret = -1;
                  *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1184) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1184, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1184),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                    "checkActivityAvatarSelectionConfig",
                    4852);
                  v69 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1184),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v70 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v69,
                          (const char (*)[12])"ScheduleId:");
                  v71 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v70, schedule_id);
                  common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    v71,
                    (const char (*)[29])byte_1AB853E0);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1184));
                  *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -117901064;
                }
                else
                {
                  v72 = std::vector<unsigned int>::size(cost_item_id_list);
                  if ( v72 == std::vector<unsigned int>::size(cost_item_num_list) )
                  {
                    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 416, v44);
                    *(std::vector<unsigned int>::const_iterator *)(v2 + 416) = std::vector<unsigned int>::begin(cost_item_id_list);
                    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 448, v44);
                    *(std::vector<unsigned int>::const_iterator *)(v2 + 448) = std::vector<unsigned int>::end(cost_item_id_list);
                    while ( 1 )
                    {
                      v82 = (char *)(v2 + 448);
                      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 416),
                              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 448)) )
                        break;
                      v83 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 416));
                      item_id = v83;
                      v84 = &txt_config_mgr->material_config_mgr;
                      if ( *(_BYTE *)(((unsigned __int64)v83 >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)v83 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v83 >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_load4(v83);
                      }
                      if ( !data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(v84, *item_id) )
                      {
                        ret = -1;
                        *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1312) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1312, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1312),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                          "checkActivityAvatarSelectionConfig",
                          4866);
                        v85 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                (common::milog::MiLogStream *const)(v2 + 1312),
                                (const char (*)[16])"[CONFIG_ERROR] ");
                        v86 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                v85,
                                (const char (*)[12])"ScheduleId:");
                        v87 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v86, schedule_id);
                        v88 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                                v87,
                                (const char (*)[23])byte_1AB854E0);
                        v89 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v88, item_id);
                        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
                          v89,
                          (const char (*)[7])byte_1AB81140);
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1312));
                        *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -117901064;
                      }
                      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 416));
                    }
                    *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 480, v82);
                    *(std::vector<unsigned int>::const_iterator *)(v2 + 480) = std::vector<unsigned int>::begin(cost_item_id_list);
                    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v2 + 512, v82);
                    *(std::vector<unsigned int>::const_iterator *)(v2 + 512) = std::vector<unsigned int>::end(cost_item_id_list);
                    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 480),
                              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 512)) )
                    {
                      v90 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 480));
                      item_num = v90;
                      if ( *(_BYTE *)(((unsigned __int64)v90 >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)v90 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v90 >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_load4(v90);
                      }
                      if ( !*item_num )
                      {
                        ret = -1;
                        *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1376) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1376, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1376),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                          "checkActivityAvatarSelectionConfig",
                          4875);
                        v91 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                (common::milog::MiLogStream *const)(v2 + 1376),
                                (const char (*)[16])"[CONFIG_ERROR] ");
                        v92 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                v91,
                                (const char (*)[12])"ScheduleId:");
                        v93 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v92, schedule_id);
                        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                          v93,
                          (const char (*)[29])byte_1AB85520);
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1376));
                        *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -117901064;
                      }
                      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 480));
                    }
                    *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
                  }
                  else
                  {
                    ret = -1;
                    *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1248) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1248, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1248),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                      "checkActivityAvatarSelectionConfig",
                      4858);
                    v73 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 1248),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v74 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                            v73,
                            (const char (*)[12])"ScheduleId:");
                    v75 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v74, schedule_id);
                    v76 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                            v75,
                            (const char (*)[27])byte_1AB85420);
                    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
                    v77 = std::vector<unsigned int>::size(cost_item_id_list);
                    if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
                      v77 = __asan_report_store8(v2 + 352, byte_1AB85420);
                    *(_QWORD *)(v2 + 352) = v77;
                    v78 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                            v76,
                            (const unsigned __int64 *)(v2 + 352));
                    v79 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                            v78,
                            (const char (*)[15])byte_1AB85460);
                    *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
                    v80 = std::vector<unsigned int>::size(cost_item_num_list);
                    if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
                      v80 = __asan_report_store8(v2 + 384, byte_1AB85460);
                    *(_QWORD *)(v2 + 384) = v80;
                    v81 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                            v79,
                            (const unsigned __int64 *)(v2 + 384));
                    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v81,
                      (const char (*)[11])byte_1AB854A0);
                    *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
                    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1248));
                    *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -117901064;
                  }
                }
              }
            }
          }
          else
          {
            ret = -1;
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 800, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 800),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "checkActivityAvatarSelectionConfig",
              4793);
            v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 800),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v39 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v38,
                    (const char (*)[12])"ScheduleId:");
            v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, schedule_id);
            common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(v40, (const char (*)[51])byte_1AB85220);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
          }
        }
        else
        {
          ret = -1;
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 736, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 736),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "checkActivityAvatarSelectionConfig",
            4786);
          v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 736),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v35 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v34, (const char (*)[12])"ScheduleId:");
          v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, schedule_id);
          common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(v36, (const char (*)[41])byte_1AB851C0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
        }
      }
      else
      {
LABEL_26:
        ret = -1;
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkActivityAvatarSelectionConfig",
          4768);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 608),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])"ScheduleId:");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, schedule_id);
        v19 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v18, (const char (*)[17])byte_1AB850A0);
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &selection_config->cond_id);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v20, (const char (*)[28])byte_1AB850E0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
      }
    }
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityAvatarSelectionExcelConfig>,false,false> *const)(v2 + 96));
  }
  if ( v114 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80AC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 180) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1440LL, v114);
  }
  return ret;
};

// Line 4885: range 0000000013598C92-000000001359904F
bool __cdecl NewActivityExcelConfigMgr::isSchedulesOverlap(
        const NewActivityExcelConfigMgr *const this,
        uint32_t schedule_id1,
        uint32_t schedule_id2)
{
  uint32_t end_time; // ecx
  uint32_t v5; // ecx
  uint32_t v6; // ecx
  uint32_t v7; // ecx
  uint32_t begin_time; // ecx
  uint32_t v9; // ecx
  uint32_t v10; // ecx
  uint32_t v11; // ecx
  const data::NewActivityScheduleExcelConfig *schedule_conf_ptr1; // [rsp+10h] [rbp-10h]
  const data::NewActivityScheduleExcelConfig *schedule_conf_ptr2; // [rsp+18h] [rbp-8h]

  if ( schedule_id1 == schedule_id2 )
    return 1;
  schedule_conf_ptr1 = data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(this, schedule_id1);
  schedule_conf_ptr2 = data::NewActivityExcelConfigMgrBase::findNewActivityScheduleExcelConfig(this, schedule_id2);
  if ( !schedule_conf_ptr1 || !schedule_conf_ptr2 )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->end_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)schedule_conf_ptr1 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->end_time >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&schedule_conf_ptr1->end_time);
  }
  end_time = schedule_conf_ptr1->end_time;
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&schedule_conf_ptr2->begin_time);
  }
  if ( end_time >= schedule_conf_ptr2->begin_time )
  {
    v5 = schedule_conf_ptr1->end_time;
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->end_time >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)schedule_conf_ptr2 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->end_time >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(&schedule_conf_ptr2->end_time);
    }
    if ( v5 < schedule_conf_ptr2->end_time )
      return 1;
  }
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->end_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)schedule_conf_ptr2 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->end_time >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&schedule_conf_ptr2->end_time);
  }
  v6 = schedule_conf_ptr2->end_time;
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&schedule_conf_ptr1->begin_time);
  }
  if ( v6 >= schedule_conf_ptr1->begin_time )
  {
    v7 = schedule_conf_ptr2->end_time;
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->end_time >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)schedule_conf_ptr1 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->end_time >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(&schedule_conf_ptr1->end_time);
    }
    if ( v7 < schedule_conf_ptr1->end_time )
      return 1;
  }
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&schedule_conf_ptr1->begin_time);
  }
  begin_time = schedule_conf_ptr1->begin_time;
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&schedule_conf_ptr2->begin_time);
  }
  if ( begin_time >= schedule_conf_ptr2->begin_time )
  {
    v9 = schedule_conf_ptr1->begin_time;
    if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->end_time >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)schedule_conf_ptr2 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->end_time >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(&schedule_conf_ptr2->end_time);
    }
    if ( v9 < schedule_conf_ptr2->end_time )
      return 1;
  }
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr2->begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&schedule_conf_ptr2->begin_time);
  }
  v10 = schedule_conf_ptr2->begin_time;
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&schedule_conf_ptr1->begin_time);
  }
  if ( v10 < schedule_conf_ptr1->begin_time )
    return 0;
  v11 = schedule_conf_ptr2->begin_time;
  if ( *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->end_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)schedule_conf_ptr1 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&schedule_conf_ptr1->end_time >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&schedule_conf_ptr1->end_time);
  }
  return v11 < schedule_conf_ptr1->end_time;
};

// Line 4907: range 0000000013599050-0000000013599464
std::map<unsigned int,unsigned int> *__fastcall NewActivityExcelConfigMgr::findActivityDrop(
        std::map<unsigned int,unsigned int> *retstr,
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id,
        const std::set<unsigned int> *p_activity_meet_cond_set,
        std::vector<std::pair<unsigned int,unsigned int>> *subject_vec,
        const ActivityDropExcludeSet *exclude_drop_subject_set,
        uint32_t level)
{
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>> *p_activity_drop_subject_map; // rdx
  std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>> *v11; // rdx
  bool v12; // al
  unsigned __int64 v13; // rax
  std::pair<unsigned int,unsigned int> *M_current; // r14
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActivityDropIndexNode> > >::pointer v15; // rax
  unsigned __int64 v16; // rax
  char v22[272]; // [rsp+30h] [rbp-110h] BYREF

  v7 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_2(224LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "5 32 4 16 activity_id:4906 48 8 18 activity_iter:4909 80 8 9 <unknown> 112 16 9 <unknown> 144 48 9 <unknown>";
  *(_QWORD *)(v7 + 16) = NewActivityExcelConfigMgr::findActivityDrop;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = 61956;
  v9[536862721] = -234881024;
  v9[536862722] = 62194;
  v9[536862722] = -234881024;
  v9[536862723] = 62194;
  v9[536862724] = 62194;
  v9[536862726] = -202116109;
  *(_DWORD *)(v7 + 32) = activity_id;
  std::map<unsigned int,unsigned int>::map(retstr);
  p_activity_drop_subject_map = &this->activity_drop_subject_map;
  if ( *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v7 + 48, this);
  *(std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::const_iterator *)(v7 + 48) = std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::find(
                                                                                                  p_activity_drop_subject_map,
                                                                                                  (const std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::key_type *)(v7 + 32));
  v11 = &this->activity_drop_subject_map;
  if ( *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v7 + 80, v7 + 32);
  *(std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::const_iterator *)(v7 + 80) = std::map<unsigned int,std::shared_ptr<ActivityDropIndexNode>>::end(v11);
  v12 = std::operator==(
          (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActivityDropIndexNode> > >::_Self *)(v7 + 48),
          (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActivityDropIndexNode> > >::_Self *)(v7 + 80));
  *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) = -8;
  if ( !v12 && std::vector<std::pair<unsigned int,unsigned int>>::size(subject_vec) )
  {
    v13 = ((v7 + 144) >> 3) + 2147450880;
    *(_DWORD *)v13 = 0;
    *(_WORD *)(v13 + 4) = 0;
    M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin(subject_vec)._M_current;
    *(_WORD *)(((v7 + 112) >> 3) + 0x7FFF8000) = 0;
    v15 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActivityDropIndexNode>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActivityDropIndexNode> > > *const)(v7 + 48));
    std::shared_ptr<ActivityDropIndexNode>::shared_ptr(
      (std::shared_ptr<ActivityDropIndexNode> *const)(v7 + 112),
      &v15->second);
    if ( *(char *)(((v7 + 144) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v7 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v7 - 112 + 47) & 7) >= *(_BYTE *)(((v7 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v7 + 144, 48LL);
    }
    findDropIdBySubjectTree(
      (std::map<unsigned int,unsigned int> *)(v7 + 144),
      (const std::__shared_ptr_access<ActivityDropIndexNode,(__gnu_cxx::_Lock_policy)2,false,false> *)(v7 + 112),
      p_activity_meet_cond_set,
      exclude_drop_subject_set,
      subject_vec,
      (std::vector<std::pair<unsigned int,unsigned int>>::iterator)M_current,
      level);
    std::map<unsigned int,unsigned int>::operator=(retstr, (std::map<unsigned int,unsigned int> *)(v7 + 144));
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v7 + 144));
    v16 = ((v7 + 144) >> 3) + 2147450880;
    *(_DWORD *)v16 = -117901064;
    *(_WORD *)(v16 + 4) = -1800;
    std::shared_ptr<ActivityDropIndexNode>::~shared_ptr((std::shared_ptr<ActivityDropIndexNode> *const)(v7 + 112));
  }
  if ( v22 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8018) = -168430091;
  }
  return retstr;
};

// Line 4923: range 0000000013599466-0000000013599848
std::map<unsigned int,unsigned int> *__cdecl NewActivityExcelConfigMgr::findActivityDrop(
        std::map<unsigned int,unsigned int> *retstr,
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id,
        std::vector<std::pair<unsigned int,unsigned int>> *subject_vec,
        uint32_t level)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  unsigned __int64 v8; // rax
  char v13[256]; // [rsp+20h] [rbp-100h] BYREF

  v5 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(224LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "2 48 48 9 <unknown> 128 56 9 <unknown>";
  *(_QWORD *)(v5 + 16) = NewActivityExcelConfigMgr::findActivityDrop;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61937;
  v7[536862723] = -218959118;
  v7[536862725] = -218103808;
  v7[536862726] = -202116109;
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 183) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 73) & 7) >= *(_BYTE *)(((v5 + 183) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 56LL);
  }
  *(_QWORD *)(v5 + 128) = 0LL;
  *(_QWORD *)(v5 + 136) = 0LL;
  *(_QWORD *)(v5 + 144) = 0LL;
  *(_QWORD *)(v5 + 152) = 0LL;
  *(_QWORD *)(v5 + 160) = 0LL;
  *(_QWORD *)(v5 + 168) = 0LL;
  *(_QWORD *)(v5 + 176) = 0LL;
  std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>>>,std::equal_to<std::set<std::pair<unsigned int,unsigned int>>>,std::allocator<std::set<std::pair<unsigned int,unsigned int>>>>::unordered_set((std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>> >,std::equal_to<std::set<std::pair<unsigned int,unsigned int>> >,std::allocator<std::set<std::pair<unsigned int,unsigned int>> > > *const)(v5 + 128));
  if ( *(char *)(((v5 + 48) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 95) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 32 + 127) & 7) >= *(_BYTE *)(((v5 + 95) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 48, 48LL);
  }
  *(_QWORD *)(v5 + 48) = 0LL;
  *(_QWORD *)(v5 + 56) = 0LL;
  *(_QWORD *)(v5 + 64) = 0LL;
  *(_QWORD *)(v5 + 72) = 0LL;
  *(_QWORD *)(v5 + 80) = 0LL;
  *(_QWORD *)(v5 + 88) = 0LL;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 48));
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 48LL);
  }
  NewActivityExcelConfigMgr::findActivityDrop(
    retstr,
    this,
    activity_id,
    (const std::set<unsigned int> *)(v5 + 48),
    subject_vec,
    (const ActivityDropExcludeSet *)(v5 + 128),
    level);
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 48));
  v8 = ((v5 + 48) >> 3) + 2147450880;
  *(_DWORD *)v8 = -117901064;
  *(_WORD *)(v8 + 4) = -1800;
  std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>>>,std::equal_to<std::set<std::pair<unsigned int,unsigned int>>>,std::allocator<std::set<std::pair<unsigned int,unsigned int>>>>::~unordered_set((std::unordered_set<std::set<std::pair<unsigned int,unsigned int>>,boost::hash<std::set<std::pair<unsigned int,unsigned int>> >,std::equal_to<std::set<std::pair<unsigned int,unsigned int>> >,std::allocator<std::set<std::pair<unsigned int,unsigned int>> > > *const)(v5 + 128));
  if ( v13 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = -168430091;
  }
  return retstr;
};

// Line 4928: range 000000001359984A-0000000013599C40
__int64 __fastcall NewActivityExcelConfigMgr::getSubjectKeyByType(
        const NewActivityExcelConfigMgr *const this,
        uint32_t subject_type,
        const std::string *config_str,
        uint32_t *subject_key)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned int v7; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __int64 result; // rax
  int32_t StringHash; // edi
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  char v16[224]; // [rsp+20h] [rbp-E0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 17 subject_type:4927 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = NewActivityExcelConfigMgr::getSubjectKeyByType;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862723] = -218959118;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 48) = subject_type;
  v7 = *(_DWORD *)(v4 + 48);
  if ( v7 > 6 )
  {
LABEL_18:
    if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "getSubjectKeyByType",
      4950);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v4 + 128),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v12, (const char (*)[27])byte_1AB856C0);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
    result = 0xFFFFFFFFLL;
    goto LABEL_21;
  }
  if ( v7 < 4 && v7 != 1 )
  {
    if ( v7 && v7 - 2 <= 1 )
    {
      StringHash = getStringHash(config_str);
      if ( *(_BYTE *)(((unsigned __int64)subject_key >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)subject_key & 7) + 3) >= *(_BYTE *)(((unsigned __int64)subject_key >> 3) + 0x7FFF8000) )
      {
        StringHash = (int)subject_key;
        __asan_report_store4(subject_key, ((unsigned __int8)subject_key & 7u) + 3);
      }
      *subject_key = StringHash;
      result = 0LL;
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  if ( common::tools::StringUtils::strToNum<unsigned int>(config_str, subject_key, 1) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "getSubjectKeyByType",
      4938);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v8, (const char (*)[19])"wrong config_str: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, config_str);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  else
  {
    result = 0LL;
  }
LABEL_21:
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4958: range 0000000013599C42-0000000013599E3D
__int64 __fastcall NewActivityExcelConfigMgr::findActivityMechanicusId(
        const NewActivityExcelConfigMgr *const this,
        __int64 activity_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<unsigned int,unsigned int> *p_activity_mechanicus_map; // rdx
  std::map<unsigned int,unsigned int> *v6; // rdx
  bool v7; // al
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v8; // rdx
  unsigned int *p_second; // rax
  __int64 result; // rax
  char v11[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 16 activity_id:4957 64 8 9 iter:4959 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::findActivityMechanicusId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = activity_id;
  p_activity_mechanicus_map = &this->activity_mechanicus_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, activity_id);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                        p_activity_mechanicus_map,
                                                                        (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->activity_mechanicus_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 96) = std::map<unsigned int,unsigned int>::end(v6);
  v7 = std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    v8 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
    p_second = &v8->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v8->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4968: range 0000000013599E3E-000000001359A336
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityScoreLimitConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  int v8; // eax
  std::unordered_map<unsigned int,unsigned int> *v9; // rcx
  const unsigned int *v10; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>,bool> v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  int32_t result; // eax
  data::NewActivityScoreLimitExcelConfigMap *__for_range; // [rsp+10h] [rbp-130h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false,false>::reference v16; // [rsp+18h] [rbp-128h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig> >::type *id; // [rsp+20h] [rbp-120h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig> >::type *config; // [rsp+28h] [rbp-118h]
  char v19[272]; // [rsp+30h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 16 __for_begin:4969 64 8 14 __for_end:4969 96 32 9 <unknown> 160 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityScoreLimitConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  __for_range = &this->new_activity_score_limit_excel_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScoreLimitExcelConfig>::iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::NewActivityScoreLimitExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScoreLimitExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::NewActivityScoreLimitExcelConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false> *)(v3 + 64)) )
    {
      v8 = 1;
      goto LABEL_22;
    }
    v16 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false,false> *const)(v3 + 32));
    id = std::get<0ul,unsigned int const,data::NewActivityScoreLimitExcelConfig>(v16);
    config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityScoreLimitExcelConfig>(v16);
    if ( *(_BYTE *)(((unsigned __int64)&config->limit_value >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config->limit_value >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config->limit_value);
    }
    if ( !config->limit_value )
    {
      if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteNewActivityScoreLimitConfig",
        4973);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 96),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             v6,
             (const char (*)[33])"score_limit can not be zero, id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
      v2 = -1;
      v8 = 0;
      goto LABEL_22;
    }
    v9 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::operator[](
           &this->activity_score_limit_map,
           &config->activity_id);
    v11 = std::unordered_map<unsigned int,unsigned int>::emplace<unsigned int const&,unsigned int const&>(
            v9,
            id,
            &config->limit_value,
            (const unsigned int *)v9,
            v10);
    if ( !v11.second )
      break;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreLimitExcelConfig>,false,false> *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 160, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 160),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "rewriteNewActivityScoreLimitConfig",
    4978);
  v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 160),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          v12,
          (const char (*)[27])"duplicated score_limit id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
  v2 = -1;
  v8 = 0;
LABEL_22:
  if ( v8 == 1 )
    v2 = 0;
  result = v2;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4986: range 000000001359A338-000000001359A6CB
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityScoreLimitConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const NewActivityExcelConfigMgr *v5; // rcx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-E4h]
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-E0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false,false>::reference v11; // [rsp+28h] [rbp-D8h]
  std::tuple_element<0,std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> > >::type *activity_id; // [rsp+30h] [rbp-D0h]
  char v13[192]; // [rsp+40h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 16 __for_begin:4988 64 8 14 __for_end:4988 96 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::checkNewActivityScoreLimitConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862724] = -202116109;
  ret = 0;
  __for_range = &this->activity_score_limit_map;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::const_iterator *)(v2 + 32) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false> *)(v2 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false> *)(v2 + 64)) )
  {
    v11 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false,false> *const)(v2 + 32));
    activity_id = std::get<0ul,unsigned int const,std::unordered_map<unsigned int,unsigned int>>(v11);
    std::get<1ul,unsigned int const,std::unordered_map<unsigned int,unsigned int>>(v11);
    v5 = this;
    if ( *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)activity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(activity_id);
    }
    if ( !data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v5, *activity_id) )
    {
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityScoreLimitConfig",
        4992);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 96),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(v6, (const char (*)[60])byte_1AB85960);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, activity_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
      *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
      ret = -1;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> >,false,false> *const)(v2 + 32));
  }
  result = ret;
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5001: range 000000001359A6CC-000000001359AC85
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityScoreRewardConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  NewActivityExcelConfigMgr *v6; // rcx
  uint32_t *p_activity_id; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int v10; // eax
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> *v11; // r15
  const unsigned int *p_reward_id; // rcx
  const unsigned int *p_score; // rdx
  __int64 v14; // rsi
  const unsigned int *v15; // rcx
  std::pair<unsigned int,unsigned int> *v16; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false>,bool> v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  int32_t result; // eax
  data::NewActivityScoreRewardExcelConfigMap *__for_range; // [rsp+20h] [rbp-150h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false,false>::reference v22; // [rsp+28h] [rbp-148h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig> >::type *id; // [rsp+30h] [rbp-140h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig> >::type *config; // [rsp+38h] [rbp-138h]
  char v25[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 8 16 __for_begin:5002 64 8 14 __for_end:5002 96 8 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityScoreRewardConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  __for_range = &this->new_activity_score_reward_excel_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScoreRewardExcelConfig>::iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::NewActivityScoreRewardExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityScoreRewardExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::NewActivityScoreRewardExcelConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false> *)(v3 + 64)) )
    {
      v10 = 1;
      goto LABEL_24;
    }
    v22 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false,false> *const)(v3 + 32));
    id = std::get<0ul,unsigned int const,data::NewActivityScoreRewardExcelConfig>(v22);
    config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityScoreRewardExcelConfig>(v22);
    v6 = this;
    p_activity_id = &config->activity_id;
    if ( *(_BYTE *)(((unsigned __int64)p_activity_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_activity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_activity_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(p_activity_id);
    }
    if ( !data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v6, config->activity_id) )
    {
      *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteNewActivityScoreRewardConfig",
        5006);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v8, (const char (*)[42])byte_1AB85AA0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &config->activity_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      v2 = -1;
      v10 = 0;
      goto LABEL_24;
    }
    v11 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::operator[](
            &this->activity_score_reward_map,
            &config->activity_id);
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
    p_reward_id = &config->reward_id;
    p_score = &config->score;
    v14 = *(unsigned __int8 *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( (_BYTE)v14 )
      __asan_report_store8(v3 + 96, v14);
    *(std::pair<unsigned int,unsigned int> *)(v3 + 96) = std::make_pair<unsigned int const&,unsigned int const&>(
                                                           p_score,
                                                           p_reward_id);
    v17 = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::emplace<unsigned int const&,std::pair<unsigned int,unsigned int>>(
            v11,
            id,
            (std::pair<unsigned int,unsigned int> *)(v3 + 96),
            v15,
            v16);
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( !v17.second )
      break;
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityScoreRewardExcelConfig>,false,false> *const)(v3 + 32));
  }
  *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 192, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 192),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "rewriteNewActivityScoreRewardConfig",
    5011);
  v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 192),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v19 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v18, (const char (*)[27])byte_1AB85B00);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
  v2 = -1;
  v10 = 0;
LABEL_24:
  if ( v10 == 1 )
    v2 = 0;
  result = v2;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5019: range 000000001359AC86-000000001359B58A
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityScoreRewardConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const NewActivityExcelConfigMgr *v6; // rcx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  int v9; // eax
  data::NewActivityType ActivitiyTypeByActivityId; // edx
  __int64 v11; // rsi
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  unsigned int *p_second; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  int v21; // edx
  int32_t result; // eax
  data::ItemLimitType item_limit_type; // [rsp+14h] [rbp-1DCh]
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>> *__for_range; // [rsp+18h] [rbp-1D8h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> >,false,false>::reference v26; // [rsp+20h] [rbp-1D0h]
  std::tuple_element<0,std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> > >::type *activity_id; // [rsp+28h] [rbp-1C8h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> > >::type *reward_config_map; // [rsp+30h] [rbp-1C0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false>::reference v29; // [rsp+48h] [rbp-1A8h]
  std::tuple_element<0,std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *id; // [rsp+50h] [rbp-1A0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *pair; // [rsp+58h] [rbp-198h]
  char v32[400]; // [rsp+60h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 8 16 __for_begin:5020 64 8 14 __for_end:5020 96 8 16 __for_begin:5034 128 8 14 __for_end:50"
                        "34 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkNewActivityScoreRewardConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -202116109;
  __for_range = &this->activity_score_reward_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::const_iterator *)(v3 + 32) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> >,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> >,false> *)(v3 + 64)) )
    {
      v9 = 1;
      goto LABEL_40;
    }
    v26 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> >,false,false> *const)(v3 + 32));
    activity_id = std::get<0ul,unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>(v26);
    reward_config_map = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> > >::type *)std::get<1ul,unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>(v26);
    v6 = this;
    if ( *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)activity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(activity_id);
    }
    if ( !data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v6, *activity_id) )
    {
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityScoreRewardConfig",
        5025);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v7, (const char (*)[42])byte_1AB85AA0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, activity_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v2 = -1;
      v9 = 0;
      goto LABEL_40;
    }
    if ( *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)activity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)activity_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(activity_id);
    }
    ActivitiyTypeByActivityId = NewActivityExcelConfigMgr::getActivitiyTypeByActivityId(this, *activity_id);
    v11 = (unsigned int)ActivitiyTypeByActivityId;
    item_limit_type = NewActivityExcelConfigMgr::getRewardItemLimitType(this, ActivitiyTypeByActivityId);
    if ( item_limit_type == ITEM_LIMIT_NONE )
      break;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, v11);
    *(std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::begin(reward_config_map);
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v11);
    *(std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator *)(v3 + 128) = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::end(reward_config_map);
    while ( 1 )
    {
      if ( !std::__detail::operator!=<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false> *)(v3 + 96),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false> *)(v3 + 128)) )
      {
        v21 = 1;
        goto LABEL_36;
      }
      v29 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false> *const)(v3 + 96));
      id = std::get<0ul,unsigned int const,std::pair<unsigned int,unsigned int>>(v29);
      pair = (std::tuple_element<1,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *)std::get<1ul,unsigned int const,std::pair<unsigned int,unsigned int>>(v29);
      p_second = &pair->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      if ( (unsigned __int8)TxtConfigMgr::isValidRewardIdAndMatchItemLimitType(
                              txt_config_mgr,
                              pair->second,
                              item_limit_type) != 1 )
        break;
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false> *const)(v3 + 96));
    }
    *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkNewActivityScoreRewardConfig",
      5038);
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 288),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v16 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(v15, (const char (*)[57])byte_1AB85CA0);
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &pair->second);
    v18 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v17, (const char (*)[26])byte_1AB85D00);
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, id);
    v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v19, (const char (*)[15])byte_1AB85D40);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, activity_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
    *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v21 = 0;
LABEL_36:
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    if ( v21 != 1 )
    {
      v9 = 0;
      goto LABEL_40;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> >,false,false> *const)(v3 + 32));
  }
  *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 224, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 224),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "checkNewActivityScoreRewardConfig",
    5031);
  v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 224),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v13 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(v12, (const char (*)[54])byte_1AB85C40);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, activity_id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
  v2 = -1;
  v9 = 0;
LABEL_40:
  if ( v9 == 1 )
    v2 = 0;
  result = v2;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 5047: range 000000001359B58C-000000001359B726
const std::pair<unsigned int,unsigned int> *__fastcall NewActivityExcelConfigMgr::findActivityScoreRewardPair(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id,
        uint32_t reward_config_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> *v6; // rax
  const std::pair<unsigned int,unsigned int> *result; // rax
  const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> *v9; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 activity_id:5046 64 4 21 reward_config_id:5046";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::findActivityScoreRewardPair;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = activity_id;
  *(_DWORD *)(v3 + 64) = reward_config_id;
  if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>> const,unsigned int>(
          &this->activity_score_reward_map,
          (const unsigned int *)(v3 + 48))
    || (v6 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::at(
               &this->activity_score_reward_map,
               (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::key_type *)(v3 + 48)),
        !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> const,unsigned int>(
           v6,
           (const unsigned int *)(v3 + 64))) )
  {
    result = 0LL;
  }
  else
  {
    v9 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::at(
           &this->activity_score_reward_map,
           (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>>::key_type *)(v3 + 48));
    result = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::at(
               v9,
               (const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::key_type *)(v3 + 64));
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5056: range 000000001359B728-000000001359C812
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityTimeGroupConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  unsigned int *v7; // rax
  int *v8; // rdx
  int v9; // ecx
  char v10; // al
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int v14; // edx
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  std::vector<unsigned int>::const_reference v18; // rax
  _DWORD *v19; // rdx
  std::vector<unsigned int>::const_reference v20; // rax
  _DWORD *v21; // rdx
  std::vector<unsigned int>::const_reference v22; // rax
  _DWORD *v23; // rdx
  char v24; // al
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  char *v27; // rsi
  unsigned int *v28; // rax
  int *v29; // rdx
  int v30; // ecx
  char v31; // al
  LuaConfigMgr *p_lua_config_mgr; // rcx
  __int64 v33; // rsi
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  int v36; // eax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  data::NewActivityTimeGroupExcelConfigMap *__for_range; // [rsp+18h] [rbp-308h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false>::reference v42; // [rsp+20h] [rbp-300h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig> >::type *id; // [rsp+28h] [rbp-2F8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig> >::type *time_group_config; // [rsp+30h] [rbp-2F0h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+38h] [rbp-2E8h]
  std::set<unsigned int> *__for_range_1; // [rsp+40h] [rbp-2E0h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+48h] [rbp-2D8h]
  char v48[720]; // [rsp+50h] [rbp-2D0h] BYREF

  v3 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(672LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 4 13 group_id:5060 64 4 13 group_id:5081 80 8 16 __for_begin:5058 112 8 14 __for_end:5058 "
                        "144 8 16 __for_begin:5060 176 8 14 __for_end:5060 208 8 16 __for_begin:5081 240 8 14 __for_end:5"
                        "081 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 32 9 <unknow"
                        "n> 592 48 17 group_id_set:5057";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkNewActivityTimeGroupConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = 62194;
  v5[536862727] = -234881024;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862737] = -219021312;
  v5[536862738] = 62194;
  v5[536862740] = -202116109;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 592));
  __for_range = &this->new_activity_time_group_excel_config_map;
  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 80, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::const_iterator *)(v3 + 80) = std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 112, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::const_iterator *)(v3 + 112) = std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 112);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false> *)(v3 + 80),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false> *)(v3 + 112)) )
    {
      v15 = 1;
      goto LABEL_49;
    }
    v42 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false> *const)(v3 + 80));
    id = std::get<0ul,unsigned int const,data::NewActivityTimeGroupExcelConfig>(v42);
    time_group_config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityTimeGroupExcelConfig>(v42);
    __for_range_0 = &time_group_config->group_id_list;
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 144, v6);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 144) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 176, v6);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 176) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v6 = (char *)(v3 + 176);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 144),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 176)) )
      {
        v14 = 1;
        goto LABEL_26;
      }
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      v7 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 144));
      v8 = (int *)v7;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      v9 = *v8;
      v10 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( v10 != 0 && v10 <= 3 )
      {
        LOBYTE(v6) = v10 != 0;
        __asan_report_store4(v3 + 48, v6);
      }
      *(_DWORD *)(v3 + 48) = v9;
      v11 = std::set<unsigned int>::insert(
              (std::set<unsigned int> *const)(v3 + 592),
              (const std::set<unsigned int>::value_type *)(v3 + 48));
      if ( !v11.second )
        break;
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 144));
    }
    *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 272, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkNewActivityTimeGroupConfig",
      5064);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 272),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v13 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            v12,
            (const char (*)[38])"time_group_config duplicate group_id:");
    v6 = (char *)(v3 + 48);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
    *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v14 = 0;
LABEL_26:
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
    if ( v14 != 1 )
    {
      v15 = 0;
      goto LABEL_49;
    }
    if ( std::vector<unsigned int>::size(&time_group_config->duration) != 2 )
    {
      *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityTimeGroupConfig",
        5070);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 336),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
              v16,
              (const char (*)[57])"time_group_config duration size is not 2. time_group_id:");
      v6 = (char *)id;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
      *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v15 = 0;
      goto LABEL_49;
    }
    v18 = std::vector<unsigned int>::operator[](&time_group_config->duration, 0LL);
    v19 = v18;
    if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v18);
    }
    if ( *v19 > 0x17u )
      goto LABEL_41;
    v20 = std::vector<unsigned int>::operator[](&time_group_config->duration, 1uLL);
    v21 = v20;
    if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v20);
    }
    if ( !*v21 )
      goto LABEL_41;
    v22 = std::vector<unsigned int>::operator[](&time_group_config->duration, 1uLL);
    v23 = v22;
    if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v22);
    }
    if ( *v23 <= 0x18u )
      v24 = 0;
    else
LABEL_41:
      v24 = 1;
    if ( v24 )
      break;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false> *const)(v3 + 80));
  }
  *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 112 + 31) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 400, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 400),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "checkNewActivityTimeGroupConfig",
    5076);
  v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 400),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v26 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
          v25,
          (const char (*)[42])"invalid time_group_config. time_group_id:");
  v6 = (char *)id;
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
  *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
  v2 = -1;
  v15 = 0;
LABEL_49:
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
  if ( v15 == 1 )
  {
    __for_range_1 = (std::set<unsigned int> *)(v3 + 592);
    *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 208, v6);
    *(std::set<unsigned int>::iterator *)(v3 + 208) = std::set<unsigned int>::begin(__for_range_1);
    *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 240, v6);
    *(std::set<unsigned int>::iterator *)(v3 + 240) = std::set<unsigned int>::end(__for_range_1);
    while ( 1 )
    {
      v27 = (char *)(v3 + 240);
      if ( !std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 208),
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 240)) )
      {
        v36 = 1;
        goto LABEL_74;
      }
      *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
      v28 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v3 + 208));
      v29 = (int *)v28;
      if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v28 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v28);
      }
      v30 = *v29;
      v31 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
      if ( v31 != 0 && v31 <= 3 )
      {
        LOBYTE(v27) = v31 != 0;
        __asan_report_store4(v3 + 64, v27);
      }
      *(_DWORD *)(v3 + 64) = v30;
      p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v3 + 64);
      v33 = *(unsigned int *)(v3 + 64);
      group_info_config_ptr = LuaConfigMgr::findGroupInfoConfig(p_lua_config_mgr, v33);
      if ( !group_info_config_ptr )
      {
        *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 464) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 96 + 79) & 7) >= *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 464, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 464),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "checkNewActivityTimeGroupConfig",
          5086);
        v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 464),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v35 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v34, (const char (*)[25])byte_1AB7C340);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v3 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 464));
        *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v36 = 0;
        goto LABEL_74;
      }
      if ( *(char *)(((unsigned __int64)&group_info_config_ptr->is_dynamic_load >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&group_info_config_ptr->is_dynamic_load, v33, &group_info_config_ptr->is_dynamic_load);
      if ( !group_info_config_ptr->is_dynamic_load )
        break;
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v3 + 208));
    }
    *(_DWORD *)(((v3 + 528) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 528) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 559) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 559) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 528, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 528),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "checkNewActivityTimeGroupConfig",
      5091);
    v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 528),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v38 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v37, (const char (*)[44])byte_1AB81240);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 528));
    *(_DWORD *)(((v3 + 528) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v36 = 0;
LABEL_74:
    *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = -8;
    if ( v36 == 1 )
      v2 = 0;
  }
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 592));
  if ( v48 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = -168430091;
  }
  return v2;
};

// Line 5099: range 000000001359C814-000000001359CFCC
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityTimeGroupConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  int v9; // eax
  char *v10; // rsi
  unsigned int *v11; // rax
  int *v12; // rdx
  int v13; // ecx
  char v14; // al
  const unsigned int *v15; // rcx
  unsigned int *v16; // rcx
  std::pair<unsigned int,unsigned int> *v17; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false>,bool> v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  int v21; // edx
  int32_t result; // eax
  unsigned int *__y; // [rsp+8h] [rbp-1D8h]
  data::NewActivityTimeGroupExcelConfigMap *__for_range; // [rsp+28h] [rbp-1B8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false>::reference v25; // [rsp+30h] [rbp-1B0h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig> >::type *id; // [rsp+38h] [rbp-1A8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig> >::type *time_group_config; // [rsp+40h] [rbp-1A0h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+48h] [rbp-198h]
  char v29[400]; // [rsp+50h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 13 group_id:5107 64 8 16 __for_begin:5100 96 8 14 __for_end:5100 128 8 16 __for_begin:510"
                        "7 160 8 14 __for_end:5107 192 8 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityTimeGroupConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862728] = -218959118;
  v5[536862730] = -202116109;
  __for_range = &this->new_activity_time_group_excel_config_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::NewActivityTimeGroupExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false> *)(v3 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false> *)(v3 + 96)) )
    {
      v9 = 1;
      goto LABEL_36;
    }
    v25 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false> *const)(v3 + 64));
    id = std::get<0ul,unsigned int const,data::NewActivityTimeGroupExcelConfig>(v25);
    time_group_config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityTimeGroupExcelConfig>(v25);
    if ( std::vector<unsigned int>::size(&time_group_config->duration) != 2 )
      break;
    __for_range_0 = &time_group_config->group_id_list;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v6);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 128) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v6);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 160) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v10 = (char *)(v3 + 160);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 160)) )
      {
        v21 = 1;
        goto LABEL_32;
      }
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      v11 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 128));
      v12 = (int *)v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      v13 = *v12;
      v14 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( v14 != 0 && v14 <= 3 )
      {
        LOBYTE(v10) = v14 != 0;
        __asan_report_store4(v3 + 48, v10);
      }
      *(_DWORD *)(v3 + 48) = v13;
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
      __y = (unsigned int *)std::vector<unsigned int>::operator[](&time_group_config->duration, 1uLL);
      v15 = std::vector<unsigned int>::operator[](&time_group_config->duration, 0LL);
      if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 192, 0LL);
      *(std::pair<unsigned int,unsigned int> *)(v3 + 192) = std::make_pair<unsigned int const&,unsigned int const&>(
                                                              v15,
                                                              __y);
      v18 = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::emplace<unsigned int &,std::pair<unsigned int,unsigned int>>(
              &this->gametime_group_map,
              (unsigned int *)(v3 + 48),
              (std::pair<unsigned int,unsigned int> *)(v3 + 192),
              v16,
              v17);
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
      if ( !v18.second )
        break;
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 128));
    }
    *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "rewriteNewActivityTimeGroupConfig",
      5111);
    v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 288),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v20 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            v19,
            (const char (*)[38])"time_group_config duplicate group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
    *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v21 = 0;
LABEL_32:
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v21 != 1 )
    {
      v9 = 0;
      goto LABEL_36;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityTimeGroupExcelConfig>,false,false> *const)(v3 + 64));
  }
  *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 224, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 224),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "rewriteNewActivityTimeGroupConfig",
    5104);
  v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v3 + 224),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v8 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
         v7,
         (const char (*)[57])"time_group_config duration size is not 2. time_group_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
  v2 = -1;
  v9 = 0;
LABEL_36:
  if ( v9 == 1 )
    v2 = 0;
  result = v2;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 5120: range 000000001359CFCE-000000001359D3EA
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityEntryConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const NewActivityExcelConfigMgr *v6; // rcx
  data::NewActivityType activity_type; // ecx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  int v10; // eax
  int32_t result; // eax
  data::NewActivityEntryConfigMap *__for_range; // [rsp+18h] [rbp-F8h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityEntryConfig>,false,false>::reference v13; // [rsp+20h] [rbp-F0h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityEntryConfig> >::type *id; // [rsp+28h] [rbp-E8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityEntryConfig> >::type *config; // [rsp+30h] [rbp-E0h]
  const data::NewActivityExcelConfig *activity_config_ptr; // [rsp+38h] [rbp-D8h]
  char v17[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 8 16 __for_begin:5121 64 8 14 __for_end:5121 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkNewActivityEntryConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -202116109;
  __for_range = &this->new_activity_entry_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityEntryConfig>::const_iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::NewActivityEntryConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityEntryConfig>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::NewActivityEntryConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityEntryConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityEntryConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityEntryConfig>,false> *)(v3 + 64)) )
    {
      v10 = 1;
      goto LABEL_23;
    }
    v13 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityEntryConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityEntryConfig>,false,false> *const)(v3 + 32));
    id = std::get<0ul,unsigned int const,data::NewActivityEntryConfig>(v13);
    config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityEntryConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityEntryConfig>(v13);
    v6 = this;
    if ( *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(id);
    }
    activity_config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v6, *id);
    if ( activity_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&config->activity_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->activity_type >> 3)
                                                              + 0x7FFF8000) )
      {
        __asan_report_load4(&config->activity_type);
      }
      activity_type = config->activity_type;
      if ( *(_BYTE *)(((unsigned __int64)&activity_config_ptr->activity_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)activity_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&activity_config_ptr->activity_type >> 3)
                                                                           + 0x7FFF8000) )
      {
        __asan_report_load4(&activity_config_ptr->activity_type);
      }
      if ( activity_type != activity_config_ptr->activity_type )
        break;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityEntryConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityEntryConfig>,false,false> *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 96, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 96),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "checkNewActivityEntryConfig",
    5131);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v3 + 96),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
         v8,
         (const char (*)[41])"NewActivityEntryConfig config error, id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
  v2 = -1;
  v10 = 0;
LABEL_23:
  if ( v10 == 1 )
    v2 = 0;
  result = v2;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5139: range 000000001359D3EC-000000001359D657
__int64 __fastcall NewActivityExcelConfigMgr::isActivityGameTimeGroupValid(
        const NewActivityExcelConfigMgr *const this,
        __int64 group_id,
        uint32_t game_hour)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> *p_gametime_group_map; // rdx
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> *v7; // rdx
  bool v8; // al
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false>::pointer v10; // rdx
  std::pair<unsigned int,unsigned int> *p_second; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false>::pointer v12; // rdx
  unsigned int *v13; // rax
  char v15[160]; // [rsp+10h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 group_id:5138 64 8 9 iter:5140 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::isActivityGameTimeGroupValid;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = group_id;
  p_gametime_group_map = &this->gametime_group_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, group_id);
  *(std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::find(p_gametime_group_map, (const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::key_type *)(v3 + 48));
  v7 = &this->gametime_group_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0LL;
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false> *const)(v3 + 64));
    p_second = &v10->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    if ( game_hour < v10->second.first )
      goto LABEL_17;
    v12 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false> *const)(v3 + 64));
    v13 = &v12->second.second;
    if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v13);
    }
    if ( game_hour >= v12->second.second )
LABEL_17:
      result = 0LL;
    else
      result = 1LL;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5149: range 000000001359D658-000000001359D6C6
bool __cdecl NewActivityExcelConfigMgr::isActivityUiHidden(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id)
{
  const data::NewActivityExcelConfig *conf_ptr; // [rsp+18h] [rbp-8h]

  conf_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(this, activity_id);
  if ( !conf_ptr )
    return 0;
  if ( *(char *)(((unsigned __int64)&conf_ptr->is_ban_client_ui >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&conf_ptr->is_ban_client_ui, activity_id, &conf_ptr->is_ban_client_ui);
  return conf_ptr->is_ban_client_ui;
};

// Line 5159: range 000000001359D6C8-000000001359DD88
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityOverlapExcelConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const data::NewActivityOverlapExcelConfig *v6; // rax
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int v10; // r15d
  std::unordered_set<unsigned int> *p_allow_overlap_activity_set; // rcx
  __int64 v12; // rsi
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  int v16; // eax
  int32_t result; // eax
  data::NewActivityOverlapExcelConfigVec *__for_range; // [rsp+28h] [rbp-158h]
  char v19[336]; // [rsp+30h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 9 <unknown> 64 8 16 __for_begin:5160 96 8 14 __for_end:5160 128 16 11 config:5160 160 32 "
                        "9 <unknown> 224 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::rewriteNewActivityOverlapExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -219021312;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  __for_range = &this->new_activity_overlap_excel_config_vec;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::vector<data::NewActivityOverlapExcelConfig>::iterator *)(v3 + 64) = std::vector<data::NewActivityOverlapExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, txt_config_mgr);
  *(std::vector<data::NewActivityOverlapExcelConfig>::iterator *)(v3 + 96) = std::vector<data::NewActivityOverlapExcelConfig>::end(__for_range);
  while ( __gnu_cxx::operator!=<data::NewActivityOverlapExcelConfig *,std::vector<data::NewActivityOverlapExcelConfig>>(
            (const __gnu_cxx::__normal_iterator<data::NewActivityOverlapExcelConfig*,std::vector<data::NewActivityOverlapExcelConfig> > *)(v3 + 64),
            (const __gnu_cxx::__normal_iterator<data::NewActivityOverlapExcelConfig*,std::vector<data::NewActivityOverlapExcelConfig> > *)(v3 + 96)) )
  {
    *(_WORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    v6 = __gnu_cxx::__normal_iterator<data::NewActivityOverlapExcelConfig *,std::vector<data::NewActivityOverlapExcelConfig>>::operator*((const __gnu_cxx::__normal_iterator<data::NewActivityOverlapExcelConfig*,std::vector<data::NewActivityOverlapExcelConfig> > *const)(v3 + 64));
    data::NewActivityOverlapExcelConfig::NewActivityOverlapExcelConfig(
      (data::NewActivityOverlapExcelConfig *const)(v3 + 128),
      v6);
    if ( *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 136);
    if ( !data::isValidNewActivityType(*(_DWORD *)(v3 + 136)) )
      goto LABEL_16;
    if ( *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 136);
    if ( *(_DWORD *)(v3 + 136) )
      v7 = 0;
    else
LABEL_16:
      v7 = 1;
    if ( v7 )
    {
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "rewriteNewActivityOverlapExcelConfig",
        5165);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v8, (const char (*)[56])byte_1AB863A0);
      common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(
        v9,
        (const data::NewActivityType *)(v3 + 136));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v10 = 0;
    }
    else
    {
      p_allow_overlap_activity_set = &this->allow_overlap_activity_set;
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v3 + 136);
      v12 = *(unsigned int *)(v3 + 136);
      if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 48, v12);
      *(_DWORD *)(v3 + 48) = v12;
      v13 = std::unordered_set<unsigned int>::insert(
              p_allow_overlap_activity_set,
              (std::unordered_set<unsigned int>::value_type *)(v3 + 48));
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( !v13.second )
      {
        *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/NewActivityExcelConfig.cpp",
          "rewriteNewActivityOverlapExcelConfig",
          5170);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(v14, (const char (*)[55])byte_1AB86400);
        common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(
          v15,
          (const data::NewActivityType *)(v3 + 136));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
        *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else
      {
        v10 = 1;
      }
    }
    data::NewActivityOverlapExcelConfig::~NewActivityOverlapExcelConfig((data::NewActivityOverlapExcelConfig *const)(v3 + 128));
    if ( v10 != 1 )
    {
      v16 = 0;
      goto LABEL_35;
    }
    __gnu_cxx::__normal_iterator<data::NewActivityOverlapExcelConfig *,std::vector<data::NewActivityOverlapExcelConfig>>::operator++((__gnu_cxx::__normal_iterator<data::NewActivityOverlapExcelConfig*,std::vector<data::NewActivityOverlapExcelConfig> > *const)(v3 + 64));
  }
  v16 = 1;
LABEL_35:
  if ( v16 == 1 )
    v2 = 0;
  result = v2;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 5178: range 000000001359DD8A-000000001359F935
int32_t __cdecl NewActivityExcelConfigMgr::checkDynamicGroupExecComplete(
        const NewActivityExcelConfigMgr *const this,
        const std::vector<data::NewActivityExec> *meet_exec,
        const std::vector<data::NewActivityExec> *expire_exec)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  char *v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  std::vector<std::string>::size_type v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rax
  char *v18; // rsi
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  std::vector<std::string>::size_type v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  char *v26; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v27; // rax
  int *v28; // rdx
  int v29; // ecx
  char v30; // al
  int v31; // edx
  int v32; // edx
  common::milog::MiLogStream *v34; // [rsp+0h] [rbp-610h]
  common::milog::MiLogStream *v35; // [rsp+0h] [rbp-610h]
  std::vector<unsigned int> *__for_range_3; // [rsp+38h] [rbp-5D8h]
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range_4; // [rsp+40h] [rbp-5D0h]
  std::pair<unsigned int,unsigned int> *group_type; // [rsp+48h] [rbp-5C8h]
  const data::NewActivityExec *exec_0; // [rsp+50h] [rbp-5C0h]
  const std::vector<std::string> *__for_range_2; // [rsp+58h] [rbp-5B8h]
  const std::string *group_str_0; // [rsp+60h] [rbp-5B0h]
  const data::NewActivityExec *exec; // [rsp+68h] [rbp-5A8h]
  const std::vector<std::string> *__for_range_0; // [rsp+70h] [rbp-5A0h]
  const std::string *group_str; // [rsp+78h] [rbp-598h]
  char v46[1424]; // [rsp+80h] [rbp-590h] BYREF

  v4 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1376LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "33 48 4 13 group_id:5187 64 4 15 group_type:5203 80 4 19 group_sub_type:5204 96 4 13 group_id:52"
                        "26 112 4 15 group_type:5242 128 4 19 group_sub_type:5243 144 4 13 group_id:5252 160 8 16 __for_b"
                        "egin:5181 192 8 14 __for_end:5181 224 8 16 __for_begin:5185 256 8 14 __for_end:5185 288 8 9 <unk"
                        "nown> 320 8 9 <unknown> 352 8 16 __for_begin:5219 384 8 14 __for_end:5219 416 8 16 __for_begin:5"
                        "224 448 8 14 __for_end:5224 480 8 9 <unknown> 512 8 9 <unknown> 544 8 16 __for_begin:5252 576 8 "
                        "14 __for_end:5252 608 8 16 __for_begin:5259 640 8 14 __for_end:5259 672 24 19 load_group_vec:517"
                        "9 736 24 24 load_group_type_vec:5180 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 99"
                        "2 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 56 21 unload_group_set:5217 1280 5"
                        "6 26 unload_group_type_set:5218";
  *(_QWORD *)(v4 + 16) = NewActivityExcelConfigMgr::checkDynamicGroupExecComplete;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -234556924;
  v6[536862725] = -218959360;
  v6[536862726] = -218959360;
  v6[536862727] = -218959360;
  v6[536862728] = -218959360;
  v6[536862729] = -218959360;
  v6[536862730] = -218959360;
  v6[536862731] = -218959360;
  v6[536862732] = -218959360;
  v6[536862733] = -218959360;
  v6[536862734] = -218959360;
  v6[536862735] = -218959360;
  v6[536862736] = -218959360;
  v6[536862737] = -218959360;
  v6[536862738] = -218959360;
  v6[536862739] = -218959360;
  v6[536862740] = -218959360;
  v6[536862741] = -234881024;
  v6[536862742] = -218959118;
  v6[536862743] = -234881024;
  v6[536862744] = -218959118;
  v6[536862746] = -218959118;
  v6[536862748] = -218959118;
  v6[536862750] = -218959118;
  v6[536862752] = -218959118;
  v6[536862754] = -218959118;
  v6[536862756] = -218959118;
  v6[536862758] = -234881024;
  v6[536862759] = -218959118;
  v6[536862761] = -218103808;
  v6[536862762] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 672));
  std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 736));
  if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 160, meet_exec);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v4 + 160) = std::vector<data::NewActivityExec>::begin(meet_exec);
  if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 192, meet_exec);
  *(std::vector<data::NewActivityExec>::const_iterator *)(v4 + 192) = std::vector<data::NewActivityExec>::end(meet_exec);
  while ( 1 )
  {
    v7 = (char *)(v4 + 192);
    if ( !__gnu_cxx::operator!=<data::NewActivityExec const*,std::vector<data::NewActivityExec>>(
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v4 + 160),
            (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v4 + 192)) )
      break;
    exec = __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v4 + 160));
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    if ( exec->type == NEW_ACTIVITY_ACTION_LOAD_DYNAMIC_GROUP )
    {
      __for_range_0 = &exec->param;
      *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 224, v7);
      *(std::vector<std::string>::const_iterator *)(v4 + 224) = std::vector<std::string>::begin(__for_range_0);
      *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 256, v7);
      *(std::vector<std::string>::const_iterator *)(v4 + 256) = std::vector<std::string>::end(__for_range_0);
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v4 + 224),
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v4 + 256)) )
      {
        group_str = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 224));
        *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v4 + 48, v4 + 256);
        *(_DWORD *)(v4 + 48) = 0;
        if ( common::tools::StringUtils::strToNum<unsigned int>(group_str, (unsigned int *)(v4 + 48), 1) )
        {
          *(_DWORD *)(((v4 + 800) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 800) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 831) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 63) & 7) >= *(_BYTE *)(((v4 + 831) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 800, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 800),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "checkDynamicGroupExecComplete",
            5190);
          v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v4 + 800),
                 (const char (*)[16])"[CONFIG_ERROR] ");
          v9 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                 v8,
                 (const char (*)[17])"strToNum fails, ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, group_str);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 800));
          *(_DWORD *)(((v4 + 800) >> 3) + 0x7FFF8000) = -117901064;
        }
        else
        {
          std::vector<unsigned int>::push_back(
            (std::vector<unsigned int> *const)(v4 + 672),
            (const std::vector<unsigned int>::value_type *)(v4 + 48));
        }
        *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 224));
      }
      *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) = -8;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&exec->type);
      }
      if ( exec->type == NEW_ACTIVITY_ACTION_LOAD_SPECIFY_BUSINESSINFO_DYNAMIC_GROUP )
      {
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 64, v7);
          *(_DWORD *)(v4 + 64) = 0;
          *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 80, v7);
          *(_DWORD *)(v4 + 80) = 0;
          if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
                 &exec->param,
                 (unsigned int *)(v4 + 64),
                 (unsigned int *)(v4 + 80),
                 (unsigned int *)&exec->param) )
          {
            *(_DWORD *)(((v4 + 928) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 928) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 959) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 65) & 7) >= *(_BYTE *)(((v4 + 959) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 928, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 928),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "checkDynamicGroupExecComplete",
              5207);
            v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 928),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                    v13,
                    (const char (*)[25])"strVecToNum fail. param:");
            common::milog::MiLogStream::operator<<<std::string>(v14, &exec->param);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 928));
            *(_DWORD *)(((v4 + 928) >> 3) + 0x7FFF8000) = -117901064;
          }
          else
          {
            *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) = 0;
            std::pair<unsigned int,unsigned int>::pair<unsigned int &,unsigned int &,true>(
              (std::pair<unsigned int,unsigned int> *const)(v4 + 320),
              (unsigned int *)(v4 + 64),
              (unsigned int *)(v4 + 80));
            std::vector<std::pair<unsigned int,unsigned int>>::push_back(
              (std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 736),
              (std::vector<std::pair<unsigned int,unsigned int>>::value_type *)(v4 + 320));
            *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) = -8;
          }
        }
        else
        {
          *(_DWORD *)(((v4 + 864) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 864) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 895) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 895) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 864, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 864),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/NewActivityExcelConfig.cpp",
            "checkDynamicGroupExecComplete",
            5200);
          v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 864),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v34 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  v10,
                  (const char (*)[19])"action param size ");
          *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) = 0;
          v11 = std::vector<std::string>::size(&exec->param);
          if ( *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) )
            v11 = __asan_report_store8(v4 + 288, "action param size ");
          *(_QWORD *)(v4 + 288) = v11;
          v12 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v34,
                  (const unsigned __int64 *)(v4 + 288));
          common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v12, (const char (*)[12])" is invalid");
          *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 864));
          *(_DWORD *)(((v4 + 864) >> 3) + 0x7FFF8000) = -117901064;
        }
        *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
      }
    }
    __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v4 + 160));
  }
  *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = -8;
  if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v4 + 672))
    && std::vector<std::pair<unsigned int,unsigned int>>::empty((const std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 736)) )
  {
    v3 = 0;
  }
  else
  {
    v16 = ((v4 + 1184) >> 3) + 2147450880;
    *(_DWORD *)v16 = 0;
    *(_WORD *)(v16 + 4) = 0;
    *(_BYTE *)(v16 + 6) = 0;
    std::unordered_set<unsigned int>::unordered_set((std::unordered_set<unsigned int> *const)(v4 + 1184));
    v17 = ((v4 + 1280) >> 3) + 2147450880;
    *(_DWORD *)v17 = 0;
    *(_WORD *)(v17 + 4) = 0;
    *(_BYTE *)(v17 + 6) = 0;
    std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<unsigned int,unsigned int>>>::unordered_set((std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<unsigned int,unsigned int> > > *const)(v4 + 1280));
    *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 352, v7);
    *(std::vector<data::NewActivityExec>::const_iterator *)(v4 + 352) = std::vector<data::NewActivityExec>::begin(expire_exec);
    *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 384, v7);
    *(std::vector<data::NewActivityExec>::const_iterator *)(v4 + 384) = std::vector<data::NewActivityExec>::end(expire_exec);
    while ( 1 )
    {
      v18 = (char *)(v4 + 384);
      if ( !__gnu_cxx::operator!=<data::NewActivityExec const*,std::vector<data::NewActivityExec>>(
              (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v4 + 352),
              (const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *)(v4 + 384)) )
        break;
      exec_0 = __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v4 + 352));
      if ( *(_BYTE *)(((unsigned __int64)&exec_0->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&exec_0->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&exec_0->type);
      }
      if ( exec_0->type == NEW_ACTIVITY_ACTION_UNLOAD_DYNAMIC_GROUP
        || exec_0->type == NEW_ACTIVITY_ACTION_DELAY_UNLOAD_DYNAMIC_GROUP )
      {
        __for_range_2 = &exec_0->param;
        *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v4 + 416, v18);
        *(std::vector<std::string>::const_iterator *)(v4 + 416) = std::vector<std::string>::begin(__for_range_2);
        *(_BYTE *)(((v4 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v4 + 448) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v4 + 448, v18);
        *(std::vector<std::string>::const_iterator *)(v4 + 448) = std::vector<std::string>::end(__for_range_2);
        while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
                  (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v4 + 416),
                  (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v4 + 448)) )
        {
          group_str_0 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 416));
          *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 96, v4 + 448);
          *(_DWORD *)(v4 + 96) = 0;
          if ( common::tools::StringUtils::strToNum<unsigned int>(group_str_0, (unsigned int *)(v4 + 96), 1) )
          {
            *(_DWORD *)(((v4 + 992) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 992) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1023) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 1) & 7) >= *(_BYTE *)(((v4 + 1023) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 992, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 992),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "checkDynamicGroupExecComplete",
              5229);
            v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 992),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v20 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    v19,
                    (const char (*)[17])"strToNum fails, ");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, group_str_0);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 992));
            *(_DWORD *)(((v4 + 992) >> 3) + 0x7FFF8000) = -117901064;
          }
          else
          {
            std::unordered_set<unsigned int>::insert(
              (std::unordered_set<unsigned int> *const)(v4 + 1184),
              (const std::unordered_set<unsigned int>::value_type *)(v4 + 96));
          }
          *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
          __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 416));
        }
        *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 448) >> 3) + 0x7FFF8000) = -8;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&exec_0->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec_0->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec_0->type);
        }
        if ( exec_0->type == NEW_ACTIVITY_ACTION_UNLOAD_SPECIFY_BUSINESSINFO_DYNAMIC_GROUP )
        {
          if ( std::vector<std::string>::size(&exec_0->param) > 1 )
          {
            *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v4 + 112, v18);
            *(_DWORD *)(v4 + 112) = 0;
            *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v4 + 128, v18);
            *(_DWORD *)(v4 + 128) = 0;
            if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
                   &exec_0->param,
                   (unsigned int *)(v4 + 112),
                   (unsigned int *)(v4 + 128),
                   (unsigned int *)&exec_0->param) )
            {
              *(_DWORD *)(((v4 + 1120) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1120) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1151) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 1151) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1120, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1120),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/NewActivityExcelConfig.cpp",
                "checkDynamicGroupExecComplete",
                5246);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1120),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                      v24,
                      (const char (*)[25])"strVecToNum fail. param:");
              common::milog::MiLogStream::operator<<<std::string>(v25, &exec_0->param);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1120));
              *(_DWORD *)(((v4 + 1120) >> 3) + 0x7FFF8000) = -117901064;
            }
            else
            {
              *(_BYTE *)(((v4 + 512) >> 3) + 0x7FFF8000) = 0;
              std::pair<unsigned int,unsigned int>::pair<unsigned int &,unsigned int &,true>(
                (std::pair<unsigned int,unsigned int> *const)(v4 + 512),
                (unsigned int *)(v4 + 112),
                (unsigned int *)(v4 + 128));
              std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<unsigned int,unsigned int>>>::insert(
                (std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<unsigned int,unsigned int> > > *const)(v4 + 1280),
                (std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<unsigned int,unsigned int> > >::value_type *)(v4 + 512));
              *(_BYTE *)(((v4 + 512) >> 3) + 0x7FFF8000) = -8;
            }
          }
          else
          {
            *(_DWORD *)(((v4 + 1056) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 1056) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1087) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 63) & 7) >= *(_BYTE *)(((v4 + 1087) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1056, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 1056),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/NewActivityExcelConfig.cpp",
              "checkDynamicGroupExecComplete",
              5239);
            v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 1056),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v35 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    v21,
                    (const char (*)[19])"action param size ");
            *(_BYTE *)(((v4 + 480) >> 3) + 0x7FFF8000) = 0;
            v22 = std::vector<std::string>::size(&exec_0->param);
            if ( *(_BYTE *)(((v4 + 480) >> 3) + 0x7FFF8000) )
              v22 = __asan_report_store8(v4 + 480, "action param size ");
            *(_QWORD *)(v4 + 480) = v22;
            v23 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v35,
                    (const unsigned __int64 *)(v4 + 480));
            common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" is invalid");
            *(_BYTE *)(((v4 + 480) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1056));
            *(_DWORD *)(((v4 + 1056) >> 3) + 0x7FFF8000) = -117901064;
          }
          *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = -8;
        }
      }
      __gnu_cxx::__normal_iterator<data::NewActivityExec const*,std::vector<data::NewActivityExec>>::operator++((__gnu_cxx::__normal_iterator<const data::NewActivityExec*,std::vector<data::NewActivityExec> > *const)(v4 + 352));
    }
    *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) = -8;
    __for_range_3 = (std::vector<unsigned int> *)(v4 + 672);
    *(_BYTE *)(((v4 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 544) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 544, v18);
    *(std::vector<unsigned int>::iterator *)(v4 + 544) = std::vector<unsigned int>::begin(__for_range_3);
    *(_BYTE *)(((v4 + 576) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 576) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 576, v18);
    *(std::vector<unsigned int>::iterator *)(v4 + 576) = std::vector<unsigned int>::end(__for_range_3);
    while ( 1 )
    {
      v26 = (char *)(v4 + 576);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 544),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 576)) )
        break;
      *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = 4;
      v27 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 544));
      v28 = (int *)v27;
      if ( *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v27 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v27);
      }
      v29 = *v28;
      v30 = *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000);
      if ( v30 != 0 && v30 <= 3 )
      {
        LOBYTE(v26) = v30 != 0;
        __asan_report_store4(v4 + 144, v26);
      }
      *(_DWORD *)(v4 + 144) = v29;
      v26 = (char *)(v4 + 144);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
              (std::unordered_set<unsigned int> *)(v4 + 1184),
              (const unsigned int *)(v4 + 144)) )
      {
        v3 = -1;
        v31 = 0;
        goto LABEL_113;
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 544));
    }
    v31 = 1;
LABEL_113:
    *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 544) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 576) >> 3) + 0x7FFF8000) = -8;
    if ( v31 == 1 )
    {
      __for_range_4 = (std::vector<std::pair<unsigned int,unsigned int>> *)(v4 + 736);
      *(_BYTE *)(((v4 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 608) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 608, v26);
      *(std::vector<std::pair<unsigned int,unsigned int>>::iterator *)(v4 + 608) = std::vector<std::pair<unsigned int,unsigned int>>::begin(__for_range_4);
      *(_BYTE *)(((v4 + 640) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 640) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 640, v26);
      *(std::vector<std::pair<unsigned int,unsigned int>>::iterator *)(v4 + 640) = std::vector<std::pair<unsigned int,unsigned int>>::end(__for_range_4);
      while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
                (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v4 + 608),
                (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)(v4 + 640)) )
      {
        group_type = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)(v4 + 608));
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<unsigned int,unsigned int>>>,std::pair<unsigned int,unsigned int>>(
                (std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<unsigned int,unsigned int> > > *)(v4 + 1280),
                group_type) )
        {
          v3 = -1;
          v32 = 0;
          goto LABEL_124;
        }
        __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)(v4 + 608));
      }
      v32 = 1;
LABEL_124:
      *(_BYTE *)(((v4 + 608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 640) >> 3) + 0x7FFF8000) = -8;
      if ( v32 == 1 )
        v3 = 0;
    }
    std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<unsigned int,unsigned int>>>::~unordered_set((std::unordered_set<std::pair<unsigned int,unsigned int>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<unsigned int,unsigned int> > > *const)(v4 + 1280));
    std::unordered_set<unsigned int>::~unordered_set((std::unordered_set<unsigned int> *const)(v4 + 1184));
  }
  std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 736));
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 672));
  if ( v46 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF808C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 148) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v4 >> 3) + 0x7FFF8098) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80A4) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1376LL, v46);
  }
  return v3;
};

// Line 5270: range 000000001359F936-000000001359FB83
__int64 __fastcall NewActivityExcelConfigMgr::getActivityContentStayDayCount(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  __int64 result; // rax
  const data::NewActivityEntryConfig *config_ptr; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 16 activity_id:5269 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::getActivityContentStayDayCount;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862723] = -202116109;
  *(_DWORD *)(v2 + 48) = activity_id;
  config_ptr = data::NewActivityExcelConfigMgrBase::findNewActivityEntryConfig(this, *(unsigned int *)(v2 + 48));
  if ( config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&config_ptr->duration >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_ptr->duration >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_ptr->duration);
    }
    result = config_ptr->duration;
  }
  else
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_manual/NewActivityExcelConfig.cpp",
      "getActivityContentStayDayCount",
      5274);
    v5 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
           (common::milog::MiLogStream *const)(v2 + 64),
           (const char (*)[48])"findNewActivityEntryConfig failed, activity_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0LL;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5281: range 000000001359FB84-000000001359FC74
const std::set<unsigned int> *__fastcall NewActivityExcelConfigMgr::getBannerCondIdSetByActivityId(
        const NewActivityExcelConfigMgr *const this,
        uint32_t activity_id,
        bool is_meet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::map<unsigned int,std::set<unsigned int>> *p_activity_banner_meet_cond_ids_map; // rax
  const std::set<unsigned int> *result; // rax
  char v9[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 16 activity_id:5280";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::getBannerCondIdSetByActivityId;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = activity_id;
  if ( is_meet )
    p_activity_banner_meet_cond_ids_map = &this->activity_banner_meet_cond_ids_map;
  else
    p_activity_banner_meet_cond_ids_map = &this->activity_banner_expire_cond_ids_map;
  result = common::tools::MiscUtils::findMapValuePointer<std::map<unsigned int,std::set<unsigned int>> const>(
             p_activity_banner_meet_cond_ids_map,
             (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5287: range 000000001359FC76-000000001359FECE
int32_t __cdecl NewActivityExcelConfigMgr::rewriteNewActivityPushtipsExcelConfig(
        NewActivityExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  uint32_t *p_watcher_id; // rax
  std::vector<unsigned int> *v6; // rdx
  int32_t result; // eax
  data::NewActivityPushTipsConfigMap *__for_range; // [rsp+10h] [rbp-A0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::reference v9; // [rsp+18h] [rbp-98h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityPushTipsConfig> >::type *activity_push_tips_id; // [rsp+20h] [rbp-90h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityPushTipsConfig> >::type *excel_config; // [rsp+28h] [rbp-88h]
  char v12[128]; // [rsp+30h] [rbp-80h] BYREF

  v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false> *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false>::__node_type *)"2 32 8 16 __for_begin:5288 64 8 14 __for_end:5288";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false>::__node_type *)NewActivityExcelConfigMgr::rewriteNewActivityPushtipsExcelConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  __for_range = &this->new_activity_push_tips_config_map;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], txt_config_mgr);
  v2[4]._M_cur = std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::begin(__for_range)._M_cur;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], txt_config_mgr);
  v2[8]._M_cur = std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false>(v2 + 4, v2 + 8) )
  {
    v9 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::operator*(v2 + 4);
    activity_push_tips_id = std::get<0ul,unsigned int const,data::NewActivityPushTipsConfig>(v9);
    excel_config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityPushTipsConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityPushTipsConfig>(v9);
    p_watcher_id = &excel_config->watcher_id;
    if ( *(_BYTE *)(((unsigned __int64)p_watcher_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_watcher_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_watcher_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_watcher_id);
    }
    if ( excel_config->watcher_id )
    {
      v6 = std::unordered_map<unsigned int,std::vector<unsigned int>>::operator[](
             &this->watcher_activity_push_tips_map,
             &excel_config->watcher_id);
      std::vector<unsigned int>::emplace_back<unsigned int const&>(v6, activity_push_tips_id, (const unsigned int *)v6);
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::operator++(v2 + 4);
  }
  result = 0;
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5303: range 000000001359FED0-00000000135A0476
int32_t __cdecl NewActivityExcelConfigMgr::checkNewActivityPushtipsExcelConfig(
        const NewActivityExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  uint32_t *p_watcher_id; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int v11; // eax
  const NewActivityExcelConfigMgr *v12; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int32_t result; // eax
  data::NewActivityPushTipsConfigMap *__for_range; // [rsp+10h] [rbp-140h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::reference v19; // [rsp+18h] [rbp-138h]
  std::tuple_element<0,std::pair<unsigned int const,data::NewActivityPushTipsConfig> >::type *activity_push_tips_id; // [rsp+20h] [rbp-130h]
  std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityPushTipsConfig> >::type *excel_config; // [rsp+28h] [rbp-128h]
  char v22[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 16 __for_begin:5304 64 8 14 __for_end:5304 96 32 9 <unknown> 160 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::checkNewActivityPushtipsExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  __for_range = &this->new_activity_push_tips_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::const_iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false> *)(v3 + 64)) )
    {
      v11 = 1;
      goto LABEL_25;
    }
    v19 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false> *const)(v3 + 32));
    activity_push_tips_id = std::get<0ul,unsigned int const,data::NewActivityPushTipsConfig>(v19);
    excel_config = (std::tuple_element<1,const std::pair<unsigned int const,data::NewActivityPushTipsConfig> >::type *)std::get<1ul,unsigned int const,data::NewActivityPushTipsConfig>(v19);
    p_watcher_id = &excel_config->watcher_id;
    if ( *(_BYTE *)(((unsigned __int64)p_watcher_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_watcher_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_watcher_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_watcher_id);
    }
    if ( excel_config->watcher_id
      && !data::WatcherExcelConfigMgrBase::findGlobalWatcherConfig(
            &txt_config_mgr->watcher_config_mgr,
            excel_config->watcher_id) )
    {
      if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/NewActivityExcelConfig.cpp",
        "checkNewActivityPushtipsExcelConfig",
        5312);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 96),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [88],(char *[88])0>(v7, (const char (*)[88])byte_1AB86A40);
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, activity_push_tips_id);
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v9, (const char (*)[15])", watcher id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &excel_config->watcher_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
      v2 = -1;
      v11 = 0;
      goto LABEL_25;
    }
    v12 = this;
    if ( *(_BYTE *)(((unsigned __int64)&excel_config->activity_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)excel_config + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&excel_config->activity_id >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load4(&excel_config->activity_id);
    }
    if ( !data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(v12, excel_config->activity_id) )
      break;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false> *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 160, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 160),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/NewActivityExcelConfig.cpp",
    "checkNewActivityPushtipsExcelConfig",
    5320);
  v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 160),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v14 = common::milog::MiLogStream::operator<<<char [73],(char *[73])0>(v13, (const char (*)[73])byte_1AB86B00);
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, activity_push_tips_id);
  v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v15, (const char (*)[16])", activity_id: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &excel_config->activity_id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
  v2 = -1;
  v11 = 0;
LABEL_25:
  if ( v11 == 1 )
    v2 = 0;
  result = v2;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5329: range 00000000135A0478-00000000135A0682
bool __fastcall NewActivityExcelConfigMgr::isValidActivityPushtipsId(
        const NewActivityExcelConfigMgr *const this,
        __int64 activity_push_tips_id,
        uint32_t activity_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  data::NewActivityPushTipsConfigMap *p_new_activity_push_tips_config_map; // rdx
  data::NewActivityPushTipsConfigMap *v7; // rdx
  bool v8; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::pointer v9; // rdx
  uint32_t *p_activity_id; // rax
  bool result; // al
  char v13[160]; // [rsp+10h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 26 activity_push_tips_id:5328 64 8 9 iter:5330 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = NewActivityExcelConfigMgr::isValidActivityPushtipsId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = activity_push_tips_id;
  p_new_activity_push_tips_config_map = &this->new_activity_push_tips_config_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, activity_push_tips_id);
  *(std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::find(
                                                                                                     p_new_activity_push_tips_config_map,
                                                                                                     (const std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::key_type *)(v3 + 48));
  v7 = &this->new_activity_push_tips_config_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::NewActivityPushTipsConfig>::end(v7);
  v8 = std::__detail::operator!=<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::NewActivityPushTipsConfig>,false,false> *const)(v3 + 64));
    p_activity_id = &v9->second.activity_id;
    if ( *(_BYTE *)(((unsigned __int64)p_activity_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_activity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_activity_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(p_activity_id);
    }
    result = activity_id == v9->second.activity_id;
  }
  else
  {
    result = 0;
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5339: range 00000000135A0684-00000000135A087F
__int64 __fastcall NewActivityExcelConfigMgr::findActivityIdByCoinType(
        const NewActivityExcelConfigMgr *const this,
        __int64 coin_type)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<proto::VirtualItem,unsigned int> *p_coin_type_activity_id_map; // rdx
  std::map<proto::VirtualItem,unsigned int> *v6; // rdx
  bool v7; // al
  std::_Rb_tree_const_iterator<std::pair<const proto::VirtualItem,unsigned int> >::pointer v8; // rdx
  unsigned int *p_second; // rax
  __int64 result; // rax
  char v11[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 coin_type:5338 64 8 9 iter:5340 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = NewActivityExcelConfigMgr::findActivityIdByCoinType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = coin_type;
  p_coin_type_activity_id_map = &this->coin_type_activity_id_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, coin_type);
  *(std::map<proto::VirtualItem,unsigned int>::const_iterator *)(v2 + 64) = std::map<proto::VirtualItem,unsigned int>::find(
                                                                              p_coin_type_activity_id_map,
                                                                              (const std::map<proto::VirtualItem,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->coin_type_activity_id_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<proto::VirtualItem,unsigned int>::const_iterator *)(v2 + 96) = std::map<proto::VirtualItem,unsigned int>::end(v6);
  v7 = std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<const proto::VirtualItem,unsigned int> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const proto::VirtualItem,unsigned int> >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    v8 = std::_Rb_tree_const_iterator<std::pair<proto::VirtualItem const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const proto::VirtualItem,unsigned int> > *const)(v2 + 64));
    p_second = &v8->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v8->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5346: range 00000000135A0D1A-00000000135A0D2E
void __cdecl GLOBAL__sub_I_merge_single_DungeonExcelConfig_gen_cpp()
{
  __static_initialization_and_destruction_0(1, 0xFFFF);
};

// Line 5346: range 00000000135A0880-00000000135A0D19
void __cdecl __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const boost::system::error_category *system_category; // rax
  const boost::system::error_category *netdb_category; // rax
  const boost::system::error_category *addrinfo_category; // rax
  const boost::system::error_category *misc_category; // rax
  __int64 v9; // rsi
  _BYTE *v10; // rcx
  char v11; // dl
  std::unordered_set<unsigned int> *v12; // rsi
  __int64 v13; // rdx
  _BYTE *v14; // rcx
  char v15; // dl
  __int64 v16; // rdx
  const char *v17; // rcx
  char v18[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 12 9 <unknown>";
  *(_QWORD *)(v2 + 16) = __static_initialization_and_destruction_0;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -202177536;
  if ( __initialize_p == 1 )
  {
    __asan_before_dynamic_init("src_merge/merge_single_DungeonExcelConfig.gen.cpp");
    if ( __priority == 0xFFFF )
    {
      std::ios_base::Init::Init(&std::__ioinit);
      __cxa_atexit((void (__fastcall *)(void *))&std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
      boost::none_t::none_t((boost::none_t *const)&boost::none, (boost::none_t::init_tag)&std::__ioinit);
      boost::optional_ns::in_place_init_t::in_place_init_t(
        (boost::optional_ns::in_place_init_t *const)&boost::optional_ns::in_place_init,
        (boost::optional_ns::in_place_init_t::init_tag)&std::__ioinit);
      boost::optional_ns::in_place_init_if_t::in_place_init_if_t(
        (boost::optional_ns::in_place_init_if_t *const)&boost::optional_ns::in_place_init_if,
        (boost::optional_ns::in_place_init_if_t::init_tag)&std::__ioinit);
      system_category = boost::asio::error::get_system_category();
      if ( *(_BYTE *)(((unsigned __int64)&boost::asio::error::system_category >> 3) + 0x7FFF8000) )
        system_category = (const boost::system::error_category *)__asan_report_store8(
                                                                   &boost::asio::error::system_category,
                                                                   &std::__ioinit);
      boost::asio::error::system_category = system_category;
      netdb_category = boost::asio::error::get_netdb_category();
      if ( *(_BYTE *)(((unsigned __int64)&boost::asio::error::netdb_category >> 3) + 0x7FFF8000) )
        netdb_category = (const boost::system::error_category *)__asan_report_store8(
                                                                  &boost::asio::error::netdb_category,
                                                                  &std::__ioinit);
      boost::asio::error::netdb_category = netdb_category;
      addrinfo_category = boost::asio::error::get_addrinfo_category();
      if ( *(_BYTE *)(((unsigned __int64)&boost::asio::error::addrinfo_category >> 3) + 0x7FFF8000) )
        addrinfo_category = (const boost::system::error_category *)__asan_report_store8(
                                                                     &boost::asio::error::addrinfo_category,
                                                                     &std::__ioinit);
      boost::asio::error::addrinfo_category = addrinfo_category;
      misc_category = boost::asio::error::get_misc_category();
      if ( *(_BYTE *)(((unsigned __int64)&boost::asio::error::misc_category >> 3) + 0x7FFF8000) )
        misc_category = (const boost::system::error_category *)__asan_report_store8(
                                                                 &boost::asio::error::misc_category,
                                                                 &std::__ioinit);
      boost::asio::error::misc_category = misc_category;
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, &std::__ioinit);
      *(_DWORD *)(v2 + 96) = 50110101;
      v9 = (((_BYTE)v2 + 100) & 7u) + 3;
      if ( *(_BYTE *)(((v2 + 100) >> 3) + 0x7FFF8000) != 0
        && (char)(((v2 + 100) & 7) + 3) >= *(_BYTE *)(((v2 + 100) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v2 + 100, v9);
      }
      *(_DWORD *)(v2 + 100) = 2003000;
      if ( *(_BYTE *)(((v2 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 104, v9);
      *(_DWORD *)(v2 + 104) = 50160104;
      std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)(v2 + 80));
      std::unordered_set<unsigned int>::unordered_set(
        &NewActivityExcelConfigMgr::dynamic_group_check_cond_white_set,
        (std::initializer_list<unsigned int>)__PAIR128__(3LL, v2 + 96),
        0LL,
        (const std::unordered_set<unsigned int>::hasher *)(v2 + 48),
        (const std::unordered_set<unsigned int>::key_equal *)(v2 + 64),
        (const std::unordered_set<unsigned int>::allocator_type *)(v2 + 80));
      std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -1800;
      v12 = &NewActivityExcelConfigMgr::dynamic_group_check_cond_white_set;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_set<unsigned int>::~unordered_set,
        &NewActivityExcelConfigMgr::dynamic_group_check_cond_white_set,
        &_dso_handle);
      v10 = &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero;
      v11 = *(_BYTE *)(((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero >> 3)
                     + 0x7FFF8000);
      LOBYTE(v12) = v11 != 0;
      v13 = (v11 != 0) & (unsigned __int8)((char)((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero & 7) >= v11);
      if ( (_BYTE)v13 )
        __asan_report_load1(
          &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero,
          v12,
          v13);
      if ( !*v10 )
      {
        v14 = &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero;
        v15 = *(_BYTE *)(((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero >> 3)
                       + 0x7FFF8000);
        LOBYTE(v12) = v15 != 0;
        v16 = (v15 != 0) & (unsigned __int8)((char)((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero & 7) >= v15);
        if ( (_BYTE)v16 )
          __asan_report_store1(
            &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero,
            v12,
            v16);
        *v14 = 1;
        v17 = common::tools::StringStream<common::tools::FixedBuffer<16384>>::digits + 9;
        if ( *(_BYTE *)(((unsigned __int64)&common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero >> 3)
                      + 0x7FFF8000) )
          __asan_report_store8(&common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero, v12);
        common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero = v17;
      }
    }
    __asan_after_dynamic_init();
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};
