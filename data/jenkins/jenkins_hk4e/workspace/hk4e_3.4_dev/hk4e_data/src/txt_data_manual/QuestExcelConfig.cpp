// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/txt_data_manual/QuestExcelConfig.cpp

// Line 29: range 000000000EEED9CE-000000000EEEDC51
int32_t __cdecl QuestExcelConfigMgr::checkConfig(QuestExcelConfigMgr *const this, const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::checkConfig;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( QuestExcelConfigMgr::checkQuestExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::checkMainQuestExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::checkTalkExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::checkChapterExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::checkBindFlowGroupWorldQuestConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::checkParentQuestResCollectionConfig(this, txt_config_mgr) )
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkConfig",
      38);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v6, (const char (*)[19])"checkConfig failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = -1;
  }
  else
  {
    result = 0;
  }
  if ( v8 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 47: range 000000000EEEDC52-000000000EEEDF17
int32_t __cdecl QuestExcelConfigMgr::rewriteConfig(QuestExcelConfigMgr *const this, TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::rewriteConfig;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( QuestExcelConfigMgr::rewriteChapterExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::rewriteParentQuestExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::rewriteQuestExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::rewriteTalkExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::rewriteRandomQuestEntranceExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::rewriteRandomQuestTemplateExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::rewriteRandomQuestElemPoolExcelConfig(this, txt_config_mgr)
    || QuestExcelConfigMgr::rewriteRandomQuestExcelConfig(this, txt_config_mgr) )
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "rewriteConfig",
      58);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v6, (const char (*)[19])"checkConfig failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = -1;
  }
  else
  {
    result = 0;
  }
  if ( v8 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 64: range 000000000EEEDF18-000000000EEEE35E
int32_t __cdecl QuestExcelConfigMgr::rewriteParentQuestExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  std::set<unsigned int> *v6; // rax
  uint32_t *p_res_id; // rax
  std::set<unsigned int> *v8; // rax
  int32_t result; // eax
  data::MainQuestExcelConfigMap *__for_range; // [rsp+10h] [rbp-100h]
  data::MainQuestExcelConfigMap *__for_range_0; // [rsp+18h] [rbp-F8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::reference v12; // [rsp+20h] [rbp-F0h]
  std::tuple_element<1,std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_config_0; // [rsp+30h] [rbp-E0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::reference __in; // [rsp+38h] [rbp-D8h]
  std::tuple_element<1,std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_config; // [rsp+48h] [rbp-C8h]
  char v16[192]; // [rsp+50h] [rbp-C0h] BYREF

  v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>::__node_type *)"4 32 8 14 __for_begin:65 64 8 12 __for_end:65 96 8 14 __for_begin:74 128 8 12 __for_end:74";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>::__node_type *)QuestExcelConfigMgr::rewriteParentQuestExcelConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -202116352;
  __for_range = &this->main_quest_excel_config_map;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], txt_config_mgr);
  v2[4]._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::begin(__for_range)._M_cur;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], txt_config_mgr);
  v2[8]._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(__for_range)._M_cur;
  while ( 1 )
  {
    v5 = (char *)&v2[8];
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(v2 + 4, v2 + 8) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator*(v2 + 4);
    std::get<0ul,unsigned int const,data::MainQuestExcelConfig>(__in);
    parent_quest_config = std::get<1ul,unsigned int const,data::MainQuestExcelConfig>(__in);
    if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->series >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parent_quest_config->series >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&parent_quest_config->series);
    }
    if ( parent_quest_config->series )
    {
      v6 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
             &this->parent_quest_series_map,
             &parent_quest_config->series);
      std::set<unsigned int>::insert(v6, &parent_quest_config->id);
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator++(v2 + 4);
  }
  *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  __for_range_0 = &this->main_quest_excel_config_map;
  *(_BYTE *)(((unsigned __int64)&v2[12] >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((unsigned __int64)&v2[12] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[12], v5);
  v2[12]._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::begin(__for_range_0)._M_cur;
  *(_BYTE *)(((unsigned __int64)&v2[16] >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((unsigned __int64)&v2[16] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[16], v5);
  v2[16]._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(__for_range_0)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(v2 + 12, v2 + 16) )
  {
    v12 = std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator*(v2 + 12);
    std::get<0ul,unsigned int const,data::MainQuestExcelConfig>(v12);
    parent_quest_config_0 = std::get<1ul,unsigned int const,data::MainQuestExcelConfig>(v12);
    p_res_id = &parent_quest_config_0->res_id;
    if ( *(_BYTE *)(((unsigned __int64)p_res_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_res_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_res_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_res_id);
    }
    if ( parent_quest_config_0->res_id )
    {
      v8 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
             &this->parent_quest_res_collection_map,
             &parent_quest_config_0->res_id);
      std::set<unsigned int>::insert(v8, &parent_quest_config_0->id);
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator++(v2 + 12);
  }
  result = 0;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 87: range 000000000EEEE360-000000000EEF43F0
int32_t __cdecl QuestExcelConfigMgr::rewriteQuestExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int v10; // eax
  QuestExcelConfigMgr *v11; // rcx
  __int64 main_id; // rsi
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::vector<unsigned int> *p_child_quest_list; // rdx
  unsigned int *M_current; // r15
  unsigned int *v19; // rcx
  bool v20; // al
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  __int64 v25; // rsi
  __int64 v26; // rdx
  __int64 min_rewind_quest; // rsi
  QuestExcelConfigMgr *v28; // rdx
  int32_t order; // ecx
  char v30; // al
  __int64 v31; // rdx
  unsigned int v32; // ecx
  char v33; // al
  data::QuestCondType *p_type; // rsi
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rdx
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  int v39; // eax
  std::vector<int>::reference v40; // rax
  unsigned int *v41; // rdx
  __int64 v42; // rsi
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  std::set<unsigned int> *v45; // rdx
  __int64 v46; // rsi
  __int64 v47; // rdx
  std::vector<int>::reference v48; // rax
  _DWORD *v49; // rdx
  uint32_t v50; // ecx
  __int64 v51; // rsi
  __int64 v52; // rdx
  char v53; // al
  std::set<unsigned int> *v54; // rdx
  uint32_t id; // ecx
  char v56; // dl
  std::set<unsigned int> *v57; // rdx
  int v58; // eax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rdx
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  std::vector<int>::reference v63; // rax
  unsigned int *v64; // rdx
  __int64 v65; // rsi
  std::set<unsigned int> *v66; // rdx
  std::set<unsigned int> *v67; // rdx
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rdx
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  int v72; // edx
  __int64 v73; // rsi
  std::vector<int>::reference v74; // rax
  int *v75; // rdx
  int v76; // ecx
  char v77; // al
  __int64 v78; // rsi
  std::vector<int>::reference v79; // rax
  int *v80; // rdx
  int v81; // ecx
  char v82; // al
  char *v83; // rsi
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_quest_group_region_set_map; // rcx
  int v85; // edi
  char v86; // al
  std::set<unsigned int> *v87; // rdx
  char v88; // al
  common::milog::MiLogStream *v89; // rax
  int v90; // edx
  std::vector<data::QuestContent> *p_finish_cond; // rcx
  TxtConfigMgr *v92; // rsi
  std::vector<data::QuestContent> *p_fail_cond; // rcx
  char v94; // al
  common::milog::MiLogStream *v95; // rax
  char *v96; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v97; // rax
  int *v98; // rdx
  int v99; // ecx
  char v100; // al
  std::set<unsigned int> *v101; // rax
  char *v102; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v103; // rax
  int *v104; // rdx
  int v105; // ecx
  char v106; // al
  std::set<unsigned int> *v107; // rax
  char *v108; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v109; // rax
  int *v110; // rdx
  int v111; // ecx
  char v112; // al
  std::set<unsigned int> *v113; // rax
  char *v114; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v115; // rax
  int *v116; // rdx
  int v117; // ecx
  char v118; // al
  std::set<unsigned int> *v119; // rax
  std::vector<unsigned int> *v120; // rax
  QuestExcelConfigMgr *v121; // rdx
  __int64 chapter_id; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v123; // rax
  uint32_t *v124; // rdx
  char v125; // cl
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v126; // rax
  int *v127; // rdx
  int v128; // ecx
  char v129; // al
  std::set<unsigned int> *v130; // rax
  std::set<unsigned int> *v131; // rax
  __int64 v132; // rsi
  __int64 v133; // rdx
  __int64 v134; // rsi
  std::unordered_map<unsigned int,unsigned int> *v135; // rax
  uint32_t *p_main_id; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v137; // rax
  int *v138; // rdx
  int v139; // ecx
  char v140; // al
  std::unordered_map<unsigned int,unsigned int> *v141; // rax
  uint32_t *v142; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v143; // rax
  int *v144; // rdx
  int v145; // ecx
  char v146; // al
  unsigned int *v147; // rax
  int *v148; // rdx
  int v149; // r15d
  std::unordered_map<unsigned int,unsigned int> *v150; // rax
  uint32_t *v151; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v152; // rax
  _DWORD *v153; // rdx
  char v154; // cl
  int *v155; // rdx
  int v156; // r15d
  unsigned int *v157; // rax
  int *v158; // rdx
  std::unordered_map<unsigned int,unsigned int> *v159; // rax
  uint32_t *v160; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v161; // rax
  _DWORD *v162; // rdx
  char v163; // cl
  int v164; // eax
  std::vector<unsigned int>::reference v165; // rax
  int *v166; // rdx
  int v167; // ecx
  char v168; // al
  __int64 v169; // rsi
  common::milog::MiLogStream *v170; // rax
  common::milog::MiLogStream *v171; // rax
  std::vector<unsigned int> *p_end_quest_list; // rdx
  unsigned int *v173; // r15
  unsigned int *v174; // rcx
  bool v175; // al
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v176; // rax
  unsigned int *v177; // rdx
  common::milog::MiLogStream *v178; // rax
  common::milog::MiLogStream *v179; // rax
  std::set<unsigned int> *v180; // rax
  unsigned __int64 v181; // rax
  std::vector<data::QuestContent> *v182; // rsi
  common::milog::MiLogStream *v183; // rdx
  int v184; // eax
  unsigned __int64 v185; // rax
  const int *v186; // rsi
  const int *v187; // r9
  _BOOL8 v188; // r8
  std::tuple<int,int,std::string > *v189; // rdx
  unsigned __int64 v190; // rax
  common::milog::MiLogStream *v191; // rdx
  unsigned __int64 v192; // rax
  const int *v193; // rsi
  const int *v194; // r9
  _BOOL8 v195; // r8
  std::tuple<int,int,std::string > *v196; // rdx
  unsigned __int64 v197; // rax
  std::vector<data::QuestContent> *i; // r15
  unsigned __int64 v199; // rax
  __int64 v200; // rsi
  __int64 v201; // rdx
  unsigned __int64 v202; // rax
  std::map<unsigned int,std::set<unsigned int>> *v203; // r15
  std::set<unsigned int> *v204; // rax
  int *v205; // rcx
  std::set<unsigned int> *v206; // r8
  unsigned __int64 v207; // rax
  __int64 v208; // rsi
  __int64 v209; // rdx
  common::milog::MiLogStream *v210; // rax
  common::milog::MiLogStream *v211; // rdx
  _BOOL4 v212; // edx
  unsigned __int64 v213; // rax
  bool v214; // r15
  common::milog::MiLogStream *v215; // rax
  common::milog::MiLogStream *v216; // rax
  common::milog::MiLogStream *v217; // rax
  common::milog::MiLogStream *v218; // rdx
  int v219; // r15d
  common::milog::MiLogStream *v220; // rax
  common::milog::MiLogStream *v221; // rdx
  common::milog::MiLogStream *v222; // rax
  common::milog::MiLogStream *v223; // rdx
  uint32_t *v224; // rsi
  std::map<unsigned int,std::set<unsigned int>> *v225; // rcx
  int32_t v226; // edi
  char v227; // al
  common::milog::MiLogStream *v228; // rax
  common::milog::MiLogStream *v229; // rdx
  common::milog::MiLogStream *v230; // rax
  common::milog::MiLogStream *v231; // rax
  size_t v232; // rsi
  std::vector<unsigned int>::reference v233; // rax
  int *v234; // rdx
  int v235; // ecx
  char v236; // al
  size_t v237; // rsi
  std::vector<unsigned int>::reference v238; // rax
  unsigned int *v239; // r8
  int *v240; // rdx
  int v241; // ecx
  char v242; // al
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> v243; // rax
  common::milog::MiLogStream *v244; // rax
  common::milog::MiLogStream *v245; // rax
  common::milog::MiLogStream *v246; // rax
  common::milog::MiLogStream *v247; // rdx
  int v248; // eax
  common::milog::MiLogStream *v249; // rax
  common::milog::MiLogStream *v250; // rax
  common::milog::MiLogStream *v251; // rax
  common::milog::MiLogStream *v252; // rdx
  common::milog::MiLogStream *v253; // rax
  common::milog::MiLogStream *v254; // rax
  common::milog::MiLogStream *v255; // rax
  common::milog::MiLogStream *v256; // rax
  common::milog::MiLogStream *v257; // rax
  common::milog::MiLogStream *v258; // rdx
  uint32_t v259; // ecx
  common::milog::MiLogStream *v260; // rax
  common::milog::MiLogStream *v261; // rax
  common::milog::MiLogStream *v262; // rax
  common::milog::MiLogStream *v263; // rdx
  int32_t v264; // r15d
  char *v265; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v266; // rax
  int32_t *v267; // rdx
  char v268; // cl
  std::map<unsigned int,unsigned int>::mapped_type *v269; // rax
  unsigned int *v270; // rdx
  unsigned int v271; // ecx
  int32_t v272; // r15d
  char *v273; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v274; // rax
  int32_t *v275; // rdx
  char v276; // cl
  DropExcelConfigMgr *p_drop_config_mgr; // rdi
  uint32_t v278; // ecx
  unsigned __int64 v279; // rax
  const std::string *v281; // [rsp+0h] [rbp-DD0h]
  int *v282; // [rsp+8h] [rbp-DC8h]
  int *v283; // [rsp+8h] [rbp-DC8h]
  std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string >>>::mapped_type *v284; // [rsp+18h] [rbp-DB8h]
  std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string >>>::mapped_type *v285; // [rsp+18h] [rbp-DB8h]
  int v286; // [rsp+18h] [rbp-DB8h]
  bool is_quest_driven; // [rsp+3Fh] [rbp-D91h]
  uint32_t time; // [rsp+40h] [rbp-D90h]
  const std::vector<data::QuestContent> *__for_begin; // [rsp+48h] [rbp-D88h]
  size_t idx; // [rsp+50h] [rbp-D80h]
  HK4EDesignConfig *design_config; // [rsp+58h] [rbp-D78h]
  data::QuestExcelConfigMap *__for_range; // [rsp+60h] [rbp-D70h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::reference __in; // [rsp+68h] [rbp-D68h]
  unsigned int *quest_id; // [rsp+70h] [rbp-D60h]
  std::tuple_element<1,std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_config; // [rsp+78h] [rbp-D58h]
  data::MainQuestExcelConfig *parent_config_ptr; // [rsp+80h] [rbp-D50h]
  data::QuestExcelConfig *min_rewind_quest_config; // [rsp+88h] [rbp-D48h]
  std::vector<data::QuestCond> *__for_range_0; // [rsp+90h] [rbp-D40h]
  data::QuestCond *cond; // [rsp+98h] [rbp-D38h]
  data::QuestExcelConfig *prev_quest_config_ptr; // [rsp+A0h] [rbp-D30h]
  const data::MainQuestExcelConfig *prev_parent_quest_config_ptr; // [rsp+A8h] [rbp-D28h]
  std::unordered_map<unsigned int,std::set<unsigned int>>::mapped_type *region_set; // [rsp+B0h] [rbp-D20h]
  std::vector<data::QuestContent> *__for_range_1; // [rsp+B8h] [rbp-D18h]
  const data::QuestContent *cond_0; // [rsp+C0h] [rbp-D10h]
  std::vector<unsigned int> *__for_range_2; // [rsp+C8h] [rbp-D08h]
  std::vector<unsigned int> *__for_range_3; // [rsp+D0h] [rbp-D00h]
  std::vector<unsigned int> *__for_range_4; // [rsp+D8h] [rbp-CF8h]
  std::vector<unsigned int> *__for_range_5; // [rsp+E0h] [rbp-CF0h]
  data::ChapterExcelConfig *chapter_excel_config_ptr; // [rsp+E8h] [rbp-CE8h]
  std::vector<unsigned int> *__for_range_6; // [rsp+F0h] [rbp-CE0h]
  data::CoopPointExcelConfig *coop_config_ptr; // [rsp+F8h] [rbp-CD8h]
  std::vector<unsigned int> *__for_range_7; // [rsp+100h] [rbp-CD0h]
  data::CoopPointExcelConfig *next_coop_config_ptr; // [rsp+108h] [rbp-CC8h]
  std::initializer_list<std::vector<data::QuestContent> >::const_iterator __for_end; // [rsp+118h] [rbp-CB8h]
  const data::QuestContent *quest_content; // [rsp+130h] [rbp-CA0h]
  const LuaConfigMgr *lua_config_mgr; // [rsp+138h] [rbp-C98h]
  std::set<unsigned int> *rewind_bind_groups_set; // [rsp+140h] [rbp-C90h]
  std::map<unsigned int,unsigned int> *flow_min_rewind_order_map; // [rsp+148h] [rbp-C88h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+150h] [rbp-C80h]
  char v322[3184]; // [rsp+160h] [rbp-C70h] BYREF

  v3 = (unsigned __int64)v322;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_6(3136LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "74 48 1 9 <unknown> 64 1 9 <unknown> 80 4 17 prev_quest_id:150 96 4 9 <unknown> 112 4 12 group_i"
                        "d:201 128 4 20 region_config_id:202 144 4 9 <unknown> 160 4 10 npc_id:232 176 4 10 npc_id:236 19"
                        "2 4 12 place_id:241 208 4 19 trial_avatar_id:246 224 4 17 coop_point_id:269 240 4 15 quest_order"
                        ":279 256 4 17 cur_max_order:280 272 4 17 cur_min_order:281 288 4 17 coop_point_id:294 304 4 9 <u"
                        "nknown> 320 4 12 group_id:387 336 4 12 suite_id:388 352 8 14 __for_begin:89 384 8 12 __for_end:8"
                        "9 416 8 9 <unknown> 448 8 9 <unknown> 480 8 15 __for_begin:137 512 8 13 __for_end:137 544 8 15 _"
                        "_for_begin:213 576 8 13 __for_end:213 608 8 15 __for_begin:232 640 8 13 __for_end:232 672 8 15 _"
                        "_for_begin:236 704 8 13 __for_end:236 736 8 15 __for_begin:241 768 8 13 __for_end:241 800 8 15 _"
                        "_for_begin:246 832 8 13 __for_end:246 864 8 15 __for_begin:269 896 8 13 __for_end:269 928 8 9 <u"
                        "nknown> 960 8 9 <unknown> 992 8 15 __for_begin:306 1024 8 13 __for_end:306 1056 8 15 __for_begin"
                        ":321 1088 8 13 __for_end:321 1120 16 9 <unknown> 1152 24 10 id_vec:357 1216 32 9 <unknown> 1280 "
                        "32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <unknown> 1"
                        "600 32 9 <unknown> 1664 32 9 <unknown> 1728 32 9 <unknown> 1792 32 9 <unknown> 1856 32 9 <unknow"
                        "n> 1920 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9 <unknown> 2112 32 9 <unknown> 2176 32 9 <un"
                        "known> 2240 32 9 <unknown> 2304 32 9 <unknown> 2368 32 9 <unknown> 2432 32 9 <unknown> 2496 32 9"
                        " <unknown> 2560 32 9 <unknown> 2624 32 9 <unknown> 2688 32 9 <unknown> 2752 32 9 <unknown> 2816 "
                        "40 9 <unknown> 2896 40 9 <unknown> 2976 48 9 <unknown> 3056 48 13 empty_set:346";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::rewriteQuestExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556927;
  v5[536862723] = -234556924;
  v5[536862724] = -234556924;
  v5[536862725] = -234556924;
  v5[536862726] = -234556924;
  v5[536862727] = -234556924;
  v5[536862728] = -234556924;
  v5[536862729] = -234556924;
  v5[536862730] = -234556924;
  v5[536862731] = -218959360;
  v5[536862732] = -218959360;
  v5[536862733] = -218959360;
  v5[536862734] = -218959360;
  v5[536862735] = -218959360;
  v5[536862736] = -218959360;
  v5[536862737] = -218959360;
  v5[536862738] = -218959360;
  v5[536862739] = -218959360;
  v5[536862740] = -218959360;
  v5[536862741] = -218959360;
  v5[536862742] = -218959360;
  v5[536862743] = -218959360;
  v5[536862744] = -218959360;
  v5[536862745] = -218959360;
  v5[536862746] = -218959360;
  v5[536862747] = -218959360;
  v5[536862748] = -218959360;
  v5[536862749] = -218959360;
  v5[536862750] = -218959360;
  v5[536862751] = -218959360;
  v5[536862752] = -218959360;
  v5[536862753] = -218959360;
  v5[536862754] = -218959360;
  v5[536862755] = -219021312;
  v5[536862756] = -234881024;
  v5[536862757] = -218959118;
  v5[536862759] = -218959118;
  v5[536862761] = -218959118;
  v5[536862763] = -218959118;
  v5[536862765] = -218959118;
  v5[536862767] = -218959118;
  v5[536862769] = -218959118;
  v5[536862771] = -218959118;
  v5[536862773] = -218959118;
  v5[536862775] = -218959118;
  v5[536862777] = -218959118;
  v5[536862779] = -218959118;
  v5[536862781] = -218959118;
  v5[536862783] = -218959118;
  v5[536862785] = -218959118;
  v5[536862787] = -218959118;
  v5[536862789] = -218959118;
  v5[536862791] = -218959118;
  v5[536862793] = -218959118;
  v5[536862795] = -218959118;
  v5[536862797] = -218959118;
  v5[536862799] = -218959118;
  v5[536862801] = -218959118;
  v5[536862803] = -218959118;
  v5[536862805] = -218959118;
  v5[536862807] = -218959118;
  v5[536862809] = -218959360;
  v5[536862810] = 62194;
  v5[536862811] = -234881024;
  v5[536862812] = -218959118;
  v5[536862814] = -219021312;
  v5[536862815] = 62194;
  v5[536862817] = -202116109;
  design_config = TxtConfigMgr::getConfig(txt_config_mgr);
  __for_range = &this->quest_excel_config_map;
  if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 352, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::iterator *)(v3 + 352) = std::unordered_map<unsigned int,data::QuestExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 384, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::iterator *)(v3 + 384) = std::unordered_map<unsigned int,data::QuestExcelConfig>::end(__for_range);
LABEL_9:
  if ( !std::__detail::operator!=<std::pair<unsigned int const,data::QuestExcelConfig>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v3 + 352),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v3 + 384)) )
  {
    v10 = 1;
    goto LABEL_464;
  }
  __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false> *const)(v3 + 352));
  quest_id = std::get<0ul,unsigned int const,data::QuestExcelConfig>(__in);
  quest_config = std::get<1ul,unsigned int const,data::QuestExcelConfig>(__in);
  if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(quest_id);
  }
  if ( *quest_id > 0x98967F )
  {
    *(_DWORD *)(((v3 + 1216) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1216) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1216, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 1216),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "rewriteQuestExcelConfig",
      93);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 1216),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v6, (const char (*)[34])byte_1A4581E0);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, quest_id);
    v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v8, (const char (*)[28])byte_1A458240);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v9,
      &QuestExcelConfigMgr::MIN_RANDOM_QUEST_ID);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1216));
    v2 = -1;
    v10 = 0;
    goto LABEL_464;
  }
  common::tools::MiscUtils::removeEmptyElement<data::QuestCond,data::QuestCondType data::QuestCond::*>(
    &quest_config->accept_cond,
    (data::QuestCondType *)8);
  common::tools::MiscUtils::removeEmptyElement<data::QuestContent,data::QuestContentType data::QuestContent::*>(
    &quest_config->finish_cond,
    (data::QuestContentType *)8);
  common::tools::MiscUtils::removeEmptyElement<data::QuestContent,data::QuestContentType data::QuestContent::*>(
    &quest_config->fail_cond,
    (data::QuestContentType *)8);
  v11 = this;
  if ( *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)quest_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3)
                                                                + 0x7FFF8000) )
  {
    __asan_report_load4(&quest_config->main_id);
  }
  main_id = quest_config->main_id;
  parent_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(v11, main_id);
  if ( !parent_config_ptr )
  {
    *(_DWORD *)(((v3 + 1280) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1280) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1311) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1311) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1280, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 1280),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "rewriteQuestExcelConfig",
      103);
    v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 1280),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v14 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            v13,
            (const char (*)[43])"findMainQuestExcelConfig failed, quest_id:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &quest_config->sub_id);
    v16 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v15, (const char (*)[18])" parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &quest_config->main_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1280));
    v2 = -1;
    v10 = 0;
    goto LABEL_464;
  }
  *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
  p_child_quest_list = &parent_config_ptr->child_quest_list;
  if ( *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 448, main_id);
  *(std::vector<unsigned int>::iterator *)(v3 + 448) = std::vector<unsigned int>::end(p_child_quest_list);
  *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
  M_current = std::vector<unsigned int>::end(&parent_config_ptr->child_quest_list)._M_current;
  v19 = std::vector<unsigned int>::begin(&parent_config_ptr->child_quest_list)._M_current;
  if ( *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 416, main_id);
  *(__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 416) = std::find<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,unsigned int>(
                                                                                            (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v19,
                                                                                            (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current,
                                                                                            quest_id);
  v20 = __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 416),
          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 448));
  *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = -8;
  if ( v20 )
  {
    *(_DWORD *)(((v3 + 1344) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 1344) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 1375) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1375) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 1344, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 1344),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "rewriteQuestExcelConfig",
      108);
    v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 1344),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v22 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v21,
            (const char (*)[20])"duplicate quest_id:");
    v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, quest_id);
    v24 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v23, (const char (*)[14])"in parent_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &quest_config->main_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1344));
    v2 = -1;
    v10 = 0;
    goto LABEL_464;
  }
  std::vector<unsigned int>::emplace_back<unsigned int const&>(
    &parent_config_ptr->child_quest_list,
    quest_id,
    (const unsigned int *)&parent_config_ptr->child_quest_list);
  if ( *(_BYTE *)(((unsigned __int64)&parent_config_ptr->min_rewind_quest >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parent_config_ptr->min_rewind_quest >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&parent_config_ptr->min_rewind_quest);
  }
  if ( parent_config_ptr->min_rewind_quest )
    goto LABEL_39;
  v25 = ((_BYTE)quest_config - 66) & 7;
  v26 = (*(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v25 >= *(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000));
  if ( (_BYTE)v26 )
    __asan_report_load1(&quest_config->is_rewind, v25, v26);
  if ( !quest_config->is_rewind )
  {
LABEL_39:
    v28 = this;
    if ( *(_BYTE *)(((unsigned __int64)&parent_config_ptr->min_rewind_quest >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parent_config_ptr->min_rewind_quest >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&parent_config_ptr->min_rewind_quest);
    }
    min_rewind_quest = parent_config_ptr->min_rewind_quest;
    min_rewind_quest_config = data::QuestExcelConfigMgrBase::findQuestExcelConfig(v28, min_rewind_quest);
    if ( min_rewind_quest_config )
    {
      if ( *(_BYTE *)(((unsigned __int64)&min_rewind_quest_config->order >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&min_rewind_quest_config->order >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&min_rewind_quest_config->order);
      }
      order = min_rewind_quest_config->order;
      v30 = *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000);
      LOBYTE(min_rewind_quest) = v30 != 0;
      if ( v30 != 0 && v30 <= 3 )
        __asan_report_load4(&quest_config->order);
      if ( order > quest_config->order )
      {
        min_rewind_quest = ((_BYTE)quest_config - 66) & 7;
        v31 = (*(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)min_rewind_quest >= *(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000));
        if ( (_BYTE)v31 )
          __asan_report_load1(&quest_config->is_rewind, min_rewind_quest, v31);
        if ( quest_config->is_rewind )
        {
          min_rewind_quest = ((unsigned __int8)quest_id & 7u) + 3;
          if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(quest_id);
          }
          v32 = *quest_id;
          v33 = *(_BYTE *)(((unsigned __int64)&parent_config_ptr->min_rewind_quest >> 3) + 0x7FFF8000);
          LOBYTE(min_rewind_quest) = v33 != 0;
          if ( v33 != 0 && v33 <= 3 )
            __asan_report_store4(&parent_config_ptr->min_rewind_quest, min_rewind_quest);
          parent_config_ptr->min_rewind_quest = v32;
        }
      }
    }
  }
  else
  {
    min_rewind_quest = ((unsigned __int8)quest_id & 7u) + 3;
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    parent_config_ptr->min_rewind_quest = *quest_id;
  }
  if ( *(char *)(((unsigned __int64)&quest_config->is_mp_block >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&quest_config->is_mp_block, min_rewind_quest, &quest_config->is_mp_block);
  if ( quest_config->is_mp_block )
  {
    min_rewind_quest = (__int64)quest_id;
    std::set<unsigned int>::emplace<unsigned int const&>(
      &this->mp_block_quest_set,
      quest_id,
      (const unsigned int *)&this->mp_block_quest_set);
  }
  is_quest_driven = 0;
  __for_range_0 = &quest_config->accept_cond;
  *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 480, min_rewind_quest);
  *(std::vector<data::QuestCond>::iterator *)(v3 + 480) = std::vector<data::QuestCond>::begin(__for_range_0);
  *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 512, min_rewind_quest);
  *(std::vector<data::QuestCond>::iterator *)(v3 + 512) = std::vector<data::QuestCond>::end(__for_range_0);
  while ( 1 )
  {
    p_type = (data::QuestCondType *)(v3 + 512);
    if ( !__gnu_cxx::operator!=<data::QuestCond *,std::vector<data::QuestCond>>(
            (const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *)(v3 + 480),
            (const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *)(v3 + 512)) )
    {
      v58 = 1;
      goto LABEL_155;
    }
    cond = __gnu_cxx::__normal_iterator<data::QuestCond *,std::vector<data::QuestCond>>::operator*((const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *const)(v3 + 480));
    if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&cond->type);
    }
    if ( cond->type == QUEST_COND_HISTORY_GOT_ANY_ITEM )
    {
      common::tools::MiscUtils::removeEmptyElement<int>(&cond->param);
      goto LABEL_131;
    }
    if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&cond->type);
    }
    if ( cond->type != QUEST_COND_STATE_EQUAL && cond->type != QUEST_COND_STATE_NOT_EQUAL )
      break;
    if ( std::vector<int>::size(&cond->param) > 1 )
    {
      *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
      v40 = std::vector<int>::operator[](&cond->param, 0LL);
      v41 = (unsigned int *)v40;
      if ( *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v40 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v40);
      }
      v42 = *v41;
      if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 80, v42);
      *(_DWORD *)(v3 + 80) = v42;
      prev_quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, *(unsigned int *)(v3 + 80));
      if ( prev_quest_config_ptr )
      {
        v45 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                &this->post_quest_map,
                (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 80));
        std::set<unsigned int>::insert(v45, quest_id);
        v46 = ((_BYTE)design_config - 95) & 7;
        v47 = (*(_BYTE *)(((unsigned __int64)&design_config->is_used_by_robot >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v46 >= *(_BYTE *)(((unsigned __int64)&design_config->is_used_by_robot >> 3) + 0x7FFF8000));
        if ( (_BYTE)v47 )
          __asan_report_load1(&design_config->is_used_by_robot, v46, v47);
        if ( !design_config->is_used_by_robot )
          goto LABEL_103;
        if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&cond->type);
        }
        if ( cond->type != QUEST_COND_STATE_EQUAL )
          goto LABEL_103;
        v48 = std::vector<int>::operator[](&cond->param, 1uLL);
        v49 = v48;
        if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v48 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v48);
        }
        if ( *v49 != 3 )
          goto LABEL_103;
        if ( *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)quest_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3)
                                                                      + 0x7FFF8000) )
        {
          __asan_report_load4(&quest_config->main_id);
        }
        v50 = quest_config->main_id;
        if ( *(_BYTE *)(((unsigned __int64)&prev_quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)prev_quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&prev_quest_config_ptr->main_id >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load4(&prev_quest_config_ptr->main_id);
        }
        if ( v50 != prev_quest_config_ptr->main_id )
          goto LABEL_102;
        v51 = ((_BYTE)prev_quest_config_ptr - 68) & 7;
        v52 = (*(_BYTE *)(((unsigned __int64)&prev_quest_config_ptr->finish_parent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v51 >= *(_BYTE *)(((unsigned __int64)&prev_quest_config_ptr->finish_parent >> 3) + 0x7FFF8000));
        if ( (_BYTE)v52 )
          __asan_report_load1(&prev_quest_config_ptr->finish_parent, v51, v52);
        if ( !prev_quest_config_ptr->finish_parent )
LABEL_102:
          v53 = 1;
        else
LABEL_103:
          v53 = 0;
        if ( v53 )
        {
          v54 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                  &this->robot_post_quest_map,
                  (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 80));
          std::set<unsigned int>::insert(v54, quest_id);
        }
        if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 80);
        p_type = (data::QuestCondType *)*(unsigned int *)(v3 + 80);
        prev_parent_quest_config_ptr = QuestExcelConfigMgr::findParentQuestConfigByChildId(this, (uint32_t)p_type);
        if ( prev_parent_quest_config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&prev_parent_quest_config_ptr->id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&prev_parent_quest_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&prev_parent_quest_config_ptr->id);
          }
          id = prev_parent_quest_config_ptr->id;
          v56 = *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3) + 0x7FFF8000);
          LOBYTE(p_type) = v56 != 0;
          if ( v56 != 0 && (char)((((_BYTE)quest_config + 12) & 7) + 3) >= v56 )
            __asan_report_load4(&quest_config->main_id);
          if ( id != quest_config->main_id )
          {
            v57 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                    &this->entrance_child_quest_map,
                    &quest_config->main_id);
            p_type = (data::QuestCondType *)quest_id;
            std::set<unsigned int>::insert(v57, quest_id);
          }
        }
        is_quest_driven = 1;
        v39 = 1;
      }
      else
      {
        *(_DWORD *)(((v3 + 1472) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 1472) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1503) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 1503) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 1472, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 1472),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "rewriteQuestExcelConfig",
          154);
        v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 1472),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v44 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                v43,
                (const char (*)[44])"findQuestExcelConfig failed, prev_quest_id:");
        p_type = (data::QuestCondType *)(v3 + 80);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v44, (const unsigned int *)(v3 + 80));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1472));
        *(_DWORD *)(((v3 + 1472) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v39 = 0;
      }
    }
    else
    {
      *(_DWORD *)(((v3 + 1408) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1408) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1439) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1439) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1408, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1408),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "rewriteQuestExcelConfig",
        147);
      v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 1408),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v36 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              v35,
              (const char (*)[39])"accept_quest cond not valid, quest_id:");
      v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, quest_id);
      v38 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v37, (const char (*)[14])" accept_type:");
      p_type = &cond->type;
      common::milog::MiLogStream::operator<<<data::QuestCondType,(data::QuestCondType*)0>(v38, &cond->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1408));
      *(_DWORD *)(((v3 + 1408) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v39 = 0;
    }
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    if ( v39 != 1 )
    {
      v58 = 0;
      goto LABEL_155;
    }
LABEL_131:
    if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&cond->type);
    }
    if ( cond->type == QUEST_COND_PLAYER_ENTER_REGION )
    {
      common::tools::MiscUtils::removeEmptyElement<int>(&cond->param);
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
        v73 = 0LL;
        v74 = std::vector<int>::operator[](&cond->param, 0LL);
        v75 = v74;
        if ( *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v74 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v74);
        }
        v76 = *v75;
        v77 = *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000);
        if ( v77 != 0 && v77 <= 3 )
        {
          LOBYTE(v73) = v77 != 0;
          __asan_report_store4(v3 + 112, v73);
        }
        *(_DWORD *)(v3 + 112) = v76;
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 4;
        v78 = 1LL;
        v79 = std::vector<int>::operator[](&cond->param, 1uLL);
        v80 = v79;
        if ( *(_BYTE *)(((unsigned __int64)v79 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v79 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v79 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v79);
        }
        v81 = *v80;
        v82 = *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000);
        if ( v82 != 0 && v82 <= 3 )
        {
          LOBYTE(v78) = v82 != 0;
          __asan_report_store4(v3 + 128, v78);
        }
        *(_DWORD *)(v3 + 128) = v81;
        v83 = (char *)(v3 + 112);
        std::unordered_set<unsigned int>::emplace<int &>(
          &this->quest_group_set,
          (int *)(v3 + 112),
          (int *)&this->quest_group_set);
        p_quest_group_region_set_map = &this->quest_group_region_set_map;
        *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 112);
        v85 = *(_DWORD *)(v3 + 112);
        v86 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
        if ( v86 != 0 && v86 <= 3 )
        {
          v85 = v3 + 144;
          LOBYTE(v83) = v86 != 0;
          __asan_report_store4(v3 + 144, v83);
        }
        *(_DWORD *)(v3 + 144) = v85;
        region_set = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                       p_quest_group_region_set_map,
                       (std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 144));
        *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
        p_type = (data::QuestCondType *)(v3 + 128);
        std::set<unsigned int>::emplace<int &>(region_set, (int *)(v3 + 128), (int *)(v3 + 128));
        v72 = 1;
      }
      else
      {
        *(_DWORD *)(((v3 + 1600) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 1600) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1631) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1631) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 1600, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 1600),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "rewriteQuestExcelConfig",
          198);
        v68 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 1600),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v69 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                v68,
                (const char (*)[38])"param size is less than 2, quest_id: ");
        v70 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v69, quest_id);
        v71 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v70, (const char (*)[15])", accept_type:");
        p_type = &cond->type;
        common::milog::MiLogStream::operator<<<data::QuestCondType,(data::QuestCondType*)0>(v71, &cond->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1600));
        *(_DWORD *)(((v3 + 1600) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v72 = 0;
      }
      *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
      if ( v72 != 1 )
      {
        v58 = 0;
        goto LABEL_155;
      }
    }
    __gnu_cxx::__normal_iterator<data::QuestCond *,std::vector<data::QuestCond>>::operator++((__gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *const)(v3 + 480));
  }
  if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&cond->type);
  }
  if ( cond->type != QUEST_COND_PACK_HAVE_ITEM )
  {
    v67 = std::unordered_map<data::QuestCondType,std::set<unsigned int>>::operator[](
            &this->accept_cond_quest_map,
            &cond->type);
    std::set<unsigned int>::insert(v67, quest_id);
    goto LABEL_131;
  }
  if ( std::vector<int>::size(&cond->param) )
  {
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    v63 = std::vector<int>::operator[](&cond->param, 0LL);
    v64 = (unsigned int *)v63;
    if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v63);
    }
    v65 = *v64;
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 96, v65);
    *(_DWORD *)(v3 + 96) = v65;
    v66 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
            &this->item_accept_cond_quest_map,
            (std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 96));
    std::set<unsigned int>::insert(v66, quest_id);
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    goto LABEL_131;
  }
  *(_DWORD *)(((v3 + 1536) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 1536) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 1567) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1567) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 1536, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 1536),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "rewriteQuestExcelConfig",
    175);
  v59 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 1536),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v60 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
          v59,
          (const char (*)[39])"accept_quest cond not valid, quest_id:");
  v61 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, quest_id);
  v62 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v61, (const char (*)[14])" accept_type:");
  p_type = &cond->type;
  common::milog::MiLogStream::operator<<<data::QuestCondType,(data::QuestCondType*)0>(v62, &cond->type);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1536));
  *(_DWORD *)(((v3 + 1536) >> 3) + 0x7FFF8000) = -117901064;
  v2 = -1;
  v58 = 0;
LABEL_155:
  *(_BYTE *)(((v3 + 480) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 512) >> 3) + 0x7FFF8000) = -8;
  if ( v58 != 1 )
  {
    v10 = 0;
    goto LABEL_464;
  }
  if ( !is_quest_driven )
  {
    v87 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
            &this->entrance_child_quest_map,
            &quest_config->main_id);
    p_type = (data::QuestCondType *)quest_id;
    std::set<unsigned int>::insert(v87, quest_id);
  }
  __for_range_1 = &quest_config->finish_cond;
  *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 544, p_type);
  *(std::vector<data::QuestContent>::iterator *)(v3 + 544) = std::vector<data::QuestContent>::begin(__for_range_1);
  *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 576, p_type);
  *(std::vector<data::QuestContent>::iterator *)(v3 + 576) = std::vector<data::QuestContent>::end(__for_range_1);
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<data::QuestContent *,std::vector<data::QuestContent>>(
            (const __gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *)(v3 + 544),
            (const __gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *)(v3 + 576)) )
    {
      v90 = 1;
      goto LABEL_179;
    }
    cond_0 = __gnu_cxx::__normal_iterator<data::QuestContent *,std::vector<data::QuestContent>>::operator*((const __gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *const)(v3 + 544));
    if ( *(_BYTE *)(((unsigned __int64)&cond_0->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&cond_0->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&cond_0->type);
    }
    if ( cond_0->type != QUEST_CONTENT_ENTER_DUNGEON )
      goto LABEL_172;
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    if ( QuestExcelConfigMgr::rewriteEntryPointEnterDungeon(this, *quest_id, cond_0) )
      v88 = 1;
    else
LABEL_172:
      v88 = 0;
    if ( v88 )
      break;
    __gnu_cxx::__normal_iterator<data::QuestContent *,std::vector<data::QuestContent>>::operator++((__gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *const)(v3 + 544));
  }
  *(_DWORD *)(((v3 + 1664) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 1664) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 1695) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1695) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 1664, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 1664),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "rewriteQuestExcelConfig",
    218);
  v89 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 1664),
          (const char (*)[16])"[CONFIG_ERROR] ");
  common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
    v89,
    (const char (*)[37])"rewriteEntryPointEnterDungeon failed");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1664));
  *(_DWORD *)(((v3 + 1664) >> 3) + 0x7FFF8000) = -117901064;
  v2 = -1;
  v90 = 0;
LABEL_179:
  *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 576) >> 3) + 0x7FFF8000) = -8;
  if ( v90 != 1 )
  {
    v10 = 0;
    goto LABEL_464;
  }
  p_finish_cond = &quest_config->finish_cond;
  if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(quest_id);
  }
  v92 = txt_config_mgr;
  if ( QuestExcelConfigMgr::rewriteQuestContent(this, txt_config_mgr, *quest_id, p_finish_cond) )
    goto LABEL_187;
  p_fail_cond = &quest_config->fail_cond;
  if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(quest_id);
  }
  v92 = txt_config_mgr;
  if ( QuestExcelConfigMgr::rewriteQuestContent(this, txt_config_mgr, *quest_id, p_fail_cond) )
LABEL_187:
    v94 = 1;
  else
    v94 = 0;
  if ( !v94 )
  {
    __for_range_2 = &quest_config->exclusive_npc_list;
    *(_BYTE *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 608) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 608, v92);
    *(std::vector<unsigned int>::iterator *)(v3 + 608) = std::vector<unsigned int>::begin(__for_range_2);
    *(_BYTE *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 640) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 640, v92);
    *(std::vector<unsigned int>::iterator *)(v3 + 640) = std::vector<unsigned int>::end(__for_range_2);
    while ( 1 )
    {
      v96 = (char *)(v3 + 640);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 608),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 640)) )
        break;
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
      v97 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 608));
      v98 = (int *)v97;
      if ( *(_BYTE *)(((unsigned __int64)v97 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v97 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v97 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v97);
      }
      v99 = *v98;
      v100 = *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000);
      if ( v100 != 0 && v100 <= 3 )
      {
        LOBYTE(v96) = v100 != 0;
        __asan_report_store4(v3 + 160, v96);
      }
      *(_DWORD *)(v3 + 160) = v99;
      v101 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
               &this->exclusive_npc_quests,
               (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 160));
      std::set<unsigned int>::insert(v101, &quest_config->sub_id);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 608));
    }
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 608) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 640) >> 3) + 0x7FFF8000) = -8;
    __for_range_3 = &quest_config->shared_npc_list;
    *(_BYTE *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 672) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 672, v96);
    *(std::vector<unsigned int>::iterator *)(v3 + 672) = std::vector<unsigned int>::begin(__for_range_3);
    *(_BYTE *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 704) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 704, v96);
    *(std::vector<unsigned int>::iterator *)(v3 + 704) = std::vector<unsigned int>::end(__for_range_3);
    while ( 1 )
    {
      v102 = (char *)(v3 + 704);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 672),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 704)) )
        break;
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 4;
      v103 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 672));
      v104 = (int *)v103;
      if ( *(_BYTE *)(((unsigned __int64)v103 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v103 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v103 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v103);
      }
      v105 = *v104;
      v106 = *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000);
      if ( v106 != 0 && v106 <= 3 )
      {
        LOBYTE(v102) = v106 != 0;
        __asan_report_store4(v3 + 176, v102);
      }
      *(_DWORD *)(v3 + 176) = v105;
      v107 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
               &this->shared_npc_quests,
               (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 176));
      std::set<unsigned int>::insert(v107, &quest_config->sub_id);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 672));
    }
    *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 672) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 704) >> 3) + 0x7FFF8000) = -8;
    __for_range_4 = &quest_config->exclusive_place_list;
    *(_BYTE *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 736) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 736, v102);
    *(std::vector<unsigned int>::iterator *)(v3 + 736) = std::vector<unsigned int>::begin(__for_range_4);
    *(_BYTE *)(((v3 + 768) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 768) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 768, v102);
    *(std::vector<unsigned int>::iterator *)(v3 + 768) = std::vector<unsigned int>::end(__for_range_4);
    while ( 1 )
    {
      v108 = (char *)(v3 + 768);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 736),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 768)) )
        break;
      *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 4;
      v109 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 736));
      v110 = (int *)v109;
      if ( *(_BYTE *)(((unsigned __int64)v109 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v109 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v109 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v109);
      }
      v111 = *v110;
      v112 = *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000);
      if ( v112 != 0 && v112 <= 3 )
      {
        LOBYTE(v108) = v112 != 0;
        __asan_report_store4(v3 + 192, v108);
      }
      *(_DWORD *)(v3 + 192) = v111;
      v113 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
               &this->exclusive_place_quests,
               (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 192));
      std::set<unsigned int>::insert(v113, &quest_config->sub_id);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 736));
    }
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 736) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 768) >> 3) + 0x7FFF8000) = -8;
    __for_range_5 = &quest_config->trial_avatar_list;
    *(_BYTE *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 800) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 800, v108);
    *(std::vector<unsigned int>::iterator *)(v3 + 800) = std::vector<unsigned int>::begin(__for_range_5);
    *(_BYTE *)(((v3 + 832) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 832) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 832, v108);
    *(std::vector<unsigned int>::iterator *)(v3 + 832) = std::vector<unsigned int>::end(__for_range_5);
    while ( 1 )
    {
      v114 = (char *)(v3 + 832);
      if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 800),
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 832)) )
        break;
      *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 4;
      v115 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 800));
      v116 = (int *)v115;
      if ( *(_BYTE *)(((unsigned __int64)v115 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v115 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v115 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v115);
      }
      v117 = *v116;
      v118 = *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000);
      if ( v118 != 0 && v118 <= 3 )
      {
        LOBYTE(v114) = v118 != 0;
        __asan_report_store4(v3 + 208, v114);
      }
      *(_DWORD *)(v3 + 208) = v117;
      v119 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
               &this->trial_avatar_quest_map,
               (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 208));
      std::set<unsigned int>::insert(v119, &quest_config->sub_id);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 800));
    }
    *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 800) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 832) >> 3) + 0x7FFF8000) = -8;
    if ( !std::vector<unsigned int>::empty(&quest_config->trial_avatar_list) )
    {
      v120 = std::unordered_map<unsigned int,std::vector<unsigned int>>::operator[](
               &this->quest_trial_avatar_map,
               &quest_config->sub_id);
      std::vector<unsigned int>::operator=(v120, &quest_config->trial_avatar_list);
    }
    v121 = this;
    if ( *(_BYTE *)(((unsigned __int64)&parent_config_ptr->chapter_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parent_config_ptr->chapter_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&parent_config_ptr->chapter_id);
    }
    chapter_id = parent_config_ptr->chapter_id;
    chapter_excel_config_ptr = data::QuestExcelConfigMgrBase::findChapterExcelConfig(v121, chapter_id);
    if ( chapter_excel_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&chapter_excel_config_ptr->need_begin_time >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&chapter_excel_config_ptr->need_begin_time >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&chapter_excel_config_ptr->need_begin_time);
      }
      time = chapter_excel_config_ptr->need_begin_time;
      if ( time )
      {
        chapter_id = (__int64)quest_id;
        v123 = std::unordered_map<unsigned int,unsigned int>::operator[](&this->quest_need_start_time_map, quest_id);
        v124 = v123;
        v125 = *(_BYTE *)(((unsigned __int64)v123 >> 3) + 0x7FFF8000);
        LOBYTE(chapter_id) = v125 != 0;
        if ( v125 != 0 && (char)(((unsigned __int8)v123 & 7) + 3) >= v125 )
          __asan_report_store4(v123, chapter_id);
        *v124 = time;
      }
    }
    if ( std::vector<unsigned int>::size(&quest_config->coop_point_list) )
    {
      __for_range_6 = &quest_config->coop_point_list;
      *(_BYTE *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 864) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 864, chapter_id);
      *(std::vector<unsigned int>::iterator *)(v3 + 864) = std::vector<unsigned int>::begin(__for_range_6);
      *(_BYTE *)(((v3 + 896) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 896) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 896, chapter_id);
      *(std::vector<unsigned int>::iterator *)(v3 + 896) = std::vector<unsigned int>::end(__for_range_6);
      while ( 1 )
      {
        chapter_id = v3 + 896;
        if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 864),
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 896)) )
          break;
        *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 4;
        v126 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 864));
        v127 = (int *)v126;
        if ( *(_BYTE *)(((unsigned __int64)v126 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v126 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v126 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v126);
        }
        v128 = *v127;
        v129 = *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000);
        if ( v129 != 0 && v129 <= 3 )
        {
          LOBYTE(chapter_id) = v129 != 0;
          __asan_report_store4(v3 + 224, chapter_id);
        }
        *(_DWORD *)(v3 + 224) = v128;
        std::unordered_set<unsigned int>::insert(&this->coop_parent_quest_set, &quest_config->main_id);
        v130 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                 &this->coop_point_to_quest_map,
                 (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 224));
        std::set<unsigned int>::insert(v130, &quest_config->sub_id);
        v131 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                 &this->quest_to_coop_point_map,
                 &quest_config->sub_id);
        std::set<unsigned int>::insert(v131, (const std::set<unsigned int>::value_type *)(v3 + 224));
        v132 = ((_BYTE)quest_config - 66) & 7;
        v133 = (*(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v132 >= *(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000));
        if ( (_BYTE)v133 )
          __asan_report_load1(&quest_config->is_rewind, v132, v133);
        if ( quest_config->is_rewind )
        {
          *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&quest_config->order);
          }
          v134 = (unsigned int)quest_config->order;
          if ( *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 240, v134);
          *(_DWORD *)(v3 + 240) = v134;
          *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 4;
          v135 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::operator[](
                   &this->coop_point_to_quest_max_order_map,
                   (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::key_type *)(v3 + 224));
          p_main_id = &quest_config->main_id;
          v137 = std::unordered_map<unsigned int,unsigned int>::operator[](v135, &quest_config->main_id);
          v138 = (int *)v137;
          if ( *(_BYTE *)(((unsigned __int64)v137 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v137 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v137 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v137);
          }
          v139 = *v138;
          v140 = *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000);
          if ( v140 != 0 && v140 <= 3 )
          {
            LOBYTE(p_main_id) = v140 != 0;
            __asan_report_store4(v3 + 256, p_main_id);
          }
          *(_DWORD *)(v3 + 256) = v139;
          *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = 4;
          v141 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::operator[](
                   &this->coop_point_to_quest_min_order_map,
                   (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::key_type *)(v3 + 224));
          v142 = &quest_config->main_id;
          v143 = std::unordered_map<unsigned int,unsigned int>::operator[](v141, &quest_config->main_id);
          v144 = (int *)v143;
          if ( *(_BYTE *)(((unsigned __int64)v143 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v143 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v143 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v143);
          }
          v145 = *v144;
          v146 = *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000);
          if ( v146 != 0 && v146 <= 3 )
          {
            LOBYTE(v142) = v146 != 0;
            __asan_report_store4(v3 + 272, v142);
          }
          *(_DWORD *)(v3 + 272) = v145;
          v147 = (unsigned int *)std::max<unsigned int>(
                                   (const unsigned int *)(v3 + 240),
                                   (const unsigned int *)(v3 + 256));
          v148 = (int *)v147;
          if ( *(_BYTE *)(((unsigned __int64)v147 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v147 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v147 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v147);
          }
          v149 = *v148;
          v150 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::operator[](
                   &this->coop_point_to_quest_max_order_map,
                   (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::key_type *)(v3 + 224));
          v151 = &quest_config->main_id;
          v152 = std::unordered_map<unsigned int,unsigned int>::operator[](v150, &quest_config->main_id);
          v153 = v152;
          v154 = *(_BYTE *)(((unsigned __int64)v152 >> 3) + 0x7FFF8000);
          if ( v154 != 0 && (char)(((unsigned __int8)v152 & 7) + 3) >= v154 )
          {
            LOBYTE(v151) = v154 != 0;
            __asan_report_store4(v152, v151);
          }
          *v153 = v149;
          if ( *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v3 + 272);
          if ( *(_DWORD *)(v3 + 272) )
          {
            v157 = (unsigned int *)std::min<unsigned int>(
                                     (const unsigned int *)(v3 + 240),
                                     (const unsigned int *)(v3 + 272));
            v158 = (int *)v157;
            if ( *(_BYTE *)(((unsigned __int64)v157 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v157 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v157 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v157);
            }
            v156 = *v158;
          }
          else
          {
            v155 = (int *)(v3 + 240);
            if ( *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) != 0
              && (char)(((v3 - 16) & 7) + 3) >= *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v3 + 240);
            }
            v156 = *v155;
          }
          v159 = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::operator[](
                   &this->coop_point_to_quest_min_order_map,
                   (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::key_type *)(v3 + 224));
          v160 = &quest_config->main_id;
          v161 = std::unordered_map<unsigned int,unsigned int>::operator[](v159, &quest_config->main_id);
          v162 = v161;
          v163 = *(_BYTE *)(((unsigned __int64)v161 >> 3) + 0x7FFF8000);
          if ( v163 != 0 && (char)(((unsigned __int8)v161 & 7) + 3) >= v163 )
          {
            LOBYTE(v160) = v163 != 0;
            __asan_report_store4(v161, v160);
          }
          *v162 = v156;
        }
        *(_BYTE *)(((v3 + 240) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 272) >> 3) + 0x7FFF8000) = -8;
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 864));
      }
      *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 896) >> 3) + 0x7FFF8000) = -8;
    }
    if ( std::vector<unsigned int>::size(&quest_config->coop_point_list) == 1 )
    {
      *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 4;
      v165 = std::vector<unsigned int>::front(&quest_config->coop_point_list);
      v166 = (int *)v165;
      if ( *(_BYTE *)(((unsigned __int64)v165 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v165 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v165 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v165);
      }
      v167 = *v166;
      v168 = *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000);
      if ( v168 != 0 && v168 <= 3 )
      {
        LOBYTE(chapter_id) = v168 != 0;
        __asan_report_store4(v3 + 288, chapter_id);
      }
      *(_DWORD *)(v3 + 288) = v167;
      v169 = *(unsigned int *)(v3 + 288);
      coop_config_ptr = data::CoopExcelConfigMgrBase::findCoopPointExcelConfig(&txt_config_mgr->coop_config_mgr, v169);
      if ( coop_config_ptr )
      {
        *(_BYTE *)(((v3 + 960) >> 3) + 0x7FFF8000) = 0;
        p_end_quest_list = &coop_config_ptr->end_quest_list;
        if ( *(_BYTE *)(((v3 + 960) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 960, v169);
        *(std::vector<unsigned int>::iterator *)(v3 + 960) = std::vector<unsigned int>::end(p_end_quest_list);
        *(_BYTE *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
        v173 = std::vector<unsigned int>::end(&coop_config_ptr->end_quest_list)._M_current;
        v174 = std::vector<unsigned int>::begin(&coop_config_ptr->end_quest_list)._M_current;
        if ( *(_BYTE *)(((v3 + 928) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 928, v169);
        *(__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 928) = std::find<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,unsigned int>(
                                                                                                  (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v174,
                                                                                                  (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v173,
                                                                                                  quest_id);
        chapter_id = v3 + 960;
        v175 = __gnu_cxx::operator==<unsigned int *,std::vector<unsigned int>>(
                 (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 928),
                 (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 960));
        *(_BYTE *)(((v3 + 928) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 960) >> 3) + 0x7FFF8000) = -8;
        if ( v175 )
        {
          v164 = 0;
        }
        else
        {
          __for_range_7 = &coop_config_ptr->post_point_list;
          *(_BYTE *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 992) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 992, chapter_id);
          *(std::vector<unsigned int>::iterator *)(v3 + 992) = std::vector<unsigned int>::begin(__for_range_7);
          *(_BYTE *)(((v3 + 1024) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 1024) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 1024, chapter_id);
          *(std::vector<unsigned int>::iterator *)(v3 + 1024) = std::vector<unsigned int>::end(__for_range_7);
          while ( 1 )
          {
            chapter_id = v3 + 1024;
            if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 992),
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 1024)) )
              break;
            v176 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 992));
            v177 = v176;
            if ( *(_BYTE *)(((unsigned __int64)v176 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v176 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v176 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v176);
            }
            next_coop_config_ptr = data::CoopExcelConfigMgrBase::findCoopPointExcelConfig(
                                     &txt_config_mgr->coop_config_mgr,
                                     *v177);
            if ( next_coop_config_ptr )
            {
              v180 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                       &this->post_quest_map,
                       quest_id);
              std::set<unsigned int>::insert(v180, &next_coop_config_ptr->accept_quest);
            }
            else
            {
              *(_DWORD *)(((v3 + 1856) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1856) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1887) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1887) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1856, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1856),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "rewriteQuestExcelConfig",
                311);
              v178 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v3 + 1856),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v179 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                       v178,
                       (const char (*)[49])"findCoopPointExcelConfig failed, coop_point_id: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v179,
                (const unsigned int *)(v3 + 288));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1856));
              *(_DWORD *)(((v3 + 1856) >> 3) + 0x7FFF8000) = -117901064;
            }
            __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 992));
          }
          *(_BYTE *)(((v3 + 992) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 1024) >> 3) + 0x7FFF8000) = -8;
          v164 = 2;
        }
      }
      else
      {
        *(_DWORD *)(((v3 + 1792) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 1792) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1823) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1823) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 1792, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 1792),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "rewriteQuestExcelConfig",
          298);
        v170 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v3 + 1792),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v171 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                 v170,
                 (const char (*)[48])"findCoopPointExcelConfig failed, coop_point_id:");
        chapter_id = v3 + 288;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v171, (const unsigned int *)(v3 + 288));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1792));
        *(_DWORD *)(((v3 + 1792) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v164 = 1;
      }
    }
    else
    {
      v164 = 0;
    }
    *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
    if ( v164 && v164 != 2 )
    {
      v10 = 0;
      goto LABEL_464;
    }
    v181 = ((v3 + 2976) >> 3) + 2147450880;
    *(_DWORD *)v181 = 0;
    *(_WORD *)(v181 + 4) = 0;
    if ( *(_WORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    *(_QWORD *)(v3 + 1120) = 0LL;
    *(_QWORD *)(v3 + 1128) = 0LL;
    if ( *(_BYTE *)(((v3 + 1128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 1128, chapter_id);
    *(_QWORD *)(v3 + 1128) = 2LL;
    std::vector<data::QuestContent>::vector(
      (std::vector<data::QuestContent> *const)(v3 + 2976),
      &quest_config->finish_cond);
    v182 = &quest_config->fail_cond;
    std::vector<data::QuestContent>::vector(
      (std::vector<data::QuestContent> *const)(v3 + 3000),
      &quest_config->fail_cond);
    if ( *(_BYTE *)(((v3 + 1120) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 1120, v182);
    *(_QWORD *)(v3 + 1120) = v3 + 2976;
    __for_begin = std::initializer_list<std::vector<data::QuestContent>>::begin((const std::initializer_list<std::vector<data::QuestContent> > *const)(v3 + 1120));
    __for_end = std::initializer_list<std::vector<data::QuestContent>>::end((const std::initializer_list<std::vector<data::QuestContent> > *const)(v3 + 1120));
LABEL_333:
    if ( __for_begin == __for_end )
    {
      v286 = 1;
      goto LABEL_366;
    }
    *(_BYTE *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 1056) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 1056, v182);
    *(std::vector<data::QuestContent>::const_iterator *)(v3 + 1056) = std::vector<data::QuestContent>::begin(__for_begin);
    *(_BYTE *)(((v3 + 1088) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 1088) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 1088, v182);
    *(std::vector<data::QuestContent>::const_iterator *)(v3 + 1088) = std::vector<data::QuestContent>::end(__for_begin);
    while ( 1 )
    {
      v182 = (std::vector<data::QuestContent> *)(v3 + 1088);
      if ( !__gnu_cxx::operator!=<data::QuestContent const*,std::vector<data::QuestContent>>(
              (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v3 + 1056),
              (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v3 + 1088)) )
      {
        v184 = 1;
        goto LABEL_362;
      }
      quest_content = __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v3 + 1056));
      if ( *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&quest_content->type);
      }
      if ( quest_content->type == QUEST_CONTENT_LEAVE_SCENE_RANGE )
      {
        if ( std::vector<int>::size(&quest_content->param) != 2 )
        {
          *(_DWORD *)(((v3 + 1920) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1920) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1951) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1951) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1920, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1920),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "rewriteQuestExcelConfig",
            327);
          v183 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                   (common::milog::MiLogStream *const)(v3 + 1920),
                   (const char (*)[56])"QUEST_CONTENT_LEAVE_SCENE_RANGE param error, quest_id: ");
          v182 = (std::vector<data::QuestContent> *)quest_id;
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v183, quest_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1920));
          *(_DWORD *)(((v3 + 1920) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v184 = 0;
          goto LABEL_362;
        }
        v284 = std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string>>>::operator[](
                 &this->quest_scene_range_map,
                 quest_id);
        v185 = ((v3 + 2816) >> 3) + 2147450880;
        *(_DWORD *)v185 = 0;
        *(_BYTE *)(v185 + 4) = 0;
        v282 = (int *)std::vector<int>::operator[](&quest_content->param, 1uLL);
        v186 = std::vector<int>::operator[](&quest_content->param, 0LL);
        v188 = *(char *)(((v3 + 2816) >> 3) + 0x7FFF8000) < 0;
        if ( v188 | (*(_BYTE *)(((v3 + 2855) >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((v3 + 39) & 7) >= *(_BYTE *)(((v3 + 2855) >> 3) + 0x7FFF8000)) )
        {
          v186 = (const int *)40;
          __asan_report_store_n(v3 + 2816, 40LL);
        }
        std::make_tuple<int const&,int const&,std::string const&>(
          (std::tuple<int,int,std::string > *)(v3 + 2816),
          v186,
          v282,
          &quest_content->param_str,
          (const int *)v188,
          v187,
          v281);
        std::vector<std::tuple<unsigned int,unsigned int,std::string>>::emplace_back<std::tuple<int,int,std::string>>(
          v284,
          (std::tuple<int,int,std::string > *)(v3 + 2816),
          v189);
        std::tuple<int,int,std::string>::~tuple((std::tuple<int,int,std::string > *const)(v3 + 2816));
        v190 = ((v3 + 2816) >> 3) + 2147450880;
        *(_DWORD *)v190 = -117901064;
        *(_BYTE *)(v190 + 4) = -8;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&quest_content->type);
        }
        if ( quest_content->type == QUEST_CONTENT_LEAVE_SCENE_RANGE_AND_ROOM )
        {
          if ( std::vector<int>::size(&quest_content->param) <= 2 )
          {
            *(_DWORD *)(((v3 + 1984) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1984) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 2015) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 2015) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1984, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1984),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "rewriteQuestExcelConfig",
              336);
            v191 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                     (common::milog::MiLogStream *const)(v3 + 1984),
                     (const char (*)[65])"QUEST_CONTENT_LEAVE_SCENE_RANGE_AND_ROOM param error, quest_id: ");
            v182 = (std::vector<data::QuestContent> *)quest_id;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v191, quest_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1984));
            *(_DWORD *)(((v3 + 1984) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v184 = 0;
LABEL_362:
            *(_BYTE *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v3 + 1088) >> 3) + 0x7FFF8000) = -8;
            if ( v184 == 1 )
            {
              ++__for_begin;
              goto LABEL_333;
            }
            v286 = 0;
LABEL_366:
            for ( i = (std::vector<data::QuestContent> *)(v3 + 3024);
                  i != (std::vector<data::QuestContent> *)(v3 + 2976);
                  std::vector<data::QuestContent>::~vector(i) )
            {
              --i;
            }
            v199 = ((v3 + 2976) >> 3) + 2147450880;
            *(_DWORD *)v199 = -117901064;
            *(_WORD *)(v199 + 4) = -1800;
            if ( v286 != 1 )
            {
              v10 = 0;
              goto LABEL_464;
            }
            v200 = ((_BYTE)quest_config - 66) & 7;
            v201 = (*(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v200 >= *(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000));
            if ( (_BYTE)v201 )
              __asan_report_load1(&quest_config->is_rewind, v200, v201);
            if ( quest_config->is_rewind )
            {
              v202 = ((v3 + 3056) >> 3) + 2147450880;
              *(_DWORD *)v202 = 0;
              *(_WORD *)(v202 + 4) = 0;
              std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 3056));
              v203 = std::unordered_map<unsigned int,std::map<unsigned int,std::set<unsigned int>>>::operator[](
                       &this->rewind_bind_groups_map,
                       &quest_config->main_id);
              v204 = std::move<std::set<unsigned int> &>((std::set<unsigned int> *)(v3 + 3056));
              std::map<unsigned int,std::set<unsigned int>>::emplace<int &,std::set<unsigned int>>(
                v203,
                &quest_config->order,
                v204,
                v205,
                v206);
              std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 3056));
              v207 = ((v3 + 3056) >> 3) + 2147450880;
              *(_DWORD *)v207 = -117901064;
              *(_WORD *)(v207 + 4) = -1800;
            }
            if ( (unsigned __int8)std::string::empty() != 1 )
            {
              v208 = ((_BYTE)quest_config - 66) & 7;
              v209 = (*(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v208 >= *(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000));
              if ( (_BYTE)v209 )
                __asan_report_load1(&quest_config->is_rewind, v208, v209);
              if ( !quest_config->is_rewind )
              {
                *(_DWORD *)(((v3 + 2048) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 2048) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 2079) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 2079) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 2048, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 2048),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "rewriteQuestExcelConfig",
                  353);
                v210 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v3 + 2048),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v211 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                         v210,
                         (const char (*)[48])byte_1A4587A0);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v211, quest_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2048));
                *(_DWORD *)(((v3 + 2048) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v212 = 0;
              }
              else
              {
                lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
                v213 = ((v3 + 1152) >> 3) + 2147450880;
                *(_WORD *)v213 = 0;
                *(_BYTE *)(v213 + 2) = 0;
                std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 1152));
                *(_DWORD *)(((v3 + 2176) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v3 + 64);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v3 + 2176),
                  ",",
                  (const std::allocator<char> *)(v3 + 64));
                *(_DWORD *)(((v3 + 2112) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v3 + 48);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v3 + 2112),
                  ";",
                  (const std::allocator<char> *)(v3 + 48));
                v214 = common::tools::StringUtils::splitToList<unsigned int>(
                         &quest_config->world_quest_flow_group_suite_map_str,
                         (const std::string *)(v3 + 2112),
                         (const std::string *)(v3 + 2176),
                         2u,
                         (std::vector<unsigned int> *)(v3 + 1152),
                         1) != 0;
                std::string::~string((void *)(v3 + 2112));
                *(_DWORD *)(((v3 + 2112) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v3 + 48);
                *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
                std::string::~string((void *)(v3 + 2176));
                *(_DWORD *)(((v3 + 2176) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v3 + 64);
                *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
                if ( v214 )
                {
                  *(_DWORD *)(((v3 + 2240) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 2240) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 2271) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 2271) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 2240, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 2240),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "rewriteQuestExcelConfig",
                    360);
                  v215 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v3 + 2240),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v216 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           v215,
                           (const char (*)[16])byte_1A458800);
                  v217 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                           v216,
                           &quest_config->world_quest_flow_group_suite_map_str);
                  v218 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                           v217,
                           (const char (*)[24])byte_1A458840);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v218, quest_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2240));
                  *(_DWORD *)(((v3 + 2240) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v219 = 0;
                }
                else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 1152)) > 1 )
                {
                  if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 1152)) <= 0x14 )
                  {
                    v224 = &quest_config->main_id;
                    v225 = std::unordered_map<unsigned int,std::map<unsigned int,std::set<unsigned int>>>::operator[](
                             &this->rewind_bind_groups_map,
                             &quest_config->main_id);
                    *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = 4;
                    if ( *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(&quest_config->order);
                    }
                    v226 = quest_config->order;
                    v227 = *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000);
                    if ( v227 != 0 && v227 <= 3 )
                    {
                      v226 = v3 + 304;
                      LOBYTE(v224) = v227 != 0;
                      __asan_report_store4(v3 + 304, v224);
                    }
                    *(_DWORD *)(v3 + 304) = v226;
                    rewind_bind_groups_set = std::map<unsigned int,std::set<unsigned int>>::operator[](
                                               v225,
                                               (std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 304));
                    *(_BYTE *)(((v3 + 304) >> 3) + 0x7FFF8000) = -8;
                    if ( !std::set<unsigned int>::empty(rewind_bind_groups_set) )
                    {
                      *(_DWORD *)(((v3 + 2496) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v3 + 2496) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v3 + 2527) >> 3) + 0x7FFF8000) != 0
                        && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 2527) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v3 + 2496, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v3 + 2496),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/txt_data_manual/QuestExcelConfig.cpp",
                        "rewriteQuestExcelConfig",
                        381);
                      v228 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                               (common::milog::MiLogStream *const)(v3 + 2496),
                               (const char (*)[16])"[CONFIG_ERROR] ");
                      v229 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                               v228,
                               (const char (*)[46])byte_1A458940);
                      v230 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v229, quest_id);
                      v231 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                               v230,
                               (const char (*)[19])", parent_quest_id:");
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v231,
                        &quest_config->main_id);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2496));
                      *(_DWORD *)(((v3 + 2496) >> 3) + 0x7FFF8000) = -117901064;
                      v2 = -1;
                      v219 = 0;
                    }
                    else
                    {
                      flow_min_rewind_order_map = &parent_config_ptr->flow_min_rewind_order_map;
                      for ( idx = 1LL;
                            idx < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 1152));
                            idx += 2LL )
                      {
                        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 4;
                        v232 = idx - 1;
                        v233 = std::vector<unsigned int>::operator[](
                                 (std::vector<unsigned int> *const)(v3 + 1152),
                                 idx - 1);
                        v234 = (int *)v233;
                        if ( *(_BYTE *)(((unsigned __int64)v233 >> 3) + 0x7FFF8000) != 0
                          && (char)(((unsigned __int8)v233 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v233 >> 3)
                                                                                 + 0x7FFF8000) )
                        {
                          __asan_report_load4(v233);
                        }
                        v235 = *v234;
                        v236 = *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000);
                        if ( v236 != 0 && v236 <= 3 )
                        {
                          LOBYTE(v232) = v236 != 0;
                          __asan_report_store4(v3 + 320, v232);
                        }
                        *(_DWORD *)(v3 + 320) = v235;
                        *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = 4;
                        v237 = idx;
                        v238 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 1152), idx);
                        v240 = (int *)v238;
                        if ( *(_BYTE *)(((unsigned __int64)v238 >> 3) + 0x7FFF8000) != 0
                          && (char)(((unsigned __int8)v238 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v238 >> 3)
                                                                                 + 0x7FFF8000) )
                        {
                          __asan_report_load4(v238);
                        }
                        v241 = *v240;
                        v242 = *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000);
                        if ( v242 != 0 && v242 <= 3 )
                        {
                          LOBYTE(v237) = v242 != 0;
                          __asan_report_store4(v3 + 336, v237);
                        }
                        *(_DWORD *)(v3 + 336) = v241;
                        v243 = std::map<unsigned int,unsigned int>::emplace<unsigned int &,unsigned int &>(
                                 &quest_config->world_quest_flow_group_suite_map,
                                 (unsigned int *)(v3 + 320),
                                 (unsigned int *)(v3 + 336),
                                 (unsigned int *)&quest_config->world_quest_flow_group_suite_map,
                                 v239);
                        if ( !v243.second )
                        {
                          *(_DWORD *)(((v3 + 2560) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v3 + 2560) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v3 + 2591) >> 3) + 0x7FFF8000) != 0
                            && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 2591) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v3 + 2560, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v3 + 2560),
                            &common::milog::MiLogDefault::default_log_obj_,
                            4u,
                            "./src/txt_data_manual/QuestExcelConfig.cpp",
                            "rewriteQuestExcelConfig",
                            391);
                          v244 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                   (common::milog::MiLogStream *const)(v3 + 2560),
                                   (const char (*)[16])"[CONFIG_ERROR] ");
                          v245 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                                   v244,
                                   (const char (*)[37])byte_1A4589E0);
                          v246 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                   v245,
                                   (const unsigned int *)(v3 + 320));
                          v247 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                   v246,
                                   (const char (*)[12])", quest_id:");
                          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v247, quest_id);
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2560));
                          *(_DWORD *)(((v3 + 2560) >> 3) + 0x7FFF8000) = -117901064;
                          v2 = -1;
                          v248 = 0;
                        }
                        else
                        {
                          if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) != 0
                            && *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) <= 3 )
                          {
                            __asan_report_load4(v3 + 320);
                          }
                          group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(
                                                      lua_config_mgr,
                                                      *(_DWORD *)(v3 + 320));
                          if ( group_script_config_ptr )
                          {
                            if ( *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) != 0
                              && *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) <= 3 )
                            {
                              __asan_report_load4(v3 + 336);
                            }
                            if ( GroupScriptConfig::getSuiteDiskConfig(
                                   group_script_config_ptr,
                                   *(unsigned int *)(v3 + 336)) )
                            {
                              if ( *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3) + 0x7FFF8000) != 0
                                && (char)((((_BYTE)quest_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3)
                                                                                            + 0x7FFF8000) )
                              {
                                __asan_report_load4(&quest_config->main_id);
                              }
                              v259 = quest_config->main_id;
                              if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->father_quest_id >> 3)
                                            + 0x7FFF8000) != 0
                                && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->father_quest_id >> 3)
                                            + 0x7FFF8000) <= 3 )
                              {
                                __asan_report_load4(&group_script_config_ptr->father_quest_id);
                              }
                              if ( v259 == group_script_config_ptr->father_quest_id )
                              {
                                if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,unsigned int>,unsigned int>(
                                        flow_min_rewind_order_map,
                                        (const unsigned int *)(v3 + 320)) )
                                {
                                  if ( *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) != 0
                                    && *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) <= 3 )
                                  {
                                    __asan_report_load4(&quest_config->order);
                                  }
                                  v264 = quest_config->order;
                                  v265 = (char *)(v3 + 320);
                                  v266 = std::map<unsigned int,unsigned int>::operator[](
                                           flow_min_rewind_order_map,
                                           (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 320));
                                  v267 = (int32_t *)v266;
                                  v268 = *(_BYTE *)(((unsigned __int64)v266 >> 3) + 0x7FFF8000);
                                  if ( v268 != 0 && (char)(((unsigned __int8)v266 & 7) + 3) >= v268 )
                                  {
                                    LOBYTE(v265) = v268 != 0;
                                    __asan_report_store4(v266, v265);
                                  }
                                  *v267 = v264;
                                }
                                else
                                {
                                  v269 = std::map<unsigned int,unsigned int>::operator[](
                                           flow_min_rewind_order_map,
                                           (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 320));
                                  v270 = v269;
                                  if ( *(_BYTE *)(((unsigned __int64)v269 >> 3) + 0x7FFF8000) != 0
                                    && (char)(((unsigned __int8)v269 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v269 >> 3)
                                                                                           + 0x7FFF8000) )
                                  {
                                    __asan_report_load4(v269);
                                  }
                                  v271 = *v270;
                                  if ( *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) != 0
                                    && *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) <= 3 )
                                  {
                                    __asan_report_load4(&quest_config->order);
                                  }
                                  if ( v271 > quest_config->order )
                                  {
                                    v272 = quest_config->order;
                                    v273 = (char *)(v3 + 320);
                                    v274 = std::map<unsigned int,unsigned int>::operator[](
                                             flow_min_rewind_order_map,
                                             (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 320));
                                    v275 = (int32_t *)v274;
                                    v276 = *(_BYTE *)(((unsigned __int64)v274 >> 3) + 0x7FFF8000);
                                    if ( v276 != 0 && (char)(((unsigned __int8)v274 & 7) + 3) >= v276 )
                                    {
                                      LOBYTE(v273) = v276 != 0;
                                      __asan_report_store4(v274, v273);
                                    }
                                    *v275 = v272;
                                  }
                                }
                                std::set<unsigned int>::insert(
                                  rewind_bind_groups_set,
                                  (const std::set<unsigned int>::value_type *)(v3 + 320));
                                std::unordered_set<unsigned int>::insert(
                                  &this->quest_group_set,
                                  (const std::unordered_set<unsigned int>::value_type *)(v3 + 320));
                                p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
                                if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) != 0
                                  && *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) <= 3 )
                                {
                                  p_drop_config_mgr = (DropExcelConfigMgr *)(v3 + 320);
                                  __asan_report_load4(v3 + 320);
                                }
                                v278 = *(_DWORD *)(v3 + 320);
                                if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
                                  && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3)
                                                                                             + 0x7FFF8000) )
                                {
                                  p_drop_config_mgr = (DropExcelConfigMgr *)quest_id;
                                  __asan_report_load4(quest_id);
                                }
                                DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, *quest_id, v278);
                                v248 = 1;
                              }
                              else
                              {
                                *(_DWORD *)(((v3 + 2752) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v3 + 2752) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v3 + 2783) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 2783) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v3 + 2752, 32LL);
                                }
                                common::milog::MiLogStream::create(
                                  (common::milog::MiLogStream *)(v3 + 2752),
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  4u,
                                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                                  "rewriteQuestExcelConfig",
                                  408);
                                v260 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                         (common::milog::MiLogStream *const)(v3 + 2752),
                                         (const char (*)[16])"[CONFIG_ERROR] ");
                                v261 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                                         v260,
                                         (const char (*)[50])byte_1A458B80);
                                v262 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                         v261,
                                         (const unsigned int *)(v3 + 320));
                                v263 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                         v262,
                                         (const char (*)[12])", quest_id:");
                                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v263, quest_id);
                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2752));
                                *(_DWORD *)(((v3 + 2752) >> 3) + 0x7FFF8000) = -117901064;
                                v2 = -1;
                                v248 = 0;
                              }
                            }
                            else
                            {
                              *(_DWORD *)(((v3 + 2688) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v3 + 2688) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v3 + 2719) >> 3) + 0x7FFF8000) != 0
                                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 2719) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v3 + 2688, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v3 + 2688),
                                &common::milog::MiLogDefault::default_log_obj_,
                                4u,
                                "./src/txt_data_manual/QuestExcelConfig.cpp",
                                "rewriteQuestExcelConfig",
                                403);
                              v253 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                       (common::milog::MiLogStream *const)(v3 + 2688),
                                       (const char (*)[16])"[CONFIG_ERROR] ");
                              v254 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                                       v253,
                                       (const char (*)[38])byte_1A458AE0);
                              v255 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                       v254,
                                       (const unsigned int *)(v3 + 320));
                              v256 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                       v255,
                                       (const char (*)[12])", suite_id:");
                              v257 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                       v256,
                                       (const unsigned int *)(v3 + 336));
                              v258 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                       v257,
                                       (const char (*)[12])", quest_id:");
                              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v258, quest_id);
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2688));
                              *(_DWORD *)(((v3 + 2688) >> 3) + 0x7FFF8000) = -117901064;
                              v2 = -1;
                              v248 = 0;
                            }
                          }
                          else
                          {
                            *(_DWORD *)(((v3 + 2624) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v3 + 2624) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v3 + 2655) >> 3) + 0x7FFF8000) != 0
                              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 2655) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v3 + 2624, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v3 + 2624),
                              &common::milog::MiLogDefault::default_log_obj_,
                              4u,
                              "./src/txt_data_manual/QuestExcelConfig.cpp",
                              "rewriteQuestExcelConfig",
                              397);
                            v249 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                     (common::milog::MiLogStream *const)(v3 + 2624),
                                     (const char (*)[16])"[CONFIG_ERROR] ");
                            v250 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                                     v249,
                                     (const char (*)[38])byte_1A458A80);
                            v251 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                     v250,
                                     (const unsigned int *)(v3 + 320));
                            v252 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                                     v251,
                                     (const char (*)[12])", quest_id:");
                            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v252, quest_id);
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2624));
                            *(_DWORD *)(((v3 + 2624) >> 3) + 0x7FFF8000) = -117901064;
                            v2 = -1;
                            v248 = 0;
                          }
                        }
                        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
                        *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) = -8;
                        if ( v248 != 1 )
                        {
                          v219 = 0;
                          goto LABEL_459;
                        }
                      }
                      v219 = 1;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(((v3 + 2368) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 2368) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 2399) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 2399) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 2368, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 2368),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "rewriteQuestExcelConfig",
                      370);
                    v222 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v3 + 2368),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v223 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                             v222,
                             (const char (*)[57])byte_1A4588E0);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v223, quest_id);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2368));
                    *(_DWORD *)(((v3 + 2368) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v219 = 0;
                  }
                }
                else
                {
                  *(_DWORD *)(((v3 + 2304) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 2304) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 2335) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 2335) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 2304, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 2304),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "rewriteQuestExcelConfig",
                    365);
                  v220 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v3 + 2304),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v221 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                           v220,
                           (const char (*)[53])byte_1A458880);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v221, quest_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2304));
                  *(_DWORD *)(((v3 + 2304) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v219 = 0;
                }
LABEL_459:
                std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 1152));
                v212 = v219 == 1;
              }
              v279 = ((v3 + 1152) >> 3) + 2147450880;
              *(_WORD *)v279 = -1800;
              *(_BYTE *)(v279 + 2) = -8;
              if ( !v212 )
              {
                v10 = 0;
                goto LABEL_464;
              }
            }
            std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false> *const)(v3 + 352));
            goto LABEL_9;
          }
          v285 = std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string>>>::operator[](
                   &this->quest_scene_range_map,
                   quest_id);
          v192 = ((v3 + 2896) >> 3) + 2147450880;
          *(_DWORD *)v192 = 0;
          *(_BYTE *)(v192 + 4) = 0;
          v283 = (int *)std::vector<int>::operator[](&quest_content->param, 1uLL);
          v193 = std::vector<int>::operator[](&quest_content->param, 0LL);
          v195 = *(char *)(((v3 + 2896) >> 3) + 0x7FFF8000) < 0;
          if ( v195 | (*(_BYTE *)(((v3 + 2935) >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((v3 + 119) & 7) >= *(_BYTE *)(((v3 + 2935) >> 3) + 0x7FFF8000)) )
          {
            v193 = (const int *)40;
            __asan_report_store_n(v3 + 2896, 40LL);
          }
          std::make_tuple<int const&,int const&,std::string const&>(
            (std::tuple<int,int,std::string > *)(v3 + 2896),
            v193,
            v283,
            &quest_content->param_str,
            (const int *)v195,
            v194,
            v281);
          std::vector<std::tuple<unsigned int,unsigned int,std::string>>::emplace_back<std::tuple<int,int,std::string>>(
            v285,
            (std::tuple<int,int,std::string > *)(v3 + 2896),
            v196);
          std::tuple<int,int,std::string>::~tuple((std::tuple<int,int,std::string > *const)(v3 + 2896));
          v197 = ((v3 + 2896) >> 3) + 2147450880;
          *(_DWORD *)v197 = -117901064;
          *(_BYTE *)(v197 + 4) = -8;
        }
      }
      __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v3 + 1056));
    }
  }
  *(_DWORD *)(((v3 + 1728) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 1728) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 1759) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 1759) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 1728, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 1728),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "rewriteQuestExcelConfig",
    227);
  v95 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 1728),
          (const char (*)[16])"[CONFIG_ERROR] ");
  common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
    v95,
    (const char (*)[42])"rewriteCompleteAnyTalkQuestContent failed");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1728));
  v2 = -1;
  v10 = 0;
LABEL_464:
  if ( v10 == 1 )
    v2 = 0;
  if ( v322 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8090) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 152) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v3 >> 3) + 0x7FFF809C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF80A4) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80AC) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80B4) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80BC) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80C4) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80CC) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF80D4) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80DC) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8180) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862777) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147451100 - (((_DWORD)v5 + 2147451108) & 0xFFFFFFF8) + 172) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_6(v3, 3136LL, v322);
  }
  return v2;
};

// Line 430: range 000000000EEF43F2-000000000EEF4A64
__int64 __fastcall QuestExcelConfigMgr::rewriteEntryPointEnterDungeon(
        QuestExcelConfigMgr *const this,
        uint32_t quest_id,
        const data::QuestContent *content)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  std::vector<int>::const_reference v10; // rax
  unsigned int *v11; // rdx
  __int64 v12; // rsi
  std::vector<int>::const_reference v13; // rax
  unsigned int *v14; // rdx
  __int64 v15; // rsi
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::mapped_type *quest_info_map; // [rsp+20h] [rbp-140h]
  std::unordered_map<unsigned int,std::vector<unsigned int>>::mapped_type *quest_id_vec; // [rsp+28h] [rbp-138h]
  char v22[304]; // [rsp+30h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 14 dungeon_id:436 48 4 18 entry_point_id:437 64 4 12 scene_id:438 80 4 12 quest_id:429 96"
                        " 8 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::rewriteEntryPointEnterDungeon;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 80) = quest_id;
  if ( std::vector<int>::empty(&content->param) )
  {
    if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "rewriteEntryPointEnterDungeon",
      433);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v6, (const char (*)[8])"quest: ");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 80));
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v8, (const char (*)[28])byte_1A458D00);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
    result = 0xFFFFFFFFLL;
  }
  else
  {
    v10 = std::vector<int>::operator[](&content->param, 0LL);
    v11 = (unsigned int *)v10;
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v10);
    }
    v12 = *v11;
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 32, v12);
    *(_DWORD *)(v3 + 32) = v12;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, v12);
    *(_DWORD *)(v3 + 48) = 0;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 64, v12);
    *(_DWORD *)(v3 + 64) = 0;
    if ( std::vector<int>::size(&content->param) > 1 )
    {
      v13 = std::vector<int>::operator[](&content->param, 1uLL);
      v14 = (unsigned int *)v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v13);
      }
      v15 = *v14;
      if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 48, v15);
      *(_DWORD *)(v3 + 48) = v15;
    }
    if ( common::tools::StringUtils::strToNum<unsigned int>(&content->param_str, (unsigned int *)(v3 + 64), 1) )
    {
      if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "rewriteEntryPointEnterDungeon",
        445);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v16, (const char (*)[8])"quest: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(v18, (const char (*)[41])byte_1A458D40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v3 + 48);
      if ( *(_DWORD *)(v3 + 48) )
      {
        if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 96, v3 + 64);
        *(std::pair<unsigned int,unsigned int> *)(v3 + 96) = std::make_pair<unsigned int &,unsigned int &>(
                                                               (unsigned int *)(v3 + 64),
                                                               (unsigned int *)(v3 + 48));
        quest_info_map = std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::unordered_map<unsigned int,std::vector<unsigned int>>>>>::operator[](
                           &this->entry_point_quest_config_map,
                           (std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::key_type *)(v3 + 96));
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
        quest_id_vec = std::unordered_map<unsigned int,std::vector<unsigned int>>::operator[](
                         quest_info_map,
                         (const std::unordered_map<unsigned int,std::vector<unsigned int>>::key_type *)(v3 + 32));
        std::vector<unsigned int>::emplace_back<unsigned int &>(
          quest_id_vec,
          (unsigned int *)(v3 + 80),
          (unsigned int *)(v3 + 80));
        result = 0LL;
      }
      else
      {
        result = 0LL;
      }
    }
  }
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 461: range 000000000EEF4A66-000000000EEF7A6D
__int64 __fastcall QuestExcelConfigMgr::rewriteQuestContent(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr,
        uint32_t quest_id,
        std::vector<data::QuestContent> *quest_content_vec)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int type; // eax
  bool v9; // r15
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned __int64 v21; // rax
  char *v22; // rsi
  bool v23; // r15
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // r15d
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  char *v35; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v36; // rax
  int *v37; // r8
  int *v38; // rdx
  int v39; // ecx
  char v40; // al
  std::map<unsigned int,unsigned int> *p_param_map; // rcx
  char v42; // al
  unsigned __int64 v43; // rax
  unsigned __int64 v44; // rax
  char *v45; // rsi
  bool v46; // r15
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  int v52; // r15d
  char *v53; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v54; // rax
  int *v55; // rdx
  int v56; // ecx
  char v57; // al
  __int64 v58; // rsi
  int *v59; // r8
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  int v64; // edx
  std::map<unsigned int,unsigned int> *v65; // rcx
  char v66; // al
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  unsigned __int64 v70; // rax
  bool v71; // r15
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  int v81; // eax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // rax
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // rax
  std::vector<int>::reference v90; // rax
  unsigned int *v91; // rdx
  __int64 v92; // rsi
  std::vector<int>::reference v93; // rax
  int *v94; // rdx
  int v95; // ecx
  char v96; // al
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_quest_group_gadget_set_map; // rcx
  unsigned __int64 v98; // rax
  bool v99; // r15
  common::milog::MiLogStream *v100; // rax
  common::milog::MiLogStream *v101; // rax
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // rax
  _BOOL4 v105; // r15d
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // rax
  common::milog::MiLogStream *v110; // rax
  std::vector<std::string>::reference v111; // rax
  unsigned __int64 v112; // rax
  const std::string *v113; // rax
  char *v114; // rsi
  bool v115; // r15
  common::milog::MiLogStream *v116; // rax
  common::milog::MiLogStream *v117; // rax
  common::milog::MiLogStream *v118; // rax
  common::milog::MiLogStream *v119; // rax
  common::milog::MiLogStream *v120; // rax
  int v121; // r15d
  common::milog::MiLogStream *v122; // rax
  common::milog::MiLogStream *v123; // rax
  common::milog::MiLogStream *v124; // rax
  common::milog::MiLogStream *v125; // rax
  common::milog::MiLogStream *v126; // rax
  char *v127; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v128; // rax
  int *v129; // rdx
  int v130; // ecx
  char v131; // al
  unsigned __int64 v132; // rax
  unsigned __int64 v133; // rax
  unsigned int group_id; // [rsp+3Ch] [rbp-8C4h]
  data::QuestContent *quest_content; // [rsp+48h] [rbp-8B8h]
  std::vector<unsigned int> *__for_range_2; // [rsp+50h] [rbp-8B0h]
  std::unordered_map<unsigned int,std::set<unsigned int>>::mapped_type *gadget_set; // [rsp+58h] [rbp-8A8h]
  std::vector<unsigned int> *__for_range_1; // [rsp+60h] [rbp-8A0h]
  std::vector<unsigned int> *__for_range_0; // [rsp+68h] [rbp-898h]
  char v144[2192]; // [rsp+70h] [rbp-890h] BYREF

  v5 = (unsigned __int64)v144;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_6(2144LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "48 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 4 6 id:498 160 4 9 <unknown> 176 4 6 id:514 192 4 9 <unknown> 208 4 9 state:559 2"
                        "24 4 20 gadget_config_id:567 240 4 9 <unknown> 256 4 11 room_id:600 272 4 12 quest_id:460 288 8 "
                        "15 __for_begin:462 320 8 13 __for_end:462 352 8 15 __for_begin:498 384 8 13 __for_end:498 416 8 "
                        "15 __for_begin:514 448 8 13 __for_end:514 480 8 15 __for_begin:600 512 8 13 __for_end:600 544 24"
                        " 7 vec:487 608 24 7 vec:508 672 24 11 str_vec:575 736 24 15 room_id_vec:589 800 32 9 <unknown> 8"
                        "64 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> "
                        "1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unkno"
                        "wn> 1504 32 9 <unknown> 1568 32 9 <unknown> 1632 32 9 <unknown> 1696 32 9 <unknown> 1760 32 9 <u"
                        "nknown> 1824 32 9 <unknown> 1888 32 9 <unknown> 1952 32 9 <unknown> 2016 32 9 <unknown> 2080 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::rewriteQuestContent;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234753535;
  v7[536862723] = -234753535;
  v7[536862724] = -234556927;
  v7[536862725] = -234556924;
  v7[536862726] = -234556924;
  v7[536862727] = -234556924;
  v7[536862728] = -234556924;
  v7[536862729] = -218959360;
  v7[536862730] = -218959360;
  v7[536862731] = -218959360;
  v7[536862732] = -218959360;
  v7[536862733] = -218959360;
  v7[536862734] = -218959360;
  v7[536862735] = -218959360;
  v7[536862736] = -218959360;
  v7[536862737] = -234881024;
  v7[536862738] = -218959118;
  v7[536862739] = -234881024;
  v7[536862740] = -218959118;
  v7[536862741] = -234881024;
  v7[536862742] = -218959118;
  v7[536862743] = -234881024;
  v7[536862744] = -218959118;
  v7[536862746] = -218959118;
  v7[536862748] = -218959118;
  v7[536862750] = -218959118;
  v7[536862752] = -218959118;
  v7[536862754] = -218959118;
  v7[536862756] = -218959118;
  v7[536862758] = -218959118;
  v7[536862760] = -218959118;
  v7[536862762] = -218959118;
  v7[536862764] = -218959118;
  v7[536862766] = -218959118;
  v7[536862768] = -218959118;
  v7[536862770] = -218959118;
  v7[536862772] = -218959118;
  v7[536862774] = -218959118;
  v7[536862776] = -218959118;
  v7[536862778] = -218959118;
  v7[536862780] = -218959118;
  v7[536862782] = -218959118;
  v7[536862784] = -218959118;
  v7[536862786] = -202116109;
  *(_DWORD *)(v5 + 272) = quest_id;
  if ( *(_BYTE *)(((v5 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 288, txt_config_mgr);
  *(std::vector<data::QuestContent>::iterator *)(v5 + 288) = std::vector<data::QuestContent>::begin(quest_content_vec);
  if ( *(_BYTE *)(((v5 + 320) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 320, txt_config_mgr);
  *(std::vector<data::QuestContent>::iterator *)(v5 + 320) = std::vector<data::QuestContent>::end(quest_content_vec);
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<data::QuestContent *,std::vector<data::QuestContent>>(
            (const __gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *)(v5 + 288),
            (const __gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *)(v5 + 320)) )
    {
      v15 = 1;
      goto LABEL_144;
    }
    quest_content = __gnu_cxx::__normal_iterator<data::QuestContent *,std::vector<data::QuestContent>>::operator*((const __gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *const)(v5 + 288));
    if ( *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&quest_content->type);
    }
    type = quest_content->type;
    if ( type != 22 )
    {
      if ( type >= 22 && type <= 158 && type >= 115 )
      {
        switch ( type )
        {
          case 115:
            v21 = ((v5 + 544) >> 3) + 2147450880;
            *(_WORD *)v21 = 0;
            *(_BYTE *)(v21 + 2) = 0;
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 544));
            *(_DWORD *)(((v5 + 992) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v5 + 64);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v5 + 992),
              ",",
              (const std::allocator<char> *)(v5 + 64));
            v22 = (char *)(v5 + 992);
            v23 = common::tools::StringUtils::splitToList<unsigned int>(
                    &quest_content->param_str,
                    (const std::string *)(v5 + 992),
                    (std::vector<unsigned int> *)(v5 + 544),
                    1) != 0;
            std::string::~string((void *)(v5 + 992));
            *(_DWORD *)(((v5 + 992) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v5 + 64);
            *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
            if ( v23 )
            {
              *(_DWORD *)(((v5 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 1056) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 1087) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 1087) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 1056, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 1056),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "rewriteQuestContent",
                490);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 1056),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v24, (const char (*)[7])"quest:");
              v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v25,
                      (const unsigned int *)(v5 + 272));
              v27 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v26,
                      (const char (*)[15])" content_type:");
              v28 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                      v27,
                      &quest_content->type);
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v28, (const char (*)[26])byte_1A459240);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1056));
              *(_DWORD *)(((v5 + 1056) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v29 = 0;
            }
            else if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v5 + 544)) )
            {
              *(_DWORD *)(((v5 + 1120) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 1120) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 1151) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 1151) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 1120, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 1120),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "rewriteQuestContent",
                495);
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 1120),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v31 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v30, (const char (*)[7])"quest:");
              v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v31,
                      (const unsigned int *)(v5 + 272));
              v33 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v32,
                      (const char (*)[15])" content_type:");
              v34 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                      v33,
                      &quest_content->type);
              common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v34, (const char (*)[34])byte_1A459280);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1120));
              *(_DWORD *)(((v5 + 1120) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v29 = 0;
            }
            else
            {
              __for_range_0 = (std::vector<unsigned int> *)(v5 + 544);
              *(_BYTE *)(((v5 + 352) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v5 + 352) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v5 + 352, v22);
              *(std::vector<unsigned int>::iterator *)(v5 + 352) = std::vector<unsigned int>::begin(__for_range_0);
              *(_BYTE *)(((v5 + 384) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v5 + 384) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v5 + 384, v22);
              *(std::vector<unsigned int>::iterator *)(v5 + 384) = std::vector<unsigned int>::end(__for_range_0);
              while ( 1 )
              {
                v35 = (char *)(v5 + 384);
                if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                        (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 352),
                        (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 384)) )
                  break;
                *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) = 4;
                v36 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 352));
                v38 = (int *)v36;
                if ( *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v36 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v36);
                }
                v39 = *v38;
                v40 = *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000);
                if ( v40 != 0 && v40 <= 3 )
                {
                  LOBYTE(v35) = v40 != 0;
                  __asan_report_store4(v5 + 144, v35);
                }
                *(_DWORD *)(v5 + 144) = v39;
                p_param_map = &quest_content->param_map;
                *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 4;
                v42 = *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000);
                if ( v42 != 0 && v42 <= 3 )
                {
                  LOBYTE(v35) = v42 != 0;
                  __asan_report_store4(v5 + 160, v35);
                }
                *(_DWORD *)(v5 + 160) = 0;
                std::map<unsigned int,unsigned int>::emplace<unsigned int &,int>(
                  p_param_map,
                  (unsigned int *)(v5 + 144),
                  (int *)(v5 + 160),
                  (unsigned int *)p_param_map,
                  v37);
                *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = -8;
                __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 352));
              }
              *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v5 + 352) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v5 + 384) >> 3) + 0x7FFF8000) = -8;
              v29 = 1;
            }
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 544));
            v43 = ((v5 + 544) >> 3) + 2147450880;
            *(_WORD *)v43 = -1800;
            *(_BYTE *)(v43 + 2) = -8;
            if ( v29 )
              goto LABEL_142;
            v15 = 0;
            goto LABEL_144;
          case 122:
          case 132:
            goto LABEL_17;
          case 138:
          case 139:
            v44 = ((v5 + 608) >> 3) + 2147450880;
            *(_WORD *)v44 = 0;
            *(_BYTE *)(v44 + 2) = 0;
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 608));
            *(_DWORD *)(((v5 + 1184) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v5 + 80);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v5 + 1184),
              ",",
              (const std::allocator<char> *)(v5 + 80));
            v45 = (char *)(v5 + 1184);
            v46 = common::tools::StringUtils::splitToList<unsigned int>(
                    &quest_content->param_str,
                    (const std::string *)(v5 + 1184),
                    (std::vector<unsigned int> *)(v5 + 608),
                    1) != 0;
            std::string::~string((void *)(v5 + 1184));
            *(_DWORD *)(((v5 + 1184) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v5 + 80);
            *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
            if ( v46 )
            {
              *(_DWORD *)(((v5 + 1248) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 1248) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 1279) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 - 1) & 7) >= *(_BYTE *)(((v5 + 1279) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 1248, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 1248),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "rewriteQuestContent",
                511);
              v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 1248),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v48 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v47, (const char (*)[7])"quest:");
              v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v48,
                      (const unsigned int *)(v5 + 272));
              v50 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v49,
                      (const char (*)[15])" content_type:");
              v51 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                      v50,
                      &quest_content->type);
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v51, (const char (*)[26])byte_1A459240);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1248));
              *(_DWORD *)(((v5 + 1248) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v52 = 0;
              goto LABEL_78;
            }
            __for_range_1 = (std::vector<unsigned int> *)(v5 + 608);
            *(_BYTE *)(((v5 + 416) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v5 + 416) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v5 + 416, v45);
            *(std::vector<unsigned int>::iterator *)(v5 + 416) = std::vector<unsigned int>::begin(__for_range_1);
            *(_BYTE *)(((v5 + 448) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v5 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v5 + 448, v45);
            *(std::vector<unsigned int>::iterator *)(v5 + 448) = std::vector<unsigned int>::end(__for_range_1);
            break;
          case 143:
          case 144:
          case 145:
            std::vector<int>::clear(&quest_content->param);
            if ( (unsigned __int8)std::string::empty() )
              goto LABEL_142;
            *(_DWORD *)(((v5 + 1440) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v5 + 96);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v5 + 1440),
              ",",
              (const std::allocator<char> *)(v5 + 96));
            v71 = common::tools::StringUtils::splitToList<int>(
                    &quest_content->param_str,
                    (const std::string *)(v5 + 1440),
                    &quest_content->param,
                    1) != 0;
            std::string::~string((void *)(v5 + 1440));
            *(_DWORD *)(((v5 + 1440) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v5 + 96);
            *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
            if ( !v71 )
              goto LABEL_142;
            *(_DWORD *)(((v5 + 1504) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 1504) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 1535) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 - 1) & 7) >= *(_BYTE *)(((v5 + 1535) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 1504, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 1504),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "rewriteQuestContent",
              541);
            v72 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 1504),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v73 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v72, (const char (*)[7])"quest:");
            v74 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v73,
                    (const unsigned int *)(v5 + 272));
            v75 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    v74,
                    (const char (*)[15])" content_type:");
            v76 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                    v75,
                    &quest_content->type);
            common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v76, (const char (*)[26])byte_1A459240);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1504));
            v4 = -1;
            v15 = 0;
            goto LABEL_144;
          case 155:
            common::tools::MiscUtils::removeEmptyElement<int>(&quest_content->param);
            if ( std::vector<int>::size(&quest_content->param) > 1 )
            {
              if ( (unsigned __int8)std::string::empty() )
              {
                *(_DWORD *)(((v5 + 1632) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 1632) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 1663) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 1663) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 1632, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 1632),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "rewriteQuestContent",
                  556);
                v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v5 + 1632),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v83 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                        v82,
                        (const char (*)[32])byte_1A4593E0);
                v84 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v83,
                        (const unsigned int *)(v5 + 272));
                v85 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v84,
                        (const char (*)[17])", content_type: ");
                common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                  v85,
                  &quest_content->type);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1632));
                *(_DWORD *)(((v5 + 1632) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v81 = 0;
              }
              else
              {
                *(_BYTE *)(((v5 + 208) >> 3) + 0x7FFF8000) = 4;
                if ( *(_BYTE *)(((v5 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 208) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_store4(v5 + 208, v5 + 320);
                *(_DWORD *)(v5 + 208) = 0;
                if ( common::tools::StringUtils::strToNum<unsigned int>(
                       &quest_content->param_str,
                       (unsigned int *)(v5 + 208),
                       1) )
                {
                  *(_DWORD *)(((v5 + 1696) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v5 + 1696) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v5 + 1727) >> 3) + 0x7FFF8000) != 0
                    && (char)((v5 - 65) & 7) >= *(_BYTE *)(((v5 + 1727) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v5 + 1696, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v5 + 1696),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "rewriteQuestContent",
                    562);
                  v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v5 + 1696),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v87 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                          v86,
                          (const char (*)[53])byte_1A459420);
                  v88 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v87,
                          (const unsigned int *)(v5 + 272));
                  v89 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                          v88,
                          (const char (*)[17])", content_type: ");
                  common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                    v89,
                    &quest_content->type);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1696));
                  *(_DWORD *)(((v5 + 1696) >> 3) + 0x7FFF8000) = -117901064;
                  v4 = -1;
                  v81 = 0;
                }
                else
                {
                  std::vector<int>::emplace_back<unsigned int &>(
                    &quest_content->param,
                    (unsigned int *)(v5 + 208),
                    (unsigned int *)&quest_content->param);
                  v90 = std::vector<int>::operator[](&quest_content->param, 0LL);
                  v91 = (unsigned int *)v90;
                  if ( *(_BYTE *)(((unsigned __int64)v90 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)v90 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v90 >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(v90);
                  }
                  group_id = *v91;
                  *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = 4;
                  v92 = 1LL;
                  v93 = std::vector<int>::operator[](&quest_content->param, 1uLL);
                  v94 = v93;
                  if ( *(_BYTE *)(((unsigned __int64)v93 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)v93 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v93 >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(v93);
                  }
                  v95 = *v94;
                  v96 = *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000);
                  if ( v96 != 0 && v96 <= 3 )
                  {
                    LOBYTE(v92) = v96 != 0;
                    __asan_report_store4(v5 + 224, v92);
                  }
                  *(_DWORD *)(v5 + 224) = v95;
                  p_quest_group_gadget_set_map = &this->quest_group_gadget_set_map;
                  *(_BYTE *)(((v5 + 240) >> 3) + 0x7FFF8000) = 4;
                  if ( *(_BYTE *)(((v5 + 240) >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((v5 + 240) >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_store4(v5 + 240, group_id);
                  }
                  *(_DWORD *)(v5 + 240) = group_id;
                  gadget_set = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                                 p_quest_group_gadget_set_map,
                                 (std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v5 + 240));
                  *(_BYTE *)(((v5 + 240) >> 3) + 0x7FFF8000) = -8;
                  std::set<unsigned int>::emplace<int &>(gadget_set, (int *)(v5 + 224), (int *)(v5 + 224));
                  v81 = 1;
                }
              }
            }
            else
            {
              *(_DWORD *)(((v5 + 1568) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 1568) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 1599) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 1599) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 1568, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 1568),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "rewriteQuestContent",
                551);
              v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 1568),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v78 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      v77,
                      (const char (*)[32])byte_1A459360);
              v79 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v78,
                      (const unsigned int *)(v5 + 272));
              v80 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      v79,
                      (const char (*)[17])", content_type: ");
              common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                v80,
                &quest_content->type);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1568));
              *(_DWORD *)(((v5 + 1568) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v81 = 0;
            }
            *(_BYTE *)(((v5 + 208) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = -8;
            if ( v81 )
              goto LABEL_142;
            v15 = 0;
            goto LABEL_144;
          case 156:
            v98 = ((v5 + 672) >> 3) + 2147450880;
            *(_WORD *)v98 = 0;
            *(_BYTE *)(v98 + 2) = 0;
            std::vector<std::string>::vector((std::vector<std::string> *const)(v5 + 672));
            *(_DWORD *)(((v5 + 1760) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v5 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v5 + 1760),
              ";",
              (const std::allocator<char> *)(v5 + 112));
            v99 = common::tools::StringUtils::splitToList(
                    &quest_content->param_str,
                    (const std::string *)(v5 + 1760),
                    (std::vector<std::string> *)(v5 + 672),
                    1) != 0;
            std::string::~string((void *)(v5 + 1760));
            *(_DWORD *)(((v5 + 1760) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v5 + 112);
            *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( v99 )
            {
              *(_DWORD *)(((v5 + 1824) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 1824) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 1855) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 1855) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 1824, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 1824),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "rewriteQuestContent",
                578);
              v100 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v5 + 1824),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v101 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v100, (const char (*)[7])"quest:");
              v102 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v101,
                       (const unsigned int *)(v5 + 272));
              v103 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                       v102,
                       (const char (*)[15])" content_type:");
              v104 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                       v103,
                       &quest_content->type);
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v104, (const char (*)[26])byte_1A459240);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1824));
              *(_DWORD *)(((v5 + 1824) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v105 = 0;
            }
            else if ( std::vector<std::string>::size((const std::vector<std::string> *const)(v5 + 672)) == 2 )
            {
              v111 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v5 + 672), 0LL);
              std::string::operator=(&quest_content->param_str, v111);
              v112 = ((v5 + 736) >> 3) + 2147450880;
              *(_WORD *)v112 = 0;
              *(_BYTE *)(v112 + 2) = 0;
              std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 736));
              *(_DWORD *)(((v5 + 1952) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v5 + 128);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v5 + 1952),
                ",",
                (const std::allocator<char> *)(v5 + 128));
              v113 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v5 + 672), 1uLL);
              v114 = (char *)(v5 + 1952);
              v115 = common::tools::StringUtils::splitToList<unsigned int>(
                       v113,
                       (const std::string *)(v5 + 1952),
                       (std::vector<unsigned int> *)(v5 + 736),
                       1) != 0;
              std::string::~string((void *)(v5 + 1952));
              *(_DWORD *)(((v5 + 1952) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v5 + 128);
              *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
              if ( v115 )
              {
                *(_DWORD *)(((v5 + 2016) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 2016) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 2047) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 - 1) & 7) >= *(_BYTE *)(((v5 + 2047) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 2016, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 2016),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "rewriteQuestContent",
                  592);
                v116 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v5 + 2016),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v117 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v116, (const char (*)[7])"quest:");
                v118 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                         v117,
                         (const unsigned int *)(v5 + 272));
                v119 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                         v118,
                         (const char (*)[15])" content_type:");
                v120 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                         v119,
                         &quest_content->type);
                common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v120, (const char (*)[26])byte_1A459240);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 2016));
                *(_DWORD *)(((v5 + 2016) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v121 = 0;
              }
              else if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v5 + 736)) )
              {
                *(_DWORD *)(((v5 + 2080) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 2080) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 2111) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 2111) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 2080, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 2080),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "rewriteQuestContent",
                  597);
                v122 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v5 + 2080),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v123 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v122, (const char (*)[7])"quest:");
                v124 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                         v123,
                         (const unsigned int *)(v5 + 272));
                v125 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                         v124,
                         (const char (*)[15])" content_type:");
                v126 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                         v125,
                         &quest_content->type);
                common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v126, (const char (*)[26])byte_1A459480);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 2080));
                *(_DWORD *)(((v5 + 2080) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v121 = 0;
              }
              else
              {
                __for_range_2 = (std::vector<unsigned int> *)(v5 + 736);
                *(_BYTE *)(((v5 + 480) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v5 + 480) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v5 + 480, v114);
                *(std::vector<unsigned int>::iterator *)(v5 + 480) = std::vector<unsigned int>::begin(__for_range_2);
                *(_BYTE *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v5 + 512) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v5 + 512, v114);
                *(std::vector<unsigned int>::iterator *)(v5 + 512) = std::vector<unsigned int>::end(__for_range_2);
                while ( 1 )
                {
                  v127 = (char *)(v5 + 512);
                  if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 480),
                          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 512)) )
                    break;
                  *(_BYTE *)(((v5 + 256) >> 3) + 0x7FFF8000) = 4;
                  v128 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 480));
                  v129 = (int *)v128;
                  if ( *(_BYTE *)(((unsigned __int64)v128 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)v128 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v128 >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(v128);
                  }
                  v130 = *v129;
                  v131 = *(_BYTE *)(((v5 + 256) >> 3) + 0x7FFF8000);
                  if ( v131 != 0 && v131 <= 3 )
                  {
                    LOBYTE(v127) = v131 != 0;
                    __asan_report_store4(v5 + 256, v127);
                  }
                  *(_DWORD *)(v5 + 256) = v130;
                  std::vector<int>::emplace_back<unsigned int &>(
                    &quest_content->param,
                    (unsigned int *)(v5 + 256),
                    (unsigned int *)&quest_content->param);
                  __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 480));
                }
                *(_BYTE *)(((v5 + 256) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v5 + 480) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v5 + 512) >> 3) + 0x7FFF8000) = -8;
                v121 = 1;
              }
              std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 736));
              v105 = v121 != 0;
            }
            else
            {
              *(_DWORD *)(((v5 + 1888) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 1888) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 1919) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 1919) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 1888, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 1888),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "rewriteQuestContent",
                583);
              v106 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v5 + 1888),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v107 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v106, (const char (*)[7])"quest:");
              v108 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v107,
                       (const unsigned int *)(v5 + 272));
              v109 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                       v108,
                       (const char (*)[15])" content_type:");
              v110 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
                       v109,
                       &quest_content->type);
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v110, (const char (*)[26])byte_1A459480);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1888));
              *(_DWORD *)(((v5 + 1888) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v105 = 0;
            }
            std::vector<std::string>::~vector((std::vector<std::string> *const)(v5 + 672));
            v132 = ((v5 + 672) >> 3) + 2147450880;
            *(_WORD *)v132 = -1800;
            *(_BYTE *)(v132 + 2) = -8;
            v133 = ((v5 + 736) >> 3) + 2147450880;
            *(_WORD *)v133 = -1800;
            *(_BYTE *)(v133 + 2) = -8;
            if ( v105 )
              goto LABEL_142;
            v15 = 0;
            goto LABEL_144;
          case 158:
            common::tools::MiscUtils::removeEmptyElement<int>(&quest_content->param);
            goto LABEL_142;
          default:
            goto LABEL_142;
        }
        while ( 1 )
        {
          v53 = (char *)(v5 + 448);
          if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 416),
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 448)) )
          {
            v64 = 1;
            goto LABEL_71;
          }
          *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) = 4;
          v54 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 416));
          v55 = (int *)v54;
          if ( *(_BYTE *)(((unsigned __int64)v54 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v54 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v54 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v54);
          }
          v56 = *v55;
          v57 = *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000);
          if ( v57 != 0 && v57 <= 3 )
          {
            LOBYTE(v53) = v57 != 0;
            __asan_report_store4(v5 + 176, v53);
          }
          *(_DWORD *)(v5 + 176) = v56;
          v58 = *(unsigned int *)(v5 + 176);
          if ( !data::CookExcelConfigMgrBase::findCookRecipeExcelConfig(&txt_config_mgr->cook_config_mgr, v58) )
            break;
          v65 = &quest_content->param_map;
          *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = 4;
          v66 = *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000);
          if ( v66 != 0 && v66 <= 3 )
          {
            LOBYTE(v58) = v66 != 0;
            __asan_report_store4(v5 + 192, v58);
          }
          *(_DWORD *)(v5 + 192) = 0;
          std::map<unsigned int,unsigned int>::emplace<unsigned int &,int>(
            v65,
            (unsigned int *)(v5 + 176),
            (int *)(v5 + 192),
            (unsigned int *)v65,
            v59);
          *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = -8;
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 416));
        }
        *(_DWORD *)(((v5 + 1312) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 1312) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1343) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 1343) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1312, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1312),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "rewriteQuestContent",
          518);
        v60 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 1312),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v61 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v60, (const char (*)[7])"quest:");
        v62 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v61,
                (const unsigned int *)(v5 + 272));
        v63 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v62, (const char (*)[31])byte_1A4592E0);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v63, (const unsigned int *)(v5 + 176));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1312));
        *(_DWORD *)(((v5 + 1312) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v64 = 0;
LABEL_71:
        *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 416) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 448) >> 3) + 0x7FFF8000) = -8;
        if ( v64 == 1 )
        {
          if ( std::map<unsigned int,unsigned int>::empty(&quest_content->param_map) )
          {
            *(_DWORD *)(((v5 + 1376) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 1376) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 1407) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 1407) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 1376, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 1376),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "rewriteQuestContent",
              525);
            v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 1376),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v68 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v67, (const char (*)[7])"quest:");
            v69 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v68,
                    (const unsigned int *)(v5 + 272));
            common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v69, (const char (*)[26])byte_1A459320);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1376));
            *(_DWORD *)(((v5 + 1376) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v52 = 0;
          }
          else
          {
            v52 = 1;
          }
        }
        else
        {
          v52 = 0;
        }
LABEL_78:
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 608));
        v70 = ((v5 + 608) >> 3) + 2147450880;
        *(_WORD *)v70 = -1800;
        *(_BYTE *)(v70 + 2) = -8;
        if ( !v52 )
        {
          v15 = 0;
          goto LABEL_144;
        }
      }
      goto LABEL_142;
    }
LABEL_17:
    std::vector<int>::clear(&quest_content->param);
    *(_DWORD *)(((v5 + 800) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v5 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v5 + 800),
      ",",
      (const std::allocator<char> *)(v5 + 48));
    v9 = common::tools::StringUtils::splitToList<int>(
           &quest_content->param_str,
           (const std::string *)(v5 + 800),
           &quest_content->param,
           1) != 0;
    std::string::~string((void *)(v5 + 800));
    *(_DWORD *)(((v5 + 800) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v5 + 48);
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v5 + 864) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 864) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 895) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 895) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 864, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 864),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "rewriteQuestContent",
        474);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 864),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])"quest:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v11,
              (const unsigned int *)(v5 + 272));
      v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v12, (const char (*)[15])" content_type:");
      v14 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
              v13,
              &quest_content->type);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v14, (const char (*)[26])byte_1A459240);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 864));
      v4 = -1;
      v15 = 0;
      goto LABEL_144;
    }
    if ( std::vector<int>::empty(&quest_content->param) )
      break;
LABEL_142:
    __gnu_cxx::__normal_iterator<data::QuestContent *,std::vector<data::QuestContent>>::operator++((__gnu_cxx::__normal_iterator<data::QuestContent*,std::vector<data::QuestContent> > *const)(v5 + 288));
  }
  *(_DWORD *)(((v5 + 928) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v5 + 928) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 959) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 65) & 7) >= *(_BYTE *)(((v5 + 959) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 928, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 928),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "rewriteQuestContent",
    479);
  v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v5 + 928),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v17 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])"quest:");
  v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v5 + 272));
  v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v18, (const char (*)[15])" content_type:");
  v20 = common::milog::MiLogStream::operator<<<data::QuestContentType,(data::QuestContentType*)0>(
          v19,
          &quest_content->type);
  common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v20, (const char (*)[34])byte_1A459280);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 928));
  v4 = -1;
  v15 = 0;
LABEL_144:
  if ( v15 == 1 )
    v4 = 0;
  if ( v144 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8064) = 0LL;
    memset(
      (void *)((unsigned __int64)(v7 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v7 + 2147450880 - (((_DWORD)v7 + 2147450888) & 0xFFFFFFF8) + 108) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v5 >> 3) + 0x7FFF8070) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8078) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8080) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8088) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8090) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8098) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80A0) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80A8) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80B0) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80B8) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80C0) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8104) = 0LL;
    memset(
      (void *)((unsigned __int64)(v7 + 536862770) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v7 + 2147451072 - (((_DWORD)v7 + 2147451080) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_6(v5, 2144LL, v144);
  }
  return v4;
};

// Line 620: range 000000000EEF81C4-000000000EEF8331
std::unordered_map<unsigned int,std::vector<unsigned int>> *__cdecl QuestExcelConfigMgr::findDungeonQuestConfigMap(
        std::unordered_map<unsigned int,std::vector<unsigned int>> *retstr,
        const QuestExcelConfigMgr *const this,
        uint32_t scene_id,
        uint32_t point_id)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  char v10[96]; // [rsp+20h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 33 find_dungeon_quest_config_map:622";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::findDungeonQuestConfigMap;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  std::unordered_map<unsigned int,std::vector<unsigned int>>::unordered_map(retstr);
  if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 32, this);
  *(_QWORD *)(v4 + 32) = this;
  if ( *(_BYTE *)(((v4 + 40) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 40, this);
  *(_QWORD *)(v4 + 40) = retstr;
  QuestExcelConfigMgr::findDungeonQuestConfigMap(unsigned int,unsigned int)const::{lambda(unsigned int,unsigned int)#1}::operator()(
    (const QuestExcelConfigMgr::findDungeonQuestConfigMap::<lambda(uint32_t, uint32_t)> *const)(v4 + 32),
    scene_id,
    point_id);
  QuestExcelConfigMgr::findDungeonQuestConfigMap(unsigned int,unsigned int)const::{lambda(unsigned int,unsigned int)#1}::operator()(
    (const QuestExcelConfigMgr::findDungeonQuestConfigMap::<lambda(uint32_t, uint32_t)> *const)(v4 + 32),
    0,
    point_id);
  if ( v10 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 622: range 000000000EEF7A6E-000000000EEF81C3
void __fastcall QuestExcelConfigMgr::findDungeonQuestConfigMap(unsigned int,unsigned int)const::{lambda(unsigned int,unsigned int)#1}::operator()(
        unsigned __int64 __closure,
        __int64 scene_id,
        uint32_t point_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *v6; // rdx
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *v7; // rdx
  char *v8; // rsi
  bool v9; // al
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *v10; // rdx
  std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *v11; // rdx
  char *v12; // rsi
  bool v13; // al
  const std::pair<unsigned int const,std::vector<unsigned int> > *v14; // rax
  std::vector<unsigned int> *v15; // r14
  unsigned int *M_current; // r15
  std::vector<unsigned int> *v17; // rcx
  unsigned int *__last; // [rsp+8h] [rbp-1E8h]
  std::unordered_map<unsigned int,std::vector<unsigned int>> *__for_range; // [rsp+28h] [rbp-1C8h]
  const std::unordered_map<unsigned int,std::vector<unsigned int>>::key_type *k; // [rsp+30h] [rbp-1C0h]
  std::vector<unsigned int> *v; // [rsp+38h] [rbp-1B8h]
  char v23[432]; // [rsp+40h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 32 4 12 scene_id:622 48 4 12 point_id:622 64 8 7 key:624 96 8 8 iter:625 128 8 9 <unknown> 16"
                        "0 8 9 <unknown> 192 8 15 __for_begin:633 224 8 13 __for_end:633 256 8 9 <unknown> 288 8 9 <unkno"
                        "wn> 320 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::findDungeonQuestConfigMap(unsigned int,unsigned int)const::{lambda(unsigned int,unsigned int)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862731] = -202116109;
  *(_DWORD *)(v3 + 32) = scene_id;
  *(_DWORD *)(v3 + 48) = point_id;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, scene_id);
  *(std::pair<unsigned int,unsigned int> *)(v3 + 64) = std::make_pair<unsigned int &,unsigned int &>(
                                                         (unsigned int *)(v3 + 32),
                                                         (unsigned int *)(v3 + 48));
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v6 = (std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *)(*(_QWORD *)__closure + 1152LL);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::const_iterator *)(v3 + 96) = std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::unordered_map<unsigned int,std::vector<unsigned int>>>>>::find(v6, (const std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::key_type *)(v3 + 64));
  v7 = (std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *)(*(_QWORD *)__closure + 1152LL);
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, v3 + 64);
  *(std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::const_iterator *)(v3 + 128) = std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::unordered_map<unsigned int,std::vector<unsigned int>>>>>::end(v7);
  v8 = (char *)(v3 + 128);
  v9 = std::__detail::operator==<std::pair<std::pair const<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> >,true> *)(v3 + 96),
         (const std::__detail::_Node_iterator_base<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> >,true> *)(v3 + 128));
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v9 )
  {
    v8 = (char *)((((_BYTE)v3 + 68) & 7u) + 3);
    if ( *(_BYTE *)(((v3 + 68) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 68) & 7) + 3) >= *(_BYTE *)(((v3 + 68) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 68, v8);
    }
    *(_DWORD *)(v3 + 68) = 0;
  }
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v10 = (std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *)(*(_QWORD *)__closure + 1152LL);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v8);
  *(std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::const_iterator *)(v3 + 96) = std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::unordered_map<unsigned int,std::vector<unsigned int>>>>>::find(v10, (const std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::key_type *)(v3 + 64));
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
  v11 = (std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > > *)(*(_QWORD *)__closure + 1152LL);
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 160, v3 + 64);
  *(std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int> >,std::equal_to<std::pair<unsigned int,unsigned int> >,std::allocator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> > > >::const_iterator *)(v3 + 160) = std::unordered_map<std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>,boost::hash<std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::unordered_map<unsigned int,std::vector<unsigned int>>>>>::end(v11);
  v12 = (char *)(v3 + 160);
  v13 = std::__detail::operator!=<std::pair<std::pair const<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>>,true>(
          (const std::__detail::_Node_iterator_base<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> >,true> *)(v3 + 96),
          (const std::__detail::_Node_iterator_base<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> >,true> *)(v3 + 160));
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  if ( v13 )
  {
    __for_range = &std::__detail::_Node_const_iterator<std::pair<std::pair const<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::pair<unsigned int,unsigned int>,std::unordered_map<unsigned int,std::vector<unsigned int>> >,false,true> *const)(v3 + 96))->second;
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 192, v12);
    *(std::unordered_map<unsigned int,std::vector<unsigned int>>::const_iterator *)(v3 + 192) = std::unordered_map<unsigned int,std::vector<unsigned int>>::begin(__for_range);
    *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 224, v12);
    *(std::unordered_map<unsigned int,std::vector<unsigned int>>::const_iterator *)(v3 + 224) = std::unordered_map<unsigned int,std::vector<unsigned int>>::end(__for_range);
    while ( std::__detail::operator!=<std::pair<unsigned int const,std::vector<unsigned int>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<unsigned int> >,false> *)(v3 + 192),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<unsigned int> >,false> *)(v3 + 224)) )
    {
      *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
      v14 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int> >,false,false> *const)(v3 + 192));
      std::pair<unsigned int const,std::vector<unsigned int>>::pair(
        (std::pair<unsigned int const,std::vector<unsigned int> > *const)(v3 + 320),
        v14);
      k = std::get<0ul,unsigned int const,std::vector<unsigned int>>((std::pair<unsigned int const,std::vector<unsigned int> > *)(v3 + 320));
      v = std::get<1ul,unsigned int const,std::vector<unsigned int>>((std::pair<unsigned int const,std::vector<unsigned int> > *)(v3 + 320));
      if ( *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure + 8);
      v15 = std::unordered_map<unsigned int,std::vector<unsigned int>>::operator[](
              *(std::unordered_map<unsigned int,std::vector<unsigned int>> *const *)(__closure + 8),
              k);
      __last = std::vector<unsigned int>::end(v)._M_current;
      M_current = std::vector<unsigned int>::begin(v)._M_current;
      *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure + 8);
      v17 = std::unordered_map<unsigned int,std::vector<unsigned int>>::operator[](
              *(std::unordered_map<unsigned int,std::vector<unsigned int>> *const *)(__closure + 8),
              k);
      if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 256, k);
      *(std::vector<unsigned int>::iterator *)(v3 + 256) = std::vector<unsigned int>::begin(v17);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
        (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 288),
        (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 256));
      if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v3 + 288);
      std::vector<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,void>(
        v15,
        *(std::vector<unsigned int>::const_iterator *)(v3 + 288),
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current,
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)__last);
      *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
      std::pair<unsigned int const,std::vector<unsigned int>>::~pair((std::pair<unsigned int const,std::vector<unsigned int> > *const)(v3 + 320));
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<unsigned int> >,false,false> *const)(v3 + 192));
    }
  }
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 659: range 000000000EEF8332-000000000EEF83B2
const data::ChapterExcelConfig *__cdecl QuestExcelConfigMgr::findChapterConfigByParentQuestId(
        const QuestExcelConfigMgr *const this,
        uint32_t parent_quest_id)
{
  const QuestExcelConfigMgr *v3; // rdx
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+18h] [rbp-8h]

  parent_quest_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(this, parent_quest_id);
  if ( !parent_quest_config_ptr )
    return 0LL;
  v3 = this;
  if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->chapter_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->chapter_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&parent_quest_config_ptr->chapter_id);
  }
  return data::QuestExcelConfigMgrBase::findChapterExcelConfig(v3, parent_quest_config_ptr->chapter_id);
};

// Line 670: range 000000000EEF83B4-000000000EEF849A
bool __cdecl QuestExcelConfigMgr::isChapterBeginQuest(const QuestExcelConfigMgr *const this, uint32_t quest_id)
{
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+20h] [rbp-10h]
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+28h] [rbp-8h]

  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, quest_id);
  if ( !quest_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&quest_config_ptr->main_id);
  }
  chapter_config_ptr = QuestExcelConfigMgr::findChapterConfigByParentQuestId(this, quest_config_ptr->main_id);
  if ( !chapter_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->begin_quest_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)chapter_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->begin_quest_id >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&chapter_config_ptr->begin_quest_id);
  }
  return quest_id == chapter_config_ptr->begin_quest_id;
};

// Line 686: range 000000000EEF849C-000000000EEF857D
bool __cdecl QuestExcelConfigMgr::isChapterBeginMainQuest(
        const QuestExcelConfigMgr *const this,
        uint32_t parent_quest_id)
{
  const QuestExcelConfigMgr *v3; // rcx
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+10h] [rbp-10h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+18h] [rbp-8h]

  chapter_config_ptr = QuestExcelConfigMgr::findChapterConfigByParentQuestId(this, parent_quest_id);
  if ( !chapter_config_ptr )
    return 0;
  v3 = this;
  if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->begin_quest_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)chapter_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->begin_quest_id >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&chapter_config_ptr->begin_quest_id);
  }
  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(v3, chapter_config_ptr->begin_quest_id);
  if ( !quest_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&quest_config_ptr->main_id);
  }
  return parent_quest_id == quest_config_ptr->main_id;
};

// Line 702: range 000000000EEF857E-000000000EEF865C
bool __cdecl QuestExcelConfigMgr::isChapterEndQuest(const QuestExcelConfigMgr *const this, uint32_t quest_id)
{
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+20h] [rbp-10h]
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+28h] [rbp-8h]

  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, quest_id);
  if ( !quest_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&quest_config_ptr->main_id);
  }
  chapter_config_ptr = QuestExcelConfigMgr::findChapterConfigByParentQuestId(this, quest_config_ptr->main_id);
  if ( !chapter_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->end_quest_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->end_quest_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&chapter_config_ptr->end_quest_id);
  }
  return quest_id == chapter_config_ptr->end_quest_id;
};

// Line 719: range 000000000EEF865E-000000000EEF8A21
void __fastcall QuestExcelConfigMgr::getAllFollowQuestInRobot(
        const QuestExcelConfigMgr *const this,
        __int64 quest_id,
        std::set<unsigned int> *quest_set,
        std::set<unsigned int> *last_quest_set)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_robot_post_quest_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v8; // rdx
  char *v9; // rsi
  bool v10; // al
  char *v11; // rsi
  unsigned int *v12; // rax
  int *v13; // rdx
  int v14; // ecx
  char v15; // al
  std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-E8h]
  char v19[224]; // [rsp+30h] [rbp-E0h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 4 19 follow_quest_id:724 48 4 12 quest_id:718 64 8 6 it:720 96 8 9 <unknown> 128 8 15 __for"
                        "_begin:724 160 8 13 __for_end:724";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::getAllFollowQuestInRobot;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -202116352;
  *(_DWORD *)(v4 + 48) = quest_id;
  p_robot_post_quest_map = &this->robot_post_quest_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, quest_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_robot_post_quest_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v4 + 48));
  v8 = &this->robot_post_quest_map;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, v4 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v8);
  v9 = (char *)(v4 + 96);
  v10 = std::__detail::operator!=<std::pair<unsigned int const,std::set<unsigned int>>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v4 + 64),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v4 + 96));
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v10 )
  {
    __for_range = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v4 + 64))->second;
    *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 128, v9);
    *(std::set<unsigned int>::iterator *)(v4 + 128) = std::set<unsigned int>::begin(__for_range);
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 160, v9);
    *(std::set<unsigned int>::iterator *)(v4 + 160) = std::set<unsigned int>::end(__for_range);
    while ( 1 )
    {
      v11 = (char *)(v4 + 160);
      if ( !std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 128),
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 160)) )
        break;
      *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) = 4;
      v12 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v4 + 128));
      v13 = (int *)v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      v14 = *v13;
      v15 = *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000);
      if ( v15 != 0 && v15 <= 3 )
      {
        LOBYTE(v11) = v15 != 0;
        __asan_report_store4(v4 + 32, v11);
      }
      *(_DWORD *)(v4 + 32) = v14;
      std::set<unsigned int>::insert(quest_set, (const std::set<unsigned int>::value_type *)(v4 + 32));
      QuestExcelConfigMgr::getAllFollowQuestInRobot(this, *(_DWORD *)(v4 + 32), quest_set, last_quest_set);
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v4 + 128));
    }
  }
  else
  {
    std::set<unsigned int>::insert(last_quest_set, (const std::set<unsigned int>::value_type *)(v4 + 48));
  }
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 738: range 000000000EEF8A22-000000000EEF8BD6
const std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findExclusiveNpcQuests(
        const QuestExcelConfigMgr *const this,
        __int64 npc_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_exclusive_npc_quests; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v6; // rdx
  const std::set<unsigned int> *result; // rax
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 10 npc_id:737 64 8 8 iter:739 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findExclusiveNpcQuests;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = npc_id;
  p_exclusive_npc_quests = &this->exclusive_npc_quests;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, npc_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_exclusive_npc_quests,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->exclusive_npc_quests;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v6);
  if ( std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 96)) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 745: range 000000000EEF8BD8-000000000EEF8D8C
const std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findSharedNpcQuests(
        const QuestExcelConfigMgr *const this,
        __int64 npc_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_shared_npc_quests; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v6; // rdx
  const std::set<unsigned int> *result; // rax
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 10 npc_id:744 64 8 8 iter:746 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findSharedNpcQuests;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = npc_id;
  p_shared_npc_quests = &this->shared_npc_quests;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, npc_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_shared_npc_quests,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->shared_npc_quests;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v6);
  if ( std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 96)) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 752: range 000000000EEF8D8E-000000000EEF8F42
const std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findTrialAvatarQuests(
        const QuestExcelConfigMgr *const this,
        __int64 trial_avatar_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_trial_avatar_quest_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v6; // rdx
  const std::set<unsigned int> *result; // rax
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 19 trial_avatar_id:751 64 8 8 iter:753 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findTrialAvatarQuests;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = trial_avatar_id;
  p_trial_avatar_quest_map = &this->trial_avatar_quest_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, trial_avatar_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_trial_avatar_quest_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->trial_avatar_quest_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v6);
  if ( std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 96)) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 759: range 000000000EEF8F44-000000000EEFBEE1
__int64 __fastcall QuestExcelConfigMgr::checkQuestCond(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestCond *quest_cond,
        uint32_t quest_id)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int v10; // eax
  std::vector<int>::const_reference v11; // rax
  unsigned int *v12; // rdx
  __int64 v13; // rsi
  const QuestExcelConfigMgr *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  int v19; // eax
  std::vector<int>::const_reference v20; // rax
  unsigned int *v21; // rdx
  __int64 v22; // rsi
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int v26; // eax
  std::vector<int>::const_reference v27; // rax
  unsigned int *v28; // rdx
  __int64 v29; // rsi
  std::vector<int>::const_reference v30; // rax
  unsigned int *v31; // rdx
  __int64 v32; // rsi
  WorldAreaExcelConfigMgr *p_world_area_config_mgr; // rdi
  uint32_t v34; // edx
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  int v41; // eax
  std::vector<int>::const_reference v42; // rax
  unsigned int *v43; // rdx
  __int64 v44; // rsi
  std::vector<int>::const_reference v45; // rax
  unsigned int *v46; // rdx
  __int64 v47; // rsi
  NewActivityExcelConfigMgr *p_new_activity_config_mgr; // rcx
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  NewActivityExcelConfigMgr *v51; // rcx
  NewActivityExcelConfigMgr *v52; // rcx
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  int v59; // eax
  std::vector<int>::const_reference v60; // rax
  unsigned int *v61; // rdx
  __int64 v62; // rsi
  std::vector<int>::const_reference v63; // rax
  _DWORD *v64; // rdx
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  const QuestExcelConfigMgr *v67; // rdx
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  std::vector<int>::size_type v72; // rdx
  std::vector<int>::const_reference v73; // rax
  unsigned int *v74; // rdx
  __int64 v75; // rsi
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  std::vector<int>::const_reference v82; // rax
  unsigned int *v83; // rdx
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // r14
  const int *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  int v89; // eax
  __int64 v90; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v91; // rax
  int *v92; // rdx
  int v93; // ecx
  char v94; // al
  __int64 v95; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v96; // rax
  int *v97; // rdx
  int v98; // ecx
  char v99; // al
  common::milog::MiLogStream *v100; // rax
  common::milog::MiLogStream *v101; // rax
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // r14
  std::vector<int>::size_type v110; // rax
  std::vector<int>::const_reference v111; // rax
  _DWORD *v112; // rdx
  common::milog::MiLogStream *v113; // rax
  common::milog::MiLogStream *v114; // r14
  const int *v115; // rax
  common::milog::MiLogStream *v116; // rax
  common::milog::MiLogStream *v117; // rax
  common::milog::MiLogStream *v118; // rax
  common::milog::MiLogStream *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // rax
  int v122; // eax
  __int64 v123; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v124; // rax
  int *v125; // rdx
  int v126; // ecx
  char v127; // al
  common::milog::MiLogStream *v128; // rax
  common::milog::MiLogStream *v129; // rax
  common::milog::MiLogStream *v130; // rax
  common::milog::MiLogStream *v131; // rax
  common::milog::MiLogStream *v132; // rax
  common::milog::MiLogStream *v133; // r14
  std::vector<int>::size_type v134; // rax
  std::vector<int>::const_reference v135; // rax
  unsigned int *v136; // rdx
  common::milog::MiLogStream *v137; // rax
  common::milog::MiLogStream *v138; // r14
  const int *v139; // rax
  common::milog::MiLogStream *v140; // rax
  common::milog::MiLogStream *v141; // rax
  bool has_error; // [rsp+27h] [rbp-7F9h]
  uint32_t activity_id; // [rsp+28h] [rbp-7F8h]
  ItemExcelConfigMgr *item_config_mgr; // [rsp+30h] [rbp-7F0h]
  LuaConfigMgr *lua_config_mgr; // [rsp+38h] [rbp-7E8h]
  const GroupScriptConfig *group_config_ptr; // [rsp+40h] [rbp-7E0h]
  char v151[1968]; // [rsp+70h] [rbp-7B0h] BYREF

  v5 = (unsigned __int64)v151;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_5(1920LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "40 32 4 18 param_quest_id:772 48 4 11 item_id:791 64 4 11 city_id:807 80 4 9 level:808 96 4 15 s"
                        "chedule_id:828 112 4 11 cond_id:829 128 4 19 parent_quest_id:856 144 4 11 item_id:881 160 4 12 g"
                        "roup_id:920 176 4 20 region_config_id:921 192 4 11 is_male:960 208 4 12 quest_id:758 224 8 5 i:8"
                        "79 256 8 9 <unknown> 288 8 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> "
                        "512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 8"
                        "32 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> "
                        "1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unkno"
                        "wn> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 32 9 <unknown> 1728 32 9 <u"
                        "nknown> 1792 32 9 <unknown> 1856 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkQuestCond;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -234556924;
  v7[536862725] = -234556924;
  v7[536862726] = -234556924;
  v7[536862727] = -218959360;
  v7[536862728] = -218959360;
  v7[536862729] = -218959360;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -218959118;
  v7[536862741] = -218959118;
  v7[536862743] = -218959118;
  v7[536862745] = -218959118;
  v7[536862747] = -218959118;
  v7[536862749] = -218959118;
  v7[536862751] = -218959118;
  v7[536862753] = -218959118;
  v7[536862755] = -218959118;
  v7[536862757] = -218959118;
  v7[536862759] = -218959118;
  v7[536862761] = -218959118;
  v7[536862763] = -218959118;
  v7[536862765] = -218959118;
  v7[536862767] = -218959118;
  v7[536862769] = -218959118;
  v7[536862771] = -218959118;
  v7[536862773] = -218959118;
  v7[536862775] = -218959118;
  v7[536862777] = -218959118;
  v7[536862779] = -202116109;
  *(_DWORD *)(v5 + 208) = quest_id;
  item_config_mgr = &txt_config_mgr->item_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&quest_cond->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&quest_cond->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&quest_cond->type);
  }
  switch ( quest_cond->type )
  {
    case QUEST_COND_STATE_EQUAL:
    case QUEST_COND_STATE_NOT_EQUAL:
      if ( std::vector<int>::size(&quest_cond->param) > 1 )
      {
        v11 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v12 = (unsigned int *)v11;
        if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v11);
        }
        v13 = *v12;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 32, v13);
        *(_DWORD *)(v5 + 32) = v13;
        if ( data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, *(unsigned int *)(v5 + 32)) )
          goto LABEL_22;
        v14 = this;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 32);
        if ( data::QuestExcelConfigMgrBase::findRandomQuestExcelConfig(v14, *(unsigned int *)(v5 + 32)) )
        {
LABEL_22:
          v10 = 1;
        }
        else
        {
          if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 384, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 384),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCond",
            778);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 384),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v16 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  v15,
                  (const char (*)[26])"can't find cond quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v5 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
          v4 = -1;
          v10 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          769);
        v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v5 + 320),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v9 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
               v8,
               (const char (*)[33])"quest accept cond param invalid:");
        common::milog::MiLogStream::operator<<<int>(v9, &quest_cond->param);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
        v4 = -1;
        v10 = 0;
      }
      if ( v10 )
        goto LABEL_212;
      break;
    case QUEST_COND_PACK_HAVE_ITEM:
      if ( std::vector<int>::size(&quest_cond->param) > 1 )
      {
        v20 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v21 = (unsigned int *)v20;
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v20);
        }
        v22 = *v21;
        if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 48, v22);
        *(_DWORD *)(v5 + 48) = v22;
        if ( ItemExcelConfigMgr::findItemConfig(item_config_mgr, *(unsigned int *)(v5 + 48)) )
        {
          v19 = 1;
        }
        else
        {
          if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCond",
            795);
          v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v24 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  v23,
                  (const char (*)[35])"findItemBaseConfig fails, item_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v5 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
          v4 = -1;
          v19 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v5 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          788);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 448),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                v17,
                (const char (*)[33])"quest accept cond param invalid:");
        common::milog::MiLogStream::operator<<<int>(v18, &quest_cond->param);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 448));
        v4 = -1;
        v19 = 0;
      }
      if ( v19 )
        goto LABEL_212;
      break;
    case QUEST_COND_CITY_LEVEL_EQUAL_GREATER:
      if ( std::vector<int>::size(&quest_cond->param) > 1 )
      {
        v27 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v28 = (unsigned int *)v27;
        if ( *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v27 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v27);
        }
        v29 = *v28;
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 64, v29);
        *(_DWORD *)(v5 + 64) = v29;
        v30 = std::vector<int>::operator[](&quest_cond->param, 1uLL);
        v31 = (unsigned int *)v30;
        if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v30);
        }
        v32 = *v31;
        if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 80, v32);
        *(_DWORD *)(v5 + 80) = v32;
        p_world_area_config_mgr = &txt_config_mgr->world_area_config_mgr;
        v34 = *(_DWORD *)(v5 + 80);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
        {
          p_world_area_config_mgr = (WorldAreaExcelConfigMgr *)(v5 + 64);
          __asan_report_load4(v5 + 64);
        }
        if ( WorldAreaExcelConfigMgr::findCityLevelupConfig(p_world_area_config_mgr, *(_DWORD *)(v5 + 64), v34) )
        {
          v26 = 1;
        }
        else
        {
          if ( *(char *)(((v5 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCond",
            811);
          v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v36 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v35, (const char (*)[10])"city_id: ");
          v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v36,
                  (const unsigned int *)(v5 + 64));
          v38 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v37, (const char (*)[9])" level: ");
          v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v38,
                  (const unsigned int *)(v5 + 80));
          common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v39, (const char (*)[23])byte_1A459D20);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 640));
          v4 = -1;
          v26 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 576),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          804);
        v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 576),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v25, (const char (*)[45])byte_1A459C40);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
        v4 = -1;
        v26 = 0;
      }
      if ( v26 )
        goto LABEL_212;
      break;
    case QUEST_COND_QUEST_VAR_EQUAL:
    case QUEST_COND_QUEST_VAR_GREATER:
    case QUEST_COND_QUEST_VAR_LESS:
      if ( std::vector<int>::size(&quest_cond->param) > 1 )
      {
        v111 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v112 = v111;
        if ( *(_BYTE *)(((unsigned __int64)v111 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v111 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v111 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v111);
        }
        if ( *v112 <= 4u )
          goto LABEL_212;
        if ( *(char *)(((v5 + 1600) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1631) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 1631) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1600, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1600),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          948);
        v113 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v5 + 1600),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v114 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v113, (const char (*)[34])byte_1A45A340);
        v115 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v116 = common::milog::MiLogStream::operator<<<int,(int *)0>(v114, v115);
        v117 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v116, (const char (*)[21])byte_1A45A3A0);
        v118 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v117,
                 &QuestExcelConfigMgr::QUEST_VAR_LEN);
        v119 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v118, (const char (*)[11])" quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v119, (const unsigned int *)(v5 + 208));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1600));
        v4 = -1;
      }
      else
      {
        if ( *(char *)(((v5 + 1536) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1567) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 1567) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1536, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1536),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          943);
        v106 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v5 + 1536),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v107 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v106, (const char (*)[40])byte_1A45A2A0);
        v108 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v107,
                 (const unsigned int *)(v5 + 208));
        v109 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v108, (const char (*)[15])byte_1A45A300);
        v110 = std::vector<int>::size(&quest_cond->param);
        if ( *(_BYTE *)(((v5 + 256) >> 3) + 0x7FFF8000) )
          v110 = __asan_report_store8(v5 + 256, byte_1A45A300);
        *(_QWORD *)(v5 + 256) = v110;
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v109,
          (const unsigned __int64 *)(v5 + 256));
        *(_BYTE *)(((v5 + 256) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1536));
        v4 = -1;
      }
      break;
    case QUEST_COND_QUEST_GLOBAL_VAR_EQUAL:
    case QUEST_COND_QUEST_GLOBAL_VAR_GREATER:
    case QUEST_COND_QUEST_GLOBAL_VAR_LESS:
      if ( std::vector<int>::size(&quest_cond->param) > 1 )
      {
        v82 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v83 = (unsigned int *)v82;
        if ( *(_BYTE *)(((unsigned __int64)v82 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v82 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v82 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v82);
        }
        if ( data::QuestExcelConfigMgrBase::findQuestGlobalVarConfig(this, *v83) )
          goto LABEL_212;
        if ( *(char *)(((v5 + 1280) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1311) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 1311) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1280, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1280),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          908);
        v84 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 1280),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v85 = common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v84, (const char (*)[4])"ID:");
        v86 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v87 = common::milog::MiLogStream::operator<<<int,(int *)0>(v85, v86);
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v87, (const char (*)[31])byte_1A45A100);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1280));
        v4 = -1;
      }
      else
      {
        if ( *(char *)(((v5 + 1216) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1247) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 1247) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1216, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1216),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          903);
        v81 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 1216),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v81, (const char (*)[47])byte_1A45A060);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1216));
        v4 = -1;
      }
      break;
    case QUEST_COND_TIME_VAR_GT_EQ:
    case QUEST_COND_TIME_VAR_PASS_DAY:
      if ( std::vector<int>::size(&quest_cond->param) > 2 )
      {
        v60 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v61 = (unsigned int *)v60;
        if ( *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v60 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v60);
        }
        v62 = *v61;
        if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 128, v62);
        *(_DWORD *)(v5 + 128) = v62;
        v63 = std::vector<int>::operator[](&quest_cond->param, 1uLL);
        v64 = v63;
        if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v63);
        }
        if ( *v64 <= 9u )
        {
          v67 = this;
          if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v5 + 128);
          if ( data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(v67, *(unsigned int *)(v5 + 128)) )
          {
            v59 = 1;
          }
          else
          {
            if ( *(char *)(((v5 + 1024) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 1055) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 1055) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 1024, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 1024),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestCond",
              866);
            v68 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 1024),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v69 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                    v68,
                    (const char (*)[28])"can't find parent_quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v69,
              (const unsigned int *)(v5 + 128));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1024));
            v4 = -1;
            v59 = 0;
          }
        }
        else
        {
          if ( *(char *)(((v5 + 960) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 991) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 991) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 960, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 960),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCond",
            860);
          v65 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 960),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v66 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(v65, (const char (*)[52])byte_1A459EC0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v66,
            &QuestExcelConfigMgr::QUEST_TIME_VAR_LEN);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 960));
          v4 = -1;
          v59 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v5 + 896) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 927) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 927) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 896, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 896),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          853);
        v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 896),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v58 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                v57,
                (const char (*)[33])"quest accept cond param invalid:");
        common::milog::MiLogStream::operator<<<int>(v58, &quest_cond->param);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 896));
        v4 = -1;
        v59 = 0;
      }
      if ( v59 )
        goto LABEL_212;
      break;
    case QUEST_COND_PLAYER_CHOOSE_MALE:
      if ( std::vector<int>::size(&quest_cond->param) )
      {
        v123 = 0LL;
        v124 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                   &quest_cond->param,
                                                                                   0LL);
        v125 = v124;
        if ( *(_BYTE *)(((unsigned __int64)v124 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v124 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v124 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v124);
        }
        v126 = *v125;
        v127 = *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000);
        if ( v127 != 0 && v127 <= 3 )
        {
          LOBYTE(v123) = v127 != 0;
          __asan_report_store4(v5 + 192, v123);
        }
        *(_DWORD *)(v5 + 192) = v126;
        if ( *(_DWORD *)(v5 + 192) < 2u )
        {
          v122 = 1;
        }
        else
        {
          if ( *(char *)(((v5 + 1728) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 1759) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 1759) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 1728, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 1728),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCond",
            963);
          v128 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v5 + 1728),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v129 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                   v128,
                   (const char (*)[20])"is_male is invalid:");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v129, (const int *)(v5 + 192));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1728));
          v4 = -1;
          v122 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v5 + 1664) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1695) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 1695) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1664, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1664),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          957);
        v120 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v5 + 1664),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v121 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                 v120,
                 (const char (*)[33])"quest accept cond param invalid:");
        common::milog::MiLogStream::operator<<<int>(v121, &quest_cond->param);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1664));
        v4 = -1;
        v122 = 0;
      }
      if ( v122 )
        goto LABEL_212;
      break;
    case QUEST_COND_HISTORY_GOT_ANY_ITEM:
      if ( std::vector<int>::size(&quest_cond->param) )
      {
        has_error = 0;
        if ( *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 224, txt_config_mgr);
        for ( *(_QWORD *)(v5 + 224) = 0LL; ; ++*(_QWORD *)(v5 + 224) )
        {
          v72 = std::vector<int>::size(&quest_cond->param);
          if ( *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) )
            __asan_report_load8(v5 + 224);
          if ( v72 <= *(_QWORD *)(v5 + 224) )
            break;
          *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) = 4;
          v73 = std::vector<int>::operator[](&quest_cond->param, *(_QWORD *)(v5 + 224));
          v74 = (unsigned int *)v73;
          if ( *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v73 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v73);
          }
          v75 = *v74;
          if ( *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v5 + 144, v75);
          *(_DWORD *)(v5 + 144) = v75;
          if ( !ItemExcelConfigMgr::findItemConfig(item_config_mgr, *(unsigned int *)(v5 + 144)) )
          {
            has_error = 1;
            *(_DWORD *)(((v5 + 1152) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 1152) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 1183) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 1183) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 1152, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 1152),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestCond",
              886);
            v76 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 1152),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v77 = common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v76, (const char (*)[4])off_1A459FA0);
            v78 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v77,
                    (const unsigned __int64 *)(v5 + 224));
            v79 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v78,
                    (const char (*)[12])byte_1A459FE0);
            v80 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v79,
                    (const unsigned int *)(v5 + 144));
            common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v80, (const char (*)[24])byte_1A45A020);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1152));
            *(_DWORD *)(((v5 + 1152) >> 3) + 0x7FFF8000) = -117901064;
          }
          *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) = -8;
          if ( *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) )
            __asan_report_load8(v5 + 224);
        }
        if ( !has_error )
          goto LABEL_212;
        v4 = -1;
      }
      else
      {
        if ( *(char *)(((v5 + 1088) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1119) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 1119) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1088, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1088),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          875);
        v70 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 1088),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v71 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v70, (const char (*)[28])byte_1A459F60);
        common::milog::MiLogStream::operator<<<int>(v71, &quest_cond->param);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1088));
        v4 = -1;
      }
      break;
    case QUEST_COND_PLAYER_ENTER_REGION:
      if ( std::vector<int>::size(&quest_cond->param) > 1 )
      {
        v90 = 0LL;
        v91 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                  &quest_cond->param,
                                                                                  0LL);
        v92 = v91;
        if ( *(_BYTE *)(((unsigned __int64)v91 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v91 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v91 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v91);
        }
        v93 = *v92;
        v94 = *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000);
        if ( v94 != 0 && v94 <= 3 )
        {
          LOBYTE(v90) = v94 != 0;
          __asan_report_store4(v5 + 160, v90);
        }
        *(_DWORD *)(v5 + 160) = v93;
        v95 = 1LL;
        v96 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                  &quest_cond->param,
                                                                                  1uLL);
        v97 = v96;
        if ( *(_BYTE *)(((unsigned __int64)v96 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v96 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v96 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v96);
        }
        v98 = *v97;
        v99 = *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000);
        if ( v99 != 0 && v99 <= 3 )
        {
          LOBYTE(v95) = v99 != 0;
          __asan_report_store4(v5 + 176, v95);
        }
        *(_DWORD *)(v5 + 176) = v98;
        lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
        if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 160);
        group_config_ptr = LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v5 + 160));
        if ( group_config_ptr )
        {
          if ( *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v5 + 176);
          if ( GroupScriptConfig::findRegionConfig(group_config_ptr, *(unsigned int *)(v5 + 176)) )
          {
            v89 = 1;
          }
          else
          {
            if ( *(char *)(((v5 + 1472) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 1503) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 1503) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 1472, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 1472),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestCond",
              932);
            v102 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v5 + 1472),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v103 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                     v102,
                     (const char (*)[35])byte_1A45A200);
            v104 = common::milog::MiLogStream::operator<<<int,(int *)0>(v103, (const int *)(v5 + 160));
            v105 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                     v104,
                     (const char (*)[21])", region_config_id: ");
            common::milog::MiLogStream::operator<<<int,(int *)0>(v105, (const int *)(v5 + 176));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1472));
            v4 = -1;
            v89 = 0;
          }
        }
        else
        {
          if ( *(char *)(((v5 + 1408) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 1439) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 1439) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 1408, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 1408),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCond",
            926);
          v100 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v5 + 1408),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v101 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                   v100,
                   (const char (*)[34])byte_1A45A1A0);
          common::milog::MiLogStream::operator<<<int,(int *)0>(v101, (const int *)(v5 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1408));
          v4 = -1;
          v89 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v5 + 1344) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1375) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 1375) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1344, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1344),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          917);
        v88 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 1344),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(v88, (const char (*)[57])byte_1A45A140);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1344));
        v4 = -1;
        v89 = 0;
      }
      if ( v89 )
        goto LABEL_212;
      break;
    case QUEST_COND_ACTIVITY_SCHEDULE_OPEN_AND_COND:
      if ( std::vector<int>::size(&quest_cond->param) > 1 )
      {
        v42 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v43 = (unsigned int *)v42;
        if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v42 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v42);
        }
        v44 = *v43;
        if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 96, v44);
        *(_DWORD *)(v5 + 96) = v44;
        v45 = std::vector<int>::operator[](&quest_cond->param, 1uLL);
        v46 = (unsigned int *)v45;
        if ( *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v45 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v45);
        }
        v47 = *v46;
        if ( *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 112, v47);
        *(_DWORD *)(v5 + 112) = v47;
        p_new_activity_config_mgr = &txt_config_mgr->new_activity_config_mgr;
        if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 96);
        if ( !NewActivityExcelConfigMgr::isScheduleIdValid(p_new_activity_config_mgr, *(_DWORD *)(v5 + 96)) )
        {
          if ( *(char *)(((v5 + 768) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 799) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 799) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 768, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 768),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCond",
            832);
          v49 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 768),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v50 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v49, (const char (*)[40])byte_1A459DC0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, (const unsigned int *)(v5 + 96));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 768));
          v4 = -1;
          v41 = 0;
        }
        else
        {
          v51 = &txt_config_mgr->new_activity_config_mgr;
          if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v5 + 96);
          activity_id = NewActivityExcelConfigMgr::getActivityIdByScheduleId(v51, *(_DWORD *)(v5 + 96));
          v52 = &txt_config_mgr->new_activity_config_mgr;
          if ( *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v5 + 112);
          if ( !NewActivityExcelConfigMgr::isActivityContainsCondId(v52, activity_id, *(_DWORD *)(v5 + 112)) )
          {
            if ( *(char *)(((v5 + 832) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 863) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 863) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 832, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 832),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestCond",
              838);
            v53 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 832),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v54 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
                    v53,
                    (const char (*)[61])byte_1A459E20);
            v55 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v54,
                    (const unsigned int *)(v5 + 112));
            v56 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v55,
                    (const char (*)[12])byte_1A459E80);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, (const unsigned int *)(v5 + 96));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 832));
            v4 = -1;
            v41 = 0;
          }
          else
          {
            v41 = 1;
          }
        }
      }
      else
      {
        if ( *(char *)(((v5 + 704) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 735) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 735) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 704, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 704),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          825);
        v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 704),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(v40, (const char (*)[51])byte_1A459D60);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 704));
        v4 = -1;
        v41 = 0;
      }
      if ( v41 )
        goto LABEL_212;
      break;
    case QUEST_COND_GCG_EXP_OVERFLOW:
      if ( std::vector<int>::size(&quest_cond->param) )
      {
        v135 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v136 = (unsigned int *)v135;
        if ( *(_BYTE *)(((unsigned __int64)v135 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v135 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v135 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v135);
        }
        if ( data::GCGGrowthExcelConfigMgrBase::findGCGLevelLockExcelConfig(
               &txt_config_mgr->gcg_growth_config_mgr,
               *v136) )
        {
          goto LABEL_212;
        }
        if ( *(char *)(((v5 + 1856) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1887) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 1887) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1856, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1856),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          977);
        v137 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v5 + 1856),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v138 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(v137, (const char (*)[53])byte_1A45A4C0);
        v139 = std::vector<int>::operator[](&quest_cond->param, 0LL);
        v140 = common::milog::MiLogStream::operator<<<int,(int *)0>(v138, v139);
        v141 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v140, (const char (*)[42])byte_1A45A520);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v141, (const unsigned int *)(v5 + 208));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1856));
        v4 = -1;
      }
      else
      {
        if ( *(char *)(((v5 + 1792) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 1823) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 1823) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 1792, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 1792),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCond",
          972);
        v130 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v5 + 1792),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v131 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v130, (const char (*)[40])byte_1A45A460);
        v132 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v131,
                 (const unsigned int *)(v5 + 208));
        v133 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v132, (const char (*)[15])byte_1A45A300);
        v134 = std::vector<int>::size(&quest_cond->param);
        if ( *(_BYTE *)(((v5 + 288) >> 3) + 0x7FFF8000) )
          v134 = __asan_report_store8(v5 + 288, byte_1A45A300);
        *(_QWORD *)(v5 + 288) = v134;
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v133,
          (const unsigned __int64 *)(v5 + 288));
        *(_BYTE *)(((v5 + 288) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 1792));
        v4 = -1;
      }
      break;
    default:
LABEL_212:
      v4 = 0;
      break;
  }
  if ( v151 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF802C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF803C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8044) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF804C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8054) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF805C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8064) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF806C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8074) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF807C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8084) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF808C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8094) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF809C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80A4) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80AC) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80B4) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80BC) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80C4) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80CC) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80D4) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80DC) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80E4) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80EC) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_5(v5, 1920LL, v151);
  }
  return v4;
};

// Line 990: range 000000000EEFBEE2-000000000EEFEBD9
int32_t __cdecl QuestExcelConfigMgr::checkQuestExcelConfig(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  int v9; // edx
  _BOOL4 v10; // eax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rdx
  common::milog::MiLogStream *v32; // rax
  unsigned __int64 v33; // rax
  unsigned int *M_current; // r15
  std::vector<unsigned int>::iterator v35; // rax
  unsigned int *v36; // r15
  unsigned int *v37; // rsi
  std::set<unsigned int>::size_type v38; // r15
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rdx
  common::milog::MiLogStream *v41; // rax
  _BOOL4 v42; // r15d
  std::vector<unsigned int>::size_type v43; // r15
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rdx
  common::milog::MiLogStream *v46; // rax
  const char *v47; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v48; // rax
  int *v49; // rdx
  int v50; // ecx
  char v51; // al
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rdx
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  int v57; // edx
  unsigned __int64 v58; // rax
  __int64 v59; // rsi
  __int64 v60; // rsi
  __int64 v61; // rsi
  char *v62; // rsi
  bool v63; // al
  _BOOL4 v64; // r15d
  __int64 v65; // rsi
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rdx
  common::milog::MiLogStream *v68; // rax
  __int64 v69; // rsi
  __int64 v70; // rdx
  __int64 v71; // rsi
  __int64 v72; // rdx
  __int64 v73; // rdx
  std::vector<int>::const_reference v74; // rax
  _DWORD *v75; // rdx
  char v76; // al
  const std::vector<data::QuestContent> *p_fail_cond; // rcx
  data::LogicType fail_cond_comb; // edi
  __int64 v79; // rsi
  const std::vector<data::QuestContent> *p_finish_cond; // rcx
  data::LogicType finish_cond_comb; // edi
  char v82; // al
  unsigned __int64 v83; // rax
  char *v84; // rsi
  unsigned int *v85; // rax
  int *v86; // rdx
  int v87; // ecx
  char v88; // al
  common::milog::MiLogStream *v89; // rax
  int v90; // edx
  int32_t order; // ecx
  __int64 v92; // rsi
  __int64 v93; // rdx
  int v94; // r15d
  common::milog::MiLogStream *v95; // rax
  common::milog::MiLogStream *v96; // rdx
  unsigned __int64 v97; // rax
  unsigned __int64 v98; // rax
  unsigned __int64 v99; // rdx
  int v100; // edx
  common::milog::MiLogStream *v101; // rax
  std::vector<unsigned int>::size_type v103; // [rsp+0h] [rbp-790h]
  std::initializer_list<unsigned int> __l; // [rsp+10h] [rbp-780h]
  bool is_abandon; // [rsp+36h] [rbp-75Ah]
  bool has_rewind; // [rsp+37h] [rbp-759h]
  data::QuestExcelConfigMap *__for_range; // [rsp+40h] [rbp-750h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::reference __in; // [rsp+48h] [rbp-748h]
  uint32_t *quest_id; // [rsp+50h] [rbp-740h]
  std::tuple_element<1,std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_config; // [rsp+58h] [rbp-738h]
  std::vector<data::QuestCond> *__for_range_0; // [rsp+60h] [rbp-730h]
  __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> >::reference quest_cond; // [rsp+68h] [rbp-728h]
  std::vector<unsigned int> *__for_range_1; // [rsp+70h] [rbp-720h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+78h] [rbp-718h]
  std::vector<data::QuestCond> *__for_range_2; // [rsp+80h] [rbp-710h]
  const data::QuestCond *quest_cond_0; // [rsp+88h] [rbp-708h]
  const std::vector<unsigned int> *__for_range_3; // [rsp+90h] [rbp-700h]
  data::QuestExcelConfig *child_quest_config_ptr; // [rsp+98h] [rbp-6F8h]
  char v121[1776]; // [rsp+A0h] [rbp-6F0h] BYREF

  v3 = (unsigned __int64)v121;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1728LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "35 32 1 9 <unknown> 48 1 9 <unknown> 64 4 12 item_id:1068 80 4 19 child_quest_id:1120 96 8 15 __"
                        "for_begin:992 128 8 13 __for_end:992 160 8 16 __for_begin:1006 192 8 14 __for_end:1006 224 8 16 "
                        "__for_begin:1068 256 8 14 __for_end:1068 288 8 9 <unknown> 320 8 9 <unknown> 352 8 16 __for_begi"
                        "n:1099 384 8 14 __for_end:1099 416 8 16 __for_begin:1120 448 8 14 __for_end:1120 480 24 27 child"
                        "_quest_config_vec:1118 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknow"
                        "n> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknow"
                        "n> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <un"
                        "known> 1440 32 9 <unknown> 1504 32 9 <unknown> 1568 48 21 required_npc_set:1054 1648 48 21 white"
                        "_quest_list:1081";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkQuestExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -218959360;
  v5[536862732] = -218959360;
  v5[536862733] = -218959360;
  v5[536862734] = -218959360;
  v5[536862735] = -234881024;
  v5[536862736] = -218959118;
  v5[536862738] = -218959118;
  v5[536862740] = -218959118;
  v5[536862742] = -218959118;
  v5[536862744] = -218959118;
  v5[536862746] = -218959118;
  v5[536862748] = -218959118;
  v5[536862750] = -218959118;
  v5[536862752] = -218959118;
  v5[536862754] = -218959118;
  v5[536862756] = -218959118;
  v5[536862758] = -218959118;
  v5[536862760] = -218959118;
  v5[536862762] = -218959118;
  v5[536862764] = -218959118;
  v5[536862766] = -218959118;
  v5[536862768] = -218959118;
  v5[536862770] = -219021312;
  v5[536862771] = 62194;
  v5[536862773] = -202116109;
  __for_range = &this->quest_excel_config_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::QuestExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::iterator *)(v3 + 128) = std::unordered_map<unsigned int,data::QuestExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 128);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::QuestExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v3 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v3 + 128)) )
      break;
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false> *const)(v3 + 96));
    quest_id = std::get<0ul,unsigned int const,data::QuestExcelConfig>(__in);
    quest_config = std::get<1ul,unsigned int const,data::QuestExcelConfig>(__in);
    __for_range_0 = &quest_config->accept_cond;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v6);
    *(std::vector<data::QuestCond>::iterator *)(v3 + 160) = std::vector<data::QuestCond>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 192, v6);
    *(std::vector<data::QuestCond>::iterator *)(v3 + 192) = std::vector<data::QuestCond>::end(__for_range_0);
    while ( 1 )
    {
      if ( !__gnu_cxx::operator!=<data::QuestCond *,std::vector<data::QuestCond>>(
              (const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *)(v3 + 160),
              (const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *)(v3 + 192)) )
      {
        v9 = 1;
        goto LABEL_24;
      }
      quest_cond = __gnu_cxx::__normal_iterator<data::QuestCond *,std::vector<data::QuestCond>>::operator*((const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *const)(v3 + 160));
      if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(quest_id);
      }
      if ( (unsigned int)QuestExcelConfigMgr::checkQuestCond(this, txt_config_mgr, quest_cond, *quest_id) )
        break;
      __gnu_cxx::__normal_iterator<data::QuestCond *,std::vector<data::QuestCond>>::operator++((__gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *const)(v3 + 160));
    }
    *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 64 + 127) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 544, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 544),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkQuestExcelConfig",
      1010);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 544),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
           v7,
           (const char (*)[46])"check quest accept condition fails, quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, quest_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 544));
    *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v9 = 0;
LABEL_24:
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v9 == 1 )
    {
      if ( QuestExcelConfigMgr::checkQuestContentConfig(this, txt_config_mgr, &quest_config->finish_cond) )
      {
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExcelConfig",
          1016);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 608),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v11, (const char (*)[11])"quest_id: ");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, quest_id);
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v13, (const char (*)[29])byte_1A45AAE0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 608));
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else if ( QuestExcelConfigMgr::checkQuestContentConfig(this, txt_config_mgr, &quest_config->fail_cond) )
      {
        *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 672) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 672, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 672),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExcelConfig",
          1021);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 672),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])"quest_id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, quest_id);
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v16, (const char (*)[29])byte_1A45AB20);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 672));
        *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else if ( QuestExcelConfigMgr::checkQuestExecConfig(this, txt_config_mgr, quest_config, &quest_config->begin_exec) )
      {
        *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 63) & 7) >= *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 736, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 736),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExcelConfig",
          1026);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 736),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])"quest_id: ");
        v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, quest_id);
        common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
          v19,
          (const char (*)[40])"checkQuestExecConfig finish_exec failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 736));
        *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else if ( QuestExcelConfigMgr::checkQuestExecConfig(
                  this,
                  txt_config_mgr,
                  quest_config,
                  &quest_config->finish_exec) )
      {
        *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 800) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 127) & 7) >= *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 800, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 800),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExcelConfig",
          1031);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 800),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v20, (const char (*)[11])"quest_id: ");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, quest_id);
        common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
          v22,
          (const char (*)[40])"checkQuestExecConfig finish_exec failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 800));
        *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else if ( QuestExcelConfigMgr::checkQuestExecConfig(this, txt_config_mgr, quest_config, &quest_config->fail_exec) )
      {
        *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 864) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 864, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 864),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExcelConfig",
          1036);
        v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 864),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])"quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, quest_id);
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
          v25,
          (const char (*)[38])"checkQuestExecConfig fail_exec failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 864));
        *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else if ( QuestExcelConfigMgr::checkExecRollback(this, quest_config) )
      {
        *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 928) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 928, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 928),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExcelConfig",
          1042);
        v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 928),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v27 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v26, (const char (*)[10])"quest_id:");
        v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, quest_id);
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v28, (const char (*)[25])byte_1A45AC60);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 928));
        *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else if ( !std::vector<unsigned int>::empty(&quest_config->exclusive_npc_list)
             && !std::vector<unsigned int>::empty(&quest_config->shared_npc_list) )
      {
        *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 992) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 63) & 7) >= *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 992, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 992),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExcelConfig",
          1049);
        v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 992),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v31 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v30, (const char (*)[10])"quest_id:");
        v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, quest_id);
        common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v32, (const char (*)[40])byte_1A45ACA0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 992));
        *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v10 = 0;
      }
      else
      {
        v33 = ((v3 + 1568) >> 3) + 2147450880;
        *(_DWORD *)v33 = 0;
        *(_WORD *)(v33 + 4) = 0;
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 1568));
        M_current = std::vector<unsigned int>::end(&quest_config->exclusive_npc_list)._M_current;
        v35._M_current = std::vector<unsigned int>::begin(&quest_config->exclusive_npc_list)._M_current;
        std::set<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
          (std::set<unsigned int> *const)(v3 + 1568),
          v35,
          (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current);
        v36 = std::vector<unsigned int>::end(&quest_config->shared_npc_list)._M_current;
        v37 = std::vector<unsigned int>::begin(&quest_config->shared_npc_list)._M_current;
        std::set<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
          (std::set<unsigned int> *const)(v3 + 1568),
          (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v37,
          (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v36);
        v38 = std::set<unsigned int>::size((const std::set<unsigned int> *const)(v3 + 1568));
        v103 = std::vector<unsigned int>::size(&quest_config->exclusive_npc_list);
        if ( v38 == v103 + std::vector<unsigned int>::size(&quest_config->shared_npc_list) )
        {
          v43 = std::vector<unsigned int>::size(&quest_config->quest_item_id_list);
          if ( v43 == std::vector<unsigned int>::size(&quest_config->quest_item_num_list) )
          {
            __for_range_1 = &quest_config->quest_item_id_list;
            *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 224, v37);
            *(std::vector<unsigned int>::iterator *)(v3 + 224) = std::vector<unsigned int>::begin(__for_range_1);
            *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v3 + 256, v37);
            *(std::vector<unsigned int>::iterator *)(v3 + 256) = std::vector<unsigned int>::end(__for_range_1);
            while ( 1 )
            {
              v47 = (const char *)(v3 + 256);
              if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 224),
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 256)) )
              {
                v57 = 1;
                goto LABEL_82;
              }
              *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
              v48 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 224));
              v49 = (int *)v48;
              if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v48 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v48);
              }
              v50 = *v49;
              v51 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
              if ( v51 != 0 && v51 <= 3 )
              {
                LOBYTE(v47) = v51 != 0;
                __asan_report_store4(v3 + 64, v47);
              }
              *(_DWORD *)(v3 + 64) = v50;
              if ( !TxtConfigMgr::isItemAllowedByOutputControl(
                      txt_config_mgr,
                      *(_DWORD *)(v3 + 64),
                      ITEM_LIMIT_QUEST_ADD_ITEM) )
                break;
              __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 224));
            }
            *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1184) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1184, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1184),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExcelConfig",
              1072);
            v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1184),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v53 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v52, (const char (*)[10])"quest_id:");
            v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, quest_id);
            v55 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                    v54,
                    (const char (*)[10])byte_1A45ADC0);
            v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v55,
                    (const unsigned int *)(v3 + 64));
            v47 = byte_1A45AE00;
            common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v56, (const char (*)[8])byte_1A45AE00);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1184));
            *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v57 = 0;
LABEL_82:
            *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
            if ( v57 == 1 )
            {
              v58 = ((v3 + 1648) >> 3) + 2147450880;
              *(_DWORD *)v58 = 0;
              *(_WORD *)(v58 + 4) = 0;
              *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1248) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 1248, v47);
              *(_DWORD *)(v3 + 1248) = 2500401;
              v59 = (((_BYTE)v3 - 64 + 36) & 7u) + 3;
              if ( *(_BYTE *)(((v3 + 1252) >> 3) + 0x7FFF8000) != 0
                && (char)(((v3 - 64 + 36) & 7) + 3) >= *(_BYTE *)(((v3 + 1252) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store4(v3 + 1252, v59);
              }
              *(_DWORD *)(v3 + 1252) = 2500001;
              if ( *(_BYTE *)(((v3 + 1256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1256) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 1256, v59);
              *(_DWORD *)(v3 + 1256) = 2501001;
              v60 = (((_BYTE)v3 - 64 + 44) & 7u) + 3;
              if ( *(_BYTE *)(((v3 + 1260) >> 3) + 0x7FFF8000) != 0
                && (char)(((v3 - 64 + 44) & 7) + 3) >= *(_BYTE *)(((v3 + 1260) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store4(v3 + 1260, v60);
              }
              *(_DWORD *)(v3 + 1260) = 2501201;
              if ( *(_BYTE *)(((v3 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1264) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 1264, v60);
              *(_DWORD *)(v3 + 1264) = 46902;
              v61 = (((_BYTE)v3 - 64 + 52) & 7u) + 3;
              if ( *(_BYTE *)(((v3 + 1268) >> 3) + 0x7FFF8000) != 0
                && (char)(((v3 - 64 + 52) & 7) + 3) >= *(_BYTE *)(((v3 + 1268) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store4(v3 + 1268, v61);
              }
              *(_DWORD *)(v3 + 1268) = 2500201;
              if ( *(_BYTE *)(((v3 + 1272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1272) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v3 + 1272, v61);
              *(_DWORD *)(v3 + 1272) = 2500601;
              if ( *(_BYTE *)(((v3 + 1276) >> 3) + 0x7FFF8000) != 0
                && (char)(((v3 - 64 + 60) & 7) + 3) >= *(_BYTE *)(((v3 + 1276) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store4(v3 + 1276, (((_BYTE)v3 - 64 + 60) & 7u) + 3);
              }
              *(_DWORD *)(v3 + 1276) = 2500801;
              __l._M_array = (std::initializer_list<unsigned int>::iterator)(v3 + 1248);
              __l._M_len = 8LL;
              *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 1;
              *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 1;
              std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)(v3 + 48));
              v62 = (char *)(v3 + 1248);
              std::set<unsigned int>::set(
                (std::set<unsigned int> *const)(v3 + 1648),
                __l,
                (const std::less<unsigned int> *)(v3 + 32),
                (const std::set<unsigned int>::allocator_type *)(v3 + 48));
              std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)(v3 + 48));
              *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
              *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = -117901064;
              *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 320, v62);
              *(std::set<unsigned int>::iterator *)(v3 + 320) = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v3 + 1648));
              *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v3 + 288, v62);
              *(std::set<unsigned int>::iterator *)(v3 + 288) = std::set<unsigned int>::find(
                                                                  (std::set<unsigned int> *const)(v3 + 1648),
                                                                  quest_id);
              v63 = std::operator!=(
                      (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 288),
                      (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 320));
              *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
              if ( v63 )
              {
                v64 = 0;
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3)
                                                                             + 0x7FFF8000) )
                {
                  __asan_report_load4(quest_id);
                }
                v65 = *quest_id;
                parent_quest_config_ptr = QuestExcelConfigMgr::findParentQuestConfigByChildId(this, v65);
                if ( parent_quest_config_ptr )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->active_mode >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->active_mode >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&parent_quest_config_ptr->active_mode);
                  }
                  if ( parent_quest_config_ptr->active_mode == PLAY_MODE_SINGLE )
                  {
                    if ( *(char *)(((unsigned __int64)&quest_config->is_mp_block >> 3) + 0x7FFF8000) < 0 )
                      __asan_report_load1(&quest_config->is_mp_block, v65, &quest_config->is_mp_block);
                    if ( quest_config->is_mp_block )
                    {
                      v64 = 0;
                    }
                    else
                    {
                      v69 = ((_BYTE)quest_config - 66) & 7;
                      v70 = (*(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v69 >= *(_BYTE *)(((unsigned __int64)&quest_config->is_rewind >> 3) + 0x7FFF8000));
                      if ( (_BYTE)v70 )
                        __asan_report_load1(&quest_config->is_rewind, v69, v70);
                      if ( quest_config->is_rewind )
                      {
                        v64 = 0;
                      }
                      else
                      {
                        v71 = ((_BYTE)quest_config - 68) & 7;
                        v72 = (*(_BYTE *)(((unsigned __int64)&quest_config->finish_parent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v71 >= *(_BYTE *)(((unsigned __int64)&quest_config->finish_parent >> 3) + 0x7FFF8000));
                        if ( (_BYTE)v72 )
                          __asan_report_load1(&quest_config->finish_parent, v71, v72);
                        if ( quest_config->finish_parent )
                          goto LABEL_131;
                        v71 = ((_BYTE)quest_config - 67) & 7;
                        v73 = (*(_BYTE *)(((unsigned __int64)&quest_config->fail_parent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v71 >= *(_BYTE *)(((unsigned __int64)&quest_config->fail_parent >> 3) + 0x7FFF8000));
                        if ( (_BYTE)v73 )
                          __asan_report_load1(&quest_config->fail_parent, v71, v73);
                        if ( !quest_config->fail_parent )
                        {
                          v64 = 0;
                        }
                        else
                        {
LABEL_131:
                          is_abandon = 0;
                          __for_range_2 = &quest_config->accept_cond;
                          *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
                          if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
                            __asan_report_store8(v3 + 352, v71);
                          *(std::vector<data::QuestCond>::iterator *)(v3 + 352) = std::vector<data::QuestCond>::begin(__for_range_2);
                          *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
                          if ( *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) )
                            __asan_report_store8(v3 + 384, v71);
                          *(std::vector<data::QuestCond>::iterator *)(v3 + 384) = std::vector<data::QuestCond>::end(__for_range_2);
                          while ( __gnu_cxx::operator!=<data::QuestCond *,std::vector<data::QuestCond>>(
                                    (const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *)(v3 + 352),
                                    (const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *)(v3 + 384)) )
                          {
                            quest_cond_0 = __gnu_cxx::__normal_iterator<data::QuestCond *,std::vector<data::QuestCond>>::operator*((const __gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *const)(v3 + 352));
                            if ( !std::vector<int>::size(&quest_cond_0->param) )
                              goto LABEL_142;
                            v74 = std::vector<int>::operator[](&quest_cond_0->param, 0LL);
                            v75 = v74;
                            if ( *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) != 0
                              && (char)(((unsigned __int8)v74 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v74 >> 3)
                                                                                    + 0x7FFF8000) )
                            {
                              __asan_report_load4(v74);
                            }
                            if ( *v75 == 99902 )
                              v76 = 1;
                            else
LABEL_142:
                              v76 = 0;
                            if ( v76 )
                            {
                              is_abandon = 1;
                              break;
                            }
                            __gnu_cxx::__normal_iterator<data::QuestCond *,std::vector<data::QuestCond>>::operator++((__gnu_cxx::__normal_iterator<data::QuestCond*,std::vector<data::QuestCond> > *const)(v3 + 352));
                          }
                          *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = -8;
                          *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = -8;
                          if ( is_abandon )
                          {
                            v64 = 0;
                          }
                          else
                          {
                            p_fail_cond = &quest_config->fail_cond;
                            if ( *(_BYTE *)(((unsigned __int64)&quest_config->fail_cond_comb >> 3) + 0x7FFF8000) != 0
                              && *(_BYTE *)(((unsigned __int64)&quest_config->fail_cond_comb >> 3) + 0x7FFF8000) <= 3 )
                            {
                              __asan_report_load4(&quest_config->fail_cond_comb);
                            }
                            fail_cond_comb = quest_config->fail_cond_comb;
                            if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
                              && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3)
                                                                                         + 0x7FFF8000) )
                            {
                              fail_cond_comb = (int)quest_id;
                              __asan_report_load4(quest_id);
                            }
                            v79 = *quest_id;
                            if ( QuestExcelConfigMgr::canFinishImmediately(this, v79, fail_cond_comb, p_fail_cond, 1, 0) )
                              goto LABEL_159;
                            p_finish_cond = &quest_config->finish_cond;
                            if ( *(_BYTE *)(((unsigned __int64)&quest_config->finish_cond_comb >> 3) + 0x7FFF8000) != 0
                              && *(_BYTE *)(((unsigned __int64)&quest_config->finish_cond_comb >> 3) + 0x7FFF8000) <= 3 )
                            {
                              __asan_report_load4(&quest_config->finish_cond_comb);
                            }
                            finish_cond_comb = quest_config->finish_cond_comb;
                            if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
                              && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3)
                                                                                         + 0x7FFF8000) )
                            {
                              finish_cond_comb = (int)quest_id;
                              __asan_report_load4(quest_id);
                            }
                            v79 = *quest_id;
                            if ( !QuestExcelConfigMgr::canFinishImmediately(
                                    this,
                                    v79,
                                    finish_cond_comb,
                                    p_finish_cond,
                                    1,
                                    0) )
                              v82 = 1;
                            else
LABEL_159:
                              v82 = 0;
                            if ( v82 )
                            {
                              v64 = 0;
                            }
                            else
                            {
                              v83 = ((v3 + 480) >> 3) + 2147450880;
                              *(_WORD *)v83 = 0;
                              *(_BYTE *)(v83 + 2) = 0;
                              std::vector<data::QuestExcelConfig const*>::vector((std::vector<const data::QuestExcelConfig*> *const)(v3 + 480));
                              has_rewind = 0;
                              __for_range_3 = &parent_quest_config_ptr->child_quest_list;
                              *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
                              if ( *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) )
                                __asan_report_store8(v3 + 416, v79);
                              *(std::vector<unsigned int>::const_iterator *)(v3 + 416) = std::vector<unsigned int>::begin(__for_range_3);
                              *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
                              if ( *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) )
                                __asan_report_store8(v3 + 448, v79);
                              *(std::vector<unsigned int>::const_iterator *)(v3 + 448) = std::vector<unsigned int>::end(__for_range_3);
                              while ( 1 )
                              {
                                v84 = (char *)(v3 + 448);
                                if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                                        (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 416),
                                        (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 448)) )
                                  goto LABEL_186;
                                *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
                                v85 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 416));
                                v86 = (int *)v85;
                                if ( *(_BYTE *)(((unsigned __int64)v85 >> 3) + 0x7FFF8000) != 0
                                  && (char)(((unsigned __int8)v85 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v85 >> 3)
                                                                                        + 0x7FFF8000) )
                                {
                                  __asan_report_load4(v85);
                                }
                                v87 = *v86;
                                v88 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
                                if ( v88 != 0 && v88 <= 3 )
                                {
                                  LOBYTE(v84) = v88 != 0;
                                  __asan_report_store4(v3 + 80, v84);
                                }
                                *(_DWORD *)(v3 + 80) = v87;
                                child_quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                                                           this,
                                                           *(unsigned int *)(v3 + 80));
                                if ( !child_quest_config_ptr )
                                  break;
                                if ( *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->order >> 3) + 0x7FFF8000) != 0
                                  && *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->order >> 3) + 0x7FFF8000) <= 3 )
                                {
                                  __asan_report_load4(&child_quest_config_ptr->order);
                                }
                                order = child_quest_config_ptr->order;
                                if ( *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) != 0
                                  && *(_BYTE *)(((unsigned __int64)&quest_config->order >> 3) + 0x7FFF8000) <= 3 )
                                {
                                  __asan_report_load4(&quest_config->order);
                                }
                                if ( order <= quest_config->order )
                                {
                                  v92 = ((_BYTE)child_quest_config_ptr - 66) & 7;
                                  v93 = (*(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->is_rewind >> 3)
                                                  + 0x7FFF8000) != 0) & (unsigned __int8)((char)v92 >= *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->is_rewind >> 3) + 0x7FFF8000));
                                  if ( (_BYTE)v93 )
                                    __asan_report_load1(&child_quest_config_ptr->is_rewind, v92, v93);
                                  if ( child_quest_config_ptr->is_rewind )
                                  {
                                    has_rewind = 1;
LABEL_186:
                                    v90 = 1;
                                    goto LABEL_187;
                                  }
                                }
                                __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 416));
                              }
                              *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v3 + 1376) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) != 0
                                && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v3 + 1376, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v3 + 1376),
                                &common::milog::MiLogDefault::default_log_obj_,
                                3u,
                                "./src/txt_data_manual/QuestExcelConfig.cpp",
                                "checkQuestExcelConfig",
                                1125);
                              v89 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                                      (common::milog::MiLogStream *const)(v3 + 1376),
                                      (const char (*)[39])"findQuestExcelConfig failed, quest_id:");
                              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                v89,
                                (const unsigned int *)(v3 + 80));
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1376));
                              *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = -117901064;
                              v2 = -1;
                              v90 = 0;
LABEL_187:
                              *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
                              *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = -8;
                              *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = -8;
                              if ( v90 == 1 )
                              {
                                if ( has_rewind )
                                {
                                  v94 = 1;
                                }
                                else
                                {
                                  *(_DWORD *)(((v3 + 1440) >> 3) + 0x7FFF8000) = 0;
                                  if ( *(char *)(((v3 + 1440) >> 3) + 0x7FFF8000) < 0
                                    || *(_BYTE *)(((v3 + 1471) >> 3) + 0x7FFF8000) != 0
                                    && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 1471) >> 3) + 0x7FFF8000) )
                                  {
                                    __asan_report_store_n(v3 + 1440, 32LL);
                                  }
                                  common::milog::MiLogStream::create(
                                    (common::milog::MiLogStream *)(v3 + 1440),
                                    &common::milog::MiLogDefault::default_log_obj_,
                                    4u,
                                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                                    "checkQuestExcelConfig",
                                    1138);
                                  v95 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                          (common::milog::MiLogStream *const)(v3 + 1440),
                                          (const char (*)[16])"[CONFIG_ERROR] ");
                                  v96 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                          v95,
                                          (const char (*)[42])byte_1A45AEE0);
                                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v96, quest_id);
                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1440));
                                  *(_DWORD *)(((v3 + 1440) >> 3) + 0x7FFF8000) = -117901064;
                                  v2 = -1;
                                  v94 = 0;
                                }
                              }
                              else
                              {
                                v94 = 0;
                              }
                              std::vector<data::QuestExcelConfig const*>::~vector((std::vector<const data::QuestExcelConfig*> *const)(v3 + 480));
                              v64 = v94 == 0;
                            }
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v64 = 0;
                  }
                }
                else
                {
                  *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 1312) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 64 + 127) & 7) >= *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 1312, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 1312),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkQuestExcelConfig",
                    1089);
                  v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 1312),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v67 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                          v66,
                          (const char (*)[10])"quest_id:");
                  v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, quest_id);
                  common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v68,
                    (const char (*)[24])" parent quest not exist");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1312));
                  *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = -117901064;
                  v64 = 0;
                }
              }
              std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 1648));
              v97 = ((v3 + 1648) >> 3) + 2147450880;
              *(_DWORD *)v97 = -117901064;
              *(_WORD *)(v97 + 4) = -1800;
              v98 = ((v3 + 480) >> 3) + 2147450880;
              *(_WORD *)v98 = -1800;
              *(_BYTE *)(v98 + 2) = -8;
              v42 = !v64;
            }
            else
            {
              v42 = 0;
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1120, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1120),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExcelConfig",
              1065);
            v44 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1120),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v45 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v44, (const char (*)[10])"quest_id:");
            v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, quest_id);
            common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(v46, (const char (*)[48])byte_1A45AD60);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1120));
            *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v42 = 0;
          }
        }
        else
        {
          *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1056) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 64 + 127) & 7) >= *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1056, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1056),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExcelConfig",
            1059);
          v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1056),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v40 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v39, (const char (*)[10])"quest_id:");
          v41 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, quest_id);
          common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v41, (const char (*)[46])byte_1A45AD00);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1056));
          *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v42 = 0;
        }
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 1568));
        v10 = v42;
      }
    }
    else
    {
      v10 = 0;
    }
    v99 = ((v3 + 1568) >> 3) + 2147450880;
    *(_DWORD *)v99 = -117901064;
    *(_WORD *)(v99 + 4) = -1800;
    if ( !v10 )
    {
      v100 = 0;
      goto LABEL_201;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false> *const)(v3 + 96));
  }
  v100 = 1;
LABEL_201:
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v100 == 1 )
  {
    if ( QuestExcelConfigMgr::checkQuestDependency(
           this,
           txt_config_mgr,
           &this->main_quest_excel_config_map,
           &this->quest_excel_config_map) )
    {
      *(_DWORD *)(((v3 + 1504) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1504) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1535) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 63) & 7) >= *(_BYTE *)(((v3 + 1535) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1504, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1504),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkQuestExcelConfig",
        1152);
      v101 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v3 + 1504),
               (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        v101,
        (const char (*)[26])"checkQuestDependency fail");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1504));
      v2 = -1;
    }
    else
    {
      v2 = 0;
    }
  }
  if ( v121 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80B4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 188) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF80C0) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80C8) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80D0) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1728LL, v121);
  }
  return v2;
};

// Line 1160: range 000000000EEFEBDA-000000000EEFFFC6
int32_t __cdecl QuestExcelConfigMgr::testAndcheckQuestDependency(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::MainQuestExcelConfigMap *p_main_quest_excel_config_map; // rsi
  __int64 v6; // rsi
  std::vector<data::QuestContent>::value_type *v7; // rsi
  _DWORD *v8; // rax
  unsigned __int64 v9; // rax
  std::vector<data::QuestExec>::value_type *v10; // rax
  unsigned __int64 v11; // rax
  data::QuestExcelConfig *v12; // rax
  data::QuestExcelConfig *v13; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>,bool> v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  _BOOL4 v17; // edx
  __int64 v18; // rsi
  _DWORD *v19; // rax
  std::vector<data::QuestContent>::value_type *v20; // rax
  _DWORD *v21; // rax
  data::QuestExcelConfig *v22; // rax
  data::QuestExcelConfig *v23; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>,bool> v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  int v27; // r14d
  unsigned __int64 v28; // rax
  data::MainQuestExcelConfig *v29; // rax
  data::MainQuestExcelConfig *v30; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>,bool> v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // r14d
  unsigned __int64 v35; // rax
  int __l; // [rsp+0h] [rbp-B00h]
  int32_t v38; // [rsp+1Ch] [rbp-AE4h]
  char v40[2768]; // [rsp+30h] [rbp-AD0h] BYREF

  v2 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2720LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 32 1 9 <unknown> 48 4 6 p:1165 64 4 7 q1:1166 80 4 7 q2:1167 96 8 9 <unknown> 128 8 9 <unknow"
                        "n> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 40 9 exec:118"
                        "1 496 56 26 temp_quest_config_map:1161 592 56 37 temp_main_quest_excel_config_map:1162 688 128 9"
                        " cond:1174 848 128 9 cond:1198 1008 200 18 parent_config:1211 1280 592 11 config:1170 2000 592 11 config:1194";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::testAndcheckQuestDependency;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556927;
  v4[536862722] = -234556924;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959360;
  v4[536862735] = 62194;
  v4[536862737] = -218959360;
  v4[536862738] = 62194;
  v4[536862740] = -218959360;
  v4[536862741] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862750] = -219021312;
  v4[536862751] = 62194;
  v4[536862757] = -234881024;
  v4[536862758] = -218959118;
  v4[536862759] = -218959118;
  v4[536862778] = -219021312;
  v4[536862779] = -218959118;
  v4[536862780] = -218959118;
  v4[536862781] = -218959118;
  v4[536862782] = 62194;
  v4[536862801] = -202116109;
  v4[536862802] = -202116109;
  v4[536862803] = -202116109;
  v4[536862804] = -202116109;
  std::unordered_map<unsigned int,data::QuestExcelConfig>::unordered_map(
    (std::unordered_map<unsigned int,data::QuestExcelConfig> *const)(v2 + 496),
    &this->quest_excel_config_map);
  p_main_quest_excel_config_map = &this->main_quest_excel_config_map;
  std::unordered_map<unsigned int,data::MainQuestExcelConfig>::unordered_map(
    (std::unordered_map<unsigned int,data::MainQuestExcelConfig> *const)(v2 + 592),
    &this->main_quest_excel_config_map);
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, p_main_quest_excel_config_map);
  *(_DWORD *)(v2 + 48) = 1;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 64, p_main_quest_excel_config_map);
  *(_DWORD *)(v2 + 64) = 10;
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 80, p_main_quest_excel_config_map);
  *(_DWORD *)(v2 + 80) = 11;
  data::QuestExcelConfig::QuestExcelConfig((data::QuestExcelConfig *const)(v2 + 1280));
  if ( *(_BYTE *)(((v2 + 1288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1288) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 1288, p_main_quest_excel_config_map);
  *(_DWORD *)(v2 + 1288) = 10;
  v6 = (((_BYTE)v2 - 96 + 108) & 7u) + 3;
  if ( *(_BYTE *)(((v2 + 1292) >> 3) + 0x7FFF8000) != 0
    && (char)(((v2 - 96 + 108) & 7) + 3) >= *(_BYTE *)(((v2 + 1292) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v2 + 1292, v6);
  }
  *(_DWORD *)(v2 + 1292) = 1;
  data::QuestContent::QuestContent((data::QuestContent *const)(v2 + 688));
  if ( *(_BYTE *)(((v2 + 696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 696) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 696, v6);
  *(_DWORD *)(v2 + 696) = 136;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 96, v6);
  *(_DWORD *)(v2 + 96) = 11;
  if ( *(_BYTE *)(((v2 + 100) >> 3) + 0x7FFF8000) != 0
    && (char)(((v2 + 100) & 7) + 3) >= *(_BYTE *)(((v2 + 100) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v2 + 100, (((_BYTE)v2 + 100) & 7u) + 3);
  }
  *(_DWORD *)(v2 + 100) = 3;
  std::vector<int>::operator=(
    (std::vector<int> *const)(v2 + 704),
    (std::initializer_list<int>)__PAIR128__(2LL, v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 760) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 760, v2 + 96);
  *(_DWORD *)(v2 + 760) = 1;
  v7 = std::move<data::QuestContent &>((data::QuestContent *)(v2 + 688));
  std::vector<data::QuestContent>::push_back((std::vector<data::QuestContent> *const)(v2 + 1384), v7);
  data::QuestContent::~QuestContent((data::QuestContent *const)(v2 + 688));
  v8 = (_DWORD *)(((v2 + 688) >> 3) + 2147450880);
  *v8 = -117901064;
  v8[1] = -117901064;
  v8[2] = -117901064;
  v8[3] = -117901064;
  v9 = ((v2 + 416) >> 3) + 2147450880;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 0;
  data::QuestExec::QuestExec((data::QuestExec *const)(v2 + 416));
  if ( *(_BYTE *)(((v2 + 424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 424) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 424, v7);
  *(_DWORD *)(v2 + 424) = 14;
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "0",
    (const std::allocator<char> *)(v2 + 32));
  std::vector<std::string>::push_back(
    (std::vector<std::string> *const)(v2 + 432),
    (std::vector<std::string>::value_type *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  v10 = std::move<data::QuestExec &>((data::QuestExec *)(v2 + 416));
  std::vector<data::QuestExec>::push_back((std::vector<data::QuestExec> *const)(v2 + 1544), v10);
  data::QuestExec::~QuestExec((data::QuestExec *const)(v2 + 416));
  v11 = ((v2 + 416) >> 3) + 2147450880;
  *(_DWORD *)v11 = -117901064;
  *(_BYTE *)(v11 + 4) = -8;
  v12 = std::move<data::QuestExcelConfig &>((data::QuestExcelConfig *)(v2 + 1280));
  v14 = std::unordered_map<unsigned int,data::QuestExcelConfig>::emplace<unsigned int const&,data::QuestExcelConfig>(
          (std::unordered_map<unsigned int,data::QuestExcelConfig> *const)(v2 + 496),
          (const unsigned int *)(v2 + 64),
          v12,
          (const unsigned int *)(v2 + 64),
          v13);
  if ( !v14.second )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "testAndcheckQuestDependency",
      1188);
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v2 + 224),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v16 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v15,
            (const char (*)[20])"duplicate quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    v38 = -1;
    __l = 0;
  }
  else
  {
    __l = 1;
  }
  data::QuestExcelConfig::~QuestExcelConfig((data::QuestExcelConfig *const)(v2 + 1280));
  __asan_poison_stack_memory(v2 + 1280, 592LL);
  if ( __l == 1 )
  {
    __asan_unpoison_stack_memory(v2 + 2000, 592LL);
    data::QuestExcelConfig::QuestExcelConfig((data::QuestExcelConfig *const)(v2 + 2000));
    if ( *(_BYTE *)(((v2 + 2008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 2008, 592LL);
    *(_DWORD *)(v2 + 2008) = 11;
    v18 = (((_BYTE)v2 - 96 + 60) & 7u) + 3;
    if ( *(_BYTE *)(((v2 + 2012) >> 3) + 0x7FFF8000) != 0
      && (char)(((v2 - 96 + 60) & 7) + 3) >= *(_BYTE *)(((v2 + 2012) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v2 + 2012, v18);
    }
    *(_DWORD *)(v2 + 2012) = 1;
    v19 = (_DWORD *)(((v2 + 848) >> 3) + 2147450880);
    *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    v19[3] = 0;
    data::QuestContent::QuestContent((data::QuestContent *const)(v2 + 848));
    if ( *(_BYTE *)(((v2 + 856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 856, v18);
    *(_DWORD *)(v2 + 856) = 136;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 128, v18);
    *(_DWORD *)(v2 + 128) = 10;
    if ( *(_BYTE *)(((v2 + 132) >> 3) + 0x7FFF8000) != 0
      && (char)(((v2 - 124) & 7) + 3) >= *(_BYTE *)(((v2 + 132) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v2 + 132, (((_BYTE)v2 - 124) & 7u) + 3);
    }
    *(_DWORD *)(v2 + 132) = 1;
    std::vector<int>::operator=(
      (std::vector<int> *const)(v2 + 864),
      (std::initializer_list<int>)__PAIR128__(2LL, v2 + 128));
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    if ( *(_BYTE *)(((v2 + 920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v2 + 920, v2 + 128);
    *(_DWORD *)(v2 + 920) = 1;
    v20 = std::move<data::QuestContent &>((data::QuestContent *)(v2 + 848));
    std::vector<data::QuestContent>::push_back((std::vector<data::QuestContent> *const)(v2 + 2072), v20);
    data::QuestContent::~QuestContent((data::QuestContent *const)(v2 + 848));
    v21 = (_DWORD *)(((v2 + 848) >> 3) + 2147450880);
    *v21 = -117901064;
    v21[1] = -117901064;
    v21[2] = -117901064;
    v21[3] = -117901064;
    v22 = std::move<data::QuestExcelConfig &>((data::QuestExcelConfig *)(v2 + 2000));
    v24 = std::unordered_map<unsigned int,data::QuestExcelConfig>::emplace<unsigned int const&,data::QuestExcelConfig>(
            (std::unordered_map<unsigned int,data::QuestExcelConfig> *const)(v2 + 496),
            (const unsigned int *)(v2 + 80),
            v22,
            (const unsigned int *)(v2 + 80),
            v23);
    if ( !v24.second )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "testAndcheckQuestDependency",
        1206);
      v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v26 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v25,
              (const char (*)[20])"duplicate quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v2 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      v38 = -1;
      v27 = 0;
    }
    else
    {
      v27 = 1;
    }
    data::QuestExcelConfig::~QuestExcelConfig((data::QuestExcelConfig *const)(v2 + 2000));
    __asan_poison_stack_memory(v2 + 2000, 592LL);
    if ( v27 == 1 )
    {
      v28 = ((v2 + 1008) >> 3) + 2147450880;
      *(_DWORD *)v28 = 0;
      *(_DWORD *)(v28 + 4) = 0;
      *(_DWORD *)(v28 + 8) = 0;
      *(_DWORD *)(v28 + 12) = 0;
      *(_DWORD *)(v28 + 16) = 0;
      *(_DWORD *)(v28 + 20) = 0;
      *(_BYTE *)(v28 + 24) = 0;
      data::MainQuestExcelConfig::MainQuestExcelConfig((data::MainQuestExcelConfig *const)(v2 + 1008));
      if ( *(_BYTE *)(((v2 + 1016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1016) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1016, 592LL);
      *(_DWORD *)(v2 + 1016) = 1;
      std::vector<unsigned int>::push_back(
        (std::vector<unsigned int> *const)(v2 + 1080),
        (const std::vector<unsigned int>::value_type *)(v2 + 64));
      std::vector<unsigned int>::push_back(
        (std::vector<unsigned int> *const)(v2 + 1080),
        (const std::vector<unsigned int>::value_type *)(v2 + 80));
      v29 = std::move<data::MainQuestExcelConfig &>((data::MainQuestExcelConfig *)(v2 + 1008));
      v31 = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::emplace<unsigned int const&,data::MainQuestExcelConfig>(
              (std::unordered_map<unsigned int,data::MainQuestExcelConfig> *const)(v2 + 592),
              (const unsigned int *)(v2 + 48),
              v29,
              (const unsigned int *)(v2 + 48),
              v30);
      if ( !v31.second )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "testAndcheckQuestDependency",
          1217);
        v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 352),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v33 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                v32,
                (const char (*)[27])"duplicate parent_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        v38 = -1;
        v34 = 0;
      }
      else
      {
        v34 = 1;
      }
      data::MainQuestExcelConfig::~MainQuestExcelConfig((data::MainQuestExcelConfig *const)(v2 + 1008));
      v17 = v34 == 1;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = 0;
  }
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
  v35 = ((v2 + 1008) >> 3) + 2147450880;
  *(_DWORD *)v35 = -117901064;
  *(_DWORD *)(v35 + 4) = -117901064;
  *(_DWORD *)(v35 + 8) = -117901064;
  *(_DWORD *)(v35 + 12) = -117901064;
  *(_DWORD *)(v35 + 16) = -117901064;
  *(_DWORD *)(v35 + 20) = -117901064;
  *(_BYTE *)(v35 + 24) = -8;
  if ( v17 )
    v38 = QuestExcelConfigMgr::checkQuestDependency(
            this,
            txt_config_mgr,
            (const data::MainQuestExcelConfigMap *)(v2 + 592),
            (const data::QuestExcelConfigMap *)(v2 + 496));
  std::unordered_map<unsigned int,data::MainQuestExcelConfig>::~unordered_map((std::unordered_map<unsigned int,data::MainQuestExcelConfig> *const)(v2 + 592));
  std::unordered_map<unsigned int,data::QuestExcelConfig>::~unordered_map((std::unordered_map<unsigned int,data::QuestExcelConfig> *const)(v2 + 496));
  if ( v40 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF814C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862742) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450960 - (((_DWORD)v4 + 2147450968) & 0xFFFFFFF8) + 260) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2720LL, v40);
  }
  return v38;
};

// Line 1226: range 000000000EEFFFC8-000000000EF01628
__int64 __fastcall QuestExcelConfigMgr::checkQuestCycle(
        const QuestExcelConfigMgr *const this,
        uint32_t rollback_quest_id,
        const data::QuestExcelConfig *config,
        data::QuestState quest_state)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  __int64 v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  char *v13; // rsi
  uint32_t *p_sub_id; // rdx
  bool v15; // al
  unsigned __int64 v16; // rax
  __int64 v17; // rsi
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  char *v21; // rsi
  unsigned int *v22; // rax
  int *v23; // rdx
  int v24; // ecx
  char v25; // al
  common::milog::MiLogStream *v26; // rax
  int v27; // edx
  int32_t order; // ecx
  int32_t v29; // ecx
  char *v30; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v31; // rax
  int *v32; // rdx
  int v33; // ecx
  char v34; // al
  common::milog::MiLogStream *v35; // rax
  int v36; // edx
  const std::vector<data::QuestContent> *p_finish_cond; // rdi
  data::LogicType finish_cond_comb; // edx
  const std::vector<data::QuestContent> *p_fail_cond; // rdi
  data::LogicType fail_cond_comb; // edx
  char v41; // al
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  const std::vector<data::QuestContent> *p_finish_cond_comb; // rdi
  data::LogicType v48; // edx
  char v49; // al
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  unsigned int v56; // [rsp+14h] [rbp-3ECh]
  bool has_cycle; // [rsp+3Fh] [rbp-3C1h]
  const data::QuestExcelConfig *roll_quest_config_ptr; // [rsp+40h] [rbp-3C0h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+48h] [rbp-3B8h]
  const std::vector<unsigned int> *__for_range; // [rsp+50h] [rbp-3B0h]
  const data::QuestExcelConfig *child_quest_config_ptr; // [rsp+58h] [rbp-3A8h]
  std::vector<unsigned int> *__for_range_0; // [rsp+60h] [rbp-3A0h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+68h] [rbp-398h]
  char v67[912]; // [rsp+70h] [rbp-390h] BYREF

  v4 = (unsigned __int64)v67;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(864LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "20 32 1 9 <unknown> 48 1 9 <unknown> 64 4 19 child_quest_id:1248 80 4 14 quest_id_:1264 96 4 22 "
                        "rollback_quest_id:1225 112 8 9 <unknown> 144 8 9 <unknown> 176 8 9 <unknown> 208 8 16 __for_begi"
                        "n:1248 240 8 14 __for_end:1248 272 8 16 __for_begin:1264 304 8 14 __for_end:1264 336 24 17 quest"
                        "_id_vec:1240 400 32 9 <unknown> 464 32 9 <unknown> 528 32 9 <unknown> 592 32 9 <unknown> 656 32 "
                        "9 <unknown> 720 32 9 <unknown> 784 48 15 white_list:1234";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkQuestCycle;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753535;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862724] = -234881024;
  v6[536862725] = 62194;
  v6[536862725] = -234881024;
  v6[536862726] = 62194;
  v6[536862726] = -234881024;
  v6[536862727] = 62194;
  v6[536862727] = -234881024;
  v6[536862728] = 62194;
  v6[536862728] = -234881024;
  v6[536862729] = 62194;
  v6[536862729] = -234881024;
  v6[536862730] = 62194;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862733] = -219021312;
  v6[536862734] = 62194;
  v6[536862735] = -219021312;
  v6[536862736] = 62194;
  v6[536862737] = -219021312;
  v6[536862738] = 62194;
  v6[536862739] = -219021312;
  v6[536862740] = 62194;
  v6[536862741] = -219021312;
  v6[536862742] = 62194;
  v6[536862743] = -219021312;
  v6[536862744] = 62194;
  v6[536862746] = -202116109;
  *(_DWORD *)(v4 + 96) = rollback_quest_id;
  v7 = *(unsigned int *)(v4 + 96);
  roll_quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, v7);
  if ( roll_quest_config_ptr )
  {
    if ( *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 112, v7);
    *(_DWORD *)(v4 + 112) = 1913604;
    if ( *(_BYTE *)(((v4 + 116) >> 3) + 0x7FFF8000) != 0
      && (char)(((v4 + 116) & 7) + 3) >= *(_BYTE *)(((v4 + 116) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v4 + 116, (((_BYTE)v4 + 116) & 7u) + 3);
    }
    *(_DWORD *)(v4 + 116) = 1914806;
    std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)(v4 + 48));
    v13 = (char *)(v4 + 112);
    std::set<unsigned int>::set(
      (std::set<unsigned int> *const)(v4 + 784),
      (std::initializer_list<unsigned int>)__PAIR128__(2LL, v4 + 112),
      (const std::less<unsigned int> *)(v4 + 32),
      (const std::set<unsigned int>::allocator_type *)(v4 + 48));
    std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)(v4 + 48));
    *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 176, v13);
    *(std::set<unsigned int>::iterator *)(v4 + 176) = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v4 + 784));
    *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = 0;
    p_sub_id = &config->sub_id;
    if ( *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 144, v13);
    *(std::set<unsigned int>::iterator *)(v4 + 144) = std::set<unsigned int>::find(
                                                        (std::set<unsigned int> *const)(v4 + 784),
                                                        p_sub_id);
    v15 = std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 144),
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 176));
    *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = -8;
    if ( v15 )
    {
      v56 = 0;
    }
    else
    {
      v16 = ((v4 + 336) >> 3) + 2147450880;
      *(_WORD *)v16 = 0;
      *(_BYTE *)(v16 + 2) = 0;
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 336));
      v17 = *(unsigned int *)(v4 + 96);
      parent_quest_config_ptr = QuestExcelConfigMgr::findParentQuestConfigByChildId(this, v17);
      if ( parent_quest_config_ptr )
      {
        __for_range = &parent_quest_config_ptr->child_quest_list;
        *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v4 + 208, v17);
        *(std::vector<unsigned int>::const_iterator *)(v4 + 208) = std::vector<unsigned int>::begin(__for_range);
        *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v4 + 240, v17);
        *(std::vector<unsigned int>::const_iterator *)(v4 + 240) = std::vector<unsigned int>::end(__for_range);
        while ( 1 )
        {
          v21 = (char *)(v4 + 240);
          if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 208),
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 240)) )
          {
            v27 = 1;
            goto LABEL_47;
          }
          *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 4;
          v22 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 208));
          v23 = (int *)v22;
          if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v22);
          }
          v24 = *v23;
          v25 = *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000);
          if ( v25 != 0 && v25 <= 3 )
          {
            LOBYTE(v21) = v25 != 0;
            __asan_report_store4(v4 + 64, v21);
          }
          *(_DWORD *)(v4 + 64) = v24;
          child_quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, *(unsigned int *)(v4 + 64));
          if ( !child_quest_config_ptr )
            break;
          if ( *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->order >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->order >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&child_quest_config_ptr->order);
          }
          order = child_quest_config_ptr->order;
          if ( *(_BYTE *)(((unsigned __int64)&config->order >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config->order >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config->order);
          }
          if ( order < config->order )
          {
            v29 = child_quest_config_ptr->order;
            if ( *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr->order >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr->order >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&roll_quest_config_ptr->order);
            }
            if ( v29 >= roll_quest_config_ptr->order )
              std::vector<unsigned int>::push_back(
                (std::vector<unsigned int> *const)(v4 + 336),
                (const std::vector<unsigned int>::value_type *)(v4 + 64));
          }
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 208));
        }
        *(_DWORD *)(((v4 + 528) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 528) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 559) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 + 47) & 7) >= *(_BYTE *)(((v4 + 559) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 528, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 528),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCycle",
          1253);
        v26 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                (common::milog::MiLogStream *const)(v4 + 528),
                (const char (*)[39])"findQuestExcelConfig failed, quest_id:");
        v21 = (char *)(v4 + 64);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 528));
        *(_DWORD *)(((v4 + 528) >> 3) + 0x7FFF8000) = -117901064;
        v56 = -1;
        v27 = 0;
LABEL_47:
        *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) = -8;
        if ( v27 == 1 )
        {
          has_cycle = 1;
          __for_range_0 = (std::vector<unsigned int> *)(v4 + 336);
          *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 272, v21);
          *(std::vector<unsigned int>::iterator *)(v4 + 272) = std::vector<unsigned int>::begin(__for_range_0);
          *(_BYTE *)(((v4 + 304) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v4 + 304) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 304, v21);
          *(std::vector<unsigned int>::iterator *)(v4 + 304) = std::vector<unsigned int>::end(__for_range_0);
          while ( 1 )
          {
            v30 = (char *)(v4 + 304);
            if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 272),
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 304)) )
              goto LABEL_69;
            *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 4;
            v31 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 272));
            v32 = (int *)v31;
            if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v31);
            }
            v33 = *v32;
            v34 = *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000);
            if ( v34 != 0 && v34 <= 3 )
            {
              LOBYTE(v30) = v34 != 0;
              __asan_report_store4(v4 + 80, v30);
            }
            *(_DWORD *)(v4 + 80) = v33;
            quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, *(unsigned int *)(v4 + 80));
            if ( !quest_config_ptr )
              break;
            p_finish_cond = &quest_config_ptr->finish_cond;
            if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->finish_cond_comb >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&quest_config_ptr->finish_cond_comb >> 3) + 0x7FFF8000) <= 3 )
            {
              p_finish_cond = (const std::vector<data::QuestContent> *)&quest_config_ptr->finish_cond_comb;
              __asan_report_load4(&quest_config_ptr->finish_cond_comb);
            }
            finish_cond_comb = quest_config_ptr->finish_cond_comb;
            if ( *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) <= 3 )
            {
              p_finish_cond = (const std::vector<data::QuestContent> *)(v4 + 80);
              __asan_report_load4(v4 + 80);
            }
            if ( !QuestExcelConfigMgr::canFinishImmediately(
                    this,
                    *(_DWORD *)(v4 + 80),
                    finish_cond_comb,
                    p_finish_cond,
                    0,
                    1) )
            {
              has_cycle = 0;
LABEL_69:
              v36 = 1;
              goto LABEL_70;
            }
            __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 272));
          }
          *(_DWORD *)(((v4 + 592) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 592) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 623) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 111) & 7) >= *(_BYTE *)(((v4 + 623) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 592, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 592),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestCycle",
            1269);
          v35 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  (common::milog::MiLogStream *const)(v4 + 592),
                  (const char (*)[39])"findQuestExcelConfig failed, quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 592));
          *(_DWORD *)(((v4 + 592) >> 3) + 0x7FFF8000) = -117901064;
          v56 = -1;
          v36 = 0;
LABEL_70:
          *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v4 + 304) >> 3) + 0x7FFF8000) = -8;
          if ( v36 == 1 )
          {
            if ( !has_cycle || quest_state != QUEST_STATE_FAILED )
              goto LABEL_79;
            p_fail_cond = &config->fail_cond;
            if ( *(_BYTE *)(((unsigned __int64)&config->fail_cond_comb >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config->fail_cond_comb >> 3) + 0x7FFF8000) <= 3 )
            {
              p_fail_cond = (const std::vector<data::QuestContent> *)&config->fail_cond_comb;
              __asan_report_load4(&config->fail_cond_comb);
            }
            fail_cond_comb = config->fail_cond_comb;
            if ( *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) <= 3 )
            {
              p_fail_cond = (const std::vector<data::QuestContent> *)&config->sub_id;
              __asan_report_load4(&config->sub_id);
            }
            if ( QuestExcelConfigMgr::canFinishImmediately(this, config->sub_id, fail_cond_comb, p_fail_cond, 0, 1) )
              v41 = 1;
            else
LABEL_79:
              v41 = 0;
            if ( v41 )
            {
              *(_DWORD *)(((v4 + 656) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 656) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 687) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 81) & 7) >= *(_BYTE *)(((v4 + 687) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 656, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 656),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestCycle",
                1281);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 656),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v42,
                      (const char (*)[11])"quest_id_:");
              v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, &config->sub_id);
              v45 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                      v44,
                      (const char (*)[48])byte_1A45B4A0);
              v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v45,
                      (const unsigned int *)(v4 + 96));
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v46, (const char (*)[26])byte_1A45B500);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 656));
              *(_DWORD *)(((v4 + 656) >> 3) + 0x7FFF8000) = -117901064;
              v56 = -1;
            }
            else
            {
              if ( !has_cycle || quest_state != QUEST_STATE_FINISHED )
                goto LABEL_92;
              p_finish_cond_comb = &config->finish_cond;
              if ( *(_BYTE *)(((unsigned __int64)&config->finish_cond_comb >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&config->finish_cond_comb >> 3) + 0x7FFF8000) <= 3 )
              {
                p_finish_cond_comb = (const std::vector<data::QuestContent> *)&config->finish_cond_comb;
                __asan_report_load4(&config->finish_cond_comb);
              }
              v48 = config->finish_cond_comb;
              if ( *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) <= 3 )
              {
                p_finish_cond_comb = (const std::vector<data::QuestContent> *)&config->sub_id;
                __asan_report_load4(&config->sub_id);
              }
              if ( QuestExcelConfigMgr::canFinishImmediately(this, config->sub_id, v48, p_finish_cond_comb, 0, 1) )
                v49 = 1;
              else
LABEL_92:
                v49 = 0;
              if ( v49 )
              {
                *(_DWORD *)(((v4 + 720) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 720) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 751) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 17) & 7) >= *(_BYTE *)(((v4 + 751) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 720, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 720),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestCycle",
                  1287);
                v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 720),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v51 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v50,
                        (const char (*)[11])"quest_id_:");
                v52 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, &config->sub_id);
                v53 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                        v52,
                        (const char (*)[48])byte_1A45B540);
                v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v53,
                        (const unsigned int *)(v4 + 96));
                common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v54, (const char (*)[26])byte_1A45B500);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 720));
                *(_DWORD *)(((v4 + 720) >> 3) + 0x7FFF8000) = -117901064;
                v56 = -1;
              }
              else
              {
                v56 = 0;
              }
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(((v4 + 464) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 464) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 495) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 17) & 7) >= *(_BYTE *)(((v4 + 495) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 464, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 464),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestCycle",
          1244);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 464),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v19 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v18, (const char (*)[10])"quest_id:");
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v19,
                (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v20,
          (const char (*)[24])" parent quest not exist");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 464));
        *(_DWORD *)(((v4 + 464) >> 3) + 0x7FFF8000) = -117901064;
        v56 = -1;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 336));
    }
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 784));
  }
  else
  {
    if ( *(char *)(((v4 + 400) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 431) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 81) & 7) >= *(_BYTE *)(((v4 + 431) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 400, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 400),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkQuestCycle",
      1230);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 400),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])"quest_id: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &config->sub_id);
    v11 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v10,
            (const char (*)[26])" fail rollback quest_id: ");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 96));
    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])" not found");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 400));
    v56 = -1;
  }
  if ( v67 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v4 >> 3) + 0x7FFF8068) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8068) = -168430091;
  }
  return v56;
};

// Line 1293: range 000000000EF01DB2-000000000EF074F7
int32_t __cdecl QuestExcelConfigMgr::checkQuestDependency(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::MainQuestExcelConfigMap *temp_main_quest_excel_config_map,
        const data::QuestExcelConfigMap *temp_quest_config_map)
{
  unsigned __int64 v4; // r15
  __int64 v5; // rax
  _DWORD *v6; // r14
  __int64 p_param; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int v10; // edx
  uint32_t v11; // r13d
  std::vector<int>::const_reference v12; // rcx
  uint32_t v13; // r12d
  std::vector<int>::const_reference v14; // rsi
  uint32_t v15; // esi
  _BOOL4 v16; // edx
  unsigned __int64 v17; // rax
  std::vector<data::QuestContent> *p_finish_cond; // rcx
  char *v19; // rsi
  std::vector<data::QuestContent> *p_fail_cond; // rcx
  char *v21; // rsi
  unsigned __int64 v22; // rax
  __int64 v23; // rdx
  std::tuple_element<1,std::pair<data::QuestState,const std::vector<data::QuestContent>*> >::type *v24; // rax
  int type; // eax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int v28; // eax
  data::QuestState v29; // r12d
  std::vector<int>::const_reference v30; // rcx
  bool v31; // r13
  std::vector<int>::const_reference v32; // rdi
  std::vector<int>::const_reference v33; // rdi
  uint32_t v34; // r12d
  std::vector<int>::const_reference v35; // rdi
  uint32_t v36; // edi
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::vector<int>::const_reference v39; // rax
  unsigned int *v40; // rdx
  __int64 v41; // rsi
  std::set<std::tuple<unsigned int,unsigned int,bool>> *v42; // rdi
  const unsigned int *v43; // r8
  data::QuestState *v44; // r9
  int v45; // edx
  _BOOL4 v46; // r12d
  unsigned __int64 v47; // rax
  unsigned __int64 v48; // rax
  std::vector<data::QuestExec> *p_finish_exec; // rcx
  char *v50; // rsi
  std::vector<data::QuestExec> *p_fail_exec; // rcx
  char *v52; // rsi
  std::vector<data::QuestExec> *p_begin_exec; // rcx
  char *v54; // rsi
  unsigned __int64 v55; // rax
  unsigned __int64 v56; // rax
  __int64 v57; // rdx
  std::tuple_element<1,std::pair<data::QuestState,const std::vector<data::QuestExec>*> >::type *v58; // rax
  int v59; // eax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  _BOOL4 v62; // eax
  const std::unordered_map<unsigned int,data::MainQuestExcelConfig>::key_type *v63; // rdx
  const std::unordered_map<unsigned int,data::MainQuestExcelConfig>::key_type *v64; // rsi
  char *v65; // rsi
  bool v66; // al
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  unsigned __int64 v69; // rax
  unsigned int *v70; // rax
  int *v71; // rdx
  int v72; // ecx
  char v73; // al
  bool v74; // al
  const data::QuestExcelConfig **v75; // r8
  data::QuestExcelConfig *p_second; // rcx
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  int v79; // edx
  int v80; // edx
  int v81; // r12d
  std::pair<unsigned int,const data::QuestExcelConfig*> *M_current; // r13
  std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>>::iterator v83; // rax
  unsigned __int64 v84; // rax
  __int64 v85; // rdx
  std::tuple_element<1,std::pair<unsigned int,const data::QuestExcelConfig*> >::type *v86; // rax
  std::tuple_element<1,std::pair<unsigned int,const data::QuestExcelConfig*> >::type v87; // rax
  char v88; // dl
  uint32_t sub_id; // r8d
  uint32_t v90; // esi
  uint32_t v91; // ecx
  std::tuple_element<1,std::pair<unsigned int,const data::QuestExcelConfig*> >::type v92; // rax
  char v93; // dl
  std::tuple_element<1,std::pair<unsigned int,const data::QuestExcelConfig*> >::type v94; // rdx
  char v95; // cl
  unsigned __int64 v96; // rdx
  int v97; // eax
  const std::unordered_map<unsigned int,data::MainQuestExcelConfig>::key_type *p_main_id; // rdx
  const std::unordered_map<unsigned int,data::MainQuestExcelConfig>::key_type *v99; // rsi
  char *v100; // rsi
  bool v101; // al
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // rax
  unsigned int *v104; // rax
  uint32_t *v105; // rdx
  uint32_t v106; // ecx
  common::milog::MiLogStream *v107; // rax
  int v108; // edx
  std::set<std::tuple<unsigned int,unsigned int,bool>> *v109; // rdi
  const unsigned int *v110; // r8
  data::QuestState *v111; // r9
  int v112; // edx
  _BOOL4 v113; // r12d
  unsigned __int64 v114; // rax
  unsigned __int64 v115; // rax
  int v116; // edx
  char *v117; // rsi
  char *v118; // rsi
  bool v119; // al
  unsigned __int64 n; // rax
  __int64 v121; // rsi
  unsigned __int64 v122; // rax
  std::__tuple_element_t_13 *v123; // rax
  __int64 v124; // rsi
  __int64 v125; // rdx
  char v126; // di
  __int64 v127; // rsi
  uint32_t v128; // r9d
  __int64 v129; // rdx
  bool v130; // r8
  uint32_t v131; // ecx
  unsigned __int64 v132; // rax
  unsigned __int64 v133; // rax
  unsigned __int64 v134; // rax
  std::vector<std::pair<unsigned int,unsigned int>>::size_type v135; // rsi
  const std::tuple_element<1,std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> > >::type *v136; // rax
  const std::tuple_element<1,std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> > >::type *v137; // rsi
  unsigned int v138; // edx
  char v139; // al
  std::tuple_element<0,const std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> > >::type *v140; // rsi
  unsigned int v141; // edx
  unsigned int *v142; // r8
  char v143; // al
  unsigned __int64 v144; // rax
  unsigned int *v145; // r12
  std::vector<unsigned int>::iterator v146; // rax
  char *v147; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v148; // rax
  int *v149; // rdx
  int v150; // ecx
  char v151; // al
  unsigned __int64 v152; // rax
  __int64 v153; // rcx
  __int64 v154; // rax
  __int64 v155; // rcx
  __int64 v156; // rcx
  char v157; // dl
  __int64 v158; // rsi
  __int64 v159; // rdx
  const char *v160; // rax
  __int64 v161; // rax
  common::milog::MiLogStream *v162; // rax
  common::milog::MiLogStream *v163; // r12
  common::milog::MiLogStream *v164; // rax
  common::milog::MiLogStream *v165; // rax
  unsigned __int64 v166; // rax
  unsigned __int64 v167; // rax
  unsigned __int64 v168; // rax
  bool *v170; // [rsp+0h] [rbp-11B0h]
  bool is_pre_exec; // [rsp+8h] [rbp-11A8h]
  uint32_t cur_quest_id; // [rsp+Ch] [rbp-11A4h]
  std::initializer_list<std::pair<data::QuestState,const std::vector<data::QuestContent>*> > __l; // [rsp+10h] [rbp-11A0h]
  std::initializer_list<std::pair<data::QuestState,const std::vector<data::QuestExec>*> > v174; // [rsp+20h] [rbp-1190h]
  uint32_t cur_quest_state; // [rsp+38h] [rbp-1178h]
  int32_t v176; // [rsp+3Ch] [rbp-1174h]
  uint32_t child_quest_id; // [rsp+64h] [rbp-114Ch]
  data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+68h] [rbp-1148h]
  data::MainQuestExcelConfig *parent_quest_config_ptr_0; // [rsp+70h] [rbp-1140h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::reference v183; // [rsp+80h] [rbp-1130h]
  uint32_t *quest_id; // [rsp+88h] [rbp-1128h]
  std::tuple_element<1,const std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_config; // [rsp+90h] [rbp-1120h]
  const std::vector<data::QuestCond> *__for_range_0; // [rsp+98h] [rbp-1118h]
  const data::QuestCond *quest_cond; // [rsp+A0h] [rbp-1110h]
  std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> *__for_range_1; // [rsp+A8h] [rbp-1108h]
  data::QuestState *quest_state; // [rsp+B0h] [rbp-1100h]
  std::tuple_element<1,std::pair<data::QuestState,const std::vector<data::QuestContent>*> >::type *cond_vec_ptr; // [rsp+B8h] [rbp-10F8h]
  const std::vector<data::QuestContent> *__for_range_2; // [rsp+C0h] [rbp-10F0h]
  const data::QuestContent *quest_content; // [rsp+C8h] [rbp-10E8h]
  std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> *__for_range_3; // [rsp+D0h] [rbp-10E0h]
  data::QuestState *quest_state_0; // [rsp+D8h] [rbp-10D8h]
  std::tuple_element<1,std::pair<data::QuestState,const std::vector<data::QuestExec>*> >::type *exec_vec_ptr; // [rsp+E0h] [rbp-10D0h]
  const std::vector<data::QuestExec> *__for_range_4; // [rsp+E8h] [rbp-10C8h]
  const data::QuestExec *quest_exec; // [rsp+F0h] [rbp-10C0h]
  const std::vector<unsigned int> *__for_range_7; // [rsp+F8h] [rbp-10B8h]
  const std::vector<unsigned int> *__for_range_5; // [rsp+100h] [rbp-10B0h]
  std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> *__for_range_6; // [rsp+108h] [rbp-10A8h]
  std::tuple_element<1,std::pair<unsigned int,const data::QuestExcelConfig*> >::type *quest_config_ptr; // [rsp+118h] [rbp-1098h]
  std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *__for_range_8; // [rsp+120h] [rbp-1090h]
  std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> *__for_range_11; // [rsp+128h] [rbp-1088h]
  std::vector<unsigned int> *__for_range_12; // [rsp+130h] [rbp-1080h]
  std::tuple_element<0,std::tuple<unsigned int,unsigned int,bool> >::type *quest_id_1; // [rsp+138h] [rbp-1078h]
  std::tuple_element<0,std::tuple<unsigned int,bool> >::type *quest_state_3; // [rsp+140h] [rbp-1070h]
  std::tuple_element<0,std::tuple<bool> >::type *is_exec_0; // [rsp+148h] [rbp-1068h]
  __gnu_cxx::__normal_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >*,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> >::reference v208; // [rsp+150h] [rbp-1060h]
  std::tuple_element<0,const std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> > >::type *from_quest_state; // [rsp+158h] [rbp-1058h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false,false>::reference v210; // [rsp+168h] [rbp-1048h]
  std::tuple_element<0,std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> > >::type *quest_content_id; // [rsp+170h] [rbp-1040h]
  std::tuple_element<1,const std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> > >::type *from_quest_state_set; // [rsp+178h] [rbp-1038h]
  uint32_t *quest_id_0; // [rsp+188h] [rbp-1028h]
  std::tuple_element<0,std::tuple<unsigned int,bool> >::type *quest_state_1; // [rsp+190h] [rbp-1020h]
  std::tuple_element<0,std::tuple<bool> >::type *is_exec; // [rsp+198h] [rbp-1018h]
  const std::set<std::tuple<unsigned int,unsigned int,bool>> *__for_range_10; // [rsp+1A0h] [rbp-1010h]
  std::tuple_element<0,std::tuple<unsigned int,unsigned int,bool> >::type *target_quest_id; // [rsp+1A8h] [rbp-1008h]
  std::tuple_element<0,std::tuple<unsigned int,bool> >::type *target_quest_state; // [rsp+1B0h] [rbp-1000h]
  std::tuple_element<0,std::tuple<bool> >::type *is_target_exec; // [rsp+1B8h] [rbp-FF8h]
  char v220[4080]; // [rsp+1C0h] [rbp-FF0h] BYREF

  v4 = (unsigned __int64)v220;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_6(4032LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "91 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 23 roll_"
                        "back_quest_id:1409 208 4 19 child_quest_id:1430 224 4 21 quest_content_id:1489 240 4 9 <unknown>"
                        " 256 4 9 <unknown> 272 4 15 node_index:1548 288 8 25 add_quest_state_edge:1296 320 8 16 __for_be"
                        "gin:1310 352 8 14 __for_end:1310 384 8 16 __for_begin:1328 416 8 14 __for_end:1328 448 8 9 <unkn"
                        "own> 480 8 9 <unknown> 512 8 16 __for_begin:1355 544 8 14 __for_end:1355 576 8 16 __for_begin:13"
                        "59 608 8 14 __for_end:1359 640 8 9 <unknown> 672 8 9 <unknown> 704 8 9 <unknown> 736 8 16 __for_"
                        "begin:1399 768 8 14 __for_end:1399 800 8 16 __for_begin:1403 832 8 14 __for_end:1403 864 8 9 ite"
                        "r:1417 896 8 9 <unknown> 928 8 16 __for_begin:1430 960 8 14 __for_end:1430 992 8 21 quest_config"
                        "_ptr:1432 1024 8 9 iter:1434 1056 8 9 <unknown> 1088 8 16 __for_begin:1451 1120 8 14 __for_end:1"
                        "451 1152 8 9 iter:1470 1184 8 9 <unknown> 1216 8 16 __for_begin:1481 1248 8 14 __for_end:1481 12"
                        "80 8 16 __for_begin:1506 1312 8 14 __for_end:1506 1344 8 9 iter:1508 1376 8 9 <unknown> 1408 8 1"
                        "6 __for_begin:1511 1440 8 14 __for_end:1511 1472 8 16 __for_begin:1513 1504 8 14 __for_end:1513 "
                        "1536 8 16 __for_begin:1536 1568 8 14 __for_end:1536 1600 8 16 __for_begin:1548 1632 8 14 __for_e"
                        "nd:1548 1664 12 9 <unknown> 1696 12 9 <unknown> 1728 12 9 <unknown> 1760 16 9 <unknown> 1792 16 "
                        "9 <unknown> 1824 16 9 <unknown> 1856 16 26 get_quest_state_index:1524 1888 24 25 quest_state_edg"
                        "e_vec:1295 1952 24 19 quest_cond_vec:1350 2016 24 19 quest_exec_vec:1393 2080 24 20 child_quest_"
                        "vec:1429 2144 24 13 edge_vec:1521 2208 24 10 cycle:1542 2272 32 9 <unknown> 2336 32 9 <unknown> "
                        "2400 32 9 <unknown> 2464 32 9 <unknown> 2528 32 9 <unknown> 2592 32 9 <unknown> 2656 32 9 <unkno"
                        "wn> 2720 32 9 <unknown> 2784 32 9 <unknown> 2848 32 12 err_msg:1543 2912 32 9 <unknown> 2976 32 "
                        "9 <unknown> 3040 32 9 <unknown> 3104 48 9 <unknown> 3184 56 30 be_add_progress_quest_map:1307 32"
                        "80 56 30 do_add_progress_quest_map:1308 3376 56 26 quest_state_index_map:1522 3472 56 26 index_q"
                        "uest_state_map:1523 3568 392 7 ss:1547";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkQuestDependency;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753535;
  v6[536862722] = -234753535;
  v6[536862723] = -234556924;
  v6[536862724] = -234556924;
  v6[536862725] = -234556924;
  v6[536862726] = -234556924;
  v6[536862727] = -234556924;
  v6[536862728] = -234556924;
  v6[536862729] = -218959360;
  v6[536862730] = -218959360;
  v6[536862731] = -218959360;
  v6[536862732] = -218959360;
  v6[536862733] = -218959360;
  v6[536862734] = -218959360;
  v6[536862735] = -218959360;
  v6[536862736] = -218959360;
  v6[536862737] = -218959360;
  v6[536862738] = -218959360;
  v6[536862739] = -218959360;
  v6[536862740] = -218959360;
  v6[536862741] = -218959360;
  v6[536862742] = -218959360;
  v6[536862743] = -218959360;
  v6[536862744] = -218959360;
  v6[536862745] = -218959360;
  v6[536862746] = -218959360;
  v6[536862747] = -218959360;
  v6[536862748] = -218959360;
  v6[536862749] = -218959360;
  v6[536862750] = -218959360;
  v6[536862751] = -218959360;
  v6[536862752] = -218959360;
  v6[536862753] = -218959360;
  v6[536862754] = -218959360;
  v6[536862755] = -218959360;
  v6[536862756] = -218959360;
  v6[536862757] = -218959360;
  v6[536862758] = -218959360;
  v6[536862759] = -218959360;
  v6[536862760] = -218959360;
  v6[536862761] = -218959360;
  v6[536862762] = -218959360;
  v6[536862763] = -218959360;
  v6[536862764] = -218959360;
  v6[536862765] = -218959360;
  v6[536862766] = -218959360;
  v6[536862767] = -218959360;
  v6[536862768] = -218959360;
  v6[536862769] = -218959360;
  v6[536862770] = -218959360;
  v6[536862771] = -218959360;
  v6[536862772] = -219020288;
  v6[536862773] = -219020288;
  v6[536862774] = -219020288;
  v6[536862775] = -219021312;
  v6[536862776] = -219021312;
  v6[536862777] = -219021312;
  v6[536862778] = -219021312;
  v6[536862779] = -234881024;
  v6[536862780] = -218959118;
  v6[536862781] = -234881024;
  v6[536862782] = -218959118;
  v6[536862783] = -234881024;
  v6[536862784] = -218959118;
  v6[536862785] = -234881024;
  v6[536862786] = -218959118;
  v6[536862787] = -234881024;
  v6[536862788] = -218959118;
  v6[536862789] = -234881024;
  v6[536862790] = -218959118;
  v6[536862792] = -218959118;
  v6[536862794] = -218959118;
  v6[536862796] = -218959118;
  v6[536862798] = -218959118;
  v6[536862800] = -218959118;
  v6[536862802] = -218959118;
  v6[536862804] = -218959118;
  v6[536862806] = -218959118;
  v6[536862808] = -218959118;
  v6[536862810] = -218959118;
  v6[536862812] = -218959118;
  v6[536862814] = -218959118;
  v6[536862816] = -218959118;
  v6[536862818] = -219021312;
  v6[536862819] = 62194;
  v6[536862821] = -218959360;
  v6[536862822] = 62194;
  v6[536862824] = -218959360;
  v6[536862825] = 62194;
  v6[536862827] = -218959360;
  v6[536862828] = 62194;
  v6[536862830] = -218959360;
  v6[536862831] = 62194;
  v6[536862843] = -218103808;
  v6[536862844] = -202116109;
  v6[536862845] = -202116109;
  std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>::vector((std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> *const)(v4 + 1888));
  if ( *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 288, txt_config_mgr);
  *(_QWORD *)(v4 + 288) = v4 + 1888;
  std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::unordered_map((std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3184));
  std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::unordered_map((std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3280));
  if ( *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 320, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::const_iterator *)(v4 + 320) = std::unordered_map<unsigned int,data::QuestExcelConfig>::begin(temp_quest_config_map);
  if ( *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 352, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::const_iterator *)(v4 + 352) = std::unordered_map<unsigned int,data::QuestExcelConfig>::end(temp_quest_config_map);
  while ( 1 )
  {
    p_param = v4 + 352;
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::QuestExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v4 + 320),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v4 + 352)) )
      break;
    v183 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false> *const)(v4 + 320));
    quest_id = std::get<0ul,unsigned int const,data::QuestExcelConfig>(v183);
    quest_config = (std::tuple_element<1,const std::pair<unsigned int const,data::QuestExcelConfig> >::type *)std::get<1ul,unsigned int const,data::QuestExcelConfig>(v183);
    if ( std::vector<data::QuestCond>::empty(&quest_config->accept_cond) )
    {
      if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(quest_id);
      }
      QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
        (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
        1,
        *quest_id,
        1u,
        0,
        *quest_id,
        2u,
        1);
    }
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
      (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
      1,
      *quest_id,
      2u,
      1,
      *quest_id,
      2u,
      0);
    if ( std::vector<data::QuestContent>::empty(&quest_config->finish_cond) )
    {
      if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(quest_id);
      }
      QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
        (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
        1,
        *quest_id,
        2u,
        0,
        *quest_id,
        3u,
        1);
    }
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
      (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
      1,
      *quest_id,
      3u,
      1,
      *quest_id,
      3u,
      0);
    if ( std::vector<data::QuestContent>::empty(&quest_config->fail_cond) )
    {
      if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(quest_id);
      }
      QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
        (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
        1,
        *quest_id,
        2u,
        0,
        *quest_id,
        4u,
        1);
    }
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
      (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
      1,
      *quest_id,
      4u,
      1,
      *quest_id,
      4u,
      0);
    __for_range_0 = &quest_config->accept_cond;
    *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 384, 1LL);
    *(std::vector<data::QuestCond>::const_iterator *)(v4 + 384) = std::vector<data::QuestCond>::begin(__for_range_0);
    *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 416, 1LL);
    *(std::vector<data::QuestCond>::const_iterator *)(v4 + 416) = std::vector<data::QuestCond>::end(__for_range_0);
    while ( 1 )
    {
      p_param = v4 + 416;
      if ( !__gnu_cxx::operator!=<data::QuestCond const*,std::vector<data::QuestCond>>(
              (const __gnu_cxx::__normal_iterator<const data::QuestCond*,std::vector<data::QuestCond> > *)(v4 + 384),
              (const __gnu_cxx::__normal_iterator<const data::QuestCond*,std::vector<data::QuestCond> > *)(v4 + 416)) )
      {
        v10 = 1;
        goto LABEL_54;
      }
      quest_cond = __gnu_cxx::__normal_iterator<data::QuestCond const*,std::vector<data::QuestCond>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestCond*,std::vector<data::QuestCond> > *const)(v4 + 384));
      if ( *(_BYTE *)(((unsigned __int64)&quest_cond->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&quest_cond->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&quest_cond->type);
      }
      if ( (unsigned int)(quest_cond->type - 1) <= 1 )
        break;
LABEL_52:
      __gnu_cxx::__normal_iterator<data::QuestCond const*,std::vector<data::QuestCond>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestCond*,std::vector<data::QuestCond> > *const)(v4 + 384));
    }
    if ( std::vector<int>::size(&quest_cond->param) > 1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(quest_id);
      }
      v11 = *quest_id;
      v12 = std::vector<int>::operator[](&quest_cond->param, 1uLL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      v13 = *v12;
      v14 = std::vector<int>::operator[](&quest_cond->param, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v14);
      }
      v15 = *v14;
      if ( *(_BYTE *)(((unsigned __int64)&quest_cond->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&quest_cond->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&quest_cond->type);
      }
      QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
        (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
        quest_cond->type == QUEST_COND_STATE_EQUAL,
        v15,
        v13,
        0,
        v11,
        1u,
        0);
      goto LABEL_52;
    }
    *(_DWORD *)(((v4 + 2272) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v4 + 2272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 2303) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 64 + 63) & 7) >= *(_BYTE *)(((v4 + 2303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 2272, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 2272),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkQuestDependency",
      1337);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 2272),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           v8,
           (const char (*)[34])"param size less than 2, quest_id:");
    p_param = (__int64)quest_id;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, quest_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2272));
    *(_DWORD *)(((v4 + 2272) >> 3) + 0x7FFF8000) = -117901064;
    v176 = -1;
    v10 = 0;
LABEL_54:
    *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) = -8;
    if ( v10 != 1 )
    {
      v16 = 0;
      goto LABEL_302;
    }
    v17 = ((v4 + 1952) >> 3) + 2147450880;
    *(_WORD *)v17 = 0;
    *(_BYTE *)(v17 + 2) = 0;
    *(_DWORD *)(((v4 + 2336) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 96, p_param);
    *(_DWORD *)(v4 + 96) = 3;
    *(_BYTE *)(((v4 + 448) >> 3) + 0x7FFF8000) = 0;
    p_finish_cond = &quest_config->finish_cond;
    if ( *(_BYTE *)(((v4 + 448) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 448, p_param);
    *(_QWORD *)(v4 + 448) = p_finish_cond;
    v19 = (char *)(v4 + 96);
    std::pair<data::QuestState,std::vector<data::QuestContent> const*>::pair<data::QuestState,std::vector<data::QuestContent> const*,true>(
      (std::pair<data::QuestState,const std::vector<data::QuestContent>*> *const)(v4 + 2336),
      (data::QuestState *)(v4 + 96),
      (const std::vector<data::QuestContent> **)(v4 + 448));
    *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 112, v19);
    *(_DWORD *)(v4 + 112) = 4;
    *(_BYTE *)(((v4 + 480) >> 3) + 0x7FFF8000) = 0;
    p_fail_cond = &quest_config->fail_cond;
    if ( *(_BYTE *)(((v4 + 480) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 480, v19);
    *(_QWORD *)(v4 + 480) = p_fail_cond;
    std::pair<data::QuestState,std::vector<data::QuestContent> const*>::pair<data::QuestState,std::vector<data::QuestContent> const*,true>(
      (std::pair<data::QuestState,const std::vector<data::QuestContent>*> *const)(v4 + 2352),
      (data::QuestState *)(v4 + 112),
      (const std::vector<data::QuestContent> **)(v4 + 480));
    __l._M_array = (std::initializer_list<std::pair<data::QuestState,const std::vector<data::QuestContent>*> >::iterator)(v4 + 2336);
    __l._M_len = 2LL;
    *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) = 1;
    std::allocator<std::pair<data::QuestState,std::vector<data::QuestContent> const*>>::allocator((std::allocator<std::pair<data::QuestState,const std::vector<data::QuestContent>*> > *const)(v4 + 32));
    v21 = (char *)(v4 + 2336);
    std::vector<std::pair<data::QuestState,std::vector const*<data::QuestContent,std::allocator<std::vector const>>>>::vector(
      (std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> *const)(v4 + 1952),
      __l,
      (const std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>>::allocator_type *)(v4 + 32));
    std::allocator<std::pair<data::QuestState,std::vector<data::QuestContent> const*>>::~allocator((std::allocator<std::pair<data::QuestState,const std::vector<data::QuestContent>*> > *const)(v4 + 32));
    *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v4 + 2336) >> 3) + 0x7FFF8000) = -117901064;
    *(_BYTE *)(((v4 + 480) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 448) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = (std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> *)(v4 + 1952);
    *(_BYTE *)(((v4 + 512) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 512) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 512, v21);
    *(std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>>::iterator *)(v4 + 512) = std::vector<std::pair<data::QuestState,std::vector const*<data::QuestContent,std::allocator<std::vector const>>>>::begin(__for_range_1);
    *(_BYTE *)(((v4 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 544) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 544, v21);
    *(std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>>::iterator *)(v4 + 544) = std::vector<std::pair<data::QuestState,std::vector const*<data::QuestContent,std::allocator<std::vector const>>>>::end(__for_range_1);
    while ( 2 )
    {
      p_param = v4 + 544;
      if ( !__gnu_cxx::operator!=<std::pair<data::QuestState,std::vector<data::QuestContent> const*> *,std::vector<std::pair<data::QuestState,std::vector<data::QuestContent> const*>>>(
              (const __gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestContent>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> > *)(v4 + 512),
              (const __gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestContent>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> > *)(v4 + 544)) )
      {
        v45 = 1;
        goto LABEL_126;
      }
      *(_WORD *)(((v4 + 1760) >> 3) + 0x7FFF8000) = 0;
      v22 = (unsigned __int64)__gnu_cxx::__normal_iterator<std::pair<data::QuestState,std::vector<data::QuestContent> const*> *,std::vector<std::pair<data::QuestState,std::vector<data::QuestContent> const*>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestContent>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> > *const)(v4 + 512));
      if ( *(_WORD *)(((v4 + 1760) >> 3) + 0x7FFF8000) )
        v22 = __asan_report_store16();
      if ( *(_WORD *)((v22 >> 3) + 0x7FFF8000) )
        v22 = __asan_report_load16(v22);
      v23 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v4 + 1760) = *(_QWORD *)v22;
      *(_QWORD *)(v4 + 1768) = v23;
      quest_state = std::get<0ul,data::QuestState,std::vector<data::QuestContent> const*>((std::pair<data::QuestState,const std::vector<data::QuestContent>*> *)(v4 + 1760));
      v24 = std::get<1ul,data::QuestState,std::vector<data::QuestContent> const*>((std::pair<data::QuestState,const std::vector<data::QuestContent>*> *)(v4 + 1760));
      cond_vec_ptr = v24;
      if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v24);
      if ( !*cond_vec_ptr )
        goto LABEL_124;
      __for_range_2 = *cond_vec_ptr;
      *(_BYTE *)(((v4 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 576) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 576, p_param);
      *(std::vector<data::QuestContent>::const_iterator *)(v4 + 576) = std::vector<data::QuestContent>::begin(__for_range_2);
      *(_BYTE *)(((v4 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 608) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 608, p_param);
      *(std::vector<data::QuestContent>::const_iterator *)(v4 + 608) = std::vector<data::QuestContent>::end(__for_range_2);
      while ( 2 )
      {
        p_param = v4 + 608;
        if ( !__gnu_cxx::operator!=<data::QuestContent const*,std::vector<data::QuestContent>>(
                (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v4 + 576),
                (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v4 + 608)) )
        {
          v28 = 1;
          goto LABEL_122;
        }
        quest_content = __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v4 + 576));
        if ( *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&quest_content->type);
        }
        type = quest_content->type;
        if ( type != 24 )
        {
          if ( type >= 24 && (unsigned int)(type - 136) <= 1 )
          {
            if ( std::vector<int>::size(&quest_content->param) <= 1 )
            {
              *(_DWORD *)(((v4 + 2400) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 2400) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 2431) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 2431) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 2400, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 2400),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestDependency",
                1368);
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 2400),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v27 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                      v26,
                      (const char (*)[34])"param size less than 2, quest_id:");
              p_param = (__int64)quest_id;
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, quest_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2400));
              *(_DWORD *)(((v4 + 2400) >> 3) + 0x7FFF8000) = -117901064;
              v176 = -1;
              v28 = 0;
              goto LABEL_122;
            }
            if ( *(_BYTE *)(((unsigned __int64)quest_state >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)quest_state & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_state >> 3)
                                                                            + 0x7FFF8000) )
            {
              __asan_report_load4(quest_state);
            }
            v29 = *quest_state;
            v30 = std::vector<int>::operator[](&quest_content->param, 1uLL);
            if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v30);
            }
            v31 = v29 != *v30;
            if ( *(_BYTE *)(((unsigned __int64)quest_state >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)quest_state & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_state >> 3)
                                                                            + 0x7FFF8000) )
            {
              __asan_report_load4(quest_state);
            }
            cur_quest_state = *quest_state;
            if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(quest_id);
            }
            cur_quest_id = *quest_id;
            v32 = std::vector<int>::operator[](&quest_content->param, 1uLL);
            if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v32);
            }
            is_pre_exec = *v32 > 1;
            v33 = std::vector<int>::operator[](&quest_content->param, 1uLL);
            if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v33);
            }
            v34 = *v33;
            v35 = std::vector<int>::operator[](&quest_content->param, 0LL);
            if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v35);
            }
            v36 = *v35;
            if ( *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) <= 3 )
            {
              v36 = (_DWORD)quest_content + 8;
              __asan_report_load4(&quest_content->type);
            }
            QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
              (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
              quest_content->type == QUEST_CONTENT_QUEST_STATE_EQUAL,
              v36,
              v34,
              is_pre_exec,
              cur_quest_id,
              cur_quest_state,
              v31);
          }
          goto LABEL_120;
        }
        if ( std::vector<int>::size(&quest_content->param) )
        {
          *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 4;
          v39 = std::vector<int>::operator[](&quest_content->param, 0LL);
          v40 = (unsigned int *)v39;
          if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v39);
          }
          v41 = *v40;
          if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 128, v41);
          *(_DWORD *)(v4 + 128) = v41;
          v42 = std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::operator[](
                  (std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3184),
                  (std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::key_type *)(v4 + 128));
          *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = 1;
          if ( *(char *)(((v4 + 48) >> 3) + 0x7FFF8000) < 0 )
          {
            v42 = (std::set<std::tuple<unsigned int,unsigned int,bool>> *)(v4 + 48);
            __asan_report_store1(v4 + 48, v4 + 128, v4 + 48);
          }
          *(_BYTE *)(v4 + 48) = 0;
          std::set<std::tuple<unsigned int,unsigned int,bool>>::emplace<unsigned int const&,data::QuestState &,bool>(
            v42,
            quest_id,
            quest_state,
            (bool *)(v4 + 48),
            v43,
            v44,
            v170);
          *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = -8;
LABEL_120:
          __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v4 + 576));
          continue;
        }
        break;
      }
      *(_DWORD *)(((v4 + 2464) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 2464) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 2495) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 2495) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 2464, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 2464),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkQuestDependency",
        1380);
      v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 2464),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v38 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v37,
              (const char (*)[34])"param size less than 2, quest_id:");
      p_param = (__int64)quest_id;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, quest_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2464));
      *(_DWORD *)(((v4 + 2464) >> 3) + 0x7FFF8000) = -117901064;
      v176 = -1;
      v28 = 0;
LABEL_122:
      *(_BYTE *)(((v4 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 608) >> 3) + 0x7FFF8000) = -8;
      if ( v28 == 1 )
      {
LABEL_124:
        __gnu_cxx::__normal_iterator<std::pair<data::QuestState,std::vector<data::QuestContent> const*> *,std::vector<std::pair<data::QuestState,std::vector<data::QuestContent> const*>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestContent>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> > *const)(v4 + 512));
        continue;
      }
      break;
    }
    v45 = 0;
LABEL_126:
    *(_WORD *)(((v4 + 1760) >> 3) + 0x7FFF8000) = -1800;
    *(_BYTE *)(((v4 + 512) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 544) >> 3) + 0x7FFF8000) = -8;
    if ( v45 != 1 )
    {
      v46 = 0;
      goto LABEL_301;
    }
    v47 = ((v4 + 2016) >> 3) + 2147450880;
    *(_WORD *)v47 = 0;
    *(_BYTE *)(v47 + 2) = 0;
    v48 = ((v4 + 3104) >> 3) + 2147450880;
    *(_DWORD *)v48 = 0;
    *(_WORD *)(v48 + 4) = 0;
    *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 144, p_param);
    *(_DWORD *)(v4 + 144) = 3;
    *(_BYTE *)(((v4 + 640) >> 3) + 0x7FFF8000) = 0;
    p_finish_exec = &quest_config->finish_exec;
    if ( *(_BYTE *)(((v4 + 640) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 640, p_param);
    *(_QWORD *)(v4 + 640) = p_finish_exec;
    v50 = (char *)(v4 + 144);
    std::pair<data::QuestState,std::vector<data::QuestExec> const*>::pair<data::QuestState,std::vector<data::QuestExec> const*,true>(
      (std::pair<data::QuestState,const std::vector<data::QuestExec>*> *const)(v4 + 3104),
      (data::QuestState *)(v4 + 144),
      (const std::vector<data::QuestExec> **)(v4 + 640));
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 160, v50);
    *(_DWORD *)(v4 + 160) = 4;
    *(_BYTE *)(((v4 + 672) >> 3) + 0x7FFF8000) = 0;
    p_fail_exec = &quest_config->fail_exec;
    if ( *(_BYTE *)(((v4 + 672) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 672, v50);
    *(_QWORD *)(v4 + 672) = p_fail_exec;
    v52 = (char *)(v4 + 160);
    std::pair<data::QuestState,std::vector<data::QuestExec> const*>::pair<data::QuestState,std::vector<data::QuestExec> const*,true>(
      (std::pair<data::QuestState,const std::vector<data::QuestExec>*> *const)(v4 + 3120),
      (data::QuestState *)(v4 + 160),
      (const std::vector<data::QuestExec> **)(v4 + 672));
    *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 176, v52);
    *(_DWORD *)(v4 + 176) = 2;
    *(_BYTE *)(((v4 + 704) >> 3) + 0x7FFF8000) = 0;
    p_begin_exec = &quest_config->begin_exec;
    if ( *(_BYTE *)(((v4 + 704) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 704, v52);
    *(_QWORD *)(v4 + 704) = p_begin_exec;
    std::pair<data::QuestState,std::vector<data::QuestExec> const*>::pair<data::QuestState,std::vector<data::QuestExec> const*,true>(
      (std::pair<data::QuestState,const std::vector<data::QuestExec>*> *const)(v4 + 3136),
      (data::QuestState *)(v4 + 176),
      (const std::vector<data::QuestExec> **)(v4 + 704));
    v174._M_array = (std::initializer_list<std::pair<data::QuestState,const std::vector<data::QuestExec>*> >::iterator)(v4 + 3104);
    v174._M_len = 3LL;
    *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<std::pair<data::QuestState,std::vector<data::QuestExec> const*>>::allocator((std::allocator<std::pair<data::QuestState,const std::vector<data::QuestExec>*> > *const)(v4 + 64));
    v54 = (char *)(v4 + 3104);
    std::vector<std::pair<data::QuestState,std::vector const*<data::QuestExec,std::allocator<std::vector const>>>>::vector(
      (std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> *const)(v4 + 2016),
      v174,
      (const std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>>::allocator_type *)(v4 + 64));
    std::allocator<std::pair<data::QuestState,std::vector<data::QuestExec> const*>>::~allocator((std::allocator<std::pair<data::QuestState,const std::vector<data::QuestExec>*> > *const)(v4 + 64));
    *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
    v55 = ((v4 + 3104) >> 3) + 2147450880;
    *(_DWORD *)v55 = -117901064;
    *(_WORD *)(v55 + 4) = -1800;
    *(_BYTE *)(((v4 + 704) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 672) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 640) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = -8;
    __for_range_3 = (std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> *)(v4 + 2016);
    *(_BYTE *)(((v4 + 736) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 736) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 736, v54);
    *(std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>>::iterator *)(v4 + 736) = std::vector<std::pair<data::QuestState,std::vector const*<data::QuestExec,std::allocator<std::vector const>>>>::begin(__for_range_3);
    *(_BYTE *)(((v4 + 768) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 768) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 768, v54);
    *(std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>>::iterator *)(v4 + 768) = std::vector<std::pair<data::QuestState,std::vector const*<data::QuestExec,std::allocator<std::vector const>>>>::end(__for_range_3);
LABEL_145:
    p_param = v4 + 768;
    if ( __gnu_cxx::operator!=<std::pair<data::QuestState,std::vector<data::QuestExec> const*> *,std::vector<std::pair<data::QuestState,std::vector<data::QuestExec> const*>>>(
           (const __gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestExec>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> > *)(v4 + 736),
           (const __gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestExec>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> > *)(v4 + 768)) )
    {
      *(_WORD *)(((v4 + 1792) >> 3) + 0x7FFF8000) = 0;
      v56 = (unsigned __int64)__gnu_cxx::__normal_iterator<std::pair<data::QuestState,std::vector<data::QuestExec> const*> *,std::vector<std::pair<data::QuestState,std::vector<data::QuestExec> const*>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestExec>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> > *const)(v4 + 736));
      if ( *(_WORD *)(((v4 + 1792) >> 3) + 0x7FFF8000) )
        v56 = __asan_report_store16();
      if ( *(_WORD *)((v56 >> 3) + 0x7FFF8000) )
        v56 = __asan_report_load16(v56);
      v57 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v4 + 1792) = *(_QWORD *)v56;
      *(_QWORD *)(v4 + 1800) = v57;
      quest_state_0 = std::get<0ul,data::QuestState,std::vector<data::QuestExec> const*>((std::pair<data::QuestState,const std::vector<data::QuestExec>*> *)(v4 + 1792));
      v58 = std::get<1ul,data::QuestState,std::vector<data::QuestExec> const*>((std::pair<data::QuestState,const std::vector<data::QuestExec>*> *)(v4 + 1792));
      exec_vec_ptr = v58;
      if ( *(_BYTE *)(((unsigned __int64)v58 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v58);
      if ( !*exec_vec_ptr )
        goto LABEL_298;
      __for_range_4 = *exec_vec_ptr;
      *(_BYTE *)(((v4 + 800) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 800) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 800, p_param);
      *(std::vector<data::QuestExec>::const_iterator *)(v4 + 800) = std::vector<data::QuestExec>::begin(__for_range_4);
      *(_BYTE *)(((v4 + 832) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 832) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 832, p_param);
      *(std::vector<data::QuestExec>::const_iterator *)(v4 + 832) = std::vector<data::QuestExec>::end(__for_range_4);
      while ( 1 )
      {
        p_param = v4 + 832;
        if ( !__gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
                (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 800),
                (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 832)) )
        {
          v97 = 1;
          goto LABEL_296;
        }
        quest_exec = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 800));
        if ( *(_BYTE *)(((unsigned __int64)&quest_exec->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&quest_exec->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&quest_exec->type);
        }
        v59 = quest_exec->type;
        if ( v59 == 30 )
        {
          parent_quest_config_ptr_0 = 0LL;
          *(_BYTE *)(((v4 + 1152) >> 3) + 0x7FFF8000) = 0;
          p_main_id = &quest_config->main_id;
          if ( *(_BYTE *)(((v4 + 1152) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 1152, p_param);
          v99 = p_main_id;
          *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v4 + 1152) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::find(temp_main_quest_excel_config_map, p_main_id);
          *(_BYTE *)(((v4 + 1184) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v4 + 1184) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 1184, v99);
          *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v4 + 1184) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(temp_main_quest_excel_config_map);
          v100 = (char *)(v4 + 1184);
          v101 = std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(
                   (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v4 + 1152),
                   (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v4 + 1184));
          *(_BYTE *)(((v4 + 1184) >> 3) + 0x7FFF8000) = -8;
          if ( v101 )
            parent_quest_config_ptr_0 = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *const)(v4 + 1152))->second;
          *(_BYTE *)(((v4 + 1152) >> 3) + 0x7FFF8000) = -8;
          if ( !parent_quest_config_ptr_0 )
          {
            *(_DWORD *)(((v4 + 2720) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 2720) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 2751) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 2751) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 2720, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 2720),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestDependency",
              1478);
            v102 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v4 + 2720),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v103 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                     v102,
                     (const char (*)[48])"findMainQuestExcelConfig fail, parent_quest_id:");
            p_param = (__int64)&quest_config->main_id;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v103, &quest_config->main_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2720));
            *(_DWORD *)(((v4 + 2720) >> 3) + 0x7FFF8000) = -117901064;
            v176 = -1;
            v97 = 0;
LABEL_296:
            *(_BYTE *)(((v4 + 800) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v4 + 832) >> 3) + 0x7FFF8000) = -8;
            if ( v97 != 1 )
            {
              v112 = 0;
              goto LABEL_300;
            }
LABEL_298:
            __gnu_cxx::__normal_iterator<std::pair<data::QuestState,std::vector<data::QuestExec> const*> *,std::vector<std::pair<data::QuestState,std::vector<data::QuestExec> const*>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<data::QuestState,const std::vector<data::QuestExec>*>*,std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> > *const)(v4 + 736));
            goto LABEL_145;
          }
          __for_range_7 = &parent_quest_config_ptr_0->child_quest_list;
          *(_BYTE *)(((v4 + 1216) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v4 + 1216) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 1216, v100);
          *(std::vector<unsigned int>::const_iterator *)(v4 + 1216) = std::vector<unsigned int>::begin(__for_range_7);
          *(_BYTE *)(((v4 + 1248) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v4 + 1248) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 1248, v100);
          *(std::vector<unsigned int>::const_iterator *)(v4 + 1248) = std::vector<unsigned int>::end(__for_range_7);
          while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 1216),
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 1248)) )
          {
            v104 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 1216));
            v105 = v104;
            if ( *(_BYTE *)(((unsigned __int64)v104 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v104 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v104 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v104);
            }
            child_quest_id = *v105;
            if ( *(_BYTE *)(((unsigned __int64)quest_state_0 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)quest_state_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_state_0 >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load4(quest_state_0);
            }
            v106 = *quest_state_0;
            if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(quest_id);
            }
            QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
              (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
              1,
              *quest_id,
              v106,
              1,
              child_quest_id,
              1u,
              0);
            __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 1216));
          }
          *(_BYTE *)(((v4 + 1216) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v4 + 1248) >> 3) + 0x7FFF8000) = -8;
        }
        else if ( v59 <= 30 )
        {
          if ( v59 == 14 )
          {
            *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v4 + 192, p_param);
            *(_DWORD *)(v4 + 192) = 0;
            if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(
                   &quest_exec->param,
                   (unsigned int *)(v4 + 192)) )
            {
              *(_DWORD *)(((v4 + 2528) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 2528) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 2559) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 64 + 63) & 7) >= *(_BYTE *)(((v4 + 2559) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 2528, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 2528),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestDependency",
                1412);
              v60 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 2528),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v61 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v60,
                      (const char (*)[15])"invalid param:");
              p_param = (__int64)&quest_exec->param;
              common::milog::MiLogStream::operator<<<std::string>(v61, &quest_exec->param);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2528));
              *(_DWORD *)(((v4 + 2528) >> 3) + 0x7FFF8000) = -117901064;
              v176 = -1;
              v62 = 0;
            }
            else
            {
              parent_quest_config_ptr = 0LL;
              *(_BYTE *)(((v4 + 864) >> 3) + 0x7FFF8000) = 0;
              v63 = &quest_config->main_id;
              if ( *(_BYTE *)(((v4 + 864) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v4 + 864, v4 + 192);
              v64 = v63;
              *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v4 + 864) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::find(temp_main_quest_excel_config_map, v63);
              *(_BYTE *)(((v4 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v4 + 896) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v4 + 896, v64);
              *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v4 + 896) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(temp_main_quest_excel_config_map);
              v65 = (char *)(v4 + 896);
              v66 = std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v4 + 864),
                      (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v4 + 896));
              *(_BYTE *)(((v4 + 896) >> 3) + 0x7FFF8000) = -8;
              if ( v66 )
                parent_quest_config_ptr = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *const)(v4 + 864))->second;
              *(_BYTE *)(((v4 + 864) >> 3) + 0x7FFF8000) = -8;
              if ( parent_quest_config_ptr )
              {
                v69 = ((v4 + 2080) >> 3) + 2147450880;
                *(_WORD *)v69 = 0;
                *(_BYTE *)(v69 + 2) = 0;
                std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>::vector((std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> *const)(v4 + 2080));
                __for_range_5 = &parent_quest_config_ptr->child_quest_list;
                *(_BYTE *)(((v4 + 928) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v4 + 928) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v4 + 928, v65);
                *(std::vector<unsigned int>::const_iterator *)(v4 + 928) = std::vector<unsigned int>::begin(__for_range_5);
                *(_BYTE *)(((v4 + 960) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v4 + 960) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v4 + 960, v65);
                *(std::vector<unsigned int>::const_iterator *)(v4 + 960) = std::vector<unsigned int>::end(__for_range_5);
                while ( 1 )
                {
                  p_param = v4 + 960;
                  if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                          (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 928),
                          (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 960)) )
                    break;
                  *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) = 4;
                  v70 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 928));
                  v71 = (int *)v70;
                  if ( *(_BYTE *)(((unsigned __int64)v70 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)v70 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v70 >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(v70);
                  }
                  v72 = *v71;
                  v73 = *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000);
                  LOBYTE(p_param) = v73 != 0;
                  if ( v73 != 0 && v73 <= 3 )
                    __asan_report_store4(v4 + 208, p_param);
                  *(_DWORD *)(v4 + 208) = v72;
                  *(_BYTE *)(((v4 + 992) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v4 + 992) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v4 + 992, p_param);
                  *(_QWORD *)(v4 + 992) = 0LL;
                  *(_BYTE *)(((v4 + 1024) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v4 + 1024) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v4 + 1024, p_param);
                  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::const_iterator *)(v4 + 1024) = std::unordered_map<unsigned int,data::QuestExcelConfig>::find(temp_quest_config_map, (const std::unordered_map<unsigned int,data::QuestExcelConfig>::key_type *)(v4 + 208));
                  *(_BYTE *)(((v4 + 1056) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v4 + 1056) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v4 + 1056, v4 + 208);
                  *(std::unordered_map<unsigned int,data::QuestExcelConfig>::const_iterator *)(v4 + 1056) = std::unordered_map<unsigned int,data::QuestExcelConfig>::end(temp_quest_config_map);
                  v74 = std::__detail::operator!=<std::pair<unsigned int const,data::QuestExcelConfig>,false>(
                          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v4 + 1024),
                          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false> *)(v4 + 1056));
                  *(_BYTE *)(((v4 + 1056) >> 3) + 0x7FFF8000) = -8;
                  if ( v74 )
                  {
                    p_second = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false> *const)(v4 + 1024))->second;
                    if ( *(_BYTE *)(((v4 + 992) >> 3) + 0x7FFF8000) )
                      __asan_report_store8(v4 + 992, v4 + 1056);
                    *(_QWORD *)(v4 + 992) = p_second;
                  }
                  *(_BYTE *)(((v4 + 1024) >> 3) + 0x7FFF8000) = -8;
                  if ( *(_BYTE *)(((v4 + 992) >> 3) + 0x7FFF8000) )
                    __asan_report_load8(v4 + 992);
                  if ( *(_QWORD *)(v4 + 992) )
                  {
                    if ( *(_BYTE *)(((v4 + 992) >> 3) + 0x7FFF8000) )
                      __asan_report_load8(v4 + 992);
                    p_param = *(_QWORD *)(v4 + 992) + 16LL;
                    std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>::emplace_back<int const&,data::QuestExcelConfig const*&>(
                      (std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> *const)(v4 + 2080),
                      (const int *)p_param,
                      (const data::QuestExcelConfig **)(v4 + 992),
                      (const int *)p_param,
                      v75);
                    v79 = 1;
                  }
                  else
                  {
                    *(_DWORD *)(((v4 + 2656) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v4 + 2656) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v4 + 2687) >> 3) + 0x7FFF8000) != 0
                      && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 2687) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v4 + 2656, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v4 + 2656),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkQuestDependency",
                      1442);
                    v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v4 + 2656),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v78 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                            v77,
                            (const char (*)[43])"findQuestExcelConfig fail, child_quest_id:");
                    p_param = v4 + 208;
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v78,
                      (const unsigned int *)(v4 + 208));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2656));
                    *(_DWORD *)(((v4 + 2656) >> 3) + 0x7FFF8000) = -117901064;
                    v176 = -1;
                    v79 = 0;
                  }
                  *(_BYTE *)(((v4 + 992) >> 3) + 0x7FFF8000) = -8;
                  if ( v79 != 1 )
                  {
                    v80 = 0;
                    goto LABEL_215;
                  }
                  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 928));
                }
                v80 = 1;
LABEL_215:
                *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v4 + 928) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v4 + 960) >> 3) + 0x7FFF8000) = -8;
                if ( v80 == 1 )
                {
                  M_current = std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>::end((std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> *const)(v4 + 2080))._M_current;
                  v83._M_current = std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>::begin((std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> *const)(v4 + 2080))._M_current;
                  std::sort<__gnu_cxx::__normal_iterator<std::pair<unsigned int,data::QuestExcelConfig const*> *,std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>>,QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,data::QuestExcelConfig>>>)::{lambda(std::pair<unsigned int,data::QuestExcelConfig const*> const&,std::pair<unsigned int,data::QuestExcelConfig const*> const&)#2}>(
                    v83,
                    (__gnu_cxx::__normal_iterator<std::pair<unsigned int,const data::QuestExcelConfig*>*,std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> >)M_current,
                    (QuestExcelConfigMgr::checkQuestDependency::<lambda(const QuestOrder&, const QuestOrder&)>)this);
                  __for_range_6 = (std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> *)(v4 + 2080);
                  *(_BYTE *)(((v4 + 1088) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v4 + 1088) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v4 + 1088, M_current);
                  *(std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>>::iterator *)(v4 + 1088) = std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>::begin(__for_range_6);
                  *(_BYTE *)(((v4 + 1120) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v4 + 1120) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v4 + 1120, M_current);
                  *(std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>>::iterator *)(v4 + 1120) = std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>::end(__for_range_6);
                  while ( 1 )
                  {
                    p_param = v4 + 1120;
                    if ( !__gnu_cxx::operator!=<std::pair<unsigned int,data::QuestExcelConfig const*> *,std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>>(
                            (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,const data::QuestExcelConfig*>*,std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> > *)(v4 + 1088),
                            (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,const data::QuestExcelConfig*>*,std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> > *)(v4 + 1120)) )
                      break;
                    *(_WORD *)(((v4 + 1824) >> 3) + 0x7FFF8000) = 0;
                    v84 = (unsigned __int64)__gnu_cxx::__normal_iterator<std::pair<unsigned int,data::QuestExcelConfig const*> *,std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,const data::QuestExcelConfig*>*,std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> > *const)(v4 + 1088));
                    if ( *(_WORD *)(((v4 + 1824) >> 3) + 0x7FFF8000) )
                      v84 = __asan_report_store16();
                    if ( *(_WORD *)((v84 >> 3) + 0x7FFF8000) )
                      v84 = __asan_report_load16(v84);
                    v85 = *(_QWORD *)(v84 + 8);
                    *(_QWORD *)(v4 + 1824) = *(_QWORD *)v84;
                    *(_QWORD *)(v4 + 1832) = v85;
                    std::get<0ul,unsigned int,data::QuestExcelConfig const*>((std::pair<unsigned int,const data::QuestExcelConfig*> *)(v4 + 1824));
                    v86 = std::get<1ul,unsigned int,data::QuestExcelConfig const*>((std::pair<unsigned int,const data::QuestExcelConfig*> *)(v4 + 1824));
                    quest_config_ptr = v86;
                    if ( *(_BYTE *)(((unsigned __int64)v86 >> 3) + 0x7FFF8000) )
                      __asan_report_load8(v86);
                    if ( *quest_config_ptr )
                    {
                      if ( *(_BYTE *)(((unsigned __int64)quest_config_ptr >> 3) + 0x7FFF8000) )
                        __asan_report_load8(quest_config_ptr);
                      v87 = *quest_config_ptr;
                      v88 = *(_BYTE *)(((unsigned __int64)&(*quest_config_ptr)->sub_id >> 3) + 0x7FFF8000);
                      if ( v88 != 0 && v88 <= 3 )
                        __asan_report_load4(&(*quest_config_ptr)->sub_id);
                      sub_id = v87->sub_id;
                      if ( *(_BYTE *)(((unsigned __int64)quest_state_0 >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)quest_state_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_state_0 >> 3)
                                                                                        + 0x7FFF8000) )
                      {
                        __asan_report_load4(quest_state_0);
                      }
                      v90 = *quest_state_0;
                      if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3)
                                                                                   + 0x7FFF8000) )
                      {
                        __asan_report_load4(quest_id);
                      }
                      v91 = v90;
                      p_param = 1LL;
                      QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
                        (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
                        1,
                        *quest_id,
                        v91,
                        1,
                        sub_id,
                        1u,
                        0);
                      if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) != 0
                        && *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) <= 3 )
                      {
                        __asan_report_load4(v4 + 192);
                      }
                      if ( *(_DWORD *)(v4 + 192) )
                      {
                        if ( *(_BYTE *)(((unsigned __int64)quest_config_ptr >> 3) + 0x7FFF8000) )
                          __asan_report_load8(quest_config_ptr);
                        v92 = *quest_config_ptr;
                        v93 = *(_BYTE *)(((unsigned __int64)&(*quest_config_ptr)->sub_id >> 3) + 0x7FFF8000);
                        LOBYTE(p_param) = v93 != 0;
                        if ( v93 != 0 && v93 <= 3 )
                          __asan_report_load4(&(*quest_config_ptr)->sub_id);
                        if ( v92->sub_id == *(_DWORD *)(v4 + 192) )
                          break;
                      }
                      if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) != 0
                        && *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) <= 3 )
                      {
                        __asan_report_load4(v4 + 192);
                      }
                      if ( !*(_DWORD *)(v4 + 192) )
                      {
                        if ( *(_BYTE *)(((unsigned __int64)quest_config_ptr >> 3) + 0x7FFF8000) )
                          __asan_report_load8(quest_config_ptr);
                        v94 = *quest_config_ptr;
                        v95 = *(_BYTE *)(((unsigned __int64)&(*quest_config_ptr)->is_rewind >> 3) + 0x7FFF8000);
                        LOBYTE(p_param) = v95 != 0;
                        if ( v95 != 0 && ((*(_BYTE *)quest_config_ptr - 66) & 7) >= v95 )
                          __asan_report_load1(&(*quest_config_ptr)->is_rewind, p_param, v94);
                        if ( v94->is_rewind )
                          break;
                      }
                    }
                    __gnu_cxx::__normal_iterator<std::pair<unsigned int,data::QuestExcelConfig const*> *,std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,const data::QuestExcelConfig*>*,std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> > *const)(v4 + 1088));
                  }
                  *(_WORD *)(((v4 + 1824) >> 3) + 0x7FFF8000) = -1800;
                  *(_BYTE *)(((v4 + 1088) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v4 + 1120) >> 3) + 0x7FFF8000) = -8;
                  v81 = 1;
                }
                else
                {
                  v81 = 0;
                }
                std::vector<std::pair<unsigned int,data::QuestExcelConfig const*>>::~vector((std::vector<std::pair<unsigned int,const data::QuestExcelConfig*>> *const)(v4 + 2080));
                v62 = v81 != 0;
              }
              else
              {
                *(_DWORD *)(((v4 + 2592) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 2592) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 2623) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 64 + 127) & 7) >= *(_BYTE *)(((v4 + 2623) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 2592, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 2592),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestDependency",
                  1425);
                v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 2592),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v68 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                        v67,
                        (const char (*)[48])"findMainQuestExcelConfig fail, parent_quest_id:");
                p_param = (__int64)&quest_config->main_id;
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, &quest_config->main_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2592));
                *(_DWORD *)(((v4 + 2592) >> 3) + 0x7FFF8000) = -117901064;
                v176 = -1;
                v62 = 0;
              }
            }
            *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = -8;
            v96 = ((v4 + 2080) >> 3) + 2147450880;
            *(_WORD *)v96 = -1800;
            *(_BYTE *)(v96 + 2) = -8;
            if ( !v62 )
            {
              v97 = 0;
              goto LABEL_296;
            }
          }
          else if ( v59 == 23 )
          {
            *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v4 + 224, p_param);
            *(_DWORD *)(v4 + 224) = 0;
            if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(
                   &quest_exec->param,
                   (unsigned int *)(v4 + 224)) )
            {
              *(_DWORD *)(((v4 + 2784) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 2784) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 2815) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 64 + 63) & 7) >= *(_BYTE *)(((v4 + 2815) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 2784, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 2784),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestDependency",
                1492);
              v107 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                       (common::milog::MiLogStream *const)(v4 + 2784),
                       (const char (*)[25])"strVecToNum fail. param:");
              p_param = (__int64)&quest_exec->param;
              common::milog::MiLogStream::operator<<<std::string>(v107, &quest_exec->param);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2784));
              *(_DWORD *)(((v4 + 2784) >> 3) + 0x7FFF8000) = -117901064;
              v176 = -1;
              v108 = 0;
            }
            else
            {
              v109 = std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::operator[](
                       (std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3280),
                       (const std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::key_type *)(v4 + 224));
              *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 1;
              if ( *(char *)(((v4 + 80) >> 3) + 0x7FFF8000) < 0 )
              {
                v109 = (std::set<std::tuple<unsigned int,unsigned int,bool>> *)(v4 + 80);
                __asan_report_store1(v4 + 80, v4 + 224, v4 + 80);
              }
              *(_BYTE *)(v4 + 80) = 1;
              p_param = (__int64)quest_id;
              std::set<std::tuple<unsigned int,unsigned int,bool>>::emplace<unsigned int const&,data::QuestState &,bool>(
                v109,
                quest_id,
                quest_state_0,
                (bool *)(v4 + 80),
                v110,
                v111,
                v170);
              *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
              v108 = 1;
            }
            *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = -8;
            if ( !v108 )
            {
              v97 = 0;
              goto LABEL_296;
            }
          }
        }
        __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 800));
      }
    }
    v112 = 1;
LABEL_300:
    *(_WORD *)(((v4 + 1792) >> 3) + 0x7FFF8000) = -1800;
    *(_BYTE *)(((v4 + 736) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 768) >> 3) + 0x7FFF8000) = -8;
    v113 = v112 == 1;
    std::vector<std::pair<data::QuestState,std::vector const*<data::QuestExec,std::allocator<std::vector const>>>>::~vector((std::vector<std::pair<data::QuestState,const std::vector<data::QuestExec>*>> *const)(v4 + 2016));
    v46 = v113;
LABEL_301:
    std::vector<std::pair<data::QuestState,std::vector const*<data::QuestContent,std::allocator<std::vector const>>>>::~vector((std::vector<std::pair<data::QuestState,const std::vector<data::QuestContent>*>> *const)(v4 + 1952));
    v114 = ((v4 + 2016) >> 3) + 2147450880;
    *(_WORD *)v114 = -1800;
    *(_BYTE *)(v114 + 2) = -8;
    v16 = v46;
LABEL_302:
    v115 = ((v4 + 1952) >> 3) + 2147450880;
    *(_WORD *)v115 = -1800;
    *(_BYTE *)(v115 + 2) = -8;
    if ( !v16 )
    {
      v116 = 0;
      goto LABEL_306;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false> *const)(v4 + 320));
  }
  v116 = 1;
LABEL_306:
  *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) = -8;
  if ( v116 == 1 )
  {
    __for_range_8 = (std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *)(v4 + 3280);
    *(_BYTE *)(((v4 + 1280) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 1280) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 1280, p_param);
    *(std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::iterator *)(v4 + 1280) = std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::begin(__for_range_8);
    *(_BYTE *)(((v4 + 1312) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 1312) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 1312, p_param);
    *(std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::iterator *)(v4 + 1312) = std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::end(__for_range_8);
    while ( 1 )
    {
      v117 = (char *)(v4 + 1312);
      if ( !std::__detail::operator!=<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false> *)(v4 + 1280),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false> *)(v4 + 1312)) )
        break;
      v210 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false,false> *const)(v4 + 1280));
      quest_content_id = std::get<0ul,unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>>>(v210);
      from_quest_state_set = (std::tuple_element<1,const std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> > >::type *)std::get<1ul,unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>>>(v210);
      *(_BYTE *)(((v4 + 1344) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 1344) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 1344, v117);
      *(std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::iterator *)(v4 + 1344) = std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::find((std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3184), quest_content_id);
      *(_BYTE *)(((v4 + 1376) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 1376) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 1376, quest_content_id);
      *(std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::iterator *)(v4 + 1376) = std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::end((std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3184));
      v118 = (char *)(v4 + 1376);
      v119 = std::__detail::operator!=<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>>>,false>(
               (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false> *)(v4 + 1344),
               (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false> *)(v4 + 1376));
      *(_BYTE *)(((v4 + 1376) >> 3) + 0x7FFF8000) = -8;
      if ( v119 )
      {
        *(_BYTE *)(((v4 + 1408) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v4 + 1408) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v4 + 1408, v118);
        *(std::set<std::tuple<unsigned int,unsigned int,bool>>::iterator *)(v4 + 1408) = std::set<std::tuple<unsigned int,unsigned int,bool>>::begin(from_quest_state_set);
        *(_BYTE *)(((v4 + 1440) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v4 + 1440) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v4 + 1440, v118);
        *(std::set<std::tuple<unsigned int,unsigned int,bool>>::iterator *)(v4 + 1440) = std::set<std::tuple<unsigned int,unsigned int,bool>>::end(from_quest_state_set);
        while ( std::operator!=(
                  (const std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> >::_Self *)(v4 + 1408),
                  (const std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> >::_Self *)(v4 + 1440)) )
        {
          *(_WORD *)(((v4 + 1664) >> 3) + 0x7FFF8000) = 1024;
          n = (unsigned __int64)std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool>>::operator*((const std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> > *const)(v4 + 1408));
          if ( *(char *)(((v4 + 1664) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 1675) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 117) & 7) >= *(_BYTE *)(((v4 + 1675) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 1664, 12LL);
          }
          v121 = ((_DWORD)n + 11) & 7;
          if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
          {
            v121 = 12LL;
            n = __asan_report_load_n(n, 12LL);
          }
          *(_QWORD *)(v4 + 1664) = *(_QWORD *)n;
          *(_DWORD *)(v4 + 1672) = *(_DWORD *)(n + 8);
          quest_id_0 = std::get<0ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1664));
          quest_state_1 = std::get<1ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1664));
          is_exec = std::get<2ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1664));
          __for_range_10 = &std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false,false> *const)(v4 + 1344))->second;
          *(_BYTE *)(((v4 + 1472) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v4 + 1472) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 1472, v121);
          *(std::set<std::tuple<unsigned int,unsigned int,bool>>::iterator *)(v4 + 1472) = std::set<std::tuple<unsigned int,unsigned int,bool>>::begin(__for_range_10);
          *(_BYTE *)(((v4 + 1504) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v4 + 1504) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v4 + 1504, v121);
          *(std::set<std::tuple<unsigned int,unsigned int,bool>>::iterator *)(v4 + 1504) = std::set<std::tuple<unsigned int,unsigned int,bool>>::end(__for_range_10);
          while ( std::operator!=(
                    (const std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> >::_Self *)(v4 + 1472),
                    (const std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> >::_Self *)(v4 + 1504)) )
          {
            *(_WORD *)(((v4 + 1696) >> 3) + 0x7FFF8000) = 1024;
            v122 = (unsigned __int64)std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool>>::operator*((const std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> > *const)(v4 + 1472));
            if ( *(char *)(((v4 + 1696) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1707) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 96 + 11) & 7) >= *(_BYTE *)(((v4 + 1707) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1696, 12LL);
            }
            if ( (char)(v122 & 7) >= *(_BYTE *)((v122 >> 3) + 0x7FFF8000) && *(_BYTE *)((v122 >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((v122 + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((v122 + 11) & 7) >= *(_BYTE *)(((v122 + 11) >> 3) + 0x7FFF8000) )
            {
              v122 = __asan_report_load_n(v122, 12LL);
            }
            *(_QWORD *)(v4 + 1696) = *(_QWORD *)v122;
            *(_DWORD *)(v4 + 1704) = *(_DWORD *)(v122 + 8);
            target_quest_id = std::get<0ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1696));
            target_quest_state = std::get<1ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1696));
            v123 = std::get<2ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1696));
            is_target_exec = v123;
            v124 = (unsigned __int8)v123 & 7;
            v125 = (*(_BYTE *)(((unsigned __int64)v123 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v124 >= *(_BYTE *)(((unsigned __int64)v123 >> 3) + 0x7FFF8000));
            if ( (_BYTE)v125 )
              __asan_report_load1(v123, v124, v125);
            v126 = *is_target_exec;
            if ( *(_BYTE *)(((unsigned __int64)target_quest_state >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)target_quest_state & 7) + 3) >= *(_BYTE *)(((unsigned __int64)target_quest_state >> 3)
                                                                                   + 0x7FFF8000) )
            {
              v126 = (char)target_quest_state;
              __asan_report_load4(target_quest_state);
            }
            v127 = *target_quest_state;
            if ( *(_BYTE *)(((unsigned __int64)target_quest_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)target_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)target_quest_id >> 3)
                                                                                + 0x7FFF8000) )
            {
              v126 = (char)target_quest_id;
              __asan_report_load4(target_quest_id);
            }
            v128 = *target_quest_id;
            v129 = (*(_BYTE *)(((unsigned __int64)is_exec >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)(((unsigned __int8)is_exec & 7) >= *(_BYTE *)(((unsigned __int64)is_exec >> 3) + 0x7FFF8000));
            if ( (_BYTE)v129 )
            {
              v126 = (char)is_exec;
              __asan_report_load1(is_exec, v127, v129);
            }
            v130 = *is_exec;
            if ( *(_BYTE *)(((unsigned __int64)quest_state_1 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)quest_state_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_state_1 >> 3)
                                                                              + 0x7FFF8000) )
            {
              v126 = (char)quest_state_1;
              __asan_report_load4(quest_state_1);
            }
            v131 = *quest_state_1;
            if ( *(_BYTE *)(((unsigned __int64)quest_id_0 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)quest_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id_0 >> 3)
                                                                           + 0x7FFF8000) )
            {
              v126 = (char)quest_id_0;
              __asan_report_load4(quest_id_0);
            }
            QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
              (const QuestExcelConfigMgr::checkQuestDependency::<lambda(bool, uint32_t, uint32_t, bool, uint32_t, uint32_t, bool)> *const)(v4 + 288),
              1,
              *quest_id_0,
              v131,
              v130,
              v128,
              v127,
              v126);
            std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool>>::operator++((std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> > *const)(v4 + 1472));
          }
          *(_WORD *)(((v4 + 1696) >> 3) + 0x7FFF8000) = -1800;
          *(_BYTE *)(((v4 + 1472) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v4 + 1504) >> 3) + 0x7FFF8000) = -8;
          std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool>>::operator++((std::_Rb_tree_const_iterator<std::tuple<unsigned int,unsigned int,bool> > *const)(v4 + 1408));
        }
        *(_WORD *)(((v4 + 1664) >> 3) + 0x7FFF8000) = -1800;
        *(_BYTE *)(((v4 + 1408) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 1440) >> 3) + 0x7FFF8000) = -8;
      }
      *(_BYTE *)(((v4 + 1344) >> 3) + 0x7FFF8000) = -8;
      std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::tuple<unsigned int,unsigned int,bool>> >,false,false> *const)(v4 + 1280));
    }
    *(_BYTE *)(((v4 + 1280) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 1312) >> 3) + 0x7FFF8000) = -8;
    v132 = ((v4 + 2144) >> 3) + 2147450880;
    *(_WORD *)v132 = 0;
    *(_BYTE *)(v132 + 2) = 0;
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 2144));
    v133 = ((v4 + 3376) >> 3) + 2147450880;
    *(_DWORD *)v133 = 0;
    *(_WORD *)(v133 + 4) = 0;
    *(_BYTE *)(v133 + 6) = 0;
    std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool>>,std::equal_to<std::tuple<unsigned int,unsigned int,bool>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>>>::unordered_map((std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool> >,std::equal_to<std::tuple<unsigned int,unsigned int,bool> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int> > > *const)(v4 + 3376));
    v134 = ((v4 + 3472) >> 3) + 2147450880;
    *(_DWORD *)v134 = 0;
    *(_WORD *)(v134 + 4) = 0;
    *(_BYTE *)(v134 + 6) = 0;
    std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>>::unordered_map((std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>> *const)(v4 + 3472));
    *(_WORD *)(((v4 + 1856) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 1856) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 1856, v117);
    *(_QWORD *)(v4 + 1856) = v4 + 3376;
    if ( *(_BYTE *)(((v4 + 1864) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 1864, v117);
    *(_QWORD *)(v4 + 1864) = v4 + 3472;
    v135 = std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>::size((const std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> *const)(v4 + 1888));
    std::vector<std::pair<unsigned int,unsigned int>>::reserve(
      (std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 2144),
      v135);
    __for_range_11 = (std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> *)(v4 + 1888);
    *(_BYTE *)(((v4 + 1536) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 1536) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 1536, v135);
    *(std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >>::iterator *)(v4 + 1536) = std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>::begin(__for_range_11);
    *(_BYTE *)(((v4 + 1568) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 1568) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 1568, v135);
    *(std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >>::iterator *)(v4 + 1568) = std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>::end(__for_range_11);
    while ( __gnu_cxx::operator!=<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>> *,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>>(
              (const __gnu_cxx::__normal_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >*,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> > *)(v4 + 1536),
              (const __gnu_cxx::__normal_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >*,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> > *)(v4 + 1568)) )
    {
      v208 = __gnu_cxx::__normal_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>> *,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >*,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> > *const)(v4 + 1536));
      from_quest_state = (std::tuple_element<0,const std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> > >::type *)std::get<0ul,std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>(v208);
      v136 = std::get<1ul,std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>(v208);
      *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) = 4;
      v137 = v136;
      v138 = QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(std::tuple<unsigned int,unsigned int,bool> const&)#3}::operator()(
               (const QuestExcelConfigMgr::checkQuestDependency::<lambda(const QuestStateNode&)> *const)(v4 + 1856),
               v136);
      v139 = *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000);
      if ( v139 != 0 && v139 <= 3 )
      {
        LOBYTE(v137) = v139 != 0;
        __asan_report_store4(v4 + 256, v137);
      }
      *(_DWORD *)(v4 + 256) = v138;
      *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) = 4;
      v140 = from_quest_state;
      v141 = QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(std::tuple<unsigned int,unsigned int,bool> const&)#3}::operator()(
               (const QuestExcelConfigMgr::checkQuestDependency::<lambda(const QuestStateNode&)> *const)(v4 + 1856),
               from_quest_state);
      v143 = *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000);
      if ( v143 != 0 && v143 <= 3 )
      {
        LOBYTE(v140) = v143 != 0;
        __asan_report_store4(v4 + 240, v140);
      }
      *(_DWORD *)(v4 + 240) = v141;
      std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned int,unsigned int>(
        (std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 2144),
        (unsigned int *)(v4 + 240),
        (unsigned int *)(v4 + 256),
        (unsigned int *)(v4 + 240),
        v142);
      *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) = -8;
      __gnu_cxx::__normal_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>> *,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >*,std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> > *const)(v4 + 1536));
    }
    *(_BYTE *)(((v4 + 1536) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 1568) >> 3) + 0x7FFF8000) = -8;
    v144 = ((v4 + 2208) >> 3) + 2147450880;
    *(_WORD *)v144 = 0;
    *(_BYTE *)(v144 + 2) = 0;
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 2208));
    *(_DWORD *)(((v4 + 2848) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v4 + 2848);
    if ( common::tools::AlgorithmUtils::hasCycle(
           (const std::vector<std::pair<unsigned int,unsigned int>> *)(v4 + 2144),
           (std::vector<unsigned int> *)(v4 + 2208),
           (std::string *)(v4 + 2848)) )
    {
      v145 = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 2208))._M_current;
      v146._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 2208))._M_current;
      std::reverse<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
        v146,
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v145);
      __asan_unpoison_stack_memory(v4 + 3568, 392LL);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 3568);
      __for_range_12 = (std::vector<unsigned int> *)(v4 + 2208);
      *(_BYTE *)(((v4 + 1600) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 1600) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 1600, 392LL);
      *(std::vector<unsigned int>::iterator *)(v4 + 1600) = std::vector<unsigned int>::begin(__for_range_12);
      *(_BYTE *)(((v4 + 1632) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 1632) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 1632, 392LL);
      *(std::vector<unsigned int>::iterator *)(v4 + 1632) = std::vector<unsigned int>::end(__for_range_12);
      while ( 1 )
      {
        v147 = (char *)(v4 + 1632);
        if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 1600),
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 1632)) )
          break;
        *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) = 4;
        v148 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 1600));
        v149 = (int *)v148;
        if ( *(_BYTE *)(((unsigned __int64)v148 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v148 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v148 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v148);
        }
        v150 = *v149;
        v151 = *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000);
        if ( v151 != 0 && v151 <= 3 )
        {
          LOBYTE(v147) = v151 != 0;
          __asan_report_store4(v4 + 272, v147);
        }
        *(_DWORD *)(v4 + 272) = v150;
        *(_WORD *)(((v4 + 1728) >> 3) + 0x7FFF8000) = 1024;
        v152 = (unsigned __int64)std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>>::operator[](
                                   (std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>> *const)(v4 + 3472),
                                   (const std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>>::key_type *)(v4 + 272));
        if ( *(char *)(((v4 + 1728) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 1739) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 11) & 7) >= *(_BYTE *)(((v4 + 1739) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 1728, 12LL);
        }
        if ( (char)(v152 & 7) >= *(_BYTE *)((v152 >> 3) + 0x7FFF8000) && *(_BYTE *)((v152 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((v152 + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((v152 + 11) & 7) >= *(_BYTE *)(((v152 + 11) >> 3) + 0x7FFF8000) )
        {
          v152 = __asan_report_load_n(v152, 12LL);
        }
        *(_QWORD *)(v4 + 1728) = *(_QWORD *)v152;
        *(_DWORD *)(v4 + 1736) = *(_DWORD *)(v152 + 8);
        quest_id_1 = std::get<0ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1728));
        quest_state_3 = std::get<1ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1728));
        is_exec_0 = std::get<2ul,unsigned int,unsigned int,bool>((std::tuple<unsigned int,unsigned int,bool> *)(v4 + 1728));
        v153 = std::operator<<<std::char_traits<char>>(v4 + 3584, "(quest_id:");
        if ( *(_BYTE *)(((unsigned __int64)quest_id_1 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)quest_id_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id_1 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(quest_id_1);
        }
        v154 = std::ostream::operator<<(v153, *quest_id_1);
        v155 = std::operator<<<std::char_traits<char>>(v154, ",state:");
        if ( *(_BYTE *)(((unsigned __int64)quest_state_3 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)quest_state_3 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_state_3 >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4(quest_state_3);
        }
        v158 = *quest_state_3;
        v156 = std::ostream::operator<<(v155, v158);
        v157 = *(_BYTE *)(((unsigned __int64)is_exec_0 >> 3) + 0x7FFF8000);
        LOBYTE(v158) = v157 != 0;
        v159 = (v157 != 0) & (unsigned __int8)(((unsigned __int8)is_exec_0 & 7) >= v157);
        if ( (_BYTE)v159 )
          __asan_report_load1(is_exec_0, v158, v159);
        if ( *is_exec_0 )
          v160 = ",by_exec";
        else
          v160 = byte_1A3FEBE0;
        v161 = std::operator<<<std::char_traits<char>>(v156, v160);
        std::operator<<<std::char_traits<char>>(v161, ")");
        *(_WORD *)(((v4 + 1728) >> 3) + 0x7FFF8000) = -1800;
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 1600));
      }
      *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 1600) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 1632) >> 3) + 0x7FFF8000) = -8;
      *(_DWORD *)(((v4 + 2912) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 2912) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 2943) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 2943) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 2912, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 2912),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkQuestDependency",
        1553);
      v162 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v4 + 2912),
               (const char (*)[16])"[CONFIG_ERROR] ");
      v163 = common::milog::MiLogStream::operator<<<char [86],(char *[86])0>(
               v162,
               (const char (*)[86])"QuestState:[1.unstarted 2.unfinished 3.finished 4.failed] quest dependency has cycle:");
      *(_DWORD *)(((v4 + 2976) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 2976) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 3007) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 3007) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 2976, 32LL);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v4 + 2976, v4 + 3568);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v163, (const std::string *)(v4 + 2976));
      std::string::~string((void *)(v4 + 2976));
      *(_DWORD *)(((v4 + 2976) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2912));
      *(_DWORD *)(((v4 + 2912) >> 3) + 0x7FFF8000) = -117901064;
      v176 = -1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 3568);
      __asan_poison_stack_memory(v4 + 3568, 392LL);
    }
    else if ( (unsigned __int8)std::string::empty() != 1 )
    {
      *(_DWORD *)(((v4 + 3040) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 3040) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 3071) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 64 + 63) & 7) >= *(_BYTE *)(((v4 + 3071) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 3040, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 3040),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkQuestDependency",
        1558);
      v164 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v4 + 3040),
               (const char (*)[16])"[CONFIG_ERROR] ");
      v165 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
               v164,
               (const char (*)[34])"quest cycle check error err_msg: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v165, (const std::string *)(v4 + 2848));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 3040));
      *(_DWORD *)(((v4 + 3040) >> 3) + 0x7FFF8000) = -117901064;
      v176 = -1;
    }
    else
    {
      v176 = 0;
    }
    std::string::~string((void *)(v4 + 2848));
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 2208));
    std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>>::~unordered_map((std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>> *const)(v4 + 3472));
    std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool>>,std::equal_to<std::tuple<unsigned int,unsigned int,bool>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>>>::~unordered_map((std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool> >,std::equal_to<std::tuple<unsigned int,unsigned int,bool> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int> > > *const)(v4 + 3376));
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v4 + 2144));
    v166 = ((v4 + 3376) >> 3) + 2147450880;
    *(_DWORD *)v166 = -117901064;
    *(_WORD *)(v166 + 4) = -1800;
    *(_BYTE *)(v166 + 6) = -8;
    v167 = ((v4 + 3472) >> 3) + 2147450880;
    *(_DWORD *)v167 = -117901064;
    *(_WORD *)(v167 + 4) = -1800;
    *(_BYTE *)(v167 + 6) = -8;
    *(_WORD *)(((v4 + 1856) >> 3) + 0x7FFF8000) = -1800;
    v168 = ((v4 + 2208) >> 3) + 2147450880;
    *(_WORD *)v168 = -1800;
    *(_BYTE *)(v168 + 2) = -8;
    *(_DWORD *)(((v4 + 2848) >> 3) + 0x7FFF8000) = -117901064;
  }
  std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::~unordered_map((std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3280));
  std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>>::~unordered_map((std::unordered_map<unsigned int,std::set<std::tuple<unsigned int,unsigned int,bool>>> *const)(v4 + 3184));
  std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>::~vector((std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> *const)(v4 + 1888));
  if ( v220 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8188) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 400) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v4 >> 3) + 0x7FFF8194) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF81A0) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF81F0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862826) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147451296 - (((_DWORD)v6 + 2147451304) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_6(v4, 4032LL, v220);
  }
  return v176;
};

// Line 1296: range 000000000EF0162A-000000000EF0196B
void __fastcall QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator()(
        unsigned __int64 __closure,
        __int64 is_state_equal,
        uint32_t pre_quest_id,
        uint32_t pre_quest_state,
        unsigned int *is_pre_exec,
        bool *cur_quest_id,
        uint32_t cur_quest_state,
        char is_cur_exec)
{
  unsigned __int64 v8; // r13
  __int64 v9; // rax
  _DWORD *v10; // r12
  std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> *v11; // r14
  unsigned int *v12; // r8
  bool *v13; // r9
  std::tuple<unsigned int,unsigned int,bool> *v14; // rcx
  std::tuple<unsigned int,unsigned int,bool> *v15; // r8
  bool *v16; // [rsp+0h] [rbp-110h]
  bool *v17; // [rsp+0h] [rbp-110h]
  char v18; // [rsp+8h] [rbp-108h]
  char v21[240]; // [rsp+20h] [rbp-F0h] BYREF

  HIDWORD(v16) = (_DWORD)cur_quest_id;
  v18 = (char)is_pre_exec;
  LOBYTE(v16) = is_cur_exec;
  v8 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v9 = __asan_stack_malloc_2(192LL);
    if ( v9 )
      v8 = v9;
  }
  *(_QWORD *)v8 = 1102416563LL;
  *(_QWORD *)(v8 + 8) = "8 32 1 16 is_pre_exec:1296 48 1 16 is_cur_exec:1296 64 4 10 state:1298 80 4 17 pre_quest_id:1296"
                        " 96 4 17 cur_quest_id:1296 112 4 20 cur_quest_state:1296 128 12 9 <unknown> 160 12 9 <unknown>";
  *(_QWORD *)(v8 + 16) = QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(bool,unsigned int,unsigned int,bool,unsigned int,unsigned int,bool)#1}::operator();
  v10 = (_DWORD *)(v8 >> 3);
  v10[536862720] = -235802127;
  v10[536862721] = -234753535;
  v10[536862722] = -234556924;
  v10[536862723] = -234556924;
  v10[536862724] = -219020288;
  v10[536862725] = -202177536;
  *(_DWORD *)(v8 + 80) = pre_quest_id;
  *(_BYTE *)(v8 + 32) = v18;
  *(_DWORD *)(v8 + 96) = HIDWORD(v16);
  *(_DWORD *)(v8 + 112) = cur_quest_state;
  *(_BYTE *)(v8 + 48) = is_cur_exec;
  if ( *(_BYTE *)(((v8 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v8 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v8 + 64, is_state_equal);
  for ( *(_DWORD *)(v8 + 64) = 1; ; ++*(_DWORD *)(v8 + 64) )
  {
    if ( *(_BYTE *)(((v8 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v8 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v8 + 64);
    if ( *(_DWORD *)(v8 + 64) > 4u )
      break;
    if ( (unsigned __int8)is_state_equal == (pre_quest_state == *(_DWORD *)(v8 + 64))
      && (*(_BYTE *)(v8 + 32) != 1 || *(_DWORD *)(v8 + 64) > 1u) )
    {
      if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      v11 = *(std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool> >> **)__closure;
      *(_WORD *)(((v8 + 160) >> 3) + 0x7FFF8000) = 1024;
      std::tuple<unsigned int,unsigned int,bool>::tuple<unsigned int &,unsigned int &,bool &,true>(
        (std::tuple<unsigned int,unsigned int,bool> *const)(v8 + 160),
        (unsigned int *)(v8 + 96),
        (unsigned int *)(v8 + 112),
        (unsigned int *)(v8 + 48),
        is_pre_exec,
        cur_quest_id,
        v16);
      *(_WORD *)(((v8 + 128) >> 3) + 0x7FFF8000) = 1024;
      std::tuple<unsigned int,unsigned int,bool>::tuple<unsigned int &,unsigned int &,bool &,true>(
        (std::tuple<unsigned int,unsigned int,bool> *const)(v8 + 128),
        (unsigned int *)(v8 + 80),
        (unsigned int *)(v8 + 64),
        (unsigned int *)(v8 + 32),
        v12,
        v13,
        v17);
      std::vector<std::pair<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>>::emplace_back<std::tuple<unsigned int,unsigned int,bool>,std::tuple<unsigned int,unsigned int,bool>>(
        v11,
        (std::tuple<unsigned int,unsigned int,bool> *)(v8 + 128),
        (std::tuple<unsigned int,unsigned int,bool> *)(v8 + 160),
        v14,
        v15);
      *(_WORD *)(((v8 + 128) >> 3) + 0x7FFF8000) = -1800;
      *(_WORD *)(((v8 + 160) >> 3) + 0x7FFF8000) = -1800;
    }
    if ( *(_BYTE *)(((v8 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v8 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v8 + 64);
  }
  if ( v21 == (char *)v8 )
  {
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v8 = 1172321806LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1447: range 000000000EF0196C-000000000EF019F1
bool __cdecl QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(std::pair const&<unsigned int,std::unordered_map const const*>,std::pair const&<unsigned int,std::unordered_map const const*>)#2}::operator()(
        const QuestExcelConfigMgr::checkQuestDependency::<lambda(const QuestOrder&, const QuestOrder&)> *const __closure,
        const QuestExcelConfigMgr::checkQuestDependency::<lambda(const QuestOrder&, const QuestOrder&)>::operator()::QuestOrder *lhs,
        const QuestExcelConfigMgr::checkQuestDependency::<lambda(const QuestOrder&, const QuestOrder&)>::operator()::QuestOrder *rhs)
{
  unsigned int first; // ecx

  if ( *(_BYTE *)(((unsigned __int64)lhs >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)lhs >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(lhs);
  }
  first = lhs->first;
  if ( *(_BYTE *)(((unsigned __int64)rhs >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)rhs >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(rhs);
  }
  return first > rhs->first;
};

// Line 1524: range 000000000EF019F2-000000000EF01DB0
unsigned int __cdecl QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(std::tuple<unsigned int,unsigned int,bool> const&)#3}::operator()(
        const QuestExcelConfigMgr::checkQuestDependency::<lambda(const QuestStateNode&)> *const __closure,
        const QuestExcelConfigMgr::checkQuestDependency::QuestStateNode *quest_state_node)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int v5; // ecx
  unsigned int *v6; // r8
  char v7; // al
  std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool> >,std::equal_to<std::tuple<unsigned int,unsigned int,bool> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int> > > *quest_state_index_map; // rax
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,false,true>,bool> >::type *v9; // rax
  const std::tuple<unsigned int,unsigned int,bool> *v10; // r8
  char v11; // r14
  __int64 v12; // rsi
  __int64 v13; // rdx
  std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool> >,std::equal_to<std::tuple<unsigned int,unsigned int,bool> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int> > > *v14; // rax
  char v15; // dl
  std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,false,true>::pointer v16; // rdx
  unsigned int *p_second; // rax
  unsigned int result; // eax
  const std::tuple<unsigned int,unsigned int,bool> *quest_state_nodea; // [rsp+0h] [rbp-D0h]
  std::tuple_element<0,std::pair<std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,false,true>,bool> >::type *iter; // [rsp+10h] [rbp-C0h]
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,false,true>,bool> >::type *inserted; // [rsp+18h] [rbp-B8h]
  char v22[176]; // [rsp+20h] [rbp-B0h] BYREF

  quest_state_nodea = quest_state_node;
  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 new_index:1526 64 8 9 <unknown> 96 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::checkQuestDependency(TxtConfigMgr const&,std::unordered_map<unsigned int,data::MainQuestExcelConfig> const&,std::unordered_map const&<unsigned int,data::QuestExcelConfig,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const,std::unordered_map const>>>)const::{lambda(std::tuple<unsigned int,unsigned int,bool> const&)#3}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v5 = std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool>>,std::equal_to<std::tuple<unsigned int,unsigned int,bool>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>>>::size(__closure->__quest_state_index_map)
     + 1;
  v7 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(quest_state_node) = v7 != 0;
    __asan_report_store4(v2 + 48, quest_state_node);
  }
  *(_DWORD *)(v2 + 48) = v5;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  quest_state_index_map = __closure->__quest_state_index_map;
  if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    quest_state_index_map = (std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool> >,std::equal_to<std::tuple<unsigned int,unsigned int,bool> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int> > > *)__asan_report_store16();
  *(std::pair<std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,false,true>,bool> *)(v2 + 96) = std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool>>,std::equal_to<std::tuple<unsigned int,unsigned int,bool>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>>>::emplace<std::tuple<unsigned int,unsigned int,bool> const&,unsigned int &>(quest_state_index_map, quest_state_nodea, (unsigned int *)(v2 + 48), quest_state_nodea, v6);
  iter = std::get<0ul,std::__detail::_Node_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>,false,true>,bool>((std::pair<std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,false,true>,bool> *)(v2 + 96));
  v9 = std::get<1ul,std::__detail::_Node_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>,false,true>,bool>((std::pair<std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,false,true>,bool> *)(v2 + 96));
  inserted = v9;
  v11 = 0;
  v12 = (unsigned __int8)v9 & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_load1(v9, v12, v13);
  if ( *inserted )
    goto LABEL_21;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v14 = __closure->__quest_state_index_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    v14 = (std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool> >,std::equal_to<std::tuple<unsigned int,unsigned int,bool> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int> > > *)__asan_report_store8(v2 + 64, v12);
  *(std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool> >,std::equal_to<std::tuple<unsigned int,unsigned int,bool> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int> > >::iterator *)(v2 + 64) = std::unordered_map<std::tuple<unsigned int,unsigned int,bool>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,bool>>,std::equal_to<std::tuple<unsigned int,unsigned int,bool>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>>>::end(v14);
  v11 = 1;
  if ( std::__detail::operator!=<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>,true>(
         iter,
         (const std::__detail::_Node_iterator_base<std::pair<const std::tuple<unsigned int,unsigned int,bool>,unsigned int>,true> *)(v2 + 64)) )
  {
    v15 = 1;
  }
  else
  {
LABEL_21:
    v15 = 0;
  }
  if ( v11 )
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v15 )
  {
    v16 = std::__detail::_Node_iterator<std::pair<std::tuple<unsigned int,unsigned int,bool> const,unsigned int>,false,true>::operator->(iter);
    p_second = &v16->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v16->second;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__index_quest_state_map >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__index_quest_state_map);
    std::unordered_map<unsigned int,std::tuple<unsigned int,unsigned int,bool>>::emplace<unsigned int &,std::tuple<unsigned int,unsigned int,bool> const&>(
      __closure->__index_quest_state_map,
      (unsigned int *)(v2 + 48),
      quest_state_nodea,
      (unsigned int *)(v2 + 48),
      v10);
    if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v2 + 48);
    result = *(_DWORD *)(v2 + 48);
  }
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1565: range 000000000EF07676-000000000EF09D5A
int32_t __cdecl QuestExcelConfigMgr::checkExecRollback(
        const QuestExcelConfigMgr *const this,
        const data::QuestExcelConfig *config)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char *v6; // rsi
  int v7; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  const QuestExcelConfigMgr *v15; // rdx
  int v16; // eax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::vector<data::QuestContent>::const_iterator v22; // rax
  QuestExcelConfigMgr::checkExecRollback::<lambda(const data::QuestContent&, const data::QuestContent&)> v23; // cl
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  uint32_t main_id; // ecx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  __int64 v35; // rsi
  __int64 v36; // rdx
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  uint32_t sub_id; // ecx
  std::vector<data::QuestContent> *p_fail_cond; // rcx
  char v41; // al
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  int v48; // edx
  const char *v49; // rsi
  int v50; // eax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  const std::string *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  const QuestExcelConfigMgr *v58; // rdx
  int v59; // eax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  uint32_t v65; // ecx
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  __int64 v71; // rsi
  __int64 v72; // rdx
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  uint32_t v75; // ecx
  std::vector<data::QuestContent> *p_finish_cond; // rcx
  char v77; // al
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  int v84; // edx
  int v85; // eax
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  const std::string *v89; // rax
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rax
  int v93; // eax
  uint32_t v94; // ecx
  common::milog::MiLogStream *v95; // rax
  common::milog::MiLogStream *v96; // rax
  int v97; // eax
  const data::QuestContent *__first2; // [rsp+0h] [rbp-640h]
  std::vector<data::QuestContent>::size_type __last1; // [rsp+8h] [rbp-638h]
  const data::QuestContent *__last1a; // [rsp+8h] [rbp-638h]
  std::vector<data::QuestExec> *__for_range; // [rsp+30h] [rbp-610h]
  const data::QuestExec *exec; // [rsp+38h] [rbp-608h]
  const data::QuestExcelConfig *roll_quest_config_ptr; // [rsp+40h] [rbp-600h]
  std::vector<data::QuestExec> *__for_range_0; // [rsp+48h] [rbp-5F8h]
  const data::QuestExec *exec_0; // [rsp+50h] [rbp-5F0h]
  const data::QuestExcelConfig *roll_quest_config_ptr_0; // [rsp+58h] [rbp-5E8h]
  std::vector<data::QuestExec> *__for_range_1; // [rsp+60h] [rbp-5E0h]
  const data::QuestExec *exec_1; // [rsp+68h] [rbp-5D8h]
  char v111[1488]; // [rsp+70h] [rbp-5D0h] BYREF

  v3 = (unsigned __int64)v111;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1440LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "27 48 4 13 quest_id:1578 64 4 13 quest_id:1638 80 4 13 quest_id:1686 96 8 16 __for_begin:1567 12"
                        "8 8 14 __for_end:1567 160 8 16 __for_begin:1627 192 8 14 __for_end:1627 224 8 16 __for_begin:167"
                        "5 256 8 14 __for_end:1675 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unk"
                        "nown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unkn"
                        "own> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unk"
                        "nown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecRollback;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862730] = -218959118;
  v5[536862732] = -218959118;
  v5[536862734] = -218959118;
  v5[536862736] = -218959118;
  v5[536862738] = -218959118;
  v5[536862740] = -218959118;
  v5[536862742] = -218959118;
  v5[536862744] = -218959118;
  v5[536862746] = -218959118;
  v5[536862748] = -218959118;
  v5[536862750] = -218959118;
  v5[536862752] = -218959118;
  v5[536862754] = -218959118;
  v5[536862756] = -218959118;
  v5[536862758] = -218959118;
  v5[536862760] = -218959118;
  v5[536862762] = -218959118;
  v5[536862764] = -202116109;
  __for_range = &config->fail_exec;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, config);
  *(std::vector<data::QuestExec>::const_iterator *)(v3 + 96) = std::vector<data::QuestExec>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, config);
  *(std::vector<data::QuestExec>::const_iterator *)(v3 + 128) = std::vector<data::QuestExec>::end(__for_range);
  while ( 1 )
  {
    v6 = (const char *)(v3 + 128);
    if ( !__gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
            (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 96),
            (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 128)) )
      break;
    exec = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    if ( exec->type == QUEST_EXEC_ROLLBACK_QUEST )
    {
      if ( std::vector<std::string>::empty(&exec->param) )
      {
        *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 288, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 288),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRollback",
          1575);
        v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v3 + 288),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])"quest_id: ");
        v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &config->sub_id);
        v6 = " fail rollback param invalid";
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
          v10,
          (const char (*)[29])" fail rollback param invalid");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
        *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v7 = 1;
      }
      else
      {
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 48, v6);
        *(_DWORD *)(v3 + 48) = 0;
        v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
        {
          *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 352) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 352, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 352),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRollback",
            1581);
          v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 352),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])"quest_id: ");
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &config->sub_id);
          v6 = " fail rollback param invalid";
          common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            v14,
            (const char (*)[29])" fail rollback param invalid");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 352));
          *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v7 = 1;
        }
        else
        {
          v15 = this;
          v16 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
          if ( (_BYTE)v16 != 0 && (char)v16 <= 3 )
            __asan_report_load4(v3 + 48);
          roll_quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(v15, *(unsigned int *)(v3 + 48));
          if ( roll_quest_config_ptr )
          {
            __last1 = std::vector<data::QuestContent>::size(&config->fail_cond);
            if ( __last1 == std::vector<data::QuestContent>::size(&roll_quest_config_ptr->finish_cond)
              && (__first2 = std::vector<data::QuestContent>::begin(&roll_quest_config_ptr->finish_cond)._M_current,
                  __last1a = std::vector<data::QuestContent>::end(&config->fail_cond)._M_current,
                  v22._M_current = std::vector<data::QuestContent>::begin(&config->fail_cond)._M_current,
                  std::equal<__gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>,__gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>,QuestExcelConfigMgr::checkExecRollback(data::QuestExcelConfig const&)::{lambda(data::QuestContent const&,data::QuestContent const&)#1}>(
                    v22,
                    (__gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> >)__last1a,
                    (__gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> >)__first2,
                    v23)) )
            {
              *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 96 + 95) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 480, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 480),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecRollback",
                1599);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 480),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      v24,
                      (const char (*)[10])"quest_id:");
              v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &config->sub_id);
              v27 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      v26,
                      (const char (*)[47])byte_1A45C5A0);
              v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v27,
                      (const unsigned int *)(v3 + 48));
              v6 = byte_1A45C600;
              common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v28, (const char (*)[23])byte_1A45C600);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
              *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v7 = 1;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&config->main_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->main_id >> 3)
                                                                      + 0x7FFF8000) )
              {
                __asan_report_load4(&config->main_id);
              }
              main_id = config->main_id;
              if ( *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)roll_quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr->main_id >> 3)
                                                                                     + 0x7FFF8000) )
              {
                __asan_report_load4(&roll_quest_config_ptr->main_id);
              }
              if ( main_id == roll_quest_config_ptr->main_id )
              {
                v35 = ((_BYTE)roll_quest_config_ptr - 66) & 7;
                v36 = (*(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v35 >= *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr->is_rewind >> 3) + 0x7FFF8000));
                if ( (_BYTE)v36 )
                  __asan_report_load1(&roll_quest_config_ptr->is_rewind, v35, v36);
                if ( !roll_quest_config_ptr->is_rewind )
                {
                  *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 608, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 608),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkExecRollback",
                    1611);
                  v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 608),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v38 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                          v37,
                          (const char (*)[65])byte_1A45C680);
                  v6 = (const char *)(v3 + 48);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v38,
                    (const unsigned int *)(v3 + 48));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 608));
                  *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v7 = 1;
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&config->sub_id);
                  }
                  sub_id = config->sub_id;
                  if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v3 + 48);
                  if ( sub_id != *(_DWORD *)(v3 + 48) )
                    goto LABEL_58;
                  p_fail_cond = &config->fail_cond;
                  if ( *(_BYTE *)(((unsigned __int64)&config->fail_cond_comb >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&config->fail_cond_comb >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&config->fail_cond_comb);
                  }
                  if ( QuestExcelConfigMgr::canFinishImmediately(
                         this,
                         *(_DWORD *)(v3 + 48),
                         config->fail_cond_comb,
                         p_fail_cond,
                         0,
                         0) )
                  {
                    v41 = 1;
                  }
                  else
                  {
LABEL_58:
                    v41 = 0;
                  }
                  if ( v41 )
                  {
                    *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 672) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 672, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 672),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkExecRollback",
                      1617);
                    v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v3 + 672),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v43 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                            v42,
                            (const char (*)[65])byte_1A45C700);
                    v6 = (const char *)(v3 + 48);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v43,
                      (const unsigned int *)(v3 + 48));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 672));
                    *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v7 = 1;
                  }
                  else
                  {
                    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(v3 + 48);
                    }
                    v6 = (const char *)*(unsigned int *)(v3 + 48);
                    if ( (unsigned int)QuestExcelConfigMgr::checkQuestCycle(
                                         this,
                                         (uint32_t)v6,
                                         config,
                                         QUEST_STATE_FAILED) )
                    {
                      *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) != 0
                        && (char)((v3 - 96 + 95) & 7) >= *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v3 + 736, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v3 + 736),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/txt_data_manual/QuestExcelConfig.cpp",
                        "checkExecRollback",
                        1623);
                      v44 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v3 + 736),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      v45 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
                              v44,
                              (const char (*)[61])byte_1A45C780);
                      v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, &config->sub_id);
                      v47 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                              v46,
                              (const char (*)[17])byte_1A45C7E0);
                      v6 = (const char *)(v3 + 48);
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v47,
                        (const unsigned int *)(v3 + 48));
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 736));
                      *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -117901064;
                    }
                    v7 = 2;
                  }
                }
              }
              else
              {
                *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 544, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 544),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkExecRollback",
                  1606);
                v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 544),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v31 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                        v30,
                        (const char (*)[10])"quest_id:");
                v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &config->sub_id);
                v33 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                        v32,
                        (const char (*)[47])byte_1A45C5A0);
                v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v33,
                        (const unsigned int *)(v3 + 48));
                v6 = byte_1A45C640;
                common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v34, (const char (*)[22])byte_1A45C640);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 544));
                *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v7 = 1;
              }
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 416) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 416, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 416),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecRollback",
              1587);
            v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 416),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])"quest_id: ");
            v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &config->sub_id);
            v20 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    v19,
                    (const char (*)[26])" fail rollback quest_id: ");
            v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v20,
                    (const unsigned int *)(v3 + 48));
            v6 = " not found";
            common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v21, (const char (*)[11])" not found");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 416));
            *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v7 = 1;
          }
        }
      }
    }
    else
    {
      v7 = 0;
    }
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v7 && v7 != 2 )
    {
      v48 = 0;
      goto LABEL_75;
    }
    __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 96));
  }
  v48 = 1;
LABEL_75:
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v48 == 1 )
  {
    __for_range_0 = &config->finish_exec;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v6);
    *(std::vector<data::QuestExec>::const_iterator *)(v3 + 160) = std::vector<data::QuestExec>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 192, v6);
    *(std::vector<data::QuestExec>::const_iterator *)(v3 + 192) = std::vector<data::QuestExec>::end(__for_range_0);
    while ( 1 )
    {
      v49 = (const char *)(v3 + 192);
      if ( !__gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 160),
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 192)) )
        break;
      exec_0 = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&exec_0->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&exec_0->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&exec_0->type);
      }
      if ( exec_0->type == QUEST_EXEC_ROLLBACK_QUEST )
      {
        if ( std::vector<std::string>::empty(&exec_0->param) )
        {
          *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 800) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 800, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 800),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRollback",
            1635);
          v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 800),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v52 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v51, (const char (*)[11])"quest_id: ");
          v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v52, &config->sub_id);
          v49 = " fail rollback param invalid";
          common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            v53,
            (const char (*)[29])" fail rollback param invalid");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 800));
          *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v50 = 1;
        }
        else
        {
          *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 64, v49);
          *(_DWORD *)(v3 + 64) = 0;
          v54 = std::vector<std::string>::operator[](&exec_0->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v54, (unsigned int *)(v3 + 64), 1) )
          {
            *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 864) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 864, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 864),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecRollback",
              1641);
            v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 864),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v56 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v55, (const char (*)[11])"quest_id: ");
            v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, &config->sub_id);
            v49 = " fail rollback param invalid";
            common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              v57,
              (const char (*)[29])" fail rollback param invalid");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 864));
            *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v50 = 1;
          }
          else
          {
            v58 = this;
            v59 = *(unsigned __int8 *)(((v3 + 64) >> 3) + 0x7FFF8000);
            if ( (_BYTE)v59 != 0 && (char)v59 <= 3 )
              __asan_report_load4(v3 + 64);
            roll_quest_config_ptr_0 = data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                                        v58,
                                        *(unsigned int *)(v3 + 64));
            if ( roll_quest_config_ptr_0 )
            {
              if ( *(_BYTE *)(((unsigned __int64)&config->main_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->main_id >> 3)
                                                                      + 0x7FFF8000) )
              {
                __asan_report_load4(&config->main_id);
              }
              v65 = config->main_id;
              if ( *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr_0->main_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)roll_quest_config_ptr_0 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr_0->main_id >> 3)
                                                                                       + 0x7FFF8000) )
              {
                __asan_report_load4(&roll_quest_config_ptr_0->main_id);
              }
              if ( v65 == roll_quest_config_ptr_0->main_id )
              {
                v71 = ((_BYTE)roll_quest_config_ptr_0 - 66) & 7;
                v72 = (*(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr_0->is_rewind >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v71 >= *(_BYTE *)(((unsigned __int64)&roll_quest_config_ptr_0->is_rewind >> 3) + 0x7FFF8000));
                if ( (_BYTE)v72 )
                  __asan_report_load1(&roll_quest_config_ptr_0->is_rewind, v71, v72);
                if ( !roll_quest_config_ptr_0->is_rewind )
                {
                  *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 1056) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 1056, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 1056),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkExecRollback",
                    1658);
                  v73 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v3 + 1056),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v74 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                          v73,
                          (const char (*)[65])byte_1A45C680);
                  v49 = (const char *)(v3 + 64);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v74,
                    (const unsigned int *)(v3 + 64));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1056));
                  *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -117901064;
                  v2 = -1;
                  v50 = 1;
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&config->sub_id);
                  }
                  v75 = config->sub_id;
                  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v3 + 64);
                  if ( v75 != *(_DWORD *)(v3 + 64) )
                    goto LABEL_125;
                  p_finish_cond = &config->finish_cond;
                  if ( *(_BYTE *)(((unsigned __int64)&config->finish_cond_comb >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&config->finish_cond_comb >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&config->finish_cond_comb);
                  }
                  if ( QuestExcelConfigMgr::canFinishImmediately(
                         this,
                         *(_DWORD *)(v3 + 64),
                         config->finish_cond_comb,
                         p_finish_cond,
                         0,
                         0) )
                  {
                    v77 = 1;
                  }
                  else
                  {
LABEL_125:
                    v77 = 0;
                  }
                  if ( v77 )
                  {
                    *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 1120, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 1120),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkExecRollback",
                      1664);
                    v78 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v3 + 1120),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v79 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                            v78,
                            (const char (*)[65])byte_1A45C820);
                    v49 = (const char *)(v3 + 64);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v79,
                      (const unsigned int *)(v3 + 64));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1120));
                    *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
                    v2 = -1;
                    v50 = 1;
                  }
                  else
                  {
                    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(v3 + 64);
                    }
                    v49 = (const char *)*(unsigned int *)(v3 + 64);
                    if ( (unsigned int)QuestExcelConfigMgr::checkQuestCycle(
                                         this,
                                         (uint32_t)v49,
                                         config,
                                         QUEST_STATE_FINISHED) )
                    {
                      *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v3 + 1184) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) != 0
                        && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v3 + 1184, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v3 + 1184),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/txt_data_manual/QuestExcelConfig.cpp",
                        "checkExecRollback",
                        1671);
                      v80 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v3 + 1184),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      v81 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
                              v80,
                              (const char (*)[61])byte_1A45C8A0);
                      v82 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v81, &config->sub_id);
                      v83 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                              v82,
                              (const char (*)[17])byte_1A45C7E0);
                      v49 = (const char *)(v3 + 64);
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v83,
                        (const unsigned int *)(v3 + 64));
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1184));
                      *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = -117901064;
                    }
                    v50 = 2;
                  }
                }
              }
              else
              {
                *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 992) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 96 + 95) & 7) >= *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 992, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 992),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkExecRollback",
                  1653);
                v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 992),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v67 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                        v66,
                        (const char (*)[10])"quest_id:");
                v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, &config->sub_id);
                v69 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                        v68,
                        (const char (*)[47])byte_1A45C5A0);
                v70 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v69,
                        (const unsigned int *)(v3 + 64));
                v49 = byte_1A45C640;
                common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v70, (const char (*)[22])byte_1A45C640);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 992));
                *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v50 = 1;
              }
            }
            else
            {
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecRollback",
                1647);
              v60 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 928),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v61 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v60,
                      (const char (*)[11])"quest_id: ");
              v62 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v61, &config->sub_id);
              v63 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      v62,
                      (const char (*)[26])" fail rollback quest_id: ");
              v64 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v63,
                      (const unsigned int *)(v3 + 64));
              v49 = " not found";
              common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v64, (const char (*)[11])" not found");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 928));
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v50 = 1;
            }
          }
        }
      }
      else
      {
        v50 = 0;
      }
      *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( v50 && v50 != 2 )
      {
        v84 = 0;
        goto LABEL_142;
      }
      __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 160));
    }
    v84 = 1;
LABEL_142:
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v84 == 1 )
    {
      __for_range_1 = &config->begin_exec;
      *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 224, v49);
      *(std::vector<data::QuestExec>::const_iterator *)(v3 + 224) = std::vector<data::QuestExec>::begin(__for_range_1);
      *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 256, v49);
      *(std::vector<data::QuestExec>::const_iterator *)(v3 + 256) = std::vector<data::QuestExec>::end(__for_range_1);
      while ( __gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
                (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 224),
                (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 256)) )
      {
        exec_1 = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 224));
        if ( *(_BYTE *)(((unsigned __int64)&exec_1->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec_1->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec_1->type);
        }
        if ( exec_1->type == QUEST_EXEC_ROLLBACK_QUEST )
        {
          if ( std::vector<std::string>::empty(&exec_1->param) )
          {
            *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1248) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 96 + 95) & 7) >= *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1248, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1248),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecRollback",
              1683);
            v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1248),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v87 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v86, (const char (*)[11])"quest_id: ");
            v88 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v87, &config->sub_id);
            common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              v88,
              (const char (*)[29])" fail rollback param invalid");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1248));
            *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v85 = 1;
          }
          else
          {
            *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 80, v3 + 256);
            *(_DWORD *)(v3 + 80) = 0;
            v89 = std::vector<std::string>::operator[](&exec_1->param, 0LL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v89, (unsigned int *)(v3 + 80), 1) )
            {
              *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1312) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1312, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1312),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecRollback",
                1689);
              v90 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1312),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v91 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v90,
                      (const char (*)[11])"quest_id: ");
              v92 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v91, &config->sub_id);
              common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                v92,
                (const char (*)[29])" fail rollback param invalid");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1312));
              *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = -117901064;
              v2 = -1;
              v85 = 1;
            }
            else
            {
              v93 = *(unsigned __int8 *)(((unsigned __int64)&config->sub_id >> 3) + 0x7FFF8000);
              if ( (_BYTE)v93 != 0 && (char)v93 <= 3 )
                __asan_report_load4(&config->sub_id);
              v94 = config->sub_id;
              if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v3 + 80);
              if ( v94 == *(_DWORD *)(v3 + 80) )
              {
                *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1376) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1376, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1376),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkExecRollback",
                  1695);
                v95 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 1376),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v96 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                        v95,
                        (const char (*)[65])byte_1A45C900);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v96,
                  (const unsigned int *)(v3 + 80));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1376));
                *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = -117901064;
                v2 = -1;
                v85 = 1;
              }
              else
              {
                v85 = 2;
              }
            }
          }
        }
        else
        {
          v85 = 0;
        }
        *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( v85 && v85 != 2 )
        {
          v97 = 0;
          goto LABEL_177;
        }
        __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 224));
      }
      v97 = 1;
LABEL_177:
      if ( v97 == 1 )
        v2 = 0;
    }
  }
  if ( v111 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80AC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 180) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1440LL, v111);
  }
  return v2;
};

// Line 1593: range 000000000EF074F8-000000000EF07674
bool __cdecl QuestExcelConfigMgr::checkExecRollback(data::QuestExcelConfig const&)const::{lambda(data::QuestContent const&,data::QuestContent const&)#1}::operator()(
        const QuestExcelConfigMgr::checkExecRollback::<lambda(const data::QuestContent&, const data::QuestContent&)> *const __closure,
        const data::QuestContent *c1,
        const data::QuestContent *c2)
{
  data::QuestContentType type; // ecx
  uint32_t count; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&c1->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&c1->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&c1->type);
  }
  type = c1->type;
  if ( *(_BYTE *)(((unsigned __int64)&c2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&c2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&c2->type);
  }
  if ( type != c2->type
    || !std::operator==<int,std::allocator<int>>(&c1->param, &c2->param)
    || !std::operator==<char>(&c1->param_str, &c2->param_str) )
  {
    return 0;
  }
  if ( *(_BYTE *)(((unsigned __int64)&c1->count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&c1->count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&c1->count);
  }
  count = c1->count;
  if ( *(_BYTE *)(((unsigned __int64)&c2->count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&c2->count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&c2->count);
  }
  return count == c2->count
      && std::operator==<unsigned int,unsigned int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const,unsigned int>>>(
           &c1->param_map,
           &c2->param_map);
};

// Line 1704: range 000000000EF09D5C-000000000EF0F017
int32_t __cdecl QuestExcelConfigMgr::checkQuestContentConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::vector<data::QuestContent> *content_vec)
{
  int32_t v3; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  int v8; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r13
  __int64 v16; // rax
  int v17; // eax
  std::vector<int>::const_reference v18; // rax
  unsigned int *v19; // rdx
  __int64 v20; // rsi
  __int64 v21; // rsi
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r13
  __int64 v26; // rax
  int v27; // eax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // r13
  __int64 v33; // rax
  int v34; // eax
  std::vector<int>::const_reference v35; // rax
  unsigned int *v36; // rdx
  __int64 v37; // rsi
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // r13
  __int64 v42; // rax
  int v43; // eax
  std::vector<int>::const_reference v44; // rax
  unsigned int *v45; // rdx
  __int64 v46; // rsi
  uint32_t *v47; // rax
  uint32_t *v48; // rdx
  char v49; // cl
  __int64 v50; // rsi
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // r13
  __int64 v53; // rax
  int v54; // eax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // r13
  __int64 v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // r13
  __int64 v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  const QuestExcelConfigMgr *v65; // rdx
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // r13
  __int64 v70; // rax
  int v71; // eax
  std::vector<int>::const_reference v72; // rax
  unsigned int *v73; // rdx
  __int64 v74; // rsi
  const QuestExcelConfigMgr *v75; // rdx
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  std::vector<int>::const_reference v78; // rax
  _DWORD *v79; // rdx
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // r13
  __int64 v84; // rax
  int v85; // eax
  std::vector<int>::const_reference v86; // rax
  unsigned int *v87; // rdx
  __int64 v88; // rsi
  common::milog::MiLogStream *v89; // rax
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  int v92; // eax
  __int64 v93; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v94; // rax
  int *v95; // rdx
  int v96; // ecx
  char v97; // al
  __int64 v98; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v99; // rax
  int *v100; // rdx
  int v101; // ecx
  char v102; // al
  std::vector<int>::const_reference v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // rax
  common::milog::MiLogStream *v110; // rax
  common::milog::MiLogStream *v111; // r13
  std::vector<int>::size_type v112; // rax
  std::vector<int>::const_reference v113; // rax
  _DWORD *v114; // rdx
  common::milog::MiLogStream *v115; // rax
  common::milog::MiLogStream *v116; // r13
  const int *v117; // rax
  common::milog::MiLogStream *v118; // rax
  common::milog::MiLogStream *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // r13
  std::vector<int>::size_type v122; // rax
  common::milog::MiLogStream *v123; // rax
  common::milog::MiLogStream *v124; // r13
  std::vector<int>::size_type v125; // rax
  _BOOL4 v126; // eax
  common::milog::MiLogStream *v127; // rax
  common::milog::MiLogStream *v128; // r13
  std::vector<int>::size_type v129; // rax
  unsigned __int64 v130; // rax
  __int64 v131; // rsi
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v132; // rax
  int *v133; // rdx
  int v134; // ecx
  char v135; // al
  common::milog::MiLogStream *v136; // rax
  common::milog::MiLogStream *v137; // rax
  int v138; // eax
  std::pair<std::_Rb_tree_const_iterator<int>,bool> v139; // rax
  common::milog::MiLogStream *v140; // rax
  common::milog::MiLogStream *v141; // rax
  unsigned __int64 v142; // rdx
  common::milog::MiLogStream *v143; // rax
  common::milog::MiLogStream *v144; // r13
  std::vector<int>::size_type v145; // rax
  std::vector<int>::const_reference v146; // rax
  _DWORD *v147; // rdx
  common::milog::MiLogStream *v148; // rax
  common::milog::MiLogStream *v149; // rax
  uint32_t *v150; // rax
  uint32_t *v151; // rdx
  common::milog::MiLogStream *v152; // rax
  common::milog::MiLogStream *v153; // r13
  const int *v154; // rax
  common::milog::MiLogStream *v155; // rax
  common::milog::MiLogStream *v156; // r13
  std::vector<int>::size_type v157; // rax
  int v158; // eax
  std::vector<int>::const_reference v159; // rax
  unsigned int *v160; // rdx
  __int64 v161; // rsi
  common::milog::MiLogStream *v162; // rax
  common::milog::MiLogStream *v163; // rax
  int v165; // [rsp+0h] [rbp-DA0h]
  uint32_t i; // [rsp+24h] [rbp-D7Ch]
  uint32_t index; // [rsp+34h] [rbp-D6Ch]
  const data::QuestContent *content; // [rsp+40h] [rbp-D60h]
  LuaConfigMgr *lua_config_mgr; // [rsp+48h] [rbp-D58h]
  const GroupScriptConfig *group_config_ptr; // [rsp+50h] [rbp-D50h]
  char v173[3376]; // [rsp+70h] [rbp-D30h] BYREF

  v4 = (unsigned __int64)v173;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_6(3328LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "68 32 4 15 dungeon_id:1758 48 4 13 scene_id:1764 64 4 15 dungeon_id:1786 80 4 20 parent_quest_id"
                        ":1802 96 4 10 delta:1804 112 4 13 quest_id:1841 128 4 16 activity_id:1865 144 4 13 group_id:1880"
                        " 160 4 14 config_id:1881 176 4 12 room_id:1940 192 4 14 rename_id:1987 208 8 16 __for_begin:1705"
                        " 240 8 14 __for_end:1705 272 8 9 <unknown> 304 8 9 <unknown> 336 8 9 <unknown> 368 8 9 <unknown>"
                        " 400 8 9 <unknown> 432 8 9 <unknown> 464 8 9 <unknown> 496 8 9 <unknown> 528 8 9 <unknown> 560 8"
                        " 9 <unknown> 592 8 9 <unknown> 624 8 9 <unknown> 656 8 9 <unknown> 688 8 9 <unknown> 720 8 9 <un"
                        "known> 752 32 9 <unknown> 816 32 9 <unknown> 880 32 9 <unknown> 944 32 9 <unknown> 1008 32 9 <un"
                        "known> 1072 32 9 <unknown> 1136 32 9 <unknown> 1200 32 9 <unknown> 1264 32 9 <unknown> 1328 32 9"
                        " <unknown> 1392 32 9 <unknown> 1456 32 9 <unknown> 1520 32 9 <unknown> 1584 32 9 <unknown> 1648 "
                        "32 9 <unknown> 1712 32 9 <unknown> 1776 32 9 <unknown> 1840 32 9 <unknown> 1904 32 9 <unknown> 1"
                        "968 32 9 <unknown> 2032 32 9 <unknown> 2096 32 9 <unknown> 2160 32 9 <unknown> 2224 32 9 <unknow"
                        "n> 2288 32 9 <unknown> 2352 32 9 <unknown> 2416 32 9 <unknown> 2480 32 9 <unknown> 2544 32 9 <un"
                        "known> 2608 32 9 <unknown> 2672 32 9 <unknown> 2736 32 9 <unknown> 2800 32 9 <unknown> 2864 32 9"
                        " <unknown> 2928 32 9 <unknown> 2992 32 9 <unknown> 3056 32 9 <unknown> 3120 32 9 <unknown> 3184 "
                        "32 9 <unknown> 3248 48 16 room_id_set:1937";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkQuestContentConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -234556924;
  v6[536862725] = -234556924;
  v6[536862726] = 61956;
  v6[536862726] = -234881024;
  v6[536862727] = 62194;
  v6[536862727] = -234881024;
  v6[536862728] = 62194;
  v6[536862728] = -234881024;
  v6[536862729] = 62194;
  v6[536862729] = -234881024;
  v6[536862730] = 62194;
  v6[536862730] = -234881024;
  v6[536862731] = 62194;
  v6[536862731] = -234881024;
  v6[536862732] = 62194;
  v6[536862732] = -234881024;
  v6[536862733] = 62194;
  v6[536862733] = -234881024;
  v6[536862734] = 62194;
  v6[536862734] = -234881024;
  v6[536862735] = 62194;
  v6[536862735] = -234881024;
  v6[536862736] = 62194;
  v6[536862736] = -234881024;
  v6[536862737] = 62194;
  v6[536862737] = -234881024;
  v6[536862738] = 62194;
  v6[536862738] = -234881024;
  v6[536862739] = 62194;
  v6[536862739] = -234881024;
  v6[536862740] = 62194;
  v6[536862740] = -234881024;
  v6[536862741] = 62194;
  v6[536862741] = -234881024;
  v6[536862742] = 62194;
  v6[536862742] = -234881024;
  v6[536862743] = 62194;
  v6[536862744] = -219021312;
  v6[536862745] = 62194;
  v6[536862746] = -219021312;
  v6[536862747] = 62194;
  v6[536862748] = -219021312;
  v6[536862749] = 62194;
  v6[536862750] = -219021312;
  v6[536862751] = 62194;
  v6[536862752] = -219021312;
  v6[536862753] = 62194;
  v6[536862754] = -219021312;
  v6[536862755] = 62194;
  v6[536862756] = -219021312;
  v6[536862757] = 62194;
  v6[536862758] = -219021312;
  v6[536862759] = 62194;
  v6[536862760] = -219021312;
  v6[536862761] = 62194;
  v6[536862762] = -219021312;
  v6[536862763] = 62194;
  v6[536862764] = -219021312;
  v6[536862765] = 62194;
  v6[536862766] = -219021312;
  v6[536862767] = 62194;
  v6[536862768] = -219021312;
  v6[536862769] = 62194;
  v6[536862770] = -219021312;
  v6[536862771] = 62194;
  v6[536862772] = -219021312;
  v6[536862773] = 62194;
  v6[536862774] = -219021312;
  v6[536862775] = 62194;
  v6[536862776] = -219021312;
  v6[536862777] = 62194;
  v6[536862778] = -219021312;
  v6[536862779] = 62194;
  v6[536862780] = -219021312;
  v6[536862781] = 62194;
  v6[536862782] = -219021312;
  v6[536862783] = 62194;
  v6[536862784] = -219021312;
  v6[536862785] = 62194;
  v6[536862786] = -219021312;
  v6[536862787] = 62194;
  v6[536862788] = -219021312;
  v6[536862789] = 62194;
  v6[536862790] = -219021312;
  v6[536862791] = 62194;
  v6[536862792] = -219021312;
  v6[536862793] = 62194;
  v6[536862794] = -219021312;
  v6[536862795] = 62194;
  v6[536862796] = -219021312;
  v6[536862797] = 62194;
  v6[536862798] = -219021312;
  v6[536862799] = 62194;
  v6[536862800] = -219021312;
  v6[536862801] = 62194;
  v6[536862802] = -219021312;
  v6[536862803] = 62194;
  v6[536862804] = -219021312;
  v6[536862805] = 62194;
  v6[536862806] = -219021312;
  v6[536862807] = 62194;
  v6[536862808] = -219021312;
  v6[536862809] = 62194;
  v6[536862810] = -219021312;
  v6[536862811] = 62194;
  v6[536862812] = -219021312;
  v6[536862813] = 62194;
  v6[536862814] = -219021312;
  v6[536862815] = 62194;
  v6[536862816] = -219021312;
  v6[536862817] = 62194;
  v6[536862818] = -219021312;
  v6[536862819] = 62194;
  v6[536862820] = -219021312;
  v6[536862821] = 62194;
  v6[536862823] = -202116109;
  if ( *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 208, txt_config_mgr);
  *(std::vector<data::QuestContent>::const_iterator *)(v4 + 208) = std::vector<data::QuestContent>::begin(content_vec);
  if ( *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 240, txt_config_mgr);
  *(std::vector<data::QuestContent>::const_iterator *)(v4 + 240) = std::vector<data::QuestContent>::end(content_vec);
  while ( 2 )
  {
    if ( !__gnu_cxx::operator!=<data::QuestContent const*,std::vector<data::QuestContent>>(
            (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v4 + 208),
            (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v4 + 240)) )
    {
      v8 = 1;
      goto LABEL_321;
    }
    content = __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v4 + 208));
    if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&content->type);
    }
    switch ( content->type )
    {
      case QUEST_CONTENT_ENTER_DUNGEON:
        if ( std::vector<int>::empty(&content->param) )
        {
          *(_DWORD *)(((v4 + 1136) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 1136) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 1167) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 1167) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 1136, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 1136),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1755);
          v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 1136),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v15 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v14, (const char (*)[56])byte_1A45D140);
          *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&content->type);
          }
          v16 = (__int64)data::enumValToStr(content->type);
          if ( *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) )
            v16 = __asan_report_store8(v4 + 272, byte_1A45D140);
          *(_QWORD *)(v4 + 272) = v16;
          common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v15, (const char *const *)(v4 + 272));
          *(_BYTE *)(((v4 + 272) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1136));
          *(_DWORD *)(((v4 + 1136) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v17 = 0;
        }
        else
        {
          *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) = 4;
          v18 = std::vector<int>::operator[](&content->param, 0LL);
          v19 = (unsigned int *)v18;
          if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v18);
          }
          v20 = *v19;
          if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 32, v20);
          *(_DWORD *)(v4 + 32) = v20;
          v21 = *(unsigned int *)(v4 + 32);
          if ( data::DungeonExcelConfigMgrBase::findDungeonExcelConfig(&txt_config_mgr->dungeon_config_mgr, v21) )
          {
            *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v4 + 48, v21);
            *(_DWORD *)(v4 + 48) = 0;
            if ( common::tools::StringUtils::strToNum<unsigned int>(&content->param_str, (unsigned int *)(v4 + 48), 1) )
            {
              *(_DWORD *)(((v4 + 1264) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1264) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1295) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 1295) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1264, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1264),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestContentConfig",
                1767);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1264),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                      v24,
                      (const char (*)[45])byte_1A45D200);
              *(_BYTE *)(((v4 + 304) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&content->type);
              }
              v26 = (__int64)data::enumValToStr(content->type);
              if ( *(_BYTE *)(((v4 + 304) >> 3) + 0x7FFF8000) )
                v26 = __asan_report_store8(v4 + 304, byte_1A45D200);
              *(_QWORD *)(v4 + 304) = v26;
              common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v25, (const char *const *)(v4 + 304));
              *(_BYTE *)(((v4 + 304) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1264));
              *(_DWORD *)(((v4 + 1264) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v17 = 0;
            }
            else
            {
              v27 = *(unsigned __int8 *)(((v4 + 48) >> 3) + 0x7FFF8000);
              if ( (_BYTE)v27 != 0 && (char)v27 <= 3 )
                __asan_report_load4(v4 + 48);
              if ( *(_DWORD *)(v4 + 48)
                && !data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                      &txt_config_mgr->scene_config_mgr,
                      *(unsigned int *)(v4 + 48)) )
              {
                *(_DWORD *)(((v4 + 1328) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1328) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 1359) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 1359) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1328, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1328),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestContentConfig",
                  1772);
                v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 1328),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v30 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
                        v29,
                        (const char (*)[54])byte_1A45D260);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v30,
                  (const unsigned int *)(v4 + 48));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1328));
                *(_DWORD *)(((v4 + 1328) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v17 = 0;
              }
              else
              {
                v17 = 1;
              }
            }
          }
          else
          {
            *(_DWORD *)(((v4 + 1200) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 1200) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1231) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 1231) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1200, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 1200),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestContentConfig",
              1761);
            v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 1200),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v23 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                    v22,
                    (const char (*)[55])byte_1A45D1A0);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v4 + 32));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1200));
            *(_DWORD *)(((v4 + 1200) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v17 = 0;
          }
        }
        *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
        if ( v17 )
          goto LABEL_319;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_FINISH_DUNGEON:
      case QUEST_CONTENT_FAIL_DUNGEON:
      case QUEST_CONTENT_DUNGEON_OPEN_STATUE:
        if ( std::vector<int>::empty(&content->param) )
        {
          *(_DWORD *)(((v4 + 1392) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 1392) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 1423) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 1423) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 1392, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 1392),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1783);
          v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 1392),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v32 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v31, (const char (*)[56])byte_1A45D140);
          *(_BYTE *)(((v4 + 336) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&content->type);
          }
          v33 = (__int64)data::enumValToStr(content->type);
          if ( *(_BYTE *)(((v4 + 336) >> 3) + 0x7FFF8000) )
            v33 = __asan_report_store8(v4 + 336, byte_1A45D140);
          *(_QWORD *)(v4 + 336) = v33;
          common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v32, (const char *const *)(v4 + 336));
          *(_BYTE *)(((v4 + 336) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1392));
          *(_DWORD *)(((v4 + 1392) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v34 = 0;
        }
        else
        {
          *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 4;
          v35 = std::vector<int>::operator[](&content->param, 0LL);
          v36 = (unsigned int *)v35;
          if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v35);
          }
          v37 = *v36;
          if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 64, v37);
          *(_DWORD *)(v4 + 64) = v37;
          if ( data::DungeonExcelConfigMgrBase::findDungeonExcelConfig(
                 &txt_config_mgr->dungeon_config_mgr,
                 *(unsigned int *)(v4 + 64)) )
          {
            v34 = 1;
          }
          else
          {
            *(_DWORD *)(((v4 + 1456) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 1456) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1487) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 1487) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1456, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 1456),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestContentConfig",
              1789);
            v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 1456),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v39 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                    v38,
                    (const char (*)[55])byte_1A45D1A0);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1456));
            *(_DWORD *)(((v4 + 1456) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v34 = 0;
          }
        }
        *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v34 )
          goto LABEL_319;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_WORKTOP_SELECT:
        if ( !QuestExcelConfigMgr::checkContentWorktopSelect(this, txt_config_mgr, content) )
          goto LABEL_319;
        *(_DWORD *)(((v4 + 752) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 752) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 783) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 783) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 752, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 752),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1712);
        v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v4 + 752),
               (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          v7,
          (const char (*)[33])"checkContentWorktopSelect failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 752));
        v3 = -1;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_SEAL_BATTLE_RESULT:
        if ( !QuestExcelConfigMgr::checkContentSealBattleResult(this, txt_config_mgr, content) )
          goto LABEL_319;
        *(_DWORD *)(((v4 + 816) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 816) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 847) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 847) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 816, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 816),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1719);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v4 + 816),
               (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
          v9,
          (const char (*)[36])"checkContentSealBattleResult failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 816));
        v3 = -1;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_GAME_TIME_TICK:
        if ( !QuestExcelConfigMgr::checkGameTimeTick(this, txt_config_mgr, &content->param_str) )
          goto LABEL_319;
        *(_DWORD *)(((v4 + 880) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 880) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 911) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 911) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 880, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 880),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1726);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 880),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          v10,
          (const char (*)[25])"checkGameTimeTick failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 880));
        v3 = -1;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_LUA_NOTIFY:
        if ( !(unsigned __int8)std::string::empty() )
          goto LABEL_319;
        *(_DWORD *)(((v4 + 944) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 944) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 975) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 975) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 944, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 944),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1733);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 944),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(v11, (const char (*)[50])byte_1A45D040);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 944));
        v3 = -1;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_CITY_LEVEL_UP:
        if ( !QuestExcelConfigMgr::checkContentCityLevelup(this, txt_config_mgr, content) )
          goto LABEL_319;
        *(_DWORD *)(((v4 + 1008) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 1008) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 1039) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 1039) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 1008, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 1008),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1740);
        v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 1008),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
          v12,
          (const char (*)[31])"checkContentCityLevelup failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1008));
        v3 = -1;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_PATTERN_GROUP_CLEAR_MONSTER:
        if ( !QuestExcelConfigMgr::checkContentPatternGroupClearMonster(this, txt_config_mgr, content) )
          goto LABEL_319;
        *(_DWORD *)(((v4 + 1072) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 1072) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 1103) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 1103) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 1072, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 1072),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1747);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 1072),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
          v13,
          (const char (*)[43])"checkContentPatternGroupClearMonster fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1072));
        v3 = -1;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_QUEST_VAR_EQUAL:
      case QUEST_CONTENT_QUEST_VAR_GREATER:
      case QUEST_CONTENT_QUEST_VAR_LESS:
        if ( std::vector<int>::size(&content->param) == 2 )
        {
          v113 = std::vector<int>::operator[](&content->param, 0LL);
          v114 = v113;
          if ( *(_BYTE *)(((unsigned __int64)v113 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v113 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v113 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v113);
          }
          if ( *v114 <= 4u )
            goto LABEL_319;
          *(_DWORD *)(((v4 + 2480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2511) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 2511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2480),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1909);
          v115 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 2480),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v116 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                   v115,
                   (const char (*)[34])byte_1A45A340);
          v117 = std::vector<int>::operator[](&content->param, 0LL);
          v118 = common::milog::MiLogStream::operator<<<int,(int *)0>(v116, v117);
          v119 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                   v118,
                   (const char (*)[21])byte_1A45A3A0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v119,
            &QuestExcelConfigMgr::QUEST_VAR_LEN);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2480));
          v3 = -1;
          v8 = 0;
        }
        else
        {
          *(_DWORD *)(((v4 + 2416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2447) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 2447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2416),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1904);
          v110 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 2416),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v111 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                   v110,
                   (const char (*)[44])byte_1A45D660);
          *(_BYTE *)(((v4 + 560) >> 3) + 0x7FFF8000) = 0;
          v112 = std::vector<int>::size(&content->param);
          if ( *(_BYTE *)(((v4 + 560) >> 3) + 0x7FFF8000) )
            v112 = __asan_report_store8(v4 + 560, byte_1A45D660);
          *(_QWORD *)(v4 + 560) = v112;
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v111,
            (const unsigned __int64 *)(v4 + 560));
          *(_BYTE *)(((v4 + 560) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2416));
          v3 = -1;
          v8 = 0;
        }
        goto LABEL_321;
      case QUEST_CONTENT_TIME_VAR_GT_EQ:
      case QUEST_CONTENT_TIME_VAR_PASS_DAY:
        if ( std::vector<int>::size(&content->param) > 1 )
        {
          *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 4;
          v44 = std::vector<int>::operator[](&content->param, 0LL);
          v45 = (unsigned int *)v44;
          if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v44 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v44);
          }
          v46 = *v45;
          if ( *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 80, v46);
          *(_DWORD *)(v4 + 80) = v46;
          v50 = 1LL;
          v47 = (uint32_t *)std::vector<int>::operator[](&content->param, 1uLL);
          v48 = v47;
          v49 = *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000);
          LOBYTE(v50) = v49 != 0;
          if ( v49 != 0 && (char)(((unsigned __int8)v47 & 7) + 3) >= v49 )
            __asan_report_load4(v47);
          index = *v48;
          *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 96, v50);
          *(_DWORD *)(v4 + 96) = 0;
          if ( common::tools::StringUtils::strToNum<unsigned int>(&content->param_str, (unsigned int *)(v4 + 96), 1) )
          {
            *(_DWORD *)(((v4 + 1584) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 1584) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1615) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 1615) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1584, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 1584),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestContentConfig",
              1807);
            v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 1584),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v52 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                    v51,
                    (const char (*)[45])byte_1A45D200);
            *(_BYTE *)(((v4 + 400) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&content->type);
            }
            v53 = (__int64)data::enumValToStr(content->type);
            if ( *(_BYTE *)(((v4 + 400) >> 3) + 0x7FFF8000) )
              v53 = __asan_report_store8(v4 + 400, byte_1A45D200);
            *(_QWORD *)(v4 + 400) = v53;
            common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v52, (const char *const *)(v4 + 400));
            *(_BYTE *)(((v4 + 400) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1584));
            *(_DWORD *)(((v4 + 1584) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v43 = 0;
          }
          else
          {
            v54 = *(unsigned __int8 *)(((v4 + 96) >> 3) + 0x7FFF8000);
            if ( (_BYTE)v54 != 0 && (char)v54 <= 3 )
              __asan_report_load4(v4 + 96);
            if ( *(_DWORD *)(v4 + 96) )
            {
              if ( *(_BYTE *)(((unsigned __int64)&content->count >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&content->count >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&content->count);
              }
              if ( content->count <= 1 )
              {
                if ( index <= 9 )
                {
                  v65 = this;
                  if ( *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v4 + 80);
                  if ( data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(v65, *(unsigned int *)(v4 + 80)) )
                  {
                    v43 = 1;
                  }
                  else
                  {
                    *(_DWORD *)(((v4 + 1840) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v4 + 1840) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v4 + 1871) >> 3) + 0x7FFF8000) != 0
                      && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 1871) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v4 + 1840, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v4 + 1840),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkQuestContentConfig",
                      1828);
                    v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v4 + 1840),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v67 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                            v66,
                            (const char (*)[28])"can't find parent_quest_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v67,
                      (const unsigned int *)(v4 + 80));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1840));
                    *(_DWORD *)(((v4 + 1840) >> 3) + 0x7FFF8000) = -117901064;
                    v3 = -1;
                    v43 = 0;
                  }
                }
                else
                {
                  *(_DWORD *)(((v4 + 1776) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v4 + 1776) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v4 + 1807) >> 3) + 0x7FFF8000) != 0
                    && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 1807) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v4 + 1776, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v4 + 1776),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkQuestContentConfig",
                    1822);
                  v63 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v4 + 1776),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v64 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
                          v63,
                          (const char (*)[52])byte_1A459EC0);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v64,
                    &QuestExcelConfigMgr::QUEST_TIME_VAR_LEN);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1776));
                  *(_DWORD *)(((v4 + 1776) >> 3) + 0x7FFF8000) = -117901064;
                  v3 = -1;
                  v43 = 0;
                }
              }
              else
              {
                *(_DWORD *)(((v4 + 1712) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1712) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 1743) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 1743) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1712, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1712),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestContentConfig",
                  1817);
                v58 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 1712),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v59 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                        v58,
                        (const char (*)[26])byte_1A45D380);
                v60 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v59, &content->count);
                v61 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v60,
                        (const char (*)[17])byte_1A45D3C0);
                *(_BYTE *)(((v4 + 464) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&content->type);
                }
                v62 = (__int64)data::enumValToStr(content->type);
                if ( *(_BYTE *)(((v4 + 464) >> 3) + 0x7FFF8000) )
                  v62 = __asan_report_store8(v4 + 464, byte_1A45D3C0);
                *(_QWORD *)(v4 + 464) = v62;
                common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                  v61,
                  (const char *const *)(v4 + 464));
                *(_BYTE *)(((v4 + 464) >> 3) + 0x7FFF8000) = -8;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1712));
                *(_DWORD *)(((v4 + 1712) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v43 = 0;
              }
            }
            else
            {
              *(_DWORD *)(((v4 + 1648) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1648) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1679) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 1679) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1648, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1648),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestContentConfig",
                1812);
              v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1648),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v56 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                      v55,
                      (const char (*)[49])byte_1A45D320);
              *(_BYTE *)(((v4 + 432) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&content->type);
              }
              v57 = (__int64)data::enumValToStr(content->type);
              if ( *(_BYTE *)(((v4 + 432) >> 3) + 0x7FFF8000) )
                v57 = __asan_report_store8(v4 + 432, byte_1A45D320);
              *(_QWORD *)(v4 + 432) = v57;
              common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v56, (const char *const *)(v4 + 432));
              *(_BYTE *)(((v4 + 432) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1648));
              *(_DWORD *)(((v4 + 1648) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v43 = 0;
            }
          }
        }
        else
        {
          *(_DWORD *)(((v4 + 1520) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 1520) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 1551) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 1551) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 1520, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 1520),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1799);
          v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 1520),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v41 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v40, (const char (*)[42])byte_1A45D2C0);
          *(_BYTE *)(((v4 + 368) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&content->type);
          }
          v42 = (__int64)data::enumValToStr(content->type);
          if ( *(_BYTE *)(((v4 + 368) >> 3) + 0x7FFF8000) )
            v42 = __asan_report_store8(v4 + 368, byte_1A45D2C0);
          *(_QWORD *)(v4 + 368) = v42;
          common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v41, (const char *const *)(v4 + 368));
          *(_BYTE *)(((v4 + 368) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1520));
          *(_DWORD *)(((v4 + 1520) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v43 = 0;
        }
        *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( v43 )
          goto LABEL_319;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_QUEST_STATE_EQUAL:
      case QUEST_CONTENT_QUEST_STATE_NOT_EQUAL:
        if ( std::vector<int>::size(&content->param) > 1 )
        {
          *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = 4;
          v72 = std::vector<int>::operator[](&content->param, 0LL);
          v73 = (unsigned int *)v72;
          if ( *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v72 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v72);
          }
          v74 = *v73;
          if ( *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 112, v74);
          *(_DWORD *)(v4 + 112) = v74;
          if ( data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, *(unsigned int *)(v4 + 112)) )
            goto LABEL_171;
          v75 = this;
          if ( *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v4 + 112);
          if ( data::QuestExcelConfigMgrBase::findRandomQuestExcelConfig(v75, *(unsigned int *)(v4 + 112)) )
          {
LABEL_171:
            v78 = std::vector<int>::operator[](&content->param, 1uLL);
            v79 = v78;
            if ( *(_BYTE *)(((unsigned __int64)v78 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v78 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v78 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v78);
            }
            if ( *v79 )
            {
              v71 = 1;
            }
            else
            {
              *(_DWORD *)(((v4 + 2032) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 2032) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 2063) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 2063) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 2032, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 2032),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestContentConfig",
                1853);
              v80 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 2032),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v81 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                      v80,
                      (const char (*)[40])"quest state: 0 not supported, quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v81,
                (const unsigned int *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2032));
              *(_DWORD *)(((v4 + 2032) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v71 = 0;
            }
          }
          else
          {
            *(_DWORD *)(((v4 + 1968) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 1968) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1999) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 1999) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1968, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 1968),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestContentConfig",
              1847);
            v76 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 1968),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v77 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    v76,
                    (const char (*)[29])"can't find content quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v77,
              (const unsigned int *)(v4 + 112));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1968));
            *(_DWORD *)(((v4 + 1968) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v71 = 0;
          }
        }
        else
        {
          *(_DWORD *)(((v4 + 1904) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 1904) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 1935) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 1935) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 1904, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 1904),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1838);
          v68 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 1904),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v69 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v68, (const char (*)[42])byte_1A45D2C0);
          *(_BYTE *)(((v4 + 496) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&content->type);
          }
          v70 = (__int64)data::enumValToStr(content->type);
          if ( *(_BYTE *)(((v4 + 496) >> 3) + 0x7FFF8000) )
            v70 = __asan_report_store8(v4 + 496, byte_1A45D2C0);
          *(_QWORD *)(v4 + 496) = v70;
          common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v69, (const char *const *)(v4 + 496));
          *(_BYTE *)(((v4 + 496) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1904));
          *(_DWORD *)(((v4 + 1904) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v71 = 0;
        }
        *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = -8;
        if ( v71 )
          goto LABEL_319;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_LEAVE_SCENE_RANGE:
        goto LABEL_280;
      case QUEST_CONTENT_ACTIVITY_TRIGGER_UPDATE:
        if ( std::vector<int>::size(&content->param) == 2 )
        {
          *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 4;
          v86 = std::vector<int>::operator[](&content->param, 0LL);
          v87 = (unsigned int *)v86;
          if ( *(_BYTE *)(((unsigned __int64)v86 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v86 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v86 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v86);
          }
          v88 = *v87;
          if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 128, v88);
          *(_DWORD *)(v4 + 128) = v88;
          if ( data::NewActivityExcelConfigMgrBase::findNewActivityExcelConfig(
                 &txt_config_mgr->new_activity_config_mgr,
                 *(unsigned int *)(v4 + 128)) )
          {
            v85 = 1;
          }
          else
          {
            *(_DWORD *)(((v4 + 2160) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 2160) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 2191) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 2191) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 2160, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 2160),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestContentConfig",
              1868);
            v89 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 2160),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v90 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    v89,
                    (const char (*)[19])byte_1A45D500);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v90,
              (const unsigned int *)(v4 + 128));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2160));
            *(_DWORD *)(((v4 + 2160) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v85 = 0;
          }
        }
        else
        {
          *(_DWORD *)(((v4 + 2096) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2096) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2127) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 2127) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2096, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2096),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1862);
          v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 2096),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v83 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(v82, (const char (*)[55])byte_1A45D4A0);
          *(_BYTE *)(((v4 + 528) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&content->type);
          }
          v84 = (__int64)data::enumValToStr(content->type);
          if ( *(_BYTE *)(((v4 + 528) >> 3) + 0x7FFF8000) )
            v84 = __asan_report_store8(v4 + 528, byte_1A45D4A0);
          *(_QWORD *)(v4 + 528) = v84;
          common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v83, (const char *const *)(v4 + 528));
          *(_BYTE *)(((v4 + 528) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2096));
          *(_DWORD *)(((v4 + 2096) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v85 = 0;
        }
        *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = -8;
        if ( v85 )
          goto LABEL_319;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_GADGET_STATE_CHANGE:
        if ( std::vector<int>::size(&content->param) == 3 )
        {
          *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = 4;
          v93 = 0LL;
          v94 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                    &content->param,
                                                                                    0LL);
          v95 = v94;
          if ( *(_BYTE *)(((unsigned __int64)v94 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v94 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v94 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v94);
          }
          v96 = *v95;
          v97 = *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000);
          if ( v97 != 0 && v97 <= 3 )
          {
            LOBYTE(v93) = v97 != 0;
            __asan_report_store4(v4 + 144, v93);
          }
          *(_DWORD *)(v4 + 144) = v96;
          *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 4;
          v98 = 1LL;
          v99 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                    &content->param,
                                                                                    1uLL);
          v100 = v99;
          if ( *(_BYTE *)(((unsigned __int64)v99 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v99 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v99 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v99);
          }
          v101 = *v100;
          v102 = *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000);
          if ( v102 != 0 && v102 <= 3 )
          {
            LOBYTE(v98) = v102 != 0;
            __asan_report_store4(v4 + 160, v98);
          }
          *(_DWORD *)(v4 + 160) = v101;
          v103 = std::vector<int>::operator[](&content->param, 2uLL);
          if ( *(_BYTE *)(((unsigned __int64)v103 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v103 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v103 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v103);
          }
          lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
          if ( *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v4 + 144);
          group_config_ptr = LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v4 + 144));
          if ( group_config_ptr )
          {
            if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v4 + 160);
            if ( GroupScriptConfig::findGadgetConfig(group_config_ptr, *(unsigned int *)(v4 + 160)) )
            {
              v92 = 1;
            }
            else
            {
              *(_DWORD *)(((v4 + 2352) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 2352) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 2383) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 2383) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 2352, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 2352),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestContentConfig",
                1893);
              v106 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v4 + 2352),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v107 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                       v106,
                       (const char (*)[29])byte_1A45D5E0);
              v108 = common::milog::MiLogStream::operator<<<int,(int *)0>(v107, (const int *)(v4 + 144));
              v109 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                       v108,
                       (const char (*)[14])", config_id: ");
              common::milog::MiLogStream::operator<<<int,(int *)0>(v109, (const int *)(v4 + 160));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2352));
              *(_DWORD *)(((v4 + 2352) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v92 = 0;
            }
          }
          else
          {
            *(_DWORD *)(((v4 + 2288) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 2288) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 2319) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 2319) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 2288, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 2288),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestContentConfig",
              1887);
            v104 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v4 + 2288),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v105 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                     v104,
                     (const char (*)[28])byte_1A45D5A0);
            common::milog::MiLogStream::operator<<<int,(int *)0>(v105, (const int *)(v4 + 144));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2288));
            *(_DWORD *)(((v4 + 2288) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v92 = 0;
          }
        }
        else
        {
          *(_DWORD *)(((v4 + 2224) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2224) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2255) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 2255) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2224, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2224),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1877);
          v91 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 2224),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(v91, (const char (*)[39])byte_1A45D540);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2224));
          *(_DWORD *)(((v4 + 2224) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v92 = 0;
        }
        *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
        if ( v92 )
          goto LABEL_319;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_LEAVE_SCENE_RANGE_AND_ROOM:
        if ( std::vector<int>::size(&content->param) > 2 )
        {
          if ( std::vector<int>::size(&content->param) <= 0xD )
          {
            v130 = ((v4 + 3248) >> 3) + 2147450880;
            *(_DWORD *)v130 = 0;
            *(_WORD *)(v130 + 4) = 0;
            std::set<int>::set((std::set<int> *const)(v4 + 3248));
            for ( i = 2; i < std::vector<int>::size(&content->param); ++i )
            {
              *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = 4;
              v131 = i;
              v132 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                         &content->param,
                                                                                         i);
              v133 = v132;
              if ( *(_BYTE *)(((unsigned __int64)v132 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v132 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v132 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v132);
              }
              v134 = *v133;
              v135 = *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000);
              if ( v135 != 0 && v135 <= 3 )
              {
                LOBYTE(v131) = v135 != 0;
                __asan_report_store4(v4 + 176, v131);
              }
              *(_DWORD *)(v4 + 176) = v134;
              if ( SceneExcelConfigMgr::getSceneTypeBySceneId(&txt_config_mgr->scene_config_mgr, *(_DWORD *)(v4 + 176)) == SCENE_ROOM )
              {
                v139 = std::set<int>::emplace<int &>(
                         (std::set<int> *const)(v4 + 3248),
                         (int *)(v4 + 176),
                         (int *)(v4 + 176));
                if ( !v139.second )
                {
                  *(_DWORD *)(((v4 + 2800) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v4 + 2800) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v4 + 2831) >> 3) + 0x7FFF8000) != 0
                    && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 2831) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v4 + 2800, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v4 + 2800),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkQuestContentConfig",
                    1949);
                  v140 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v4 + 2800),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v141 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                           v140,
                           (const char (*)[27])byte_1A45D7C0);
                  common::milog::MiLogStream::operator<<<int,(int *)0>(v141, (const int *)(v4 + 176));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2800));
                  *(_DWORD *)(((v4 + 2800) >> 3) + 0x7FFF8000) = -117901064;
                  v3 = -1;
                  v138 = 0;
                }
                else
                {
                  v138 = 1;
                }
              }
              else
              {
                *(_DWORD *)(((v4 + 2736) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 2736) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 2767) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 2767) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 2736, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 2736),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestContentConfig",
                  1944);
                v136 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v4 + 2736),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v137 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                         v136,
                         (const char (*)[28])byte_1A45D780);
                common::milog::MiLogStream::operator<<<int,(int *)0>(v137, (const int *)(v4 + 176));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2736));
                *(_DWORD *)(((v4 + 2736) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v138 = 0;
              }
              *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = -8;
              if ( v138 != 1 )
              {
                v165 = 0;
LABEL_277:
                std::set<int>::~set((std::set<int> *const)(v4 + 3248));
                v126 = v165 == 1;
                goto LABEL_278;
              }
            }
            v165 = 1;
            goto LABEL_277;
          }
          *(_DWORD *)(((v4 + 2672) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2672) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2703) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 2703) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2672, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2672),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1934);
          v127 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 2672),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v128 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                   v127,
                   (const char (*)[45])byte_1A45D720);
          *(_BYTE *)(((v4 + 656) >> 3) + 0x7FFF8000) = 0;
          v129 = std::vector<int>::size(&content->param);
          if ( *(_BYTE *)(((v4 + 656) >> 3) + 0x7FFF8000) )
            v129 = __asan_report_store8(v4 + 656, byte_1A45D720);
          *(_QWORD *)(v4 + 656) = v129;
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v128,
            (const unsigned __int64 *)(v4 + 656));
          *(_BYTE *)(((v4 + 656) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2672));
          *(_DWORD *)(((v4 + 2672) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v126 = 0;
        }
        else
        {
          *(_DWORD *)(((v4 + 2608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2639) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 2639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2608),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1929);
          v123 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 2608),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v124 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                   v123,
                   (const char (*)[47])byte_1A45D6C0);
          *(_BYTE *)(((v4 + 624) >> 3) + 0x7FFF8000) = 0;
          v125 = std::vector<int>::size(&content->param);
          if ( *(_BYTE *)(((v4 + 624) >> 3) + 0x7FFF8000) )
            v125 = __asan_report_store8(v4 + 624, byte_1A45D6C0);
          *(_QWORD *)(v4 + 624) = v125;
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v124,
            (const unsigned __int64 *)(v4 + 624));
          *(_BYTE *)(((v4 + 624) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2608));
          *(_DWORD *)(((v4 + 2608) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v126 = 0;
        }
LABEL_278:
        v142 = ((v4 + 3248) >> 3) + 2147450880;
        *(_DWORD *)v142 = -117901064;
        *(_WORD *)(v142 + 4) = -1800;
        if ( !v126 )
        {
          v8 = 0;
          goto LABEL_321;
        }
LABEL_280:
        if ( std::vector<int>::size(&content->param) <= 1 )
        {
          *(_DWORD *)(((v4 + 2864) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2864) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2895) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 2895) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2864, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2864),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1959);
          v143 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 2864),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v144 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                   v143,
                   (const char (*)[47])byte_1A45D800);
          *(_BYTE *)(((v4 + 688) >> 3) + 0x7FFF8000) = 0;
          v145 = std::vector<int>::size(&content->param);
          if ( *(_BYTE *)(((v4 + 688) >> 3) + 0x7FFF8000) )
            v145 = __asan_report_store8(v4 + 688, byte_1A45D800);
          *(_QWORD *)(v4 + 688) = v145;
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v144,
            (const unsigned __int64 *)(v4 + 688));
          *(_BYTE *)(((v4 + 688) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2864));
          v3 = -1;
          v8 = 0;
          goto LABEL_321;
        }
        v146 = std::vector<int>::operator[](&content->param, 1uLL);
        v147 = v146;
        if ( *(_BYTE *)(((unsigned __int64)v146 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v146 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v146 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v146);
        }
        if ( !*v147 )
        {
          *(_DWORD *)(((v4 + 2928) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2928) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 2959) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 2959) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2928, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2928),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1964);
          v148 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 2928),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v148, (const char (*)[16])byte_1A45D860);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2928));
          v3 = -1;
          v8 = 0;
          goto LABEL_321;
        }
        if ( (unsigned __int8)std::string::empty() )
        {
          *(_DWORD *)(((v4 + 2992) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 2992) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 3023) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 80 + 31) & 7) >= *(_BYTE *)(((v4 + 3023) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 2992, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 2992),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1969);
          v149 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 2992),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v149, (const char (*)[21])byte_1A45D8A0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2992));
          v3 = -1;
          v8 = 0;
          goto LABEL_321;
        }
        v150 = (uint32_t *)std::vector<int>::operator[](&content->param, 0LL);
        v151 = v150;
        if ( *(_BYTE *)(((unsigned __int64)v150 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v150 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v150 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v150);
        }
        if ( SceneExcelConfigMgr::getSceneTypeBySceneId(&txt_config_mgr->scene_config_mgr, *v151) )
        {
LABEL_319:
          __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v4 + 208));
          continue;
        }
        *(_DWORD *)(((v4 + 3056) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 3056) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 3087) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 3087) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 3056, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 3056),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1975);
        v152 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v4 + 3056),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v153 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v152, (const char (*)[22])byte_1A45D8E0);
        v154 = std::vector<int>::operator[](&content->param, 0LL);
        common::milog::MiLogStream::operator<<<int,(int *)0>(v153, v154);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 3056));
        v3 = -1;
        v8 = 0;
LABEL_321:
        if ( v8 == 1 )
          v3 = 0;
        if ( v173 == (char *)v4 )
        {
          *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
          *(_QWORD *)((v4 >> 3) + 0x7FFF8198) = 0LL;
          memset(
            (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
            0,
            8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 416) & 0xFFFFFFF8) >> 3));
        }
        else
        {
          *(_QWORD *)v4 = 1172321806LL;
          __asan_stack_free_6(v4, 3328LL, v173);
        }
        return v3;
      case QUEST_CONTENT_AVATAR_RENAME_COMPLETE:
        if ( std::vector<int>::size(&content->param) == 1 )
        {
          *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = 4;
          v159 = std::vector<int>::operator[](&content->param, 0LL);
          v160 = (unsigned int *)v159;
          if ( *(_BYTE *)(((unsigned __int64)v159 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v159 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v159 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v159);
          }
          v161 = *v160;
          if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v4 + 192, v161);
          *(_DWORD *)(v4 + 192) = v161;
          if ( data::RenameExcelConfigMgrBase::findAvatarRenameExcelConfig(
                 &txt_config_mgr->rename_config_mgr,
                 *(unsigned int *)(v4 + 192)) )
          {
            v158 = 1;
          }
          else
          {
            *(_DWORD *)(((v4 + 3184) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 3184) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 3215) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 113) & 7) >= *(_BYTE *)(((v4 + 3215) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 3184, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 3184),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestContentConfig",
              1990);
            v162 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v4 + 3184),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v163 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                     v162,
                     (const char (*)[47])byte_1A45D980);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v163,
              (const unsigned int *)(v4 + 192));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 3184));
            *(_DWORD *)(((v4 + 3184) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v158 = 0;
          }
        }
        else
        {
          *(_DWORD *)(((v4 + 3120) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 3120) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 3151) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 79) & 7) >= *(_BYTE *)(((v4 + 3151) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 3120, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 3120),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestContentConfig",
            1984);
          v155 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v4 + 3120),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v156 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                   v155,
                   (const char (*)[46])byte_1A45D920);
          *(_BYTE *)(((v4 + 720) >> 3) + 0x7FFF8000) = 0;
          v157 = std::vector<int>::size(&content->param);
          if ( *(_BYTE *)(((v4 + 720) >> 3) + 0x7FFF8000) )
            v157 = __asan_report_store8(v4 + 720, byte_1A45D920);
          *(_QWORD *)(v4 + 720) = v157;
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v156,
            (const unsigned __int64 *)(v4 + 720));
          *(_BYTE *)(((v4 + 720) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 3120));
          *(_DWORD *)(((v4 + 3120) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v158 = 0;
        }
        *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = -8;
        if ( v158 )
          goto LABEL_319;
        v8 = 0;
        goto LABEL_321;
      case QUEST_CONTENT_QUEST_GLOBAL_VAR_EQUAL:
      case QUEST_CONTENT_QUEST_GLOBAL_VAR_GREATER:
      case QUEST_CONTENT_QUEST_GLOBAL_VAR_LESS:
        if ( std::vector<int>::size(&content->param) == 2 )
          goto LABEL_319;
        *(_DWORD *)(((v4 + 2544) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 2544) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 2575) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 16 + 31) & 7) >= *(_BYTE *)(((v4 + 2575) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 2544, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 2544),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestContentConfig",
          1920);
        v120 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v4 + 2544),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v121 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v120, (const char (*)[44])byte_1A45D660);
        *(_BYTE *)(((v4 + 592) >> 3) + 0x7FFF8000) = 0;
        v122 = std::vector<int>::size(&content->param);
        if ( *(_BYTE *)(((v4 + 592) >> 3) + 0x7FFF8000) )
          v122 = __asan_report_store8(v4 + 592, byte_1A45D660);
        *(_QWORD *)(v4 + 592) = v122;
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v121,
          (const unsigned __int64 *)(v4 + 592));
        *(_BYTE *)(((v4 + 592) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2544));
        v3 = -1;
        v8 = 0;
        goto LABEL_321;
      default:
        goto LABEL_319;
    }
  }
};

// Line 2003: range 000000000EF0F018-000000000EF0F3F2
int32_t __cdecl QuestExcelConfigMgr::checkContentWorktopSelect(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestContent *content)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::vector<int>::const_reference v9; // rax
  _DWORD *v10; // rdx
  char v11; // al
  common::milog::MiLogStream *v12; // rax
  int32_t result; // eax
  char v15[192]; // [rsp+20h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 32 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkContentWorktopSelect;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862722] = -218959118;
  v5[536862724] = -202116109;
  if ( QuestExcelConfigMgr::checkSceneGroupConfigId(this, txt_config_mgr, &content->param_str) )
  {
    if ( *(char *)(((v3 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkContentWorktopSelect",
      2007);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v6, (const char (*)[16])byte_1A45DCC0);
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &content->param_str);
    common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v8, (const char (*)[44])byte_1A45DD00);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 32));
    *(_DWORD *)(((v3 + 32) >> 3) + 0x7FFF8000) = -117901064;
  }
  if ( std::vector<int>::empty(&content->param) )
    goto LABEL_12;
  v9 = std::vector<int>::operator[](&content->param, 0LL);
  v10 = v9;
  if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v9);
  }
  if ( *v10 )
LABEL_12:
    v11 = 1;
  else
    v11 = 0;
  if ( v11 )
  {
    *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkContentWorktopSelect",
      2011);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 96),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v12, (const char (*)[18])byte_1A45DD60);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    result = -1;
  }
  else
  {
    result = 0;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2018: range 000000000EF0F3F4-000000000EF0F80C
int32_t __cdecl QuestExcelConfigMgr::checkContentSealBattleResult(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestContent *content)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  std::vector<int>::const_reference v10; // rax
  _DWORD *v11; // rdx
  std::vector<int>::const_reference v12; // rax
  _DWORD *v13; // rdx
  char v14; // al
  common::milog::MiLogStream *v15; // rax
  char v17[192]; // [rsp+20h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 32 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkContentSealBattleResult;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862722] = -218959118;
  v5[536862724] = -202116109;
  if ( QuestExcelConfigMgr::checkSceneGroupConfigId(this, txt_config_mgr, &content->param_str) )
  {
    if ( *(char *)(((v3 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkContentSealBattleResult",
      2022);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 32),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v6, (const char (*)[16])byte_1A45DCC0);
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &content->param_str);
    common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v8, (const char (*)[44])byte_1A45DD00);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 32));
    result = -1;
  }
  else
  {
    if ( std::vector<int>::empty(&content->param) )
      goto LABEL_15;
    v10 = std::vector<int>::operator[](&content->param, 0LL);
    v11 = v10;
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v10);
    }
    if ( !*v11 )
      goto LABEL_16;
    v12 = std::vector<int>::operator[](&content->param, 0LL);
    v13 = v12;
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v12);
    }
    if ( *v13 != 1 )
LABEL_15:
      v14 = 1;
    else
LABEL_16:
      v14 = 0;
    if ( v14 )
    {
      if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkContentSealBattleResult",
        2027);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 96),
              (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(v15, (const char (*)[61])byte_1A45DDE0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v17 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2034: range 000000000EF0F80E-000000000EF0FFA2
int32_t __cdecl QuestExcelConfigMgr::checkSceneGroupConfigId(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::string *param_str)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  int32_t v10; // r14d
  common::milog::MiLogStream *v11; // rax
  std::vector<unsigned int>::reference v12; // rax
  uint32_t *v13; // rdx
  uint32_t v14; // r14d
  std::vector<unsigned int>::reference v15; // rax
  uint32_t *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  int32_t result; // eax
  LuaConfigMgr *lua_config_mgr; // [rsp+28h] [rbp-1B8h]
  char v23[432]; // [rsp+30h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 1 9 <unknown> 64 24 15 lua_id_vec:2035 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unkn"
                        "own> 320 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkSceneGroupConfigId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
  std::allocator<char>::allocator(v3 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v3 + 128),
    ",",
    (const std::allocator<char> *)(v3 + 48));
  v6 = common::tools::StringUtils::splitToList<unsigned int>(
         param_str,
         (const std::string *)(v3 + 128),
         (std::vector<unsigned int> *)(v3 + 64),
         1) != 0;
  std::string::~string((void *)(v3 + 128));
  *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v3 + 48);
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v6 )
  {
    *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkSceneGroupConfigId",
      2038);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 192),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v7, (const char (*)[17])byte_1A45DF00);
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, param_str);
    common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])byte_1A45DF40);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
    *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -117901064;
    v10 = -1;
  }
  else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 64)) > 2 )
  {
    lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
    v12 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 64), 2uLL);
    v13 = v12;
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v12);
    }
    v14 = *v13;
    v15 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 64), 1uLL);
    v16 = v15;
    if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v15);
    }
    if ( LuaConfigMgr::findGadgetScriptConfig(lua_config_mgr, *v16, v14) )
    {
      v10 = 0;
    }
    else
    {
      *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkSceneGroupConfigId",
        2049);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 320),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v17, (const char (*)[15])byte_1A45DFE0);
      v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, param_str);
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v19, (const char (*)[20])byte_1A45E020);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
      *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -117901064;
      v10 = -1;
    }
  }
  else
  {
    *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkSceneGroupConfigId",
      2043);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 256),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v11, (const char (*)[45])byte_1A45DF80);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
    *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -117901064;
    v10 = -1;
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  result = v10;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2056: range 000000000EF0FFA4-000000000EF104FD
int32_t __cdecl QuestExcelConfigMgr::checkGameTimeTick(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::string *param_str)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  int32_t v10; // r14d
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  int32_t result; // eax
  char v15[368]; // [rsp+20h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 1 9 <unknown> 64 24 13 time_vec:2057 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkGameTimeTick;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
  std::allocator<char>::allocator(v3 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v3 + 128),
    ",",
    (const std::allocator<char> *)(v3 + 48));
  v6 = common::tools::StringUtils::splitToList<unsigned int>(
         param_str,
         (const std::string *)(v3 + 128),
         (std::vector<unsigned int> *)(v3 + 64),
         1) != 0;
  std::string::~string((void *)(v3 + 128));
  *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v3 + 48);
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v6 )
  {
    *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkGameTimeTick",
      2060);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 192),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v7, (const char (*)[17])byte_1A45DF00);
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, param_str);
    common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])byte_1A45DF40);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
    *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -117901064;
    v10 = -1;
  }
  else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 64)) == 2 )
  {
    v10 = 0;
  }
  else
  {
    *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkGameTimeTick",
      2065);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 256),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v11, (const char (*)[28])byte_1A45E120);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, param_str);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
    *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -117901064;
    v10 = -1;
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  result = v10;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2072: range 000000000EF104FE-000000000EF10B6D
int32_t __cdecl QuestExcelConfigMgr::checkContentCityLevelup(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestContent *content)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  std::vector<int>::const_reference v9; // rax
  unsigned int *v10; // rdx
  __int64 v11; // rsi
  std::vector<int>::const_reference v12; // rax
  unsigned int *v13; // rdx
  __int64 v14; // rsi
  WorldAreaExcelConfigMgr *p_world_area_config_mgr; // rdi
  uint32_t v16; // edx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  char v27[288]; // [rsp+20h] [rbp-120h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 12 city_id:2078 48 4 10 level:2079 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkContentCityLevelup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  if ( std::vector<int>::size(&content->param) > 1 )
  {
    v9 = std::vector<int>::operator[](&content->param, 0LL);
    v10 = (unsigned int *)v9;
    if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v9);
    }
    v11 = *v10;
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 32, v11);
    *(_DWORD *)(v3 + 32) = v11;
    v12 = std::vector<int>::operator[](&content->param, 1uLL);
    v13 = (unsigned int *)v12;
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v12);
    }
    v14 = *v13;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, v14);
    *(_DWORD *)(v3 + 48) = v14;
    p_world_area_config_mgr = &txt_config_mgr->world_area_config_mgr;
    v16 = *(_DWORD *)(v3 + 48);
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
    {
      p_world_area_config_mgr = (WorldAreaExcelConfigMgr *)(v3 + 32);
      __asan_report_load4(v3 + 32);
    }
    if ( WorldAreaExcelConfigMgr::findCityLevelupConfig(p_world_area_config_mgr, *(_DWORD *)(v3 + 32), v16) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&content->count >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&content->count >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&content->count);
      }
      if ( content->count )
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkContentCityLevelup",
          2087);
        v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v23 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v22, (const char (*)[34])byte_1A45E320);
        v24 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(v23, (const char (*)[39])byte_1A45E380);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &content->count);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
      else
      {
        result = 0;
      }
    }
    else
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkContentCityLevelup",
        2082);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(v17, (const char (*)[43])byte_1A45E2C0);
      v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 32));
      v20 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v19, (const char (*)[9])" level: ");
      v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v21, (const char (*)[23])byte_1A459D20);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkContentCityLevelup",
      2075);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v6, (const char (*)[33])byte_1A45E220);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v7, (const char (*)[25])byte_1A45E280);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2094: range 000000000EF10B6E-000000000EF10F9E
int32_t __cdecl QuestExcelConfigMgr::checkContentPatternGroupClearMonster(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestContent *content)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  std::vector<int>::const_reference v8; // rax
  unsigned int *v9; // rdx
  __int64 v10; // rsi
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  char v17[224]; // [rsp+20h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 15 pattern_id:2101 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkContentPatternGroupClearMonster;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  if ( std::vector<int>::empty(&content->param) )
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkContentPatternGroupClearMonster",
      2098);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v6, (const char (*)[27])byte_1A45E480);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  else
  {
    v8 = std::vector<int>::operator[](&content->param, 0LL);
    v9 = (unsigned int *)v8;
    if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v8);
    }
    v10 = *v9;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, v10);
    *(_DWORD *)(v3 + 48) = v10;
    p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 48);
    if ( LuaConfigMgr::findPatternGroupScriptConfig(p_lua_config_mgr, *(unsigned int *)(v3 + 48)) )
    {
      result = 0;
    }
    else
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkContentPatternGroupClearMonster",
        2104);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])"pattern_id: ");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])byte_1A45E500);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2111: range 000000000EF10FA0-000000000EF18F8D
int32_t __cdecl QuestExcelConfigMgr::checkQuestExecConfig(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExcelConfig *quest_config_ptr,
        const std::vector<data::QuestExec> *exec_vec)
{
  __int64 v4; // rax
  _DWORD *v5; // rsi
  _DWORD *v6; // r12
  char *v7; // rsi
  bool v8; // al
  WeatherExcelConfigMgr *p_weather_config_mgr; // rdi
  uint32_t v10; // ecx
  char v11; // al
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  int v22; // eax
  const std::string *v23; // rax
  __int64 v24; // rsi
  common::milog::MiLogStream *v25; // rax
  int v26; // eax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // rax
  int v31; // eax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // eax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  int v37; // eax
  WorldAreaExcelConfigMgr *p_world_area_config_mgr; // rcx
  int v39; // eax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  int v46; // edx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  int v54; // eax
  LevelTagExcelConfigMgr *p_level_tag_config_mgr; // rcx
  int v56; // eax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  QuestExcelConfigMgr *v65; // rdx
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  _BOOL4 v76; // eax
  unsigned __int64 v77; // rax
  unsigned __int64 v78; // rax
  const std::string *v79; // rax
  const std::string *v80; // rax
  char v81; // r13
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  int v84; // r13d
  std::vector<unsigned int>::size_type v85; // r13
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v89; // rax
  common::milog::MiLogStream *v90; // rax
  __int64 v92; // rsi
  std::vector<unsigned int>::reference v93; // rax
  int *v94; // rdx
  int v95; // ecx
  char v96; // al
  std::vector<unsigned int>::reference v97; // rax
  _DWORD *v98; // rdx
  WeatherExcelConfigMgr *v99; // rdi
  common::milog::MiLogStream *v100; // rax
  common::milog::MiLogStream *v101; // rax
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // rax
  int v104; // edx
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // rax
  unsigned __int64 v110; // rdx
  unsigned __int64 v111; // rdx
  common::milog::MiLogStream *v112; // rax
  common::milog::MiLogStream *v113; // rax
  common::milog::MiLogStream *v114; // rax
  common::milog::MiLogStream *v115; // rax
  _BOOL4 v116; // eax
  const std::string *v117; // rax
  common::milog::MiLogStream *v118; // rax
  common::milog::MiLogStream *v119; // r13
  const std::string *v120; // rax
  common::milog::MiLogStream *v121; // rax
  common::milog::MiLogStream *v122; // rax
  unsigned __int64 v123; // rax
  const std::string *v124; // rax
  char *v125; // rsi
  common::milog::MiLogStream *v126; // rax
  common::milog::MiLogStream *v127; // r13
  const std::string *v128; // rax
  common::milog::MiLogStream *v129; // rax
  common::milog::MiLogStream *v130; // rax
  _BOOL4 v131; // r13d
  char *v132; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v133; // rax
  int *v134; // rdx
  int v135; // ecx
  char v136; // al
  uint32_t SceneIdByLevel1AreaId; // ecx
  common::milog::MiLogStream *v138; // rax
  common::milog::MiLogStream *v139; // rax
  common::milog::MiLogStream *v140; // rax
  common::milog::MiLogStream *v141; // rax
  common::milog::MiLogStream *v142; // rax
  common::milog::MiLogStream *v143; // rax
  int v144; // edx
  unsigned __int64 v145; // rdx
  common::milog::MiLogStream *v146; // rax
  common::milog::MiLogStream *v147; // rax
  common::milog::MiLogStream *v148; // rax
  common::milog::MiLogStream *v149; // rax
  _BOOL4 v150; // eax
  unsigned __int64 v151; // rax
  const std::string *v152; // rax
  char *v153; // rsi
  bool v154; // r13
  common::milog::MiLogStream *v155; // rax
  common::milog::MiLogStream *v156; // r13
  const std::string *v157; // rax
  common::milog::MiLogStream *v158; // rax
  common::milog::MiLogStream *v159; // rax
  int v160; // r13d
  char *v161; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v162; // rax
  int *v163; // rdx
  int v164; // ecx
  char v165; // al
  common::milog::MiLogStream *v166; // rax
  common::milog::MiLogStream *v167; // r13
  const std::string *v168; // rax
  common::milog::MiLogStream *v169; // rax
  common::milog::MiLogStream *v170; // rax
  common::milog::MiLogStream *v171; // rax
  common::milog::MiLogStream *v172; // rax
  int v173; // edx
  const std::string *v174; // rax
  common::milog::MiLogStream *v175; // rax
  common::milog::MiLogStream *v176; // r13
  const std::string *v177; // rax
  common::milog::MiLogStream *v178; // rax
  common::milog::MiLogStream *v179; // rax
  unsigned __int64 v180; // rdx
  common::milog::MiLogStream *v181; // rax
  common::milog::MiLogStream *v182; // rax
  common::milog::MiLogStream *v183; // rax
  common::milog::MiLogStream *v184; // rax
  int v185; // eax
  const std::string *v186; // rax
  common::milog::MiLogStream *v187; // rax
  common::milog::MiLogStream *v188; // r13
  const std::string *v189; // rax
  common::milog::MiLogStream *v190; // rax
  common::milog::MiLogStream *v191; // rax
  TrialAvatarExcelConfigMgr *p_trial_avatar_config_mgr; // rcx
  int v193; // eax
  __int64 v194; // rsi
  common::milog::MiLogStream *v195; // rax
  common::milog::MiLogStream *v196; // rax
  common::milog::MiLogStream *v197; // rax
  common::milog::MiLogStream *v198; // rax
  const std::string *v199; // rax
  common::milog::MiLogStream *v200; // rax
  common::milog::MiLogStream *v201; // r13
  const std::string *v202; // rax
  common::milog::MiLogStream *v203; // rax
  common::milog::MiLogStream *v204; // rax
  common::milog::MiLogStream *v205; // rax
  common::milog::MiLogStream *v206; // rax
  common::milog::MiLogStream *v207; // rax
  common::milog::MiLogStream *v208; // rax
  common::milog::MiLogStream *v209; // rax
  common::milog::MiLogStream *v210; // rax
  common::milog::MiLogStream *v211; // rax
  _BOOL4 v212; // eax
  const std::string *v213; // rax
  common::milog::MiLogStream *v214; // rax
  common::milog::MiLogStream *v215; // rax
  common::milog::MiLogStream *v216; // rax
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  int v218; // eax
  common::milog::MiLogStream *v219; // rax
  common::milog::MiLogStream *v220; // rax
  common::milog::MiLogStream *v221; // rax
  common::milog::MiLogStream *v222; // rax
  common::milog::MiLogStream *v223; // rax
  common::milog::MiLogStream *v224; // rax
  common::milog::MiLogStream *v225; // rax
  common::milog::MiLogStream *v226; // rax
  unsigned __int64 v227; // rax
  const std::string *v228; // rax
  char *v229; // rsi
  common::milog::MiLogStream *v230; // rax
  common::milog::MiLogStream *v231; // r13
  const std::string *v232; // rax
  common::milog::MiLogStream *v233; // rax
  common::milog::MiLogStream *v234; // rax
  _BOOL4 v235; // r13d
  char *v236; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v237; // rax
  int *v238; // rdx
  int v239; // ecx
  char v240; // al
  JsonConfigMgr *p_json_config_mgr; // rsi
  int v242; // ecx
  uint32_t v243; // edx
  bool v244; // r13
  common::milog::MiLogStream *v245; // rax
  common::milog::MiLogStream *v246; // rax
  common::milog::MiLogStream *v247; // rax
  common::milog::MiLogStream *v248; // rax
  common::milog::MiLogStream *v249; // rax
  common::milog::MiLogStream *v250; // rax
  int v251; // edx
  unsigned __int64 v252; // rdx
  bool v253; // al
  common::milog::MiLogStream *v254; // rax
  common::milog::MiLogStream *v255; // rax
  common::milog::MiLogStream *v256; // rax
  common::milog::MiLogStream *v257; // rax
  common::milog::MiLogStream *v258; // rax
  common::milog::MiLogStream *v259; // rax
  common::milog::MiLogStream *v260; // rax
  unsigned __int64 v262; // [rsp+10h] [rbp-11A0h]
  char v263; // [rsp+18h] [rbp-1198h]
  char v264; // [rsp+19h] [rbp-1197h]
  char v265; // [rsp+1Ah] [rbp-1196h]
  char v266; // [rsp+1Bh] [rbp-1195h]
  bool v267; // [rsp+1Bh] [rbp-1195h]
  bool v268; // [rsp+1Bh] [rbp-1195h]
  int32_t v269; // [rsp+1Ch] [rbp-1194h]
  bool is_open_weather_area; // [rsp+46h] [rbp-116Ah]
  bool is_need_error; // [rsp+47h] [rbp-1169h]
  int32_t ret; // [rsp+48h] [rbp-1168h]
  uint32_t i; // [rsp+4Ch] [rbp-1164h]
  const data::QuestExec *exec; // [rsp+58h] [rbp-1158h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+60h] [rbp-1150h]
  std::vector<unsigned int> *__for_range_2; // [rsp+68h] [rbp-1148h]
  std::vector<unsigned int> *__for_range_1; // [rsp+70h] [rbp-1140h]
  data::MainQuestExcelConfig *main_quest_config_ptr_0; // [rsp+80h] [rbp-1130h]
  std::vector<unsigned int> *__for_range_0; // [rsp+98h] [rbp-1118h]
  char v284[4368]; // [rsp+A0h] [rbp-1110h] BYREF

  v262 = (unsigned __int64)v284;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_7(4320LL);
    if ( v4 )
      v262 = v4;
  }
  *(_QWORD *)v262 = 1102416563LL;
  *(_QWORD *)(v262 + 8) = "89 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 19 is_force_grant"
                          ":2506 128 1 19 is_force_grant:2537 144 1 9 <unknown> 160 4 13 quest_id:2112 176 4 20 parent_qu"
                          "est_id:2113 192 4 19 height_area_id:2271 208 4 20 is_open_weather:2272 224 4 20 parent_quest_i"
                          "d:2316 240 4 10 index:2332 256 4 16 map_area_id:2347 272 4 12 is_open:2348 288 4 14 giving_id:"
                          "2363 304 4 24 target_level_tag_id:2379 320 4 19 height_area_id:2444 336 4 13 scene_id:2462 352"
                          " 4 12 area_id:2474 368 4 20 trial_avatar_id:2497 384 4 20 trial_avatar_id:2525 400 4 13 scene_"
                          "id:2571 416 4 19 scene_point_id:2595 432 8 16 __for_begin:2121 464 8 14 __for_end:2121 496 8 1"
                          "6 __for_begin:2474 528 8 14 __for_end:2474 560 8 16 __for_begin:2497 592 8 14 __for_end:2497 6"
                          "24 8 16 __for_begin:2595 656 8 14 __for_end:2595 688 16 9 <unknown> 720 24 31 weather_height_a"
                          "rea_id_vec:2424 784 24 21 is_open_area_vec:2425 848 24 16 area_id_vec:2468 912 24 24 trial_ava"
                          "tar_id_vec:2491 976 24 17 point_id_vec:2589 1040 32 9 <unknown> 1104 32 9 <unknown> 1168 32 9 "
                          "<unknown> 1232 32 9 <unknown> 1296 32 9 <unknown> 1360 32 9 <unknown> 1424 32 9 <unknown> 1488"
                          " 32 9 <unknown> 1552 32 9 <unknown> 1616 32 9 <unknown> 1680 32 9 <unknown> 1744 32 9 <unknown"
                          "> 1808 32 9 <unknown> 1872 32 9 <unknown> 1936 32 9 <unknown> 2000 32 9 <unknown> 2064 32 9 <u"
                          "nknown> 2128 32 9 <unknown> 2192 32 9 <unknown> 2256 32 9 <unknown> 2320 32 9 <unknown> 2384 3"
                          "2 9 <unknown> 2448 32 9 <unknown> 2512 32 9 <unknown> 2576 32 9 <unknown> 2640 32 9 <unknown> "
                          "2704 32 9 <unknown> 2768 32 9 <unknown> 2832 32 9 <unknown> 2896 32 9 <unknown> 2960 32 9 <unk"
                          "nown> 3024 32 9 <unknown> 3088 32 9 <unknown> 3152 32 9 <unknown> 3216 32 9 <unknown> 3280 32 "
                          "9 <unknown> 3344 32 9 <unknown> 3408 32 9 <unknown> 3472 32 9 <unknown> 3536 32 9 <unknown> 36"
                          "00 32 9 <unknown> 3664 32 9 <unknown> 3728 32 9 <unknown> 3792 32 9 <unknown> 3856 32 9 <unkno"
                          "wn> 3920 32 9 <unknown> 3984 32 9 <unknown> 4048 32 9 <unknown> 4112 32 9 <unknown> 4176 32 9 "
                          "<unknown> 4240 48 28 weather_exec_check_info:2119";
  *(_QWORD *)(v262 + 16) = QuestExcelConfigMgr::checkQuestExecConfig;
  v5 = (_DWORD *)(v262 >> 3);
  v6 = v5;
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234753535;
  v5[536862725] = -234556924;
  v5[536862726] = -234556924;
  v5[536862727] = -234556924;
  v5[536862728] = -234556924;
  v5[536862729] = -234556924;
  v5[536862730] = -234556924;
  v5[536862731] = -234556924;
  v5[536862732] = -234556924;
  v5[536862733] = 61956;
  v5[536862733] = -234881024;
  v5[536862734] = 62194;
  v5[536862734] = -234881024;
  v5[536862735] = 62194;
  v5[536862735] = -234881024;
  v5[536862736] = 62194;
  v5[536862736] = -234881024;
  v5[536862737] = 62194;
  v5[536862737] = -234881024;
  v5[536862738] = 62194;
  v5[536862738] = -234881024;
  v5[536862739] = 62194;
  v5[536862739] = -234881024;
  v5[536862740] = 62194;
  v5[536862740] = -234881024;
  v5[536862741] = 62194;
  v5[536862742] = 62194;
  v5[536862743] = -218959360;
  v5[536862744] = 62194;
  v5[536862745] = -218959360;
  v5[536862746] = 62194;
  v5[536862747] = -218959360;
  v5[536862748] = 62194;
  v5[536862749] = -218959360;
  v5[536862750] = 62194;
  v5[536862751] = -218959360;
  v5[536862752] = 62194;
  v5[536862753] = -219021312;
  v5[536862754] = 62194;
  v5[536862755] = -219021312;
  v5[536862756] = 62194;
  v5[536862757] = -219021312;
  v5[536862758] = 62194;
  v5[536862759] = -219021312;
  v5[536862760] = 62194;
  v5[536862761] = -219021312;
  v5[536862762] = 62194;
  v5[536862763] = -219021312;
  v5[536862764] = 62194;
  v5[536862765] = -219021312;
  v5[536862766] = 62194;
  v5[536862767] = -219021312;
  v5[536862768] = 62194;
  v5[536862769] = -219021312;
  v5[536862770] = 62194;
  v5[536862771] = -219021312;
  v5[536862772] = 62194;
  v5[536862773] = -219021312;
  v5[536862774] = 62194;
  v5[536862775] = -219021312;
  v5[536862776] = 62194;
  v5[536862777] = -219021312;
  v5[536862778] = 62194;
  v5[536862779] = -219021312;
  v5[536862780] = 62194;
  v5[536862781] = -219021312;
  v5[536862782] = 62194;
  v5[536862783] = -219021312;
  v5[536862784] = 62194;
  v5[536862785] = -219021312;
  v5[536862786] = 62194;
  v5[536862787] = -219021312;
  v5[536862788] = 62194;
  v5[536862789] = -219021312;
  v5[536862790] = 62194;
  v5[536862791] = -219021312;
  v5[536862792] = 62194;
  v5[536862793] = -219021312;
  v5[536862794] = 62194;
  v5[536862795] = -219021312;
  v5[536862796] = 62194;
  v5[536862797] = -219021312;
  v5[536862798] = 62194;
  v5[536862799] = -219021312;
  v5[536862800] = 62194;
  v5[536862801] = -219021312;
  v5[536862802] = 62194;
  v5[536862803] = -219021312;
  v5[536862804] = 62194;
  v5[536862805] = -219021312;
  v5[536862806] = 62194;
  v5[536862807] = -219021312;
  v5[536862808] = 62194;
  v5[536862809] = -219021312;
  v5[536862810] = 62194;
  v5[536862811] = -219021312;
  v5[536862812] = 62194;
  v5[536862813] = -219021312;
  v5[536862814] = 62194;
  v5[536862815] = -219021312;
  v5[536862816] = 62194;
  v5[536862817] = -219021312;
  v5[536862818] = 62194;
  v5[536862819] = -219021312;
  v5[536862820] = 62194;
  v5[536862821] = -219021312;
  v5[536862822] = 62194;
  v5[536862823] = -219021312;
  v5[536862824] = 62194;
  v5[536862825] = -219021312;
  v5[536862826] = 62194;
  v5[536862827] = -219021312;
  v5[536862828] = 62194;
  v5[536862829] = -219021312;
  v5[536862830] = 62194;
  v5[536862831] = -219021312;
  v5[536862832] = 62194;
  v5[536862833] = -219021312;
  v5[536862834] = 62194;
  v5[536862835] = -219021312;
  v5[536862836] = 62194;
  v5[536862837] = -219021312;
  v5[536862838] = 62194;
  v5[536862839] = -219021312;
  v5[536862840] = 62194;
  v5[536862841] = -219021312;
  v5[536862842] = 62194;
  v5[536862843] = -219021312;
  v5[536862844] = 62194;
  v5[536862845] = -219021312;
  v5[536862846] = 62194;
  v5[536862847] = -219021312;
  v5[536862848] = 62194;
  v5[536862849] = -219021312;
  v5[536862850] = 62194;
  v5[536862851] = -219021312;
  v5[536862852] = 62194;
  v5[536862854] = -202116109;
  if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v262 + 160, v5);
  *(_DWORD *)(v262 + 160) = 0;
  if ( *(_BYTE *)(((v262 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v262 + 176, v5);
  *(_DWORD *)(v262 + 176) = 0;
  if ( quest_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&quest_config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&quest_config_ptr->sub_id);
    }
    *(_DWORD *)(v262 + 160) = quest_config_ptr->sub_id;
    v5 = (_DWORD *)((((_BYTE)quest_config_ptr + 12) & 7u) + 3);
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config_ptr->main_id);
    }
    *(_DWORD *)(v262 + 176) = quest_config_ptr->main_id;
  }
  std::map<bool,std::map<unsigned int,std::set<unsigned int>>>::map((std::map<bool,std::map<unsigned int,std::set<unsigned int>>> *const)(v262 + 4240));
  ret = 0;
  if ( *(_BYTE *)(((v262 + 432) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v262 + 432, v5);
  *(std::vector<data::QuestExec>::const_iterator *)(v262 + 432) = std::vector<data::QuestExec>::begin(exec_vec);
  if ( *(_BYTE *)(((v262 + 464) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v262 + 464, v5);
  *(std::vector<data::QuestExec>::const_iterator *)(v262 + 464) = std::vector<data::QuestExec>::end(exec_vec);
  while ( 2 )
  {
    v7 = (char *)(v262 + 464);
    if ( !__gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
            (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v262 + 432),
            (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v262 + 464)) )
    {
      v34 = 1;
      goto LABEL_503;
    }
    exec = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v262 + 432));
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    switch ( exec->type )
    {
      case QUEST_EXEC_DEL_PACK_ITEM:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecDelPackItem(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_UNLOCK_POINT:
      case QUEST_EXEC_LOCK_POINT:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecUnlockPoint(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_UNLOCK_AREA:
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          *(_BYTE *)(((v262 + 336) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v262 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 336) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v262 + 336, v7);
          *(_DWORD *)(v262 + 336) = 0;
          v117 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v117, (unsigned int *)(v262 + 336), 1) )
          {
            v123 = ((v262 + 848) >> 3) + 2147450880;
            *(_WORD *)v123 = 0;
            *(_BYTE *)(v123 + 2) = 0;
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v262 + 848));
            *(_DWORD *)(((v262 + 2768) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v262 + 80) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v262 + 80);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v262 + 2768),
              ",",
              (const std::allocator<char> *)(v262 + 80));
            v124 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            v125 = (char *)(v262 + 2768);
            v267 = common::tools::StringUtils::splitToList<unsigned int>(
                     v124,
                     (const std::string *)(v262 + 2768),
                     (std::vector<unsigned int> *)(v262 + 848),
                     0)
                || std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v262 + 848));
            std::string::~string((void *)(v262 + 2768));
            *(_DWORD *)(((v262 + 2768) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v262 + 80);
            *(_BYTE *)(((v262 + 80) >> 3) + 0x7FFF8000) = -8;
            if ( v267 )
            {
              *(_DWORD *)(((v262 + 2832) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 2832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 2863) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 2863) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 2832, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 2832),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2471);
              v126 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v262 + 2832),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v127 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                       v126,
                       (const char (*)[17])"invalid param 1:");
              v128 = std::vector<std::string>::operator[](&exec->param, 1uLL);
              v129 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v127, v128);
              v130 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                       v129,
                       (const char (*)[11])" quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v130,
                (const unsigned int *)(v262 + 160));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2832));
              *(_DWORD *)(((v262 + 2832) >> 3) + 0x7FFF8000) = -117901064;
              v269 = -1;
              v131 = 0;
            }
            else
            {
              __for_range_0 = (std::vector<unsigned int> *)(v262 + 848);
              *(_BYTE *)(((v262 + 496) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v262 + 496) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v262 + 496, v125);
              *(std::vector<unsigned int>::iterator *)(v262 + 496) = std::vector<unsigned int>::begin(__for_range_0);
              *(_BYTE *)(((v262 + 528) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((v262 + 528) >> 3) + 0x7FFF8000) )
                __asan_report_store8(v262 + 528, v125);
              *(std::vector<unsigned int>::iterator *)(v262 + 528) = std::vector<unsigned int>::end(__for_range_0);
              while ( 1 )
              {
                v132 = (char *)(v262 + 528);
                if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                        (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v262 + 496),
                        (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v262 + 528)) )
                {
                  v144 = 1;
                  goto LABEL_293;
                }
                *(_BYTE *)(((v262 + 352) >> 3) + 0x7FFF8000) = 4;
                v133 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v262 + 496));
                v134 = (int *)v133;
                if ( *(_BYTE *)(((unsigned __int64)v133 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v133 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v133 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v133);
                }
                v135 = *v134;
                v136 = *(_BYTE *)(((v262 + 352) >> 3) + 0x7FFF8000);
                if ( v136 != 0 && v136 <= 3 )
                {
                  LOBYTE(v132) = v136 != 0;
                  __asan_report_store4(v262 + 352, v132);
                }
                *(_DWORD *)(v262 + 352) = v135;
                SceneIdByLevel1AreaId = WorldAreaExcelConfigMgr::findSceneIdByLevel1AreaId(
                                          &txt_config_mgr->world_area_config_mgr,
                                          *(_DWORD *)(v262 + 352));
                if ( *(_BYTE *)(((v262 + 336) >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((v262 + 336) >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(v262 + 336);
                }
                if ( SceneIdByLevel1AreaId != *(_DWORD *)(v262 + 336) )
                  break;
                __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v262 + 496));
              }
              *(_DWORD *)(((v262 + 2896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 2896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 2927) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 2927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 2896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 2896),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2478);
              v138 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v262 + 2896),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v139 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v138, (const char (*)[9])"area_id:");
              v140 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v139,
                       (const unsigned int *)(v262 + 352));
              v141 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                       v140,
                       (const char (*)[11])" scene_id:");
              v142 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v141,
                       (const unsigned int *)(v262 + 336));
              v143 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                       v142,
                       (const char (*)[22])" not match! quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v143,
                (const unsigned int *)(v262 + 160));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2896));
              *(_DWORD *)(((v262 + 2896) >> 3) + 0x7FFF8000) = -117901064;
              v269 = -1;
              v144 = 0;
LABEL_293:
              *(_BYTE *)(((v262 + 352) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v262 + 496) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v262 + 528) >> 3) + 0x7FFF8000) = -8;
              v131 = v144 == 1;
            }
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v262 + 848));
            v116 = v131;
            goto LABEL_295;
          }
          *(_DWORD *)(((v262 + 2704) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 2704) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 2735) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 2735) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 2704, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 2704),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2465);
          v118 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v262 + 2704),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v119 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   v118,
                   (const char (*)[17])"invalid param 0:");
          v120 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v121 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v119, v120);
          v122 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v121, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v122,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2704));
          *(_DWORD *)(((v262 + 2704) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v116 = 0;
        }
        else
        {
          *(_DWORD *)(((v262 + 2640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 2640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 2671) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 2671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 2640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 2640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2459);
          v112 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v262 + 2640),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v113 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   v112,
                   (const char (*)[15])"invalid param:");
          v114 = common::milog::MiLogStream::operator<<<std::string>(v113, &exec->param);
          v115 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v114, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v115,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2640));
          *(_DWORD *)(((v262 + 2640) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v116 = 0;
        }
LABEL_295:
        *(_BYTE *)(((v262 + 336) >> 3) + 0x7FFF8000) = -8;
        v145 = ((v262 + 848) >> 3) + 2147450880;
        *(_WORD *)v145 = -1800;
        *(_BYTE *)(v145 + 2) = -8;
        if ( v116 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_UNLOCK_FORCE:
      case QUEST_EXEC_LOCK_FORCE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecUnlockForce(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_CHANGE_AVATAR_ELEMET:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecChangeAvatarElement(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_REFRESH_GROUP_MONSTER:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecRefreshGroupMonster(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_IS_FLYABLE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecSetIsFlyable(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_IS_WEATHER_LOCKED:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecSetIsWeatherLocked(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_IS_GAME_TIME_LOCKED:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecIsGameTimeLocked(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_IS_TRANSFERABLE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecSetIsTransferable(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_GRANT_TRIAL_AVATAR:
      case QUEST_EXEC_GRANT_TRIAL_AVATAR_AND_LOCK_TEAM:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          *(_DWORD *)(((v262 + 3280) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 3280) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 3311) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 3311) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 3280, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 3280),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2522);
          v181 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v262 + 3280),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v182 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   v181,
                   (const char (*)[15])"invalid param:");
          v183 = common::milog::MiLogStream::operator<<<std::string>(v182, &exec->param);
          v184 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v183, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v184,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3280));
          *(_DWORD *)(((v262 + 3280) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v185 = 0;
        }
        else
        {
          *(_BYTE *)(((v262 + 384) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v262 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 384) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v262 + 384, v7);
          *(_DWORD *)(v262 + 384) = 0;
          v186 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v186, (unsigned int *)(v262 + 384), 1) )
          {
            *(_DWORD *)(((v262 + 3344) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 3344) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 3375) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 3375) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 3344, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 3344),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2528);
            v187 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v262 + 3344),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v188 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                     v187,
                     (const char (*)[33])"invalid trial_avatar_id param 0:");
            v189 = std::vector<std::string>::operator[](&exec->param, 0LL);
            v190 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v188, v189);
            v191 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                     v190,
                     (const char (*)[11])" quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v191,
              (const unsigned int *)(v262 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3344));
            *(_DWORD *)(((v262 + 3344) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v185 = 0;
          }
          else
          {
            p_trial_avatar_config_mgr = &txt_config_mgr->trial_avatar_config_mgr;
            v193 = *(unsigned __int8 *)(((v262 + 384) >> 3) + 0x7FFF8000);
            if ( (_BYTE)v193 != 0 && (char)v193 <= 3 )
              __asan_report_load4(v262 + 384);
            v194 = *(unsigned int *)(v262 + 384);
            if ( data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(p_trial_avatar_config_mgr, v194) )
            {
              *(_BYTE *)(((v262 + 128) >> 3) + 0x7FFF8000) = 1;
              if ( *(char *)(((v262 + 128) >> 3) + 0x7FFF8000) < 0 )
                __asan_report_store1(v262 + 128, v194, v262 + 128);
              *(_BYTE *)(v262 + 128) = 0;
              if ( std::vector<std::string>::size(&exec->param) > 1
                && (v199 = std::vector<std::string>::operator[](&exec->param, 1uLL),
                    common::tools::StringUtils::strToNum<bool>(v199, (bool *)(v262 + 128), 1)) )
              {
                *(_DWORD *)(((v262 + 3472) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v262 + 3472) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v262 + 3503) >> 3) + 0x7FFF8000) != 0
                  && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 3503) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v262 + 3472, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v262 + 3472),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestExecConfig",
                  2542);
                v200 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v262 + 3472),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v201 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                         v200,
                         (const char (*)[32])"invalid is_force_grant param 1:");
                v202 = std::vector<std::string>::operator[](&exec->param, 1uLL);
                v203 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v201, v202);
                v204 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                         v203,
                         (const char (*)[11])" quest_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v204,
                  (const unsigned int *)(v262 + 160));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3472));
                *(_DWORD *)(((v262 + 3472) >> 3) + 0x7FFF8000) = -117901064;
                v269 = -1;
                v185 = 0;
              }
              else
              {
                v185 = 1;
              }
            }
            else
            {
              *(_DWORD *)(((v262 + 3408) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 3408) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 3439) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 3439) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 3408, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 3408),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2534);
              v195 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v262 + 3408),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v196 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                       v195,
                       (const char (*)[17])"trial_avatar_id:");
              v197 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v196,
                       (const unsigned int *)(v262 + 384));
              v198 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                       v197,
                       (const char (*)[31])" config not found of quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v198,
                (const unsigned int *)(v262 + 160));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3408));
              *(_DWORD *)(((v262 + 3408) >> 3) + 0x7FFF8000) = -117901064;
              v269 = -1;
              v185 = 0;
            }
          }
        }
        *(_BYTE *)(((v262 + 384) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v262 + 128) >> 3) + 0x7FFF8000) = -8;
        if ( v185 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_ROLLBACK_QUEST:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecRollbackQuest(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_NOTIFY_GROUP_LUA:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecNotifyGroupLuaParam(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_OPEN_STATE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecSetOpenState(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_DEL_PACK_ITEM_BATCH:
        if ( QuestExcelConfigMgr::checkExecDelPackItemBatch(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_REFRESH_GROUP_SUITE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecRefreshGroupSuite(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_REMOVE_TRIAL_AVATAR:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecRemoveTrialAvatar(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_GAME_TIME:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecSetGameTime(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_WEATHER_GADGET:
        *(_BYTE *)(((v262 + 192) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v262 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 192) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v262 + 192, v7);
        *(_DWORD *)(v262 + 192) = 0;
        *(_BYTE *)(((v262 + 208) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v262 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 208) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v262 + 208, v7);
        *(_DWORD *)(v262 + 208) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
               &exec->param,
               (unsigned int *)(v262 + 192),
               (unsigned int *)(v262 + 208),
               (unsigned int *)&exec->param) )
        {
          goto LABEL_89;
        }
        p_weather_config_mgr = &txt_config_mgr->weather_config_mgr;
        if ( *(_BYTE *)(((v262 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 192) >> 3) + 0x7FFF8000) <= 3 )
        {
          p_weather_config_mgr = (WeatherExcelConfigMgr *)(v262 + 192);
          __asan_report_load4(v262 + 192);
        }
        v10 = *(_DWORD *)(v262 + 192);
        if ( *(_BYTE *)(((v262 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 208) >> 3) + 0x7FFF8000) <= 3 )
        {
          p_weather_config_mgr = (WeatherExcelConfigMgr *)(v262 + 208);
          __asan_report_load4(v262 + 208);
        }
        if ( WeatherExcelConfigMgr::checkAndGatherWeatherExecCheckInfo(
               p_weather_config_mgr,
               (WeatherExecCheckInfo *)(v262 + 4240),
               *(_DWORD *)(v262 + 208) != 0,
               v10) )
        {
LABEL_89:
          v11 = 1;
        }
        else
        {
          v11 = 0;
        }
        if ( v11 )
        {
          *(_DWORD *)(((v262 + 1040) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1040) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1071) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 1071) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1040, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1040),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2276);
          v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 1040),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v13 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  v12,
                  (const char (*)[39])"check quest exec fail, height_area_id:");
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v13,
                  (const unsigned int *)(v262 + 192));
          v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v15,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1040));
          *(_DWORD *)(((v262 + 1040) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        *(_DWORD *)(((v262 + 1104) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v262 + 1104) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v262 + 1135) >> 3) + 0x7FFF8000) != 0
          && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 1135) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v262 + 1104, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v262 + 1104),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExecConfig",
          2280);
        v16 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                (common::milog::MiLogStream *const)(v262 + 1104),
                (const char (*)[10])"quest_id:");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v262 + 160));
        v18 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v17,
                (const char (*)[17])" height_area_id:");
        v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v18,
                (const unsigned int *)(v262 + 192));
        v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])" is_open:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v262 + 208));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1104));
        *(_DWORD *)(((v262 + 1104) >> 3) + 0x7FFF8000) = -117901064;
        *(_BYTE *)(((v262 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v262 + 208) >> 3) + 0x7FFF8000) = -8;
        goto LABEL_501;
      case QUEST_EXEC_NOTIFY_DAILY_TASK:
        if ( QuestExcelConfigMgr::checkExecNotifyDailyTask(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_CREATE_PATTERN_GROUP:
        if ( QuestExcelConfigMgr::checkExecCreatePatternGroup(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_REMOVE_PATTERN_GROUP:
        if ( QuestExcelConfigMgr::checkExecRemovePatternGroup(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_REFRESH_GROUP_SUITE_RANDOM:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecRefreshGroupSuiteRandom(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_ACTIVE_ITEM_GIVING:
        *(_BYTE *)(((v262 + 288) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v262 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 288) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v262 + 288, v7);
        *(_DWORD *)(v262 + 288) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v262 + 288)) )
        {
          *(_DWORD *)(((v262 + 1616) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1616) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1647) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 1647) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1616, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1616),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2366);
          v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 1616),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v43 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v42,
                  (const char (*)[25])"strVecToNum fail. param:");
          v44 = common::milog::MiLogStream::operator<<<std::string>(v43, &exec->param);
          v45 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v44, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v45,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1616));
          *(_DWORD *)(((v262 + 1616) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v46 = 0;
        }
        else
        {
          *(_DWORD *)(((v262 + 1680) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1680) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1711) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 1711) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1680, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1680),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2374);
          v47 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                  (common::milog::MiLogStream *const)(v262 + 1680),
                  (const char (*)[10])"quest_id:");
          v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v47,
                  (const unsigned int *)(v262 + 160));
          v49 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v48, (const char (*)[12])" giving_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v49,
            (const unsigned int *)(v262 + 288));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1680));
          *(_DWORD *)(((v262 + 1680) >> 3) + 0x7FFF8000) = -117901064;
          v46 = 1;
        }
        *(_BYTE *)(((v262 + 288) >> 3) + 0x7FFF8000) = -8;
        if ( v46 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_DEL_ALL_SPECIFIC_PACK_ITEM:
        if ( QuestExcelConfigMgr::checkExecDelAllSpecificPackItem(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_LOCK_AVATAR_TEAM:
        if ( QuestExcelConfigMgr::checkExecLockAvatarTeam(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_UPDATE_PARENT_QUEST_REWARD_INDEX:
        if ( QuestExcelConfigMgr::checkExecUpdateParentQuestRewardIndex(this, txt_config_mgr, quest_config_ptr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_DAILY_TASK_VAR:
        if ( QuestExcelConfigMgr::checkExecSetDailyTaskVar(this, txt_config_mgr, &exec->param) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_INC_DAILY_TASK_VAR:
      case QUEST_EXEC_DEC_DAILY_TASK_VAR:
        if ( QuestExcelConfigMgr::checkExecIncOrDecDailyTaskVar(this, txt_config_mgr, &exec->param) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_ACTIVE_ACTIVITY_COND_STATE:
      case QUEST_EXEC_INACTIVE_ACTIVITY_COND_STATE:
        if ( QuestExcelConfigMgr::checkActivityCondId(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_START_BARGAIN:
      case QUEST_EXEC_STOP_BARGAIN:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecStartBargain(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_QUEST_GLOBAL_VAR:
      case QUEST_EXEC_INC_QUEST_GLOBAL_VAR:
      case QUEST_EXEC_DEC_QUEST_GLOBAL_VAR:
        if ( QuestExcelConfigMgr::checkExecModifyQuestGlobalVar(this, txt_config_mgr, &exec->param) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_REGISTER_DYNAMIC_GROUP:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecRegisterDynamicGroup(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_UNREGISTER_DYNAMIC_GROUP:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecUnregisterDynamicGroup(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_SET_QUEST_VAR:
      case QUEST_EXEC_INC_QUEST_VAR:
      case QUEST_EXEC_DEC_QUEST_VAR:
      case QUEST_EXEC_RANDOM_QUEST_VAR:
      case QUEST_EXEC_RANDOM_CLOSED_QUEST_VAR:
        if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec->type);
        }
        v8 = exec->type == QUEST_EXEC_RANDOM_QUEST_VAR || exec->type == QUEST_EXEC_RANDOM_CLOSED_QUEST_VAR;
        if ( QuestExcelConfigMgr::checkExecModifyQuestVar(
               this,
               txt_config_mgr,
               &exec->param,
               v8,
               exec->type == QUEST_EXEC_RANDOM_CLOSED_QUEST_VAR) )
        {
          ret = -1;
        }
        goto LABEL_501;
      case QUEST_EXEC_RELOAD_SCENE_TAG:
        if ( QuestExcelConfigMgr::checkExecReloadSceneTag(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_REGISTER_DYNAMIC_GROUP_ONLY:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecRegisterDynamicGroupOnly(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_CHANGE_SKILL_DEPOT:
        if ( QuestExcelConfigMgr::checkExecChangeSkillDepot(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_ADD_SCENE_TAG:
      case QUEST_EXEC_DEL_SCENE_TAG:
        if ( QuestExcelConfigMgr::checkExecSceneTagOp(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_INIT_TIME_VAR:
        if ( QuestExcelConfigMgr::checkExecTimeVar(this, txt_config_mgr, exec) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_CLEAR_TIME_VAR:
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          *(_BYTE *)(((v262 + 224) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v262 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 224) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v262 + 224, v7);
          *(_DWORD *)(v262 + 224) = 0;
          v23 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v24 = v262 + 224;
          if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v262 + 224), 1) )
          {
            *(_DWORD *)(((v262 + 1232) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 1232) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 1263) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 1263) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 1232, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 1232),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2319);
            v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v262 + 1232),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v25, (const char (*)[25])byte_1A45EEC0);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1232));
            *(_DWORD *)(((v262 + 1232) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v22 = 0;
          }
          else
          {
            v26 = *(unsigned __int8 *)(((v262 + 224) >> 3) + 0x7FFF8000);
            if ( (_BYTE)v26 != 0 && (char)v26 <= 3 )
              __asan_report_load4(v262 + 224);
            if ( !*(_DWORD *)(v262 + 224)
              || (v24 = *(unsigned int *)(v262 + 224), data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                                                         this,
                                                         v24)) )
            {
              *(_BYTE *)(((v262 + 240) >> 3) + 0x7FFF8000) = 4;
              if ( *(_BYTE *)(((v262 + 240) >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((v262 + 240) >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_store4(v262 + 240, v24);
              }
              *(_DWORD *)(v262 + 240) = 0;
              v29 = std::vector<std::string>::operator[](&exec->param, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v262 + 240), 1) )
              {
                *(_DWORD *)(((v262 + 1360) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v262 + 1360) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v262 + 1391) >> 3) + 0x7FFF8000) != 0
                  && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 1391) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v262 + 1360, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v262 + 1360),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestExecConfig",
                  2335);
                v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v262 + 1360),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v30, (const char (*)[32])byte_1A45EF00);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1360));
                *(_DWORD *)(((v262 + 1360) >> 3) + 0x7FFF8000) = -117901064;
                v269 = -1;
                v22 = 0;
              }
              else
              {
                v31 = *(unsigned __int8 *)(((v262 + 240) >> 3) + 0x7FFF8000);
                if ( (_BYTE)v31 != 0 && (char)v31 <= 3 )
                  __asan_report_load4(v262 + 240);
                if ( *(_DWORD *)(v262 + 240) <= 9u )
                {
                  v22 = 1;
                }
                else
                {
                  *(_DWORD *)(((v262 + 1424) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v262 + 1424) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v262 + 1455) >> 3) + 0x7FFF8000) != 0
                    && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 1455) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v262 + 1424, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v262 + 1424),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkQuestExecConfig",
                    2340);
                  v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v262 + 1424),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v33 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
                          v32,
                          (const char (*)[52])byte_1A459EC0);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v33,
                    &QuestExcelConfigMgr::QUEST_TIME_VAR_LEN);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1424));
                  *(_DWORD *)(((v262 + 1424) >> 3) + 0x7FFF8000) = -117901064;
                  v269 = -1;
                  v22 = 0;
                }
              }
            }
            else
            {
              *(_DWORD *)(((v262 + 1296) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 1296) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 1327) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 1327) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 1296, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 1296),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2328);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v262 + 1296),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                      v27,
                      (const char (*)[28])"can't find parent_quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v28,
                (const unsigned int *)(v262 + 224));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1296));
              *(_DWORD *)(((v262 + 1296) >> 3) + 0x7FFF8000) = -117901064;
              v269 = -1;
              v22 = 0;
            }
          }
        }
        else
        {
          *(_DWORD *)(((v262 + 1168) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1168) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1199) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 1199) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1168, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1168),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2313);
          v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 1168),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(v21, (const char (*)[43])byte_1A45EE60);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1168));
          *(_DWORD *)(((v262 + 1168) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v22 = 0;
        }
        *(_BYTE *)(((v262 + 224) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v262 + 240) >> 3) + 0x7FFF8000) = -8;
        if ( v22 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_MODIFY_CLIMATE_AREA:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecModifyClimateArea(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_CHANGE_MAP_AREA_STATE:
        *(_BYTE *)(((v262 + 256) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v262 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 256) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v262 + 256, v7);
        *(_DWORD *)(v262 + 256) = 0;
        *(_BYTE *)(((v262 + 272) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v262 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 272) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v262 + 272, v7);
        *(_DWORD *)(v262 + 272) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
               &exec->param,
               (unsigned int *)(v262 + 256),
               (unsigned int *)(v262 + 272),
               (unsigned int *)&exec->param) )
        {
          *(_DWORD *)(((v262 + 1488) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1488) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1519) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 1519) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1488, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1488),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2351);
          v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 1488),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v36 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  v35,
                  (const char (*)[36])"parse map_area_id and is_open fail:");
          common::milog::MiLogStream::operator<<<std::string>(v36, &exec->param);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1488));
          *(_DWORD *)(((v262 + 1488) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v37 = 0;
        }
        else
        {
          p_world_area_config_mgr = &txt_config_mgr->world_area_config_mgr;
          v39 = *(unsigned __int8 *)(((v262 + 256) >> 3) + 0x7FFF8000);
          if ( (_BYTE)v39 != 0 && (char)v39 <= 3 )
            __asan_report_load4(v262 + 256);
          if ( data::WorldAreaExcelConfigMgrBase::findMapAreaConfig(
                 p_world_area_config_mgr,
                 *(unsigned int *)(v262 + 256)) )
          {
            v37 = 1;
          }
          else
          {
            *(_DWORD *)(((v262 + 1552) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 1552) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 1583) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 1583) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 1552, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 1552),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2356);
            v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v262 + 1552),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v41 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                    v40,
                    (const char (*)[37])"findMapAreaConfig fail, map_area_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v41,
              (const unsigned int *)(v262 + 256));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1552));
            *(_DWORD *)(((v262 + 1552) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v37 = 0;
          }
        }
        *(_BYTE *)(((v262 + 256) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v262 + 272) >> 3) + 0x7FFF8000) = -8;
        if ( v37 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_DEACTIVE_ITEM_GIVING:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecDeactiveItemGiving(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_CHANGE_SCENE_LEVEL_TAG:
        *(_BYTE *)(((v262 + 304) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v262 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 304) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v262 + 304, v7);
        *(_DWORD *)(v262 + 304) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v262 + 304)) )
        {
          *(_DWORD *)(((v262 + 1744) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1744) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1775) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 1775) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1744, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1744),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2382);
          v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 1744),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v51 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  v50,
                  (const char (*)[39])"parse target_level_tag_id fail. param:");
          v52 = common::milog::MiLogStream::operator<<<std::string>(v51, &exec->param);
          v53 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v52, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v53,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1744));
          *(_DWORD *)(((v262 + 1744) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v54 = 0;
        }
        else
        {
          p_level_tag_config_mgr = &txt_config_mgr->level_tag_config_mgr;
          v56 = *(unsigned __int8 *)(((v262 + 304) >> 3) + 0x7FFF8000);
          if ( (_BYTE)v56 != 0 && (char)v56 <= 3 )
            __asan_report_load4(v262 + 304);
          if ( data::LevelTagExcelConfigMgrBase::findLevelTagExcelConfig(
                 p_level_tag_config_mgr,
                 *(unsigned int *)(v262 + 304)) )
          {
            v54 = 1;
          }
          else
          {
            *(_DWORD *)(((v262 + 1808) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 1808) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 1839) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 1839) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 1808, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 1808),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2387);
            v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v262 + 1808),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v58 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v57, (const char (*)[11])"quest_id: ");
            v59 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v58,
                    (const unsigned int *)(v262 + 160));
            v60 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    v59,
                    (const char (*)[19])" quest exec type: ");
            v61 = common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v60, &exec->type);
            v62 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                    v61,
                    (const char (*)[46])" param error: cant find target_level_tag_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v62,
              (const unsigned int *)(v262 + 304));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1808));
            *(_DWORD *)(((v262 + 1808) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v54 = 0;
          }
        }
        *(_BYTE *)(((v262 + 304) >> 3) + 0x7FFF8000) = -8;
        if ( v54 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_UNLOCK_PLAYER_WORLD_SCENE:
      case QUEST_EXEC_LOCK_PLAYER_WORLD_SCENE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecUnlockPlayerWorldScene(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      case QUEST_EXEC_FAIL_MAINCOOP:
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          *(_DWORD *)(((v262 + 1872) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1872) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1903) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 1903) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1872, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1872),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2396);
          v63 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 1872),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v63, (const char (*)[44])byte_1A45F140);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1872));
          *(_DWORD *)(((v262 + 1872) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v34 = 0;
          goto LABEL_503;
        }
        std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( (unsigned __int8)std::string::empty() )
        {
          *(_DWORD *)(((v262 + 1936) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 1936) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 1967) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 1967) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 1936, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 1936),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2401);
          v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 1936),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(v64, (const char (*)[43])byte_1A45F1A0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 1936));
          *(_DWORD *)(((v262 + 1936) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v34 = 0;
          goto LABEL_503;
        }
        v65 = this;
        if ( *(_BYTE *)(((v262 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 176) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 176);
        main_quest_config_ptr_0 = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                                    v65,
                                    *(unsigned int *)(v262 + 176));
        if ( !main_quest_config_ptr_0 )
        {
          *(_DWORD *)(((v262 + 2000) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 2000) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 2031) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 2031) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 2000, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 2000),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2407);
          v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v262 + 2000),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v67 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                  v66,
                  (const char (*)[43])"findMainQuestExcelConfig failed, quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v67,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2000));
          *(_DWORD *)(((v262 + 2000) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v34 = 0;
          goto LABEL_503;
        }
        if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int> const,unsigned int>(
               &txt_config_mgr->coop_config_mgr.series_to_main_coop_map,
               &main_quest_config_ptr_0->series) )
        {
LABEL_501:
          __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v262 + 432));
          continue;
        }
        *(_DWORD *)(((v262 + 2064) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v262 + 2064) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v262 + 2095) >> 3) + 0x7FFF8000) != 0
          && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 2095) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v262 + 2064, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v262 + 2064),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExecConfig",
          2412);
        v68 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v262 + 2064),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v69 = common::milog::MiLogStream::operator<<<char [77],(char *[77])0>(v68, (const char (*)[77])byte_1A45F200);
        v70 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v69,
                (const unsigned int *)(v262 + 160));
        v71 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v70,
                (const char (*)[19])", parent_quest_id:");
        v72 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v71,
                (const unsigned int *)(v262 + 176));
        v73 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v72, (const char (*)[10])", series:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v73, &main_quest_config_ptr_0->series);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2064));
        *(_DWORD *)(((v262 + 2064) >> 3) + 0x7FFF8000) = -117901064;
        v269 = -1;
        v34 = 0;
LABEL_503:
        *(_BYTE *)(((v262 + 432) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v262 + 464) >> 3) + 0x7FFF8000) = -8;
        if ( v34 == 1 )
        {
          if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v262 + 160);
          v253 = *(_DWORD *)(v262 + 160) != 7213205 && *(_DWORD *)(v262 + 160) != 7217220;
          is_need_error = v253;
          if ( WeatherExcelConfigMgr::checkWeatherExecCheckInfo(
                 &txt_config_mgr->weather_config_mgr,
                 (const WeatherExecCheckInfo *)(v262 + 4240),
                 v253) )
          {
            if ( is_need_error )
            {
              *(_DWORD *)(((v262 + 4112) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 4112) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 4143) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 4143) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 4112, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 4112),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2779);
              v254 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v262 + 4112),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v255 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                       v254,
                       (const char (*)[10])"quest_id:");
              v256 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v255,
                       (const unsigned int *)(v262 + 160));
              v257 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
                       v256,
                       (const char (*)[58])" checkWeatherExecCheckInfo fail, weather_exec_check_info:");
              common::milog::MiLogStream::operator<<<bool,std::map<unsigned int,std::set<unsigned int>>>(
                v257,
                (const std::map<bool,std::map<unsigned int,std::set<unsigned int>>> *)(v262 + 4240));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 4112));
              *(_DWORD *)(((v262 + 4112) >> 3) + 0x7FFF8000) = -117901064;
              ret = -1;
            }
            else
            {
              *(_DWORD *)(((v262 + 4176) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 4176) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 4207) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 4207) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 4176, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 4176),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2784);
              v258 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                       (common::milog::MiLogStream *const)(v262 + 4176),
                       (const char (*)[10])"quest_id:");
              v259 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v258,
                       (const unsigned int *)(v262 + 160));
              v260 = common::milog::MiLogStream::operator<<<char [73],(char *[73])0>(
                       v259,
                       (const char (*)[73])" checkWeatherExecCheckInfo fail, but ignore it. weather_exec_check_info:");
              common::milog::MiLogStream::operator<<<bool,std::map<unsigned int,std::set<unsigned int>>>(
                v260,
                (const std::map<bool,std::map<unsigned int,std::set<unsigned int>>> *)(v262 + 4240));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 4176));
              *(_DWORD *)(((v262 + 4176) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
          v269 = ret;
        }
        std::map<bool,std::map<unsigned int,std::set<unsigned int>>>::~map((std::map<bool,std::map<unsigned int,std::set<unsigned int>>> *const)(v262 + 4240));
        if ( v284 == (char *)v262 )
        {
          *((_QWORD *)v6 + 268431360) = 0LL;
          *(_QWORD *)(v6 + 536862851) = 0LL;
          memset(
            (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
            0,
            8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 532) & 0xFFFFFFF8) >> 3));
          v6[536862854] = 0;
        }
        else
        {
          *(_QWORD *)v262 = 1172321806LL;
          __asan_stack_free_7(v262, 4320LL, v284);
        }
        return v269;
      case QUEST_EXEC_MODIFY_WEATHER_AREA:
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          v77 = ((v262 + 720) >> 3) + 2147450880;
          *(_WORD *)v77 = 0;
          *(_BYTE *)(v77 + 2) = 0;
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v262 + 720));
          v78 = ((v262 + 784) >> 3) + 2147450880;
          *(_WORD *)v78 = 0;
          *(_BYTE *)(v78 + 2) = 0;
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v262 + 784));
          v266 = 0;
          v265 = 0;
          v264 = 0;
          v263 = 0;
          *(_DWORD *)(((v262 + 2192) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v262 + 48) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v262 + 48);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v262 + 2192),
            ";",
            (const std::allocator<char> *)(v262 + 48));
          v79 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::splitToList<unsigned int>(
                 v79,
                 (const std::string *)(v262 + 2192),
                 (std::vector<unsigned int> *)(v262 + 720),
                 0) )
          {
            goto LABEL_203;
          }
          *(_DWORD *)(((v262 + 2256) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v262 + 64) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v262 + 64);
          v266 = 1;
          v265 = 1;
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v262 + 2256),
            ";",
            (const std::allocator<char> *)(v262 + 64));
          v264 = 1;
          v263 = 1;
          v80 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          if ( common::tools::StringUtils::splitToList<unsigned int>(
                 v80,
                 (const std::string *)(v262 + 2256),
                 (std::vector<unsigned int> *)(v262 + 784),
                 0) )
          {
LABEL_203:
            v81 = 1;
          }
          else
          {
            v81 = 0;
          }
          if ( v263 )
            std::string::~string((void *)(v262 + 2256));
          if ( v264 )
            *(_DWORD *)(((v262 + 2256) >> 3) + 0x7FFF8000) = -117901064;
          if ( v265 )
            std::allocator<char>::~allocator(v262 + 64);
          if ( v266 )
            *(_BYTE *)(((v262 + 64) >> 3) + 0x7FFF8000) = -8;
          std::string::~string((void *)(v262 + 2192));
          *(_DWORD *)(((v262 + 2192) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v262 + 48);
          *(_BYTE *)(((v262 + 48) >> 3) + 0x7FFF8000) = -8;
          if ( v81 )
          {
            *(_DWORD *)(((v262 + 2320) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 2320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 2351) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 2351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 2320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 2320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2429);
            v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v262 + 2320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v83 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                    v82,
                    (const char (*)[28])"parse param fail, quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v83,
              (const unsigned int *)(v262 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2320));
            *(_DWORD *)(((v262 + 2320) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v84 = 0;
            goto LABEL_254;
          }
          v85 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v262 + 720));
          if ( v85 != std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v262 + 784)) )
          {
            *(_DWORD *)(((v262 + 2384) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 2384) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 2415) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 2415) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 2384, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 2384),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2434);
            v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v262 + 2384),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v87 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                    v86,
                    (const char (*)[48])byte_1A45F360);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v87,
              (const unsigned int *)(v262 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2384));
            *(_DWORD *)(((v262 + 2384) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v84 = 0;
            goto LABEL_254;
          }
          if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v262 + 720))
            || std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v262 + 784)) )
          {
            *(_DWORD *)(((v262 + 2448) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 2448) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 2479) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 2479) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 2448, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 2448),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2439);
            v89 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v262 + 2448),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v90 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                    v89,
                    (const char (*)[45])byte_1A45F3C0);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v90,
              (const unsigned int *)(v262 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2448));
            *(_DWORD *)(((v262 + 2448) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v84 = 0;
            goto LABEL_254;
          }
          for ( i = 0;
                i < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v262 + 720))
             && i < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v262 + 784));
                ++i )
          {
            *(_BYTE *)(((v262 + 320) >> 3) + 0x7FFF8000) = 4;
            v92 = i;
            v93 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v262 + 720), i);
            v94 = (int *)v93;
            if ( *(_BYTE *)(((unsigned __int64)v93 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v93 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v93 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v93);
            }
            v95 = *v94;
            v96 = *(_BYTE *)(((v262 + 320) >> 3) + 0x7FFF8000);
            if ( v96 != 0 && v96 <= 3 )
            {
              LOBYTE(v92) = v96 != 0;
              __asan_report_store4(v262 + 320, v92);
            }
            *(_DWORD *)(v262 + 320) = v95;
            v97 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v262 + 784), i);
            v98 = v97;
            if ( *(_BYTE *)(((unsigned __int64)v97 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v97 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v97 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v97);
            }
            is_open_weather_area = *v98 != 0;
            v99 = &txt_config_mgr->weather_config_mgr;
            if ( *(_BYTE *)(((v262 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 320) >> 3) + 0x7FFF8000) <= 3 )
            {
              v99 = (WeatherExcelConfigMgr *)(v262 + 320);
              __asan_report_load4(v262 + 320);
            }
            if ( WeatherExcelConfigMgr::checkAndGatherWeatherExecCheckInfo(
                   v99,
                   (WeatherExecCheckInfo *)(v262 + 4240),
                   is_open_weather_area,
                   *(_DWORD *)(v262 + 320)) )
            {
              *(_DWORD *)(((v262 + 2512) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 2512) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 2543) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 2543) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 2512, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 2512),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2448);
              v100 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v262 + 2512),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v101 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                       v100,
                       (const char (*)[39])"check quest exec fail, height_area_id:");
              v102 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v101,
                       (const unsigned int *)(v262 + 320));
              v103 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                       v102,
                       (const char (*)[11])" quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v103,
                (const unsigned int *)(v262 + 160));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2512));
              *(_DWORD *)(((v262 + 2512) >> 3) + 0x7FFF8000) = -117901064;
              v269 = -1;
              v104 = 0;
            }
            else
            {
              *(_DWORD *)(((v262 + 2576) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 2576) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 2607) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 2607) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 2576, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 2576),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2451);
              v105 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                       (common::milog::MiLogStream *const)(v262 + 2576),
                       (const char (*)[10])"quest_id:");
              v106 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v105,
                       (const unsigned int *)(v262 + 160));
              v107 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                       v106,
                       (const char (*)[17])" height_area_id:");
              v108 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v107,
                       (const unsigned int *)(v262 + 320));
              v109 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                       v108,
                       (const char (*)[10])" is_open:");
              common::milog::MiLogStream::operator<<(v109, is_open_weather_area);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2576));
              *(_DWORD *)(((v262 + 2576) >> 3) + 0x7FFF8000) = -117901064;
              v104 = 1;
            }
            *(_BYTE *)(((v262 + 320) >> 3) + 0x7FFF8000) = -8;
            if ( v104 != 1 )
            {
              v84 = 0;
LABEL_254:
              std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v262 + 784));
              std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v262 + 720));
              v76 = v84 != 0;
              goto LABEL_255;
            }
          }
          v84 = 1;
          goto LABEL_254;
        }
        *(_DWORD *)(((v262 + 2128) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v262 + 2128) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v262 + 2159) >> 3) + 0x7FFF8000) != 0
          && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 2159) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v262 + 2128, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v262 + 2128),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExecConfig",
          2421);
        v74 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v262 + 2128),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v75 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v74,
                (const char (*)[36])"param vec is less than 2, quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v75, (const unsigned int *)(v262 + 160));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2128));
        *(_DWORD *)(((v262 + 2128) >> 3) + 0x7FFF8000) = -117901064;
        v269 = -1;
        v76 = 0;
LABEL_255:
        v110 = ((v262 + 720) >> 3) + 2147450880;
        *(_WORD *)v110 = -1800;
        *(_BYTE *)(v110 + 2) = -8;
        v111 = ((v262 + 784) >> 3) + 2147450880;
        *(_WORD *)v111 = -1800;
        *(_BYTE *)(v111 + 2) = -8;
        if ( v76 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_MODIFY_ARANARA_COLLECTION_STATE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecModifyAranaraCollectionState(
               this,
               txt_config_mgr,
               exec,
               *(_DWORD *)(v262 + 160)) )
        {
          ret = -1;
        }
        goto LABEL_501;
      case QUEST_EXEC_GRANT_TRIAL_AVATAR_BATCH_AND_LOCK_TEAM:
        if ( !std::vector<std::string>::empty(&exec->param) )
        {
          v151 = ((v262 + 912) >> 3) + 2147450880;
          *(_WORD *)v151 = 0;
          *(_BYTE *)(v151 + 2) = 0;
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v262 + 912));
          *(_DWORD *)(((v262 + 3024) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v262 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v262 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v262 + 3024),
            ",",
            (const std::allocator<char> *)(v262 + 96));
          v152 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v153 = (char *)(v262 + 3024);
          v154 = common::tools::StringUtils::splitToList<unsigned int>(
                   v152,
                   (const std::string *)(v262 + 3024),
                   (std::vector<unsigned int> *)(v262 + 912),
                   0) != 0;
          std::string::~string((void *)(v262 + 3024));
          *(_DWORD *)(((v262 + 3024) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v262 + 96);
          *(_BYTE *)(((v262 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( v154 )
          {
            *(_DWORD *)(((v262 + 3088) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 3088) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 3119) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 3119) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 3088, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 3088),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2494);
            v155 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v262 + 3088),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v156 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     v155,
                     (const char (*)[17])"invalid param 0:");
            v157 = std::vector<std::string>::operator[](&exec->param, 0LL);
            v158 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v156, v157);
            v159 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                     v158,
                     (const char (*)[11])" quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v159,
              (const unsigned int *)(v262 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3088));
            *(_DWORD *)(((v262 + 3088) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v160 = 0;
          }
          else
          {
            __for_range_1 = (std::vector<unsigned int> *)(v262 + 912);
            *(_BYTE *)(((v262 + 560) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v262 + 560) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v262 + 560, v153);
            *(std::vector<unsigned int>::iterator *)(v262 + 560) = std::vector<unsigned int>::begin(__for_range_1);
            *(_BYTE *)(((v262 + 592) >> 3) + 0x7FFF8000) = 0;
            if ( *(_BYTE *)(((v262 + 592) >> 3) + 0x7FFF8000) )
              __asan_report_store8(v262 + 592, v153);
            *(std::vector<unsigned int>::iterator *)(v262 + 592) = std::vector<unsigned int>::end(__for_range_1);
            while ( 1 )
            {
              v161 = (char *)(v262 + 592);
              if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v262 + 560),
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v262 + 592)) )
              {
                v173 = 1;
                goto LABEL_321;
              }
              *(_BYTE *)(((v262 + 368) >> 3) + 0x7FFF8000) = 4;
              v162 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v262 + 560));
              v163 = (int *)v162;
              if ( *(_BYTE *)(((unsigned __int64)v162 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v162 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v162 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v162);
              }
              v164 = *v163;
              v165 = *(_BYTE *)(((v262 + 368) >> 3) + 0x7FFF8000);
              if ( v165 != 0 && v165 <= 3 )
              {
                LOBYTE(v161) = v165 != 0;
                __asan_report_store4(v262 + 368, v161);
              }
              *(_DWORD *)(v262 + 368) = v164;
              if ( !data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(
                      &txt_config_mgr->trial_avatar_config_mgr,
                      *(unsigned int *)(v262 + 368)) )
                break;
              __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v262 + 560));
            }
            *(_DWORD *)(((v262 + 3152) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 3152) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 3183) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 3183) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 3152, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 3152),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2502);
            v166 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v262 + 3152),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v167 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v166, (const char (*)[9])"param 0:");
            v168 = std::vector<std::string>::operator[](&exec->param, 0LL);
            v169 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v167, v168);
            v170 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                     v169,
                     (const char (*)[18])" trial_avatar_id:");
            v171 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v170,
                     (const unsigned int *)(v262 + 368));
            v172 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                     v171,
                     (const char (*)[31])" config not found of quest_id:");
            v161 = (char *)(v262 + 160);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v172,
              (const unsigned int *)(v262 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3152));
            *(_DWORD *)(((v262 + 3152) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v173 = 0;
LABEL_321:
            *(_BYTE *)(((v262 + 368) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v262 + 560) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v262 + 592) >> 3) + 0x7FFF8000) = -8;
            if ( v173 == 1 )
            {
              *(_BYTE *)(((v262 + 112) >> 3) + 0x7FFF8000) = 1;
              if ( *(char *)(((v262 + 112) >> 3) + 0x7FFF8000) < 0 )
                __asan_report_store1(v262 + 112, v161, v262 + 112);
              *(_BYTE *)(v262 + 112) = 0;
              if ( std::vector<std::string>::size(&exec->param) > 1
                && (v174 = std::vector<std::string>::operator[](&exec->param, 1uLL),
                    common::tools::StringUtils::strToNum<bool>(v174, (bool *)(v262 + 112), 1)) )
              {
                *(_DWORD *)(((v262 + 3216) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v262 + 3216) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v262 + 3247) >> 3) + 0x7FFF8000) != 0
                  && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 3247) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v262 + 3216, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v262 + 3216),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkQuestExecConfig",
                  2511);
                v175 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v262 + 3216),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v176 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                         v175,
                         (const char (*)[32])"invalid is_force_grant param 1:");
                v177 = std::vector<std::string>::operator[](&exec->param, 1uLL);
                v178 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v176, v177);
                v179 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                         v178,
                         (const char (*)[11])" quest_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v179,
                  (const unsigned int *)(v262 + 160));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3216));
                *(_DWORD *)(((v262 + 3216) >> 3) + 0x7FFF8000) = -117901064;
                v269 = -1;
                v160 = 0;
              }
              else
              {
                v160 = 1;
              }
            }
            else
            {
              v160 = 0;
            }
          }
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v262 + 912));
          v150 = v160 != 0;
          goto LABEL_332;
        }
        *(_DWORD *)(((v262 + 2960) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v262 + 2960) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v262 + 2991) >> 3) + 0x7FFF8000) != 0
          && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 2991) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v262 + 2960, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v262 + 2960),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExecConfig",
          2488);
        v146 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v262 + 2960),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v147 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 v146,
                 (const char (*)[15])"invalid param:");
        v148 = common::milog::MiLogStream::operator<<<std::string>(v147, &exec->param);
        v149 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v148, (const char (*)[11])" quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v149, (const unsigned int *)(v262 + 160));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 2960));
        *(_DWORD *)(((v262 + 2960) >> 3) + 0x7FFF8000) = -117901064;
        v269 = -1;
        v150 = 0;
LABEL_332:
        v180 = ((v262 + 912) >> 3) + 2147450880;
        *(_WORD *)v180 = -1800;
        *(_BYTE *)(v180 + 2) = -8;
        *(_BYTE *)(((v262 + 112) >> 3) + 0x7FFF8000) = -8;
        if ( v150 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( !QuestExcelConfigMgr::checkExecRefreshWorldQuestFlowGroupSuite(
                this,
                txt_config_mgr,
                exec,
                *(_DWORD *)(v262 + 160)) )
          goto LABEL_501;
        *(_DWORD *)(((v262 + 3600) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v262 + 3600) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v262 + 3631) >> 3) + 0x7FFF8000) != 0
          && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 3631) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v262 + 3600, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v262 + 3600),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExecConfig",
          2558);
        v207 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v262 + 3600),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v208 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                 v207,
                 (const char (*)[57])"checkExecRefreshWorldQuestFlowGroupSuite fail. quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v208, (const unsigned int *)(v262 + 160));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3600));
        *(_DWORD *)(((v262 + 3600) >> 3) + 0x7FFF8000) = -117901064;
        v269 = -1;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_HIDE_SCENE_POINT:
      case QUEST_EXEC_UNHIDE_SCENE_POINT:
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          *(_BYTE *)(((v262 + 400) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v262 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 400) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v262 + 400, v7);
          *(_DWORD *)(v262 + 400) = 0;
          v213 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v213, (unsigned int *)(v262 + 400), 1) )
          {
            *(_DWORD *)(((v262 + 3728) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v262 + 3728) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v262 + 3759) >> 3) + 0x7FFF8000) != 0
              && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 3759) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v262 + 3728, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v262 + 3728),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkQuestExecConfig",
              2574);
            v214 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v262 + 3728),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v215 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
                     v214,
                     (const char (*)[68])byte_1A45F840);
            v216 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v215,
                     (const char (*)[12])", quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v216,
              (const unsigned int *)(v262 + 160));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3728));
            *(_DWORD *)(((v262 + 3728) >> 3) + 0x7FFF8000) = -117901064;
            v269 = -1;
            v212 = 0;
          }
          else
          {
            p_scene_config_mgr = &txt_config_mgr->scene_config_mgr;
            v218 = *(unsigned __int8 *)(((v262 + 400) >> 3) + 0x7FFF8000);
            if ( (_BYTE)v218 != 0 && (char)v218 <= 3 )
              __asan_report_load4(v262 + 400);
            scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                                 p_scene_config_mgr,
                                 *(unsigned int *)(v262 + 400));
            if ( scene_config_ptr )
            {
              if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                                + 0x7FFF8000) )
              {
                __asan_report_load4(&scene_config_ptr->type);
              }
              if ( SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
              {
                v227 = ((v262 + 976) >> 3) + 2147450880;
                *(_WORD *)v227 = 0;
                *(_BYTE *)(v227 + 2) = 0;
                std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v262 + 976));
                *(_DWORD *)(((v262 + 3920) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v262 + 144) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v262 + 144);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v262 + 3920),
                  ",",
                  (const std::allocator<char> *)(v262 + 144));
                v228 = std::vector<std::string>::operator[](&exec->param, 1uLL);
                v229 = (char *)(v262 + 3920);
                v268 = common::tools::StringUtils::splitToList<unsigned int>(
                         v228,
                         (const std::string *)(v262 + 3920),
                         (std::vector<unsigned int> *)(v262 + 976),
                         0)
                    || std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v262 + 976));
                std::string::~string((void *)(v262 + 3920));
                *(_DWORD *)(((v262 + 3920) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v262 + 144);
                *(_BYTE *)(((v262 + 144) >> 3) + 0x7FFF8000) = -8;
                if ( v268 )
                {
                  *(_DWORD *)(((v262 + 3984) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v262 + 3984) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v262 + 4015) >> 3) + 0x7FFF8000) != 0
                    && (char)((v262 - 112 + 31) & 7) >= *(_BYTE *)(((v262 + 4015) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v262 + 3984, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v262 + 3984),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkQuestExecConfig",
                    2592);
                  v230 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v262 + 3984),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v231 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                           v230,
                           (const char (*)[47])byte_1A45F9C0);
                  v232 = std::vector<std::string>::operator[](&exec->param, 1uLL);
                  v233 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v231, v232);
                  v234 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                           v233,
                           (const char (*)[11])" quest_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v234,
                    (const unsigned int *)(v262 + 160));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3984));
                  *(_DWORD *)(((v262 + 3984) >> 3) + 0x7FFF8000) = -117901064;
                  v269 = -1;
                  v235 = 0;
                }
                else
                {
                  __for_range_2 = (std::vector<unsigned int> *)(v262 + 976);
                  *(_BYTE *)(((v262 + 624) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v262 + 624) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v262 + 624, v229);
                  *(std::vector<unsigned int>::iterator *)(v262 + 624) = std::vector<unsigned int>::begin(__for_range_2);
                  *(_BYTE *)(((v262 + 656) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_BYTE *)(((v262 + 656) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v262 + 656, v229);
                  *(std::vector<unsigned int>::iterator *)(v262 + 656) = std::vector<unsigned int>::end(__for_range_2);
                  while ( 1 )
                  {
                    v236 = (char *)(v262 + 656);
                    if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v262 + 624),
                            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v262 + 656)) )
                    {
                      v251 = 1;
                      goto LABEL_421;
                    }
                    *(_BYTE *)(((v262 + 416) >> 3) + 0x7FFF8000) = 4;
                    v237 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v262 + 624));
                    v238 = (int *)v237;
                    if ( *(_BYTE *)(((unsigned __int64)v237 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v237 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v237 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v237);
                    }
                    v239 = *v238;
                    v240 = *(_BYTE *)(((v262 + 416) >> 3) + 0x7FFF8000);
                    if ( v240 != 0 && v240 <= 3 )
                    {
                      LOBYTE(v236) = v240 != 0;
                      __asan_report_store4(v262 + 416, v236);
                    }
                    *(_DWORD *)(v262 + 416) = v239;
                    *(_WORD *)(((v262 + 688) >> 3) + 0x7FFF8000) = 0;
                    p_json_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->json_config_mgr;
                    if ( *(_BYTE *)(((v262 + 416) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v262 + 416) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(v262 + 416);
                    }
                    v242 = *(_DWORD *)(v262 + 416);
                    if ( *(_BYTE *)(((v262 + 400) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v262 + 400) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(v262 + 400);
                    }
                    v243 = *(_DWORD *)(v262 + 400);
                    if ( *(_WORD *)(((v262 + 688) >> 3) + 0x7FFF8000) )
                      __asan_report_store16();
                    JsonConfigMgr::findScenePoint(
                      (const JsonConfigMgr *const)(v262 + 688),
                      p_json_config_mgr,
                      v243,
                      v242);
                    v244 = std::operator==<data::ConfigScenePoint>(
                             0LL,
                             (const std::shared_ptr<data::ConfigScenePoint> *)(v262 + 688));
                    std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v262 + 688));
                    *(_WORD *)(((v262 + 688) >> 3) + 0x7FFF8000) = -1800;
                    if ( v244 )
                      break;
                    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v262 + 624));
                  }
                  *(_DWORD *)(((v262 + 4048) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v262 + 4048) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v262 + 4079) >> 3) + 0x7FFF8000) != 0
                    && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 4079) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v262 + 4048, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v262 + 4048),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkQuestExecConfig",
                    2599);
                  v245 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v262 + 4048),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v246 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
                           v245,
                           (const char (*)[63])byte_1A45FA20);
                  v247 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                           v246,
                           (const unsigned int *)(v262 + 400));
                  v248 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                           v247,
                           (const char (*)[12])", point_id:");
                  v249 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                           v248,
                           (const unsigned int *)(v262 + 416));
                  v250 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                           v249,
                           (const char (*)[12])", quest_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v250,
                    (const unsigned int *)(v262 + 160));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 4048));
                  *(_DWORD *)(((v262 + 4048) >> 3) + 0x7FFF8000) = -117901064;
                  v269 = -1;
                  v251 = 0;
LABEL_421:
                  *(_BYTE *)(((v262 + 416) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v262 + 624) >> 3) + 0x7FFF8000) = -8;
                  *(_BYTE *)(((v262 + 656) >> 3) + 0x7FFF8000) = -8;
                  v235 = v251 == 1;
                }
                std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v262 + 976));
                v212 = v235;
                goto LABEL_423;
              }
              *(_DWORD *)(((v262 + 3856) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 3856) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 3887) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 - 32 + 79) & 7) >= *(_BYTE *)(((v262 + 3887) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 3856, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 3856),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2586);
              v223 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v262 + 3856),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v224 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                       v223,
                       (const char (*)[65])byte_1A45F940);
              v225 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v224,
                       (const unsigned int *)(v262 + 400));
              v226 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                       v225,
                       (const char (*)[12])", quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v226,
                (const unsigned int *)(v262 + 160));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3856));
              *(_DWORD *)(((v262 + 3856) >> 3) + 0x7FFF8000) = -117901064;
              v269 = -1;
              v212 = 0;
            }
            else
            {
              *(_DWORD *)(((v262 + 3792) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v262 + 3792) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v262 + 3823) >> 3) + 0x7FFF8000) != 0
                && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 3823) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v262 + 3792, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v262 + 3792),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkQuestExecConfig",
                2580);
              v219 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v262 + 3792),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v220 = common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(
                       v219,
                       (const char (*)[69])byte_1A45F8C0);
              v221 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v220,
                       (const unsigned int *)(v262 + 400));
              v222 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                       v221,
                       (const char (*)[12])", quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v222,
                (const unsigned int *)(v262 + 160));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3792));
              *(_DWORD *)(((v262 + 3792) >> 3) + 0x7FFF8000) = -117901064;
              v269 = -1;
              v212 = 0;
            }
          }
        }
        else
        {
          *(_DWORD *)(((v262 + 3664) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v262 + 3664) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v262 + 3695) >> 3) + 0x7FFF8000) != 0
            && (char)((v262 + 111) & 7) >= *(_BYTE *)(((v262 + 3695) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v262 + 3664, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v262 + 3664),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkQuestExecConfig",
            2568);
          v209 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v262 + 3664),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v210 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                   v209,
                   (const char (*)[53])byte_1A45F7E0);
          v211 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   v210,
                   (const char (*)[12])", quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v211,
            (const unsigned int *)(v262 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3664));
          *(_DWORD *)(((v262 + 3664) >> 3) + 0x7FFF8000) = -117901064;
          v269 = -1;
          v212 = 0;
        }
LABEL_423:
        *(_BYTE *)(((v262 + 400) >> 3) + 0x7FFF8000) = -8;
        v252 = ((v262 + 976) >> 3) + 2147450880;
        *(_WORD *)v252 = -1800;
        *(_BYTE *)(v252 + 2) = -8;
        if ( v212 )
          goto LABEL_501;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE_BUILTIN:
        *(_DWORD *)(((v262 + 3536) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v262 + 3536) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v262 + 3567) >> 3) + 0x7FFF8000) != 0
          && (char)((v262 - 48 + 31) & 7) >= *(_BYTE *)(((v262 + 3567) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v262 + 3536, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v262 + 3536),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkQuestExecConfig",
          2550);
        v205 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v262 + 3536),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v206 = common::milog::MiLogStream::operator<<<char [78],(char *[78])0>(
                 v205,
                 (const char (*)[78])"cannot use QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE_BUILTIN. quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v206, (const unsigned int *)(v262 + 160));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v262 + 3536));
        *(_DWORD *)(((v262 + 3536) >> 3) + 0x7FFF8000) = -117901064;
        v269 = -1;
        v34 = 0;
        goto LABEL_503;
      case QUEST_EXEC_OPTIONAL_REVIVAL_TEAM:
        if ( *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v262 + 160) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v262 + 160);
        if ( QuestExcelConfigMgr::checkExecOptionalRevivalTeam(this, txt_config_mgr, exec, *(_DWORD *)(v262 + 160)) )
          ret = -1;
        goto LABEL_501;
      default:
        goto LABEL_501;
    }
  }
};

// Line 2791: range 000000000EF18F8E-000000000EF1990F
int32_t __cdecl QuestExcelConfigMgr::checkExecDelAllSpecificPackItem(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  const std::string *v8; // rax
  char *v9; // rsi
  bool v10; // r15
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  char *v14; // rsi
  unsigned int *v15; // rax
  int *v16; // rdx
  int v17; // ecx
  char v18; // al
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  int v21; // edx
  int32_t result; // eax
  std::set<unsigned int> *__for_range; // [rsp+30h] [rbp-220h]
  char v26[528]; // [rsp+40h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 48 1 9 <unknown> 64 4 12 item_id:2804 80 8 16 __for_begin:2804 112 8 14 __for_end:2804 144 32 "
                        "9 <unknown> 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown> 400 48 16 item_id_set:2797";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecDelAllSpecificPackItem;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = 61956;
  v6[536862722] = -234881024;
  v6[536862723] = 62194;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -219021312;
  v6[536862728] = 62194;
  v6[536862729] = -219021312;
  v6[536862730] = 62194;
  v6[536862731] = -219021312;
  v6[536862732] = 62194;
  v6[536862734] = -202116109;
  if ( std::vector<std::string>::empty(&exec->param) )
  {
    if ( *(char *)(((v4 + 144) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 175) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 112 + 31) & 7) >= *(_BYTE *)(((v4 + 175) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 144, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 144),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecDelAllSpecificPackItem",
      2794);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 144),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(v7, (const char (*)[52])byte_1A45FDE0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 144));
    v3 = -1;
  }
  else
  {
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 400));
    std::allocator<char>::allocator(v4 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v4 + 208),
      ",",
      (const std::allocator<char> *)(v4 + 48));
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v9 = (char *)(v4 + 208);
    v10 = common::tools::StringUtils::splitToSet<std::set<unsigned int>>(
            v8,
            (const std::string *)(v4 + 208),
            (std::set<unsigned int> *)(v4 + 400),
            0) != 0;
    std::string::~string((void *)(v4 + 208));
    *(_DWORD *)(((v4 + 208) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v4 + 48);
    *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v4 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 32 + 79) & 7) >= *(_BYTE *)(((v4 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 272, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecDelAllSpecificPackItem",
        2800);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 272),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [109],(char *[109])0>(v11, (const char (*)[109])byte_1A45FE40);
      v13 = std::vector<std::string>::operator[](&exec->param, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
      *(_DWORD *)(((v4 + 272) >> 3) + 0x7FFF8000) = -117901064;
      v3 = -1;
    }
    else
    {
      __for_range = (std::set<unsigned int> *)(v4 + 400);
      *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 80, v9);
      *(std::set<unsigned int>::iterator *)(v4 + 80) = std::set<unsigned int>::begin(__for_range);
      *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v4 + 112, v9);
      *(std::set<unsigned int>::iterator *)(v4 + 112) = std::set<unsigned int>::end(__for_range);
      while ( 1 )
      {
        v14 = (char *)(v4 + 112);
        if ( !std::operator!=(
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 80),
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 112)) )
        {
          v21 = 1;
          goto LABEL_28;
        }
        *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = 4;
        v15 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v4 + 80));
        v16 = (int *)v15;
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v15);
        }
        v17 = *v16;
        v18 = *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000);
        if ( v18 != 0 && v18 <= 3 )
        {
          LOBYTE(v14) = v18 != 0;
          __asan_report_store4(v4 + 64, v14);
        }
        *(_DWORD *)(v4 + 64) = v17;
        if ( !ItemExcelConfigMgr::findItemConfig(&txt_config_mgr->item_config_mgr, *(unsigned int *)(v4 + 64)) )
          break;
        std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v4 + 80));
      }
      *(_DWORD *)(((v4 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 111) & 7) >= *(_BYTE *)(((v4 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecDelAllSpecificPackItem",
        2809);
      v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 336),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v20 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(v19, (const char (*)[63])byte_1A45FEE0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 336));
      *(_DWORD *)(((v4 + 336) >> 3) + 0x7FFF8000) = -117901064;
      v3 = -1;
      v21 = 0;
LABEL_28:
      *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = -8;
      if ( v21 == 1 )
        v3 = 0;
    }
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 400));
  }
  result = v3;
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 2817: range 000000000EF19910-000000000EF1A673
int32_t __cdecl QuestExcelConfigMgr::checkExecDelPackItemBatch(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  const std::string *v8; // rax
  bool v9; // r15
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  unsigned __int64 v16; // rax
  __int64 v17; // rsi
  std::vector<unsigned int>::reference v18; // rax
  int *v19; // rdx
  int v20; // ecx
  char v21; // al
  std::vector<unsigned int>::reference v22; // rax
  uint32_t *v23; // rdx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int v26; // eax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  char *v29; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v30; // rax
  uint32_t *v31; // rdx
  char v32; // cl
  int32_t result; // eax
  uint32_t idx; // [rsp+28h] [rbp-2F8h]
  uint32_t count; // [rsp+2Ch] [rbp-2F4h]
  char v37[752]; // [rsp+30h] [rbp-2F0h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(704LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 48 1 9 <unknown> 64 1 9 <unknown> 80 4 12 item_id:2837 96 24 13 tmp_list:2823 160 32 9 <unkno"
                        "wn> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknow"
                        "n> 544 32 9 <unknown> 608 56 17 item_num_map:2834";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecDelPackItemBatch;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556927;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959118;
  v6[536862730] = -218959118;
  v6[536862732] = -218959118;
  v6[536862734] = -218959118;
  v6[536862736] = -218959118;
  v6[536862738] = -218959118;
  v6[536862740] = -218103808;
  v6[536862741] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96));
    std::allocator<char>::allocator(v4 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v4 + 288),
      ":",
      (const std::allocator<char> *)(v4 + 64));
    std::allocator<char>::allocator(v4 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v4 + 224),
      ",",
      (const std::allocator<char> *)(v4 + 48));
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v9 = common::tools::StringUtils::splitToList<unsigned int>(
           v8,
           (const std::string *)(v4 + 224),
           (const std::string *)(v4 + 288),
           2u,
           (std::vector<unsigned int> *)(v4 + 96),
           0) != 0;
    std::string::~string((void *)(v4 + 224));
    *(_DWORD *)(((v4 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v4 + 48);
    *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
    std::string::~string((void *)(v4 + 288));
    *(_DWORD *)(((v4 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v4 + 64);
    *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v4 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecDelPackItemBatch",
        2826);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 352),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(v10, (const char (*)[62])byte_1A460120);
      v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 352));
      *(_DWORD *)(((v4 + 352) >> 3) + 0x7FFF8000) = -117901064;
      v3 = -1;
    }
    else if ( (std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 96)) & 1) != 0 )
    {
      *(_DWORD *)(((v4 + 416) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecDelPackItemBatch",
        2831);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 416),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(v13, (const char (*)[62])byte_1A460120);
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
      *(_DWORD *)(((v4 + 416) >> 3) + 0x7FFF8000) = -117901064;
      v3 = -1;
    }
    else
    {
      v16 = ((v4 + 608) >> 3) + 2147450880;
      *(_DWORD *)v16 = 0;
      *(_WORD *)(v16 + 4) = 0;
      *(_BYTE *)(v16 + 6) = 0;
      std::unordered_map<unsigned int,unsigned int>::unordered_map((std::unordered_map<unsigned int,unsigned int> *const)(v4 + 608));
      for ( idx = 0; idx < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 96)) - 1; idx += 2 )
      {
        *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 4;
        v17 = idx;
        v18 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 96), idx);
        v19 = (int *)v18;
        if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v18);
        }
        v20 = *v19;
        v21 = *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000);
        if ( v21 != 0 && v21 <= 3 )
        {
          LOBYTE(v17) = v21 != 0;
          __asan_report_store4(v4 + 80, v17);
        }
        *(_DWORD *)(v4 + 80) = v20;
        v22 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 96), idx + 1);
        v23 = v22;
        if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v22);
        }
        count = *v23;
        if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int>,unsigned int>(
               (std::unordered_map<unsigned int,unsigned int> *)(v4 + 608),
               (const unsigned int *)(v4 + 80)) )
        {
          *(_DWORD *)(((v4 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 64 + 63) & 7) >= *(_BYTE *)(((v4 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecDelPackItemBatch",
            2841);
          v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 480),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v25 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(v24, (const char (*)[54])byte_1A460180);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 480));
          *(_DWORD *)(((v4 + 480) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v26 = 0;
        }
        else if ( count )
        {
          v29 = (char *)(v4 + 80);
          v30 = std::unordered_map<unsigned int,unsigned int>::operator[](
                  (std::unordered_map<unsigned int,unsigned int> *const)(v4 + 608),
                  (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v4 + 80));
          v31 = v30;
          v32 = *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000);
          if ( v32 != 0 && (char)(((unsigned __int8)v30 & 7) + 3) >= v32 )
          {
            LOBYTE(v29) = v32 != 0;
            __asan_report_store4(v30, v29);
          }
          *v31 = count;
          v26 = 1;
        }
        else
        {
          *(_DWORD *)(((v4 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 544) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 575) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 64 + 127) & 7) >= *(_BYTE *)(((v4 + 575) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 544, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 544),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecDelPackItemBatch",
            2847);
          v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 544),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v28 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(v27, (const char (*)[58])byte_1A4601E0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 544));
          *(_DWORD *)(((v4 + 544) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v26 = 0;
        }
        *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( v26 != 1 )
          goto LABEL_38;
      }
      v3 = 0;
LABEL_38:
      std::unordered_map<unsigned int,unsigned int>::~unordered_map((std::unordered_map<unsigned int,unsigned int> *const)(v4 + 608));
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
  }
  else
  {
    if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecDelPackItemBatch",
      2820);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(v7, (const char (*)[52])byte_1A460080);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 160));
    v3 = -1;
  }
  result = v3;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2856: range 000000000EF1A674-000000000EF1B5E8
__int64 __fastcall QuestExcelConfigMgr::checkExecUnregisterDynamicGroup(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  char *v10; // rsi
  bool v11; // r15
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  const char *v16; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v17; // rax
  int *v18; // rdx
  int v19; // ecx
  char v20; // al
  __int64 v21; // rsi
  int SceneIdByGroupId; // edx
  char v23; // al
  LuaConfigMgr *p_lua_config_mgr; // rcx
  __int64 v25; // rsi
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  int v31; // eax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  const std::string *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  const std::string *v40; // rax
  common::milog::MiLogStream *v41; // rax
  int v42; // edx
  __int64 result; // rax
  LuaConfigMgr *lua_config_mgr; // [rsp+38h] [rbp-2C8h]
  std::vector<unsigned int> *__for_range; // [rsp+40h] [rbp-2C0h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+48h] [rbp-2B8h]
  char v50[688]; // [rsp+50h] [rbp-2B0h] BYREF

  v5 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(640LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "14 48 1 9 <unknown> 64 4 13 scene_id:2871 80 4 13 group_id:2872 96 4 21 lazy_unload_flag:2894 11"
                        "2 4 13 quest_id:2855 128 8 16 __for_begin:2872 160 8 14 __for_end:2872 192 24 17 group_id_vec:28"
                        "62 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown"
                        "> 576 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecUnregisterDynamicGroup;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862726] = -234881024;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -202116109;
  *(_DWORD *)(v5 + 112) = quest_id;
  if ( std::vector<std::string>::empty(&exec->param) )
  {
    if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecUnregisterDynamicGroup",
      2859);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 256),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(v8, (const char (*)[54])byte_1A4603C0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
    v4 = -1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 192));
    std::allocator<char>::allocator(v5 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v5 + 320),
      ",",
      (const std::allocator<char> *)(v5 + 48));
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v10 = (char *)(v5 + 320);
    v11 = common::tools::StringUtils::splitToList<unsigned int>(
            v9,
            (const std::string *)(v5 + 320),
            (std::vector<unsigned int> *)(v5 + 192),
            1) != 0;
    std::string::~string((void *)(v5 + 320));
    *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v5 + 48);
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v11 )
    {
      *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecUnregisterDynamicGroup",
        2865);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 384),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])" exec.param: ");
      v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v15, (const char (*)[26])byte_1A460460);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
      *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v5 + 64, v10);
      *(_DWORD *)(v5 + 64) = 0;
      __for_range = (std::vector<unsigned int> *)(v5 + 192);
      *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 128, v10);
      *(std::vector<unsigned int>::iterator *)(v5 + 128) = std::vector<unsigned int>::begin(__for_range);
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 160, v10);
      *(std::vector<unsigned int>::iterator *)(v5 + 160) = std::vector<unsigned int>::end(__for_range);
      while ( 1 )
      {
        v16 = (const char *)(v5 + 160);
        if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 128),
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 160)) )
        {
          v31 = 1;
          goto LABEL_46;
        }
        *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 4;
        v17 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 128));
        v18 = (int *)v17;
        if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v17);
        }
        v19 = *v18;
        v20 = *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000);
        if ( v20 != 0 && v20 <= 3 )
        {
          LOBYTE(v16) = v20 != 0;
          __asan_report_store4(v5 + 80, v16);
        }
        *(_DWORD *)(v5 + 80) = v19;
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 64);
        if ( !*(_DWORD *)(v5 + 64) )
        {
          v21 = *(unsigned int *)(v5 + 80);
          SceneIdByGroupId = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, v21);
          v23 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
          if ( v23 != 0 && v23 <= 3 )
          {
            LOBYTE(v21) = v23 != 0;
            __asan_report_store4(v5 + 64, v21);
          }
          *(_DWORD *)(v5 + 64) = SceneIdByGroupId;
        }
        p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
        if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 80);
        v25 = *(unsigned int *)(v5 + 80);
        group_info_config_ptr = LuaConfigMgr::findGroupInfoConfig(p_lua_config_mgr, v25);
        if ( !group_info_config_ptr )
        {
          *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnregisterDynamicGroup",
            2881);
          v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 448),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v27 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v26, (const char (*)[11])"scene_id: ");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v5 + 64));
          v29 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v28, (const char (*)[12])" group_id: ");
          v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v29,
                  (const unsigned int *)(v5 + 80));
          v16 = byte_1A45E500;
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v30, (const char (*)[7])byte_1A45E500);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 448));
          *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v31 = 0;
          goto LABEL_46;
        }
        if ( *(char *)(((unsigned __int64)&group_info_config_ptr->is_dynamic_load >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&group_info_config_ptr->is_dynamic_load, v25, &group_info_config_ptr->is_dynamic_load);
        if ( !group_info_config_ptr->is_dynamic_load )
          break;
        std::unordered_set<unsigned int>::insert(
          &this->quest_group_set,
          (const std::unordered_set<unsigned int>::value_type *)(v5 + 80));
        p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
        if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 80);
        DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, *(_DWORD *)(v5 + 112), *(_DWORD *)(v5 + 80));
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 128));
      }
      *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 512, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 512),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecUnregisterDynamicGroup",
        2886);
      v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 512),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v33 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(v32, (const char (*)[43])byte_1A460520);
      v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v5 + 80));
      v35 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v34, (const char (*)[11])" quest_id:");
      v16 = (const char *)(v5 + 112);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v5 + 112));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
      *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
      v31 = 0;
LABEL_46:
      *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( v31 == 1 )
      {
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
          goto LABEL_56;
        *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 96, v16);
        *(_DWORD *)(v5 + 96) = 0;
        v37 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v37, (unsigned int *)(v5 + 96), 1) )
        {
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnregisterDynamicGroup",
            2897);
          v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v39 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v38, (const char (*)[13])"exec.param: ");
          v40 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v41 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v39, v40);
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v41, (const char (*)[30])byte_1A4605C0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v42 = 0;
        }
        else
        {
          v42 = 1;
        }
        *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( v42 == 1 )
LABEL_56:
          v4 = 0;
      }
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 192));
  }
  result = v4;
  if ( v50 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF804C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2905: range 000000000EF1B5EA-000000000EF1C730
__int64 __fastcall QuestExcelConfigMgr::checkExecRegisterDynamicGroupOnly(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  char *v10; // rsi
  bool v11; // r15
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rax
  __int64 v20; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v21; // rax
  int *v22; // rdx
  int v23; // ecx
  char v24; // al
  __int64 v25; // rsi
  int SceneIdByGroupId; // edx
  char v27; // al
  __int64 v28; // rsi
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // eax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  const std::string *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // r14
  const std::string *v44; // rax
  common::milog::MiLogStream *v45; // rax
  int v46; // edx
  __int64 result; // rax
  LuaConfigMgr *lua_config_mgr; // [rsp+38h] [rbp-308h]
  std::vector<unsigned int> *__for_range; // [rsp+40h] [rbp-300h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+48h] [rbp-2F8h]
  char v54[752]; // [rsp+50h] [rbp-2F0h] BYREF

  v5 = (unsigned __int64)v54;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(704LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "15 48 1 9 <unknown> 64 4 13 scene_id:2925 80 4 13 group_id:2926 96 4 17 config_level:2948 112 4 "
                        "13 quest_id:2904 128 8 16 __for_begin:2926 160 8 14 __for_end:2926 192 24 17 group_id_vec:2911 2"
                        "56 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 57"
                        "6 32 9 <unknown> 640 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecRegisterDynamicGroupOnly;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862726] = -234881024;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -218959118;
  v7[536862741] = -202116109;
  *(_DWORD *)(v5 + 112) = quest_id;
  if ( std::vector<std::string>::empty(&exec->param) )
  {
    if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRegisterDynamicGroupOnly",
      2908);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 256),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v8, (const char (*)[56])byte_1A4607C0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
    v4 = -1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 192));
    std::allocator<char>::allocator(v5 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v5 + 320),
      ",",
      (const std::allocator<char> *)(v5 + 48));
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v10 = (char *)(v5 + 320);
    v11 = common::tools::StringUtils::splitToList<unsigned int>(
            v9,
            (const std::string *)(v5 + 320),
            (std::vector<unsigned int> *)(v5 + 192),
            1) != 0;
    std::string::~string((void *)(v5 + 320));
    *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v5 + 48);
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v11 )
    {
      *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRegisterDynamicGroupOnly",
        2914);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 384),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])" exec.param: ");
      v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v15, (const char (*)[26])byte_1A460460);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
      *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v5 + 192)) )
    {
      *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRegisterDynamicGroupOnly",
        2919);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 448),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v16, (const char (*)[14])" exec.param: ");
      v18 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, v18);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v19, (const char (*)[26])byte_1A460460);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 448));
      *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v5 + 64, v10);
      *(_DWORD *)(v5 + 64) = 0;
      __for_range = (std::vector<unsigned int> *)(v5 + 192);
      *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 128, v10);
      *(std::vector<unsigned int>::iterator *)(v5 + 128) = std::vector<unsigned int>::begin(__for_range);
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 160, v10);
      *(std::vector<unsigned int>::iterator *)(v5 + 160) = std::vector<unsigned int>::end(__for_range);
      while ( 1 )
      {
        v20 = v5 + 160;
        if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 128),
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 160)) )
        {
          v34 = 1;
          goto LABEL_50;
        }
        *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 4;
        v21 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 128));
        v22 = (int *)v21;
        if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v21);
        }
        v23 = *v22;
        v24 = *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000);
        if ( v24 != 0 && v24 <= 3 )
        {
          LOBYTE(v20) = v24 != 0;
          __asan_report_store4(v5 + 80, v20);
        }
        *(_DWORD *)(v5 + 80) = v23;
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 64);
        if ( !*(_DWORD *)(v5 + 64) )
        {
          v25 = *(unsigned int *)(v5 + 80);
          SceneIdByGroupId = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, v25);
          v27 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
          if ( v27 != 0 && v27 <= 3 )
          {
            LOBYTE(v25) = v27 != 0;
            __asan_report_store4(v5 + 64, v25);
          }
          *(_DWORD *)(v5 + 64) = SceneIdByGroupId;
        }
        if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 80);
        v28 = *(unsigned int *)(v5 + 80);
        group_info_config_ptr = LuaConfigMgr::findGroupInfoConfig(lua_config_mgr, v28);
        if ( !group_info_config_ptr )
        {
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRegisterDynamicGroupOnly",
            2935);
          v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v29, (const char (*)[11])"scene_id: ");
          v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v30,
                  (const unsigned int *)(v5 + 64));
          v32 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v31, (const char (*)[12])" group_id: ");
          v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v32,
                  (const unsigned int *)(v5 + 80));
          v20 = (__int64)byte_1A45E500;
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v33, (const char (*)[7])byte_1A45E500);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v34 = 0;
          goto LABEL_50;
        }
        if ( *(char *)(((unsigned __int64)&group_info_config_ptr->is_dynamic_load >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&group_info_config_ptr->is_dynamic_load, v28, &group_info_config_ptr->is_dynamic_load);
        if ( !group_info_config_ptr->is_dynamic_load )
          break;
        std::unordered_set<unsigned int>::insert(
          &this->quest_group_set,
          (const std::unordered_set<unsigned int>::value_type *)(v5 + 80));
        p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
        if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 80);
        DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, *(_DWORD *)(v5 + 112), *(_DWORD *)(v5 + 80));
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 128));
      }
      *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 576, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 576),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRegisterDynamicGroupOnly",
        2940);
      v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 576),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v36 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v35, (const char (*)[44])byte_1A460820);
      v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, (const unsigned int *)(v5 + 80));
      v38 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v37, (const char (*)[11])" quest_id:");
      v20 = v5 + 112;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, (const unsigned int *)(v5 + 112));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
      *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
      v34 = 0;
LABEL_50:
      *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( v34 == 1 )
      {
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
          goto LABEL_64;
        v20 = 1LL;
        std::vector<std::string>::operator[](&exec->param, 1uLL);
        if ( (unsigned __int8)std::string::empty() == 1 )
          goto LABEL_64;
        *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v5 + 96, v20);
        *(_DWORD *)(v5 + 96) = 0;
        v41 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v5 + 96), 1) )
        {
          *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRegisterDynamicGroupOnly",
            2951);
          v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v43 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v42, (const char (*)[13])"exec.param: ");
          v44 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v45 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, v44);
          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v45, (const char (*)[33])byte_1A460880);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 640));
          *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v46 = 0;
        }
        else
        {
          v46 = 1;
        }
        *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( v46 == 1 )
LABEL_64:
          v4 = 0;
      }
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 192));
  }
  result = v4;
  if ( v54 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2960: range 000000000EF1C732-000000000EF1DAB8
__int64 __fastcall QuestExcelConfigMgr::checkExecRegisterDynamicGroup(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  bool v10; // r15
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned __int64 v15; // rax
  const std::string *v16; // rax
  const char *v17; // rsi
  bool v18; // r15
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  const std::string *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::vector<unsigned int>::size_type v23; // r15
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  const std::string *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  const std::string *v29; // rax
  __int64 v31; // rsi
  std::vector<unsigned int>::reference v32; // rax
  int *v33; // rdx
  int v34; // ecx
  char v35; // al
  __int64 v36; // rsi
  std::vector<unsigned int>::reference v37; // rax
  int *v38; // rdx
  int v39; // ecx
  char v40; // al
  __int64 v41; // rsi
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  int v47; // eax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  const std::string *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // r14
  const std::string *v56; // rax
  common::milog::MiLogStream *v57; // rax
  int v58; // edx
  __int64 result; // rax
  uint32_t idx; // [rsp+3Ch] [rbp-384h]
  LuaConfigMgr *lua_config_mgr; // [rsp+40h] [rbp-380h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+48h] [rbp-378h]
  char v66[880]; // [rsp+50h] [rbp-370h] BYREF

  v5 = (unsigned __int64)v66;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(832LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "17 32 1 9 <unknown> 48 1 9 <unknown> 64 4 13 scene_id:2986 80 4 13 group_id:2988 96 4 24 config_"
                        "revise_level:3007 112 4 13 quest_id:2959 128 24 17 scene_id_vec:2966 192 24 17 group_id_vec:2972"
                        " 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> "
                        "576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecRegisterDynamicGroup;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753535;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -234881024;
  v7[536862725] = -218959118;
  v7[536862726] = -234881024;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -218959118;
  v7[536862741] = -218959118;
  v7[536862743] = -218959118;
  v7[536862745] = -202116109;
  *(_DWORD *)(v5 + 112) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 128));
    std::allocator<char>::allocator(v5 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v5 + 320),
      ",",
      (const std::allocator<char> *)(v5 + 32));
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v10 = common::tools::StringUtils::splitToList<unsigned int>(
            v9,
            (const std::string *)(v5 + 320),
            (std::vector<unsigned int> *)(v5 + 128),
            1) != 0;
    std::string::~string((void *)(v5 + 320));
    *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v5 + 32);
    *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRegisterDynamicGroup",
        2969);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 384),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])"exec.param: ");
      v13 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v14, (const char (*)[26])byte_1A460B20);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
      *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      v15 = ((v5 + 192) >> 3) + 2147450880;
      *(_WORD *)v15 = 0;
      *(_BYTE *)(v15 + 2) = 0;
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 192));
      *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v5 + 48);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v5 + 448),
        ",",
        (const std::allocator<char> *)(v5 + 48));
      v16 = std::vector<std::string>::operator[](&exec->param, 1uLL);
      v17 = (const char *)(v5 + 448);
      v18 = common::tools::StringUtils::splitToList<unsigned int>(
              v16,
              (const std::string *)(v5 + 448),
              (std::vector<unsigned int> *)(v5 + 192),
              1) != 0;
      std::string::~string((void *)(v5 + 448));
      *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v5 + 48);
      *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( v18 )
      {
        *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRegisterDynamicGroup",
          2975);
        v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 512),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])"exec.param: ");
        v21 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, v21);
        common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v22, (const char (*)[26])byte_1A460460);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
        *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
      }
      else
      {
        v23 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 128));
        if ( v23 == std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 192)) )
        {
          lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
          for ( idx = 0;
                idx < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 128))
             && idx < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 192));
                ++idx )
          {
            *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
            v31 = idx;
            v32 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 128), idx);
            v33 = (int *)v32;
            if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v32);
            }
            v34 = *v33;
            v35 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
            if ( v35 != 0 && v35 <= 3 )
            {
              LOBYTE(v31) = v35 != 0;
              __asan_report_store4(v5 + 64, v31);
            }
            *(_DWORD *)(v5 + 64) = v34;
            *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 4;
            v36 = idx;
            v37 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 192), idx);
            v38 = (int *)v37;
            if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v37 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v37);
            }
            v39 = *v38;
            v40 = *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000);
            if ( v40 != 0 && v40 <= 3 )
            {
              LOBYTE(v36) = v40 != 0;
              __asan_report_store4(v5 + 80, v36);
            }
            *(_DWORD *)(v5 + 80) = v39;
            v41 = *(unsigned int *)(v5 + 80);
            group_info_config_ptr = LuaConfigMgr::findGroupInfoConfig(lua_config_mgr, v41);
            if ( group_info_config_ptr )
            {
              if ( *(char *)(((unsigned __int64)&group_info_config_ptr->is_dynamic_load >> 3) + 0x7FFF8000) < 0 )
                __asan_report_load1(
                  &group_info_config_ptr->is_dynamic_load,
                  v41,
                  &group_info_config_ptr->is_dynamic_load);
              if ( !group_info_config_ptr->is_dynamic_load )
              {
                *(_DWORD *)(((v5 + 704) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 704) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 735) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 735) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 704, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 704),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkExecRegisterDynamicGroup",
                  2998);
                v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v5 + 704),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v49 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                        v48,
                        (const char (*)[44])byte_1A460820);
                v50 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v49,
                        (const unsigned int *)(v5 + 80));
                v51 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v50,
                        (const char (*)[11])" quest_id:");
                v17 = (const char *)(v5 + 112);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v51,
                  (const unsigned int *)(v5 + 112));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 704));
                *(_DWORD *)(((v5 + 704) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v47 = 0;
              }
              else
              {
                std::unordered_set<unsigned int>::insert(
                  &this->quest_group_set,
                  (const std::unordered_set<unsigned int>::value_type *)(v5 + 80));
                p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
                if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v5 + 80);
                v17 = (const char *)*(unsigned int *)(v5 + 112);
                DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, (uint32_t)v17, *(_DWORD *)(v5 + 80));
                v47 = 1;
              }
            }
            else
            {
              *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 640) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 640, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 640),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecRegisterDynamicGroup",
                2993);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 640),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      v42,
                      (const char (*)[32])"RegisterDynamicGroup scene_id: ");
              v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v43,
                      (const unsigned int *)(v5 + 64));
              v45 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v44,
                      (const char (*)[12])" group_id: ");
              v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v45,
                      (const unsigned int *)(v5 + 80));
              v17 = byte_1A45E500;
              common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v46, (const char (*)[7])byte_1A45E500);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 640));
              *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v47 = 0;
            }
            *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
            if ( v47 != 1 )
              goto LABEL_59;
          }
          if ( std::vector<std::string>::size(&exec->param) != 3 )
            goto LABEL_58;
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v5 + 96, v17);
          *(_DWORD *)(v5 + 96) = 0;
          v53 = std::vector<std::string>::operator[](&exec->param, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v53, (unsigned int *)(v5 + 96), 1) )
          {
            *(_DWORD *)(((v5 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecRegisterDynamicGroup",
              3010);
            v54 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 768),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v55 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    v54,
                    (const char (*)[34])"RegisterDynamicGroup exec.param: ");
            v56 = std::vector<std::string>::operator[](&exec->param, 2uLL);
            v57 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v55, v56);
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v57, (const char (*)[33])byte_1A460880);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 768));
            *(_DWORD *)(((v5 + 768) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v58 = 0;
          }
          else
          {
            v58 = 1;
          }
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( v58 == 1 )
LABEL_58:
            v4 = 0;
        }
        else
        {
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRegisterDynamicGroup",
            2980);
          v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v25 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v24,
                  (const char (*)[18])"invalid param[0]:");
          v26 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v27 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, v26);
          v28 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  v27,
                  (const char (*)[27])" size dont equal param[1]:");
          v29 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, v29);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
      }
LABEL_59:
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 192));
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 128));
  }
  else
  {
    if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRegisterDynamicGroup",
      2963);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 256),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(v8, (const char (*)[65])byte_1A460AA0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
    v4 = -1;
  }
  result = v4;
  if ( v66 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8064) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3018: range 000000000EF1DABA-000000000EF1EA63
int32_t __cdecl QuestExcelConfigMgr::checkExecNotifyGroupLuaParam(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const std::string *v14; // rax
  bool v15; // r15
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rax
  __int64 v20; // rsi
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  char *v24; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v25; // rax
  int *v26; // rdx
  int v27; // ecx
  char v28; // al
  int SceneIdByGroupId; // ecx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // eax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  int32_t result; // eax
  LuaConfigMgr *lua_config_mgr; // [rsp+30h] [rbp-2E0h]
  std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-2D8h]
  char v47[720]; // [rsp+40h] [rbp-2D0h] BYREF

  v5 = (unsigned __int64)v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(672LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "13 48 1 9 <unknown> 64 4 13 scene_id:3025 80 4 13 group_id:3044 96 8 16 __for_begin:3044 128 8 1"
                        "4 __for_end:3044 160 24 17 group_id_vec:3031 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unk"
                        "nown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecNotifyGroupLuaParam;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -234881024;
  v7[536862726] = -218959118;
  v7[536862728] = -218959118;
  v7[536862730] = -218959118;
  v7[536862732] = -218959118;
  v7[536862734] = -218959118;
  v7[536862736] = -218959118;
  v7[536862738] = -218959118;
  v7[536862740] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v5 + 64, txt_config_mgr);
    *(_DWORD *)(v5 + 64) = 0;
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v5 + 64), 1) )
    {
      if ( *(char *)(((v5 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecNotifyGroupLuaParam",
        3028);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" exec.param: ");
      v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])byte_1A45DF40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 288));
      v4 = -1;
    }
    else
    {
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 160));
      std::allocator<char>::allocator(v5 + 48);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v5 + 352),
        ",",
        (const std::allocator<char> *)(v5 + 48));
      v14 = std::vector<std::string>::operator[](&exec->param, 1uLL);
      v15 = common::tools::StringUtils::splitToList<unsigned int>(
              v14,
              (const std::string *)(v5 + 352),
              (std::vector<unsigned int> *)(v5 + 160),
              1) != 0;
      std::string::~string((void *)(v5 + 352));
      *(_DWORD *)(((v5 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v5 + 48);
      *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( v15 )
      {
        *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecNotifyGroupLuaParam",
          3034);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v16, (const char (*)[14])" exec.param: ");
        v18 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, v18);
        common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])byte_1A45DF40);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 416));
        *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
      }
      else
      {
        lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v5 + 64);
        v20 = *(unsigned int *)(v5 + 64);
        if ( LuaConfigMgr::findSceneScriptConfig(lua_config_mgr, v20) )
        {
          __for_range = (std::vector<unsigned int> *)(v5 + 160);
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 96, v20);
          *(std::vector<unsigned int>::iterator *)(v5 + 96) = std::vector<unsigned int>::begin(__for_range);
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 128, v20);
          *(std::vector<unsigned int>::iterator *)(v5 + 128) = std::vector<unsigned int>::end(__for_range);
          while ( 1 )
          {
            v24 = (char *)(v5 + 128);
            if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 96),
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 128)) )
            {
              v34 = 1;
              goto LABEL_50;
            }
            *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 4;
            v25 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 96));
            v26 = (int *)v25;
            if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v25);
            }
            v27 = *v26;
            v28 = *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000);
            if ( v28 != 0 && v28 <= 3 )
            {
              LOBYTE(v24) = v28 != 0;
              __asan_report_store4(v5 + 80, v24);
            }
            *(_DWORD *)(v5 + 80) = v27;
            SceneIdByGroupId = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, *(unsigned int *)(v5 + 80));
            if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 64);
            if ( SceneIdByGroupId != *(_DWORD *)(v5 + 64) )
            {
              *(_DWORD *)(((v5 + 544) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 544) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 544, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 544),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecNotifyGroupLuaParam",
                3048);
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 544),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v31 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v30,
                      (const char (*)[12])" group_id: ");
              v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v31,
                      (const unsigned int *)(v5 + 80));
              v33 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                      v32,
                      (const char (*)[27])byte_1A460E80);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v33,
                (const unsigned int *)(v5 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 544));
              *(_DWORD *)(((v5 + 544) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v34 = 0;
              goto LABEL_50;
            }
            if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 80);
            if ( !LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v5 + 80)) )
              break;
            std::unordered_set<unsigned int>::insert(
              &this->quest_group_set,
              (const std::unordered_set<unsigned int>::value_type *)(v5 + 80));
            p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
            if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 80);
            DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, quest_id, *(_DWORD *)(v5 + 80));
            __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 96));
          }
          *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecNotifyGroupLuaParam",
            3054);
          v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 608),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v36 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v35, (const char (*)[11])"scene_id: ");
          v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v36,
                  (const unsigned int *)(v5 + 64));
          v38 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v37, (const char (*)[12])" group_id: ");
          v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v38,
                  (const unsigned int *)(v5 + 80));
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v39, (const char (*)[7])byte_1A45E500);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 608));
          *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v34 = 0;
LABEL_50:
          *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
          if ( v34 == 1 )
            v4 = 0;
        }
        else
        {
          *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecNotifyGroupLuaParam",
            3040);
          v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 480),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v22 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v21, (const char (*)[11])"scene_id: ");
          v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v22,
                  (const unsigned int *)(v5 + 64));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v23, (const char (*)[8])byte_1A460E40);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 480));
          *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 160));
    }
  }
  else
  {
    if ( *(char *)(((v5 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecNotifyGroupLuaParam",
      3022);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(v8, (const char (*)[51])byte_1A460DE0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 224));
    v4 = -1;
  }
  result = v4;
  if ( v47 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 3064: range 000000000EF1EA64-000000000EF2018D
__int64 __fastcall QuestExcelConfigMgr::checkExecRefreshWorldQuestFlowGroupSuite(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  bool v10; // r15
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  size_t v17; // rsi
  std::vector<unsigned int>::reference v18; // rax
  int *v19; // rdx
  int v20; // ecx
  char v21; // al
  size_t v22; // rsi
  std::vector<unsigned int>::reference v23; // rax
  int *v24; // rdx
  int v25; // ecx
  char v26; // al
  __int64 v27; // rsi
  int SceneIdByGroupId; // edx
  char v29; // al
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // eax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  __int64 v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  size_t idx; // [rsp+30h] [rbp-3F0h]
  LuaConfigMgr *lua_config_mgr; // [rsp+38h] [rbp-3E8h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+40h] [rbp-3E0h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+48h] [rbp-3D8h]
  char v65[976]; // [rsp+50h] [rbp-3D0h] BYREF

  v5 = (unsigned __int64)v65;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(928LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "19 32 1 9 <unknown> 48 1 9 <unknown> 64 4 13 group_id:3090 80 4 13 suite_id:3091 96 4 13 scene_i"
                        "d:3092 112 4 13 quest_id:3063 128 8 9 <unknown> 160 24 11 id_vec:3071 224 32 9 <unknown> 288 32 "
                        "9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9"
                        " <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecRefreshWorldQuestFlowGroupSuite;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753535;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -218959360;
  v7[536862725] = -234881024;
  v7[536862726] = -218959118;
  v7[536862728] = -218959118;
  v7[536862730] = -218959118;
  v7[536862732] = -218959118;
  v7[536862734] = -218959118;
  v7[536862736] = -218959118;
  v7[536862738] = -218959118;
  v7[536862740] = -218959118;
  v7[536862742] = -218959118;
  v7[536862744] = -218959118;
  v7[536862746] = -218959118;
  v7[536862748] = -202116109;
  *(_DWORD *)(v5 + 112) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 160));
    std::allocator<char>::allocator(v5 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v5 + 352),
      ",",
      (const std::allocator<char> *)(v5 + 48));
    std::allocator<char>::allocator(v5 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v5 + 288),
      ";",
      (const std::allocator<char> *)(v5 + 32));
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v10 = common::tools::StringUtils::splitToList<unsigned int>(
            v9,
            (const std::string *)(v5 + 288),
            (const std::string *)(v5 + 352),
            2u,
            (std::vector<unsigned int> *)(v5 + 160),
            1) != 0;
    std::string::~string((void *)(v5 + 288));
    *(_DWORD *)(((v5 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v5 + 32);
    *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
    std::string::~string((void *)(v5 + 352));
    *(_DWORD *)(((v5 + 352) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v5 + 48);
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRefreshWorldQuestFlowGroupSuite",
        3074);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 416),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              v11,
              (const char (*)[23])"[WQ_FLOW] exec.param: ");
      v13 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])byte_1A45DF40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 416));
      *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 160)) > 1 )
    {
      if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 160)) <= 0x14 )
      {
        lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
        for ( idx = 1LL;
              idx < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 160));
              idx += 2LL )
        {
          *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
          v17 = idx - 1;
          v18 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 160), idx - 1);
          v19 = (int *)v18;
          if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v18);
          }
          v20 = *v19;
          v21 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
          if ( v21 != 0 && v21 <= 3 )
          {
            LOBYTE(v17) = v21 != 0;
            __asan_report_store4(v5 + 64, v17);
          }
          *(_DWORD *)(v5 + 64) = v20;
          *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 4;
          v22 = idx;
          v23 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 160), idx);
          v24 = (int *)v23;
          if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v23);
          }
          v25 = *v24;
          v26 = *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000);
          if ( v26 != 0 && v26 <= 3 )
          {
            LOBYTE(v22) = v26 != 0;
            __asan_report_store4(v5 + 80, v22);
          }
          *(_DWORD *)(v5 + 80) = v25;
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v5 + 64);
          v27 = *(unsigned int *)(v5 + 64);
          SceneIdByGroupId = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, v27);
          v29 = *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000);
          if ( v29 != 0 && v29 <= 3 )
          {
            LOBYTE(v27) = v29 != 0;
            __asan_report_store4(v5 + 96, v27);
          }
          *(_DWORD *)(v5 + 96) = SceneIdByGroupId;
          scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                               &txt_config_mgr->scene_config_mgr,
                               *(unsigned int *)(v5 + 96));
          if ( scene_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load4(&scene_config_ptr->type);
            }
            if ( !SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
            {
              *(_DWORD *)(((v5 + 672) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 672) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 703) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 703) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 672, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 672),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecRefreshWorldQuestFlowGroupSuite",
                3102);
              v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 672),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v36 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                      v35,
                      (const char (*)[30])"[WQ_FLOW] invalid scene_type:");
              *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                                + 0x7FFF8000) )
              {
                __asan_report_load4(&scene_config_ptr->type);
              }
              v37 = (__int64)data::enumValToStr(scene_config_ptr->type);
              if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
                v37 = __asan_report_store8(v5 + 128, (((_BYTE)scene_config_ptr + 12) & 7u) + 3);
              *(_QWORD *)(v5 + 128) = v37;
              v38 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                      v36,
                      (const char *const *)(v5 + 128));
              v39 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v38,
                      (const char (*)[12])", group_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v39,
                (const unsigned int *)(v5 + 64));
              *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 672));
              *(_DWORD *)(((v5 + 672) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v34 = 0;
            }
            else
            {
              if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v5 + 64);
              group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v5 + 64));
              if ( group_script_config_ptr )
              {
                if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v5 + 80);
                if ( GroupScriptConfig::getSuiteDiskConfig(group_script_config_ptr, *(unsigned int *)(v5 + 80)) )
                {
                  if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(group_script_config_ptr);
                  }
                  if ( group_script_config_ptr->io_type != GROUP_IO_TYPE_FLOW )
                    goto LABEL_66;
                  if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->sub_flow_type >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)group_script_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->sub_flow_type >> 3)
                                                                                          + 0x7FFF8000) )
                  {
                    __asan_report_load4(&group_script_config_ptr->sub_flow_type);
                  }
                  if ( group_script_config_ptr->sub_flow_type == GROUP_SUB_FLOW_TYPE_WORLD_QUEST )
                  {
                    std::unordered_set<unsigned int>::insert(
                      &this->quest_group_set,
                      (const std::unordered_set<unsigned int>::value_type *)(v5 + 64));
                    p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
                    if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(v5 + 64);
                    }
                    DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, *(_DWORD *)(v5 + 112), *(_DWORD *)(v5 + 64));
                    v34 = 1;
                  }
                  else
                  {
LABEL_66:
                    *(_DWORD *)(((v5 + 864) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v5 + 864) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v5 + 895) >> 3) + 0x7FFF8000) != 0
                      && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 895) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v5 + 864, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v5 + 864),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkExecRefreshWorldQuestFlowGroupSuite",
                      3118);
                    v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v5 + 864),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v53 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
                            v52,
                            (const char (*)[58])"[WQ_FLOW] refresh action. group is not wq flow. group_id:");
                    v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                            v53,
                            (const unsigned int *)(v5 + 64));
                    v55 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                            v54,
                            (const char (*)[12])", quest_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v55,
                      (const unsigned int *)(v5 + 112));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 864));
                    *(_DWORD *)(((v5 + 864) >> 3) + 0x7FFF8000) = -117901064;
                    v4 = -1;
                    v34 = 0;
                  }
                }
                else
                {
                  *(_DWORD *)(((v5 + 800) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v5 + 800) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v5 + 831) >> 3) + 0x7FFF8000) != 0
                    && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 831) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v5 + 800, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v5 + 800),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkExecRefreshWorldQuestFlowGroupSuite",
                    3113);
                  v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v5 + 800),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v46 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                          v45,
                          (const char (*)[21])"[WQ_FLOW] scene_id: ");
                  v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v46,
                          (const unsigned int *)(v5 + 96));
                  v48 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v47,
                          (const char (*)[12])" group_id: ");
                  v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v48,
                          (const unsigned int *)(v5 + 64));
                  v50 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v49,
                          (const char (*)[12])" suite_id: ");
                  v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v50,
                          (const unsigned int *)(v5 + 80));
                  common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v51, (const char (*)[7])byte_1A45E500);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 800));
                  *(_DWORD *)(((v5 + 800) >> 3) + 0x7FFF8000) = -117901064;
                  v4 = -1;
                  v34 = 0;
                }
              }
              else
              {
                *(_DWORD *)(((v5 + 736) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 736) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 767) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 767) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 736, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 736),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkExecRefreshWorldQuestFlowGroupSuite",
                  3108);
                v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v5 + 736),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v41 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                        v40,
                        (const char (*)[21])"[WQ_FLOW] scene_id: ");
                v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v41,
                        (const unsigned int *)(v5 + 96));
                v43 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v42,
                        (const char (*)[12])" group_id: ");
                v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v43,
                        (const unsigned int *)(v5 + 64));
                common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v44, (const char (*)[7])byte_1A45E500);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 736));
                *(_DWORD *)(((v5 + 736) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v34 = 0;
              }
            }
          }
          else
          {
            *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 608) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 608, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 608),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecRefreshWorldQuestFlowGroupSuite",
              3096);
            v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 608),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v31 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    v30,
                    (const char (*)[29])"[WQ_FLOW] scene_id invalid: ");
            v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v31,
                    (const unsigned int *)(v5 + 96));
            v33 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v32,
                    (const char (*)[12])", group_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 608));
            *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v34 = 0;
          }
          *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( v34 != 1 )
            goto LABEL_75;
        }
        v4 = 0;
      }
      else
      {
        *(_DWORD *)(((v5 + 544) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 544) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 544, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 544),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRefreshWorldQuestFlowGroupSuite",
          3084);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 544),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v16, (const char (*)[56])byte_1A4611C0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 544));
        *(_DWORD *)(((v5 + 544) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
      }
    }
    else
    {
      *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v5 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRefreshWorldQuestFlowGroupSuite",
        3079);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 480),
              (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v15, (const char (*)[47])byte_1A461160);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 480));
      *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
LABEL_75:
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 160));
  }
  else
  {
    if ( *(char *)(((v5 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRefreshWorldQuestFlowGroupSuite",
      3068);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [87],(char *[87])0>(v8, (const char (*)[87])byte_1A4610A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 224));
    v4 = -1;
  }
  if ( v65 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF806C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v7 + 536862730) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v7 + 2147450912 - (((_DWORD)v7 + 2147450920) & 0xFFFFFFF8) + 84) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8070) = -168430091;
  }
  return v4;
};

// Line 3129: range 000000000EF2018E-000000000EF214DC
int32_t __cdecl QuestExcelConfigMgr::checkExecRefreshGroupSuite(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  const std::string *v17; // rax
  bool v18; // r15
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  const std::string *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  size_t v25; // rsi
  std::vector<unsigned int>::reference v26; // rax
  int *v27; // rdx
  int v28; // ecx
  char v29; // al
  size_t v30; // rsi
  std::vector<unsigned int>::reference v31; // rax
  int *v32; // rdx
  int v33; // ecx
  char v34; // al
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  int v40; // eax
  std::vector<SuiteScriptConfig>::size_type v41; // r15
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  int32_t result; // eax
  size_t idx; // [rsp+38h] [rbp-388h]
  LuaConfigMgr *lua_config_mgr; // [rsp+40h] [rbp-380h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+48h] [rbp-378h]
  char v57[880]; // [rsp+50h] [rbp-370h] BYREF

  v5 = (unsigned __int64)v57;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(832LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "16 48 1 9 <unknown> 64 1 9 <unknown> 80 4 13 scene_id:3136 96 4 13 group_id:3167 112 4 13 suite_"
                        "id:3168 128 24 11 id_vec:3149 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 "
                        "<unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <"
                        "unknown> 768 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecRefreshGroupSuite;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556927;
  v7[536862723] = -234556924;
  v7[536862724] = -234881024;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -218959118;
  v7[536862741] = -218959118;
  v7[536862743] = -218959118;
  v7[536862745] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v5 + 80, txt_config_mgr);
    *(_DWORD *)(v5 + 80) = 0;
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v5 + 80), 1) )
    {
      if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRefreshGroupSuite",
        3139);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 256),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" exec.param: ");
      v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])byte_1A45DF40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
      v4 = -1;
    }
    else
    {
      lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v5 + 80);
      if ( LuaConfigMgr::findSceneScriptConfig(lua_config_mgr, *(unsigned int *)(v5 + 80)) )
      {
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 128));
        std::allocator<char>::allocator(v5 + 64);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v5 + 448),
          ",",
          (const std::allocator<char> *)(v5 + 64));
        std::allocator<char>::allocator(v5 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v5 + 384),
          ";",
          (const std::allocator<char> *)(v5 + 48));
        v17 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v18 = common::tools::StringUtils::splitToList<unsigned int>(
                v17,
                (const std::string *)(v5 + 384),
                (const std::string *)(v5 + 448),
                2u,
                (std::vector<unsigned int> *)(v5 + 128),
                1) != 0;
        std::string::~string((void *)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v5 + 48);
        *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
        std::string::~string((void *)(v5 + 448));
        *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v5 + 64);
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v18 )
        {
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRefreshGroupSuite",
            3152);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v19,
                  (const char (*)[14])" exec.param: ");
          v21 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, v21);
          common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v22, (const char (*)[13])byte_1A45DF40);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
        else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 128)) > 1 )
        {
          if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 128)) <= 0x14 )
          {
            for ( idx = 1LL;
                  idx < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 128));
                  idx += 2LL )
            {
              *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 4;
              v25 = idx - 1;
              v26 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 128), idx - 1);
              v27 = (int *)v26;
              if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v26);
              }
              v28 = *v27;
              v29 = *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000);
              if ( v29 != 0 && v29 <= 3 )
              {
                LOBYTE(v25) = v29 != 0;
                __asan_report_store4(v5 + 96, v25);
              }
              *(_DWORD *)(v5 + 96) = v28;
              *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) = 4;
              v30 = idx;
              v31 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 128), idx);
              v32 = (int *)v31;
              if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v31);
              }
              v33 = *v32;
              v34 = *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000);
              if ( v34 != 0 && v34 <= 3 )
              {
                LOBYTE(v30) = v34 != 0;
                __asan_report_store4(v5 + 112, v30);
              }
              *(_DWORD *)(v5 + 112) = v33;
              if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v5 + 96);
              group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v5 + 96));
              if ( group_script_config_ptr )
              {
                if ( *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v5 + 112);
                v41 = *(unsigned int *)(v5 + 112);
                if ( v41 <= std::vector<SuiteScriptConfig>::size(&group_script_config_ptr->suite_config_vec) )
                {
                  std::unordered_set<unsigned int>::insert(
                    &this->quest_group_set,
                    (const std::unordered_set<unsigned int>::value_type *)(v5 + 96));
                  p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
                  if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) <= 3 )
                    __asan_report_load4(v5 + 96);
                  DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, quest_id, *(_DWORD *)(v5 + 96));
                  v40 = 1;
                }
                else
                {
                  *(_DWORD *)(((v5 + 768) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v5 + 768) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v5 + 799) >> 3) + 0x7FFF8000) != 0
                    && (char)((v5 + 31) & 7) >= *(_BYTE *)(((v5 + 799) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v5 + 768, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v5 + 768),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkExecRefreshGroupSuite",
                    3177);
                  v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v5 + 768),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v43 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                          v42,
                          (const char (*)[11])"scene_id: ");
                  v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v43,
                          (const unsigned int *)(v5 + 80));
                  v45 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v44,
                          (const char (*)[12])" group_id: ");
                  v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v45,
                          (const unsigned int *)(v5 + 96));
                  v47 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v46,
                          (const char (*)[12])" suite_id: ");
                  v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v47,
                          (const unsigned int *)(v5 + 112));
                  common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v48, (const char (*)[7])byte_1A45E500);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 768));
                  *(_DWORD *)(((v5 + 768) >> 3) + 0x7FFF8000) = -117901064;
                  v4 = -1;
                  v40 = 0;
                }
              }
              else
              {
                *(_DWORD *)(((v5 + 704) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 704) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 735) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 735) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 704, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 704),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkExecRefreshGroupSuite",
                  3172);
                v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v5 + 704),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v36 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v35,
                        (const char (*)[11])"scene_id: ");
                v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v36,
                        (const unsigned int *)(v5 + 80));
                v38 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v37,
                        (const char (*)[12])" group_id: ");
                v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v38,
                        (const unsigned int *)(v5 + 96));
                common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v39, (const char (*)[7])byte_1A45E500);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 704));
                *(_DWORD *)(((v5 + 704) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v40 = 0;
              }
              *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
              *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) = -8;
              if ( v40 != 1 )
                goto LABEL_60;
            }
            v4 = 0;
          }
          else
          {
            *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 640) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 640, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 640),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecRefreshGroupSuite",
              3162);
            v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 640),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v24, (const char (*)[46])byte_1A461600);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 640));
            *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
          }
        }
        else
        {
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRefreshGroupSuite",
            3157);
          v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v23, (const char (*)[37])byte_1A4615A0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
LABEL_60:
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 128));
      }
      else
      {
        if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRefreshGroupSuite",
          3145);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 320),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])"scene_id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v5 + 80));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v16, (const char (*)[8])byte_1A460E40);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
        v4 = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 33) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRefreshGroupSuite",
      3133);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 192),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(v8, (const char (*)[63])byte_1A461540);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
    v4 = -1;
  }
  result = v4;
  if ( v57 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8064) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3187: range 000000000EF214DE-000000000EF2250A
int32_t __cdecl QuestExcelConfigMgr::checkExecRefreshGroupSuiteRandom(
        QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  const std::string *v17; // rax
  bool v18; // r15
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  const std::string *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  __int64 v24; // rsi
  std::vector<unsigned int>::reference v25; // rax
  int *v26; // rdx
  int v27; // ecx
  char v28; // al
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  size_t v34; // rsi
  std::vector<unsigned int>::reference v35; // rax
  int *v36; // rdx
  int v37; // ecx
  char v38; // al
  std::vector<SuiteScriptConfig>::size_type v39; // r15
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  int v47; // edx
  DropExcelConfigMgr *p_drop_config_mgr; // rcx
  int32_t result; // eax
  size_t idx; // [rsp+38h] [rbp-2E8h]
  LuaConfigMgr *lua_config_mgr; // [rsp+40h] [rbp-2E0h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+48h] [rbp-2D8h]
  char v56[720]; // [rsp+50h] [rbp-2D0h] BYREF

  v5 = (unsigned __int64)v56;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(672LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "13 32 1 9 <unknown> 48 4 13 scene_id:3196 64 4 13 group_id:3220 80 4 13 suite_id:3229 96 24 11 i"
                        "d_vec:3209 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 "
                        "<unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecRefreshGroupSuiteRandom;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = -234556924;
  v7[536862723] = -234881024;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959118;
  v7[536862730] = -218959118;
  v7[536862732] = -218959118;
  v7[536862734] = -218959118;
  v7[536862736] = -218959118;
  v7[536862738] = -218959118;
  v7[536862740] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v5 + 48, txt_config_mgr);
    *(_DWORD *)(v5 + 48) = 0;
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v5 + 48), 1) )
    {
      if ( *(char *)(((v5 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRefreshGroupSuiteRandom",
        3199);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 224),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" exec.param: ");
      v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])byte_1A45DF40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 224));
      v4 = -1;
    }
    else
    {
      lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v5 + 48);
      if ( LuaConfigMgr::findSceneScriptConfig(lua_config_mgr, *(unsigned int *)(v5 + 48)) )
      {
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 96));
        std::allocator<char>::allocator(v5 + 32);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v5 + 352),
          ",",
          (const std::allocator<char> *)(v5 + 32));
        v17 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v18 = common::tools::StringUtils::splitToList<unsigned int>(
                v17,
                (const std::string *)(v5 + 352),
                (std::vector<unsigned int> *)(v5 + 96),
                1) != 0;
        std::string::~string((void *)(v5 + 352));
        *(_DWORD *)(((v5 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v5 + 32);
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        if ( v18 )
        {
          *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRefreshGroupSuiteRandom",
            3212);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 416),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v19,
                  (const char (*)[14])" exec.param: ");
          v21 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, v21);
          common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v22, (const char (*)[13])byte_1A45DF40);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 416));
          *(_DWORD *)(((v5 + 416) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
        else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 96)) > 1 )
        {
          *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
          v24 = 0LL;
          v25 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 96), 0LL);
          v26 = (int *)v25;
          if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v25);
          }
          v27 = *v26;
          v28 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
          if ( v28 != 0 && v28 <= 3 )
          {
            LOBYTE(v24) = v28 != 0;
            __asan_report_store4(v5 + 64, v24);
          }
          *(_DWORD *)(v5 + 64) = v27;
          group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v5 + 64));
          if ( group_script_config_ptr )
          {
            for ( idx = 1LL; idx < std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 96)); ++idx )
            {
              *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 4;
              v34 = idx;
              v35 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 96), idx);
              v36 = (int *)v35;
              if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v35);
              }
              v37 = *v36;
              v38 = *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000);
              if ( v38 != 0 && v38 <= 3 )
              {
                LOBYTE(v34) = v38 != 0;
                __asan_report_store4(v5 + 80, v34);
              }
              *(_DWORD *)(v5 + 80) = v37;
              v39 = *(unsigned int *)(v5 + 80);
              if ( v39 <= std::vector<SuiteScriptConfig>::size(&group_script_config_ptr->suite_config_vec) )
              {
                v47 = 1;
              }
              else
              {
                *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 608) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 639) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 608, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 608),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkExecRefreshGroupSuiteRandom",
                  3232);
                v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v5 + 608),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v41 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v40,
                        (const char (*)[11])"scene_id: ");
                v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v41,
                        (const unsigned int *)(v5 + 48));
                v43 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v42,
                        (const char (*)[12])" group_id: ");
                v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v43,
                        (const unsigned int *)(v5 + 64));
                v45 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v44,
                        (const char (*)[12])" suite_id: ");
                v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v45,
                        (const unsigned int *)(v5 + 80));
                common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v46, (const char (*)[7])byte_1A45E500);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 608));
                *(_DWORD *)(((v5 + 608) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v47 = 0;
              }
              *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
              if ( v47 != 1 )
                goto LABEL_52;
            }
            std::unordered_set<unsigned int>::insert(
              &this->quest_group_set,
              (const std::unordered_set<unsigned int>::value_type *)(v5 + 64));
            p_drop_config_mgr = &txt_config_mgr->drop_config_mgr;
            if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 64);
            DropExcelConfigMgr::recordQuestGroup(p_drop_config_mgr, quest_id, *(_DWORD *)(v5 + 64));
            v4 = 0;
          }
          else
          {
            *(_DWORD *)(((v5 + 544) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 544) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 575) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 544, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 544),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecRefreshGroupSuiteRandom",
              3224);
            v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 544),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v29, (const char (*)[11])"scene_id: ");
            v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v30,
                    (const unsigned int *)(v5 + 48));
            v32 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v31,
                    (const char (*)[12])" group_id: ");
            v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v32,
                    (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v33, (const char (*)[7])byte_1A45E500);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 544));
            *(_DWORD *)(((v5 + 544) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
          }
        }
        else
        {
          *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 96 + 95) & 7) >= *(_BYTE *)(((v5 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecRefreshGroupSuiteRandom",
            3217);
          v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 480),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v23, (const char (*)[37])byte_1A4615A0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 480));
          *(_DWORD *)(((v5 + 480) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
LABEL_52:
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 96));
      }
      else
      {
        if ( *(char *)(((v5 + 288) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 + 63) & 7) >= *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 288, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 288),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRefreshGroupSuiteRandom",
          3205);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 288),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])"scene_id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v5 + 48));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v16, (const char (*)[8])byte_1A460E40);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 288));
        v4 = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v5 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRefreshGroupSuiteRandom",
      3193);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(v8, (const char (*)[63])byte_1A461540);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 160));
    v4 = -1;
  }
  result = v4;
  if ( v56 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 3243: range 000000000EF2250C-000000000EF22A6C
int32_t __cdecl QuestExcelConfigMgr::checkExecNotifyDailyTask(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  DailyTaskExcelConfigMgr *p_daily_task_config_mgr; // rcx
  int v14; // eax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 12 task_id:3249 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecNotifyDailyTask;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecNotifyDailyTask",
        3252);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" exec.param: ");
      v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])byte_1A45DF40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      p_daily_task_config_mgr = &txt_config_mgr->daily_task_config_mgr;
      v14 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( (_BYTE)v14 != 0 && (char)v14 <= 3 )
        __asan_report_load4(v3 + 48);
      if ( data::DailyTaskExcelConfigMgrBase::findDailyTaskExcelConfig(
             p_daily_task_config_mgr,
             *(unsigned int *)(v3 + 48)) )
      {
        result = 0;
      }
      else
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecNotifyDailyTask",
          3257);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v15,
                (const char (*)[16])"daily_task_id: ");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])byte_1A45E500);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecNotifyDailyTask",
      3246);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v6, (const char (*)[45])byte_1A461880);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3264: range 000000000EF22A6E-000000000EF23548
int32_t __cdecl QuestExcelConfigMgr::checkExecCreatePatternGroup(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  __int64 v14; // rsi
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  uint32_t DefaultWorldMainSceneId; // edx
  char v19; // al
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::vector<std::string>::const_reference v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  const std::string *v25; // rax
  common::milog::MiLogStream *v26; // rax
  const std::string *v27; // rcx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  const std::string *v30; // rax
  LuaConfigMgr *lua_config_mgr; // [rsp+28h] [rbp-248h]
  const SceneScriptConfig *scene_config_ptr; // [rsp+30h] [rbp-240h]
  const DummyPointScriptConfig *dummy_point_config_ptr; // [rsp+38h] [rbp-238h]
  char v36[560]; // [rsp+40h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 32 4 15 pattern_id:3271 48 4 13 scene_id:3284 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <u"
                        "nknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecCreatePatternGroup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -218959118;
  v5[536862735] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 32, txt_config_mgr);
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecCreatePatternGroup",
        3274);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" exec.param: ");
      v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])byte_1A45DF40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v3 + 32);
      v14 = *(unsigned int *)(v3 + 32);
      if ( LuaConfigMgr::findPatternGroupScriptConfig(p_lua_config_mgr, v14) )
      {
        lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
        DefaultWorldMainSceneId = TxtConfigMgr::getDefaultWorldMainSceneId(txt_config_mgr);
        v19 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
        if ( v19 != 0 && v19 <= 3 )
        {
          LOBYTE(v14) = v19 != 0;
          __asan_report_store4(v3 + 48, v14);
        }
        *(_DWORD *)(v3 + 48) = DefaultWorldMainSceneId;
        scene_config_ptr = LuaConfigMgr::findSceneScriptConfig(lua_config_mgr, *(unsigned int *)(v3 + 48));
        if ( scene_config_ptr )
        {
          v22 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          std::string::basic_string(v3 + 320, v22);
          dummy_point_config_ptr = SceneScriptConfig::findDummyPointScriptConfig(
                                     scene_config_ptr,
                                     (std::string *)(v3 + 320));
          std::string::~string((void *)(v3 + 320));
          *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -117901064;
          if ( dummy_point_config_ptr )
          {
            v27 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            if ( !SceneScriptConfig::isNewDummyPointMatch(scene_config_ptr, v27, dummy_point_config_ptr) )
            {
              *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 448, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 448),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecCreatePatternGroup",
                3299);
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 448),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v29 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                      v28,
                      (const char (*)[37])"dummy_point not match, dummy_point: ");
              v30 = std::vector<std::string>::operator[](&exec->param, 1uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, v30);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
              result = -1;
            }
            else
            {
              result = 0;
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 384, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 384),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecCreatePatternGroup",
              3294);
            v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 384),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v24 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v23,
                    (const char (*)[14])"dummy_point: ");
            v25 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, v25);
            common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v26, (const char (*)[10])byte_1A461B00);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
            result = -1;
          }
        }
        else
        {
          if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecCreatePatternGroup",
            3288);
          v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v21 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  v20,
                  (const char (*)[30])"findSceneScriptConfig fails, ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          result = -1;
        }
      }
      else
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecCreatePatternGroup",
          3279);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])"pattern_id: ");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])byte_1A45E500);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecCreatePatternGroup",
      3268);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v6, (const char (*)[45])byte_1A461A20);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v36 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3306: range 000000000EF2354A-000000000EF23AB2
int32_t __cdecl QuestExcelConfigMgr::checkExecRemovePatternGroup(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  char v18[304]; // [rsp+20h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 15 pattern_id:3312 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecRemovePatternGroup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRemovePatternGroup",
        3315);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" exec.param: ");
      v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])byte_1A45DF40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v3 + 48);
      if ( LuaConfigMgr::findPatternGroupScriptConfig(p_lua_config_mgr, *(unsigned int *)(v3 + 48)) )
      {
        result = 0;
      }
      else
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRemovePatternGroup",
          3320);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])"pattern_id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])byte_1A45E500);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRemovePatternGroup",
      3309);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v6, (const char (*)[45])byte_1A461C40);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3327: range 000000000EF23AB4-000000000EF241F0
int32_t __cdecl QuestExcelConfigMgr::checkExecLockAvatarTeam(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t v7; // r14d
  unsigned int *M_current; // r14
  unsigned int *v9; // rcx
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  int32_t result; // eax
  std::vector<std::string> *__for_range; // [rsp+20h] [rbp-1C0h]
  const std::string *s; // [rsp+28h] [rbp-1B8h]
  char v16[432]; // [rsp+30h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 14 avatar_id:3342 64 8 16 __for_begin:3336 96 8 14 __for_end:3336 128 8 9 <unknown> 160 8"
                        " 9 <unknown> 192 24 18 avatar_id_vec:3335 256 32 9 <unknown> 320 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecLockAvatarTeam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -202116109;
  if ( std::vector<std::string>::empty(&exec->param) )
  {
    if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecLockAvatarTeam",
      3330);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 256),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v6, (const char (*)[46])byte_1A461DA0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
    v7 = -1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 192));
    __for_range = &exec->param;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 64, txt_config_mgr);
    *(std::vector<std::string>::const_iterator *)(v3 + 64) = std::vector<std::string>::begin(__for_range);
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, txt_config_mgr);
    *(std::vector<std::string>::const_iterator *)(v3 + 96) = std::vector<std::string>::end(__for_range);
    while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
              (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v3 + 64),
              (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v3 + 96)) )
    {
      s = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v3 + 64));
      if ( !(unsigned __int8)std::string::empty() )
      {
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 48, v3 + 96);
        *(_DWORD *)(v3 + 48) = 0;
        if ( !common::tools::StringUtils::strToNum<unsigned int>(s, (unsigned int *)(v3 + 48), 1) )
        {
          *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
          M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 192))._M_current;
          v9 = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 192))._M_current;
          if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 160, v3 + 48);
          *(__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 160) = std::find<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,unsigned int>(
                                                                                                    (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v9,
                                                                                                    (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current,
                                                                                                    (const unsigned int *)(v3 + 48));
          *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 128, M_current);
          *(std::vector<unsigned int>::iterator *)(v3 + 128) = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 192));
          v10 = __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 128),
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 160));
          *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
          if ( !v10 )
            std::vector<unsigned int>::push_back(
              (std::vector<unsigned int> *const)(v3 + 192),
              (const std::vector<unsigned int>::value_type *)(v3 + 48));
        }
      }
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
      __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v3 + 64));
    }
    *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v3 + 192)) )
    {
      *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecLockAvatarTeam",
        3355);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 320),
              (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v11, (const char (*)[38])byte_1A461E00);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
      *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -117901064;
      v7 = -1;
    }
    else
    {
      v7 = 0;
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 192));
  }
  result = v7;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3362: range 000000000EF241F2-000000000EF249F7
int32_t __cdecl QuestExcelConfigMgr::checkExecUpdateParentQuestRewardIndex(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExcelConfig *quest_config_ptr,
        const data::QuestExec *exec)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v9; // rax
  __int64 main_id; // rsi
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  int v16; // eax
  std::vector<unsigned int>::size_type v17; // r14
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const data::MainQuestExcelConfig *main_quest_excel_config_ptr; // [rsp+38h] [rbp-1B8h]
  char v23[432]; // [rsp+40h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 4 10 index:3382 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> "
                        "320 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecUpdateParentQuestRewardIndex;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -218959118;
  v6[536862729] = -218959118;
  v6[536862731] = -202116109;
  if ( quest_config_ptr )
  {
    if ( std::vector<std::string>::empty(&exec->param) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecUpdateParentQuestRewardIndex",
        3372);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v4 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v9, (const char (*)[40])byte_1A461FA0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&quest_config_ptr->main_id);
      }
      main_id = quest_config_ptr->main_id;
      main_quest_excel_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(this, main_id);
      if ( main_quest_excel_config_ptr )
      {
        if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v4 + 48, main_id);
        *(_DWORD *)(v4 + 48) = 0;
        v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 48), 1) )
        {
          if ( *(char *)(((v4 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUpdateParentQuestRewardIndex",
            3385);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v14 = common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(v13, (const char (*)[60])byte_1A462060);
          v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 256));
          result = -1;
        }
        else
        {
          v16 = *(unsigned __int8 *)(((v4 + 48) >> 3) + 0x7FFF8000);
          if ( (_BYTE)v16 != 0 && (char)v16 <= 3 )
            __asan_report_load4(v4 + 48);
          v17 = *(unsigned int *)(v4 + 48);
          if ( v17 < std::vector<unsigned int>::size(&main_quest_excel_config_ptr->reward_id_list) )
          {
            result = 0;
          }
          else
          {
            if ( *(char *)(((v4 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecUpdateParentQuestRewardIndex",
              3390);
            v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v19 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                    v18,
                    (const char (*)[62])byte_1A4620C0);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 48));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 320));
            result = -1;
          }
        }
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecUpdateParentQuestRewardIndex",
          3379);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(v11, (const char (*)[59])byte_1A462000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecUpdateParentQuestRewardIndex",
      3365);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v7, (const char (*)[36])byte_1A461F40);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = -1;
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3397: range 000000000EF249F8-000000000EF2525E
int32_t __cdecl QuestExcelConfigMgr::checkExecSetDailyTaskVar(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::vector<std::string> *params)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v12; // rax
  DailyTaskExcelConfigMgr *p_daily_task_config_mgr; // rcx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  uint32_t DailyTaskVarNum; // ecx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  const char *v21; // rsi
  common::milog::MiLogStream *v22; // r14
  uint32_t v23; // edx
  char v24; // al
  char v27[400]; // [rsp+20h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 4 12 task_id:3404 48 4 10 index:3404 64 4 10 value:3405 80 4 9 <unknown> 96 32 9 <unknown> "
                        "160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecSetDailyTaskVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -202116109;
  if ( std::vector<std::string>::size(params) > 2 )
  {
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 32, txt_config_mgr);
    *(_DWORD *)(v3 + 32) = 0;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 64, txt_config_mgr);
    *(_DWORD *)(v3 + 64) = 0;
    v8 = std::vector<std::string>::operator[](params, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1)
      || (v9 = std::vector<std::string>::operator[](params, 1uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1))
      || (v10 = std::vector<std::string>::operator[](params, 2uLL),
          common::tools::StringUtils::strToNum<int>(v10, (int *)(v3 + 64), 1)) )
    {
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecSetDailyTaskVar",
        3410);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v12, (const char (*)[31])byte_1A462260);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      result = -1;
    }
    else
    {
      p_daily_task_config_mgr = &txt_config_mgr->daily_task_config_mgr;
      if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v3 + 32);
      if ( data::DailyTaskExcelConfigMgrBase::findDailyTaskExcelConfig(
             p_daily_task_config_mgr,
             *(unsigned int *)(v3 + 32)) )
      {
        DailyTaskVarNum = ConstValueExcelConfigMgr::getDailyTaskVarNum(&txt_config_mgr->const_value_config_mgr);
        if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 48);
        if ( DailyTaskVarNum > *(_DWORD *)(v3 + 48) )
        {
          result = 0;
        }
        else
        {
          if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 288, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 288),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecSetDailyTaskVar",
            3420);
          v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 288),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v19 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v18, (const char (*)[8])"index: ");
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v3 + 48));
          v21 = byte_1A462320;
          v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v20, (const char (*)[16])byte_1A462320);
          v23 = ConstValueExcelConfigMgr::getDailyTaskVarNum(&txt_config_mgr->const_value_config_mgr);
          v24 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
          if ( v24 != 0 && v24 <= 3 )
          {
            LOBYTE(v21) = v24 != 0;
            __asan_report_store4(v3 + 80, v21);
          }
          *(_DWORD *)(v3 + 80) = v23;
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 80));
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
          result = -1;
        }
      }
      else
      {
        if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecSetDailyTaskVar",
          3415);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v14, (const char (*)[15])byte_1A4622A0);
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])byte_1A45E500);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecSetDailyTaskVar",
      3401);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
      v6,
      (const char (*)[46])"SetDailyTaskVar: task_id + index(0~4) + value");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    result = -1;
  }
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 3427: range 000000000EF25260-000000000EF25A58
int32_t __cdecl QuestExcelConfigMgr::checkExecIncOrDecDailyTaskVar(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::vector<std::string> *params)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  const std::string *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v11; // rax
  DailyTaskExcelConfigMgr *p_daily_task_config_mgr; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  uint32_t DailyTaskVarNum; // ecx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const char *v20; // rsi
  common::milog::MiLogStream *v21; // r14
  uint32_t v22; // edx
  char v23; // al
  char v26[400]; // [rsp+20h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 4 12 task_id:3434 64 4 10 index:3434 80 4 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> "
                        "224 32 9 <unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecIncOrDecDailyTaskVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -202116109;
  if ( std::vector<std::string>::size(params) > 1 )
  {
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 64, txt_config_mgr);
    *(_DWORD *)(v3 + 64) = 0;
    v8 = std::vector<std::string>::operator[](params, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1)
      || (v9 = std::vector<std::string>::operator[](params, 1uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 64), 1)) )
    {
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecIncOrDecDailyTaskVar",
        3438);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A462260);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      result = -1;
    }
    else
    {
      p_daily_task_config_mgr = &txt_config_mgr->daily_task_config_mgr;
      if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v3 + 48);
      if ( data::DailyTaskExcelConfigMgrBase::findDailyTaskExcelConfig(
             p_daily_task_config_mgr,
             *(unsigned int *)(v3 + 48)) )
      {
        DailyTaskVarNum = ConstValueExcelConfigMgr::getDailyTaskVarNum(&txt_config_mgr->const_value_config_mgr);
        if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 64);
        if ( DailyTaskVarNum > *(_DWORD *)(v3 + 64) )
        {
          result = 0;
        }
        else
        {
          if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 288, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 288),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecIncOrDecDailyTaskVar",
            3448);
          v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 288),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v18 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v17, (const char (*)[8])"index: ");
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v18,
                  (const unsigned int *)(v3 + 64));
          v20 = byte_1A462320;
          v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v19, (const char (*)[16])byte_1A462320);
          v22 = ConstValueExcelConfigMgr::getDailyTaskVarNum(&txt_config_mgr->const_value_config_mgr);
          v23 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
          if ( v23 != 0 && v23 <= 3 )
          {
            LOBYTE(v20) = v23 != 0;
            __asan_report_store4(v3 + 80, v20);
          }
          *(_DWORD *)(v3 + 80) = v22;
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 80));
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
          result = -1;
        }
      }
      else
      {
        if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecIncOrDecDailyTaskVar",
          3443);
        v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v13, (const char (*)[15])byte_1A4622A0);
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v14,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v15, (const char (*)[7])byte_1A45E500);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecIncOrDecDailyTaskVar",
      3431);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(v6, (const char (*)[62])byte_1A462440);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    result = -1;
  }
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 3455: range 000000000EF25A5A-000000000EF25FA8
int32_t __cdecl QuestExcelConfigMgr::checkExecModifyQuestGlobalVar(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::vector<std::string> *params)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  int v10; // eax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  char v15[288]; // [rsp+20h] [rbp-120h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 8 key:3462 48 4 10 value:3463 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecModifyQuestGlobalVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::size(params) > 1 )
  {
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 32, txt_config_mgr);
    *(_DWORD *)(v3 + 32) = 0;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,int &>(
           params,
           (unsigned int *)(v3 + 32),
           (int *)(v3 + 48),
           (int *)(v3 + 32)) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecModifyQuestGlobalVar",
        3466);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(v8, (const char (*)[56])byte_1A4625A0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      p_quest_config_mgr = &txt_config_mgr->quest_config_mgr;
      v10 = *(unsigned __int8 *)(((v3 + 32) >> 3) + 0x7FFF8000);
      if ( (_BYTE)v10 != 0 && (char)v10 <= 3 )
        __asan_report_load4(v3 + 32);
      if ( data::QuestExcelConfigMgrBase::findQuestGlobalVarConfig(p_quest_config_mgr, *(unsigned int *)(v3 + 32)) )
      {
        result = 0;
      }
      else
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecModifyQuestGlobalVar",
          3471);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v11, (const char (*)[4])"ID:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v12,
                (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v13, (const char (*)[31])byte_1A45A100);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyQuestGlobalVar",
      3459);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v6, (const char (*)[37])byte_1A462540);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3478: range 000000000EF25FAA-000000000EF26ABE
int32_t __cdecl QuestExcelConfigMgr::checkExecModifyQuestVar(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::vector<std::string> *params,
        bool is_random,
        bool is_closed)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int *v8; // r8
  int *v9; // r9
  common::milog::MiLogStream *v10; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int v17; // ecx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  int v22; // ecx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  int32_t ret; // [rsp+2Ch] [rbp-204h]
  char v31[512]; // [rsp+30h] [rbp-200h] BYREF

  v5 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(480LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "9 48 4 10 index:3484 64 4 11 delta1:3485 80 4 11 delta2:3486 96 32 9 <unknown> 160 32 9 <unknown"
                        "> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecModifyQuestVar;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -234556924;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959118;
  v7[536862730] = -218959118;
  v7[536862732] = -218959118;
  v7[536862734] = -202116109;
  if ( std::vector<std::string>::size(params) <= 1 )
  {
    if ( *(char *)(((v5 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyQuestVar",
      3481);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v5 + 96),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(v10, (const char (*)[52])byte_1A462700);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 96));
    result = -1;
    goto LABEL_54;
  }
  if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v5 + 48, txt_config_mgr);
  *(_DWORD *)(v5 + 48) = 0;
  if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v5 + 64, txt_config_mgr);
  *(_DWORD *)(v5 + 64) = 0;
  if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v5 + 80, txt_config_mgr);
  *(_DWORD *)(v5 + 80) = 0;
  if ( is_random )
    ret = common::tools::StringUtils::strVecToNum<0u,unsigned int,int &,int &>(
            params,
            (unsigned int *)(v5 + 48),
            (int *)(v5 + 64),
            (int *)(v5 + 80),
            v8,
            v9);
  else
    ret = common::tools::StringUtils::strVecToNum<0u,unsigned int,int &>(
            params,
            (unsigned int *)(v5 + 48),
            (int *)(v5 + 64),
            (int *)(v5 + 48));
  if ( ret )
  {
    if ( *(char *)(((v5 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyQuestVar",
      3498);
    v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v5 + 160),
            (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v12, (const char (*)[32])byte_1A462760);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 160));
    result = -1;
    goto LABEL_54;
  }
  if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v5 + 48);
  if ( *(_DWORD *)(v5 + 48) > 4u )
  {
    if ( *(char *)(((v5 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 32 + 31) & 7) >= *(_BYTE *)(((v5 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyQuestVar",
      3503);
    v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v5 + 224),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v14 = common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(v13, (const char (*)[59])byte_1A4627A0);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &QuestExcelConfigMgr::QUEST_VAR_LEN);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 224));
    result = -1;
    goto LABEL_54;
  }
  if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v5 + 64);
  if ( *(int *)(v5 + 64) < 0 )
  {
    if ( *(char *)(((v5 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 32 + 95) & 7) >= *(_BYTE *)(((v5 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyQuestVar",
      3508);
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v5 + 288),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v16 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v15, (const char (*)[47])byte_1A462800);
    common::milog::MiLogStream::operator<<<int,(int *)0>(v16, (const int *)(v5 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 288));
    result = -1;
    goto LABEL_54;
  }
  if ( !is_random )
    goto LABEL_53;
  if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v5 + 80);
  v17 = *(_DWORD *)(v5 + 80);
  if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v5 + 64);
  if ( v17 == *(_DWORD *)(v5 + 64) && !is_closed )
  {
    if ( *(char *)(((v5 + 352) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 383) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 + 127) & 7) >= *(_BYTE *)(((v5 + 383) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 352, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 352),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyQuestVar",
      3515);
    v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v5 + 352),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v19 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(v18, (const char (*)[70])byte_1A462860);
    v20 = common::milog::MiLogStream::operator<<<int,(int *)0>(v19, (const int *)(v5 + 64));
    v21 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v20, (const char (*)[9])" delta2:");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v21, (const int *)(v5 + 80));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 352));
    result = -1;
    goto LABEL_54;
  }
  if ( *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v5 + 80);
  v22 = *(_DWORD *)(v5 + 80);
  if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v5 + 64);
  if ( v22 >= *(_DWORD *)(v5 + 64) && *(int *)(v5 + 64) >= 0 && *(int *)(v5 + 80) >= 0 )
  {
LABEL_53:
    result = 0;
    goto LABEL_54;
  }
  if ( *(char *)(((v5 + 416) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 96 + 31) & 7) >= *(_BYTE *)(((v5 + 447) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 416, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 416),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "checkExecModifyQuestVar",
    3520);
  v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v5 + 416),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v24 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(v23, (const char (*)[68])byte_1A462920);
  v25 = common::milog::MiLogStream::operator<<<int,(int *)0>(v24, (const int *)(v5 + 64));
  v26 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v25, (const char (*)[9])" delta2:");
  common::milog::MiLogStream::operator<<<int,(int *)0>(v26, (const int *)(v5 + 80));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 416));
  result = -1;
LABEL_54:
  if ( v31 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 3529: range 000000000EF26AC0-000000000EF2705D
int32_t __cdecl QuestExcelConfigMgr::checkActivityCondId(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  NewActivityExcelConfigMgr *p_new_activity_config_mgr; // rdi
  int v10; // eax
  uint32_t v11; // edx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  char v17[288]; // [rsp+20h] [rbp-120h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 16 activity_id:3535 48 4 12 cond_id:3536 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkActivityCondId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 32, txt_config_mgr);
    *(_DWORD *)(v3 + 32) = 0;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
           &exec->param,
           (unsigned int *)(v3 + 32),
           (unsigned int *)(v3 + 48),
           (unsigned int *)&exec->param) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkActivityCondId",
        3539);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v8, (const char (*)[45])byte_1A462AA0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      p_new_activity_config_mgr = &txt_config_mgr->new_activity_config_mgr;
      v10 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( (_BYTE)v10 != 0 && (char)v10 <= 3 )
      {
        p_new_activity_config_mgr = (NewActivityExcelConfigMgr *)(v3 + 48);
        __asan_report_load4(v3 + 48);
      }
      v11 = *(_DWORD *)(v3 + 48);
      if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      {
        p_new_activity_config_mgr = (NewActivityExcelConfigMgr *)(v3 + 32);
        __asan_report_load4(v3 + 32);
      }
      if ( !NewActivityExcelConfigMgr::isActivityContainsCondId(
              p_new_activity_config_mgr,
              *(unsigned int *)(v3 + 32),
              v11) )
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkActivityCondId",
          3544);
        v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v13 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v12, (const char (*)[10])byte_1A462B00);
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v13,
                (const unsigned int *)(v3 + 32));
        v15 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v14, (const char (*)[19])byte_1A462B40);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
      else
      {
        result = 0;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkActivityCondId",
      3532);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v6, (const char (*)[26])byte_1A462A60);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3551: range 000000000EF2705E-000000000EF27429
int32_t __cdecl QuestExcelConfigMgr::checkExecChangeSkillDepot(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  char v14[240]; // [rsp+20h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 16 depot_index:3557 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecChangeSkillDepot;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  if ( std::vector<std::string>::empty(&exec->param) )
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecChangeSkillDepot",
      3554);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v6, (const char (*)[37])byte_1A462C00);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecChangeSkillDepot",
        3560);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])"exec.param: ");
      v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v12, (const char (*)[25])byte_1A462C60);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3567: range 000000000EF2742A-000000000EF27BA5
int32_t __cdecl QuestExcelConfigMgr::checkExecReloadSceneTag(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  std::vector<std::string>::size_type v8; // rax
  int32_t result; // eax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  SceneExcelConfigMgr *v18; // rcx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  char v22[400]; // [rsp+20h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 13 scene_id:3574 64 8 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown>"
                        " 288 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecReloadSceneTag;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    v10 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
    {
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecReloadSceneTag",
        3577);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v11,
              (const char (*)[18])"strToNum failed: ");
      v13 = std::vector<std::string>::operator[](&exec->param, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      result = -1;
    }
    else
    {
      p_scene_config_mgr = &txt_config_mgr->scene_config_mgr;
      v15 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( (_BYTE)v15 != 0 && (char)v15 <= 3 )
        __asan_report_load4(v3 + 48);
      if ( data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, *(unsigned int *)(v3 + 48)) )
      {
        v18 = &txt_config_mgr->scene_config_mgr;
        if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 48);
        if ( !SceneExcelConfigMgr::isPlayerWorldScene(v18, *(_DWORD *)(v3 + 48)) )
        {
          if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 288, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 288),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecReloadSceneTag",
            3590);
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 288),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v20 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v19, (const char (*)[45])byte_1A462E40);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
          result = -1;
        }
        else
        {
          result = 0;
        }
      }
      else
      {
        if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecReloadSceneTag",
          3583);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v17 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                v16,
                (const char (*)[40])"findSceneExcelConfig failed, scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecReloadSceneTag",
      3570);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           v6,
           (const char (*)[27])"param size invalid, size: ");
    v8 = std::vector<std::string>::size(&exec->param);
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      v8 = __asan_report_store8(v3 + 64, "param size invalid, size: ");
    *(_QWORD *)(v3 + 64) = v8;
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v7, (const unsigned __int64 *)(v3 + 64));
    *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    result = -1;
  }
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 3598: range 000000000EF27BA6-000000000EF286DF
int32_t __cdecl QuestExcelConfigMgr::checkExecSceneTagOp(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  int v10; // eax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  uint32_t scene_id; // ecx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  SceneExcelConfigMgr *v18; // rcx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  DungeonExcelConfigMgr *p_dungeon_config_mgr; // rcx
  char v23; // al
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  const data::SceneTagConfig *scene_tag_config_ptr; // [rsp+20h] [rbp-1F0h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+28h] [rbp-1E8h]
  char v32[480]; // [rsp+30h] [rbp-1E0h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 4 13 scene_id:3605 48 4 17 scene_tag_id:3606 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 "
                        "<unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecSceneTagOp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 32, txt_config_mgr);
    *(_DWORD *)(v3 + 32) = 0;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
           &exec->param,
           (unsigned int *)(v3 + 32),
           (unsigned int *)(v3 + 48),
           (unsigned int *)&exec->param) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecSceneTagOp",
        3609);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v8, (const char (*)[19])"strVecToNum failed");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      p_scene_config_mgr = &txt_config_mgr->scene_config_mgr;
      v10 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( (_BYTE)v10 != 0 && (char)v10 <= 3 )
        __asan_report_load4(v3 + 48);
      scene_tag_config_ptr = data::SceneExcelConfigMgrBase::findSceneTagConfig(
                               p_scene_config_mgr,
                               *(unsigned int *)(v3 + 48));
      if ( scene_tag_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&scene_tag_config_ptr->scene_id);
        }
        scene_id = scene_tag_config_ptr->scene_id;
        if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 32);
        if ( scene_id == *(_DWORD *)(v3 + 32) )
        {
          v18 = &txt_config_mgr->scene_config_mgr;
          if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v3 + 32);
          scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(v18, *(unsigned int *)(v3 + 32));
          if ( scene_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load4(&scene_config_ptr->type);
            }
            if ( SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
              goto LABEL_46;
            if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load4(&scene_config_ptr->type);
            }
            if ( scene_config_ptr->type != SCENE_DUNGEON )
              goto LABEL_45;
            p_dungeon_config_mgr = &txt_config_mgr->dungeon_config_mgr;
            if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v3 + 32);
            if ( DungeonExcelConfigMgr::isUsedForMpDungeon(p_dungeon_config_mgr, *(_DWORD *)(v3 + 32)) )
LABEL_45:
              v23 = 1;
            else
LABEL_46:
              v23 = 0;
            if ( v23 )
            {
              if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 384, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 384),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkExecSceneTagOp",
                3638);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 384),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v24,
                      (const char (*)[13])"SceneTag ID:");
              v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v25,
                      (const unsigned int *)(v3 + 48));
              v27 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v26,
                      (const char (*)[11])" scene_id:");
              v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v27,
                      (const unsigned int *)(v3 + 32));
              common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(v28, (const char (*)[70])byte_1A4631E0);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
              result = -1;
            }
            else
            {
              result = 0;
            }
          }
          else
          {
            if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecSceneTagOp",
              3629);
            v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])"Scene ID:");
            v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v20,
                    (const unsigned int *)(v3 + 32));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v21, (const char (*)[17])byte_1A463160);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
            result = -1;
          }
        }
        else
        {
          if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 64 + 95) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecSceneTagOp",
            3622);
          v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v15 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                  v14,
                  (const char (*)[47])"scene_id and scene_tag_id mismatch, scene_id: ");
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v15,
                  (const unsigned int *)(v3 + 32));
          v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v16,
                  (const char (*)[17])" ,scene_tag_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          result = -1;
        }
      }
      else
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecSceneTagOp",
          3616);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v11,
                (const char (*)[42])"findSceneTagConfig failed, scene_tag_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecSceneTagOp",
      3601);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v6, (const char (*)[24])"scene_id + scene_tag_id");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3646: range 000000000EF286E0-000000000EF28BC5
int32_t __cdecl QuestExcelConfigMgr::checkExecTimeVar(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  int v9; // eax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  char v13[288]; // [rsp+20h] [rbp-120h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 10 index:3652 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkExecTimeVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, txt_config_mgr);
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v3 + 48)) )
    {
      if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecTimeVar",
        3655);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v8, (const char (*)[32])byte_1A45EF00);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      result = -1;
    }
    else
    {
      v9 = *(unsigned __int8 *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( (_BYTE)v9 != 0 && (char)v9 <= 3 )
        __asan_report_load4(v3 + 48);
      if ( *(_DWORD *)(v3 + 48) <= 9u )
      {
        result = 0;
      }
      else
      {
        if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 64 + 31) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecTimeVar",
          3660);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v11 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(v10, (const char (*)[52])byte_1A459EC0);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v11,
          &QuestExcelConfigMgr::QUEST_TIME_VAR_LEN);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        result = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecTimeVar",
      3649);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(v6, (const char (*)[43])byte_1A463300);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
    result = -1;
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3668: range 000000000EF28BC6-000000000EF28E2E
const data::MainQuestExcelConfig *__fastcall QuestExcelConfigMgr::findParentQuestConfigByChildId(
        const QuestExcelConfigMgr *const this,
        uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  const data::MainQuestExcelConfig *result; // rax
  const QuestExcelConfigMgr *v7; // rcx
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+18h] [rbp-A8h]
  char v9[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 quest_id:3667 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findParentQuestConfigByChildId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862723] = -202116109;
  *(_DWORD *)(v2 + 48) = quest_id;
  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, *(unsigned int *)(v2 + 48));
  if ( quest_config_ptr )
  {
    v7 = this;
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config_ptr->main_id);
    }
    result = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(v7, quest_config_ptr->main_id);
  }
  else
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "findParentQuestConfigByChildId",
      3672);
    v5 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           (common::milog::MiLogStream *const)(v2 + 64),
           (const char (*)[38])"findQuestExcelConfig fails, quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0LL;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3682: range 000000000EF28E30-000000000EF29658
int32_t __cdecl QuestExcelConfigMgr::rewriteTalkExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  unsigned int first; // ecx
  char v8; // al
  __int64 v9; // rsi
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  _BOOL4 v12; // eax
  char *v13; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v14; // rax
  int *v15; // rdx
  int v16; // ecx
  char v17; // al
  data::TalkExcelConfig *v18; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,data::TalkExcelConfig> >,bool> v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int v24; // edx
  int v25; // eax
  int32_t result; // eax
  data::TalkExcelConfigMap *__for_range; // [rsp+18h] [rbp-198h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false>::reference p; // [rsp+20h] [rbp-190h]
  std::vector<unsigned int> *__for_range_0; // [rsp+30h] [rbp-180h]
  std::unordered_map<unsigned int,std::map<unsigned int,data::TalkExcelConfig>>::mapped_type *talk_map; // [rsp+38h] [rbp-178h]
  char v31[368]; // [rsp+40h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 4 12 talk_id:3685 48 4 11 npc_id:3693 64 8 16 __for_begin:3683 96 8 14 __for_end:3683 128 8"
                        " 16 __for_begin:3693 160 8 14 __for_end:3693 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::rewriteTalkExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  __for_range = &this->talk_excel_config_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::TalkExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::TalkExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::TalkExcelConfig>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::TalkExcelConfig>::end(__for_range);
  while ( 1 )
  {
    v6 = (char *)(v3 + 96);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::TalkExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::TalkExcelConfig>,false> *)(v3 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::TalkExcelConfig>,false> *)(v3 + 96)) )
      break;
    p = std::__detail::_Node_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false> *const)(v3 + 64));
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p);
    }
    first = p->first;
    v8 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
    if ( v8 != 0 && v8 <= 3 )
    {
      LOBYTE(v6) = v8 != 0;
      __asan_report_store4(v3 + 32, v6);
    }
    *(_DWORD *)(v3 + 32) = first;
    common::tools::MiscUtils::removeEmptyElement<data::TalkCond,data::QuestCondType data::TalkCond::*>(
      &p->second.begin_cond,
      (data::QuestCondType *)8);
    if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v3 + 32);
    v9 = *(unsigned int *)(v3 + 32);
    if ( QuestExcelConfigMgr::rewriteTalkSeries(this, v9) )
    {
      *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "rewriteTalkExcelConfig",
        3690);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              v10,
              (const char (*)[40])"rewriteTalkExcelConfig failed, talk_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
      *(_DWORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v12 = 0;
    }
    else
    {
      __for_range_0 = &p->second.npc_id;
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 128, v9);
      *(std::vector<unsigned int>::iterator *)(v3 + 128) = std::vector<unsigned int>::begin(__for_range_0);
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 160, v9);
      *(std::vector<unsigned int>::iterator *)(v3 + 160) = std::vector<unsigned int>::end(__for_range_0);
      while ( 1 )
      {
        v13 = (char *)(v3 + 160);
        if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 128),
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 160)) )
        {
          v24 = 1;
          goto LABEL_36;
        }
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
        v14 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 128));
        v15 = (int *)v14;
        if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v14);
        }
        v16 = *v15;
        v17 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
        if ( v17 != 0 && v17 <= 3 )
        {
          LOBYTE(v13) = v17 != 0;
          __asan_report_store4(v3 + 48, v13);
        }
        *(_DWORD *)(v3 + 48) = v16;
        talk_map = std::unordered_map<unsigned int,std::map<unsigned int,data::TalkExcelConfig>>::operator[](
                     &this->npc_talk_map,
                     (const std::unordered_map<unsigned int,std::map<unsigned int,data::TalkExcelConfig>>::key_type *)(v3 + 48));
        v19 = std::map<unsigned int,data::TalkExcelConfig>::emplace<unsigned int &,data::TalkExcelConfig&>(
                talk_map,
                &p->second.id,
                &p->second,
                &p->second.id,
                v18);
        if ( !v19.second )
          break;
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 128));
      }
      *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "rewriteTalkExcelConfig",
        3698);
      v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 256),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v21 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v20,
              (const char (*)[19])"duplicate talk_id:");
      v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &p->second.id);
      v23 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v22, (const char (*)[10])", npc_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
      *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v24 = 0;
LABEL_36:
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      v12 = v24 == 1;
    }
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( !v12 )
    {
      v25 = 0;
      goto LABEL_41;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false> *const)(v3 + 64));
  }
  v25 = 1;
LABEL_41:
  if ( v25 == 1 )
    v2 = 0;
  result = v2;
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3708: range 000000000EF2965A-000000000EF29A16
int32_t __cdecl QuestExcelConfigMgr::rewriteChapterExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 TimeByStr; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int v10; // eax
  int32_t result; // eax
  data::ChapterExcelConfigMap *__for_range; // [rsp+18h] [rbp-F8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false>::reference __in; // [rsp+20h] [rbp-F0h]
  std::tuple_element<1,std::pair<unsigned int const,data::ChapterExcelConfig> >::type *config; // [rsp+30h] [rbp-E0h]
  char v15[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 8 16 __for_begin:3709 64 8 14 __for_end:3709 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::rewriteChapterExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -202116109;
  __for_range = &this->chapter_excel_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::ChapterExcelConfig>::iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::ChapterExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::ChapterExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::ChapterExcelConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::ChapterExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ChapterExcelConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ChapterExcelConfig>,false> *)(v3 + 64)) )
    {
      v10 = 1;
      goto LABEL_19;
    }
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false> *const)(v3 + 32));
    std::get<0ul,unsigned int const,data::ChapterExcelConfig>(__in);
    config = std::get<1ul,unsigned int const,data::ChapterExcelConfig>(__in);
    if ( std::operator!=<char>(&config->need_begin_time_str, byte_1A3FEBE0) )
    {
      TimeByStr = (unsigned int)common::tools::TimeUtils::getTimeByStr(&config->need_begin_time_str);
      if ( *(_BYTE *)(((unsigned __int64)&config->need_begin_time >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config->need_begin_time >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&config->need_begin_time, TimeByStr);
      }
      config->need_begin_time = TimeByStr;
      if ( !config->need_begin_time )
        break;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false> *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 96, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 96),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "rewriteChapterExcelConfig",
    3717);
  v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v3 + 96),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])"ChapterID: ");
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &config->id);
  common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v9, (const char (*)[40])byte_1A463700);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
  v2 = -1;
  v10 = 0;
LABEL_19:
  if ( v10 == 1 )
    v2 = 0;
  result = v2;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3726: range 000000000EF29A18-000000000EF2A280
__int64 __fastcall QuestExcelConfigMgr::rewriteTalkSeries(QuestExcelConfigMgr *const this, uint32_t talk_id)
{
  unsigned int v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  char *v8; // rsi
  std::queue<unsigned int>::reference v9; // rax
  int *v10; // rdx
  int v11; // ecx
  char v12; // al
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v13; // rax
  int v14; // eax
  QuestExcelConfigMgr *v15; // rdx
  __int64 v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v19; // rax
  int *v20; // rdx
  int v21; // ecx
  char v22; // al
  __int64 result; // rax
  std::unordered_map<unsigned int,std::set<unsigned int>>::mapped_type *series_set; // [rsp+18h] [rbp-1C8h]
  data::TalkExcelConfig *child_talk_excel_config_ptr; // [rsp+20h] [rbp-1C0h]
  std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-1B8h]
  char v27[432]; // [rsp+30h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 4 18 child_talk_id:3740 48 4 17 next_talk_id:3754 64 4 12 talk_id:3725 80 8 16 __for_begin:"
                        "3754 112 8 14 __for_end:3754 144 32 9 <unknown> 208 32 9 <unknown> 272 80 15 talk_queue:3735";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::rewriteTalkSeries;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862731] = -202116109;
  *(_DWORD *)(v3 + 64) = talk_id;
  if ( data::QuestExcelConfigMgrBase::findTalkExcelConfig(this, *(unsigned int *)(v3 + 64)) )
  {
    series_set = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
                   &this->talk_series_map,
                   (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 64));
    std::queue<unsigned int>::queue<std::deque<unsigned int>,void>((std::queue<unsigned int> *const)(v3 + 272));
    v8 = (char *)(v3 + 64);
    std::queue<unsigned int>::push(
      (std::queue<unsigned int> *const)(v3 + 272),
      (const std::queue<unsigned int>::value_type *)(v3 + 64));
    while ( !std::queue<unsigned int>::empty((const std::queue<unsigned int> *const)(v3 + 272)) )
    {
      *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
      v9 = std::queue<unsigned int>::front((std::queue<unsigned int> *const)(v3 + 272));
      v10 = (int *)v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      v11 = *v10;
      v12 = *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000);
      if ( v12 != 0 && v12 <= 3 )
      {
        LOBYTE(v8) = v12 != 0;
        __asan_report_store4(v3 + 32, v8);
      }
      *(_DWORD *)(v3 + 32) = v11;
      std::queue<unsigned int>::pop((std::queue<unsigned int> *const)(v3 + 272));
      v8 = (char *)(v3 + 32);
      v13 = std::set<unsigned int>::insert(series_set, (const std::set<unsigned int>::value_type *)(v3 + 32));
      if ( v13.second )
      {
        v15 = this;
        if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 32);
        v16 = *(unsigned int *)(v3 + 32);
        child_talk_excel_config_ptr = data::QuestExcelConfigMgrBase::findTalkExcelConfig(v15, v16);
        if ( child_talk_excel_config_ptr )
        {
          __for_range = &child_talk_excel_config_ptr->next_talks;
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 80, v16);
          *(std::vector<unsigned int>::iterator *)(v3 + 80) = std::vector<unsigned int>::begin(__for_range);
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 112, v16);
          *(std::vector<unsigned int>::iterator *)(v3 + 112) = std::vector<unsigned int>::end(__for_range);
          while ( 1 )
          {
            v8 = (char *)(v3 + 112);
            if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 80),
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 112)) )
              break;
            *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
            v19 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 80));
            v20 = (int *)v19;
            if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v19);
            }
            v21 = *v20;
            v22 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
            if ( v22 != 0 && v22 <= 3 )
            {
              LOBYTE(v8) = v22 != 0;
              __asan_report_store4(v3 + 48, v8);
            }
            *(_DWORD *)(v3 + 48) = v21;
            std::queue<unsigned int>::push(
              (std::queue<unsigned int> *const)(v3 + 272),
              (const std::queue<unsigned int>::value_type *)(v3 + 48));
            __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 80));
          }
          *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
          v14 = 2;
        }
        else
        {
          *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 208, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 208),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "rewriteTalkSeries",
            3750);
          v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 208),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v18 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                  v17,
                  (const char (*)[43])"findTalkExcelConfig failed, child_talk_id:");
          v8 = (char *)(v3 + 32);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
          *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v14 = 1;
        }
      }
      else
      {
        v14 = 0;
      }
      *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
      if ( v14 && v14 != 2 )
        goto LABEL_38;
    }
    v2 = 0;
LABEL_38:
    std::queue<unsigned int>::~queue((std::queue<unsigned int> *const)(v3 + 272));
  }
  else
  {
    if ( *(char *)(((v3 + 144) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 175) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 175) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 144, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 144),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "rewriteTalkSeries",
      3730);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 144),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           v6,
           (const char (*)[43])"talk_excel_config_ptr is nullptr, talk_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 144));
    v2 = -1;
  }
  result = v2;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3764: range 000000000EF2A282-000000000EF2D5F0
int32_t __cdecl QuestExcelConfigMgr::checkTalkExecConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const std::vector<data::TalkExec> *exec_vec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::vector<data::TalkExec>::size_type v6; // rdx
  std::vector<data::TalkExec>::size_type v7; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r15
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const std::string *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r15
  const std::string *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // r15
  const std::string *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  unsigned __int64 v39; // rax
  const std::string *v40; // rax
  char *v41; // rsi
  bool v42; // r15
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // r15
  const std::string *v47; // rax
  char *v48; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v49; // rax
  int *v50; // rdx
  int v51; // ecx
  char v52; // al
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // r15
  const std::string *v59; // rax
  unsigned __int64 v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  const TxtConfigMgr *p_param; // rsi
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  const std::string *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // r15
  const std::string *v82; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // rax
  common::milog::MiLogStream *v86; // r15
  const std::string *v87; // rax
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // rax
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // rax
  common::milog::MiLogStream *v94; // rax
  const std::string *v95; // rax
  common::milog::MiLogStream *v96; // rax
  common::milog::MiLogStream *v97; // rax
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // r15
  const std::string *v100; // rax
  std::vector<std::string>::const_reference v101; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // rax
  common::milog::MiLogStream *v110; // rax
  common::milog::MiLogStream *v111; // rax
  common::milog::MiLogStream *v112; // rax
  common::milog::MiLogStream *v113; // rax
  common::milog::MiLogStream *v114; // rax
  common::milog::MiLogStream *v115; // rax
  common::milog::MiLogStream *v116; // rax
  common::milog::MiLogStream *v117; // rax
  const std::string *v118; // rax
  common::milog::MiLogStream *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // rax
  common::milog::MiLogStream *v122; // r15
  const std::string *v123; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  int v125; // eax
  common::milog::MiLogStream *v126; // rax
  common::milog::MiLogStream *v127; // rax
  common::milog::MiLogStream *v128; // rax
  common::milog::MiLogStream *v129; // rax
  common::milog::MiLogStream *v130; // rax
  common::milog::MiLogStream *v131; // rax
  common::milog::MiLogStream *v132; // rax
  common::milog::MiLogStream *v133; // rax
  int32_t err_code; // [rsp+24h] [rbp-8ACh]
  const data::TalkExec *exec; // [rsp+28h] [rbp-8A8h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+38h] [rbp-898h]
  const DummyPointScriptConfig *dummy_point_config_ptr; // [rsp+40h] [rbp-890h]
  LuaConfigMgr *lua_config_mgr; // [rsp+48h] [rbp-888h]
  std::vector<unsigned int> *__for_range; // [rsp+50h] [rbp-880h]
  char v143[2160]; // [rsp+60h] [rbp-870h] BYREF

  v3 = (unsigned __int64)v143;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_6(2112LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "40 32 1 9 <unknown> 48 4 14 param_val:3783 64 4 18 set_game_time:3800 80 4 13 quest_id:3817 96 4"
                        " 13 group_id:3838 112 4 20 parent_quest_id:3884 128 4 13 scene_id:3918 144 4 12 talk_id:3957 160"
                        " 8 6 i:3766 192 8 16 __for_begin:3838 224 8 14 __for_end:3838 256 24 17 group_id_vec:3830 320 32"
                        " 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 "
                        "9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9"
                        " <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 "
                        "32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 16 dummy_poin"
                        "t:3925 1600 32 9 <unknown> 1664 32 9 <unknown> 1728 32 9 <unknown> 1792 32 9 <unknown> 1856 32 9"
                        " <unknown> 1920 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkTalkExecConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -234556924;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -234881024;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -218959118;
  v5[536862743] = -218959118;
  v5[536862745] = -218959118;
  v5[536862747] = -218959118;
  v5[536862749] = -218959118;
  v5[536862751] = -218959118;
  v5[536862753] = -218959118;
  v5[536862755] = -218959118;
  v5[536862757] = -218959118;
  v5[536862759] = -218959118;
  v5[536862761] = -218959118;
  v5[536862763] = -218959118;
  v5[536862765] = -218959118;
  v5[536862767] = -218959118;
  v5[536862769] = -218959118;
  v5[536862771] = -218959118;
  v5[536862773] = -218959118;
  v5[536862775] = -218959118;
  v5[536862777] = -218959118;
  v5[536862779] = -218959118;
  v5[536862781] = -218959118;
  v5[536862783] = -218959118;
  v5[536862785] = -202116109;
  err_code = 0;
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 160, txt_config_mgr);
  for ( *(_QWORD *)(v3 + 160) = 0LL; ; ++*(_QWORD *)(v3 + 160) )
  {
    v6 = std::vector<data::TalkExec>::size(exec_vec);
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v3 + 160);
    if ( v6 <= *(_QWORD *)(v3 + 160) )
      break;
    v7 = *(_QWORD *)(v3 + 160);
    exec = std::vector<data::TalkExec>::operator[](exec_vec, v7);
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    if ( exec->type )
    {
      if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&exec->type);
      }
      switch ( exec->type )
      {
        case TALK_EXEC_SET_GADGET_STATE:
          if ( std::vector<std::string>::size(&exec->param) )
          {
            *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 48, v7);
            *(_DWORD *)(v3 + 48) = 0;
            v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
            {
              *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 384, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 384),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3786);
              v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 384),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v12,
                      (const char (*)[14])" exec @index:");
              v14 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v13,
                      (const unsigned __int64 *)(v3 + 160));
              v15 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      v14,
                      (const char (*)[26])" parse talk state failed:");
              v16 = std::vector<std::string>::operator[](&exec->param, 0LL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
              *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3779);
            v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v3 + 320),
                   (const char (*)[16])"[CONFIG_ERROR] ");
            v9 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                   v8,
                   (const char (*)[14])" exec @index:");
            v10 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v9,
                    (const unsigned __int64 *)(v3 + 160));
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v10,
              (const char (*)[19])" param size not 1.");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
            *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
          break;
        case TALK_EXEC_SET_GAME_TIME:
          if ( std::vector<std::string>::size(&exec->param) )
          {
            *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 64, v7);
            *(_DWORD *)(v3 + 64) = 0;
            v20 = std::vector<std::string>::operator[](&exec->param, 0LL);
            if ( common::tools::StringUtils::strToNum<float>(v20, (float *)(v3 + 64), 1) )
            {
              *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 512, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 512),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3803);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 512),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v21,
                      (const char (*)[14])" exec @index:");
              v23 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v22,
                      (const unsigned __int64 *)(v3 + 160));
              v24 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                      v23,
                      (const char (*)[29])" parse set_game_time failed:");
              v25 = std::vector<std::string>::operator[](&exec->param, 0LL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, v25);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
              *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 448, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 448),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3796);
            v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 448),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v17,
                    (const char (*)[14])" exec @index:");
            v19 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v18,
                    (const unsigned __int64 *)(v3 + 160));
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v19,
              (const char (*)[19])" param size not 1.");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
            *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
          break;
        case TALK_EXEC_NOTIFY_GROUP_LUA:
          if ( std::vector<std::string>::size(&exec->param) > 1 )
          {
            *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 80, v7);
            *(_DWORD *)(v3 + 80) = 0;
            v29 = std::vector<std::string>::operator[](&exec->param, 0LL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v3 + 80), 1) )
            {
              *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 640, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 640),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3820);
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 640),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v31 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v30,
                      (const char (*)[14])" exec @index:");
              v32 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v31,
                      (const unsigned __int64 *)(v3 + 160));
              v33 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      v32,
                      (const char (*)[24])" parse quest_id failed:");
              v34 = std::vector<std::string>::operator[](&exec->param, 0LL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v33, v34);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
              *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
            else if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,data::QuestExcelConfig> const,unsigned int>(
                         &this->quest_excel_config_map,
                         (const unsigned int *)(v3 + 80)) )
            {
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 704) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 704, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 704),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3826);
              v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 704),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v36 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v35,
                      (const char (*)[14])" exec @index:");
              v37 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v36,
                      (const unsigned __int64 *)(v3 + 160));
              v38 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                      v37,
                      (const char (*)[28])" quest_id config not found:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v38,
                (const unsigned int *)(v3 + 80));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 704));
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
            else
            {
              v39 = ((v3 + 256) >> 3) + 2147450880;
              *(_WORD *)v39 = 0;
              *(_BYTE *)(v39 + 2) = 0;
              std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 256));
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v3 + 32);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v3 + 768),
                ",",
                (const std::allocator<char> *)(v3 + 32));
              v40 = std::vector<std::string>::operator[](&exec->param, 1uLL);
              v41 = (char *)(v3 + 768);
              v42 = common::tools::StringUtils::splitToList<unsigned int>(
                      v40,
                      (const std::string *)(v3 + 768),
                      (std::vector<unsigned int> *)(v3 + 256),
                      1) != 0;
              std::string::~string((void *)(v3 + 768));
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v3 + 32);
              *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
              if ( v42 )
              {
                *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 832) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 832, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 832),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkTalkExecConfig",
                  3833);
                v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v3 + 832),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v44 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v43,
                        (const char (*)[14])" exec @index:");
                v45 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                        v44,
                        (const unsigned __int64 *)(v3 + 160));
                v46 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                        v45,
                        (const char (*)[28])" parse group_id_vec failed:");
                v47 = std::vector<std::string>::operator[](&exec->param, 1uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v46, v47);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 832));
                *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = -117901064;
                err_code = -1;
              }
              else
              {
                lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
                __for_range = (std::vector<unsigned int> *)(v3 + 256);
                *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 192, v41);
                *(std::vector<unsigned int>::iterator *)(v3 + 192) = std::vector<unsigned int>::begin(__for_range);
                *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
                if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v3 + 224, v41);
                *(std::vector<unsigned int>::iterator *)(v3 + 224) = std::vector<unsigned int>::end(__for_range);
                while ( 1 )
                {
                  v48 = (char *)(v3 + 224);
                  if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 192),
                          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 224)) )
                    break;
                  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
                  v49 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 192));
                  v50 = (int *)v49;
                  if ( *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)v49 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(v49);
                  }
                  v51 = *v50;
                  v52 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
                  if ( v52 != 0 && v52 <= 3 )
                  {
                    LOBYTE(v48) = v52 != 0;
                    __asan_report_store4(v3 + 96, v48);
                  }
                  *(_DWORD *)(v3 + 96) = v51;
                  if ( !LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v3 + 96)) )
                  {
                    *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 896) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 896, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 896),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkTalkExecConfig",
                      3843);
                    v53 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v3 + 896),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v54 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                            v53,
                            (const char (*)[14])" exec @index:");
                    v55 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                            v54,
                            (const unsigned __int64 *)(v3 + 160));
                    v56 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                            v55,
                            (const char (*)[11])" group_id:");
                    v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                            v56,
                            (const unsigned int *)(v3 + 96));
                    v58 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                            v57,
                            (const char (*)[19])" config not found.");
                    v59 = std::vector<std::string>::operator[](&exec->param, 1uLL);
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v58, v59);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 896));
                    *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = -117901064;
                    err_code = -1;
                  }
                  __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v3 + 192));
                }
                *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
                *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
              }
              std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 256));
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 576, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 576),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3813);
            v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 576),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v27 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v26,
                    (const char (*)[14])" exec @index:");
            v28 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v27,
                    (const unsigned __int64 *)(v3 + 160));
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v28,
              (const char (*)[19])" param size not 2.");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
            *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
          v60 = ((v3 + 256) >> 3) + 2147450880;
          *(_WORD *)v60 = -1800;
          *(_BYTE *)(v60 + 2) = -8;
          break;
        case TALK_EXEC_SET_DAILY_TASK_VAR:
          if ( QuestExcelConfigMgr::checkExecSetDailyTaskVar(this, txt_config_mgr, &exec->param) )
          {
            *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 960) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 960, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 960),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3854);
            v61 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 960),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v62 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v61,
                    (const char (*)[14])" exec @index:");
            v63 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v62,
                    (const unsigned __int64 *)(v3 + 160));
            v64 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    v63,
                    (const char (*)[22])" parse params failed:");
            common::milog::MiLogStream::operator<<<std::string>(v64, &exec->param);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 960));
            *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          break;
        case TALK_EXEC_INC_DAILY_TASK_VAR:
        case TALK_EXEC_DEC_DAILY_TASK_VAR:
          if ( QuestExcelConfigMgr::checkExecIncOrDecDailyTaskVar(this, txt_config_mgr, &exec->param) )
          {
            *(_DWORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1024) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1055) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1055) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1024, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1024),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3864);
            v65 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1024),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v66 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v65,
                    (const char (*)[14])" exec @index:");
            v67 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v66,
                    (const unsigned __int64 *)(v3 + 160));
            v68 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    v67,
                    (const char (*)[22])" parse params failed:");
            common::milog::MiLogStream::operator<<<std::string>(v68, &exec->param);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1024));
            *(_DWORD *)(((v3 + 1024) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          break;
        case TALK_EXEC_SET_QUEST_VAR:
        case TALK_EXEC_INC_QUEST_VAR:
        case TALK_EXEC_DEC_QUEST_VAR:
          p_param = txt_config_mgr;
          if ( QuestExcelConfigMgr::checkExecModifyQuestVar(this, txt_config_mgr, &exec->param, 0, 0) )
          {
            *(_DWORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1088) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1119) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1119) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1088, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1088),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3875);
            v70 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1088),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v71 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v70,
                    (const char (*)[14])" exec @index:");
            v72 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v71,
                    (const unsigned __int64 *)(v3 + 160));
            v73 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    v72,
                    (const char (*)[22])" check params failed:");
            p_param = (const TxtConfigMgr *)&exec->param;
            common::milog::MiLogStream::operator<<<std::string>(v73, &exec->param);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1088));
            *(_DWORD *)(((v3 + 1088) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          if ( std::vector<std::string>::size(&exec->param) > 2 )
          {
            *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 112, p_param);
            *(_DWORD *)(v3 + 112) = 0;
            v77 = std::vector<std::string>::operator[](&exec->param, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v77, (unsigned int *)(v3 + 112), 1) )
            {
              *(_DWORD *)(((v3 + 1216) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1216) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 1247) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1216, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1216),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3887);
              v78 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1216),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v79 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v78,
                      (const char (*)[14])" exec @index:");
              v80 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v79,
                      (const unsigned __int64 *)(v3 + 160));
              v81 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                      v80,
                      (const char (*)[31])" parse parent_quest_id failed:");
              v82 = std::vector<std::string>::operator[](&exec->param, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v81, v82);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1216));
              *(_DWORD *)(((v3 + 1216) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
            else if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,data::MainQuestExcelConfig> const,unsigned int>(
                         &this->main_quest_excel_config_map,
                         (const unsigned int *)(v3 + 112)) )
            {
              *(_DWORD *)(((v3 + 1280) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1280) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1311) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1311) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1280, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1280),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3893);
              v83 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1280),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v84 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v83,
                      (const char (*)[14])" exec @index:");
              v85 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v84,
                      (const unsigned __int64 *)(v3 + 160));
              v86 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                      v85,
                      (const char (*)[35])" parent_quest_id config not found:");
              v87 = std::vector<std::string>::operator[](&exec->param, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v86, v87);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1280));
              *(_DWORD *)(((v3 + 1280) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 1152) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1152) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1183) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1183) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1152, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1152),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3880);
            v74 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1152),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v75 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v74,
                    (const char (*)[14])" exec @index:");
            v76 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v75,
                    (const unsigned __int64 *)(v3 + 160));
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v76,
              (const char (*)[19])" param size not 3.");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1152));
            *(_DWORD *)(((v3 + 1152) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
          break;
        case TALK_EXEC_SET_QUEST_GLOBAL_VAR:
        case TALK_EXEC_INC_QUEST_GLOBAL_VAR:
        case TALK_EXEC_DEC_QUEST_GLOBAL_VAR:
          if ( QuestExcelConfigMgr::checkExecModifyQuestGlobalVar(this, txt_config_mgr, &exec->param) )
          {
            *(_DWORD *)(((v3 + 1344) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1344) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1375) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1375) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1344, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1344),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3905);
            v88 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1344),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v89 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v88,
                    (const char (*)[14])" exec @index:");
            v90 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v89,
                    (const unsigned __int64 *)(v3 + 160));
            v91 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    v90,
                    (const char (*)[22])" check params failed:");
            common::milog::MiLogStream::operator<<<std::string>(v91, &exec->param);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1344));
            *(_DWORD *)(((v3 + 1344) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          break;
        case TALK_EXEC_TRANS_SCENE_DUMMY_POINT:
          if ( std::vector<std::string>::size(&exec->param) > 1 )
          {
            *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 128, v7);
            *(_DWORD *)(v3 + 128) = 0;
            v95 = std::vector<std::string>::operator[](&exec->param, 0LL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v95, (unsigned int *)(v3 + 128), 1) )
            {
              *(_DWORD *)(((v3 + 1472) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1472) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1503) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 1503) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1472, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1472),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3921);
              v96 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 1472),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v97 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v96,
                      (const char (*)[14])" exec @index:");
              v98 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v97,
                      (const unsigned __int64 *)(v3 + 160));
              v99 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      v98,
                      (const char (*)[24])" parse scene_id failed:");
              v100 = std::vector<std::string>::operator[](&exec->param, 0LL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v99, v100);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1472));
              *(_DWORD *)(((v3 + 1472) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
            else
            {
              *(_DWORD *)(((v3 + 1536) >> 3) + 0x7FFF8000) = 0;
              v101 = std::vector<std::string>::operator[](&exec->param, 1uLL);
              std::string::basic_string(v3 + 1536, v101);
              p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
              if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v3 + 128);
              scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(
                                          p_lua_config_mgr,
                                          *(unsigned int *)(v3 + 128));
              if ( scene_script_config_ptr )
              {
                *(_DWORD *)(((v3 + 1664) >> 3) + 0x7FFF8000) = 0;
                std::string::basic_string(v3 + 1664, v3 + 1536);
                dummy_point_config_ptr = SceneScriptConfig::findDummyPointScriptConfig(
                                           scene_script_config_ptr,
                                           (std::string *)(v3 + 1664));
                std::string::~string((void *)(v3 + 1664));
                *(_DWORD *)(((v3 + 1664) >> 3) + 0x7FFF8000) = -117901064;
                if ( dummy_point_config_ptr )
                {
                  if ( !SceneScriptConfig::isNewDummyPointMatch(
                          scene_script_config_ptr,
                          (const std::string *)(v3 + 1536),
                          dummy_point_config_ptr) )
                  {
                    *(_DWORD *)(((v3 + 1792) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v3 + 1792) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v3 + 1823) >> 3) + 0x7FFF8000) != 0
                      && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 1823) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v3 + 1792, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 1792),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkTalkExecConfig",
                      3943);
                    v113 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v3 + 1792),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v114 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                             v113,
                             (const char (*)[37])"dummy_point not match, dummy_point: ");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v114,
                      (const std::string *)(v3 + 1536));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1792));
                    *(_DWORD *)(((v3 + 1792) >> 3) + 0x7FFF8000) = -117901064;
                    err_code = -1;
                  }
                }
                else
                {
                  *(_DWORD *)(((v3 + 1728) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v3 + 1728) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v3 + 1759) >> 3) + 0x7FFF8000) != 0
                    && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 1759) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v3 + 1728, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 1728),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkTalkExecConfig",
                    3936);
                  v107 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v3 + 1728),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v108 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                           v107,
                           (const char (*)[14])" exec @index:");
                  v109 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                           v108,
                           (const unsigned __int64 *)(v3 + 160));
                  v110 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                           v109,
                           (const char (*)[62])" config scene_id findDummyPointScriptConfig failed, scene_id:");
                  v111 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                           v110,
                           (const unsigned int *)(v3 + 128));
                  v112 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                           v111,
                           (const char (*)[15])", dummy_point:");
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v112,
                    (const std::string *)(v3 + 1536));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1728));
                  *(_DWORD *)(((v3 + 1728) >> 3) + 0x7FFF8000) = -117901064;
                  err_code = -1;
                }
              }
              else
              {
                *(_DWORD *)(((v3 + 1600) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1600) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 1631) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1631) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1600, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1600),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkTalkExecConfig",
                  3929);
                v103 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v3 + 1600),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v104 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                         v103,
                         (const char (*)[14])" exec @index:");
                v105 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                         v104,
                         (const unsigned __int64 *)(v3 + 160));
                v106 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                         v105,
                         (const char (*)[57])" config scene_id findSceneScriptConfig failed, scene_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v106,
                  (const unsigned int *)(v3 + 128));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1600));
                *(_DWORD *)(((v3 + 1600) >> 3) + 0x7FFF8000) = -117901064;
                err_code = -1;
              }
              std::string::~string((void *)(v3 + 1536));
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 1408) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1408) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1439) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1439) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1408, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1408),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3914);
            v92 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1408),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v93 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v92,
                    (const char (*)[14])" exec @index:");
            v94 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v93,
                    (const unsigned __int64 *)(v3 + 160));
            common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v94,
              (const char (*)[24])" param size less than 2");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1408));
            *(_DWORD *)(((v3 + 1408) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
          *(_DWORD *)(((v3 + 1536) >> 3) + 0x7FFF8000) = -117901064;
          break;
        case TALK_EXEC_SAVE_TALK_ID:
          if ( std::vector<std::string>::size(&exec->param) )
          {
            *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 144, v7);
            *(_DWORD *)(v3 + 144) = 0;
            v118 = std::vector<std::string>::operator[](&exec->param, 0LL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v118, (unsigned int *)(v3 + 144), 1) )
            {
              *(_DWORD *)(((v3 + 1920) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 1920) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1951) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 1951) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 1920, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 1920),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkTalkExecConfig",
                3960);
              v119 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v3 + 1920),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v120 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                       v119,
                       (const char (*)[14])" exec @index:");
              v121 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                       v120,
                       (const unsigned __int64 *)(v3 + 160));
              v122 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                       v121,
                       (const char (*)[23])" parse talk_id failed:");
              v123 = std::vector<std::string>::operator[](&exec->param, 0LL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v122, v123);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1920));
              *(_DWORD *)(((v3 + 1920) >> 3) + 0x7FFF8000) = -117901064;
              err_code = -1;
            }
            else
            {
              p_quest_config_mgr = &txt_config_mgr->quest_config_mgr;
              v125 = *(unsigned __int8 *)(((v3 + 144) >> 3) + 0x7FFF8000);
              if ( (_BYTE)v125 != 0 && (char)v125 <= 3 )
                __asan_report_load4(v3 + 144);
              if ( !data::QuestExcelConfigMgrBase::findTalkExcelConfig(p_quest_config_mgr, *(unsigned int *)(v3 + 144)) )
              {
                *(_DWORD *)(((v3 + 1984) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v3 + 1984) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v3 + 2015) >> 3) + 0x7FFF8000) != 0
                  && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 2015) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v3 + 1984, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 1984),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkTalkExecConfig",
                  3967);
                v126 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v3 + 1984),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v127 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                         v126,
                         (const char (*)[14])" exec @index:");
                v128 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                         v127,
                         (const unsigned __int64 *)(v3 + 160));
                v129 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                         v128,
                         (const char (*)[37])" findTalkExcelConfig fails, talk_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v129,
                  (const unsigned int *)(v3 + 144));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1984));
                *(_DWORD *)(((v3 + 1984) >> 3) + 0x7FFF8000) = -117901064;
                err_code = -1;
              }
            }
          }
          else
          {
            *(_DWORD *)(((v3 + 1856) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1856) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1887) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 1887) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1856, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1856),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkTalkExecConfig",
              3953);
            v115 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v3 + 1856),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v116 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                     v115,
                     (const char (*)[14])" exec @index:");
            v117 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                     v116,
                     (const unsigned __int64 *)(v3 + 160));
            common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v117,
              (const char (*)[24])" param size less than 1");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1856));
            *(_DWORD *)(((v3 + 1856) >> 3) + 0x7FFF8000) = -117901064;
            err_code = -1;
          }
          *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
          break;
        default:
          err_code = -1;
          *(_DWORD *)(((v3 + 2048) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 2048) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 2079) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 2079) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 2048, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 2048),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkTalkExecConfig",
            3976);
          v130 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   (common::milog::MiLogStream *const)(v3 + 2048),
                   (const char (*)[16])"[CONFIG_ERROR] ");
          v131 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                   v130,
                   (const char (*)[23])" unsuppored exec type:");
          v132 = common::milog::MiLogStream::operator<<<data::TalkExecType,(data::TalkExecType*)0>(v131, &exec->type);
          v133 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v132, (const char (*)[9])" @index:");
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v133,
            (const unsigned __int64 *)(v3 + 160));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 2048));
          *(_DWORD *)(((v3 + 2048) >> 3) + 0x7FFF8000) = -117901064;
          break;
      }
    }
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v3 + 160);
  }
  if ( v143 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8100) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 264) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_6(v3, 2112LL, v143);
  }
  return err_code;
};

// Line 3986: range 000000000EF2D5F2-000000000EF2DE61
int32_t __cdecl QuestExcelConfigMgr::checkTalkExcelConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const TxtConfigMgr *v5; // rsi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  char *v9; // rsi
  unsigned int *v10; // rax
  int *v11; // rdx
  int v12; // ecx
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  int32_t result; // eax
  int32_t err_code; // [rsp+14h] [rbp-1ECh]
  data::TalkExcelConfigMap *__for_range; // [rsp+20h] [rbp-1E0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false>::reference v22; // [rsp+28h] [rbp-1D8h]
  std::tuple_element<0,std::pair<unsigned int const,data::TalkExcelConfig> >::type *talk_id; // [rsp+30h] [rbp-1D0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::TalkExcelConfig> >::type *talk_config; // [rsp+38h] [rbp-1C8h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+40h] [rbp-1C0h]
  const std::vector<data::TalkCond> *__for_range_1; // [rsp+48h] [rbp-1B8h]
  char v27[416]; // [rsp+60h] [rbp-1A0h] BYREF

  v2 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 4 11 npc_id:3997 64 8 16 __for_begin:3989 96 8 14 __for_end:3989 128 8 16 __for_begin:3997 "
                        "160 8 14 __for_end:3997 192 8 16 __for_begin:4007 224 8 14 __for_end:4007 256 32 9 <unknown> 320 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::checkTalkExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -202116109;
  err_code = 0;
  __for_range = &this->talk_excel_config_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::TalkExcelConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::TalkExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::TalkExcelConfig>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::TalkExcelConfig>::end(__for_range);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::TalkExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::TalkExcelConfig>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::TalkExcelConfig>,false> *)(v2 + 96)) )
  {
    v22 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false> *const)(v2 + 64));
    talk_id = std::get<0ul,unsigned int const,data::TalkExcelConfig>(v22);
    talk_config = (std::tuple_element<1,const std::pair<unsigned int const,data::TalkExcelConfig> >::type *)std::get<1ul,unsigned int const,data::TalkExcelConfig>(v22);
    v5 = txt_config_mgr;
    if ( QuestExcelConfigMgr::checkTalkExecConfig(this, txt_config_mgr, &talk_config->finish_exec) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkTalkExcelConfig",
        3993);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v7 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v6, (const char (*)[10])" talk_id:");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, talk_id);
      v5 = (const TxtConfigMgr *)" finish exec invalid.";
      common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v8, (const char (*)[22])" finish exec invalid.");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
      err_code = -1;
    }
    __for_range_0 = &talk_config->npc_id;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 128) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v5);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 160) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      v9 = (char *)(v2 + 160);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 128),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 160)) )
        break;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
      v10 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
      v11 = (int *)v10;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      v12 = *v11;
      v13 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v13 != 0 && v13 <= 3 )
      {
        LOBYTE(v9) = v13 != 0;
        __asan_report_store4(v2 + 48, v9);
      }
      *(_DWORD *)(v2 + 48) = v12;
      if ( !data::NpcExcelConfigMgrBase::findNpcExcelConfig(&txt_config_mgr->npc_config_mgr, *(unsigned int *)(v2 + 48)) )
      {
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkTalkExcelConfig",
          4002);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 320),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                v14,
                (const char (*)[34])"findNpcExcelConfig fails, npc_id:");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v2 + 48));
        v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])", talk_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, talk_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
        err_code = -1;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 128));
    }
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &talk_config->begin_cond;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v9);
    *(std::vector<data::TalkCond>::const_iterator *)(v2 + 192) = std::vector<data::TalkCond>::begin(__for_range_1);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v9);
    *(std::vector<data::TalkCond>::const_iterator *)(v2 + 224) = std::vector<data::TalkCond>::end(__for_range_1);
    while ( __gnu_cxx::operator!=<data::TalkCond const*,std::vector<data::TalkCond>>(
              (const __gnu_cxx::__normal_iterator<const data::TalkCond*,std::vector<data::TalkCond> > *)(v2 + 192),
              (const __gnu_cxx::__normal_iterator<const data::TalkCond*,std::vector<data::TalkCond> > *)(v2 + 224)) )
    {
      __gnu_cxx::__normal_iterator<data::TalkCond const*,std::vector<data::TalkCond>>::operator*((const __gnu_cxx::__normal_iterator<const data::TalkCond*,std::vector<data::TalkCond> > *const)(v2 + 192));
      __gnu_cxx::__normal_iterator<data::TalkCond const*,std::vector<data::TalkCond>>::operator++((__gnu_cxx::__normal_iterator<const data::TalkCond*,std::vector<data::TalkCond> > *const)(v2 + 192));
    }
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::TalkExcelConfig>,false,false> *const)(v2 + 64));
  }
  result = err_code;
  if ( v27 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4023: range 000000000EF2DE62-000000000EF2E268
__int64 __fastcall QuestExcelConfigMgr::isTalkInParentSeries(
        const QuestExcelConfigMgr *const this,
        const data::QuestContent *quest_content,
        uint32_t parent_talk_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_talk_series_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  std::vector<int>::const_reference v9; // rax
  unsigned int *v10; // rdx
  __int64 v11; // rsi
  bool v12; // al
  int v13; // edx
  __int64 result; // rax
  unsigned __int8 v15; // [rsp+Bh] [rbp-115h]
  uint32_t idx; // [rsp+24h] [rbp-FCh]
  std::set<unsigned int> *series_set; // [rsp+28h] [rbp-F8h]
  char v20[240]; // [rsp+30h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 12 talk_id:4033 48 4 19 parent_talk_id:4022 64 8 9 iter:4024 96 8 9 <unknown> 128 8 9 <un"
                        "known> 160 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::isTalkInParentSeries;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -202116352;
  *(_DWORD *)(v3 + 48) = parent_talk_id;
  p_talk_series_map = &this->talk_series_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, quest_content);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_talk_series_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
  v7 = &this->talk_series_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    v15 = 0;
  }
  else
  {
    series_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64))->second;
    for ( idx = 1; idx < std::vector<int>::size(&quest_content->param); ++idx )
    {
      *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
      v9 = std::vector<int>::operator[](&quest_content->param, idx);
      v10 = (unsigned int *)v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      v11 = *v10;
      if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 32, v11);
      *(_DWORD *)(v3 + 32) = v11;
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 160, v11);
      *(std::set<unsigned int>::iterator *)(v3 + 160) = std::set<unsigned int>::end(series_set);
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 128, v11);
      *(std::set<unsigned int>::const_iterator *)(v3 + 128) = std::set<unsigned int>::find(
                                                                series_set,
                                                                (const std::set<unsigned int>::key_type *)(v3 + 32));
      v12 = std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 128),
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 160));
      *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      if ( v12 )
      {
        v15 = 1;
        v13 = 0;
      }
      else
      {
        v13 = 1;
      }
      *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
      if ( v13 != 1 )
        goto LABEL_26;
    }
    v15 = 0;
  }
LABEL_26:
  result = v15;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4044: range 000000000EF2E26A-000000000EF2E53F
_BOOL8 __fastcall QuestExcelConfigMgr::isChildQuestParentEntrance(
        const QuestExcelConfigMgr *const this,
        __int64 parent_quest_id,
        uint32_t child_quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_entrance_child_quest_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  _BOOL8 result; // rax
  std::set<unsigned int> *quest_set; // [rsp+18h] [rbp-E8h]
  char v12[224]; // [rsp+20h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 20 parent_quest_id:4043 48 4 19 child_quest_id:4043 64 8 16 parent_iter:4045 96 8 9 <unkn"
                        "own> 128 8 15 child_iter:4052 160 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::isChildQuestParentEntrance;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -202116352;
  *(_DWORD *)(v3 + 32) = parent_quest_id;
  *(_DWORD *)(v3 + 48) = child_quest_id;
  p_entrance_child_quest_map = &this->entrance_child_quest_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, parent_quest_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_entrance_child_quest_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->entrance_child_quest_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0LL;
  }
  else
  {
    quest_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64))->second;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, v3 + 96);
    *(std::set<unsigned int>::const_iterator *)(v3 + 128) = std::set<unsigned int>::find(
                                                              quest_set,
                                                              (const std::set<unsigned int>::key_type *)(v3 + 48));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v3 + 48);
    *(std::set<unsigned int>::iterator *)(v3 + 160) = std::set<unsigned int>::end(quest_set);
    result = !std::operator==(
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 128),
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 160));
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4062: range 000000000EF2E558-000000000EF2E95D
bool __fastcall QuestExcelConfigMgr::isSameParentQuestSeries(
        const QuestExcelConfigMgr *const this,
        uint32_t lhs_parent_quest_id,
        uint32_t rhs_parent_quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool result; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  uint32_t series; // ecx
  const data::MainQuestExcelConfig *lhs_parent_quest_config_ptr; // [rsp+10h] [rbp-D0h]
  const data::MainQuestExcelConfig *rhs_parent_quest_config_ptr; // [rsp+18h] [rbp-C8h]
  char v17[192]; // [rsp+20h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 1 27 is_random_parent_quest:4063 64 4 24 lhs_parent_quest_id:4061 80 4 24 rhs_parent_quest_"
                        "id:4061 96 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::isSameParentQuestSeries;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 64) = lhs_parent_quest_id;
  *(_DWORD *)(v3 + 80) = rhs_parent_quest_id;
  if ( QuestExcelConfigMgr::isSameParentQuestSeries(unsigned int,unsigned int)const::{lambda(unsigned int)#1}::operator()(
         (const QuestExcelConfigMgr::isSameParentQuestSeries::<lambda(uint32_t)> *const)(v3 + 48),
         *(_DWORD *)(v3 + 64))
    || QuestExcelConfigMgr::isSameParentQuestSeries(unsigned int,unsigned int)const::{lambda(unsigned int)#1}::operator()(
         (const QuestExcelConfigMgr::isSameParentQuestSeries::<lambda(uint32_t)> *const)(v3 + 48),
         *(_DWORD *)(v3 + 80)) )
  {
    result = 0;
  }
  else
  {
    lhs_parent_quest_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                                    this,
                                    *(unsigned int *)(v3 + 64));
    rhs_parent_quest_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                                    this,
                                    *(unsigned int *)(v3 + 80));
    if ( lhs_parent_quest_config_ptr && rhs_parent_quest_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&lhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&lhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&lhs_parent_quest_config_ptr->series);
      }
      if ( !lhs_parent_quest_config_ptr->series )
        goto LABEL_21;
      if ( *(_BYTE *)(((unsigned __int64)&rhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&rhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&rhs_parent_quest_config_ptr->series);
      }
      if ( rhs_parent_quest_config_ptr->series )
      {
        if ( *(_BYTE *)(((unsigned __int64)&lhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&lhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&lhs_parent_quest_config_ptr->series);
        }
        series = lhs_parent_quest_config_ptr->series;
        if ( *(_BYTE *)(((unsigned __int64)&rhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&rhs_parent_quest_config_ptr->series >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&rhs_parent_quest_config_ptr->series);
        }
        result = series == rhs_parent_quest_config_ptr->series;
      }
      else
      {
LABEL_21:
        result = 0;
      }
    }
    else
    {
      if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "isSameParentQuestSeries",
        4076);
      v8 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
             (common::milog::MiLogStream *const)(v3 + 96),
             (const char (*)[42])"findPlayerParentQuestExcelConfig failed. ");
      v9 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
             v8,
             (const char (*)[20])"lhs_parent_quest_id");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 64));
      v11 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v10, (const char (*)[2])" ");
      v12 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v11,
              (const char (*)[20])"rhs_parent_quest_id");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
      result = 0;
    }
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 4063: range 000000000EF2E540-000000000EF2E556
bool __cdecl QuestExcelConfigMgr::isSameParentQuestSeries(unsigned int,unsigned int)const::{lambda(unsigned int)#1}::operator()(
        const QuestExcelConfigMgr::isSameParentQuestSeries::<lambda(uint32_t)> *const __closure,
        uint32_t parent_quest_id)
{
  return parent_quest_id > 0x1869F;
};

// Line 4089: range 000000000EF2E95E-000000000EF2EBE2
std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findParentQuestEntrance(
        std::set<unsigned int> *retstr,
        const QuestExcelConfigMgr *const this,
        uint32_t parent_quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_entrance_child_quest_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v9; // rax
  char v12[224]; // [rsp+20h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 20 parent_quest_id:4088 48 8 16 parent_iter:4091 80 8 9 <unknown> 112 48 10 empty:4090";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::findParentQuestEntrance;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = parent_quest_id;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 112));
  p_entrance_child_quest_map = &this->entrance_child_quest_map;
  if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 48, this);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 48) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_entrance_child_quest_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->entrance_child_quest_map;
  if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 80, v3 + 32);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 80) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 48),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    std::set<unsigned int>::set(retstr, (std::set<unsigned int> *)(v3 + 112));
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 48));
    std::set<unsigned int>::set(retstr, &v9->second);
  }
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 112));
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 4103: range 000000000EF2EBE4-000000000EF2EDDF
__int64 __fastcall QuestExcelConfigMgr::getQuestStartTime(const QuestExcelConfigMgr *const this, __int64 quest_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,unsigned int> *p_quest_need_start_time_map; // rdx
  std::unordered_map<unsigned int,unsigned int> *v6; // rdx
  bool v7; // al
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v9; // rdx
  unsigned int *p_second; // rax
  char v11[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 quest_id:4102 64 8 9 iter:4104 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::getQuestStartTime;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = quest_id;
  p_quest_need_start_time_map = &this->quest_need_start_time_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, quest_id);
  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                  p_quest_need_start_time_map,
                                                                                  (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  v6 = &this->quest_need_start_time_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,unsigned int>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    result = 0LL;
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 64));
    p_second = &v9->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v9->second;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4114: range 000000000EF2EDE0-000000000EF2EEEC
data::ItemLimitType __cdecl QuestExcelConfigMgr::getParentQuestItemLimitType(
        const TxtConfigMgr *txt_config_mgr,
        const data::MainQuestExcelConfig *parent_quest_config)
{
  __int64 v2; // rsi
  __int64 v3; // rdx
  NewActivityExcelConfigMgr *p_new_activity_config_mgr; // rcx

  if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parent_quest_config - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_type >> 3)
                                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&parent_quest_config->activity_type);
  }
  if ( parent_quest_config->activity_type )
  {
    p_new_activity_config_mgr = &txt_config_mgr->new_activity_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parent_quest_config - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_type >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&parent_quest_config->activity_type);
    }
    return NewActivityExcelConfigMgr::getRewardItemLimitType(
             p_new_activity_config_mgr,
             parent_quest_config->activity_type);
  }
  else
  {
    v2 = ((_BYTE)parent_quest_config + 68) & 7;
    v3 = (*(_BYTE *)(((unsigned __int64)&parent_quest_config->repeatable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)&parent_quest_config->repeatable >> 3) + 0x7FFF8000));
    if ( (_BYTE)v3 )
      __asan_report_load1(&parent_quest_config->repeatable, v2, v3);
    if ( parent_quest_config->repeatable )
      return 38;
    else
      return 3;
  }
};

// Line 4123: range 000000000EF2EEEE-000000000EF3152A
int32_t __cdecl QuestExcelConfigMgr::checkMainQuestExcelConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char *p_chapter_id; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int v11; // eax
  unsigned int *v12; // rax
  int *v13; // rdx
  int v14; // ecx
  char v15; // al
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  int v22; // edx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rdx
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  char *v39; // rsi
  unsigned int *v40; // rax
  int *v41; // rdx
  int v42; // ecx
  char v43; // al
  __int64 v44; // rsi
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  int v47; // eax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  char *v50; // rsi
  unsigned int *v51; // rax
  int *v52; // rdx
  int v53; // ecx
  char v54; // al
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  int v57; // eax
  const std::set<unsigned int> *v58; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  char *v62; // rsi
  std::_Rb_tree_const_iterator<unsigned int>::reference v63; // rax
  unsigned int *v64; // rdx
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  int v67; // edx
  const std::vector<data::QuestExec> *p_fail_exec; // rdi
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  const std::vector<data::QuestExec> *p_finish_exec; // rdi
  int v72; // eax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  const std::vector<data::QuestExec> *p_begin_exec; // rdi
  int v76; // eax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  __int64 v80; // rsi
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  int v85; // eax
  bool is_have_remove_trial; // [rsp+1Fh] [rbp-681h]
  data::ItemLimitType item_limit_type; // [rsp+20h] [rbp-680h]
  data::MainQuestExcelConfigMap *__for_range; // [rsp+28h] [rbp-678h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::reference v92; // [rsp+30h] [rbp-670h]
  std::tuple_element<0,std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_id; // [rsp+38h] [rbp-668h]
  std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_config; // [rsp+40h] [rbp-660h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+48h] [rbp-658h]
  std::unordered_set<unsigned int> *__for_range_1; // [rsp+50h] [rbp-650h]
  const data::MainQuestExcelConfig *main_quest_excel_config_ptr; // [rsp+58h] [rbp-648h]
  const std::vector<unsigned int> *__for_range_2; // [rsp+60h] [rbp-640h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+68h] [rbp-638h]
  const std::unordered_map<unsigned int,std::set<unsigned int>>::mapped_type *__for_range_3; // [rsp+70h] [rbp-630h]
  const ParentQuestScriptConfig *parent_script_config; // [rsp+78h] [rbp-628h]
  const std::vector<data::QuestExec> *__for_range_4; // [rsp+80h] [rbp-620h]
  const data::QuestExec *exec; // [rsp+88h] [rbp-618h]
  char v104[1552]; // [rsp+90h] [rbp-610h] BYREF

  v3 = (unsigned __int64)v104;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1504LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "32 32 1 25 is_have_trial_avatar:4181 48 4 14 reward_id:4132 64 4 20 parent_quest_id:4166 80 4 13"
                        " quest_id:4182 96 8 16 __for_begin:4124 128 8 14 __for_end:4124 160 8 16 __for_begin:4132 192 8 "
                        "14 __for_end:4132 224 8 16 __for_begin:4166 256 8 14 __for_end:4166 288 8 16 __for_begin:4182 32"
                        "0 8 14 __for_end:4182 352 8 16 __for_begin:4195 384 8 14 __for_end:4195 416 8 16 __for_begin:423"
                        "4 448 8 14 __for_end:4234 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unk"
                        "nown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unkn"
                        "own> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <"
                        "unknown> 1376 32 9 <unknown> 1440 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkMainQuestExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862731] = -218959360;
  v5[536862732] = -218959360;
  v5[536862733] = -218959360;
  v5[536862734] = -218959360;
  v5[536862736] = -218959118;
  v5[536862738] = -218959118;
  v5[536862740] = -218959118;
  v5[536862742] = -218959118;
  v5[536862744] = -218959118;
  v5[536862746] = -218959118;
  v5[536862748] = -218959118;
  v5[536862750] = -218959118;
  v5[536862752] = -218959118;
  v5[536862754] = -218959118;
  v5[536862756] = -218959118;
  v5[536862758] = -218959118;
  v5[536862760] = -218959118;
  v5[536862762] = -218959118;
  v5[536862764] = -218959118;
  v5[536862766] = -202116109;
  __for_range = &this->main_quest_excel_config_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v3 + 128) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(__for_range);
  while ( 1 )
  {
    p_chapter_id = (const char *)(v3 + 128);
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v3 + 96),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v3 + 128)) )
    {
      v11 = 1;
      goto LABEL_70;
    }
    v92 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *const)(v3 + 96));
    parent_quest_id = std::get<0ul,unsigned int const,data::MainQuestExcelConfig>(v92);
    parent_quest_config = (std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *)std::get<1ul,unsigned int const,data::MainQuestExcelConfig>(v92);
    if ( *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)parent_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(parent_quest_id);
    }
    if ( *parent_quest_id > 0x1869F )
    {
      *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkMainQuestExcelConfig",
        4128);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 480),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(v7, (const char (*)[43])byte_1A464C80);
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, parent_quest_id);
      v10 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v9, (const char (*)[28])byte_1A458240);
      p_chapter_id = (const char *)&QuestExcelConfigMgr::MIN_RANDOM_PARENT_QUEST_ID;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v10,
        &QuestExcelConfigMgr::MIN_RANDOM_PARENT_QUEST_ID);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
      *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v11 = 0;
      goto LABEL_70;
    }
    item_limit_type = QuestExcelConfigMgr::getParentQuestItemLimitType(txt_config_mgr, parent_quest_config);
    __for_range_0 = &parent_quest_config->reward_id_list;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, parent_quest_config);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 160) = std::vector<unsigned int>::begin(__for_range_0);
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 192, parent_quest_config);
    *(std::vector<unsigned int>::const_iterator *)(v3 + 192) = std::vector<unsigned int>::end(__for_range_0);
    while ( 1 )
    {
      p_chapter_id = (const char *)(v3 + 192);
      if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 160),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 192)) )
      {
        v22 = 1;
        goto LABEL_36;
      }
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      v12 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 160));
      v13 = (int *)v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      v14 = *v13;
      v15 = *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000);
      if ( v15 != 0 && v15 <= 3 )
      {
        LOBYTE(p_chapter_id) = v15 != 0;
        __asan_report_store4(v3 + 48, p_chapter_id);
      }
      *(_DWORD *)(v3 + 48) = v14;
      if ( *(_DWORD *)(v3 + 48)
        && (unsigned __int8)TxtConfigMgr::isValidRewardIdAndMatchItemLimitType(
                              txt_config_mgr,
                              *(_DWORD *)(v3 + 48),
                              item_limit_type) != 1 )
      {
        break;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 160));
    }
    *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 32 + 95) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 544, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 544),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkMainQuestExcelConfig",
      4136);
    v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 544),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v18 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v17, (const char (*)[22])byte_1A464CE0);
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, parent_quest_id);
    v20 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v19, (const char (*)[33])byte_1A464D20);
    v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 48));
    p_chapter_id = byte_1A45E500;
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v21, (const char (*)[7])byte_1A45E500);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 544));
    *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = -117901064;
    v2 = -1;
    v22 = 0;
LABEL_36:
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v22 != 1 )
    {
      v11 = 0;
      goto LABEL_70;
    }
    if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->chapter_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parent_quest_config->chapter_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&parent_quest_config->chapter_id);
    }
    if ( parent_quest_config->chapter_id
      && !data::QuestExcelConfigMgrBase::findChapterExcelConfig(this, parent_quest_config->chapter_id) )
    {
      *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 608, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 608),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkMainQuestExcelConfig",
        4143);
      v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 608),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v25 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v24, (const char (*)[22])byte_1A464CE0);
      v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, parent_quest_id);
      v27 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v26, (const char (*)[30])byte_1A464D80);
      p_chapter_id = (const char *)&parent_quest_config->chapter_id;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &parent_quest_config->chapter_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 608));
      *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v11 = 0;
      goto LABEL_70;
    }
    if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->active_mode >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parent_quest_config->active_mode >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&parent_quest_config->active_mode);
    }
    if ( parent_quest_config->active_mode >= (unsigned int)PLAY_MODE_MULTIPLE )
    {
      *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 672) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 672, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 672),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkMainQuestExcelConfig",
        4149);
      v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 672),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v29 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v28, (const char (*)[22])byte_1A464CE0);
      v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, parent_quest_id);
      p_chapter_id = byte_1A464DC0;
      common::milog::MiLogStream::operator<<<char [100],(char *[100])0>(v30, (const char (*)[100])byte_1A464DC0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 672));
      *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v11 = 0;
      goto LABEL_70;
    }
    if ( QuestExcelConfigMgr::checkMainQuestExecGuardian(this, txt_config_mgr, parent_quest_config) )
    {
      *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 736, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 736),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkMainQuestExcelConfig",
        4155);
      v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 736),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v32 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v31, (const char (*)[22])byte_1A464CE0);
      v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, parent_quest_id);
      p_chapter_id = byte_1A464E60;
      common::milog::MiLogStream::operator<<<char [86],(char *[86])0>(v33, (const char (*)[86])byte_1A464E60);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 736));
      *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v11 = 0;
      goto LABEL_70;
    }
    if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->res_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parent_quest_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config->res_id >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(&parent_quest_config->res_id);
    }
    if ( parent_quest_config->res_id
      && !data::QuestExcelConfigMgrBase::findQuestResCollectionExcelConfig(this, parent_quest_config->res_id) )
    {
      break;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *const)(v3 + 96));
  }
  *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 800) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 32 + 95) & 7) >= *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 800, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 800),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "checkMainQuestExcelConfig",
    4161);
  v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 800),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v36 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v35, (const char (*)[22])byte_1A464CE0);
  v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, parent_quest_id);
  v38 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v37, (const char (*)[30])byte_1A464EE0);
  p_chapter_id = (const char *)&parent_quest_config->res_id;
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, &parent_quest_config->res_id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 800));
  *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -117901064;
  v2 = -1;
  v11 = 0;
LABEL_70:
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v11 != 1 )
    goto LABEL_189;
  __for_range_1 = &this->coop_parent_quest_set;
  *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 224, p_chapter_id);
  *(std::unordered_set<unsigned int>::const_iterator *)(v3 + 224) = std::unordered_set<unsigned int>::begin(__for_range_1);
  *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 256, p_chapter_id);
  *(std::unordered_set<unsigned int>::const_iterator *)(v3 + 256) = std::unordered_set<unsigned int>::end(__for_range_1);
  while ( 1 )
  {
    v39 = (char *)(v3 + 256);
    if ( !std::__detail::operator!=<unsigned int,false>(
            (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v3 + 224),
            (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v3 + 256)) )
      break;
    *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
    v40 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v3 + 224));
    v41 = (int *)v40;
    if ( *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v40 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v40);
    }
    v42 = *v41;
    v43 = *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000);
    if ( v43 != 0 && v43 <= 3 )
    {
      LOBYTE(v39) = v43 != 0;
      __asan_report_store4(v3 + 64, v39);
    }
    *(_DWORD *)(v3 + 64) = v42;
    v44 = *(unsigned int *)(v3 + 64);
    main_quest_excel_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(this, v44);
    if ( main_quest_excel_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&main_quest_excel_config_ptr->active_mode >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&main_quest_excel_config_ptr->active_mode >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&main_quest_excel_config_ptr->active_mode);
      }
      if ( main_quest_excel_config_ptr->active_mode == PLAY_MODE_SINGLE )
      {
        *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 1;
        if ( *(char *)(((v3 + 32) >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(v3 + 32, v44, v3 + 32);
        *(_BYTE *)(v3 + 32) = 0;
        __for_range_2 = &main_quest_excel_config_ptr->child_quest_list;
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 288, v44);
        *(std::vector<unsigned int>::const_iterator *)(v3 + 288) = std::vector<unsigned int>::begin(__for_range_2);
        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 320, v44);
        *(std::vector<unsigned int>::const_iterator *)(v3 + 320) = std::vector<unsigned int>::end(__for_range_2);
        while ( 1 )
        {
          v50 = (char *)(v3 + 320);
          if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 288),
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 320)) )
          {
            v57 = 1;
            goto LABEL_151;
          }
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
          v51 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 288));
          v52 = (int *)v51;
          if ( *(_BYTE *)(((unsigned __int64)v51 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v51 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v51 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v51);
          }
          v53 = *v52;
          v54 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
          if ( v54 != 0 && v54 <= 3 )
          {
            LOBYTE(v50) = v54 != 0;
            __asan_report_store4(v3 + 80, v50);
          }
          *(_DWORD *)(v3 + 80) = v53;
          quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, *(unsigned int *)(v3 + 80));
          if ( !quest_config_ptr )
          {
            *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 992) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 992, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 992),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkMainQuestExcelConfig",
              4187);
            v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 992),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v56 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    v55,
                    (const char (*)[51])byte_1A464FE0);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, (const unsigned int *)(v3 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 992));
            *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v57 = 0;
            goto LABEL_151;
          }
          if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::set<unsigned int>> const,unsigned int>(
                  &this->quest_to_coop_point_map,
                  (const unsigned int *)(v3 + 80))
            || (v58 = std::unordered_map<unsigned int,std::set<unsigned int>>::at(
                        &this->quest_to_coop_point_map,
                        (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 80)),
                !std::set<unsigned int>::size(v58)) )
          {
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1056) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 32 + 95) & 7) >= *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1056, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1056),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkMainQuestExcelConfig",
              4192);
            v60 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1056),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v61 = common::milog::MiLogStream::operator<<<char [121],(char *[121])0>(
                    v60,
                    (const char (*)[121])byte_1A465040);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v61, (const unsigned int *)(v3 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1056));
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v57 = 0;
            goto LABEL_151;
          }
          v62 = (char *)(v3 + 80);
          __for_range_3 = std::unordered_map<unsigned int,std::set<unsigned int>>::at(
                            &this->quest_to_coop_point_map,
                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 80));
          *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 352, v62);
          *(std::set<unsigned int>::iterator *)(v3 + 352) = std::set<unsigned int>::begin(__for_range_3);
          *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 384, v62);
          *(std::set<unsigned int>::iterator *)(v3 + 384) = std::set<unsigned int>::end(__for_range_3);
          while ( 1 )
          {
            if ( !std::operator!=(
                    (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 352),
                    (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 384)) )
            {
              v67 = 1;
              goto LABEL_129;
            }
            v63 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v3 + 352));
            v64 = (unsigned int *)v63;
            if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v63);
            }
            if ( !data::CoopExcelConfigMgrBase::findCoopPointExcelConfig(&txt_config_mgr->coop_config_mgr, *v64) )
              break;
            std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v3 + 352));
          }
          *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1120, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1120),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkMainQuestExcelConfig",
            4199);
          v65 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1120),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v66 = common::milog::MiLogStream::operator<<<char [71],(char *[71])0>(v65, (const char (*)[71])byte_1A4650E0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v66, (const unsigned int *)(v3 + 80));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1120));
          *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v67 = 0;
LABEL_129:
          *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 384) >> 3) + 0x7FFF8000) = -8;
          if ( v67 != 1 )
          {
            v57 = 0;
            goto LABEL_151;
          }
          p_fail_exec = &quest_config_ptr->fail_exec;
          if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
          {
            p_fail_exec = (const std::vector<data::QuestExec> *)(v3 + 80);
            __asan_report_load4(v3 + 80);
          }
          if ( QuestExcelConfigMgr::checkCoopQuestExecAction(this, *(_DWORD *)(v3 + 80), p_fail_exec, (bool *)(v3 + 32)) )
          {
            *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1184) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 1215) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1184, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1184),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkMainQuestExcelConfig",
              4205);
            v69 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1184),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v70 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                    v69,
                    (const char (*)[67])byte_1A465160);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v70, (const unsigned int *)(v3 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1184));
            *(_DWORD *)(((v3 + 1184) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v57 = 0;
            goto LABEL_151;
          }
          p_finish_exec = &quest_config_ptr->finish_exec;
          v72 = *(unsigned __int8 *)(((v3 + 80) >> 3) + 0x7FFF8000);
          if ( (_BYTE)v72 != 0 && (char)v72 <= 3 )
          {
            p_finish_exec = (const std::vector<data::QuestExec> *)(v3 + 80);
            __asan_report_load4(v3 + 80);
          }
          if ( QuestExcelConfigMgr::checkCoopQuestExecAction(
                 this,
                 *(_DWORD *)(v3 + 80),
                 p_finish_exec,
                 (bool *)(v3 + 32)) )
          {
            *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1248) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 1279) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1248, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1248),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkMainQuestExcelConfig",
              4210);
            v73 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1248),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v74 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                    v73,
                    (const char (*)[67])byte_1A4651E0);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v74, (const unsigned int *)(v3 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1248));
            *(_DWORD *)(((v3 + 1248) >> 3) + 0x7FFF8000) = -117901064;
            v2 = -1;
            v57 = 0;
            goto LABEL_151;
          }
          p_begin_exec = &quest_config_ptr->begin_exec;
          v76 = *(unsigned __int8 *)(((v3 + 80) >> 3) + 0x7FFF8000);
          if ( (_BYTE)v76 != 0 && (char)v76 <= 3 )
          {
            p_begin_exec = (const std::vector<data::QuestExec> *)(v3 + 80);
            __asan_report_load4(v3 + 80);
          }
          if ( QuestExcelConfigMgr::checkCoopQuestExecAction(
                 this,
                 *(_DWORD *)(v3 + 80),
                 p_begin_exec,
                 (bool *)(v3 + 32)) )
          {
            break;
          }
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 288));
        }
        *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 1312) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 32 + 95) & 7) >= *(_BYTE *)(((v3 + 1343) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 1312, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 1312),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkMainQuestExcelConfig",
          4215);
        v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 1312),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v78 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(v77, (const char (*)[67])byte_1A465260);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v78, (const unsigned int *)(v3 + 80));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1312));
        *(_DWORD *)(((v3 + 1312) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v57 = 0;
LABEL_151:
        *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = -8;
        if ( v57 != 1 )
        {
          v47 = 0;
          goto LABEL_183;
        }
        if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
               &QuestExcelConfigMgr::coop_parent_quest_white_set,
               (const unsigned int *)(v3 + 64)) )
        {
          v47 = 1;
          goto LABEL_183;
        }
        if ( *(char *)(((v3 + 32) >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(v3 + 32, v3 + 64, v3 + 32);
        if ( !*(_BYTE *)(v3 + 32) )
        {
LABEL_182:
          v47 = 2;
          goto LABEL_183;
        }
        p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
        if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v3 + 64);
        v80 = *(unsigned int *)(v3 + 64);
        parent_script_config = LuaConfigMgr::findParentQuestScriptConfig(p_lua_config_mgr, v80);
        if ( parent_script_config )
        {
          is_have_remove_trial = 0;
          __for_range_4 = &parent_script_config->cancel_action_vec;
          *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 416, v80);
          *(std::vector<data::QuestExec>::const_iterator *)(v3 + 416) = std::vector<data::QuestExec>::begin(__for_range_4);
          *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v3 + 448, v80);
          *(std::vector<data::QuestExec>::const_iterator *)(v3 + 448) = std::vector<data::QuestExec>::end(__for_range_4);
          while ( __gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
                    (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 416),
                    (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 448)) )
          {
            exec = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 416));
            if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&exec->type);
            }
            if ( exec->type == QUEST_EXEC_REMOVE_TRIAL_AVATAR )
              is_have_remove_trial = 1;
            __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v3 + 416));
          }
          *(_BYTE *)(((v3 + 416) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 448) >> 3) + 0x7FFF8000) = -8;
          if ( *(char *)(((v3 + 32) >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(v3 + 32, v3 + 448, v3 + 32);
          if ( !*(_BYTE *)(v3 + 32) || is_have_remove_trial )
            goto LABEL_182;
          *(_DWORD *)(((v3 + 1440) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1440) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1471) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 1471) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1440, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1440),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkMainQuestExcelConfig",
            4244);
          v83 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1440),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v84 = common::milog::MiLogStream::operator<<<char [82],(char *[82])0>(v83, (const char (*)[82])byte_1A465360);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v84, (const unsigned int *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1440));
          *(_DWORD *)(((v3 + 1440) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v47 = 0;
        }
        else
        {
          *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 1376) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1407) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 1376, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 1376),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkMainQuestExcelConfig",
            4230);
          v81 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 1376),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v82 = common::milog::MiLogStream::operator<<<char [94],(char *[94])0>(v81, (const char (*)[94])byte_1A4652E0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v82, (const unsigned int *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1376));
          *(_DWORD *)(((v3 + 1376) >> 3) + 0x7FFF8000) = -117901064;
          v2 = -1;
          v47 = 0;
        }
      }
      else
      {
        *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 928) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 928, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 928),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkMainQuestExcelConfig",
          4177);
        v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 928),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v49 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(v48, (const char (*)[61])byte_1A464F80);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, (const unsigned int *)(v3 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 928));
        *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -117901064;
        v2 = -1;
        v47 = 0;
      }
    }
    else
    {
      *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 864) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 864, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 864),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkMainQuestExcelConfig",
        4171);
      v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 864),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v46 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(v45, (const char (*)[51])byte_1A464F20);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 864));
      *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -117901064;
      v2 = -1;
      v47 = 0;
    }
LABEL_183:
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( !v47 )
    {
      v85 = 0;
      goto LABEL_187;
    }
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_const_iterator<unsigned int,true,false> *const)(v3 + 224));
  }
  v85 = 1;
LABEL_187:
  if ( v85 == 1 )
    v2 = 0;
LABEL_189:
  if ( v104 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80B4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 188) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1504LL, v104);
  }
  return v2;
};

// Line 4253: range 000000000EF3152C-000000000EF31FA1
int32_t __cdecl QuestExcelConfigMgr::checkChapterExcelConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *a2)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  uint32_t *p_begin_quest_id; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int v11; // eax
  const QuestExcelConfigMgr *v12; // rcx
  uint32_t v13; // ecx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  const QuestExcelConfigMgr *v23; // rcx
  uint32_t v24; // ecx
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  int32_t result; // eax
  data::ChapterExcelConfigMap *__for_range; // [rsp+10h] [rbp-1D0h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false>::reference v32; // [rsp+18h] [rbp-1C8h]
  std::tuple_element<0,std::pair<unsigned int const,data::ChapterExcelConfig> >::type *chapter_id; // [rsp+20h] [rbp-1C0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ChapterExcelConfig> >::type *chapter_config; // [rsp+28h] [rbp-1B8h]
  const data::QuestExcelConfig *quest_excel_config_ptr; // [rsp+30h] [rbp-1B0h]
  const data::MainQuestExcelConfig *main_quest_excel_config_ptr; // [rsp+38h] [rbp-1A8h]
  const data::QuestExcelConfig *quest_excel_config_ptr_0; // [rsp+40h] [rbp-1A0h]
  const data::MainQuestExcelConfig *main_quest_excel_config_ptr_0; // [rsp+48h] [rbp-198h]
  char v39[400]; // [rsp+50h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 8 16 __for_begin:4254 64 8 14 __for_end:4254 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 "
                        "<unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkChapterExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -202116109;
  __for_range = &this->chapter_excel_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, a2);
  *(std::unordered_map<unsigned int,data::ChapterExcelConfig>::const_iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::ChapterExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, a2);
  *(std::unordered_map<unsigned int,data::ChapterExcelConfig>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::ChapterExcelConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::ChapterExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ChapterExcelConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ChapterExcelConfig>,false> *)(v3 + 64)) )
    {
      v11 = 1;
      goto LABEL_48;
    }
    v32 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false> *const)(v3 + 32));
    chapter_id = std::get<0ul,unsigned int const,data::ChapterExcelConfig>(v32);
    chapter_config = (std::tuple_element<1,const std::pair<unsigned int const,data::ChapterExcelConfig> >::type *)std::get<1ul,unsigned int const,data::ChapterExcelConfig>(v32);
    p_begin_quest_id = &chapter_config->begin_quest_id;
    if ( *(_BYTE *)(((unsigned __int64)p_begin_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_begin_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_begin_quest_id >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(p_begin_quest_id);
    }
    if ( chapter_config->begin_quest_id )
    {
      quest_excel_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, chapter_config->begin_quest_id);
      if ( !quest_excel_config_ptr )
      {
        if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 96, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 96),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkChapterExcelConfig",
          4261);
        v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v3 + 96),
               (const char (*)[16])"[CONFIG_ERROR] ");
        v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v7, (const char (*)[19])byte_1A4654A0);
        v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, chapter_id);
        v10 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v9, (const char (*)[45])byte_1A4654E0);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &chapter_config->begin_quest_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
        v2 = -1;
        v11 = 0;
        goto LABEL_48;
      }
      v12 = this;
      if ( *(_BYTE *)(((unsigned __int64)&quest_excel_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)quest_excel_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_excel_config_ptr->main_id >> 3)
                                                                              + 0x7FFF8000) )
      {
        __asan_report_load4(&quest_excel_config_ptr->main_id);
      }
      main_quest_excel_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                                      v12,
                                      quest_excel_config_ptr->main_id);
      if ( !main_quest_excel_config_ptr )
        goto LABEL_55;
      if ( *(_BYTE *)(((unsigned __int64)&main_quest_excel_config_ptr->chapter_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&main_quest_excel_config_ptr->chapter_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&main_quest_excel_config_ptr->chapter_id);
      }
      v13 = main_quest_excel_config_ptr->chapter_id;
      if ( *(_BYTE *)(((unsigned __int64)chapter_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)chapter_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)chapter_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(chapter_id);
      }
      if ( v13 != *chapter_id )
      {
LABEL_55:
        if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 160, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 160),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkChapterExcelConfig",
          4267);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 160),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v14, (const char (*)[19])byte_1A4654A0);
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, chapter_id);
        v17 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v16, (const char (*)[27])byte_1A465540);
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                &chapter_config->begin_quest_id);
        common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v18, (const char (*)[46])byte_1A465580);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
        v2 = -1;
        v11 = 0;
        goto LABEL_48;
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&chapter_config->end_quest_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&chapter_config->end_quest_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&chapter_config->end_quest_id);
    }
    if ( chapter_config->end_quest_id )
    {
      quest_excel_config_ptr_0 = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, chapter_config->end_quest_id);
      if ( !quest_excel_config_ptr_0 )
      {
        if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkChapterExcelConfig",
          4277);
        v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v20 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v19, (const char (*)[19])byte_1A4654A0);
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, chapter_id);
        v22 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(v21, (const char (*)[45])byte_1A4655E0);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &chapter_config->end_quest_id);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
        v2 = -1;
        v11 = 0;
        goto LABEL_48;
      }
      v23 = this;
      if ( *(_BYTE *)(((unsigned __int64)&quest_excel_config_ptr_0->main_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)quest_excel_config_ptr_0 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_excel_config_ptr_0->main_id >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4(&quest_excel_config_ptr_0->main_id);
      }
      main_quest_excel_config_ptr_0 = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                                        v23,
                                        quest_excel_config_ptr_0->main_id);
      if ( !main_quest_excel_config_ptr_0 )
        break;
      if ( *(_BYTE *)(((unsigned __int64)&main_quest_excel_config_ptr_0->chapter_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&main_quest_excel_config_ptr_0->chapter_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&main_quest_excel_config_ptr_0->chapter_id);
      }
      v24 = main_quest_excel_config_ptr_0->chapter_id;
      if ( *(_BYTE *)(((unsigned __int64)chapter_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)chapter_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)chapter_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(chapter_id);
      }
      if ( v24 != *chapter_id )
        break;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ChapterExcelConfig>,false,false> *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 288, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 288),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "checkChapterExcelConfig",
    4283);
  v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 288),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v26 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v25, (const char (*)[19])byte_1A4654A0);
  v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, chapter_id);
  v28 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v27, (const char (*)[27])byte_1A465640);
  v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &chapter_config->begin_quest_id);
  common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v29, (const char (*)[46])byte_1A465580);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
  v2 = -1;
  v11 = 0;
LABEL_48:
  if ( v11 == 1 )
    v2 = 0;
  result = v2;
  if ( v39 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4294: range 000000000EF31FA2-000000000EF32163
const std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findPostQuestSet(
        const QuestExcelConfigMgr *const this,
        __int64 quest_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_post_quest_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v6; // rdx
  bool v7; // al
  const std::set<unsigned int> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 quest_id:4293 64 8 9 iter:4295 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findPostQuestSet;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = quest_id;
  p_post_quest_map = &this->post_quest_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, quest_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_post_quest_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->post_quest_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4307: range 000000000EF32164-000000000EF3244F
const std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findAcceptCondQuestSet(
        const QuestExcelConfigMgr *const this,
        __int64 type,
        uint32_t param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_item_accept_cond_quest_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  const std::set<unsigned int> *result; // rax
  std::unordered_map<data::QuestCondType,std::set<unsigned int>> *p_accept_cond_quest_map; // rdx
  std::unordered_map<data::QuestCondType,std::set<unsigned int>> *v11; // rdx
  bool v12; // al
  char v14[224]; // [rsp+10h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 9 type:4306 48 4 10 param:4306 64 8 9 iter:4310 96 8 9 <unknown> 128 8 9 iter:4322 160 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::findAcceptCondQuestSet;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -202116352;
  *(_DWORD *)(v3 + 32) = type;
  *(_DWORD *)(v3 + 48) = param;
  if ( *(_DWORD *)(v3 + 32) == 3 )
  {
    p_item_accept_cond_quest_map = &this->item_accept_cond_quest_map;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 64, type);
    *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                              p_item_accept_cond_quest_map,
                                                                                              (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
    v7 = &this->item_accept_cond_quest_map;
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, v3 + 48);
    *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
    v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
      result = 0LL;
    else
      result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64))->second;
  }
  else
  {
    p_accept_cond_quest_map = &this->accept_cond_quest_map;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, type);
    *(std::unordered_map<data::QuestCondType,std::set<unsigned int>>::const_iterator *)(v3 + 128) = std::unordered_map<data::QuestCondType,std::set<unsigned int>>::find(p_accept_cond_quest_map, (const std::unordered_map<data::QuestCondType,std::set<unsigned int>>::key_type *)(v3 + 32));
    v11 = &this->accept_cond_quest_map;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v3 + 32);
    *(std::unordered_map<data::QuestCondType,std::set<unsigned int>>::const_iterator *)(v3 + 160) = std::unordered_map<data::QuestCondType,std::set<unsigned int>>::end(v11);
    v12 = std::__detail::operator==<std::pair<data::QuestCondType const,std::set<unsigned int>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<const data::QuestCondType,std::set<unsigned int> >,false> *)(v3 + 128),
            (const std::__detail::_Node_iterator_base<std::pair<const data::QuestCondType,std::set<unsigned int> >,false> *)(v3 + 160));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v12 )
      result = 0LL;
    else
      result = &std::__detail::_Node_const_iterator<std::pair<data::QuestCondType const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<const data::QuestCondType,std::set<unsigned int> >,false,false> *const)(v3 + 128))->second;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4337: range 000000000EF32450-000000000EF32611
const std::vector<data::RandomQuestEntranceExcelConfig> *__fastcall QuestExcelConfigMgr::findEntranceConfigVec(
        const QuestExcelConfigMgr *const this,
        __int64 entrance_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>> *p_entrance_random_template_map; // rdx
  std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>> *v6; // rdx
  bool v7; // al
  const std::vector<data::RandomQuestEntranceExcelConfig> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 16 entrance_id:4336 64 8 9 iter:4338 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findEntranceConfigVec;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = entrance_id;
  p_entrance_random_template_map = &this->entrance_random_template_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, entrance_id);
  *(std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>::find(p_entrance_random_template_map, (const std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>::key_type *)(v2 + 48));
  v6 = &this->entrance_random_template_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::vector<data::RandomQuestEntranceExcelConfig>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::RandomQuestEntranceExcelConfig> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::RandomQuestEntranceExcelConfig> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::RandomQuestEntranceExcelConfig>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::RandomQuestEntranceExcelConfig> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4350: range 000000000EF32612-000000000EF327D3
const std::vector<data::RandomQuestElemPoolExcelConfig> *__fastcall QuestExcelConfigMgr::findElemPoolVec(
        const QuestExcelConfigMgr *const this,
        __int64 elem_pool_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>> *p_elem_pool_map; // rdx
  std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>> *v6; // rdx
  bool v7; // al
  const std::vector<data::RandomQuestElemPoolExcelConfig> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 17 elem_pool_id:4349 64 8 9 iter:4351 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findElemPoolVec;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = elem_pool_id;
  p_elem_pool_map = &this->elem_pool_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, elem_pool_id);
  *(std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>>::find(p_elem_pool_map, (const std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>>::key_type *)(v2 + 48));
  v6 = &this->elem_pool_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::vector<data::RandomQuestElemPoolExcelConfig>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::RandomQuestElemPoolExcelConfig> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<data::RandomQuestElemPoolExcelConfig> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::RandomQuestElemPoolExcelConfig>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<data::RandomQuestElemPoolExcelConfig> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4363: range 000000000EF327D4-000000000EF329B8
int32_t __cdecl QuestExcelConfigMgr::rewriteRandomQuestEntranceExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  __gnu_cxx::__normal_iterator<data::RandomQuestEntranceExcelConfig*,std::vector<data::RandomQuestEntranceExcelConfig> > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t result; // eax
  data::RandomQuestEntranceExcelConfigVec *__for_range; // [rsp+18h] [rbp-98h]
  const data::RandomQuestEntranceExcelConfig *entrance_config; // [rsp+20h] [rbp-90h]
  std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>::mapped_type *entrance_config_vec; // [rsp+28h] [rbp-88h]
  char v9[128]; // [rsp+30h] [rbp-80h] BYREF

  v2 = (__gnu_cxx::__normal_iterator<data::RandomQuestEntranceExcelConfig*,std::vector<data::RandomQuestEntranceExcelConfig> > *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (__gnu_cxx::__normal_iterator<data::RandomQuestEntranceExcelConfig*,std::vector<data::RandomQuestEntranceExcelConfig> > *)v3;
  }
  v2->_M_current = (data::RandomQuestEntranceExcelConfig *)1102416563;
  v2[1]._M_current = (data::RandomQuestEntranceExcelConfig *)"2 32 8 16 __for_begin:4364 64 8 14 __for_end:4364";
  v2[2]._M_current = (data::RandomQuestEntranceExcelConfig *)QuestExcelConfigMgr::rewriteRandomQuestEntranceExcelConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  __for_range = &this->random_quest_entrance_excel_config_vec;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], txt_config_mgr);
  v2[4]._M_current = std::vector<data::RandomQuestEntranceExcelConfig>::begin(__for_range)._M_current;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], txt_config_mgr);
  v2[8]._M_current = std::vector<data::RandomQuestEntranceExcelConfig>::end(__for_range)._M_current;
  while ( __gnu_cxx::operator!=<data::RandomQuestEntranceExcelConfig *,std::vector<data::RandomQuestEntranceExcelConfig>>(
            v2 + 4,
            v2 + 8) )
  {
    entrance_config = __gnu_cxx::__normal_iterator<data::RandomQuestEntranceExcelConfig *,std::vector<data::RandomQuestEntranceExcelConfig>>::operator*(v2 + 4);
    entrance_config_vec = std::unordered_map<unsigned int,std::vector<data::RandomQuestEntranceExcelConfig>>::operator[](
                            &this->entrance_random_template_map,
                            &entrance_config->id);
    std::vector<data::RandomQuestEntranceExcelConfig>::emplace_back<data::RandomQuestEntranceExcelConfig const&>(
      entrance_config_vec,
      entrance_config,
      entrance_config);
    __gnu_cxx::__normal_iterator<data::RandomQuestEntranceExcelConfig *,std::vector<data::RandomQuestEntranceExcelConfig>>::operator++(v2 + 4);
  }
  result = 0;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_current = (data::RandomQuestEntranceExcelConfig *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4374: range 000000000EF329BA-000000000EF32C34
int32_t __cdecl QuestExcelConfigMgr::rewriteRandomQuestTemplateExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false,false> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t result; // eax
  uint32_t index; // [rsp+10h] [rbp-C0h]
  uint32_t idx; // [rsp+14h] [rbp-BCh]
  data::RandomQuestTemplateExcelConfigMap *__for_range; // [rsp+18h] [rbp-B8h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false,false>::reference __in; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig> >::type *template_config; // [rsp+30h] [rbp-A0h]
  const data::RandomQuestElem *elem; // [rsp+38h] [rbp-98h]
  char v12[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false,false> *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false,false> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false>::__node_type *)"2 32 8 16 __for_begin:4375 64 8 14 __for_end:4375";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false>::__node_type *)QuestExcelConfigMgr::rewriteRandomQuestTemplateExcelConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  __for_range = &this->random_quest_template_excel_config_map;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], txt_config_mgr);
  v2[4]._M_cur = std::unordered_map<unsigned int,data::RandomQuestTemplateExcelConfig>::begin(__for_range)._M_cur;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], txt_config_mgr);
  v2[8]._M_cur = std::unordered_map<unsigned int,data::RandomQuestTemplateExcelConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false>(
            v2 + 4,
            v2 + 8) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false,false>::operator*(v2 + 4);
    std::get<0ul,unsigned int const,data::RandomQuestTemplateExcelConfig>(__in);
    template_config = std::get<1ul,unsigned int const,data::RandomQuestTemplateExcelConfig>(__in);
    index = 0;
    for ( idx = 0; idx < std::vector<data::RandomQuestElem>::size(&template_config->elem_list); ++idx )
    {
      elem = std::vector<data::RandomQuestElem>::operator[](&template_config->elem_list, idx);
      if ( std::vector<std::string>::empty(&elem->name) )
        break;
      ++index;
    }
    std::vector<data::RandomQuestElem>::resize(&template_config->elem_list, index);
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false,false>::operator++(v2 + 4);
  }
  result = 0;
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestTemplateExcelConfig>,false>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4394: range 000000000EF32C36-000000000EF32EF3
int32_t __cdecl QuestExcelConfigMgr::rewriteRandomQuestElemPoolExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false,false> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t result; // eax
  uint32_t index; // [rsp+18h] [rbp-C8h]
  uint32_t idx; // [rsp+1Ch] [rbp-C4h]
  data::RandomQuestElemPoolExcelConfigMap *__for_range; // [rsp+20h] [rbp-C0h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false,false>::reference __in; // [rsp+28h] [rbp-B8h]
  std::tuple_element<1,std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig> >::type *elem_pool_config; // [rsp+38h] [rbp-A8h]
  std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>>::mapped_type *elem_vec; // [rsp+48h] [rbp-98h]
  char v12[144]; // [rsp+50h] [rbp-90h] BYREF

  v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false,false> *)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false,false> *)v3;
  }
  v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false>::__node_type *)1102416563;
  v2[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false>::__node_type *)"2 32 8 16 __for_begin:4395 64 8 14 __for_end:4395";
  v2[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false>::__node_type *)QuestExcelConfigMgr::rewriteRandomQuestElemPoolExcelConfig;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  __for_range = &this->random_quest_elem_pool_excel_config_map;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], txt_config_mgr);
  v2[4]._M_cur = std::unordered_map<unsigned int,data::RandomQuestElemPoolExcelConfig>::begin(__for_range)._M_cur;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], txt_config_mgr);
  v2[8]._M_cur = std::unordered_map<unsigned int,data::RandomQuestElemPoolExcelConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false>(
            v2 + 4,
            v2 + 8) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false,false>::operator*(v2 + 4);
    std::get<0ul,unsigned int const,data::RandomQuestElemPoolExcelConfig>(__in);
    elem_pool_config = std::get<1ul,unsigned int const,data::RandomQuestElemPoolExcelConfig>(__in);
    index = 0;
    for ( idx = 0; idx < std::vector<data::QuestElemSample>::size(&elem_pool_config->sample_list); ++idx )
    {
      std::vector<data::QuestElemSample>::operator[](&elem_pool_config->sample_list, idx);
      if ( (unsigned __int8)std::string::empty() )
        break;
      ++index;
    }
    std::vector<data::QuestElemSample>::resize(&elem_pool_config->sample_list, index);
    elem_vec = std::unordered_map<unsigned int,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator[](
                 &this->elem_pool_map,
                 &elem_pool_config->pool_id);
    std::vector<data::RandomQuestElemPoolExcelConfig>::emplace_back<data::RandomQuestElemPoolExcelConfig&>(
      elem_vec,
      elem_pool_config,
      elem_pool_config);
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false,false>::operator++(v2 + 4);
  }
  result = 0;
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestElemPoolExcelConfig>,false>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4417: range 000000000EF32EF4-000000000EF33605
int32_t __cdecl QuestExcelConfigMgr::rewriteRandomQuestExcelConfig(
        QuestExcelConfigMgr *const this,
        TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  QuestExcelConfigMgr *v6; // rcx
  __int64 main_id; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // eax
  std::vector<unsigned int> *p_child_quest_list; // rdx
  unsigned int *M_current; // r15
  unsigned int *v15; // rcx
  bool v16; // al
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  int32_t result; // eax
  data::RandomQuestExcelConfigMap *__for_range; // [rsp+28h] [rbp-178h]
  std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false,false>::reference __in; // [rsp+30h] [rbp-170h]
  const unsigned int *quest_id; // [rsp+38h] [rbp-168h]
  std::tuple_element<1,std::pair<unsigned int const,data::RandomQuestExcelConfig> >::type *quest_config; // [rsp+40h] [rbp-160h]
  data::RandomMainQuestExcelConfig *parent_config_ptr; // [rsp+48h] [rbp-158h]
  char v27[336]; // [rsp+50h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 8 16 __for_begin:4418 64 8 14 __for_end:4418 96 8 9 <unknown> 128 8 9 <unknown> 160 32 9 <u"
                        "nknown> 224 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::rewriteRandomQuestExcelConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  __for_range = &this->random_quest_excel_config_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::RandomQuestExcelConfig>::iterator *)(v3 + 32) = std::unordered_map<unsigned int,data::RandomQuestExcelConfig>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,data::RandomQuestExcelConfig>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,data::RandomQuestExcelConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false> *)(v3 + 64)) )
    {
      v12 = 1;
      goto LABEL_26;
    }
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false,false> *const)(v3 + 32));
    quest_id = std::get<0ul,unsigned int const,data::RandomQuestExcelConfig>(__in);
    quest_config = std::get<1ul,unsigned int const,data::RandomQuestExcelConfig>(__in);
    common::tools::MiscUtils::removeEmptyElement<data::RandomQuestCond,data::QuestCondType data::RandomQuestCond::*>(
      &quest_config->accept_cond,
      (data::QuestCondType *)8);
    common::tools::MiscUtils::removeEmptyElement<data::RandomQuestContent,data::QuestContentType data::RandomQuestContent::*>(
      &quest_config->finish_cond,
      (data::QuestContentType *)8);
    common::tools::MiscUtils::removeEmptyElement<data::RandomQuestContent,data::QuestContentType data::RandomQuestContent::*>(
      &quest_config->fail_cond,
      (data::QuestContentType *)8);
    common::tools::MiscUtils::removeEmptyElement<data::IdCountConfig,unsigned int data::IdCountConfig::*>(
      &quest_config->award_items,
      (unsigned int *)8);
    v6 = this;
    if ( *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config->main_id);
    }
    main_id = quest_config->main_id;
    parent_config_ptr = data::QuestExcelConfigMgrBase::findRandomMainQuestExcelConfig(v6, main_id);
    if ( !parent_config_ptr )
    {
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "rewriteRandomQuestExcelConfig",
        4427);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
             v8,
             (const char (*)[49])"findRandomMainQuestExcelConfig failed, quest_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &quest_config->sub_id);
      v11 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v10,
              (const char (*)[18])" parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &quest_config->main_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v2 = -1;
      v12 = 0;
      goto LABEL_26;
    }
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    p_child_quest_list = &parent_config_ptr->child_quest_list;
    if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 128, main_id);
    *(std::vector<unsigned int>::iterator *)(v3 + 128) = std::vector<unsigned int>::end(p_child_quest_list);
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
    M_current = std::vector<unsigned int>::end(&parent_config_ptr->child_quest_list)._M_current;
    v15 = std::vector<unsigned int>::begin(&parent_config_ptr->child_quest_list)._M_current;
    if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 96, main_id);
    *(__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 96) = std::find<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,unsigned int>(
                                                                                             (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v15,
                                                                                             (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current,
                                                                                             quest_id);
    v16 = __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 96),
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 128));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    if ( v16 )
      break;
    std::vector<unsigned int>::emplace_back<unsigned int const&>(
      &parent_config_ptr->child_quest_list,
      quest_id,
      (const unsigned int *)&parent_config_ptr->child_quest_list);
    std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,data::RandomQuestExcelConfig>,false,false> *const)(v3 + 32));
  }
  *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 224, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 224),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "rewriteRandomQuestExcelConfig",
    4434);
  v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 224),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v18 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v17, (const char (*)[20])"duplicate quest_id:");
  v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, quest_id);
  v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v19, (const char (*)[14])"in parent_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &quest_config->main_id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
  v2 = -1;
  v12 = 0;
LABEL_26:
  if ( v12 == 1 )
    v2 = 0;
  result = v2;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 4445: range 000000000EF33606-000000000EF33892
std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findParentQuestIdSetBySeriesId(
        std::set<unsigned int> *retstr,
        const QuestExcelConfigMgr *const this,
        uint32_t series_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_parent_quest_series_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v9; // rax
  char v12[160]; // [rsp+20h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 series_id:4444 64 8 9 iter:4446 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::findParentQuestIdSetBySeriesId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 48) = series_id;
  p_parent_quest_series_map = &this->parent_quest_series_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, this);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_parent_quest_series_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
  v7 = &this->parent_quest_series_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(retstr, 48LL);
    }
    *(_QWORD *)retstr->_M_t._M_impl.gap0 = 0LL;
    *(_QWORD *)&retstr->_M_t._M_impl._M_header._M_color = 0LL;
    retstr->_M_t._M_impl._M_header._M_parent = 0LL;
    retstr->_M_t._M_impl._M_header._M_left = 0LL;
    retstr->_M_t._M_impl._M_header._M_right = 0LL;
    retstr->_M_t._M_impl._M_node_count = 0LL;
    std::set<unsigned int>::set(retstr);
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64));
    std::set<unsigned int>::set(retstr, &v9->second);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 4455: range 000000000EF33894-000000000EF33A55
const std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findParentQuestIdSetByResCollection(
        const QuestExcelConfigMgr *const this,
        __int64 res_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_parent_quest_res_collection_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v6; // rdx
  bool v7; // al
  const std::set<unsigned int> *result; // rax
  char v9[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 11 res_id:4454 64 8 9 iter:4456 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findParentQuestIdSetByResCollection;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = res_id;
  p_parent_quest_res_collection_map = &this->parent_quest_res_collection_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, res_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_parent_quest_res_collection_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->parent_quest_res_collection_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v6);
  v7 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
    result = 0LL;
  else
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4468: range 000000000EF33A56-000000000EF33C0A
const std::set<unsigned int> *__fastcall QuestExcelConfigMgr::findExclusivePlaceQuests(
        const QuestExcelConfigMgr *const this,
        __int64 place_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_exclusive_place_quests; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v6; // rdx
  const std::set<unsigned int> *result; // rax
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 place_id:4467 64 8 9 iter:4469 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findExclusivePlaceQuests;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = place_id;
  p_exclusive_place_quests = &this->exclusive_place_quests;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, place_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_exclusive_place_quests,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 48));
  v6 = &this->exclusive_place_quests;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v6);
  if ( std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 96)) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 64))->second;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4474: range 000000000EF33C0C-000000000EF33DC0
const std::vector<std::tuple<unsigned int,unsigned int,std::string >> *__fastcall QuestExcelConfigMgr::findQuestSceneRangeVec[abi:cxx11](
        const QuestExcelConfigMgr *const this,
        __int64 quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string >>> *p_quest_scene_range_map; // rdx
  std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string >>> *v6; // rdx
  const std::vector<std::tuple<unsigned int,unsigned int,std::string >> *result; // rax
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 quest_id:4473 64 8 9 iter:4475 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::findQuestSceneRangeVec[abi:cxx11];
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  *(_DWORD *)(v2 + 48) = quest_id;
  p_quest_scene_range_map = &this->quest_scene_range_map;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, quest_id);
  *(std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string >>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string>>>::find(p_quest_scene_range_map, (const std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string >>>::key_type *)(v2 + 48));
  v6 = &this->quest_scene_range_map;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string >>>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,std::vector<std::tuple<unsigned int,unsigned int,std::string>>>::end(v6);
  if ( std::__detail::operator==<std::pair<unsigned int const,std::vector<std::tuple<unsigned int,unsigned int,std::string>>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<std::tuple<unsigned int,unsigned int,std::string >> >,false> *)(v2 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::vector<std::tuple<unsigned int,unsigned int,std::string >> >,false> *)(v2 + 96)) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<std::tuple<unsigned int,unsigned int,std::string>>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::vector<std::tuple<unsigned int,unsigned int,std::string >> >,false,false> *const)(v2 + 64))->second;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4480: range 000000000EF33DC2-000000000EF33E93
bool __fastcall QuestExcelConfigMgr::isQuestGroupID(const QuestExcelConfigMgr *const this, uint32_t group_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 group_id:4479";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::isQuestGroupID;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = group_id;
  result = common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
             &this->quest_group_set,
             (const unsigned int *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4485: range 000000000EF33E94-000000000EF34F7D
__int64 __fastcall QuestExcelConfigMgr::checkCoopQuestExecAction(
        const QuestExcelConfigMgr *const this,
        __int64 quest_id,
        const std::vector<data::QuestExec> *exec_vec,
        unsigned __int64 is_have_trial_avatar)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  unsigned __int64 v8; // rsi
  __int64 v9; // rdx
  int v10; // eax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const QuestExcelConfigMgr *v20; // rdx
  __int64 v21; // rsi
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_quest_to_coop_point_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v28; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v29; // rdx
  bool v30; // al
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  std::unordered_map<unsigned int,std::set<unsigned int>> *v33; // rdx
  bool v34; // al
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  std::set<unsigned int> *p_second; // r15
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // r14
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // r14
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v48; // rax
  int v49; // eax
  const data::QuestExec *exec; // [rsp+40h] [rbp-300h]
  char v54[752]; // [rsp+50h] [rbp-2F0h] BYREF

  v5 = (unsigned __int64)v54;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(704LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "15 32 4 23 roll_back_quest_id:4508 48 4 13 quest_id:4484 64 8 16 __for_begin:4486 96 8 14 __for_"
                        "end:4486 128 8 19 roll_back_iter:4520 160 8 9 iter:4521 192 8 9 <unknown> 224 8 9 <unknown> 256 "
                        "32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 3"
                        "2 9 <unknown> 640 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkCoopQuestExecAction;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -218959360;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -218959360;
  v7[536862726] = -218959360;
  v7[536862727] = -218959360;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -218959118;
  v7[536862741] = -202116109;
  *(_DWORD *)(v5 + 48) = quest_id;
  if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 64, quest_id);
  *(std::vector<data::QuestExec>::const_iterator *)(v5 + 64) = std::vector<data::QuestExec>::begin(exec_vec);
  if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 96, quest_id);
  *(std::vector<data::QuestExec>::const_iterator *)(v5 + 96) = std::vector<data::QuestExec>::end(exec_vec);
  while ( __gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
            (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v5 + 64),
            (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v5 + 96)) )
  {
    exec = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v5 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    if ( exec->type == QUEST_EXEC_GRANT_TRIAL_AVATAR
      || exec->type == QUEST_EXEC_GRANT_TRIAL_AVATAR_AND_LOCK_TEAM
      || exec->type == QUEST_EXEC_GRANT_TRIAL_AVATAR_BATCH_AND_LOCK_TEAM )
    {
      v8 = is_have_trial_avatar & 7;
      v9 = (*(_BYTE *)((is_have_trial_avatar >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)((is_have_trial_avatar >> 3) + 0x7FFF8000));
      if ( (_BYTE)v9 )
        __asan_report_store1(is_have_trial_avatar, v8, v9);
      *(_BYTE *)is_have_trial_avatar = 1;
      v10 = 0;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&exec->type);
      }
      if ( exec->type == QUEST_EXEC_ROLLBACK_PARENT_QUEST )
      {
        *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 256, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 256),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkCoopQuestExecAction",
          4496);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 256),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [88],(char *[88])0>(v11, (const char (*)[88])byte_1A465C20);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v5 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
        *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v10 = 1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec->type);
        }
        if ( exec->type == QUEST_EXEC_ROLLBACK_QUEST )
        {
          if ( std::vector<std::string>::empty(&exec->param) )
          {
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkCoopQuestExecAction",
              4505);
            v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v13, (const char (*)[11])"quest_id: ");
            v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v14,
                    (const unsigned int *)(v5 + 48));
            common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              v15,
              (const char (*)[29])" fail rollback param invalid");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v10 = 1;
          }
          else
          {
            *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v5 + 32, v5 + 96);
            *(_DWORD *)(v5 + 32) = 0;
            v16 = std::vector<std::string>::operator[](&exec->param, 0LL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v5 + 32), 1) )
            {
              *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
                && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v5 + 384, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v5 + 384),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "checkCoopQuestExecAction",
                4511);
              v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v5 + 384),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v17,
                      (const char (*)[11])"quest_id: ");
              v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v18,
                      (const unsigned int *)(v5 + 48));
              common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                v19,
                (const char (*)[29])" fail rollback param invalid");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
              *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
              v4 = -1;
              v10 = 1;
            }
            else
            {
              v20 = this;
              if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(v5 + 32);
              v21 = *(unsigned int *)(v5 + 32);
              if ( data::QuestExcelConfigMgrBase::findQuestExcelConfig(v20, v21) )
              {
                *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
                p_quest_to_coop_point_map = &this->quest_to_coop_point_map;
                if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v5 + 128, v21);
                *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 128) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(p_quest_to_coop_point_map, (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v5 + 32));
                *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
                v28 = &this->quest_to_coop_point_map;
                if ( *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v5 + 160, v5 + 32);
                *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 160) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(v28, (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v5 + 48));
                *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = 0;
                v29 = &this->quest_to_coop_point_map;
                if ( *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) )
                  __asan_report_store8(v5 + 192, v5 + 48);
                *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 192) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v29);
                v30 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
                        (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v5 + 128),
                        (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v5 + 192));
                *(_BYTE *)(((v5 + 192) >> 3) + 0x7FFF8000) = -8;
                if ( v30 )
                {
                  *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
                    && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v5 + 512, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v5 + 512),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "checkCoopQuestExecAction",
                    4524);
                  v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v5 + 512),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v32 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                          v31,
                          (const char (*)[37])byte_1A465CA0);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v32,
                    (const unsigned int *)(v5 + 32));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
                  *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = -117901064;
                  v4 = -1;
                  v10 = 1;
                }
                else
                {
                  *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = 0;
                  v33 = &this->quest_to_coop_point_map;
                  if ( *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) )
                    __asan_report_store8(v5 + 224, v5 + 192);
                  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 224) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v33);
                  v34 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
                          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v5 + 160),
                          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v5 + 224));
                  *(_BYTE *)(((v5 + 224) >> 3) + 0x7FFF8000) = -8;
                  if ( v34 )
                  {
                    *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
                      && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v5 + 576, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v5 + 576),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_manual/QuestExcelConfig.cpp",
                      "checkCoopQuestExecAction",
                      4529);
                    v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v5 + 576),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    v36 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                            v35,
                            (const char (*)[37])byte_1A465CA0);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v36,
                      (const unsigned int *)(v5 + 48));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
                    *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = -117901064;
                    v4 = -1;
                    v10 = 1;
                  }
                  else
                  {
                    p_second = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v5 + 160))->second;
                    v38 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v5 + 128));
                    if ( std::operator!=<unsigned int,std::less<unsigned int>,std::allocator<unsigned int>>(
                           &v38->second,
                           p_second) )
                    {
                      *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v5 + 640) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) != 0
                        && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v5 + 640, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v5 + 640),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/txt_data_manual/QuestExcelConfig.cpp",
                        "checkCoopQuestExecAction",
                        4534);
                      v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v5 + 640),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      v40 = common::milog::MiLogStream::operator<<<char [106],(char *[106])0>(
                              v39,
                              (const char (*)[106])byte_1A465D00);
                      v41 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                              v40,
                              (const unsigned int *)(v5 + 48));
                      v42 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                              v41,
                              (const char (*)[23])byte_1A465DA0);
                      v43 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v5 + 160));
                      v44 = common::milog::MiLogStream::operator<<<unsigned int>(v42, &v43->second);
                      v45 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                              v44,
                              (const char (*)[29])byte_1A465DE0);
                      v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                              v45,
                              (const unsigned int *)(v5 + 32));
                      v47 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                              v46,
                              (const char (*)[23])byte_1A465DA0);
                      v48 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v5 + 128));
                      common::milog::MiLogStream::operator<<<unsigned int>(v47, &v48->second);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 640));
                      *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = -117901064;
                      v4 = -1;
                      v10 = 1;
                    }
                    else
                    {
                      v10 = 2;
                    }
                  }
                }
              }
              else
              {
                *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v5 + 448) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) != 0
                  && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 479) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v5 + 448, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v5 + 448),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_manual/QuestExcelConfig.cpp",
                  "checkCoopQuestExecAction",
                  4517);
                v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v5 + 448),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v23 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v22,
                        (const char (*)[11])"quest_id: ");
                v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v23,
                        (const unsigned int *)(v5 + 48));
                v25 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                        v24,
                        (const char (*)[26])" fail rollback quest_id: ");
                v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v25,
                        (const unsigned int *)(v5 + 32));
                common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v26, (const char (*)[11])" not found");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 448));
                *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
                v4 = -1;
                v10 = 1;
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
      }
    }
    *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v5 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v10 && v10 != 2 )
    {
      v49 = 0;
      goto LABEL_70;
    }
    __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v5 + 64));
  }
  v49 = 1;
LABEL_70:
  if ( v49 == 1 )
    v4 = 0;
  if ( v54 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v7 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v7 + 2147450880 - (((_DWORD)v7 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v4;
};

// Line 4544: range 000000000EF352E6-000000000EF35CCD
int32_t __cdecl QuestExcelConfigMgr::checkMainQuestExecGuardian(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::MainQuestExcelConfig *parent_quest_config)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  char *v7; // rsi
  unsigned int *v8; // rax
  int *v9; // rdx
  int v10; // ecx
  char v11; // al
  __int64 v12; // rsi
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // edx
  char *v16; // rsi
  char *v17; // rsi
  char v18; // al
  int32_t result; // eax
  std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-230h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+38h] [rbp-228h]
  const std::vector<data::QuestExec> *__for_range_0; // [rsp+40h] [rbp-220h]
  const std::vector<data::QuestExec> *__for_range_1; // [rsp+48h] [rbp-218h]
  const std::vector<data::QuestExec> *__for_range_2; // [rsp+50h] [rbp-210h]
  __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> >::reference exec_1; // [rsp+58h] [rbp-208h]
  __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> >::reference exec_0; // [rsp+60h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> >::reference exec; // [rsp+68h] [rbp-1F8h]
  char v29[496]; // [rsp+70h] [rbp-1F0h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(448LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "13 48 4 32 trial_avatar_guardian_value:4546 64 4 29 lock_team_guardian_value:4547 80 4 13 quest_"
                        "id:4568 96 8 16 __for_begin:4568 128 8 14 __for_end:4568 160 8 16 __for_begin:4577 192 8 14 __fo"
                        "r_end:4577 224 8 16 __for_begin:4581 256 8 14 __for_end:4581 288 8 16 __for_begin:4585 320 8 14 "
                        "__for_end:4585 352 16 9 func:4548 384 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkMainQuestExecGuardian;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -218959360;
  v6[536862726] = -218959360;
  v6[536862727] = -218959360;
  v6[536862728] = -218959360;
  v6[536862729] = -218959360;
  v6[536862730] = -218959360;
  v6[536862731] = -219021312;
  v6[536862733] = -202116109;
  if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v4 + 48, txt_config_mgr);
  *(_DWORD *)(v4 + 48) = 0;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v4 + 64, txt_config_mgr);
  *(_DWORD *)(v4 + 64) = 0;
  if ( *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 352, txt_config_mgr);
  *(_QWORD *)(v4 + 352) = v4 + 48;
  if ( *(_BYTE *)(((v4 + 360) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 360, txt_config_mgr);
  *(_QWORD *)(v4 + 360) = v4 + 64;
  __for_range = &parent_quest_config->child_quest_list;
  if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 96, txt_config_mgr);
  *(std::vector<unsigned int>::const_iterator *)(v4 + 96) = std::vector<unsigned int>::begin(__for_range);
  if ( *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 128, txt_config_mgr);
  *(std::vector<unsigned int>::const_iterator *)(v4 + 128) = std::vector<unsigned int>::end(__for_range);
  while ( 1 )
  {
    v7 = (char *)(v4 + 128);
    if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
            (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 96),
            (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 128)) )
    {
      v15 = 1;
      goto LABEL_49;
    }
    *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = 4;
    v8 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 96));
    v9 = (int *)v8;
    if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v8);
    }
    v10 = *v9;
    v11 = *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000);
    if ( v11 != 0 && v11 <= 3 )
    {
      LOBYTE(v7) = v11 != 0;
      __asan_report_store4(v4 + 80, v7);
    }
    *(_DWORD *)(v4 + 80) = v10;
    v12 = *(unsigned int *)(v4 + 80);
    quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, v12);
    if ( !quest_config_ptr )
      break;
    __for_range_0 = &quest_config_ptr->finish_exec;
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 160, v12);
    *(std::vector<data::QuestExec>::const_iterator *)(v4 + 160) = std::vector<data::QuestExec>::begin(__for_range_0);
    *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 192, v12);
    *(std::vector<data::QuestExec>::const_iterator *)(v4 + 192) = std::vector<data::QuestExec>::end(__for_range_0);
    while ( 1 )
    {
      v16 = (char *)(v4 + 192);
      if ( !__gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 160),
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 192)) )
        break;
      exec = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 160));
      QuestExcelConfigMgr::checkMainQuestExecGuardian(TxtConfigMgr const&,data::MainQuestExcelConfig const&)const::{lambda(data::QuestExec const&)#1}::operator()(
        (const QuestExcelConfigMgr::checkMainQuestExecGuardian::<lambda(const data::QuestExec&)> *const)(v4 + 352),
        exec);
      __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 160));
    }
    *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = -8;
    __for_range_1 = &quest_config_ptr->fail_exec;
    *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 224, v16);
    *(std::vector<data::QuestExec>::const_iterator *)(v4 + 224) = std::vector<data::QuestExec>::begin(__for_range_1);
    *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 256, v16);
    *(std::vector<data::QuestExec>::const_iterator *)(v4 + 256) = std::vector<data::QuestExec>::end(__for_range_1);
    while ( 1 )
    {
      v17 = (char *)(v4 + 256);
      if ( !__gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 224),
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 256)) )
        break;
      exec_0 = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 224));
      QuestExcelConfigMgr::checkMainQuestExecGuardian(TxtConfigMgr const&,data::MainQuestExcelConfig const&)const::{lambda(data::QuestExec const&)#1}::operator()(
        (const QuestExcelConfigMgr::checkMainQuestExecGuardian::<lambda(const data::QuestExec&)> *const)(v4 + 352),
        exec_0);
      __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 224));
    }
    *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) = -8;
    __for_range_2 = &quest_config_ptr->begin_exec;
    *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 288, v17);
    *(std::vector<data::QuestExec>::const_iterator *)(v4 + 288) = std::vector<data::QuestExec>::begin(__for_range_2);
    *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 320, v17);
    *(std::vector<data::QuestExec>::const_iterator *)(v4 + 320) = std::vector<data::QuestExec>::end(__for_range_2);
    while ( __gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 288),
              (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v4 + 320)) )
    {
      exec_1 = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 288));
      QuestExcelConfigMgr::checkMainQuestExecGuardian(TxtConfigMgr const&,data::MainQuestExcelConfig const&)const::{lambda(data::QuestExec const&)#1}::operator()(
        (const QuestExcelConfigMgr::checkMainQuestExecGuardian::<lambda(const data::QuestExec&)> *const)(v4 + 352),
        exec_1);
      __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *const)(v4 + 288));
    }
    *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) = -8;
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 96));
  }
  *(_DWORD *)(((v4 + 384) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v4 + 384) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) != 0
    && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v4 + 384, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v4 + 384),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "checkMainQuestExecGuardian",
    4573);
  v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v4 + 384),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v14 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(v13, (const char (*)[51])byte_1A464FE0);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 80));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 384));
  *(_DWORD *)(((v4 + 384) >> 3) + 0x7FFF8000) = -117901064;
  v3 = -1;
  v15 = 0;
LABEL_49:
  *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v15 == 1 )
  {
    if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v4 + 48);
    if ( *(int *)(v4 + 48) > 0 )
      goto LABEL_57;
    if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_load4(v4 + 64);
    if ( *(int *)(v4 + 64) > 0 )
LABEL_57:
      v18 = 0;
    else
      v18 = 1;
    if ( v18 == 1 )
      v3 = 0;
    else
      v3 = -1;
  }
  result = v3;
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4548: range 000000000EF34F7E-000000000EF352E4
void __cdecl QuestExcelConfigMgr::checkMainQuestExecGuardian(TxtConfigMgr const&,data::MainQuestExcelConfig const&)const::{lambda(data::QuestExec const&)#1}::operator()(
        const QuestExcelConfigMgr::checkMainQuestExecGuardian::<lambda(const data::QuestExec&)> *const __closure,
        const data::QuestExec *exec)
{
  int32_t *trial_avatar_guardian_value; // rdx
  int32_t *v3; // rdx
  char v4; // cl
  int32_t *lock_team_guardian_value; // rdx
  int32_t *v6; // rdx
  char v7; // cl
  int32_t *v8; // rdx
  char v9; // cl
  int32_t *v10; // rdx
  char v11; // cl

  if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&exec->type);
  }
  if ( exec->type != QUEST_EXEC_GRANT_TRIAL_AVATAR
    && exec->type != QUEST_EXEC_GRANT_TRIAL_AVATAR_AND_LOCK_TEAM
    && exec->type != QUEST_EXEC_GRANT_TRIAL_AVATAR_BATCH_AND_LOCK_TEAM )
  {
    goto LABEL_14;
  }
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  trial_avatar_guardian_value = __closure->__trial_avatar_guardian_value;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__trial_avatar_guardian_value >> 3) + 0x7FFF8000) != 0
    && (char)(((__int64)__closure->__trial_avatar_guardian_value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__trial_avatar_guardian_value >> 3)
                                                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(__closure->__trial_avatar_guardian_value);
  }
  if ( !*trial_avatar_guardian_value )
  {
    v3 = __closure->__trial_avatar_guardian_value;
    v4 = *(_BYTE *)(((unsigned __int64)__closure->__trial_avatar_guardian_value >> 3) + 0x7FFF8000);
    if ( v4 != 0 && (char)(((__int64)__closure->__trial_avatar_guardian_value & 7) + 3) >= v4 )
    {
      LOBYTE(exec) = v4 != 0;
      __asan_report_store4(__closure->__trial_avatar_guardian_value, exec);
    }
    *v3 = 1;
  }
  else
  {
LABEL_14:
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    if ( exec->type != QUEST_EXEC_LOCK_AVATAR_TEAM )
      goto LABEL_25;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__lock_team_guardian_value >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__lock_team_guardian_value);
    lock_team_guardian_value = __closure->__lock_team_guardian_value;
    if ( *(_BYTE *)(((unsigned __int64)lock_team_guardian_value >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)lock_team_guardian_value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)lock_team_guardian_value >> 3)
                                                                                 + 0x7FFF8000) )
    {
      __asan_report_load4(__closure->__lock_team_guardian_value);
    }
    if ( *lock_team_guardian_value )
    {
LABEL_25:
      if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&exec->type);
      }
      if ( exec->type == QUEST_EXEC_REMOVE_TRIAL_AVATAR )
      {
        if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
          __asan_report_load8(__closure);
        v8 = __closure->__trial_avatar_guardian_value;
        v9 = *(_BYTE *)(((unsigned __int64)__closure->__trial_avatar_guardian_value >> 3) + 0x7FFF8000);
        if ( v9 != 0 && (char)(((__int64)__closure->__trial_avatar_guardian_value & 7) + 3) >= v9 )
        {
          LOBYTE(exec) = v9 != 0;
          __asan_report_store4(__closure->__trial_avatar_guardian_value, exec);
        }
        *v8 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec->type);
        }
        if ( exec->type == QUEST_EXEC_UNLOCK_AVATAR_TEAM )
        {
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__lock_team_guardian_value >> 3) + 0x7FFF8000) )
            __asan_report_load8(&__closure->__lock_team_guardian_value);
          v10 = __closure->__lock_team_guardian_value;
          v11 = *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000);
          if ( v11 != 0 && (char)(((unsigned __int8)v10 & 7) + 3) >= v11 )
          {
            LOBYTE(exec) = v11 != 0;
            __asan_report_store4(__closure->__lock_team_guardian_value, exec);
          }
          *v10 = -1;
        }
      }
    }
    else
    {
      v6 = __closure->__lock_team_guardian_value;
      v7 = *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000);
      if ( v7 != 0 && (char)(((unsigned __int8)v6 & 7) + 3) >= v7 )
      {
        LOBYTE(exec) = v7 != 0;
        __asan_report_store4(__closure->__lock_team_guardian_value, exec);
      }
      *v6 = 1;
    }
  }
};

// Line 4597: range 000000000EF35CCE-000000000EF368A1
__int64 __fastcall QuestExcelConfigMgr::canFinishImmediately(
        const QuestExcelConfigMgr *const this,
        __int64 quest_id,
        data::LogicType cond_comb,
        const std::vector<data::QuestContent> *cond_vec,
        bool check_block,
        bool check_cycle)
{
  unsigned int v6; // r14d
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  int v13; // eax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  int v16; // eax
  std::vector<int>::const_reference v17; // rax
  unsigned int *v18; // rdx
  __int64 v19; // rsi
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::vector<int>::const_reference v23; // rax
  _DWORD *v24; // rdx
  bool v25; // al
  unsigned int v26; // eax
  __int64 result; // rax
  const data::QuestContent *content; // [rsp+28h] [rbp-1E8h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-1E0h]
  const data::MainQuestExcelConfig *depend_parent_quest_config_ptr; // [rsp+38h] [rbp-1D8h]
  char v35[464]; // [rsp+40h] [rbp-1D0h] BYREF

  v7 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_3(416LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "8 48 4 21 content_quest_id:4625 64 4 13 quest_id:4596 80 8 16 __for_begin:4604 112 8 14 __for_en"
                        "d:4604 144 32 9 <unknown> 208 32 9 <unknown> 272 32 9 <unknown> 336 40 13 bool_vec:4603";
  *(_QWORD *)(v7 + 16) = QuestExcelConfigMgr::canFinishImmediately;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556943;
  v9[536862722] = 61956;
  v9[536862722] = -234881024;
  v9[536862723] = 62194;
  v9[536862723] = -234881024;
  v9[536862724] = 62194;
  v9[536862725] = -219021312;
  v9[536862726] = 62194;
  v9[536862727] = -219021312;
  v9[536862728] = 62194;
  v9[536862729] = -219021312;
  v9[536862730] = 62194;
  v9[536862731] = -218103808;
  v9[536862732] = -202116109;
  *(_DWORD *)(v7 + 64) = quest_id;
  if ( !std::vector<data::QuestContent>::size(cond_vec) )
  {
    v6 = 0;
    goto LABEL_63;
  }
  std::vector<bool>::vector((std::vector<bool> *const)(v7 + 336));
  if ( *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v7 + 80, quest_id);
  *(std::vector<data::QuestContent>::const_iterator *)(v7 + 80) = std::vector<data::QuestContent>::begin(cond_vec);
  if ( *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v7 + 112, quest_id);
  *(std::vector<data::QuestContent>::const_iterator *)(v7 + 112) = std::vector<data::QuestContent>::end(cond_vec);
  while ( 2 )
  {
    if ( !__gnu_cxx::operator!=<data::QuestContent const*,std::vector<data::QuestContent>>(
            (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v7 + 80),
            (const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *)(v7 + 112)) )
    {
      v13 = 1;
      goto LABEL_60;
    }
    content = __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v7 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&content->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&content->type);
    }
    switch ( content->type )
    {
      case QUEST_CONTENT_OBTAIN_ITEM:
      case QUEST_CONTENT_OBTAIN_MATERIAL_WITH_SUBTYPE:
      case QUEST_CONTENT_UNLOCK_TRANS_POINT:
      case QUEST_CONTENT_CITY_LEVEL_UP:
      case QUEST_CONTENT_PLAYER_LEVEL_UP:
      case QUEST_CONTENT_UNLOCK_AREA:
      case QUEST_CONTENT_UNLOCK_TRANS_POINT_WITH_TYPE:
      case QUEST_CONTENT_ITEM_LESS_THAN_BARGAIN:
      case QUEST_CONTENT_MAIN_COOP_ENTER_SAVE_POINT:
      case QUEST_CONTENT_UNLOCKED_RECIPE:
      case QUEST_CONTENT_NOT_UNLOCKED_RECIPE:
      case QUEST_CONTENT_ENTER_VEHICLE:
      case QUEST_CONTENT_LEAVE_SCENE:
      case QUEST_CONTENT_LEAVE_SCENE_RANGE:
      case QUEST_CONTENT_ACTIVITY_TRIGGER_UPDATE:
      case QUEST_CONTENT_LEAVE_SCENE_RANGE_AND_ROOM:
      case QUEST_CONTENT_QUEST_GLOBAL_VAR_EQUAL:
      case QUEST_CONTENT_QUEST_GLOBAL_VAR_GREATER:
      case QUEST_CONTENT_QUEST_GLOBAL_VAR_LESS:
        goto LABEL_56;
      case QUEST_CONTENT_GAME_TIME_TICK:
        if ( check_cycle )
          goto LABEL_53;
        if ( !check_block
          || !std::operator==<char>(&content->param_str, "0,24")
          || !std::vector<int>::size(&content->param) )
        {
          goto LABEL_52;
        }
        v23 = std::vector<int>::operator[](&content->param, 0LL);
        v24 = v23;
        if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v23);
        }
        if ( *v24 )
LABEL_52:
          v25 = 1;
        else
LABEL_53:
          v25 = 0;
        std::vector<bool>::push_back((std::vector<bool> *const)(v7 + 336), v25);
        goto LABEL_58;
      case QUEST_CONTENT_ITEM_LESS_THAN:
      case QUEST_CONTENT_SCENE_LEVEL_TAG_EQ:
        std::vector<bool>::push_back((std::vector<bool> *const)(v7 + 336), !check_cycle);
        goto LABEL_58;
      case QUEST_CONTENT_QUEST_STATE_EQUAL:
      case QUEST_CONTENT_QUEST_STATE_NOT_EQUAL:
        parent_quest_config_ptr = QuestExcelConfigMgr::findParentQuestConfigByChildId(this, *(_DWORD *)(v7 + 64));
        if ( parent_quest_config_ptr )
        {
          if ( !check_block )
            goto LABEL_56;
          if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->active_mode >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->active_mode >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&parent_quest_config_ptr->active_mode);
          }
          if ( parent_quest_config_ptr->active_mode == PLAY_MODE_SINGLE )
          {
            if ( std::vector<int>::size(&content->param) )
            {
              *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) = 4;
              v17 = std::vector<int>::operator[](&content->param, 0LL);
              v18 = (unsigned int *)v17;
              if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v17);
              }
              v19 = *v18;
              if ( *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v7 + 48, v19);
              *(_DWORD *)(v7 + 48) = v19;
              if ( *(_DWORD *)(v7 + 48) == 99902 )
              {
                std::vector<bool>::push_back((std::vector<bool> *const)(v7 + 336), 0);
                v16 = 1;
              }
              else
              {
                if ( *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) <= 3 )
                  __asan_report_load4(v7 + 48);
                depend_parent_quest_config_ptr = QuestExcelConfigMgr::findParentQuestConfigByChildId(
                                                   this,
                                                   *(_DWORD *)(v7 + 48));
                if ( depend_parent_quest_config_ptr )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&depend_parent_quest_config_ptr->active_mode >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&depend_parent_quest_config_ptr->active_mode >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&depend_parent_quest_config_ptr->active_mode);
                  }
                  std::vector<bool>::push_back(
                    (std::vector<bool> *const)(v7 + 336),
                    depend_parent_quest_config_ptr->active_mode != PLAY_MODE_SINGLE);
                  v16 = 1;
                }
                else
                {
                  *(_DWORD *)(((v7 + 272) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v7 + 272) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v7 + 303) >> 3) + 0x7FFF8000) != 0
                    && (char)((v7 + 47) & 7) >= *(_BYTE *)(((v7 + 303) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v7 + 272, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v7 + 272),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_manual/QuestExcelConfig.cpp",
                    "canFinishImmediately",
                    4635);
                  v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v7 + 272),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  v21 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                          v20,
                          (const char (*)[18])"content_quest_id:");
                  v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v21,
                          (const unsigned int *)(v7 + 48));
                  common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v22,
                    (const char (*)[24])" parent quest not exist");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 272));
                  *(_DWORD *)(((v7 + 272) >> 3) + 0x7FFF8000) = -117901064;
                  v6 = 0;
                  v16 = 0;
                }
              }
            }
            else
            {
              *(_DWORD *)(((v7 + 208) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v7 + 208) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v7 + 239) >> 3) + 0x7FFF8000) != 0
                && (char)((v7 - 96 + 79) & 7) >= *(_BYTE *)(((v7 + 239) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v7 + 208, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v7 + 208),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_manual/QuestExcelConfig.cpp",
                "canFinishImmediately",
                4622);
              v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v7 + 208),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v15 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                      v14,
                      (const char (*)[33])"content.param.size=0, quest_id: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v7 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 208));
              *(_DWORD *)(((v7 + 208) >> 3) + 0x7FFF8000) = -117901064;
              v6 = 0;
              v16 = 0;
            }
            *(_BYTE *)(((v7 + 48) >> 3) + 0x7FFF8000) = -8;
            if ( !v16 )
            {
              v13 = 0;
              goto LABEL_60;
            }
          }
          else
          {
LABEL_56:
            std::vector<bool>::push_back((std::vector<bool> *const)(v7 + 336), 1);
          }
LABEL_58:
          __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestContent*,std::vector<data::QuestContent> > *const)(v7 + 80));
          continue;
        }
        *(_DWORD *)(((v7 + 144) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v7 + 144) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v7 + 175) >> 3) + 0x7FFF8000) != 0
          && (char)((v7 - 112 + 31) & 7) >= *(_BYTE *)(((v7 + 175) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v7 + 144, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v7 + 144),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "canFinishImmediately",
          4615);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v7 + 144),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])"quest_id: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v7 + 64));
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v12,
          (const char (*)[24])" parent quest not exist");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v7 + 144));
        *(_DWORD *)(((v7 + 144) >> 3) + 0x7FFF8000) = -117901064;
        v6 = 0;
        v13 = 0;
LABEL_60:
        *(_BYTE *)(((v7 + 80) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v7 + 112) >> 3) + 0x7FFF8000) = -8;
        if ( v13 == 1 )
        {
          LOBYTE(v26) = CommonMiscs::evaluateLogicComb(cond_comb, (const std::vector<bool> *)(v7 + 336));
          v6 = v26;
        }
        std::vector<bool>::~vector((std::vector<bool> *const)(v7 + 336));
LABEL_63:
        result = v6;
        if ( v35 == (char *)v7 )
        {
          *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0LL;
          *(_DWORD *)((v7 >> 3) + 0x7FFF8030) = 0;
        }
        else
        {
          *(_QWORD *)v7 = 1172321806LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
          *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
          *(_DWORD *)((v7 >> 3) + 0x7FFF8030) = -168430091;
        }
        return result;
      default:
        std::vector<bool>::push_back((std::vector<bool> *const)(v7 + 336), 0);
        goto LABEL_58;
    }
  }
};

// Line 4690: range 000000000EF368A2-000000000EF36A82
bool __fastcall QuestExcelConfigMgr::isQuestGroupGadgetConfigID(
        const QuestExcelConfigMgr *const this,
        __int64 group_id,
        uint32_t gadget_config_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_quest_group_gadget_set_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  bool result; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v10; // rax
  char v12[160]; // [rsp+10h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 13 group_id:4689 48 4 21 gadget_config_id:4689 64 8 9 iter:4691 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::isQuestGroupGadgetConfigID;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 32) = group_id;
  *(_DWORD *)(v3 + 48) = gadget_config_id;
  p_quest_group_gadget_set_map = &this->quest_group_gadget_set_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, group_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_quest_group_gadget_set_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->quest_group_gadget_set_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0;
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64));
    result = common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
               &v10->second,
               (const unsigned int *)(v3 + 48));
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4697: range 000000000EF36A84-000000000EF36C64
bool __fastcall QuestExcelConfigMgr::isQuestGroupRegionConfigID(
        const QuestExcelConfigMgr *const this,
        __int64 group_id,
        uint32_t region_config_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>> *p_quest_group_region_set_map; // rdx
  std::unordered_map<unsigned int,std::set<unsigned int>> *v7; // rdx
  bool v8; // al
  bool result; // al
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v10; // rax
  char v12[160]; // [rsp+10h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 13 group_id:4696 48 4 21 region_config_id:4696 64 8 9 iter:4698 96 8 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::isQuestGroupRegionConfigID;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 32) = group_id;
  *(_DWORD *)(v3 + 48) = region_config_id;
  p_quest_group_region_set_map = &this->quest_group_region_set_map;
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, group_id);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                            p_quest_group_region_set_map,
                                                                                            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
  v7 = &this->quest_group_region_set_map;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 96, v3 + 32);
  *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(v7);
  v8 = std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 96));
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    result = 0;
  }
  else
  {
    v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64));
    result = common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
               &v10->second,
               (const unsigned int *)(v3 + 48));
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4704: range 000000000EF36C66-000000000EF3733E
std::pair<int,unsigned int> __fastcall QuestExcelConfigMgr::getQuestBindFlowGroupSuiteIndex(
        const QuestExcelConfigMgr *const this,
        uint32_t quest_id,
        uint32_t group_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  common::milog::MiLogStream *v7; // rax
  char *v8; // rsi
  std::pair<int,unsigned int> result; // rax
  char *v10; // rsi
  bool v11; // al
  unsigned int *p_second; // rcx
  char v13; // al
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+10h] [rbp-1D0h]
  const std::map<unsigned int,unsigned int> *group_suite_map; // [rsp+18h] [rbp-1C8h]
  char v17[448]; // [rsp+20h] [rbp-1C0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(416LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 4 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 1"
                        "3 quest_id:4703 144 4 13 group_id:4703 160 8 9 <unknown> 192 8 9 <unknown> 224 8 9 iter:4712 256"
                        " 8 9 <unknown> 288 8 9 <unknown> 320 8 9 <unknown> 352 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::getQuestBindFlowGroupSuiteIndex;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -234556924;
  v5[536862725] = -218959360;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -218959360;
  v5[536862729] = -218959360;
  v5[536862730] = -218959360;
  v5[536862732] = -202116109;
  *(_DWORD *)(v3 + 128) = quest_id;
  *(_DWORD *)(v3 + 144) = group_id;
  v6 = *(unsigned int *)(v3 + 128);
  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(this, v6);
  if ( quest_config_ptr )
  {
    group_suite_map = &quest_config_ptr->world_quest_flow_group_suite_map;
    if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 224, v6);
    *(std::map<unsigned int,unsigned int>::const_iterator *)(v3 + 224) = std::map<unsigned int,unsigned int>::find(
                                                                           group_suite_map,
                                                                           (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 144));
    if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 256, v3 + 144);
    *(std::map<unsigned int,unsigned int>::const_iterator *)(v3 + 256) = std::map<unsigned int,unsigned int>::end(group_suite_map);
    v10 = (char *)(v3 + 256);
    v11 = std::operator==(
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v3 + 224),
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v3 + 256));
    *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) = -8;
    if ( v11 )
    {
      *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 96, v10);
      *(_DWORD *)(v3 + 96) = 0;
      *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 80, v10);
      *(_DWORD *)(v3 + 80) = -1;
      if ( *(_BYTE *)(((v3 + 288) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v3 + 288, v10);
      *(std::pair<int,int> *)(v3 + 288) = std::make_pair<int,int>((int *)(v3 + 80), (int *)(v3 + 96));
      std::pair<int,unsigned int>::pair<int,int,true>(
        (std::pair<int,unsigned int> *const)(v3 + 320),
        (std::pair<int,int> *)(v3 + 288));
      if ( *(_BYTE *)(((v3 + 320) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v3 + 320);
      result = *(std::pair<int,unsigned int> *)(v3 + 320);
    }
    else
    {
      p_second = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v3 + 224))->second;
      *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
      v13 = *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000);
      if ( v13 != 0 && v13 <= 3 )
      {
        LOBYTE(v10) = v13 != 0;
        __asan_report_store4(v3 + 112, v10);
      }
      *(_DWORD *)(v3 + 112) = 0;
      result = std::make_pair<int,unsigned int const&>((int *)(v3 + 112), p_second);
    }
  }
  else
  {
    if ( *(char *)(((v3 + 352) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 352, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 352),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "getQuestBindFlowGroupSuiteIndex",
      4708);
    v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           (common::milog::MiLogStream *const)(v3 + 352),
           (const char (*)[36])"findQuestExcelConfig fail.quest_id:");
    v8 = (char *)(v3 + 128);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 128));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 352));
    *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -117901064;
    *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 64, v8);
    *(_DWORD *)(v3 + 64) = 0;
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 48, v8);
    *(_DWORD *)(v3 + 48) = -1;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v3 + 160, v8);
    *(std::pair<int,int> *)(v3 + 160) = std::make_pair<int,int>((int *)(v3 + 48), (int *)(v3 + 64));
    std::pair<int,unsigned int>::pair<int,int,true>(
      (std::pair<int,unsigned int> *const)(v3 + 192),
      (std::pair<int,int> *)(v3 + 160));
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v3 + 192);
    result = *(std::pair<int,unsigned int> *)(v3 + 192);
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 4721: range 000000000EF37340-000000000EF37895
int32_t __cdecl QuestExcelConfigMgr::checkBindFlowGroupWorldQuestConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const QuestExcelConfigMgr *v6; // rcx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  int v9; // eax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  int32_t result; // eax
  std::unordered_map<unsigned int,std::map<unsigned int,std::set<unsigned int>>> *__for_range; // [rsp+18h] [rbp-138h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> >,false,false>::reference v14; // [rsp+20h] [rbp-130h]
  std::tuple_element<0,std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> > >::type *parent_quest_id; // [rsp+28h] [rbp-128h]
  std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> > >::type *order_groups_map; // [rsp+30h] [rbp-120h]
  const data::MainQuestExcelConfig *parent_config_ptr; // [rsp+38h] [rbp-118h]
  char v18[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 16 __for_begin:4722 64 8 14 __for_end:4722 96 32 9 <unknown> 160 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = QuestExcelConfigMgr::checkBindFlowGroupWorldQuestConfig;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  __for_range = &this->rewind_bind_groups_map;
  if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 32, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::map<unsigned int,std::set<unsigned int>>>::const_iterator *)(v3 + 32) = std::unordered_map<unsigned int,std::map<unsigned int,std::set<unsigned int>>>::begin(__for_range);
  if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 64, txt_config_mgr);
  *(std::unordered_map<unsigned int,std::map<unsigned int,std::set<unsigned int>>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::map<unsigned int,std::set<unsigned int>>>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> >,false> *)(v3 + 32),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> >,false> *)(v3 + 64)) )
    {
      v9 = 1;
      goto LABEL_25;
    }
    v14 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> >,false,false> *const)(v3 + 32));
    parent_quest_id = std::get<0ul,unsigned int const,std::map<unsigned int,std::set<unsigned int>>>(v14);
    order_groups_map = (std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> > >::type *)std::get<1ul,unsigned int const,std::map<unsigned int,std::set<unsigned int>>>(v14);
    v6 = this;
    if ( *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)parent_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(parent_quest_id);
    }
    parent_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(v6, *parent_quest_id);
    if ( !parent_config_ptr )
    {
      if ( *(char *)(((v3 + 96) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 127) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 96, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 96),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkBindFlowGroupWorldQuestConfig",
        4727);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 96),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v8 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
             v7,
             (const char (*)[50])"findMainQuestExcelConfig failed, parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, parent_quest_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
      v2 = -1;
      v9 = 0;
      goto LABEL_25;
    }
    if ( !std::map<unsigned int,unsigned int>::empty(&parent_config_ptr->flow_min_rewind_order_map) )
    {
      if ( *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)parent_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3)
                                                                          + 0x7FFF8000) )
      {
        __asan_report_load4(parent_quest_id);
      }
      if ( QuestExcelConfigMgr::checkBindFlowGroupConfig(this, txt_config_mgr, *parent_quest_id, order_groups_map) )
        break;
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::set<unsigned int>> >,false,false> *const)(v3 + 32));
  }
  if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
    && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v3 + 160, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 160),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "checkBindFlowGroupWorldQuestConfig",
    4736);
  v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 160),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v11 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
          v10,
          (const char (*)[50])"checkBindFlowGroupConfig failed, parent_quest_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, parent_quest_id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
  v2 = -1;
  v9 = 0;
LABEL_25:
  if ( v9 == 1 )
    v2 = 0;
  result = v2;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4744: range 000000000EF37896-000000000EF3867B
int32_t __cdecl QuestExcelConfigMgr::checkParentQuestResCollectionConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  uint32_t *p_res_id; // rax
  __int64 id; // rsi
  bool v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // eax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  int32_t result; // eax
  int32_t v26; // [rsp+Ch] [rbp-424h]
  data::MainQuestExcelConfigMap *__for_range; // [rsp+20h] [rbp-410h]
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::reference v28; // [rsp+28h] [rbp-408h]
  std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_config; // [rsp+38h] [rbp-3F8h]
  char v30[1008]; // [rsp+40h] [rbp-3F0h] BYREF

  v2 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(960LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 8 16 __for_begin:4759 112 8 14 __for_en"
                        "d:4759 144 8 9 <unknown> 176 8 9 <unknown> 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unkno"
                        "wn> 400 48 31 ignore_parent_quest_id_set:4747 480 404 9 <unknown>";
  *(_QWORD *)(v2 + 16) = QuestExcelConfigMgr::checkParentQuestResCollectionConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862734] = -218959118;
  v4[536862747] = -217841664;
  v4[536862748] = -202116109;
  v4[536862749] = -202116109;
  if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 883) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 115) & 7) >= *(_BYTE *)(((v2 + 883) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 480, 404LL);
  }
  qmemcpy((void *)(v2 + 480), &unk_1A466B60, 0x194uLL);
  std::allocator<int>::allocator((std::allocator<int> *const)(v2 + 48));
  std::set<int>::set(
    (std::set<int> *const)(v2 + 400),
    (std::initializer_list<int>)__PAIR128__(101LL, v2 + 480),
    (const std::less<int> *)(v2 + 32),
    (const std::set<int>::allocator_type *)(v2 + 48));
  std::allocator<int>::~allocator((std::allocator<int> *const)(v2 + 48));
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  __asan_poison_stack_memory(v2 + 480, 404LL);
  __for_range = &this->main_quest_excel_config_map;
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 80, 404LL);
  *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v2 + 80) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::begin(__for_range);
  *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 112, 404LL);
  *(std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator *)(v2 + 112) = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(__for_range);
  while ( 1 )
  {
    if ( !std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v2 + 80),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MainQuestExcelConfig>,false> *)(v2 + 112)) )
    {
      v12 = 1;
      goto LABEL_44;
    }
    v28 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *const)(v2 + 80));
    std::get<0ul,unsigned int const,data::MainQuestExcelConfig>(v28);
    parent_quest_config = (std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *)std::get<1ul,unsigned int const,data::MainQuestExcelConfig>(v28);
    p_res_id = &parent_quest_config->res_id;
    if ( *(_BYTE *)(((unsigned __int64)p_res_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_res_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_res_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_res_id);
    }
    if ( parent_quest_config->res_id )
    {
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 176, (((_BYTE)parent_quest_config + 12) & 7u) + 3);
      *(std::set<int>::iterator *)(v2 + 176) = std::set<int>::end((const std::set<int> *const)(v2 + 400));
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&parent_quest_config->id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&parent_quest_config->id);
      }
      id = parent_quest_config->id;
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 64, id);
      *(_DWORD *)(v2 + 64) = id;
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v2 + 144, id);
      *(std::set<int>::iterator *)(v2 + 144) = std::set<int>::find(
                                                 (std::set<int> *const)(v2 + 400),
                                                 (const std::set<int>::key_type *)(v2 + 64));
      v7 = std::operator!=(
             (const std::_Rb_tree_const_iterator<int>::_Self *)(v2 + 144),
             (const std::_Rb_tree_const_iterator<int>::_Self *)(v2 + 176));
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      if ( !v7 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)parent_quest_config + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config->type >> 3)
                                                                             + 0x7FFF8000) )
        {
          __asan_report_load4(&parent_quest_config->type);
        }
        if ( parent_quest_config->type == EQ )
        {
          *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 64 + 47) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 208, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 208),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkParentQuestResCollectionConfig",
            4775);
          v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v2 + 208),
                 (const char (*)[16])"[CONFIG_ERROR] ");
          v9 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(v8, (const char (*)[49])byte_1A466980);
          v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &parent_quest_config->id);
          v11 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v10, (const char (*)[10])" res_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &parent_quest_config->res_id);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
          *(_DWORD *)(((v2 + 208) >> 3) + 0x7FFF8000) = -117901064;
          v26 = -1;
          v12 = 0;
          goto LABEL_44;
        }
        if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)parent_quest_config - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_type >> 3)
                                                                              + 0x7FFF8000) )
        {
          __asan_report_load4(&parent_quest_config->activity_type);
        }
        if ( parent_quest_config->activity_type )
        {
          *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 64 + 111) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 272, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 272),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkParentQuestResCollectionConfig",
            4782);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 272),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v14 = common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(v13, (const char (*)[59])byte_1A466A20);
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &parent_quest_config->id);
          v16 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v15, (const char (*)[10])" res_id: ");
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v16,
                  &parent_quest_config->res_id);
          v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v17,
                  (const char (*)[16])" activity_type:");
          common::milog::MiLogStream::operator<<<data::NewActivityType,(data::NewActivityType*)0>(
            v18,
            &parent_quest_config->activity_type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
          *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
          v26 = -1;
          v12 = 0;
          goto LABEL_44;
        }
        if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&parent_quest_config->activity_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&parent_quest_config->activity_id);
        }
        if ( parent_quest_config->activity_id )
          break;
      }
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false> *const)(v2 + 80));
  }
  *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 336, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 336),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_manual/QuestExcelConfig.cpp",
    "checkParentQuestResCollectionConfig",
    4789);
  v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 336),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v20 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(v19, (const char (*)[61])byte_1A466AC0);
  v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &parent_quest_config->id);
  v22 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v21, (const char (*)[10])" res_id: ");
  v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &parent_quest_config->res_id);
  v24 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v23, (const char (*)[15])" activity_id: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &parent_quest_config->activity_id);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
  *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
  v26 = -1;
  v12 = 0;
LABEL_44:
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
  if ( v12 == 1 )
    v26 = 0;
  std::set<int>::~set((std::set<int> *const)(v2 + 400));
  result = v26;
  if ( v30 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4797: range 000000000EF3867C-000000000EF395F1
__int64 __fastcall QuestExcelConfigMgr::checkBindFlowGroupConfig(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        uint32_t parent_quest_id,
        const QuestExcelConfigMgr::RewindBindGroupMap *order_groups_map)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  char *v8; // rsi
  char *v9; // rsi
  unsigned int *v10; // rax
  int *v11; // rdx
  int v12; // ecx
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  int v20; // eax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  int v27; // edx
  unsigned __int64 v28; // rax
  char *v29; // rsi
  unsigned int *v30; // rax
  int *v31; // rdx
  int v32; // ecx
  char v33; // al
  char *v34; // rsi
  unsigned int *v35; // rax
  int *v36; // rdx
  int v37; // ecx
  char v38; // al
  unsigned __int64 v39; // rax
  int v40; // edx
  __int64 result; // rax
  LuaConfigMgr *lua_config_mgr; // [rsp+28h] [rbp-358h]
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::reference v45; // [rsp+38h] [rbp-348h]
  std::tuple_element<0,std::pair<unsigned int const,std::set<unsigned int> > >::type *order; // [rsp+40h] [rbp-340h]
  std::tuple_element<1,const std::pair<unsigned int const,std::set<unsigned int> > >::type *groups_set; // [rsp+48h] [rbp-338h]
  std::set<unsigned int> *__for_range_1; // [rsp+60h] [rbp-320h]
  std::set<unsigned int> *__for_range_2; // [rsp+68h] [rbp-318h]
  char v50[784]; // [rsp+70h] [rbp-310h] BYREF

  v5 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(736LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "17 48 4 13 group_id:4804 64 4 21 binding_group_id:4820 80 4 28 to_del_binding_group_id:4828 96 4"
                        " 20 parent_quest_id:4796 112 8 16 __for_begin:4802 144 8 14 __for_end:4802 176 8 16 __for_begin:"
                        "4804 208 8 14 __for_end:4804 240 8 16 __for_begin:4820 272 8 14 __for_end:4820 304 8 16 __for_be"
                        "gin:4828 336 8 14 __for_end:4828 368 32 9 <unknown> 432 32 9 <unknown> 496 48 23 binding_groups_"
                        "set:4799 576 48 24 bind_end_groups_set:4800 656 48 30 to_del_binding_groups_set:4819";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkBindFlowGroupConfig;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -234556924;
  v7[536862723] = 61956;
  v7[536862723] = -234881024;
  v7[536862724] = 62194;
  v7[536862724] = -234881024;
  v7[536862725] = 62194;
  v7[536862725] = -234881024;
  v7[536862726] = 62194;
  v7[536862726] = -234881024;
  v7[536862727] = 62194;
  v7[536862727] = -234881024;
  v7[536862728] = 62194;
  v7[536862728] = -234881024;
  v7[536862729] = 62194;
  v7[536862729] = -234881024;
  v7[536862730] = 62194;
  v7[536862730] = -234881024;
  v7[536862731] = 62194;
  v7[536862732] = -219021312;
  v7[536862733] = 62194;
  v7[536862734] = -219021312;
  v7[536862735] = 62194;
  v7[536862737] = -218959118;
  v7[536862739] = -219021312;
  v7[536862740] = 62194;
  v7[536862742] = -202116109;
  *(_DWORD *)(v5 + 96) = parent_quest_id;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 496));
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 576));
  lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
  if ( *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 112, txt_config_mgr);
  *(std::map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 112) = std::map<unsigned int,std::set<unsigned int>>::begin(order_groups_map);
  if ( *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v5 + 144, txt_config_mgr);
  *(std::map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 144) = std::map<unsigned int,std::set<unsigned int>>::end(order_groups_map);
  while ( 1 )
  {
    v8 = (char *)(v5 + 144);
    if ( !std::operator!=(
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)(v5 + 112),
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)(v5 + 144)) )
      break;
    v45 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v5 + 112));
    order = std::get<0ul,unsigned int const,std::set<unsigned int>>(v45);
    groups_set = (std::tuple_element<1,const std::pair<unsigned int const,std::set<unsigned int> > >::type *)std::get<1ul,unsigned int const,std::set<unsigned int>>(v45);
    *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v5 + 176, v8);
    *(std::set<unsigned int>::iterator *)(v5 + 176) = std::set<unsigned int>::begin(groups_set);
    *(_BYTE *)(((v5 + 208) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v5 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v5 + 208, v8);
    *(std::set<unsigned int>::iterator *)(v5 + 208) = std::set<unsigned int>::end(groups_set);
    while ( 1 )
    {
      v9 = (char *)(v5 + 208);
      if ( !std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v5 + 176),
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v5 + 208)) )
      {
        v20 = 1;
        goto LABEL_30;
      }
      *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = 4;
      v10 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v5 + 176));
      v11 = (int *)v10;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      v12 = *v11;
      v13 = *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000);
      if ( v13 != 0 && v13 <= 3 )
      {
        LOBYTE(v9) = v13 != 0;
        __asan_report_store4(v5 + 48, v9);
      }
      *(_DWORD *)(v5 + 48) = v12;
      if ( !LuaConfigMgr::findGroupScriptConfig(lua_config_mgr, *(_DWORD *)(v5 + 48)) )
      {
        *(_DWORD *)(((v5 + 368) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v5 + 368) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 399) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 113) & 7) >= *(_BYTE *)(((v5 + 399) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 368, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 368),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkBindFlowGroupConfig",
          4809);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 368),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v15 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A458A80);
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v5 + 48));
        v17 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])"order:");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, order);
        v19 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v18,
                (const char (*)[19])", parent_quest_id:");
        v9 = (char *)(v5 + 96);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v5 + 96));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 368));
        *(_DWORD *)(((v5 + 368) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v20 = 0;
        goto LABEL_30;
      }
      if ( common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
             (std::set<unsigned int> *)(v5 + 576),
             (const unsigned int *)(v5 + 48)) )
      {
        break;
      }
      std::set<unsigned int>::insert(
        (std::set<unsigned int> *const)(v5 + 496),
        (const std::set<unsigned int>::value_type *)(v5 + 48));
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v5 + 176));
    }
    *(_DWORD *)(((v5 + 432) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v5 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 463) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 80 + 31) & 7) >= *(_BYTE *)(((v5 + 463) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 432, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 432),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkBindFlowGroupConfig",
      4814);
    v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v5 + 432),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v22 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(v21, (const char (*)[41])byte_1A466F60);
    v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v5 + 48));
    v24 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v23, (const char (*)[7])"order:");
    v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, order);
    v26 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v25, (const char (*)[19])", parent_quest_id:");
    v9 = (char *)(v5 + 96);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v5 + 96));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 432));
    *(_DWORD *)(((v5 + 432) >> 3) + 0x7FFF8000) = -117901064;
    v4 = -1;
    v20 = 0;
LABEL_30:
    *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v5 + 176) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v5 + 208) >> 3) + 0x7FFF8000) = -8;
    if ( v20 == 1 )
    {
      v28 = ((v5 + 656) >> 3) + 2147450880;
      *(_DWORD *)v28 = 0;
      *(_WORD *)(v28 + 4) = 0;
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 656));
      __for_range_1 = (std::set<unsigned int> *)(v5 + 496);
      *(_BYTE *)(((v5 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 240) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 240, v9);
      *(std::set<unsigned int>::iterator *)(v5 + 240) = std::set<unsigned int>::begin(__for_range_1);
      *(_BYTE *)(((v5 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 272) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 272, v9);
      *(std::set<unsigned int>::iterator *)(v5 + 272) = std::set<unsigned int>::end(__for_range_1);
      while ( 1 )
      {
        v29 = (char *)(v5 + 272);
        if ( !std::operator!=(
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v5 + 240),
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v5 + 272)) )
          break;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
        v30 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v5 + 240));
        v31 = (int *)v30;
        if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v30);
        }
        v32 = *v31;
        v33 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
        if ( v33 != 0 && v33 <= 3 )
        {
          LOBYTE(v29) = v33 != 0;
          __asan_report_store4(v5 + 64, v29);
        }
        *(_DWORD *)(v5 + 64) = v32;
        if ( !common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
                groups_set,
                (const unsigned int *)(v5 + 64)) )
        {
          std::set<unsigned int>::insert(
            (std::set<unsigned int> *const)(v5 + 576),
            (const std::set<unsigned int>::value_type *)(v5 + 64));
          std::set<unsigned int>::insert(
            (std::set<unsigned int> *const)(v5 + 656),
            (const std::set<unsigned int>::value_type *)(v5 + 64));
        }
        std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v5 + 240));
      }
      *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 272) >> 3) + 0x7FFF8000) = -8;
      __for_range_2 = (std::set<unsigned int> *)(v5 + 656);
      *(_BYTE *)(((v5 + 304) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 304) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 304, v29);
      *(std::set<unsigned int>::iterator *)(v5 + 304) = std::set<unsigned int>::begin(__for_range_2);
      *(_BYTE *)(((v5 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v5 + 336) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v5 + 336, v29);
      *(std::set<unsigned int>::iterator *)(v5 + 336) = std::set<unsigned int>::end(__for_range_2);
      while ( 1 )
      {
        v34 = (char *)(v5 + 336);
        if ( !std::operator!=(
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v5 + 304),
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v5 + 336)) )
          break;
        *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = 4;
        v35 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v5 + 304));
        v36 = (int *)v35;
        if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v35);
        }
        v37 = *v36;
        v38 = *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000);
        if ( v38 != 0 && v38 <= 3 )
        {
          LOBYTE(v34) = v38 != 0;
          __asan_report_store4(v5 + 80, v34);
        }
        *(_DWORD *)(v5 + 80) = v37;
        std::set<unsigned int>::erase(
          (std::set<unsigned int> *const)(v5 + 496),
          (const std::set<unsigned int>::key_type *)(v5 + 80));
        std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v5 + 304));
      }
      *(_BYTE *)(((v5 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v5 + 336) >> 3) + 0x7FFF8000) = -8;
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 656));
      v27 = 1;
    }
    else
    {
      v27 = 0;
    }
    v39 = ((v5 + 656) >> 3) + 2147450880;
    *(_DWORD *)v39 = -117901064;
    *(_WORD *)(v39 + 4) = -1800;
    if ( v27 != 1 )
    {
      v40 = 0;
      goto LABEL_61;
    }
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v5 + 112));
  }
  v40 = 1;
LABEL_61:
  *(_BYTE *)(((v5 + 112) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v5 + 144) >> 3) + 0x7FFF8000) = -8;
  if ( v40 == 1 )
    v4 = 0;
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 576));
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 496));
  result = v4;
  if ( v50 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8054) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 4837: range 000000000EF395F2-000000000EF39E56
__int64 __fastcall QuestExcelConfigMgr::checkExecDelPackItem(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  ItemExcelConfigMgr *p_item_config_mgr; // rcx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  char v36[400]; // [rsp+20h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 4 12 item_id:4843 64 4 15 item_count:4844 80 4 13 quest_id:4836 96 32 9 <unknown> 160 32 9 "
                        "<unknown> 224 32 9 <unknown> 288 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecDelPackItem;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959118;
  v6[536862730] = -202116109;
  *(_DWORD *)(v4 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 48, txt_config_mgr);
    *(_DWORD *)(v4 + 48) = 0;
    if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 64, txt_config_mgr);
    *(_DWORD *)(v4 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
           &exec->param,
           (unsigned int *)(v4 + 48),
           (unsigned int *)(v4 + 64),
           (unsigned int *)&exec->param) )
    {
      if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 65) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecDelPackItem",
        4847);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v12,
              (const char (*)[32])"quest exec param format error: ");
      v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
      v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])" quest_id: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 80));
      v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v18, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 160));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 64);
      if ( *(_DWORD *)(v4 + 64) )
      {
        p_item_config_mgr = &txt_config_mgr->item_config_mgr;
        if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v4 + 48);
        if ( ItemExcelConfigMgr::findItemConfig(p_item_config_mgr, *(unsigned int *)(v4 + 48)) )
        {
          result = 0LL;
        }
        else
        {
          if ( *(char *)(((v4 + 288) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 63) & 7) >= *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 288, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 288),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecDelPackItem",
            4857);
          v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 288),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v29 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  v28,
                  (const char (*)[41])"quest exec param error. cant find item: ");
          v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v29,
                  (const unsigned int *)(v4 + 48));
          v31 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v30, (const char (*)[12])" quest_id: ");
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v4 + 80));
          v33 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v32, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v33, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 288));
          result = 0xFFFFFFFFLL;
        }
      }
      else
      {
        if ( *(char *)(((v4 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 1) & 7) >= *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecDelPackItem",
          4852);
        v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v20 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                v19,
                (const char (*)[33])"quest exec param error. item_id:");
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v20,
                (const unsigned int *)(v4 + 48));
        v22 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v21, (const char (*)[11])" itemcout:");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v4 + 64));
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v4 + 80));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 224));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecDelPackItem",
      4840);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 80));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 96));
    result = 0xFFFFFFFFLL;
  }
  if ( v36 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4864: range 000000000EF39E58-000000000EF3AEFD
__int64 __fastcall QuestExcelConfigMgr::checkExecUnlockPoint(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  const std::string *v27; // rax
  char *v28; // rsi
  bool v29; // r15
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // r14
  const std::string *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  char *v41; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v42; // rax
  int *v43; // rdx
  int v44; // ecx
  char v45; // al
  JsonConfigMgr *p_json_config_mgr; // rsi
  int v47; // ecx
  uint32_t v48; // edx
  bool v49; // r15
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  int v58; // edx
  __int64 result; // rax
  std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-2F8h]
  char v64[752]; // [rsp+40h] [rbp-2F0h] BYREF

  v5 = (unsigned __int64)v64;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(704LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "15 32 1 9 <unknown> 48 4 13 scene_id:4870 64 4 13 point_id:4892 80 4 13 quest_id:4863 96 8 16 __"
                        "for_begin:4892 128 8 14 __for_end:4892 160 16 9 <unknown> 192 24 17 point_id_vec:4881 256 32 9 <"
                        "unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <u"
                        "nknown> 640 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecUnlockPoint;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = -234556924;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -219021312;
  v7[536862726] = -234881024;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -218959118;
  v7[536862741] = -202116109;
  *(_DWORD *)(v5 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v5 + 48, txt_config_mgr);
    *(_DWORD *)(v5 + 48) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v5 + 48), 1) )
    {
      if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecUnlockPoint",
        4873);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 320),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v13,
              (const char (*)[32])"quest exec param format error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v5 + 80));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
      v4 = -1;
    }
    else
    {
      p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v5 + 48);
      if ( LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, *(unsigned int *)(v5 + 48)) )
      {
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 192));
        std::allocator<char>::allocator(v5 + 32);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v5 + 448),
          ",",
          (const std::allocator<char> *)(v5 + 32));
        v27 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v28 = (char *)(v5 + 448);
        v29 = common::tools::StringUtils::splitToList<unsigned int>(
                v27,
                (const std::string *)(v5 + 448),
                (std::vector<unsigned int> *)(v5 + 192),
                0) != 0;
        std::string::~string((void *)(v5 + 448));
        *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v5 + 32);
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        if ( v29 )
        {
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnlockPoint",
            4884);
          v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v31 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  v30,
                  (const char (*)[32])"quest exec param format error: ");
          v32 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v33 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, v32);
          v34 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v33, (const char (*)[12])" quest_id: ");
          v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v34,
                  (const unsigned int *)(v5 + 80));
          v36 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v35, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v36, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
        else if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v5 + 192)) )
        {
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnlockPoint",
            4889);
          v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v38 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                  v37,
                  (const char (*)[50])"quest exec param error: point is empty quest_id: ");
          v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v38,
                  (const unsigned int *)(v5 + 80));
          v40 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v39, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v40, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
        else
        {
          __for_range = (std::vector<unsigned int> *)(v5 + 192);
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 96, v28);
          *(std::vector<unsigned int>::iterator *)(v5 + 96) = std::vector<unsigned int>::begin(__for_range);
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 128, v28);
          *(std::vector<unsigned int>::iterator *)(v5 + 128) = std::vector<unsigned int>::end(__for_range);
          while ( 1 )
          {
            v41 = (char *)(v5 + 128);
            if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 96),
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 128)) )
            {
              v58 = 1;
              goto LABEL_50;
            }
            *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
            v42 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 96));
            v43 = (int *)v42;
            if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v42 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v42);
            }
            v44 = *v43;
            v45 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
            if ( v45 != 0 && v45 <= 3 )
            {
              LOBYTE(v41) = v45 != 0;
              __asan_report_store4(v5 + 64, v41);
            }
            *(_DWORD *)(v5 + 64) = v44;
            *(_WORD *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
            p_json_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->json_config_mgr;
            if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 64);
            v47 = *(_DWORD *)(v5 + 64);
            if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 48);
            v48 = *(_DWORD *)(v5 + 48);
            if ( *(_WORD *)(((v5 + 160) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            JsonConfigMgr::findScenePoint((const JsonConfigMgr *const)(v5 + 160), p_json_config_mgr, v48, v47);
            v49 = std::operator==<data::ConfigScenePoint>(
                    0LL,
                    (const std::shared_ptr<data::ConfigScenePoint> *)(v5 + 160));
            std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v5 + 160));
            *(_WORD *)(((v5 + 160) >> 3) + 0x7FFF8000) = -1800;
            if ( v49 )
              break;
            __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 96));
          }
          *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnlockPoint",
            4896);
          v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v51 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  v50,
                  (const char (*)[31])"quest exec param error: scene ");
          v52 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v51,
                  (const unsigned int *)(v5 + 48));
          v53 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v52,
                  (const char (*)[18])" cant find point:");
          v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v53,
                  (const unsigned int *)(v5 + 64));
          v55 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v54, (const char (*)[12])" quest_id: ");
          v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v55,
                  (const unsigned int *)(v5 + 80));
          v57 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v56, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v57, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 640));
          *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v58 = 0;
LABEL_50:
          *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
          if ( v58 == 1 )
            v4 = 0;
        }
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 192));
      }
      else
      {
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecUnlockPoint",
          4878);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v21,
                (const char (*)[42])"quest exec param error: cant find scene: ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v5 + 48));
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v5 + 80));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        v4 = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecUnlockPoint",
      4867);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 256),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v8,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v5 + 80));
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v11, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
    v4 = -1;
  }
  result = v4;
  if ( v64 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4904: range 000000000EF3AEFE-000000000EF3BFA3
__int64 __fastcall QuestExcelConfigMgr::checkExecUnlockForce(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  const std::string *v27; // rax
  char *v28; // rsi
  bool v29; // r15
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // r14
  const std::string *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  char *v41; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v42; // rax
  int *v43; // rdx
  int v44; // ecx
  char v45; // al
  JsonConfigMgr *p_json_config_mgr; // rsi
  int v47; // ecx
  uint32_t v48; // edx
  bool v49; // r15
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  int v58; // edx
  __int64 result; // rax
  std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-2F8h]
  char v64[752]; // [rsp+40h] [rbp-2F0h] BYREF

  v5 = (unsigned __int64)v64;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(704LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "15 32 1 9 <unknown> 48 4 13 scene_id:4910 64 4 13 force_id:4932 80 4 13 quest_id:4903 96 8 16 __"
                        "for_begin:4932 128 8 14 __for_end:4932 160 16 9 <unknown> 192 24 17 force_id_vec:4921 256 32 9 <"
                        "unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <u"
                        "nknown> 640 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = QuestExcelConfigMgr::checkExecUnlockForce;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = -234556924;
  v7[536862723] = -218959360;
  v7[536862724] = -218959360;
  v7[536862725] = -219021312;
  v7[536862726] = -234881024;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -218959118;
  v7[536862735] = -218959118;
  v7[536862737] = -218959118;
  v7[536862739] = -218959118;
  v7[536862741] = -202116109;
  *(_DWORD *)(v5 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v5 + 48, txt_config_mgr);
    *(_DWORD *)(v5 + 48) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v5 + 48), 1) )
    {
      if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecUnlockForce",
        4913);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 320),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v13,
              (const char (*)[32])"quest exec param format error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v5 + 80));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
      v4 = -1;
    }
    else
    {
      p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v5 + 48);
      if ( LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, *(unsigned int *)(v5 + 48)) )
      {
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 192));
        std::allocator<char>::allocator(v5 + 32);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v5 + 448),
          ",",
          (const std::allocator<char> *)(v5 + 32));
        v27 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v28 = (char *)(v5 + 448);
        v29 = common::tools::StringUtils::splitToList<unsigned int>(
                v27,
                (const std::string *)(v5 + 448),
                (std::vector<unsigned int> *)(v5 + 192),
                0) != 0;
        std::string::~string((void *)(v5 + 448));
        *(_DWORD *)(((v5 + 448) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v5 + 32);
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        if ( v29 )
        {
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnlockForce",
            4924);
          v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 512),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v31 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  v30,
                  (const char (*)[32])"quest exec param format error: ");
          v32 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v33 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, v32);
          v34 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v33, (const char (*)[12])" quest_id: ");
          v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v34,
                  (const unsigned int *)(v5 + 80));
          v36 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v35, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v36, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 512));
          *(_DWORD *)(((v5 + 512) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
        else if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v5 + 192)) )
        {
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnlockForce",
            4929);
          v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v38 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                  v37,
                  (const char (*)[50])"quest exec param error: force is empty quest_id: ");
          v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v38,
                  (const unsigned int *)(v5 + 80));
          v40 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v39, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v40, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 576));
          *(_DWORD *)(((v5 + 576) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
        }
        else
        {
          __for_range = (std::vector<unsigned int> *)(v5 + 192);
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 96, v28);
          *(std::vector<unsigned int>::iterator *)(v5 + 96) = std::vector<unsigned int>::begin(__for_range);
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v5 + 128, v28);
          *(std::vector<unsigned int>::iterator *)(v5 + 128) = std::vector<unsigned int>::end(__for_range);
          while ( 1 )
          {
            v41 = (char *)(v5 + 128);
            if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 96),
                    (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v5 + 128)) )
            {
              v58 = 1;
              goto LABEL_50;
            }
            *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = 4;
            v42 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 96));
            v43 = (int *)v42;
            if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v42 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v42);
            }
            v44 = *v43;
            v45 = *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000);
            if ( v45 != 0 && v45 <= 3 )
            {
              LOBYTE(v41) = v45 != 0;
              __asan_report_store4(v5 + 64, v41);
            }
            *(_DWORD *)(v5 + 64) = v44;
            *(_WORD *)(((v5 + 160) >> 3) + 0x7FFF8000) = 0;
            p_json_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->json_config_mgr;
            if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 64);
            v47 = *(_DWORD *)(v5 + 64);
            if ( *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v5 + 48) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_load4(v5 + 48);
            v48 = *(_DWORD *)(v5 + 48);
            if ( *(_WORD *)(((v5 + 160) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            JsonConfigMgr::findSceneForce<data::ConfigAirflowField>(
              (const JsonConfigMgr *const)(v5 + 160),
              p_json_config_mgr,
              v48,
              v47);
            v49 = std::operator==<data::ConfigAirflowField>(
                    0LL,
                    (const std::shared_ptr<data::ConfigAirflowField> *)(v5 + 160));
            std::shared_ptr<data::ConfigAirflowField>::~shared_ptr((std::shared_ptr<data::ConfigAirflowField> *const)(v5 + 160));
            *(_WORD *)(((v5 + 160) >> 3) + 0x7FFF8000) = -1800;
            if ( v49 )
              break;
            __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v5 + 96));
          }
          *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v5 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecUnlockForce",
            4936);
          v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v51 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  v50,
                  (const char (*)[31])"quest exec param error: scene ");
          v52 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v51,
                  (const unsigned int *)(v5 + 48));
          v53 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v52,
                  (const char (*)[18])" cant find force:");
          v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v53,
                  (const unsigned int *)(v5 + 64));
          v55 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v54, (const char (*)[12])" quest_id: ");
          v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v55,
                  (const unsigned int *)(v5 + 80));
          v57 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v56, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v57, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 640));
          *(_DWORD *)(((v5 + 640) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          v58 = 0;
LABEL_50:
          *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 96) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v5 + 128) >> 3) + 0x7FFF8000) = -8;
          if ( v58 == 1 )
            v4 = 0;
        }
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 192));
      }
      else
      {
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecUnlockForce",
          4918);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v21,
                (const char (*)[42])"quest exec param error: cant find scene: ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v5 + 48));
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v5 + 80));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        v4 = -1;
      }
    }
  }
  else
  {
    if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v5 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v5 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecUnlockForce",
      4907);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v5 + 256),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v8,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v5 + 80));
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v11, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
    v4 = -1;
  }
  result = v4;
  if ( v64 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4944: range 000000000EF3BFA4-000000000EF3C5B9
__int64 __fastcall QuestExcelConfigMgr::checkExecChangeAvatarElement(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  char v28[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 14 elem_type:4950 48 4 13 quest_id:4943 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecChangeAvatarElement;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecChangeAvatarElement",
        4953);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v13,
              (const char (*)[25])"quest exec param error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( *(_DWORD *)(v4 + 32) && *(_DWORD *)(v4 + 32) <= 0xDu )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecChangeAvatarElement",
          4958);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v20,
                (const char (*)[25])"quest exec param error: ");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v4 + 32));
        v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v22, (const char (*)[12])" quest_id: ");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 48));
        v25 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v24, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v25, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecChangeAvatarElement",
      4947);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4965: range 000000000EF3C5BA-000000000EF3CBC4
__int64 __fastcall QuestExcelConfigMgr::checkExecRefreshGroupMonster(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  char v28[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 13 group_id:4971 48 4 13 quest_id:4964 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecRefreshGroupMonster;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRefreshGroupMonster",
        4974);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v13,
              (const char (*)[25])"quest exec param error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( *(_DWORD *)(v4 + 32) )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRefreshGroupMonster",
          4979);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v20,
                (const char (*)[25])"quest exec param error: ");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v4 + 32));
        v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v22, (const char (*)[12])" quest_id: ");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 48));
        v25 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v24, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v25, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRefreshGroupMonster",
      4968);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4986: range 000000000EF3CBC6-000000000EF3D020
__int64 __fastcall QuestExcelConfigMgr::checkExecSetIsFlyable(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  char v22[240]; // [rsp+20h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 15 is_flyable:4992 48 4 13 quest_id:4985 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecSetIsFlyable;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(char *)(((v4 + 32) >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(v4 + 32, txt_config_mgr, v4 + 32);
    *(_BYTE *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<bool>(v12, (bool *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecSetIsFlyable",
        4995);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v13,
              (const char (*)[25])"quest exec param error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecSetIsFlyable",
      4989);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5002: range 000000000EF3D022-000000000EF3D47C
__int64 __fastcall QuestExcelConfigMgr::checkExecSetIsWeatherLocked(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  char v22[240]; // [rsp+20h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 22 is_weather_locked:5008 48 4 13 quest_id:5001 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecSetIsWeatherLocked;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(char *)(((v4 + 32) >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(v4 + 32, txt_config_mgr, v4 + 32);
    *(_BYTE *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<bool>(v12, (bool *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecSetIsWeatherLocked",
        5011);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v13,
              (const char (*)[25])"quest exec param error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecSetIsWeatherLocked",
      5005);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5018: range 000000000EF3D47E-000000000EF3D8D8
__int64 __fastcall QuestExcelConfigMgr::checkExecIsGameTimeLocked(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  char v22[240]; // [rsp+20h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 24 is_game_time_locked:5024 48 4 13 quest_id:5017 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecIsGameTimeLocked;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(char *)(((v4 + 32) >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(v4 + 32, txt_config_mgr, v4 + 32);
    *(_BYTE *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<bool>(v12, (bool *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecIsGameTimeLocked",
        5027);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v13,
              (const char (*)[25])"quest exec param error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecIsGameTimeLocked",
      5021);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5034: range 000000000EF3D8DA-000000000EF3DD34
__int64 __fastcall QuestExcelConfigMgr::checkExecSetIsTransferable(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  char v22[240]; // [rsp+20h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 20 is_transferable:5040 48 4 13 quest_id:5033 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecSetIsTransferable;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(char *)(((v4 + 32) >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(v4 + 32, txt_config_mgr, v4 + 32);
    *(_BYTE *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<bool>(v12, (bool *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecSetIsTransferable",
        5043);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v13,
              (const char (*)[25])"quest exec param error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecSetIsTransferable",
      5037);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5050: range 000000000EF3DD36-000000000EF3E1E3
__int64 __fastcall QuestExcelConfigMgr::checkExecSetOpenState(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  char v21[272]; // [rsp+20h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 1 12 is_open:5057 64 4 15 state_type:5056 80 4 13 quest_id:5049 96 32 9 <unknown> 160 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecSetOpenState;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 64, txt_config_mgr);
    *(_DWORD *)(v4 + 64) = 0;
    if ( *(char *)(((v4 + 48) >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(v4 + 48, txt_config_mgr, v4 + 48);
    *(_BYTE *)(v4 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,bool &>(
           &exec->param,
           (unsigned int *)(v4 + 64),
           (bool *)(v4 + 48),
           (bool *)&exec->param) )
    {
      if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecSetOpenState",
        5060);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v12,
              (const char (*)[25])"quest exec param error: ");
      v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
      v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])" quest_id: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 80));
      v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v18, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 160));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v4 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecSetOpenState",
      5053);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 80));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 96));
    result = 0xFFFFFFFFLL;
  }
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5067: range 000000000EF3E1E4-000000000EF3E808
__int64 __fastcall QuestExcelConfigMgr::checkExecSetGameTime(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  char v29[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 18 set_game_time:5073 48 4 13 quest_id:5066 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecSetGameTime;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<float>(v12, (float *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecSetGameTime",
        5076);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              v13,
              (const char (*)[25])"quest exec param error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( *(float *)(v4 + 32) >= 0.0 )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecSetGameTime",
          5081);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v20,
                (const char (*)[25])"quest exec param error: ");
        v22 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, v22);
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v4 + 48));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecSetGameTime",
      5070);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5088: range 000000000EF3E80A-000000000EF3EE33
__int64 __fastcall QuestExcelConfigMgr::checkExecStartBargain(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  BargainExcelConfigMgr *p_bargain_excel_config_mgr; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  char v29[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 15 bargain_id:5095 48 4 13 quest_id:5087 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecStartBargain;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecStartBargain",
        5098);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v13,
              (const char (*)[32])"quest exec param format error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      p_bargain_excel_config_mgr = &txt_config_mgr->bargain_excel_config_mgr;
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( data::BargainExcelConfigMgrBase::findBargainExcelConfig(
             p_bargain_excel_config_mgr,
             *(unsigned int *)(v4 + 32)) )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecStartBargain",
          5104);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                v21,
                (const char (*)[44])"quest exec param error. cant find bargain: ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v4 + 32));
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v4 + 48));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecStartBargain",
      5091);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5111: range 000000000EF3EE34-000000000EF3F8EA
__int64 __fastcall QuestExcelConfigMgr::checkExecModifyClimateArea(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned int *v7; // r8
  unsigned int *v8; // r9
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  JsonConfigMgr *p_json_config_mgr; // rdi
  uint32_t v29; // edx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  char v46[464]; // [rsp+20h] [rbp-1D0h] BYREF

  v4 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 32 4 13 scene_id:5117 48 4 20 climate_area_id:5118 64 4 22 json_climate_type:5119 80 4 13 ques"
                        "t_id:5110 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecModifyClimateArea;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959118;
  v6[536862730] = -218959118;
  v6[536862732] = -202116109;
  *(_DWORD *)(v4 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) > 2 )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 48, txt_config_mgr);
    *(_DWORD *)(v4 + 48) = 0;
    if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 64, txt_config_mgr);
    *(_DWORD *)(v4 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
           &exec->param,
           (unsigned int *)(v4 + 32),
           (unsigned int *)(v4 + 48),
           (unsigned int *)(v4 + 64),
           v7,
           v8) )
    {
      if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecModifyClimateArea",
        5122);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v14,
              (const char (*)[32])"quest exec param format error: ");
      v16 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
      v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v17, (const char (*)[12])" quest_id: ");
      v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v4 + 80));
      v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v20, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 160));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, *(unsigned int *)(v4 + 32)) )
      {
        p_json_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->json_config_mgr;
        if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
        {
          p_json_config_mgr = (JsonConfigMgr *)(v4 + 48);
          __asan_report_load4(v4 + 48);
        }
        v29 = *(_DWORD *)(v4 + 48);
        if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        {
          p_json_config_mgr = (JsonConfigMgr *)(v4 + 32);
          __asan_report_load4(v4 + 32);
        }
        if ( JsonConfigMgr::findClimateAreaConfig(p_json_config_mgr, *(_DWORD *)(v4 + 32), v29) )
        {
          if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v4 + 64);
          if ( *(_DWORD *)(v4 + 64) <= 0xDu )
          {
            result = 0LL;
          }
          else
          {
            if ( *(char *)(((v4 + 352) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 352, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 352),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecModifyClimateArea",
              5137);
            v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 352),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v39 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                    v38,
                    (const char (*)[44])"quest exec param error: json_climate_type: ");
            v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v39,
                    (const unsigned int *)(v4 + 64));
            v41 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v40,
                    (const char (*)[12])" quest_id: ");
            v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v41,
                    (const unsigned int *)(v4 + 80));
            v43 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v42,
                    (const char (*)[13])" exec type: ");
            common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v43, &exec->type);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 352));
            result = 0xFFFFFFFFLL;
          }
        }
        else
        {
          if ( *(char *)(((v4 + 288) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 63) & 7) >= *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 288, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 288),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecModifyClimateArea",
            5132);
          v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 288),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v31 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  v30,
                  (const char (*)[42])"quest exec param error: cant find scene: ");
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v4 + 32));
          v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v32,
                  (const char (*)[16])" climate_area: ");
          v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v33,
                  (const unsigned int *)(v4 + 48));
          v35 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v34, (const char (*)[12])" quest_id: ");
          v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v35,
                  (const unsigned int *)(v4 + 80));
          v37 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v36, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v37, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 288));
          result = 0xFFFFFFFFLL;
        }
      }
      else
      {
        if ( *(char *)(((v4 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 96 + 95) & 7) >= *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecModifyClimateArea",
          5127);
        v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v23 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v22,
                (const char (*)[42])"quest exec param error: cant find scene: ");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 32));
        v25 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v24, (const char (*)[12])" quest_id: ");
        v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v4 + 80));
        v27 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v26, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v27, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 224));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyClimateArea",
      5114);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            v9,
            (const char (*)[41])"quest exec param count error. quest_id: ");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 80));
    v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v12, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 96));
    result = 0xFFFFFFFFLL;
  }
  if ( v46 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 5144: range 000000000EF3F8EC-000000000EF3FF00
__int64 __fastcall QuestExcelConfigMgr::checkExecDeactiveItemGiving(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  GivingExcelConfigMgr *p_giving_config_mgr; // rcx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  char v28[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 14 giving_id:5150 48 4 13 quest_id:5143 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecDeactiveItemGiving;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecDeactiveItemGiving",
        5153);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v12,
              (const char (*)[32])"quest exec param format error: ");
      v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
      v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])" quest_id: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 48));
      v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v18, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      p_giving_config_mgr = &txt_config_mgr->giving_config_mgr;
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( data::GivingExcelConfigMgrBase::findGivingExcelConfig(p_giving_config_mgr, *(unsigned int *)(v4 + 32)) )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecDeactiveItemGiving",
          5158);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                v20,
                (const char (*)[46])"quest exec param error: cant find giving_id: ");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v4 + 32));
        v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v22, (const char (*)[12])" quest_id: ");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 48));
        v25 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v24, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v25, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecDeactiveItemGiving",
      5147);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5165: range 000000000EF3FF02-000000000EF4052B
__int64 __fastcall QuestExcelConfigMgr::checkExecRemoveTrialAvatar(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  TrialAvatarExcelConfigMgr *p_trial_avatar_config_mgr; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  char v29[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 20 trial_avatar_id:5171 48 4 13 quest_id:5164 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecRemoveTrialAvatar;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRemoveTrialAvatar",
        5174);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v13,
              (const char (*)[32])"quest exec param format error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      p_trial_avatar_config_mgr = &txt_config_mgr->trial_avatar_config_mgr;
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(
             p_trial_avatar_config_mgr,
             *(unsigned int *)(v4 + 32)) )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRemoveTrialAvatar",
          5179);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
                v21,
                (const char (*)[52])"quest exec param error: cant find trial_avatar_id: ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v4 + 32));
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v4 + 48));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRemoveTrialAvatar",
      5168);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5186: range 000000000EF4052C-000000000EF40B5D
__int64 __fastcall QuestExcelConfigMgr::checkExecUnlockPlayerWorldScene(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  char v29[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 13 scene_id:5192 48 4 13 quest_id:5185 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecUnlockPlayerWorldScene;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecUnlockPlayerWorldScene",
        5195);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v13,
              (const char (*)[32])"quest exec param format error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      p_lua_config_mgr = &TxtConfigMgr::getConfig(txt_config_mgr)->lua_config_mgr;
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, *(unsigned int *)(v4 + 32)) )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecUnlockPlayerWorldScene",
          5200);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                v21,
                (const char (*)[42])"quest exec param error: cant find scene: ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v4 + 32));
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v4 + 48));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecUnlockPlayerWorldScene",
      5189);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5207: range 000000000EF40B5E-000000000EF41609
__int64 __fastcall QuestExcelConfigMgr::checkExecModifyAranaraCollectionState(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned int *v7; // r8
  unsigned int *v8; // r9
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  CatalogExcelConfigMgr *p_catalog_config_mgr; // rcx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  uint32_t config_collection_type; // [rsp+24h] [rbp-1DCh]
  const data::AranaraCollectionExcelConfig *aranara_collection_config_ptr; // [rsp+28h] [rbp-1D8h]
  char v46[464]; // [rsp+30h] [rbp-1D0h] BYREF

  v4 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 32 4 20 collection_type:5214 48 4 18 collection_id:5215 64 4 17 target_state:5216 80 4 13 ques"
                        "t_id:5206 96 32 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecModifyAranaraCollectionState;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959118;
  v6[536862730] = -218959118;
  v6[536862732] = -202116109;
  *(_DWORD *)(v4 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) > 2 )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 48, txt_config_mgr);
    *(_DWORD *)(v4 + 48) = 0;
    if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 64, txt_config_mgr);
    *(_DWORD *)(v4 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
           &exec->param,
           (unsigned int *)(v4 + 32),
           (unsigned int *)(v4 + 48),
           (unsigned int *)(v4 + 64),
           v7,
           v8) )
    {
      if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 31) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecModifyAranaraCollectionState",
        5219);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 160),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v14,
              (const char (*)[32])"quest exec param format error: ");
      v16 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
      v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v17, (const char (*)[12])" quest_id: ");
      v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v4 + 80));
      v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v20, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 160));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      p_catalog_config_mgr = &txt_config_mgr->catalog_config_mgr;
      if ( *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 48);
      aranara_collection_config_ptr = data::CatalogExcelConfigMgrBase::findAranaraCollectionExcelConfig(
                                        p_catalog_config_mgr,
                                        *(unsigned int *)(v4 + 48));
      if ( aranara_collection_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&aranara_collection_config_ptr->aranara_collection_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)aranara_collection_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&aranara_collection_config_ptr->aranara_collection_type >> 3)
                                                                                       + 0x7FFF8000) )
        {
          __asan_report_load4(&aranara_collection_config_ptr->aranara_collection_type);
        }
        config_collection_type = aranara_collection_config_ptr->aranara_collection_type;
        if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(v4 + 32);
        if ( config_collection_type == *(_DWORD *)(v4 + 32) )
        {
          if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_load4(v4 + 64);
          if ( *(_DWORD *)(v4 + 64) <= 3u )
          {
            result = 0LL;
          }
          else
          {
            if ( *(char *)(((v4 + 352) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 383) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 352, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 352),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_manual/QuestExcelConfig.cpp",
              "checkExecModifyAranaraCollectionState",
              5236);
            v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 352),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v37 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    v36,
                    (const char (*)[39])"quest exec param error: target_state: ");
            v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v37,
                    (const unsigned int *)(v4 + 64));
            v39 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v38,
                    (const char (*)[12])" quest_id: ");
            v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v39,
                    (const unsigned int *)(v4 + 80));
            v41 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v40,
                    (const char (*)[13])" exec type: ");
            common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v41, &exec->type);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 352));
            result = 0xFFFFFFFFLL;
          }
        }
        else
        {
          if ( *(char *)(((v4 + 288) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 63) & 7) >= *(_BYTE *)(((v4 + 319) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 288, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 288),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_manual/QuestExcelConfig.cpp",
            "checkExecModifyAranaraCollectionState",
            5231);
          v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 288),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v29 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                  v28,
                  (const char (*)[40])"quest exec param error: collection_id: ");
          v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v29,
                  (const unsigned int *)(v4 + 48));
          v31 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  v30,
                  (const char (*)[19])" collection_type: ");
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v4 + 32));
          v33 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v32, (const char (*)[12])" quest_id: ");
          v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v33,
                  (const unsigned int *)(v4 + 80));
          v35 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v34, (const char (*)[13])" exec type: ");
          common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v35, &exec->type);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 288));
          result = 0xFFFFFFFFLL;
        }
      }
      else
      {
        if ( *(char *)(((v4 + 224) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 96 + 95) & 7) >= *(_BYTE *)(((v4 + 255) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 224, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecModifyAranaraCollectionState",
          5225);
        v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 224),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v23 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                v22,
                (const char (*)[50])"quest exec param error: cant find collection_id: ");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 48));
        v25 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v24, (const char (*)[12])" quest_id: ");
        v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v4 + 80));
        v27 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v26, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v27, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 224));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 127) & 7) >= *(_BYTE *)(((v4 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecModifyAranaraCollectionState",
      5210);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 96),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            v9,
            (const char (*)[41])"quest exec param count error. quest_id: ");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 80));
    v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v12, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 96));
    result = 0xFFFFFFFFLL;
  }
  if ( v46 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 5243: range 000000000EF4160A-000000000EF41C33
__int64 __fastcall QuestExcelConfigMgr::checkExecRollbackQuest(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const QuestExcelConfigMgr *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  char v29[304]; // [rsp+30h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 22 rollback_quest_id:5250 48 4 13 quest_id:5242 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecRollbackQuest;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecRollbackQuest",
        5253);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v13,
              (const char (*)[32])"quest exec param format error: ");
      v15 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" quest_id: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" exec type: ");
      common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v19, &exec->type);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v20 = this;
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( data::QuestExcelConfigMgrBase::findQuestExcelConfig(v20, *(unsigned int *)(v4 + 32)) )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecRollbackQuest",
          5259);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v22 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                v21,
                (const char (*)[51])"quest exec param error. cant find rollback quest: ");
        v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v4 + 32));
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" quest_id: ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v4 + 48));
        v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])" exec type: ");
        common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v26, &exec->type);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecRollbackQuest",
      5246);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           v7,
           (const char (*)[41])"quest exec param count error. quest_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v10, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5266: range 000000000EF41C34-000000000EF421D9
__int64 __fastcall QuestExcelConfigMgr::checkExecOptionalRevivalTeam(
        const QuestExcelConfigMgr *const this,
        const TxtConfigMgr *txt_config_mgr,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  __int64 result; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  char v22[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 17 revival_type:5272 48 4 13 quest_id:5265 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = QuestExcelConfigMgr::checkExecOptionalRevivalTeam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 32, txt_config_mgr);
    *(_DWORD *)(v4 + 32) = 0;
    v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v4 + 32), 1) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_manual/QuestExcelConfig.cpp",
        "checkExecOptionalRevivalTeam",
        5275);
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v15,
              (const char (*)[24])"strToNum failed, param:");
      v17 = std::vector<std::string>::operator[](&exec->param, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, v17);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      if ( *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v4 + 32);
      if ( *(_DWORD *)(v4 + 32) && *(_DWORD *)(v4 + 32) <= 3u )
      {
        result = 0LL;
      }
      else
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_manual/QuestExcelConfig.cpp",
          "checkExecOptionalRevivalTeam",
          5281);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v19 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                v18,
                (const char (*)[37])"invalid  revival_type, revival_type:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_manual/QuestExcelConfig.cpp",
      "checkExecOptionalRevivalTeam",
      5269);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v7, (const char (*)[15])"invalid param:");
    v9 = common::milog::MiLogStream::operator<<<std::string>(v8, &exec->param);
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])" quest_id: ");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
    v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])" exec type: ");
    common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v12, &exec->type);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    result = 0xFFFFFFFFLL;
  }
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};
