// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/json_data_manual/gcg_effect_condition_validator.cpp

// Line 24: range 000000000F1C63D6-000000000F1C6809
std::string *__cdecl getConditionNodeTagDesc(std::string *retstr, ConditionNodeTagType tag_type)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // rbx
  __int64 v5; // rax
  __int64 v6; // rax
  char v8[608]; // [rsp+10h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 32 9 <unknown> 112 392 5 ss:70";
  *(_QWORD *)(v2 + 16) = getConditionNodeTagDesc;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862735] = -218103808;
  v4[536862736] = -202116109;
  v4[536862737] = -202116109;
  std::string::basic_string(retstr);
  switch ( tag_type )
  {
    case ConditionNodeTagNone:
      std::string::operator=(retstr, &unk_1A503BC0);
      break;
    case ConditionNodeTagAny:
      std::string::operator=(retstr, &unk_1A503C00);
      break;
    case ConditionNodeTagNum:
      std::string::operator=(retstr, &unk_1A503A60);
      break;
    case ConditionNodeTagBool:
      std::string::operator=(retstr, &unk_1A503A20);
      break;
    case ConditionNodeTagCardObject:
      std::string::operator=(retstr, &unk_1A503AA0);
      break;
    case ConditionNodeTagSkillObject:
      std::string::operator=(retstr, &unk_1A503AE0);
      break;
    case ConditionNodeTagContextCardObject:
      std::string::operator=(retstr, &unk_1A503B20);
      break;
    case ConditionNodeTagContextSkillObject:
      std::string::operator=(retstr, &unk_1A503B60);
      break;
    default:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v2 + 112);
      v5 = std::operator<<<std::char_traits<char>>(v2 + 128, "ConditionNodeTagType[");
      v6 = std::ostream::operator<<(v5, (unsigned int)tag_type);
      std::operator<<<std::char_traits<char>>(v6, "]");
      if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 48, 32LL);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v2 + 48, v2 + 112);
      std::string::operator=(retstr, v2 + 48);
      std::string::~string((void *)(v2 + 48));
      *(_DWORD *)(((v2 + 48) >> 3) + 0x7FFF8000) = -117901064;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v2 + 112);
      break;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 234: range 000000000F1C680A-000000000F1C71FE
int32_t __cdecl ConfigGCGExecEffectDamageValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:234 64 8 13 __for_end:234 96 16 26 cast_config_effect_ptr:234 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectDamageValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectDamage,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectDamage>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectDamage> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageValidator",
        234);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        v12,
        (const char (*)[26])"ConfigGCGExecEffectDamage");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectDamageValidator",
            234);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDamageValidator",
              234);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageValidator",
          234);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectDamageValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectDamage>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectDamage> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectDamageValidator",
    234);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v9, (const char (*)[26])"ConfigGCGExecEffectDamage");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 235: range 000000000F1C71FF-000000000F1CACF1
int32_t __cdecl ConfigGCGExecEffectDamageValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectDamage *config_effect)
{
  int32_t v3; // r15d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  char v7; // cl
  const std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>> *p_declared_value_map; // rdx
  const std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>> *v9; // rdx
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const char *v13; // rsi
  int v14; // r13d
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v18; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v22; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int v26; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  char v28; // dl
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  int v31; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  char v33; // dl
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  int v36; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  char v38; // dl
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  int v41; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  char v43; // dl
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  int v46; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  char v48; // dl
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  int v51; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  char v53; // dl
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // r13
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v56; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v57; // rax
  __int64 type; // rsi
  unsigned __int64 v59; // rax
  unsigned __int64 v60; // rax
  const std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>> *v61; // rdx
  const std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>> *v62; // rdx
  bool v63; // al
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  const char *v66; // rsi
  int v67; // r13d
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v71; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v75; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v76; // rax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  int v79; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v80; // rax
  char v81; // dl
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  int v84; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v85; // rax
  char v86; // dl
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  int v89; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v90; // rax
  char v91; // dl
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // rax
  int v94; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v95; // rax
  char v96; // dl
  common::milog::MiLogStream *v97; // rax
  common::milog::MiLogStream *v98; // rax
  int v99; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v100; // rax
  char v101; // dl
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // rax
  int v104; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v105; // rax
  char v106; // dl
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // r13
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v109; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v110; // rax
  __int64 v111; // rsi
  unsigned __int64 v112; // rax
  unsigned __int64 v113; // rax
  __int64 v114; // rsi
  common::milog::MiLogStream *v115; // rax
  common::milog::MiLogStream *v116; // rax
  common::milog::MiLogStream *v117; // rax
  const char *v118; // rsi
  common::milog::MiLogStream *v119; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v121; // al
  int v122; // r13d
  std::initializer_list<data::GCGDeclaredValueType> __l; // [rsp+0h] [rbp-A40h]
  std::initializer_list<data::GCGDeclaredValueType> v125; // [rsp+10h] [rbp-A30h]
  std::initializer_list<data::GCGEffectCampType> v126; // [rsp+20h] [rbp-A20h]
  const data::ConfigGCGSkill *config_skilla; // [rsp+40h] [rbp-A00h]
  char v129[2512]; // [rsp+70h] [rbp-9D0h] BYREF

  config_skilla = config_skill;
  v4 = (unsigned __int64)v129;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_6(2464LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "55 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 8 9 <unknown> 288 8 8 iter:237 320 8 9 <unknown> 35"
                        "2 8 8 iter:238 384 8 9 <unknown> 416 12 9 <unknown> 448 16 22 declared_value_ptr:237 480 16 22 d"
                        "eclared_value_ptr:237 512 16 22 declared_value_ptr:237 544 16 22 declared_value_ptr:237 576 16 2"
                        "2 declared_value_ptr:237 608 16 22 declared_value_ptr:237 640 16 22 declared_value_ptr:238 672 1"
                        "6 22 declared_value_ptr:238 704 16 22 declared_value_ptr:238 736 16 22 declared_value_ptr:238 76"
                        "8 16 22 declared_value_ptr:238 800 16 22 declared_value_ptr:238 832 32 9 <unknown> 896 32 9 <unk"
                        "nown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <"
                        "unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32"
                        " 9 <unknown> 1600 32 9 <unknown> 1664 32 9 <unknown> 1728 32 9 <unknown> 1792 32 9 <unknown> 185"
                        "6 32 9 <unknown> 1920 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9 <unknown> 2112 32 9 <unknown>"
                        " 2176 56 28 valid_declared_value_set:237 2272 56 28 valid_declared_value_set:238 2368 56 23 vali"
                        "d_enum_type_set:240";
  *(_QWORD *)(v4 + 16) = ConfigGCGExecEffectDamageValidatorFunc;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234753535;
  v6[536862723] = -234753535;
  v6[536862724] = -234753535;
  v6[536862725] = -234753535;
  v6[536862726] = -234556924;
  v6[536862727] = -234556924;
  v6[536862728] = -218959360;
  v6[536862729] = -218959360;
  v6[536862730] = -218959360;
  v6[536862731] = -218959360;
  v6[536862732] = -218959360;
  v6[536862733] = -219020288;
  v6[536862734] = -219021312;
  v6[536862735] = -219021312;
  v6[536862736] = -219021312;
  v6[536862737] = -219021312;
  v6[536862738] = -219021312;
  v6[536862739] = -219021312;
  v6[536862740] = -219021312;
  v6[536862741] = -219021312;
  v6[536862742] = -219021312;
  v6[536862743] = -219021312;
  v6[536862744] = -219021312;
  v6[536862745] = -219021312;
  v6[536862747] = -218959118;
  v6[536862749] = -218959118;
  v6[536862751] = -218959118;
  v6[536862753] = -218959118;
  v6[536862755] = -218959118;
  v6[536862757] = -218959118;
  v6[536862759] = -218959118;
  v6[536862761] = -218959118;
  v6[536862763] = -218959118;
  v6[536862765] = -218959118;
  v6[536862767] = -218959118;
  v6[536862769] = -218959118;
  v6[536862771] = -218959118;
  v6[536862773] = -218959118;
  v6[536862775] = -218959118;
  v6[536862777] = -218959118;
  v6[536862779] = -218959118;
  v6[536862781] = -218959118;
  v6[536862783] = -218959118;
  v6[536862785] = -218959118;
  v6[536862787] = -218959118;
  v6[536862789] = -234881024;
  v6[536862790] = -218959118;
  v6[536862792] = -234881024;
  v6[536862793] = -218959118;
  v6[536862795] = -218103808;
  v6[536862796] = -202116109;
  if ( *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v4 + 256, config_skill);
  *(_DWORD *)(v4 + 256) = 0;
  v7 = *(_BYTE *)(((v4 + 260) >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)(((v4 - 96 + 100) & 7) + 3) >= v7 )
  {
    LOBYTE(config_skill) = v7 != 0;
    __asan_report_store4(v4 + 260, config_skill);
  }
  *(_DWORD *)(v4 + 260) = 2;
  __l._M_array = (std::initializer_list<data::GCGDeclaredValueType>::iterator)(v4 + 256);
  __l._M_len = 2LL;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v4 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v4 + 2176),
    __l,
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v4 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v4 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v4 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v4 + 80));
  *(_BYTE *)(((v4 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 256) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skilla->declared_value_map;
  if ( *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 288, v4 + 256);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v4 + 288) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_damage.key);
  *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) = 0;
  v9 = &config_skilla->declared_value_map;
  if ( *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 320, &config_effect->declared_damage);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v4 + 320) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v9);
  v10 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v4 + 288),
          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v4 + 320));
  *(_BYTE *)(((v4 + 320) >> 3) + 0x7FFF8000) = -8;
  if ( v10 )
  {
    *(_DWORD *)(((v4 + 832) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v4 + 832) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 863) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 863) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 832, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 832),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDamageValidatorFunc",
      237);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v4 + 832),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v11, (const char (*)[29])byte_1A5045A0);
    v13 = "declared_damage";
    common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v12, (const char (*)[16])"declared_damage");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 832));
    *(_DWORD *)(((v4 + 832) >> 3) + 0x7FFF8000) = -117901064;
    v3 = -1;
    v14 = 0;
  }
  else
  {
    v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v15->second) )
    {
      *(_DWORD *)(((v4 + 896) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 896) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 927) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 927) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 896, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 896),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageValidatorFunc",
        237);
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 896),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v17 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504620);
      v13 = "declared_damage";
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v17, (const char (*)[16])"declared_damage");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 896));
      *(_DWORD *)(((v4 + 896) >> 3) + 0x7FFF8000) = -117901064;
      v3 = -1;
      v14 = 0;
    }
    else
    {
      v18 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
      v19 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v4 + 2176),
              &v19->type) )
      {
        *(_DWORD *)(((v4 + 960) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 960) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 991) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 96 + 63) & 7) >= *(_BYTE *)(((v4 + 991) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 960, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 960),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageValidatorFunc",
          237);
        v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 960),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v21 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v20, (const char (*)[38])byte_1A504660);
        v13 = "declared_damage";
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v21, (const char (*)[16])"declared_damage");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 960));
        *(_DWORD *)(((v4 + 960) >> 3) + 0x7FFF8000) = -117901064;
        v3 = -1;
        v14 = 0;
      }
      else
      {
        v22 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
        v23 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22->second);
        if ( *(_BYTE *)(((unsigned __int64)&v23->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v23->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v23->type);
        }
        switch ( v23->type )
        {
          case Damage:
            *(_WORD *)(((v4 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
            if ( *(_WORD *)(((v4 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 448));
            v13 = (const char *)(v4 + 448);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v4 + 448)) )
            {
              *(_DWORD *)(((v4 + 1024) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1024) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1055) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 96 + 127) & 7) >= *(_BYTE *)(((v4 + 1055) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1024, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1024),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageValidatorFunc",
                237);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1024),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v24,
                      (const char (*)[16])"cast fail, key:");
              v13 = "declared_damage";
              common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v25,
                (const char (*)[16])"declared_damage");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1024));
              *(_DWORD *)(((v4 + 1024) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v26 = 0;
            }
            else
            {
              v27 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 448));
              v28 = *(_BYTE *)(((unsigned __int64)&v27->value >> 3) + 0x7FFF8000);
              LOBYTE(v13) = v28 != 0;
              if ( v28 != 0 && v28 <= 3 )
                __asan_report_load4(&v27->value);
              v26 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v4 + 448));
            *(_WORD *)(((v4 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( v26 )
              goto LABEL_100;
            v14 = 0;
            break;
          case Element:
            *(_WORD *)(((v4 + 480) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
            if ( *(_WORD *)(((v4 + 480) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 480));
            v13 = (const char *)(v4 + 480);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v4 + 480)) )
            {
              *(_DWORD *)(((v4 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1088) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1119) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 1119) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1088, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1088),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageValidatorFunc",
                237);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1088),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v29,
                      (const char (*)[16])"cast fail, key:");
              v13 = "declared_damage";
              common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v30,
                (const char (*)[16])"declared_damage");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1088));
              *(_DWORD *)(((v4 + 1088) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v31 = 0;
            }
            else
            {
              v32 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 480));
              v33 = *(_BYTE *)(((unsigned __int64)&v32->value >> 3) + 0x7FFF8000);
              LOBYTE(v13) = v33 != 0;
              if ( v33 != 0 && v33 <= 3 )
                __asan_report_load4(&v32->value);
              v31 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v4 + 480));
            *(_WORD *)(((v4 + 480) >> 3) + 0x7FFF8000) = -1800;
            if ( v31 )
              goto LABEL_100;
            v14 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v4 + 512) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
            if ( *(_WORD *)(((v4 + 512) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 512));
            v13 = (const char *)(v4 + 512);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v4 + 512)) )
            {
              *(_DWORD *)(((v4 + 1152) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1152) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1183) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 1183) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1152, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1152),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageValidatorFunc",
                237);
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1152),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v34,
                      (const char (*)[16])"cast fail, key:");
              v13 = "declared_damage";
              common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v35,
                (const char (*)[16])"declared_damage");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1152));
              *(_DWORD *)(((v4 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v36 = 0;
            }
            else
            {
              v37 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 512));
              v38 = *(_BYTE *)(((unsigned __int64)&v37->value >> 3) + 0x7FFF8000);
              LOBYTE(v13) = v38 != 0;
              if ( v38 != 0 && v38 <= 3 )
                __asan_report_load4(&v37->value);
              v36 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v4 + 512));
            *(_WORD *)(((v4 + 512) >> 3) + 0x7FFF8000) = -1800;
            if ( v36 )
              goto LABEL_100;
            v14 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v4 + 576) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
            if ( *(_WORD *)(((v4 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 576));
            v13 = (const char *)(v4 + 576);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v4 + 576)) )
            {
              *(_DWORD *)(((v4 + 1280) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1280) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1311) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 96 + 127) & 7) >= *(_BYTE *)(((v4 + 1311) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1280, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1280),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageValidatorFunc",
                237);
              v44 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1280),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v44,
                      (const char (*)[16])"cast fail, key:");
              v13 = "declared_damage";
              common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v45,
                (const char (*)[16])"declared_damage");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1280));
              *(_DWORD *)(((v4 + 1280) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v46 = 0;
            }
            else
            {
              v47 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 576));
              v48 = *(_BYTE *)(((unsigned __int64)&v47->value >> 3) + 0x7FFF8000);
              LOBYTE(v13) = v48 != 0;
              if ( v48 != 0 && v48 <= 3 )
                __asan_report_load4(&v47->value);
              v46 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v4 + 576));
            *(_WORD *)(((v4 + 576) >> 3) + 0x7FFF8000) = -1800;
            if ( v46 )
              goto LABEL_100;
            v14 = 0;
            break;
          case Heal:
            *(_WORD *)(((v4 + 544) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
            if ( *(_WORD *)(((v4 + 544) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 544));
            v13 = (const char *)(v4 + 544);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v4 + 544)) )
            {
              *(_DWORD *)(((v4 + 1216) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1216) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1247) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 96 + 63) & 7) >= *(_BYTE *)(((v4 + 1247) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1216, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1216),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageValidatorFunc",
                237);
              v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1216),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v39,
                      (const char (*)[16])"cast fail, key:");
              v13 = "declared_damage";
              common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v40,
                (const char (*)[16])"declared_damage");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1216));
              *(_DWORD *)(((v4 + 1216) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v41 = 0;
            }
            else
            {
              v42 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 544));
              v43 = *(_BYTE *)(((unsigned __int64)&v42->value >> 3) + 0x7FFF8000);
              LOBYTE(v13) = v43 != 0;
              if ( v43 != 0 && v43 <= 3 )
                __asan_report_load4(&v42->value);
              v41 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v4 + 544));
            *(_WORD *)(((v4 + 544) >> 3) + 0x7FFF8000) = -1800;
            if ( v41 )
              goto LABEL_100;
            v14 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v4 + 608) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
            if ( *(_WORD *)(((v4 + 608) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 608));
            v13 = (const char *)(v4 + 608);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v4 + 608)) )
            {
              *(_DWORD *)(((v4 + 1344) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 1344) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 1375) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 1375) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 1344, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 1344),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageValidatorFunc",
                237);
              v49 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v4 + 1344),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v49,
                      (const char (*)[16])"cast fail, key:");
              v13 = "declared_damage";
              common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v50,
                (const char (*)[16])"declared_damage");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1344));
              *(_DWORD *)(((v4 + 1344) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v51 = 0;
            }
            else
            {
              v52 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 608));
              v53 = *(_BYTE *)(((unsigned __int64)&v52->value >> 3) + 0x7FFF8000);
              LOBYTE(v13) = v53 != 0;
              if ( v53 != 0 && v53 <= 3 )
                __asan_report_load4(&v52->value);
              v51 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v4 + 608));
            *(_WORD *)(((v4 + 608) >> 3) + 0x7FFF8000) = -1800;
            if ( v51 )
LABEL_100:
              v14 = 1;
            else
              v14 = 0;
            break;
          default:
            *(_DWORD *)(((v4 + 1408) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 1408) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1439) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 1439) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1408, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 1408),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDamageValidatorFunc",
              237);
            v54 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 1408),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v55 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v54,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = 4;
            v56 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 288));
            v57 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v56->second);
            if ( *(_BYTE *)(((unsigned __int64)&v57->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v57->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v57->type);
            }
            type = (unsigned int)v57->type;
            if ( *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v4 + 192, type);
            *(_DWORD *)(v4 + 192) = type;
            v13 = (const char *)(v4 + 192);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v55,
              (const unsigned int *)(v4 + 192));
            *(_BYTE *)(((v4 + 192) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1408));
            *(_DWORD *)(((v4 + 1408) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v14 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v4 + 2176));
  v59 = ((v4 + 2176) >> 3) + 2147450880;
  *(_DWORD *)v59 = -117901064;
  *(_WORD *)(v59 + 4) = -1800;
  *(_BYTE *)(v59 + 6) = -8;
  *(_BYTE *)(((v4 + 288) >> 3) + 0x7FFF8000) = -8;
  if ( v14 == 1 )
  {
    v60 = ((v4 + 2272) >> 3) + 2147450880;
    *(_DWORD *)v60 = 0;
    *(_WORD *)(v60 + 4) = 0;
    *(_BYTE *)(v60 + 6) = 0;
    *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v4 + 208, v13);
    *(_DWORD *)(v4 + 208) = 1;
    v125._M_array = (std::initializer_list<data::GCGDeclaredValueType>::iterator)(v4 + 208);
    v125._M_len = 1LL;
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v4 + 128));
    std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
      (std::unordered_set<data::GCGDeclaredValueType> *const)(v4 + 2272),
      v125,
      0LL,
      (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v4 + 96),
      (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v4 + 112),
      (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v4 + 128));
    std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v4 + 128));
    *(_BYTE *)(((v4 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 208) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) = 0;
    v61 = &config_skilla->declared_value_map;
    if ( *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 352, v4 + 208);
    *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v4 + 352) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(v61, &config_effect->declared_element.key);
    *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) = 0;
    v62 = &config_skilla->declared_value_map;
    if ( *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 384, &config_effect->declared_element);
    *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v4 + 384) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v62);
    v63 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v4 + 352),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v4 + 384));
    *(_BYTE *)(((v4 + 384) >> 3) + 0x7FFF8000) = -8;
    if ( v63 )
    {
      *(_DWORD *)(((v4 + 1472) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 1472) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 1503) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 96 + 63) & 7) >= *(_BYTE *)(((v4 + 1503) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 1472, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 1472),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageValidatorFunc",
        238);
      v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 1472),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v65 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v64, (const char (*)[29])byte_1A5045A0);
      v66 = "declared_element";
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v65, (const char (*)[17])"declared_element");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1472));
      *(_DWORD *)(((v4 + 1472) >> 3) + 0x7FFF8000) = -117901064;
      v3 = -1;
      v67 = 0;
    }
    else
    {
      v68 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
      if ( std::operator==<data::GCGDeclaredValue>(0LL, &v68->second) )
      {
        *(_DWORD *)(((v4 + 1536) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 1536) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 1567) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 96 + 127) & 7) >= *(_BYTE *)(((v4 + 1567) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 1536, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 1536),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageValidatorFunc",
          238);
        v69 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 1536),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v70 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v69, (const char (*)[32])byte_1A504620);
        v66 = "declared_element";
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v70, (const char (*)[17])"declared_element");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1536));
        *(_DWORD *)(((v4 + 1536) >> 3) + 0x7FFF8000) = -117901064;
        v3 = -1;
        v67 = 0;
      }
      else
      {
        v71 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
        v72 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v71->second);
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
                (std::unordered_set<data::GCGDeclaredValueType> *)(v4 + 2272),
                &v72->type) )
        {
          *(_DWORD *)(((v4 + 1600) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 1600) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 1631) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 1631) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 1600, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 1600),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectDamageValidatorFunc",
            238);
          v73 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 1600),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v74 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v73, (const char (*)[38])byte_1A504660);
          v66 = "declared_element";
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v74, (const char (*)[17])"declared_element");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1600));
          *(_DWORD *)(((v4 + 1600) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v67 = 0;
        }
        else
        {
          v75 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
          v76 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v75->second);
          if ( *(_BYTE *)(((unsigned __int64)&v76->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v76->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&v76->type);
          }
          switch ( v76->type )
          {
            case Damage:
              *(_WORD *)(((v4 + 640) >> 3) + 0x7FFF8000) = 0;
              std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
              if ( *(_WORD *)(((v4 + 640) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 640));
              v66 = (const char *)(v4 + 640);
              if ( std::operator==<data::GCGDeclaredValueDamage>(
                     0LL,
                     (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v4 + 640)) )
              {
                *(_DWORD *)(((v4 + 1664) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1664) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 1695) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 1695) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1664, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1664),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "ConfigGCGExecEffectDamageValidatorFunc",
                  238);
                v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 1664),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v78 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v77,
                        (const char (*)[16])"cast fail, key:");
                v66 = "declared_element";
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v78,
                  (const char (*)[17])"declared_element");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1664));
                *(_DWORD *)(((v4 + 1664) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v79 = 0;
              }
              else
              {
                v80 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 640));
                v81 = *(_BYTE *)(((unsigned __int64)&v80->value >> 3) + 0x7FFF8000);
                LOBYTE(v66) = v81 != 0;
                if ( v81 != 0 && v81 <= 3 )
                  __asan_report_load4(&v80->value);
                v79 = 1;
              }
              std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v4 + 640));
              *(_WORD *)(((v4 + 640) >> 3) + 0x7FFF8000) = -1800;
              if ( v79 )
                goto LABEL_196;
              v67 = 0;
              break;
            case Element:
              *(_WORD *)(((v4 + 672) >> 3) + 0x7FFF8000) = 0;
              std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
              if ( *(_WORD *)(((v4 + 672) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 672));
              v66 = (const char *)(v4 + 672);
              if ( std::operator==<data::GCGDeclaredValueElement>(
                     0LL,
                     (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v4 + 672)) )
              {
                *(_DWORD *)(((v4 + 1728) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1728) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 1759) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 96 + 63) & 7) >= *(_BYTE *)(((v4 + 1759) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1728, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1728),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "ConfigGCGExecEffectDamageValidatorFunc",
                  238);
                v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 1728),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v83 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v82,
                        (const char (*)[16])"cast fail, key:");
                v66 = "declared_element";
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v83,
                  (const char (*)[17])"declared_element");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1728));
                *(_DWORD *)(((v4 + 1728) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v84 = 0;
              }
              else
              {
                v85 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 672));
                v86 = *(_BYTE *)(((unsigned __int64)&v85->value >> 3) + 0x7FFF8000);
                LOBYTE(v66) = v86 != 0;
                if ( v86 != 0 && v86 <= 3 )
                  __asan_report_load4(&v85->value);
                v84 = 1;
              }
              std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v4 + 672));
              *(_WORD *)(((v4 + 672) >> 3) + 0x7FFF8000) = -1800;
              if ( v84 )
                goto LABEL_196;
              v67 = 0;
              break;
            case IndirectDamage:
              *(_WORD *)(((v4 + 704) >> 3) + 0x7FFF8000) = 0;
              std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
              if ( *(_WORD *)(((v4 + 704) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 704));
              v66 = (const char *)(v4 + 704);
              if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                     0LL,
                     (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v4 + 704)) )
              {
                *(_DWORD *)(((v4 + 1792) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1792) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 1823) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 96 + 127) & 7) >= *(_BYTE *)(((v4 + 1823) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1792, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1792),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "ConfigGCGExecEffectDamageValidatorFunc",
                  238);
                v87 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 1792),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v88 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v87,
                        (const char (*)[16])"cast fail, key:");
                v66 = "declared_element";
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v88,
                  (const char (*)[17])"declared_element");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1792));
                *(_DWORD *)(((v4 + 1792) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v89 = 0;
              }
              else
              {
                v90 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 704));
                v91 = *(_BYTE *)(((unsigned __int64)&v90->value >> 3) + 0x7FFF8000);
                LOBYTE(v66) = v91 != 0;
                if ( v91 != 0 && v91 <= 3 )
                  __asan_report_load4(&v90->value);
                v89 = 1;
              }
              std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v4 + 704));
              *(_WORD *)(((v4 + 704) >> 3) + 0x7FFF8000) = -1800;
              if ( v89 )
                goto LABEL_196;
              v67 = 0;
              break;
            case EffectNum:
              *(_WORD *)(((v4 + 768) >> 3) + 0x7FFF8000) = 0;
              std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
              if ( *(_WORD *)(((v4 + 768) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 768));
              v66 = (const char *)(v4 + 768);
              if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                     0LL,
                     (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v4 + 768)) )
              {
                *(_DWORD *)(((v4 + 1920) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1920) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 1951) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 1951) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1920, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1920),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "ConfigGCGExecEffectDamageValidatorFunc",
                  238);
                v97 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 1920),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v98 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v97,
                        (const char (*)[16])"cast fail, key:");
                v66 = "declared_element";
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v98,
                  (const char (*)[17])"declared_element");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1920));
                *(_DWORD *)(((v4 + 1920) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v99 = 0;
              }
              else
              {
                v100 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 768));
                v101 = *(_BYTE *)(((unsigned __int64)&v100->value >> 3) + 0x7FFF8000);
                LOBYTE(v66) = v101 != 0;
                if ( v101 != 0 && v101 <= 3 )
                  __asan_report_load4(&v100->value);
                v99 = 1;
              }
              std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v4 + 768));
              *(_WORD *)(((v4 + 768) >> 3) + 0x7FFF8000) = -1800;
              if ( v99 )
                goto LABEL_196;
              v67 = 0;
              break;
            case Heal:
              *(_WORD *)(((v4 + 736) >> 3) + 0x7FFF8000) = 0;
              std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
              if ( *(_WORD *)(((v4 + 736) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 736));
              v66 = (const char *)(v4 + 736);
              if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                     0LL,
                     (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v4 + 736)) )
              {
                *(_DWORD *)(((v4 + 1856) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1856) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 1887) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 1887) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1856, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1856),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "ConfigGCGExecEffectDamageValidatorFunc",
                  238);
                v92 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v4 + 1856),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                v93 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        v92,
                        (const char (*)[16])"cast fail, key:");
                v66 = "declared_element";
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v93,
                  (const char (*)[17])"declared_element");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1856));
                *(_DWORD *)(((v4 + 1856) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v94 = 0;
              }
              else
              {
                v95 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 736));
                v96 = *(_BYTE *)(((unsigned __int64)&v95->value >> 3) + 0x7FFF8000);
                LOBYTE(v66) = v96 != 0;
                if ( v96 != 0 && v96 <= 3 )
                  __asan_report_load4(&v95->value);
                v94 = 1;
              }
              std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v4 + 736));
              *(_WORD *)(((v4 + 736) >> 3) + 0x7FFF8000) = -1800;
              if ( v94 )
                goto LABEL_196;
              v67 = 0;
              break;
            case TokenType:
              *(_WORD *)(((v4 + 800) >> 3) + 0x7FFF8000) = 0;
              std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
              if ( *(_WORD *)(((v4 + 800) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 800));
              v66 = (const char *)(v4 + 800);
              if ( std::operator==<data::GCGDeclaredValueToken>(
                     0LL,
                     (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v4 + 800)) )
              {
                *(_DWORD *)(((v4 + 1984) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v4 + 1984) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v4 + 2015) >> 3) + 0x7FFF8000) != 0
                  && (char)((v4 - 96 + 63) & 7) >= *(_BYTE *)(((v4 + 2015) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v4 + 1984, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 1984),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "ConfigGCGExecEffectDamageValidatorFunc",
                  238);
                v102 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v4 + 1984),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v103 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         v102,
                         (const char (*)[16])"cast fail, key:");
                v66 = "declared_element";
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v103,
                  (const char (*)[17])"declared_element");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 1984));
                *(_DWORD *)(((v4 + 1984) >> 3) + 0x7FFF8000) = -117901064;
                v3 = -1;
                v104 = 0;
              }
              else
              {
                v105 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 800));
                v106 = *(_BYTE *)(((unsigned __int64)&v105->value >> 3) + 0x7FFF8000);
                LOBYTE(v66) = v106 != 0;
                if ( v106 != 0 && v106 <= 3 )
                  __asan_report_load4(&v105->value);
                v104 = 1;
              }
              std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v4 + 800));
              *(_WORD *)(((v4 + 800) >> 3) + 0x7FFF8000) = -1800;
              if ( v104 )
LABEL_196:
                v67 = 1;
              else
                v67 = 0;
              break;
            default:
              *(_DWORD *)(((v4 + 2048) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v4 + 2048) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v4 + 2079) >> 3) + 0x7FFF8000) != 0
                && (char)((v4 - 96 + 127) & 7) >= *(_BYTE *)(((v4 + 2079) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v4 + 2048, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 2048),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageValidatorFunc",
                238);
              v107 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v4 + 2048),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v108 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                       v107,
                       (const char (*)[36])"invalid GCGDeclaredValueType, type:");
              *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = 4;
              v109 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 352));
              v110 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v109->second);
              if ( *(_BYTE *)(((unsigned __int64)&v110->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v110->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v110->type);
              }
              v111 = (unsigned int)v110->type;
              if ( *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_store4(v4 + 224, v111);
              *(_DWORD *)(v4 + 224) = v111;
              v66 = (const char *)(v4 + 224);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v108,
                (const unsigned int *)(v4 + 224));
              *(_BYTE *)(((v4 + 224) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2048));
              *(_DWORD *)(((v4 + 2048) >> 3) + 0x7FFF8000) = -117901064;
              v3 = -1;
              v67 = 0;
              break;
          }
        }
      }
    }
    std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v4 + 2272));
    v112 = ((v4 + 2272) >> 3) + 2147450880;
    *(_DWORD *)v112 = -117901064;
    *(_WORD *)(v112 + 4) = -1800;
    *(_BYTE *)(v112 + 6) = -8;
    *(_BYTE *)(((v4 + 352) >> 3) + 0x7FFF8000) = -8;
    if ( v67 == 1 )
    {
      v113 = ((v4 + 2368) >> 3) + 2147450880;
      *(_DWORD *)v113 = 0;
      *(_WORD *)(v113 + 4) = 0;
      *(_BYTE *)(v113 + 6) = 0;
      *(_WORD *)(((v4 + 416) >> 3) + 0x7FFF8000) = 1024;
      if ( *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v4 + 416, v66);
      *(_DWORD *)(v4 + 416) = 0;
      v114 = (((_BYTE)v4 - 96 + 4) & 7u) + 3;
      if ( *(_BYTE *)(((v4 + 420) >> 3) + 0x7FFF8000) != 0
        && (char)(((v4 - 96 + 4) & 7) + 3) >= *(_BYTE *)(((v4 + 420) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v4 + 420, v114);
      }
      *(_DWORD *)(v4 + 420) = 1;
      if ( *(_BYTE *)(((v4 + 424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v4 + 424) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v4 + 424, v114);
      *(_DWORD *)(v4 + 424) = 2;
      v126._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v4 + 416);
      v126._M_len = 3LL;
      *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v4 + 176));
      std::unordered_set<data::GCGEffectCampType>::unordered_set(
        (std::unordered_set<data::GCGEffectCampType> *const)(v4 + 2368),
        v126,
        0LL,
        (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v4 + 144),
        (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v4 + 160),
        (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v4 + 176));
      std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v4 + 176));
      *(_BYTE *)(((v4 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v4 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v4 + 416) >> 3) + 0x7FFF8000) = -1800;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
              (std::unordered_set<data::GCGEffectCampType> *)(v4 + 2368),
              &config_effect->target_camp) )
      {
        *(_DWORD *)(((v4 + 2112) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v4 + 2112) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 2143) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 2143) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 2112, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 2112),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageValidatorFunc",
          240);
        v115 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 (common::milog::MiLogStream *const)(v4 + 2112),
                 (const char (*)[16])"[CONFIG_ERROR] ");
        v116 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v115, (const char (*)[31])byte_1A5047A0);
        v117 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                 v116,
                 (const char (*)[26])"config_effect.target_camp");
        v118 = " value:";
        v119 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v117, (const char (*)[8])" value:");
        *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                       + 0x7FFF8000) )
        {
          __asan_report_load4(&config_effect->target_camp);
        }
        target_camp = config_effect->target_camp;
        v121 = *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000);
        if ( v121 != 0 && v121 <= 3 )
        {
          target_camp = v4 + 240;
          LOBYTE(v118) = v121 != 0;
          __asan_report_store4(v4 + 240, v118);
        }
        *(_DWORD *)(v4 + 240) = target_camp;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v119, (const unsigned int *)(v4 + 240));
        *(_BYTE *)(((v4 + 240) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 2112));
        *(_DWORD *)(((v4 + 2112) >> 3) + 0x7FFF8000) = -117901064;
        v3 = -1;
        v122 = 0;
      }
      else
      {
        v122 = 1;
      }
      std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v4 + 2368));
      if ( v122 == 1 )
        v3 = 0;
    }
  }
  if ( v129 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8120) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 296) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v4 >> 3) + 0x7FFF812C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_6(v4, 2464LL, v129);
  }
  return v3;
};

// Line 248: range 000000000F1CACF2-000000000F1CB6E6
int32_t __cdecl ConfigGCGExecEffectSetDamageElementValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectSetDamageElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:248 64 8 13 __for_end:248 96 16 26 cast_config_effect_ptr:248 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectSetDamageElementValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectSetDamageElement,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectSetDamageElement>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectSetDamageElement> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectSetDamageElementValidator",
        248);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        v12,
        (const char (*)[36])"ConfigGCGExecEffectSetDamageElement");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectSetDamageElementValidator",
            248);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectSetDamageElementValidator",
              248);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectSetDamageElementValidator",
          248);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectSetDamageElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectSetDamageElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectSetDamageElementValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectSetDamageElement>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectSetDamageElement> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectSetDamageElementValidator",
    248);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
    v9,
    (const char (*)[36])"ConfigGCGExecEffectSetDamageElement");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 249: range 000000000F1CB6E7-000000000F1CC1D0
int32_t __cdecl ConfigGCGExecEffectSetDamageElementValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectSetDamageElement *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::GCGEffectTargetChooseType *p_choose_type; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  common::milog::MiLogStream *v11; // rcx
  data::GCGEffectTargetChooseType choose_type; // edi
  char v13; // al
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rax
  __int64 v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const char *v20; // rsi
  common::milog::MiLogStream *v21; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v23; // al
  int v24; // r14d
  int32_t result; // eax
  std::initializer_list<data::GCGEffectTargetChooseType> __la; // [rsp+10h] [rbp-280h]
  int __l; // [rsp+10h] [rbp-280h]
  int32_t v28; // [rsp+24h] [rbp-26Ch]
  char v30[592]; // [rsp+40h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 12 9 <unknown> 224 32 9 <un"
                        "known> 288 32 9 <unknown> 352 56 23 valid_enum_type_set:252 448 56 23 valid_enum_type_set:253";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectSetDamageElementValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556927;
  v5[536862725] = -234556924;
  v5[536862726] = -219020288;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -234881024;
  v5[536862733] = -218959118;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 144, config_skill);
  *(_DWORD *)(v3 + 144) = 2;
  __la._M_array = (std::initializer_list<data::GCGEffectTargetChooseType>::iterator)(v3 + 144);
  __la._M_len = 1LL;
  std::allocator<data::GCGEffectTargetChooseType>::allocator((std::allocator<data::GCGEffectTargetChooseType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectTargetChooseType>::unordered_set(
    (std::unordered_set<data::GCGEffectTargetChooseType> *const)(v3 + 352),
    __la,
    0LL,
    (const std::unordered_set<data::GCGEffectTargetChooseType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectTargetChooseType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectTargetChooseType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectTargetChooseType>::~allocator((std::allocator<data::GCGEffectTargetChooseType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
  p_choose_type = &config_effect->choose_type;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectTargetChooseType>,data::GCGEffectTargetChooseType>(
          (std::unordered_set<data::GCGEffectTargetChooseType> *)(v3 + 352),
          &config_effect->choose_type) )
  {
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectSetDamageElementValidatorFunc",
      252);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v7, (const char (*)[31])byte_1A5047A0);
    v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           v8,
           (const char (*)[26])"config_effect.choose_type");
    v10 = " value:";
    v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->choose_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->choose_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->choose_type);
    }
    choose_type = config_effect->choose_type;
    v13 = *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      choose_type = v3 + 160;
      LOBYTE(v10) = v13 != 0;
      __asan_report_store4(v3 + 160, v10);
    }
    *(_DWORD *)(v3 + 160) = choose_type;
    p_choose_type = (data::GCGEffectTargetChooseType *)(v3 + 160);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 160));
    *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -117901064;
    v28 = -1;
    __l = 0;
  }
  else
  {
    __l = 1;
  }
  std::unordered_set<data::GCGEffectTargetChooseType>::~unordered_set((std::unordered_set<data::GCGEffectTargetChooseType> *const)(v3 + 352));
  v14 = ((v3 + 352) >> 3) + 2147450880;
  *(_DWORD *)v14 = -117901064;
  *(_WORD *)(v14 + 4) = -1800;
  *(_BYTE *)(v14 + 6) = -8;
  if ( __l == 1 )
  {
    v15 = ((v3 + 448) >> 3) + 2147450880;
    *(_DWORD *)v15 = 0;
    *(_WORD *)(v15 + 4) = 0;
    *(_BYTE *)(v15 + 6) = 0;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 192, p_choose_type);
    *(_DWORD *)(v3 + 192) = 0;
    v16 = (((_BYTE)v3 - 64 + 4) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 64 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 196, v16);
    }
    *(_DWORD *)(v3 + 196) = 1;
    if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 200, v16);
    *(_DWORD *)(v3 + 200) = 2;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 192),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 112),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 128));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 448),
            &config_effect->target_camp) )
    {
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectSetDamageElementValidatorFunc",
        253);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v17, (const char (*)[31])byte_1A5047A0);
      v19 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v18,
              (const char (*)[26])"config_effect.target_camp");
      v20 = " value:";
      v21 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v19, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_effect->target_camp);
      }
      target_camp = config_effect->target_camp;
      v23 = *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000);
      if ( v23 != 0 && v23 <= 3 )
      {
        target_camp = v3 + 176;
        LOBYTE(v20) = v23 != 0;
        __asan_report_store4(v3 + 176, v20);
      }
      *(_DWORD *)(v3 + 176) = target_camp;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 176));
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
      v28 = -1;
      v24 = 0;
    }
    else
    {
      v24 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448));
    if ( v24 == 1 )
      v28 = 0;
  }
  result = v28;
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 261: range 000000000F1CC1D1-000000000F1CCBC5
int32_t __cdecl ConfigGCGExecEffectHealValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectHeal,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:261 64 8 13 __for_end:261 96 16 26 cast_config_effect_ptr:261 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectHealValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectHeal,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectHeal>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectHeal> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectHealValidator",
        261);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
        v12,
        (const char (*)[24])"ConfigGCGExecEffectHeal");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectHealValidator",
            261);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectHealValidator",
              261);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectHealValidator",
          261);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectHeal,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectHeal,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectHealValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectHeal>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectHeal> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectHealValidator",
    261);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v9, (const char (*)[24])"ConfigGCGExecEffectHeal");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 262: range 000000000F1CCBC6-000000000F1CF3E0
int32_t __cdecl ConfigGCGExecEffectHealValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectHeal *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // rsi
  _QWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  int v12; // r13d
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v16; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v20; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int v24; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  char v26; // dl
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  char v31; // dl
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  int v39; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  char v41; // dl
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int v44; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  char v46; // dl
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  int v49; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  char v51; // dl
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // r13
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v54; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  __int64 type; // rsi
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rax
  unsigned __int64 v59; // rax
  __int64 v60; // rsi
  __int64 v61; // rsi
  __int64 v62; // rsi
  __int64 v63; // rsi
  unsigned __int64 v64; // rax
  data::GCGChooseTargetCharaterType *p_target_character; // rsi
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  const char *v69; // rsi
  common::milog::MiLogStream *v70; // rcx
  data::GCGChooseTargetCharaterType target_character; // edi
  char v72; // al
  int v73; // r13d
  unsigned __int64 v74; // rax
  unsigned __int64 v75; // rax
  __int64 v76; // rsi
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  const char *v80; // rsi
  common::milog::MiLogStream *v81; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v83; // al
  int v84; // r13d
  std::initializer_list<data::GCGChooseTargetCharaterType> __l; // [rsp+0h] [rbp-710h]
  std::initializer_list<data::GCGEffectCampType> v87; // [rsp+10h] [rbp-700h]
  unsigned __int64 v88; // [rsp+28h] [rbp-6E8h]
  int32_t v89; // [rsp+34h] [rbp-6DCh]
  char v92[1712]; // [rsp+60h] [rbp-6B0h] BYREF

  v88 = (unsigned __int64)v92;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1664LL);
    if ( v3 )
      v88 = v3;
  }
  *(_QWORD *)v88 = 1102416563LL;
  *(_QWORD *)(v88 + 8) = "38 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9"
                         " <unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 4 9 <unknown> 192 4 9 <unk"
                         "nown> 208 4 9 <unknown> 224 4 9 <unknown> 240 8 8 iter:264 272 8 9 <unknown> 304 12 9 <unknown>"
                         " 336 16 22 declared_value_ptr:264 368 16 22 declared_value_ptr:264 400 16 22 declared_value_ptr"
                         ":264 432 16 22 declared_value_ptr:264 464 16 22 declared_value_ptr:264 496 16 22 declared_value"
                         "_ptr:264 528 32 9 <unknown> 592 32 9 <unknown> 656 32 9 <unknown> 720 32 9 <unknown> 784 32 9 <"
                         "unknown> 848 32 9 <unknown> 912 32 9 <unknown> 976 32 9 <unknown> 1040 32 9 <unknown> 1104 32 9"
                         " <unknown> 1168 32 9 <unknown> 1232 32 9 <unknown> 1296 36 9 <unknown> 1376 56 28 valid_declare"
                         "d_value_set:264 1472 56 23 valid_enum_type_set:266 1568 56 23 valid_enum_type_set:276";
  *(_QWORD *)(v88 + 16) = ConfigGCGExecEffectHealValidatorFunc;
  v4 = (_DWORD *)(v88 >> 3);
  v5 = v4;
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234556927;
  v4[536862726] = -234556924;
  v4[536862727] = 61956;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862729] = 0x4000000;
  v4[536862730] = 62194;
  v4[536862731] = 62194;
  v4[536862732] = 62194;
  v4[536862733] = 62194;
  v4[536862734] = 62194;
  v4[536862735] = 62194;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -219021312;
  v4[536862752] = 62194;
  v4[536862753] = -219021312;
  v4[536862754] = 62194;
  v4[536862755] = -219021312;
  v4[536862756] = 62194;
  v4[536862757] = -219021312;
  v4[536862758] = 62194;
  v4[536862759] = -219021312;
  v4[536862760] = 62194;
  v4[536862761] = -234618880;
  v4[536862762] = -218959118;
  v4[536862764] = -234881024;
  v4[536862765] = -218959118;
  v4[536862767] = -234881024;
  v4[536862768] = -218959118;
  v4[536862770] = -218103808;
  v4[536862771] = -202116109;
  if ( *(_BYTE *)(((v88 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v88 + 176, v4);
  *(_DWORD *)(v88 + 176) = 5;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v88 + 64));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v88 + 1376),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v88 + 176),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v88 + 32),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v88 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v88 + 64));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v88 + 64));
  *(_BYTE *)(((v88 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v88 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v88 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v88 + 176) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v88 + 240) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v88 + 240) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v88 + 240, v88 + 176);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v88 + 240) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_heal_amount_key.key);
  *(_BYTE *)(((v88 + 272) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v88 + 272) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v88 + 272, &config_effect->declared_heal_amount_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v88 + 272) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v88 + 240),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v88 + 272));
  *(_BYTE *)(((v88 + 272) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v88 + 528) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v88 + 528) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v88 + 559) >> 3) + 0x7FFF8000) != 0
      && (char)((v88 + 47) & 7) >= *(_BYTE *)(((v88 + 559) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v88 + 528, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v88 + 528),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectHealValidatorFunc",
      264);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v88 + 528),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_heal_amount_key";
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v10, (const char (*)[25])"declared_heal_amount_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 528));
    *(_DWORD *)(((v88 + 528) >> 3) + 0x7FFF8000) = -117901064;
    v89 = -1;
    v12 = 0;
  }
  else
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v13->second) )
    {
      *(_DWORD *)(((v88 + 592) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v88 + 592) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v88 + 623) >> 3) + 0x7FFF8000) != 0
        && (char)((v88 + 111) & 7) >= *(_BYTE *)(((v88 + 623) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v88 + 592, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v88 + 592),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectHealValidatorFunc",
        264);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v88 + 592),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v14, (const char (*)[32])byte_1A504620);
      v11 = "declared_heal_amount_key";
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        v15,
        (const char (*)[25])"declared_heal_amount_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 592));
      *(_DWORD *)(((v88 + 592) >> 3) + 0x7FFF8000) = -117901064;
      v89 = -1;
      v12 = 0;
    }
    else
    {
      v16 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
      v17 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v88 + 1376),
              &v17->type) )
      {
        *(_DWORD *)(((v88 + 656) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v88 + 656) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v88 + 687) >> 3) + 0x7FFF8000) != 0
          && (char)((v88 - 81) & 7) >= *(_BYTE *)(((v88 + 687) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v88 + 656, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v88 + 656),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectHealValidatorFunc",
          264);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v88 + 656),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v19 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v18, (const char (*)[38])byte_1A504660);
        v11 = "declared_heal_amount_key";
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          v19,
          (const char (*)[25])"declared_heal_amount_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 656));
        *(_DWORD *)(((v88 + 656) >> 3) + 0x7FFF8000) = -117901064;
        v89 = -1;
        v12 = 0;
      }
      else
      {
        v20 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
        v21 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20->second);
        if ( *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v21->type);
        }
        switch ( v21->type )
        {
          case Damage:
            *(_WORD *)(((v88 + 336) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
            if ( *(_WORD *)(((v88 + 336) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v88 + 336));
            v11 = (const char *)(v88 + 336);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v88 + 336)) )
            {
              *(_DWORD *)(((v88 + 720) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v88 + 720) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v88 + 751) >> 3) + 0x7FFF8000) != 0
                && (char)((v88 - 17) & 7) >= *(_BYTE *)(((v88 + 751) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v88 + 720, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v88 + 720),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectHealValidatorFunc",
                264);
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v88 + 720),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v22,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v23,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 720));
              *(_DWORD *)(((v88 + 720) >> 3) + 0x7FFF8000) = -117901064;
              v89 = -1;
              v24 = 0;
            }
            else
            {
              v25 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v88 + 336));
              v26 = *(_BYTE *)(((unsigned __int64)&v25->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v26 != 0;
              if ( v26 != 0 && v26 <= 3 )
                __asan_report_load4(&v25->value);
              v24 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v88 + 336));
            *(_WORD *)(((v88 + 336) >> 3) + 0x7FFF8000) = -1800;
            if ( v24 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Element:
            *(_WORD *)(((v88 + 368) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
            if ( *(_WORD *)(((v88 + 368) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v88 + 368));
            v11 = (const char *)(v88 + 368);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v88 + 368)) )
            {
              *(_DWORD *)(((v88 + 784) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v88 + 784) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v88 + 815) >> 3) + 0x7FFF8000) != 0
                && (char)((v88 + 47) & 7) >= *(_BYTE *)(((v88 + 815) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v88 + 784, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v88 + 784),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectHealValidatorFunc",
                264);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v88 + 784),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v27,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v28,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 784));
              *(_DWORD *)(((v88 + 784) >> 3) + 0x7FFF8000) = -117901064;
              v89 = -1;
              v29 = 0;
            }
            else
            {
              v30 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v88 + 368));
              v31 = *(_BYTE *)(((unsigned __int64)&v30->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v31 != 0;
              if ( v31 != 0 && v31 <= 3 )
                __asan_report_load4(&v30->value);
              v29 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v88 + 368));
            *(_WORD *)(((v88 + 368) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              goto LABEL_98;
            v12 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v88 + 400) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
            if ( *(_WORD *)(((v88 + 400) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v88 + 400));
            v11 = (const char *)(v88 + 400);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v88 + 400)) )
            {
              *(_DWORD *)(((v88 + 848) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v88 + 848) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v88 + 879) >> 3) + 0x7FFF8000) != 0
                && (char)((v88 + 111) & 7) >= *(_BYTE *)(((v88 + 879) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v88 + 848, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v88 + 848),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectHealValidatorFunc",
                264);
              v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v88 + 848),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v32,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v33,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 848));
              *(_DWORD *)(((v88 + 848) >> 3) + 0x7FFF8000) = -117901064;
              v89 = -1;
              v34 = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v88 + 400));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              v34 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v88 + 400));
            *(_WORD *)(((v88 + 400) >> 3) + 0x7FFF8000) = -1800;
            if ( v34 )
              goto LABEL_98;
            v12 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v88 + 464) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
            if ( *(_WORD *)(((v88 + 464) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v88 + 464));
            v11 = (const char *)(v88 + 464);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v88 + 464)) )
            {
              *(_DWORD *)(((v88 + 976) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v88 + 976) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v88 + 1007) >> 3) + 0x7FFF8000) != 0
                && (char)((v88 - 17) & 7) >= *(_BYTE *)(((v88 + 1007) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v88 + 976, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v88 + 976),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectHealValidatorFunc",
                264);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v88 + 976),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v42,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v43,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 976));
              *(_DWORD *)(((v88 + 976) >> 3) + 0x7FFF8000) = -117901064;
              v89 = -1;
              v44 = 0;
            }
            else
            {
              v45 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v88 + 464));
              v46 = *(_BYTE *)(((unsigned __int64)&v45->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v46 != 0;
              if ( v46 != 0 && v46 <= 3 )
                __asan_report_load4(&v45->value);
              v44 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v88 + 464));
            *(_WORD *)(((v88 + 464) >> 3) + 0x7FFF8000) = -1800;
            if ( v44 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Heal:
            *(_WORD *)(((v88 + 432) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
            if ( *(_WORD *)(((v88 + 432) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v88 + 432));
            v11 = (const char *)(v88 + 432);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v88 + 432)) )
            {
              *(_DWORD *)(((v88 + 912) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v88 + 912) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v88 + 943) >> 3) + 0x7FFF8000) != 0
                && (char)((v88 - 81) & 7) >= *(_BYTE *)(((v88 + 943) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v88 + 912, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v88 + 912),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectHealValidatorFunc",
                264);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v88 + 912),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v38,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 912));
              *(_DWORD *)(((v88 + 912) >> 3) + 0x7FFF8000) = -117901064;
              v89 = -1;
              v39 = 0;
            }
            else
            {
              v40 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v88 + 432));
              v41 = *(_BYTE *)(((unsigned __int64)&v40->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v41 != 0;
              if ( v41 != 0 && v41 <= 3 )
                __asan_report_load4(&v40->value);
              v39 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v88 + 432));
            *(_WORD *)(((v88 + 432) >> 3) + 0x7FFF8000) = -1800;
            if ( v39 )
              goto LABEL_98;
            v12 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v88 + 496) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
            if ( *(_WORD *)(((v88 + 496) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v88 + 496));
            v11 = (const char *)(v88 + 496);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v88 + 496)) )
            {
              *(_DWORD *)(((v88 + 1040) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v88 + 1040) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v88 + 1071) >> 3) + 0x7FFF8000) != 0
                && (char)((v88 + 47) & 7) >= *(_BYTE *)(((v88 + 1071) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v88 + 1040, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v88 + 1040),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectHealValidatorFunc",
                264);
              v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v88 + 1040),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v47,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v48,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 1040));
              *(_DWORD *)(((v88 + 1040) >> 3) + 0x7FFF8000) = -117901064;
              v89 = -1;
              v49 = 0;
            }
            else
            {
              v50 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v88 + 496));
              v51 = *(_BYTE *)(((unsigned __int64)&v50->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v51 != 0;
              if ( v51 != 0 && v51 <= 3 )
                __asan_report_load4(&v50->value);
              v49 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v88 + 496));
            *(_WORD *)(((v88 + 496) >> 3) + 0x7FFF8000) = -1800;
            if ( v49 )
LABEL_98:
              v12 = 1;
            else
              v12 = 0;
            break;
          default:
            *(_DWORD *)(((v88 + 1104) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v88 + 1104) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v88 + 1135) >> 3) + 0x7FFF8000) != 0
              && (char)((v88 + 111) & 7) >= *(_BYTE *)(((v88 + 1135) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v88 + 1104, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v88 + 1104),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectHealValidatorFunc",
              264);
            v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v88 + 1104),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v53 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v52,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v88 + 192) >> 3) + 0x7FFF8000) = 4;
            v54 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v88 + 240));
            v55 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v54->second);
            if ( *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v55->type);
            }
            type = (unsigned int)v55->type;
            if ( *(_BYTE *)(((v88 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 192) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v88 + 192, type);
            *(_DWORD *)(v88 + 192) = type;
            v11 = (const char *)(v88 + 192);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v53,
              (const unsigned int *)(v88 + 192));
            *(_BYTE *)(((v88 + 192) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 1104));
            *(_DWORD *)(((v88 + 1104) >> 3) + 0x7FFF8000) = -117901064;
            v89 = -1;
            v12 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v88 + 1376));
  v57 = ((v88 + 1376) >> 3) + 2147450880;
  *(_DWORD *)v57 = -117901064;
  *(_WORD *)(v57 + 4) = -1800;
  *(_BYTE *)(v57 + 6) = -8;
  *(_BYTE *)(((v88 + 240) >> 3) + 0x7FFF8000) = -8;
  if ( v12 == 1 )
  {
    v58 = ((v88 + 1472) >> 3) + 2147450880;
    *(_DWORD *)v58 = 0;
    *(_WORD *)(v58 + 4) = 0;
    *(_BYTE *)(v58 + 6) = 0;
    v59 = ((v88 + 1296) >> 3) + 2147450880;
    *(_DWORD *)v59 = 0;
    *(_BYTE *)(v59 + 4) = 4;
    if ( *(_BYTE *)(((v88 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v88 + 1296, v11);
    *(_DWORD *)(v88 + 1296) = 0;
    v60 = (((_BYTE)v88 + 20) & 7u) + 3;
    if ( *(_BYTE *)(((v88 + 1300) >> 3) + 0x7FFF8000) != 0
      && (char)(((v88 + 20) & 7) + 3) >= *(_BYTE *)(((v88 + 1300) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v88 + 1300, v60);
    }
    *(_DWORD *)(v88 + 1300) = 1;
    if ( *(_BYTE *)(((v88 + 1304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 1304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v88 + 1304, v60);
    *(_DWORD *)(v88 + 1304) = 2;
    v61 = (((_BYTE)v88 + 28) & 7u) + 3;
    if ( *(_BYTE *)(((v88 + 1308) >> 3) + 0x7FFF8000) != 0
      && (char)(((v88 + 28) & 7) + 3) >= *(_BYTE *)(((v88 + 1308) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v88 + 1308, v61);
    }
    *(_DWORD *)(v88 + 1308) = 3;
    if ( *(_BYTE *)(((v88 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v88 + 1312, v61);
    *(_DWORD *)(v88 + 1312) = 7;
    v62 = (((_BYTE)v88 + 36) & 7u) + 3;
    if ( *(_BYTE *)(((v88 + 1316) >> 3) + 0x7FFF8000) != 0
      && (char)(((v88 + 36) & 7) + 3) >= *(_BYTE *)(((v88 + 1316) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v88 + 1316, v62);
    }
    *(_DWORD *)(v88 + 1316) = 8;
    if ( *(_BYTE *)(((v88 + 1320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 1320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v88 + 1320, v62);
    *(_DWORD *)(v88 + 1320) = 14;
    v63 = (((_BYTE)v88 + 44) & 7u) + 3;
    if ( *(_BYTE *)(((v88 + 1324) >> 3) + 0x7FFF8000) != 0
      && (char)(((v88 + 44) & 7) + 3) >= *(_BYTE *)(((v88 + 1324) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v88 + 1324, v63);
    }
    *(_DWORD *)(v88 + 1324) = 9;
    if ( *(_BYTE *)(((v88 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v88 + 1328, v63);
    *(_DWORD *)(v88 + 1328) = 16;
    __l._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v88 + 1296);
    __l._M_len = 9LL;
    *(_BYTE *)(((v88 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v88 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v88 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v88 + 112));
    std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
      (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v88 + 1472),
      __l,
      0LL,
      (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v88 + 80),
      (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v88 + 96),
      (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v88 + 112));
    std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v88 + 112));
    *(_BYTE *)(((v88 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v88 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v88 + 80) >> 3) + 0x7FFF8000) = -8;
    v64 = ((v88 + 1296) >> 3) + 2147450880;
    *(_DWORD *)v64 = -117901064;
    *(_BYTE *)(v64 + 4) = -8;
    p_target_character = &config_effect->target_character;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
            (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v88 + 1472),
            &config_effect->target_character) )
    {
      *(_DWORD *)(((v88 + 1168) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v88 + 1168) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v88 + 1199) >> 3) + 0x7FFF8000) != 0
        && (char)((v88 - 81) & 7) >= *(_BYTE *)(((v88 + 1199) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v88 + 1168, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v88 + 1168),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectHealValidatorFunc",
        266);
      v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v88 + 1168),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v67 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v66, (const char (*)[31])byte_1A5047A0);
      v68 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              v67,
              (const char (*)[31])"config_effect.target_character");
      v69 = " value:";
      v70 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v68, (const char (*)[8])" value:");
      *(_BYTE *)(((v88 + 208) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->target_character);
      }
      target_character = config_effect->target_character;
      v72 = *(_BYTE *)(((v88 + 208) >> 3) + 0x7FFF8000);
      if ( v72 != 0 && v72 <= 3 )
      {
        target_character = v88 + 208;
        LOBYTE(v69) = v72 != 0;
        __asan_report_store4(v88 + 208, v69);
      }
      *(_DWORD *)(v88 + 208) = target_character;
      p_target_character = (data::GCGChooseTargetCharaterType *)(v88 + 208);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v70, (const unsigned int *)(v88 + 208));
      *(_BYTE *)(((v88 + 208) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 1168));
      *(_DWORD *)(((v88 + 1168) >> 3) + 0x7FFF8000) = -117901064;
      v89 = -1;
      v73 = 0;
    }
    else
    {
      v73 = 1;
    }
    std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v88 + 1472));
    v74 = ((v88 + 1472) >> 3) + 2147450880;
    *(_DWORD *)v74 = -117901064;
    *(_WORD *)(v74 + 4) = -1800;
    *(_BYTE *)(v74 + 6) = -8;
    if ( v73 == 1 )
    {
      v75 = ((v88 + 1568) >> 3) + 2147450880;
      *(_DWORD *)v75 = 0;
      *(_WORD *)(v75 + 4) = 0;
      *(_BYTE *)(v75 + 6) = 0;
      *(_WORD *)(((v88 + 304) >> 3) + 0x7FFF8000) = 1024;
      if ( *(_BYTE *)(((v88 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v88 + 304, p_target_character);
      *(_DWORD *)(v88 + 304) = 0;
      v76 = (((_BYTE)v88 + 52) & 7u) + 3;
      if ( *(_BYTE *)(((v88 + 308) >> 3) + 0x7FFF8000) != 0
        && (char)(((v88 + 52) & 7) + 3) >= *(_BYTE *)(((v88 + 308) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v88 + 308, v76);
      }
      *(_DWORD *)(v88 + 308) = 1;
      if ( *(_BYTE *)(((v88 + 312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v88 + 312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v88 + 312, v76);
      *(_DWORD *)(v88 + 312) = 2;
      v87._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v88 + 304);
      v87._M_len = 3LL;
      *(_BYTE *)(((v88 + 128) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v88 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v88 + 160) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v88 + 160));
      std::unordered_set<data::GCGEffectCampType>::unordered_set(
        (std::unordered_set<data::GCGEffectCampType> *const)(v88 + 1568),
        v87,
        0LL,
        (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v88 + 128),
        (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v88 + 144),
        (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v88 + 160));
      std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v88 + 160));
      *(_BYTE *)(((v88 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v88 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v88 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v88 + 304) >> 3) + 0x7FFF8000) = -1800;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
              (std::unordered_set<data::GCGEffectCampType> *)(v88 + 1568),
              &config_effect->target_camp) )
      {
        *(_DWORD *)(((v88 + 1232) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v88 + 1232) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v88 + 1263) >> 3) + 0x7FFF8000) != 0
          && (char)((v88 - 17) & 7) >= *(_BYTE *)(((v88 + 1263) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v88 + 1232, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v88 + 1232),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectHealValidatorFunc",
          276);
        v77 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v88 + 1232),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v78 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v77, (const char (*)[31])byte_1A5047A0);
        v79 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                v78,
                (const char (*)[26])"config_effect.target_camp");
        v80 = " value:";
        v81 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v79, (const char (*)[8])" value:");
        *(_BYTE *)(((v88 + 224) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                       + 0x7FFF8000) )
        {
          __asan_report_load4(&config_effect->target_camp);
        }
        target_camp = config_effect->target_camp;
        v83 = *(_BYTE *)(((v88 + 224) >> 3) + 0x7FFF8000);
        if ( v83 != 0 && v83 <= 3 )
        {
          target_camp = v88 + 224;
          LOBYTE(v80) = v83 != 0;
          __asan_report_store4(v88 + 224, v80);
        }
        *(_DWORD *)(v88 + 224) = target_camp;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v81, (const unsigned int *)(v88 + 224));
        *(_BYTE *)(((v88 + 224) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v88 + 1232));
        *(_DWORD *)(((v88 + 1232) >> 3) + 0x7FFF8000) = -117901064;
        v89 = -1;
        v84 = 0;
      }
      else
      {
        v84 = 1;
      }
      std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v88 + 1568));
      if ( v84 == 1 )
        v89 = 0;
    }
  }
  if ( v92 == (char *)v88 )
  {
    v5[268431360] = 0LL;
    *(_QWORD *)((char *)v5 + 2147451068) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 268431361) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 196) & 0xFFFFFFF8) >> 3));
    v5[268431385] = 0LL;
  }
  else
  {
    *(_QWORD *)v88 = 1172321806LL;
    __asan_stack_free_5(v88, 1664LL, v92);
  }
  return v89;
};

// Line 284: range 000000000F1CF3E1-000000000F1CFDD5
int32_t __cdecl ConfigGCGExecEffectAttachElementValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectAttachElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:284 64 8 13 __for_end:284 96 16 26 cast_config_effect_ptr:284 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectAttachElementValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectAttachElement,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectAttachElement>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectAttachElement> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectAttachElementValidator",
        284);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        v12,
        (const char (*)[33])"ConfigGCGExecEffectAttachElement");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectAttachElementValidator",
            284);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectAttachElementValidator",
              284);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectAttachElementValidator",
          284);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectAttachElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectAttachElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectAttachElementValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectAttachElement>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectAttachElement> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectAttachElementValidator",
    284);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
    v9,
    (const char (*)[33])"ConfigGCGExecEffectAttachElement");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 285: range 000000000F1CFDD6-000000000F1D2C20
int32_t __cdecl ConfigGCGExecEffectAttachElementValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectAttachElement *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v6; // rdx
  bool v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  int v11; // ebx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rdx
  char v25; // al
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int v28; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rdx
  char v30; // al
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  int v33; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rdx
  char v35; // al
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int v38; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rdx
  char v40; // al
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  int v43; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rdx
  char v45; // al
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  int v48; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rdx
  char v50; // al
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rbx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v53; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rdx
  __int64 type; // rsi
  unsigned __int64 v56; // rax
  unsigned __int64 v57; // rax
  char v58; // cl
  char v59; // cl
  char v60; // cl
  char *v61; // rsi
  uint32_t v62; // ecx
  char v63; // al
  char *v64; // rsi
  bool v65; // al
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  const char *v69; // rsi
  common::milog::MiLogStream *v70; // rcx
  char v71; // al
  int v72; // ebx
  unsigned __int64 v73; // rax
  unsigned __int64 v74; // rax
  unsigned __int64 v75; // rax
  __int64 v76; // rsi
  __int64 v77; // rsi
  unsigned __int64 v78; // rax
  data::GCGChooseTargetCharaterType *p_target_character; // rsi
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  const char *v83; // rsi
  common::milog::MiLogStream *v84; // rcx
  data::GCGChooseTargetCharaterType target_character; // edi
  char v86; // al
  int v87; // ebx
  unsigned __int64 v88; // rax
  unsigned __int64 v89; // rax
  __int64 v90; // rsi
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // rax
  const char *v94; // rsi
  common::milog::MiLogStream *v95; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v97; // al
  int v98; // ebx
  std::initializer_list<data::GCGEffectElementType> __l; // [rsp+0h] [rbp-840h]
  std::initializer_list<data::GCGChooseTargetCharaterType> v101; // [rsp+10h] [rbp-830h]
  std::initializer_list<data::GCGEffectCampType> v102; // [rsp+20h] [rbp-820h]
  unsigned __int64 v103; // [rsp+38h] [rbp-808h]
  int32_t v104; // [rsp+44h] [rbp-7FCh]
  uint32_t declared_element_value; // [rsp+64h] [rbp-7DCh]
  char v107[2000]; // [rsp+70h] [rbp-7D0h] BYREF

  v103 = (unsigned __int64)v107;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1952LL);
    if ( v3 )
      v103 = v3;
  }
  *(_QWORD *)v103 = 1102416563LL;
  *(_QWORD *)(v103 + 8) = "46 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 "
                          "9 <unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <u"
                          "nknown> 208 1 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unkno"
                          "wn> 288 4 9 <unknown> 304 4 9 <unknown> 320 8 8 iter:287 352 8 9 <unknown> 384 12 9 <unknown> "
                          "416 16 22 declared_value_ptr:287 448 16 22 declared_value_ptr:287 480 16 22 declared_value_ptr"
                          ":287 512 16 22 declared_value_ptr:287 544 16 22 declared_value_ptr:287 576 16 22 declared_valu"
                          "e_ptr:287 608 20 9 <unknown> 672 28 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9"
                          " <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 "
                          "32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unknown>"
                          " 1504 32 9 <unknown> 1568 56 28 valid_declared_value_set:287 1664 56 23 valid_enum_type_set:28"
                          "9 1760 56 23 valid_enum_type_set:297 1856 56 23 valid_enum_type_set:303";
  *(_QWORD *)(v103 + 16) = ConfigGCGExecEffectAttachElementValidatorFunc;
  v4 = (_DWORD *)(v103 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -219020288;
  v4[536862733] = -219021312;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862736] = -219021312;
  v4[536862737] = -219021312;
  v4[536862738] = -219021312;
  v4[536862739] = -234618880;
  v4[536862740] = -218959118;
  v4[536862741] = 0x4000000;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -234881024;
  v4[536862771] = -218959118;
  v4[536862773] = -234881024;
  v4[536862774] = -218959118;
  v4[536862776] = -234881024;
  v4[536862777] = -218959118;
  v4[536862779] = -218103808;
  v4[536862780] = -202116109;
  declared_element_value = 0;
  if ( *(_BYTE *)(((v103 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 224) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v103 + 224, config_skill);
  *(_DWORD *)(v103 + 224) = 1;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v103 + 64));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v103 + 1568),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v103 + 224),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v103 + 32),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v103 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v103 + 64));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v103 + 64));
  *(_BYTE *)(((v103 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v103 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v103 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v103 + 224) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v103 + 320) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v103 + 320) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v103 + 320, v103 + 224);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v103 + 320) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_element.key);
  *(_BYTE *)(((v103 + 352) >> 3) + 0x7FFF8000) = 0;
  v6 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v103 + 352) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v103 + 352, &config_effect->declared_element);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v103 + 352) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v6);
  v7 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v103 + 320),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v103 + 352));
  *(_BYTE *)(((v103 + 352) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    *(_DWORD *)(((v103 + 736) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v103 + 736) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v103 + 767) >> 3) + 0x7FFF8000) != 0
      && (char)((v103 - 96 + 95) & 7) >= *(_BYTE *)(((v103 + 767) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v103 + 736, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v103 + 736),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectAttachElementValidatorFunc",
      287);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v103 + 736),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v8, (const char (*)[29])byte_1A5045A0);
    v10 = "declared_element";
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])"declared_element");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 736));
    *(_DWORD *)(((v103 + 736) >> 3) + 0x7FFF8000) = -117901064;
    v104 = -1;
    v11 = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v103 + 800) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v103 + 800) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v103 + 831) >> 3) + 0x7FFF8000) != 0
        && (char)((v103 + 63) & 7) >= *(_BYTE *)(((v103 + 831) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v103 + 800, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v103 + 800),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectAttachElementValidatorFunc",
        287);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v103 + 800),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      v10 = "declared_element";
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v14, (const char (*)[17])"declared_element");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 800));
      *(_DWORD *)(((v103 + 800) >> 3) + 0x7FFF8000) = -117901064;
      v104 = -1;
      v11 = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v103 + 1568),
              &v16->type) )
      {
        *(_DWORD *)(((v103 + 864) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v103 + 864) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v103 + 895) >> 3) + 0x7FFF8000) != 0
          && (char)((v103 + 127) & 7) >= *(_BYTE *)(((v103 + 895) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v103 + 864, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v103 + 864),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectAttachElementValidatorFunc",
          287);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v103 + 864),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        v10 = "declared_element";
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v18, (const char (*)[17])"declared_element");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 864));
        *(_DWORD *)(((v103 + 864) >> 3) + 0x7FFF8000) = -117901064;
        v104 = -1;
        v11 = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v103 + 416) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
            if ( *(_WORD *)(((v103 + 416) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v103 + 416));
            v10 = (const char *)(v103 + 416);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v103 + 416)) )
            {
              *(_DWORD *)(((v103 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v103 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v103 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v103 - 96 + 31) & 7) >= *(_BYTE *)(((v103 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v103 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v103 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectAttachElementValidatorFunc",
                287);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v103 + 928),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_element";
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v22,
                (const char (*)[17])"declared_element");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 928));
              *(_DWORD *)(((v103 + 928) >> 3) + 0x7FFF8000) = -117901064;
              v104 = -1;
              v23 = 0;
            }
            else
            {
              v24 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v103 + 416));
              v25 = *(_BYTE *)(((unsigned __int64)&v24->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v25 != 0;
              if ( v25 != 0 && v25 <= 3 )
                __asan_report_load4(&v24->value);
              declared_element_value = v24->value;
              v23 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v103 + 416));
            *(_WORD *)(((v103 + 416) >> 3) + 0x7FFF8000) = -1800;
            if ( v23 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Element:
            *(_WORD *)(((v103 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
            if ( *(_WORD *)(((v103 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v103 + 448));
            v10 = (const char *)(v103 + 448);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v103 + 448)) )
            {
              *(_DWORD *)(((v103 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v103 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v103 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v103 - 96 + 95) & 7) >= *(_BYTE *)(((v103 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v103 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v103 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectAttachElementValidatorFunc",
                287);
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v103 + 992),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v26,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_element";
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v27,
                (const char (*)[17])"declared_element");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 992));
              *(_DWORD *)(((v103 + 992) >> 3) + 0x7FFF8000) = -117901064;
              v104 = -1;
              v28 = 0;
            }
            else
            {
              v29 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v103 + 448));
              v30 = *(_BYTE *)(((unsigned __int64)&v29->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v30 != 0;
              if ( v30 != 0 && v30 <= 3 )
                __asan_report_load4(&v29->value);
              declared_element_value = v29->value;
              v28 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v103 + 448));
            *(_WORD *)(((v103 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( v28 )
              goto LABEL_98;
            v11 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v103 + 480) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
            if ( *(_WORD *)(((v103 + 480) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v103 + 480));
            v10 = (const char *)(v103 + 480);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v103 + 480)) )
            {
              *(_DWORD *)(((v103 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v103 + 1056) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v103 + 1087) >> 3) + 0x7FFF8000) != 0
                && (char)((v103 + 63) & 7) >= *(_BYTE *)(((v103 + 1087) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v103 + 1056, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v103 + 1056),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectAttachElementValidatorFunc",
                287);
              v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v103 + 1056),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v31,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_element";
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v32,
                (const char (*)[17])"declared_element");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1056));
              *(_DWORD *)(((v103 + 1056) >> 3) + 0x7FFF8000) = -117901064;
              v104 = -1;
              v33 = 0;
            }
            else
            {
              v34 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v103 + 480));
              v35 = *(_BYTE *)(((unsigned __int64)&v34->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v35 != 0;
              if ( v35 != 0 && v35 <= 3 )
                __asan_report_load4(&v34->value);
              declared_element_value = v34->value;
              v33 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v103 + 480));
            *(_WORD *)(((v103 + 480) >> 3) + 0x7FFF8000) = -1800;
            if ( v33 )
              goto LABEL_98;
            v11 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v103 + 544) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
            if ( *(_WORD *)(((v103 + 544) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v103 + 544));
            v10 = (const char *)(v103 + 544);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v103 + 544)) )
            {
              *(_DWORD *)(((v103 + 1184) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v103 + 1184) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v103 + 1215) >> 3) + 0x7FFF8000) != 0
                && (char)((v103 - 96 + 31) & 7) >= *(_BYTE *)(((v103 + 1215) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v103 + 1184, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v103 + 1184),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectAttachElementValidatorFunc",
                287);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v103 + 1184),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_element";
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v42,
                (const char (*)[17])"declared_element");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1184));
              *(_DWORD *)(((v103 + 1184) >> 3) + 0x7FFF8000) = -117901064;
              v104 = -1;
              v43 = 0;
            }
            else
            {
              v44 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v103 + 544));
              v45 = *(_BYTE *)(((unsigned __int64)&v44->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v45 != 0;
              if ( v45 != 0 && v45 <= 3 )
                __asan_report_load4(&v44->value);
              declared_element_value = v44->value;
              v43 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v103 + 544));
            *(_WORD *)(((v103 + 544) >> 3) + 0x7FFF8000) = -1800;
            if ( v43 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Heal:
            *(_WORD *)(((v103 + 512) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
            if ( *(_WORD *)(((v103 + 512) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v103 + 512));
            v10 = (const char *)(v103 + 512);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v103 + 512)) )
            {
              *(_DWORD *)(((v103 + 1120) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v103 + 1120) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v103 + 1151) >> 3) + 0x7FFF8000) != 0
                && (char)((v103 + 127) & 7) >= *(_BYTE *)(((v103 + 1151) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v103 + 1120, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v103 + 1120),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectAttachElementValidatorFunc",
                287);
              v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v103 + 1120),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v36,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_element";
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v37,
                (const char (*)[17])"declared_element");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1120));
              *(_DWORD *)(((v103 + 1120) >> 3) + 0x7FFF8000) = -117901064;
              v104 = -1;
              v38 = 0;
            }
            else
            {
              v39 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v103 + 512));
              v40 = *(_BYTE *)(((unsigned __int64)&v39->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v40 != 0;
              if ( v40 != 0 && v40 <= 3 )
                __asan_report_load4(&v39->value);
              declared_element_value = v39->value;
              v38 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v103 + 512));
            *(_WORD *)(((v103 + 512) >> 3) + 0x7FFF8000) = -1800;
            if ( v38 )
              goto LABEL_98;
            v11 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v103 + 576) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
            if ( *(_WORD *)(((v103 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v103 + 576));
            v10 = (const char *)(v103 + 576);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v103 + 576)) )
            {
              *(_DWORD *)(((v103 + 1248) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v103 + 1248) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v103 + 1279) >> 3) + 0x7FFF8000) != 0
                && (char)((v103 - 96 + 95) & 7) >= *(_BYTE *)(((v103 + 1279) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v103 + 1248, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v103 + 1248),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectAttachElementValidatorFunc",
                287);
              v46 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v103 + 1248),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v46,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_element";
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v47,
                (const char (*)[17])"declared_element");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1248));
              *(_DWORD *)(((v103 + 1248) >> 3) + 0x7FFF8000) = -117901064;
              v104 = -1;
              v48 = 0;
            }
            else
            {
              v49 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v103 + 576));
              v50 = *(_BYTE *)(((unsigned __int64)&v49->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v50 != 0;
              if ( v50 != 0 && v50 <= 3 )
                __asan_report_load4(&v49->value);
              declared_element_value = v49->value;
              v48 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v103 + 576));
            *(_WORD *)(((v103 + 576) >> 3) + 0x7FFF8000) = -1800;
            if ( v48 )
LABEL_98:
              v11 = 1;
            else
              v11 = 0;
            break;
          default:
            *(_DWORD *)(((v103 + 1312) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v103 + 1312) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v103 + 1343) >> 3) + 0x7FFF8000) != 0
              && (char)((v103 + 63) & 7) >= *(_BYTE *)(((v103 + 1343) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v103 + 1312, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v103 + 1312),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectAttachElementValidatorFunc",
              287);
            v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v103 + 1312),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v52 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v51,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v103 + 240) >> 3) + 0x7FFF8000) = 4;
            v53 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v103 + 320));
            v54 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v53->second);
            if ( *(_BYTE *)(((unsigned __int64)&v54->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v54->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v54->type);
            }
            type = (unsigned int)v54->type;
            if ( *(_BYTE *)(((v103 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 240) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v103 + 240, type);
            *(_DWORD *)(v103 + 240) = type;
            v10 = (const char *)(v103 + 240);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v52,
              (const unsigned int *)(v103 + 240));
            *(_BYTE *)(((v103 + 240) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1312));
            *(_DWORD *)(((v103 + 1312) >> 3) + 0x7FFF8000) = -117901064;
            v104 = -1;
            v11 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v103 + 1568));
  v56 = ((v103 + 1568) >> 3) + 2147450880;
  *(_DWORD *)v56 = -117901064;
  *(_WORD *)(v56 + 4) = -1800;
  *(_BYTE *)(v56 + 6) = -8;
  *(_BYTE *)(((v103 + 320) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
  {
    v57 = ((v103 + 1664) >> 3) + 2147450880;
    *(_DWORD *)v57 = 0;
    *(_WORD *)(v57 + 4) = 0;
    *(_BYTE *)(v57 + 6) = 0;
    *(_DWORD *)(((v103 + 672) >> 3) + 0x7FFF8000) = 0x4000000;
    if ( *(_BYTE *)(((v103 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v103 + 672, v10);
    *(_DWORD *)(v103 + 672) = 1;
    v58 = *(_BYTE *)(((v103 + 676) >> 3) + 0x7FFF8000);
    LOBYTE(v10) = v58 != 0;
    if ( v58 != 0 && (char)(((v103 - 96 + 4) & 7) + 3) >= v58 )
      __asan_report_store4(v103 + 676, v10);
    *(_DWORD *)(v103 + 676) = 2;
    if ( *(_BYTE *)(((v103 + 680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v103 + 680, v10);
    *(_DWORD *)(v103 + 680) = 3;
    v59 = *(_BYTE *)(((v103 + 684) >> 3) + 0x7FFF8000);
    LOBYTE(v10) = v59 != 0;
    if ( v59 != 0 && (char)(((v103 - 96 + 12) & 7) + 3) >= v59 )
      __asan_report_store4(v103 + 684, v10);
    *(_DWORD *)(v103 + 684) = 4;
    if ( *(_BYTE *)(((v103 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v103 + 688, v10);
    *(_DWORD *)(v103 + 688) = 5;
    v60 = *(_BYTE *)(((v103 + 692) >> 3) + 0x7FFF8000);
    LOBYTE(v10) = v60 != 0;
    if ( v60 != 0 && (char)(((v103 - 96 + 20) & 7) + 3) >= v60 )
      __asan_report_store4(v103 + 692, v10);
    *(_DWORD *)(v103 + 692) = 6;
    if ( *(_BYTE *)(((v103 + 696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v103 + 696, v10);
    *(_DWORD *)(v103 + 696) = 7;
    __l._M_array = (std::initializer_list<data::GCGEffectElementType>::iterator)(v103 + 672);
    __l._M_len = 7LL;
    *(_BYTE *)(((v103 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v103 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v103 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectElementType>::allocator((std::allocator<data::GCGEffectElementType> *const)(v103 + 112));
    v61 = (char *)(v103 + 672);
    std::unordered_set<data::GCGEffectElementType>::unordered_set(
      (std::unordered_set<data::GCGEffectElementType> *const)(v103 + 1664),
      __l,
      0LL,
      (const std::unordered_set<data::GCGEffectElementType>::hasher *)(v103 + 80),
      (const std::unordered_set<data::GCGEffectElementType>::key_equal *)(v103 + 96),
      (const std::unordered_set<data::GCGEffectElementType>::allocator_type *)(v103 + 112));
    std::allocator<data::GCGEffectElementType>::~allocator((std::allocator<data::GCGEffectElementType> *const)(v103 + 112));
    *(_BYTE *)(((v103 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v103 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v103 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v103 + 672) >> 3) + 0x7FFF8000) = -117901064;
    *(_BYTE *)(((v103 + 256) >> 3) + 0x7FFF8000) = 4;
    v62 = declared_element_value;
    v63 = *(_BYTE *)(((v103 + 256) >> 3) + 0x7FFF8000);
    if ( v63 != 0 && v63 <= 3 )
    {
      LOBYTE(v61) = v63 != 0;
      __asan_report_store4(v103 + 256, v61);
    }
    *(_DWORD *)(v103 + 256) = v62;
    v64 = (char *)(v103 + 256);
    v65 = common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectElementType>,data::GCGEffectElementType>(
            (std::unordered_set<data::GCGEffectElementType> *)(v103 + 1664),
            (const data::GCGEffectElementType *)(v103 + 256));
    *(_BYTE *)(((v103 + 256) >> 3) + 0x7FFF8000) = -8;
    if ( !v65 )
    {
      *(_DWORD *)(((v103 + 1376) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v103 + 1376) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v103 + 1407) >> 3) + 0x7FFF8000) != 0
        && (char)((v103 + 127) & 7) >= *(_BYTE *)(((v103 + 1407) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v103 + 1376, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v103 + 1376),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectAttachElementValidatorFunc",
        289);
      v66 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v103 + 1376),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v67 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v66, (const char (*)[31])byte_1A5047A0);
      v68 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
              v67,
              (const char (*)[58])"static_cast<GCGEffectElementType>(declared_element_value)");
      v69 = " value:";
      v70 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v68, (const char (*)[8])" value:");
      *(_BYTE *)(((v103 + 272) >> 3) + 0x7FFF8000) = 4;
      v71 = *(_BYTE *)(((v103 + 272) >> 3) + 0x7FFF8000);
      if ( v71 != 0 && v71 <= 3 )
      {
        LOBYTE(v69) = v71 != 0;
        __asan_report_store4(v103 + 272, v69);
      }
      *(_DWORD *)(v103 + 272) = declared_element_value;
      v64 = (char *)(v103 + 272);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v70, (const unsigned int *)(v103 + 272));
      *(_BYTE *)(((v103 + 272) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1376));
      *(_DWORD *)(((v103 + 1376) >> 3) + 0x7FFF8000) = -117901064;
      v104 = -1;
      v72 = 0;
    }
    else
    {
      v72 = 1;
    }
    std::unordered_set<data::GCGEffectElementType>::~unordered_set((std::unordered_set<data::GCGEffectElementType> *const)(v103 + 1664));
    v73 = ((v103 + 1664) >> 3) + 2147450880;
    *(_DWORD *)v73 = -117901064;
    *(_WORD *)(v73 + 4) = -1800;
    *(_BYTE *)(v73 + 6) = -8;
    if ( v72 == 1 )
    {
      v74 = ((v103 + 1760) >> 3) + 2147450880;
      *(_DWORD *)v74 = 0;
      *(_WORD *)(v74 + 4) = 0;
      *(_BYTE *)(v74 + 6) = 0;
      v75 = ((v103 + 608) >> 3) + 2147450880;
      *(_WORD *)v75 = 0;
      *(_BYTE *)(v75 + 2) = 4;
      if ( *(_BYTE *)(((v103 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v103 + 608, v64);
      *(_DWORD *)(v103 + 608) = 0;
      v76 = (((_BYTE)v103 + 100) & 7u) + 3;
      if ( *(_BYTE *)(((v103 + 612) >> 3) + 0x7FFF8000) != 0
        && (char)(((v103 + 100) & 7) + 3) >= *(_BYTE *)(((v103 + 612) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v103 + 612, v76);
      }
      *(_DWORD *)(v103 + 612) = 1;
      if ( *(_BYTE *)(((v103 + 616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 616) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v103 + 616, v76);
      *(_DWORD *)(v103 + 616) = 2;
      v77 = (((_BYTE)v103 + 108) & 7u) + 3;
      if ( *(_BYTE *)(((v103 + 620) >> 3) + 0x7FFF8000) != 0
        && (char)(((v103 + 108) & 7) + 3) >= *(_BYTE *)(((v103 + 620) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v103 + 620, v77);
      }
      *(_DWORD *)(v103 + 620) = 3;
      if ( *(_BYTE *)(((v103 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v103 + 624, v77);
      *(_DWORD *)(v103 + 624) = 15;
      v101._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v103 + 608);
      v101._M_len = 5LL;
      *(_BYTE *)(((v103 + 128) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v103 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v103 + 160) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v103 + 160));
      std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
        (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v103 + 1760),
        v101,
        0LL,
        (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v103 + 128),
        (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v103 + 144),
        (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v103 + 160));
      std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v103 + 160));
      *(_BYTE *)(((v103 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v103 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v103 + 128) >> 3) + 0x7FFF8000) = -8;
      v78 = ((v103 + 608) >> 3) + 2147450880;
      *(_WORD *)v78 = -1800;
      *(_BYTE *)(v78 + 2) = -8;
      p_target_character = &config_effect->target_character;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
              (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v103 + 1760),
              &config_effect->target_character) )
      {
        *(_DWORD *)(((v103 + 1440) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v103 + 1440) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v103 + 1471) >> 3) + 0x7FFF8000) != 0
          && (char)((v103 - 96 + 31) & 7) >= *(_BYTE *)(((v103 + 1471) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v103 + 1440, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v103 + 1440),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectAttachElementValidatorFunc",
          297);
        v80 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v103 + 1440),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v81 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v80, (const char (*)[31])byte_1A5047A0);
        v82 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                v81,
                (const char (*)[31])"config_effect.target_character");
        v83 = " value:";
        v84 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v82, (const char (*)[8])" value:");
        *(_BYTE *)(((v103 + 288) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_effect->target_character);
        }
        target_character = config_effect->target_character;
        v86 = *(_BYTE *)(((v103 + 288) >> 3) + 0x7FFF8000);
        if ( v86 != 0 && v86 <= 3 )
        {
          target_character = v103 + 288;
          LOBYTE(v83) = v86 != 0;
          __asan_report_store4(v103 + 288, v83);
        }
        *(_DWORD *)(v103 + 288) = target_character;
        p_target_character = (data::GCGChooseTargetCharaterType *)(v103 + 288);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v84, (const unsigned int *)(v103 + 288));
        *(_BYTE *)(((v103 + 288) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1440));
        *(_DWORD *)(((v103 + 1440) >> 3) + 0x7FFF8000) = -117901064;
        v104 = -1;
        v87 = 0;
      }
      else
      {
        v87 = 1;
      }
      std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v103 + 1760));
      v88 = ((v103 + 1760) >> 3) + 2147450880;
      *(_DWORD *)v88 = -117901064;
      *(_WORD *)(v88 + 4) = -1800;
      *(_BYTE *)(v88 + 6) = -8;
      if ( v87 == 1 )
      {
        v89 = ((v103 + 1856) >> 3) + 2147450880;
        *(_DWORD *)v89 = 0;
        *(_WORD *)(v89 + 4) = 0;
        *(_BYTE *)(v89 + 6) = 0;
        *(_WORD *)(((v103 + 384) >> 3) + 0x7FFF8000) = 1024;
        if ( *(_BYTE *)(((v103 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 384) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v103 + 384, p_target_character);
        *(_DWORD *)(v103 + 384) = 0;
        v90 = (((_BYTE)v103 - 124) & 7u) + 3;
        if ( *(_BYTE *)(((v103 + 388) >> 3) + 0x7FFF8000) != 0
          && (char)(((v103 - 124) & 7) + 3) >= *(_BYTE *)(((v103 + 388) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v103 + 388, v90);
        }
        *(_DWORD *)(v103 + 388) = 1;
        if ( *(_BYTE *)(((v103 + 392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v103 + 392) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v103 + 392, v90);
        *(_DWORD *)(v103 + 392) = 2;
        v102._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v103 + 384);
        v102._M_len = 3LL;
        *(_BYTE *)(((v103 + 176) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v103 + 192) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v103 + 208) >> 3) + 0x7FFF8000) = 1;
        std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v103 + 208));
        std::unordered_set<data::GCGEffectCampType>::unordered_set(
          (std::unordered_set<data::GCGEffectCampType> *const)(v103 + 1856),
          v102,
          0LL,
          (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v103 + 176),
          (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v103 + 192),
          (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v103 + 208));
        std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v103 + 208));
        *(_BYTE *)(((v103 + 208) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v103 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v103 + 176) >> 3) + 0x7FFF8000) = -8;
        *(_WORD *)(((v103 + 384) >> 3) + 0x7FFF8000) = -1800;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                (std::unordered_set<data::GCGEffectCampType> *)(v103 + 1856),
                &config_effect->target_camp) )
        {
          *(_DWORD *)(((v103 + 1504) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v103 + 1504) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v103 + 1535) >> 3) + 0x7FFF8000) != 0
            && (char)((v103 - 96 + 95) & 7) >= *(_BYTE *)(((v103 + 1535) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v103 + 1504, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v103 + 1504),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectAttachElementValidatorFunc",
            303);
          v91 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v103 + 1504),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v92 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v91, (const char (*)[31])byte_1A5047A0);
          v93 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  v92,
                  (const char (*)[26])"config_effect.target_camp");
          v94 = " value:";
          v95 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v93, (const char (*)[8])" value:");
          *(_BYTE *)(((v103 + 304) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(&config_effect->target_camp);
          }
          target_camp = config_effect->target_camp;
          v97 = *(_BYTE *)(((v103 + 304) >> 3) + 0x7FFF8000);
          if ( v97 != 0 && v97 <= 3 )
          {
            target_camp = v103 + 304;
            LOBYTE(v94) = v97 != 0;
            __asan_report_store4(v103 + 304, v94);
          }
          *(_DWORD *)(v103 + 304) = target_camp;
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v95,
            (const unsigned int *)(v103 + 304));
          *(_BYTE *)(((v103 + 304) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v103 + 1504));
          *(_DWORD *)(((v103 + 1504) >> 3) + 0x7FFF8000) = -117901064;
          v104 = -1;
          v98 = 0;
        }
        else
        {
          v98 = 1;
        }
        std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v103 + 1856));
        if ( v98 == 1 )
          v104 = 0;
      }
    }
  }
  if ( v107 == (char *)v103 )
  {
    *(_QWORD *)((v103 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v103 >> 3) + 0x7FFF80E0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 232) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v103 >> 3) + 0x7FFF80EC) = 0LL;
  }
  else
  {
    *(_QWORD *)v103 = 1172321806LL;
    __asan_stack_free_5(v103, 1952LL, v107);
  }
  return v104;
};

// Line 311: range 000000000F1D2C21-000000000F1D3615
int32_t __cdecl ConfigGCGExecEffectChargeValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectCharge,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:311 64 8 13 __for_end:311 96 16 26 cast_config_effect_ptr:311 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectChargeValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectCharge,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectCharge>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectCharge> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChargeValidator",
        311);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        v12,
        (const char (*)[26])"ConfigGCGExecEffectCharge");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectChargeValidator",
            311);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChargeValidator",
              311);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChargeValidator",
          311);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectCharge,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectCharge,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectChargeValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectCharge>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectCharge> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectChargeValidator",
    311);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v9, (const char (*)[26])"ConfigGCGExecEffectCharge");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 312: range 000000000F1D3616-000000000F1D6A65
int32_t __cdecl ConfigGCGExecEffectChargeValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectCharge *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::DeclaredValueMap *p_declared_value_map; // rcx
  data::DeclaredValueMap *v6; // rcx
  bool v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned __int64 p_value; // rsi
  int v11; // ebx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // ebx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int v26; // ebx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // ebx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  int v32; // ebx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  int v35; // ebx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int v38; // ebx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rbx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v41; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rcx
  __int64 type; // rsi
  unsigned __int64 v44; // rax
  unsigned __int64 v45; // rax
  char v46; // dl
  data::GCGValueOperatorType *p_operator_type; // rsi
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rdi
  __int64 operator_type; // rsi
  int v53; // ebx
  unsigned __int64 v54; // rax
  unsigned __int64 v55; // rax
  char v56; // cl
  char v57; // cl
  char v58; // cl
  char v59; // cl
  data::GCGEffectElementType *p_limit_element_type; // rsi
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  const char *v64; // rsi
  common::milog::MiLogStream *v65; // rcx
  data::GCGEffectElementType limit_element_type; // edi
  char v67; // al
  int v68; // ebx
  unsigned __int64 v69; // rax
  unsigned __int64 v70; // rax
  __int64 v71; // rsi
  __int64 v72; // rsi
  __int64 v73; // rsi
  data::GCGChooseTargetCharaterType *p_target_character; // rsi
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  const char *v78; // rsi
  common::milog::MiLogStream *v79; // rcx
  data::GCGChooseTargetCharaterType target_character; // edi
  char v81; // al
  int v82; // ebx
  unsigned __int64 v83; // rax
  unsigned __int64 v84; // rax
  __int64 v85; // rsi
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  const char *v89; // rsi
  common::milog::MiLogStream *v90; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v92; // al
  int v93; // ebx
  std::initializer_list<data::GCGValueOperatorType> __l; // [rsp+0h] [rbp-950h]
  std::initializer_list<data::GCGEffectElementType> v96; // [rsp+10h] [rbp-940h]
  std::initializer_list<data::GCGChooseTargetCharaterType> v97; // [rsp+20h] [rbp-930h]
  std::initializer_list<data::GCGEffectCampType> v98; // [rsp+30h] [rbp-920h]
  unsigned __int64 v99; // [rsp+48h] [rbp-908h]
  int32_t v100; // [rsp+54h] [rbp-8FCh]
  char v102[2256]; // [rsp+80h] [rbp-8D0h] BYREF

  v99 = (unsigned __int64)v102;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2208LL);
    if ( v3 )
      v99 = v3;
  }
  *(_QWORD *)v99 = 1102416563LL;
  *(_QWORD *)(v99 + 8) = "52 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 "
                         "9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <un"
                         "known> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 4 9 <unknown"
                         "> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384"
                         " 8 8 iter:314 416 8 9 <unknown> 448 12 9 <unknown> 480 12 9 <unknown> 512 16 22 declared_value_"
                         "ptr:314 544 16 22 declared_value_ptr:314 576 16 22 declared_value_ptr:314 608 16 22 declared_va"
                         "lue_ptr:314 640 16 22 declared_value_ptr:314 672 16 22 declared_value_ptr:314 704 32 9 <unknown"
                         "> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknow"
                         "n> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <u"
                         "nknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 32"
                         " 9 <unknown> 1728 56 28 valid_declared_value_set:314 1824 56 23 valid_enum_type_set:316 1920 56"
                         " 23 valid_enum_type_set:320 2016 56 23 valid_enum_type_set:329 2112 56 23 valid_enum_type_set:338";
  *(_QWORD *)(v99 + 16) = ConfigGCGExecEffectChargeValidatorFunc;
  v4 = (_DWORD *)(v99 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -219020288;
  v4[536862735] = -219020288;
  v4[536862736] = -219021312;
  v4[536862737] = -219021312;
  v4[536862738] = -219021312;
  v4[536862739] = -219021312;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -218959118;
  v4[536862775] = -234881024;
  v4[536862776] = -218959118;
  v4[536862778] = -234881024;
  v4[536862779] = -218959118;
  v4[536862781] = -234881024;
  v4[536862782] = -218959118;
  v4[536862784] = -234881024;
  v4[536862785] = -218959118;
  v4[536862787] = -218103808;
  v4[536862788] = -202116109;
  if ( *(_BYTE *)(((v99 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 288) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v99 + 288, config_skill);
  *(_DWORD *)(v99 + 288) = 4;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v99 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v99 + 1728),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v99 + 288),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v99 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v99 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v99 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v99 + 80));
  *(_BYTE *)(((v99 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v99 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v99 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v99 + 288) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v99 + 384) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v99 + 384) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v99 + 384, v99 + 288);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v99 + 384) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v99 + 416) >> 3) + 0x7FFF8000) = 0;
  v6 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v99 + 416) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v99 + 416, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v99 + 416) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v6);
  v7 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v99 + 384),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v99 + 416));
  *(_BYTE *)(((v99 + 416) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    *(_DWORD *)(((v99 + 704) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v99 + 704) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v99 + 735) >> 3) + 0x7FFF8000) != 0
      && (char)((v99 - 96 + 63) & 7) >= *(_BYTE *)(((v99 + 735) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v99 + 704, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v99 + 704),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectChargeValidatorFunc",
      314);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v99 + 704),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v8, (const char (*)[29])byte_1A5045A0);
    p_value = (unsigned __int64)"declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v9, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 704));
    *(_DWORD *)(((v99 + 704) >> 3) + 0x7FFF8000) = -117901064;
    v100 = -1;
    v11 = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v99 + 768) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v99 + 768) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v99 + 799) >> 3) + 0x7FFF8000) != 0
        && (char)((v99 - 96 + 127) & 7) >= *(_BYTE *)(((v99 + 799) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v99 + 768, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v99 + 768),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChargeValidatorFunc",
        314);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v99 + 768),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      p_value = (unsigned __int64)"declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 768));
      *(_DWORD *)(((v99 + 768) >> 3) + 0x7FFF8000) = -117901064;
      v100 = -1;
      v11 = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v99 + 1728),
              &v16->type) )
      {
        *(_DWORD *)(((v99 + 832) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v99 + 832) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v99 + 863) >> 3) + 0x7FFF8000) != 0
          && (char)((v99 + 95) & 7) >= *(_BYTE *)(((v99 + 863) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v99 + 832, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v99 + 832),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChargeValidatorFunc",
          314);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v99 + 832),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        p_value = (unsigned __int64)"declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 832));
        *(_DWORD *)(((v99 + 832) >> 3) + 0x7FFF8000) = -117901064;
        v100 = -1;
        v11 = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v99 + 512) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
            if ( *(_WORD *)(((v99 + 512) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v99 + 512));
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v99 + 512)) )
            {
              *(_DWORD *)(((v99 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v99 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v99 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v99 - 97) & 7) >= *(_BYTE *)(((v99 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v99 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v99 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChargeValidatorFunc",
                314);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v99 + 896),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 896));
              *(_DWORD *)(((v99 + 896) >> 3) + 0x7FFF8000) = -117901064;
              v100 = -1;
              v23 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v99 + 512))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v23 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v99 + 512));
            *(_WORD *)(((v99 + 512) >> 3) + 0x7FFF8000) = -1800;
            if ( v23 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Element:
            *(_WORD *)(((v99 + 544) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
            if ( *(_WORD *)(((v99 + 544) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v99 + 544));
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v99 + 544)) )
            {
              *(_DWORD *)(((v99 + 960) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v99 + 960) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v99 + 991) >> 3) + 0x7FFF8000) != 0
                && (char)((v99 - 96 + 63) & 7) >= *(_BYTE *)(((v99 + 991) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v99 + 960, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v99 + 960),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChargeValidatorFunc",
                314);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v99 + 960),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v24,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v25,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 960));
              *(_DWORD *)(((v99 + 960) >> 3) + 0x7FFF8000) = -117901064;
              v100 = -1;
              v26 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v99 + 544))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v26 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v99 + 544));
            *(_WORD *)(((v99 + 544) >> 3) + 0x7FFF8000) = -1800;
            if ( v26 )
              goto LABEL_98;
            v11 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v99 + 576) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
            if ( *(_WORD *)(((v99 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v99 + 576));
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v99 + 576)) )
            {
              *(_DWORD *)(((v99 + 1024) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v99 + 1024) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v99 + 1055) >> 3) + 0x7FFF8000) != 0
                && (char)((v99 - 96 + 127) & 7) >= *(_BYTE *)(((v99 + 1055) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v99 + 1024, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v99 + 1024),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChargeValidatorFunc",
                314);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v99 + 1024),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v27,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v28,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1024));
              *(_DWORD *)(((v99 + 1024) >> 3) + 0x7FFF8000) = -117901064;
              v100 = -1;
              v29 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v99 + 576))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v29 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v99 + 576));
            *(_WORD *)(((v99 + 576) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              goto LABEL_98;
            v11 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v99 + 640) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
            if ( *(_WORD *)(((v99 + 640) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v99 + 640));
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v99 + 640)) )
            {
              *(_DWORD *)(((v99 + 1152) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v99 + 1152) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v99 + 1183) >> 3) + 0x7FFF8000) != 0
                && (char)((v99 - 97) & 7) >= *(_BYTE *)(((v99 + 1183) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v99 + 1152, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v99 + 1152),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChargeValidatorFunc",
                314);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v99 + 1152),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1152));
              *(_DWORD *)(((v99 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              v100 = -1;
              v35 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v99 + 640))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v35 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v99 + 640));
            *(_WORD *)(((v99 + 640) >> 3) + 0x7FFF8000) = -1800;
            if ( v35 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Heal:
            *(_WORD *)(((v99 + 608) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
            if ( *(_WORD *)(((v99 + 608) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v99 + 608));
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v99 + 608)) )
            {
              *(_DWORD *)(((v99 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v99 + 1088) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v99 + 1119) >> 3) + 0x7FFF8000) != 0
                && (char)((v99 + 95) & 7) >= *(_BYTE *)(((v99 + 1119) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v99 + 1088, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v99 + 1088),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChargeValidatorFunc",
                314);
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v99 + 1088),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v30,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v31,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1088));
              *(_DWORD *)(((v99 + 1088) >> 3) + 0x7FFF8000) = -117901064;
              v100 = -1;
              v32 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v99 + 608))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v32 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v99 + 608));
            *(_WORD *)(((v99 + 608) >> 3) + 0x7FFF8000) = -1800;
            if ( v32 )
              goto LABEL_98;
            v11 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v99 + 672) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
            if ( *(_WORD *)(((v99 + 672) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v99 + 672));
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v99 + 672)) )
            {
              *(_DWORD *)(((v99 + 1216) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v99 + 1216) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v99 + 1247) >> 3) + 0x7FFF8000) != 0
                && (char)((v99 - 96 + 63) & 7) >= *(_BYTE *)(((v99 + 1247) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v99 + 1216, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v99 + 1216),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChargeValidatorFunc",
                314);
              v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v99 + 1216),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v36,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v37,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1216));
              *(_DWORD *)(((v99 + 1216) >> 3) + 0x7FFF8000) = -117901064;
              v100 = -1;
              v38 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v99 + 672))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v38 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v99 + 672));
            *(_WORD *)(((v99 + 672) >> 3) + 0x7FFF8000) = -1800;
            if ( v38 )
LABEL_98:
              v11 = 1;
            else
              v11 = 0;
            break;
          default:
            *(_DWORD *)(((v99 + 1280) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v99 + 1280) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v99 + 1311) >> 3) + 0x7FFF8000) != 0
              && (char)((v99 - 96 + 127) & 7) >= *(_BYTE *)(((v99 + 1311) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v99 + 1280, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v99 + 1280),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChargeValidatorFunc",
              314);
            v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v99 + 1280),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v40 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v39,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v99 + 304) >> 3) + 0x7FFF8000) = 4;
            v41 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v99 + 384));
            v42 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41->second);
            if ( *(_BYTE *)(((unsigned __int64)&v42->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v42->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v42->type);
            }
            type = (unsigned int)v42->type;
            if ( *(_BYTE *)(((v99 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 304) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v99 + 304, type);
            *(_DWORD *)(v99 + 304) = type;
            p_value = v99 + 304;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v40,
              (const unsigned int *)(v99 + 304));
            *(_BYTE *)(((v99 + 304) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1280));
            *(_DWORD *)(((v99 + 1280) >> 3) + 0x7FFF8000) = -117901064;
            v100 = -1;
            v11 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v99 + 1728));
  v44 = ((v99 + 1728) >> 3) + 2147450880;
  *(_DWORD *)v44 = -117901064;
  *(_WORD *)(v44 + 4) = -1800;
  *(_BYTE *)(v44 + 6) = -8;
  *(_BYTE *)(((v99 + 384) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
  {
    v45 = ((v99 + 1824) >> 3) + 2147450880;
    *(_DWORD *)v45 = 0;
    *(_WORD *)(v45 + 4) = 0;
    *(_BYTE *)(v45 + 6) = 0;
    *(_WORD *)(((v99 + 448) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v99 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v99 + 448, p_value);
    *(_DWORD *)(v99 + 448) = 0;
    v46 = *(_BYTE *)(((v99 + 452) >> 3) + 0x7FFF8000);
    LOBYTE(p_value) = v46 != 0;
    if ( v46 != 0 && (char)(((v99 - 96 + 36) & 7) + 3) >= v46 )
      __asan_report_store4(v99 + 452, p_value);
    *(_DWORD *)(v99 + 452) = 1;
    if ( *(_BYTE *)(((v99 + 456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v99 + 456, p_value);
    *(_DWORD *)(v99 + 456) = 2;
    __l._M_array = (std::initializer_list<data::GCGValueOperatorType>::iterator)(v99 + 448);
    __l._M_len = 3LL;
    *(_BYTE *)(((v99 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v99 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v99 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGValueOperatorType>::allocator((std::allocator<data::GCGValueOperatorType> *const)(v99 + 128));
    std::unordered_set<data::GCGValueOperatorType>::unordered_set(
      (std::unordered_set<data::GCGValueOperatorType> *const)(v99 + 1824),
      __l,
      0LL,
      (const std::unordered_set<data::GCGValueOperatorType>::hasher *)(v99 + 96),
      (const std::unordered_set<data::GCGValueOperatorType>::key_equal *)(v99 + 112),
      (const std::unordered_set<data::GCGValueOperatorType>::allocator_type *)(v99 + 128));
    std::allocator<data::GCGValueOperatorType>::~allocator((std::allocator<data::GCGValueOperatorType> *const)(v99 + 128));
    *(_BYTE *)(((v99 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v99 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v99 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v99 + 448) >> 3) + 0x7FFF8000) = -1800;
    p_operator_type = &config_effect->operator_type;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGValueOperatorType>,data::GCGValueOperatorType>(
            (std::unordered_set<data::GCGValueOperatorType> *)(v99 + 1824),
            &config_effect->operator_type) )
    {
      *(_DWORD *)(((v99 + 1344) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v99 + 1344) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v99 + 1375) >> 3) + 0x7FFF8000) != 0
        && (char)((v99 + 95) & 7) >= *(_BYTE *)(((v99 + 1375) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v99 + 1344, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v99 + 1344),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChargeValidatorFunc",
        316);
      v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v99 + 1344),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v49 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v48, (const char (*)[31])byte_1A5047A0);
      v50 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v49,
              (const char (*)[28])"config_effect.operator_type");
      v51 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v50, (const char (*)[8])" value:");
      *(_BYTE *)(((v99 + 320) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->operator_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->operator_type >> 3)
                                                                     + 0x7FFF8000) )
      {
        v51 = (common::milog::MiLogStream *)&config_effect->operator_type;
        __asan_report_load4(&config_effect->operator_type);
      }
      operator_type = (unsigned int)config_effect->operator_type;
      if ( *(_BYTE *)(((v99 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 320) >> 3) + 0x7FFF8000) <= 3 )
      {
        v51 = (common::milog::MiLogStream *)(v99 + 320);
        __asan_report_store4(v99 + 320, operator_type);
      }
      *(_DWORD *)(v99 + 320) = operator_type;
      p_operator_type = (data::GCGValueOperatorType *)(v99 + 320);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, (const unsigned int *)(v99 + 320));
      *(_BYTE *)(((v99 + 320) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1344));
      *(_DWORD *)(((v99 + 1344) >> 3) + 0x7FFF8000) = -117901064;
      v100 = -1;
      v53 = 0;
    }
    else
    {
      v53 = 1;
    }
    std::unordered_set<data::GCGValueOperatorType>::~unordered_set((std::unordered_set<data::GCGValueOperatorType> *const)(v99 + 1824));
    v54 = ((v99 + 1824) >> 3) + 2147450880;
    *(_DWORD *)v54 = -117901064;
    *(_WORD *)(v54 + 4) = -1800;
    *(_BYTE *)(v54 + 6) = -8;
    if ( v53 == 1 )
    {
      v55 = ((v99 + 1920) >> 3) + 2147450880;
      *(_DWORD *)v55 = 0;
      *(_WORD *)(v55 + 4) = 0;
      *(_BYTE *)(v55 + 6) = 0;
      *(_DWORD *)(((v99 + 1408) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v99 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1408) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v99 + 1408, p_operator_type);
      *(_DWORD *)(v99 + 1408) = 1;
      v56 = *(_BYTE *)(((v99 + 1412) >> 3) + 0x7FFF8000);
      LOBYTE(p_operator_type) = v56 != 0;
      if ( v56 != 0 && (char)(((v99 - 124) & 7) + 3) >= v56 )
        __asan_report_store4(v99 + 1412, p_operator_type);
      *(_DWORD *)(v99 + 1412) = 2;
      if ( *(_BYTE *)(((v99 + 1416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v99 + 1416, p_operator_type);
      *(_DWORD *)(v99 + 1416) = 3;
      v57 = *(_BYTE *)(((v99 + 1420) >> 3) + 0x7FFF8000);
      LOBYTE(p_operator_type) = v57 != 0;
      if ( v57 != 0 && (char)(((v99 - 116) & 7) + 3) >= v57 )
        __asan_report_store4(v99 + 1420, p_operator_type);
      *(_DWORD *)(v99 + 1420) = 4;
      if ( *(_BYTE *)(((v99 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1424) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v99 + 1424, p_operator_type);
      *(_DWORD *)(v99 + 1424) = 5;
      v58 = *(_BYTE *)(((v99 + 1428) >> 3) + 0x7FFF8000);
      LOBYTE(p_operator_type) = v58 != 0;
      if ( v58 != 0 && (char)(((v99 - 108) & 7) + 3) >= v58 )
        __asan_report_store4(v99 + 1428, p_operator_type);
      *(_DWORD *)(v99 + 1428) = 6;
      if ( *(_BYTE *)(((v99 + 1432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v99 + 1432, p_operator_type);
      *(_DWORD *)(v99 + 1432) = 7;
      v59 = *(_BYTE *)(((v99 + 1436) >> 3) + 0x7FFF8000);
      if ( v59 != 0 && (char)(((v99 - 100) & 7) + 3) >= v59 )
      {
        LOBYTE(p_operator_type) = v59 != 0;
        __asan_report_store4(v99 + 1436, p_operator_type);
      }
      *(_DWORD *)(v99 + 1436) = 8;
      v96._M_array = (std::initializer_list<data::GCGEffectElementType>::iterator)(v99 + 1408);
      v96._M_len = 8LL;
      *(_BYTE *)(((v99 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v99 + 160) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v99 + 176) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGEffectElementType>::allocator((std::allocator<data::GCGEffectElementType> *const)(v99 + 176));
      std::unordered_set<data::GCGEffectElementType>::unordered_set(
        (std::unordered_set<data::GCGEffectElementType> *const)(v99 + 1920),
        v96,
        0LL,
        (const std::unordered_set<data::GCGEffectElementType>::hasher *)(v99 + 144),
        (const std::unordered_set<data::GCGEffectElementType>::key_equal *)(v99 + 160),
        (const std::unordered_set<data::GCGEffectElementType>::allocator_type *)(v99 + 176));
      std::allocator<data::GCGEffectElementType>::~allocator((std::allocator<data::GCGEffectElementType> *const)(v99 + 176));
      *(_BYTE *)(((v99 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v99 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v99 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_DWORD *)(((v99 + 1408) >> 3) + 0x7FFF8000) = -117901064;
      p_limit_element_type = &config_effect->limit_element_type;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectElementType>,data::GCGEffectElementType>(
              (std::unordered_set<data::GCGEffectElementType> *)(v99 + 1920),
              &config_effect->limit_element_type) )
      {
        *(_DWORD *)(((v99 + 1472) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v99 + 1472) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v99 + 1503) >> 3) + 0x7FFF8000) != 0
          && (char)((v99 - 96 + 63) & 7) >= *(_BYTE *)(((v99 + 1503) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v99 + 1472, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v99 + 1472),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChargeValidatorFunc",
          320);
        v61 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v99 + 1472),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v62 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v61, (const char (*)[31])byte_1A5047A0);
        v63 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                v62,
                (const char (*)[33])"config_effect.limit_element_type");
        v64 = " value:";
        v65 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v63, (const char (*)[8])" value:");
        *(_BYTE *)(((v99 + 336) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->limit_element_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_effect->limit_element_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_effect->limit_element_type);
        }
        limit_element_type = config_effect->limit_element_type;
        v67 = *(_BYTE *)(((v99 + 336) >> 3) + 0x7FFF8000);
        if ( v67 != 0 && v67 <= 3 )
        {
          limit_element_type = v99 + 336;
          LOBYTE(v64) = v67 != 0;
          __asan_report_store4(v99 + 336, v64);
        }
        *(_DWORD *)(v99 + 336) = limit_element_type;
        p_limit_element_type = (data::GCGEffectElementType *)(v99 + 336);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v65, (const unsigned int *)(v99 + 336));
        *(_BYTE *)(((v99 + 336) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1472));
        *(_DWORD *)(((v99 + 1472) >> 3) + 0x7FFF8000) = -117901064;
        v100 = -1;
        v68 = 0;
      }
      else
      {
        v68 = 1;
      }
      std::unordered_set<data::GCGEffectElementType>::~unordered_set((std::unordered_set<data::GCGEffectElementType> *const)(v99 + 1920));
      v69 = ((v99 + 1920) >> 3) + 2147450880;
      *(_DWORD *)v69 = -117901064;
      *(_WORD *)(v69 + 4) = -1800;
      *(_BYTE *)(v69 + 6) = -8;
      if ( v68 == 1 )
      {
        v70 = ((v99 + 2016) >> 3) + 2147450880;
        *(_DWORD *)v70 = 0;
        *(_WORD *)(v70 + 4) = 0;
        *(_BYTE *)(v70 + 6) = 0;
        *(_DWORD *)(((v99 + 1536) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v99 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1536) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v99 + 1536, p_limit_element_type);
        *(_DWORD *)(v99 + 1536) = 0;
        v71 = (((_BYTE)v99 - 96 + 100) & 7u) + 3;
        if ( *(_BYTE *)(((v99 + 1540) >> 3) + 0x7FFF8000) != 0
          && (char)(((v99 - 96 + 100) & 7) + 3) >= *(_BYTE *)(((v99 + 1540) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v99 + 1540, v71);
        }
        *(_DWORD *)(v99 + 1540) = 1;
        if ( *(_BYTE *)(((v99 + 1544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1544) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v99 + 1544, v71);
        *(_DWORD *)(v99 + 1544) = 2;
        v72 = (((_BYTE)v99 - 96 + 108) & 7u) + 3;
        if ( *(_BYTE *)(((v99 + 1548) >> 3) + 0x7FFF8000) != 0
          && (char)(((v99 - 96 + 108) & 7) + 3) >= *(_BYTE *)(((v99 + 1548) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v99 + 1548, v72);
        }
        *(_DWORD *)(v99 + 1548) = 3;
        if ( *(_BYTE *)(((v99 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1552) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v99 + 1552, v72);
        *(_DWORD *)(v99 + 1552) = 13;
        v73 = (((_BYTE)v99 - 96 + 116) & 7u) + 3;
        if ( *(_BYTE *)(((v99 + 1556) >> 3) + 0x7FFF8000) != 0
          && (char)(((v99 - 96 + 116) & 7) + 3) >= *(_BYTE *)(((v99 + 1556) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v99 + 1556, v73);
        }
        *(_DWORD *)(v99 + 1556) = 14;
        if ( *(_BYTE *)(((v99 + 1560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 1560) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v99 + 1560, v73);
        *(_DWORD *)(v99 + 1560) = 17;
        if ( *(_BYTE *)(((v99 + 1564) >> 3) + 0x7FFF8000) != 0
          && (char)(((v99 - 96 + 124) & 7) + 3) >= *(_BYTE *)(((v99 + 1564) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v99 + 1564, (((_BYTE)v99 - 96 + 124) & 7u) + 3);
        }
        *(_DWORD *)(v99 + 1564) = 15;
        v97._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v99 + 1536);
        v97._M_len = 8LL;
        *(_BYTE *)(((v99 + 192) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v99 + 208) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v99 + 224) >> 3) + 0x7FFF8000) = 1;
        std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v99 + 224));
        std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
          (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v99 + 2016),
          v97,
          0LL,
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v99 + 192),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v99 + 208),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v99 + 224));
        std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v99 + 224));
        *(_BYTE *)(((v99 + 224) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v99 + 208) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v99 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_DWORD *)(((v99 + 1536) >> 3) + 0x7FFF8000) = -117901064;
        p_target_character = &config_effect->target_character;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
                (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v99 + 2016),
                &config_effect->target_character) )
        {
          *(_DWORD *)(((v99 + 1600) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v99 + 1600) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v99 + 1631) >> 3) + 0x7FFF8000) != 0
            && (char)((v99 + 95) & 7) >= *(_BYTE *)(((v99 + 1631) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v99 + 1600, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v99 + 1600),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectChargeValidatorFunc",
            329);
          v75 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v99 + 1600),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v76 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v75, (const char (*)[31])byte_1A5047A0);
          v77 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  v76,
                  (const char (*)[31])"config_effect.target_character");
          v78 = " value:";
          v79 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v77, (const char (*)[8])" value:");
          *(_BYTE *)(((v99 + 352) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config_effect->target_character);
          }
          target_character = config_effect->target_character;
          v81 = *(_BYTE *)(((v99 + 352) >> 3) + 0x7FFF8000);
          if ( v81 != 0 && v81 <= 3 )
          {
            target_character = v99 + 352;
            LOBYTE(v78) = v81 != 0;
            __asan_report_store4(v99 + 352, v78);
          }
          *(_DWORD *)(v99 + 352) = target_character;
          p_target_character = (data::GCGChooseTargetCharaterType *)(v99 + 352);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v79, (const unsigned int *)(v99 + 352));
          *(_BYTE *)(((v99 + 352) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1600));
          *(_DWORD *)(((v99 + 1600) >> 3) + 0x7FFF8000) = -117901064;
          v100 = -1;
          v82 = 0;
        }
        else
        {
          v82 = 1;
        }
        std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v99 + 2016));
        v83 = ((v99 + 2016) >> 3) + 2147450880;
        *(_DWORD *)v83 = -117901064;
        *(_WORD *)(v83 + 4) = -1800;
        *(_BYTE *)(v83 + 6) = -8;
        if ( v82 == 1 )
        {
          v84 = ((v99 + 2112) >> 3) + 2147450880;
          *(_DWORD *)v84 = 0;
          *(_WORD *)(v84 + 4) = 0;
          *(_BYTE *)(v84 + 6) = 0;
          *(_WORD *)(((v99 + 480) >> 3) + 0x7FFF8000) = 1024;
          if ( *(_BYTE *)(((v99 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 480) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v99 + 480, p_target_character);
          *(_DWORD *)(v99 + 480) = 0;
          v85 = (((_BYTE)v99 - 96 + 68) & 7u) + 3;
          if ( *(_BYTE *)(((v99 + 484) >> 3) + 0x7FFF8000) != 0
            && (char)(((v99 - 96 + 68) & 7) + 3) >= *(_BYTE *)(((v99 + 484) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v99 + 484, v85);
          }
          *(_DWORD *)(v99 + 484) = 1;
          if ( *(_BYTE *)(((v99 + 488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v99 + 488) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v99 + 488, v85);
          *(_DWORD *)(v99 + 488) = 2;
          v98._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v99 + 480);
          v98._M_len = 3LL;
          *(_BYTE *)(((v99 + 240) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v99 + 256) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v99 + 272) >> 3) + 0x7FFF8000) = 1;
          std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v99 + 272));
          std::unordered_set<data::GCGEffectCampType>::unordered_set(
            (std::unordered_set<data::GCGEffectCampType> *const)(v99 + 2112),
            v98,
            0LL,
            (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v99 + 240),
            (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v99 + 256),
            (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v99 + 272));
          std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v99 + 272));
          *(_BYTE *)(((v99 + 272) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v99 + 256) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v99 + 240) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v99 + 480) >> 3) + 0x7FFF8000) = -1800;
          if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                  (std::unordered_set<data::GCGEffectCampType> *)(v99 + 2112),
                  &config_effect->target_camp) )
          {
            *(_DWORD *)(((v99 + 1664) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v99 + 1664) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v99 + 1695) >> 3) + 0x7FFF8000) != 0
              && (char)((v99 - 97) & 7) >= *(_BYTE *)(((v99 + 1695) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v99 + 1664, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v99 + 1664),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChargeValidatorFunc",
              338);
            v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v99 + 1664),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v87 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    v86,
                    (const char (*)[31])byte_1A5047A0);
            v88 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    v87,
                    (const char (*)[26])"config_effect.target_camp");
            v89 = " value:";
            v90 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v88, (const char (*)[8])" value:");
            *(_BYTE *)(((v99 + 368) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                           + 0x7FFF8000) )
            {
              __asan_report_load4(&config_effect->target_camp);
            }
            target_camp = config_effect->target_camp;
            v92 = *(_BYTE *)(((v99 + 368) >> 3) + 0x7FFF8000);
            if ( v92 != 0 && v92 <= 3 )
            {
              target_camp = v99 + 368;
              LOBYTE(v89) = v92 != 0;
              __asan_report_store4(v99 + 368, v89);
            }
            *(_DWORD *)(v99 + 368) = target_camp;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v90,
              (const unsigned int *)(v99 + 368));
            *(_BYTE *)(((v99 + 368) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v99 + 1664));
            *(_DWORD *)(((v99 + 1664) >> 3) + 0x7FFF8000) = -117901064;
            v100 = -1;
            v93 = 0;
          }
          else
          {
            v93 = 1;
          }
          std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v99 + 2112));
          if ( v93 == 1 )
            v100 = 0;
        }
      }
    }
  }
  if ( v102 == (char *)v99 )
  {
    *(_QWORD *)((v99 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v99 >> 3) + 0x7FFF8100) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 264) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v99 >> 3) + 0x7FFF810C) = 0LL;
  }
  else
  {
    *(_QWORD *)v99 = 1172321806LL;
    __asan_stack_free_6(v99, 2208LL, v102);
  }
  return v100;
};

// Line 346: range 000000000F1D6A66-000000000F1D745A
int32_t __cdecl ConfigGCGExecEffectTransferEnergyValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectTransferEnergy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:346 64 8 13 __for_end:346 96 16 26 cast_config_effect_ptr:346 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectTransferEnergyValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectTransferEnergy,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectTransferEnergy>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectTransferEnergy> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectTransferEnergyValidator",
        346);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        v12,
        (const char (*)[34])"ConfigGCGExecEffectTransferEnergy");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectTransferEnergyValidator",
            346);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectTransferEnergyValidator",
              346);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectTransferEnergyValidator",
          346);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectTransferEnergy,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectTransferEnergy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectTransferEnergyValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectTransferEnergy>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectTransferEnergy> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectTransferEnergyValidator",
    346);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
    v9,
    (const char (*)[34])"ConfigGCGExecEffectTransferEnergy");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 347: range 000000000F1D745B-000000000F1DAD8E
int32_t __cdecl ConfigGCGExecEffectTransferEnergyValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectTransferEnergy *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::DeclaredValueMap *p_declared_value_map; // rcx
  data::DeclaredValueMap *v6; // rcx
  bool v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned __int64 p_value; // rsi
  int v11; // ebx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // ebx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int v26; // ebx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // ebx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  int v32; // ebx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  int v35; // ebx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int v38; // ebx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rbx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v41; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rcx
  __int64 type; // rsi
  unsigned __int64 v44; // rax
  unsigned __int64 v45; // rax
  char v46; // dl
  char v47; // dl
  char v48; // dl
  char v49; // dl
  data::GCGEffectElementType *p_limit_element_type; // rsi
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rdi
  __int64 limit_element_type; // rsi
  int v56; // ebx
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rax
  unsigned __int64 v59; // rax
  char v60; // dl
  char v61; // dl
  unsigned __int64 v62; // rax
  data::GCGChooseTargetCharaterType *p_source_character; // rsi
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rdi
  __int64 source_character; // rsi
  int v69; // ebx
  unsigned __int64 v70; // rax
  unsigned __int64 v71; // rax
  char v72; // cl
  char v73; // cl
  data::GCGChooseTargetCharaterType *p_target_character; // rsi
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  const char *v78; // rsi
  common::milog::MiLogStream *v79; // rcx
  data::GCGChooseTargetCharaterType target_character; // edi
  char v81; // al
  int v82; // ebx
  unsigned __int64 v83; // rax
  unsigned __int64 v84; // rax
  __int64 v85; // rsi
  data::GCGEffectCampType *p_source_camp; // rsi
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // rax
  const char *v90; // rsi
  common::milog::MiLogStream *v91; // rcx
  data::GCGEffectCampType source_camp; // edi
  char v93; // al
  int v94; // ebx
  unsigned __int64 v95; // rax
  unsigned __int64 v96; // rax
  __int64 v97; // rsi
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // rax
  common::milog::MiLogStream *v100; // rax
  const char *v101; // rsi
  common::milog::MiLogStream *v102; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v104; // al
  int v105; // ebx
  std::initializer_list<data::GCGEffectElementType> __l; // [rsp+0h] [rbp-A60h]
  std::initializer_list<data::GCGChooseTargetCharaterType> v108; // [rsp+10h] [rbp-A50h]
  std::initializer_list<data::GCGChooseTargetCharaterType> v109; // [rsp+20h] [rbp-A40h]
  std::initializer_list<data::GCGEffectCampType> v110; // [rsp+30h] [rbp-A30h]
  std::initializer_list<data::GCGEffectCampType> v111; // [rsp+40h] [rbp-A20h]
  unsigned __int64 v112; // [rsp+58h] [rbp-A08h]
  int32_t v113; // [rsp+64h] [rbp-9FCh]
  char v115[2512]; // [rsp+90h] [rbp-9D0h] BYREF

  v112 = (unsigned __int64)v115;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2464LL);
    if ( v3 )
      v112 = v3;
  }
  *(_QWORD *)v112 = 1102416563LL;
  *(_QWORD *)(v112 + 8) = "59 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1"
                          " 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <"
                          "unknown> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 1 9 <unkn"
                          "own> 304 1 9 <unknown> 320 1 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown>"
                          " 384 4 9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 8 8 iter:349 480 "
                          "8 9 <unknown> 512 12 9 <unknown> 544 12 9 <unknown> 576 16 22 declared_value_ptr:349 608 16 22"
                          " declared_value_ptr:349 640 16 22 declared_value_ptr:349 672 16 22 declared_value_ptr:349 704 "
                          "16 22 declared_value_ptr:349 736 16 22 declared_value_ptr:349 768 16 9 <unknown> 800 20 9 <unk"
                          "nown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <"
                          "unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 "
                          "32 9 <unknown> 1504 32 9 <unknown> 1568 32 9 <unknown> 1632 32 9 <unknown> 1696 32 9 <unknown>"
                          " 1760 32 9 <unknown> 1824 32 9 <unknown> 1888 56 28 valid_declared_value_set:349 1984 56 23 va"
                          "lid_enum_type_set:351 2080 56 23 valid_enum_type_set:360 2176 56 23 valid_enum_type_set:366 22"
                          "72 56 23 valid_enum_type_set:371 2368 56 23 valid_enum_type_set:375";
  *(_QWORD *)(v112 + 16) = ConfigGCGExecEffectTransferEnergyValidatorFunc;
  v4 = (_DWORD *)(v112 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234753535;
  v4[536862730] = -234556927;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -218959360;
  v4[536862735] = -218959360;
  v4[536862736] = -219020288;
  v4[536862737] = -219020288;
  v4[536862738] = -219021312;
  v4[536862739] = -219021312;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862742] = -219021312;
  v4[536862743] = -219021312;
  v4[536862744] = -219021312;
  v4[536862745] = -234618880;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -218959118;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -218959118;
  v4[536862780] = -234881024;
  v4[536862781] = -218959118;
  v4[536862783] = -234881024;
  v4[536862784] = -218959118;
  v4[536862786] = -234881024;
  v4[536862787] = -218959118;
  v4[536862789] = -234881024;
  v4[536862790] = -218959118;
  v4[536862792] = -234881024;
  v4[536862793] = -218959118;
  v4[536862795] = -218103808;
  v4[536862796] = -202116109;
  if ( *(_BYTE *)(((v112 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 336) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v112 + 336, config_skill);
  *(_DWORD *)(v112 + 336) = 4;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v112 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v112 + 1888),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v112 + 336),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v112 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v112 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v112 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v112 + 80));
  *(_BYTE *)(((v112 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v112 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v112 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v112 + 336) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v112 + 448) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v112 + 448) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v112 + 448, v112 + 336);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v112 + 448) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v112 + 480) >> 3) + 0x7FFF8000) = 0;
  v6 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v112 + 480) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v112 + 480, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v112 + 480) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v6);
  v7 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v112 + 448),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v112 + 480));
  *(_BYTE *)(((v112 + 480) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    *(_DWORD *)(((v112 + 864) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v112 + 864) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v112 + 895) >> 3) + 0x7FFF8000) != 0
      && (char)((v112 + 127) & 7) >= *(_BYTE *)(((v112 + 895) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v112 + 864, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v112 + 864),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectTransferEnergyValidatorFunc",
      349);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v112 + 864),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v8, (const char (*)[29])byte_1A5045A0);
    p_value = (unsigned __int64)"declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v9, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 864));
    *(_DWORD *)(((v112 + 864) >> 3) + 0x7FFF8000) = -117901064;
    v113 = -1;
    v11 = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v112 + 928) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v112 + 928) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v112 + 959) >> 3) + 0x7FFF8000) != 0
        && (char)((v112 - 96 + 31) & 7) >= *(_BYTE *)(((v112 + 959) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v112 + 928, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v112 + 928),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectTransferEnergyValidatorFunc",
        349);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v112 + 928),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      p_value = (unsigned __int64)"declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 928));
      *(_DWORD *)(((v112 + 928) >> 3) + 0x7FFF8000) = -117901064;
      v113 = -1;
      v11 = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v112 + 1888),
              &v16->type) )
      {
        *(_DWORD *)(((v112 + 992) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v112 + 992) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v112 + 1023) >> 3) + 0x7FFF8000) != 0
          && (char)((v112 - 96 + 95) & 7) >= *(_BYTE *)(((v112 + 1023) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v112 + 992, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v112 + 992),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectTransferEnergyValidatorFunc",
          349);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v112 + 992),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        p_value = (unsigned __int64)"declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 992));
        *(_DWORD *)(((v112 + 992) >> 3) + 0x7FFF8000) = -117901064;
        v113 = -1;
        v11 = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v112 + 576) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
            if ( *(_WORD *)(((v112 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v112 + 576));
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v112 + 576)) )
            {
              *(_DWORD *)(((v112 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v112 + 1056) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v112 + 1087) >> 3) + 0x7FFF8000) != 0
                && (char)((v112 + 63) & 7) >= *(_BYTE *)(((v112 + 1087) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v112 + 1056, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v112 + 1056),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectTransferEnergyValidatorFunc",
                349);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v112 + 1056),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1056));
              *(_DWORD *)(((v112 + 1056) >> 3) + 0x7FFF8000) = -117901064;
              v113 = -1;
              v23 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v112 + 576))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v23 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v112 + 576));
            *(_WORD *)(((v112 + 576) >> 3) + 0x7FFF8000) = -1800;
            if ( v23 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Element:
            *(_WORD *)(((v112 + 608) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
            if ( *(_WORD *)(((v112 + 608) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v112 + 608));
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v112 + 608)) )
            {
              *(_DWORD *)(((v112 + 1120) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v112 + 1120) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v112 + 1151) >> 3) + 0x7FFF8000) != 0
                && (char)((v112 + 127) & 7) >= *(_BYTE *)(((v112 + 1151) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v112 + 1120, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v112 + 1120),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectTransferEnergyValidatorFunc",
                349);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v112 + 1120),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v24,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v25,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1120));
              *(_DWORD *)(((v112 + 1120) >> 3) + 0x7FFF8000) = -117901064;
              v113 = -1;
              v26 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v112 + 608))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v26 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v112 + 608));
            *(_WORD *)(((v112 + 608) >> 3) + 0x7FFF8000) = -1800;
            if ( v26 )
              goto LABEL_98;
            v11 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v112 + 640) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
            if ( *(_WORD *)(((v112 + 640) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v112 + 640));
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v112 + 640)) )
            {
              *(_DWORD *)(((v112 + 1184) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v112 + 1184) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v112 + 1215) >> 3) + 0x7FFF8000) != 0
                && (char)((v112 - 96 + 31) & 7) >= *(_BYTE *)(((v112 + 1215) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v112 + 1184, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v112 + 1184),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectTransferEnergyValidatorFunc",
                349);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v112 + 1184),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v27,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v28,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1184));
              *(_DWORD *)(((v112 + 1184) >> 3) + 0x7FFF8000) = -117901064;
              v113 = -1;
              v29 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v112 + 640))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v29 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v112 + 640));
            *(_WORD *)(((v112 + 640) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              goto LABEL_98;
            v11 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v112 + 704) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
            if ( *(_WORD *)(((v112 + 704) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v112 + 704));
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v112 + 704)) )
            {
              *(_DWORD *)(((v112 + 1312) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v112 + 1312) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v112 + 1343) >> 3) + 0x7FFF8000) != 0
                && (char)((v112 + 63) & 7) >= *(_BYTE *)(((v112 + 1343) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v112 + 1312, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v112 + 1312),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectTransferEnergyValidatorFunc",
                349);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v112 + 1312),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1312));
              *(_DWORD *)(((v112 + 1312) >> 3) + 0x7FFF8000) = -117901064;
              v113 = -1;
              v35 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v112 + 704))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v35 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v112 + 704));
            *(_WORD *)(((v112 + 704) >> 3) + 0x7FFF8000) = -1800;
            if ( v35 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Heal:
            *(_WORD *)(((v112 + 672) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
            if ( *(_WORD *)(((v112 + 672) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v112 + 672));
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v112 + 672)) )
            {
              *(_DWORD *)(((v112 + 1248) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v112 + 1248) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v112 + 1279) >> 3) + 0x7FFF8000) != 0
                && (char)((v112 - 96 + 95) & 7) >= *(_BYTE *)(((v112 + 1279) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v112 + 1248, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v112 + 1248),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectTransferEnergyValidatorFunc",
                349);
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v112 + 1248),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v30,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v31,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1248));
              *(_DWORD *)(((v112 + 1248) >> 3) + 0x7FFF8000) = -117901064;
              v113 = -1;
              v32 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v112 + 672))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v32 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v112 + 672));
            *(_WORD *)(((v112 + 672) >> 3) + 0x7FFF8000) = -1800;
            if ( v32 )
              goto LABEL_98;
            v11 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v112 + 736) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
            if ( *(_WORD *)(((v112 + 736) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v112 + 736));
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v112 + 736)) )
            {
              *(_DWORD *)(((v112 + 1376) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v112 + 1376) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v112 + 1407) >> 3) + 0x7FFF8000) != 0
                && (char)((v112 + 127) & 7) >= *(_BYTE *)(((v112 + 1407) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v112 + 1376, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v112 + 1376),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectTransferEnergyValidatorFunc",
                349);
              v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v112 + 1376),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v36,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v37,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1376));
              *(_DWORD *)(((v112 + 1376) >> 3) + 0x7FFF8000) = -117901064;
              v113 = -1;
              v38 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v112 + 736))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v38 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v112 + 736));
            *(_WORD *)(((v112 + 736) >> 3) + 0x7FFF8000) = -1800;
            if ( v38 )
LABEL_98:
              v11 = 1;
            else
              v11 = 0;
            break;
          default:
            *(_DWORD *)(((v112 + 1440) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v112 + 1440) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v112 + 1471) >> 3) + 0x7FFF8000) != 0
              && (char)((v112 - 96 + 31) & 7) >= *(_BYTE *)(((v112 + 1471) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v112 + 1440, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v112 + 1440),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectTransferEnergyValidatorFunc",
              349);
            v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v112 + 1440),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v40 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v39,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v112 + 352) >> 3) + 0x7FFF8000) = 4;
            v41 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v112 + 448));
            v42 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41->second);
            if ( *(_BYTE *)(((unsigned __int64)&v42->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v42->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v42->type);
            }
            type = (unsigned int)v42->type;
            if ( *(_BYTE *)(((v112 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 352) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v112 + 352, type);
            *(_DWORD *)(v112 + 352) = type;
            p_value = v112 + 352;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v40,
              (const unsigned int *)(v112 + 352));
            *(_BYTE *)(((v112 + 352) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1440));
            *(_DWORD *)(((v112 + 1440) >> 3) + 0x7FFF8000) = -117901064;
            v113 = -1;
            v11 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v112 + 1888));
  v44 = ((v112 + 1888) >> 3) + 2147450880;
  *(_DWORD *)v44 = -117901064;
  *(_WORD *)(v44 + 4) = -1800;
  *(_BYTE *)(v44 + 6) = -8;
  *(_BYTE *)(((v112 + 448) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
  {
    v45 = ((v112 + 1984) >> 3) + 2147450880;
    *(_DWORD *)v45 = 0;
    *(_WORD *)(v45 + 4) = 0;
    *(_BYTE *)(v45 + 6) = 0;
    *(_DWORD *)(((v112 + 1504) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v112 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v112 + 1504, p_value);
    *(_DWORD *)(v112 + 1504) = 1;
    v46 = *(_BYTE *)(((v112 + 1508) >> 3) + 0x7FFF8000);
    LOBYTE(p_value) = v46 != 0;
    if ( v46 != 0 && (char)(((v112 - 96 + 68) & 7) + 3) >= v46 )
      __asan_report_store4(v112 + 1508, p_value);
    *(_DWORD *)(v112 + 1508) = 2;
    if ( *(_BYTE *)(((v112 + 1512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 1512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v112 + 1512, p_value);
    *(_DWORD *)(v112 + 1512) = 3;
    v47 = *(_BYTE *)(((v112 + 1516) >> 3) + 0x7FFF8000);
    LOBYTE(p_value) = v47 != 0;
    if ( v47 != 0 && (char)(((v112 - 96 + 76) & 7) + 3) >= v47 )
      __asan_report_store4(v112 + 1516, p_value);
    *(_DWORD *)(v112 + 1516) = 4;
    if ( *(_BYTE *)(((v112 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v112 + 1520, p_value);
    *(_DWORD *)(v112 + 1520) = 5;
    v48 = *(_BYTE *)(((v112 + 1524) >> 3) + 0x7FFF8000);
    LOBYTE(p_value) = v48 != 0;
    if ( v48 != 0 && (char)(((v112 - 96 + 84) & 7) + 3) >= v48 )
      __asan_report_store4(v112 + 1524, p_value);
    *(_DWORD *)(v112 + 1524) = 6;
    if ( *(_BYTE *)(((v112 + 1528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 1528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v112 + 1528, p_value);
    *(_DWORD *)(v112 + 1528) = 7;
    v49 = *(_BYTE *)(((v112 + 1532) >> 3) + 0x7FFF8000);
    if ( v49 != 0 && (char)(((v112 - 96 + 92) & 7) + 3) >= v49 )
    {
      LOBYTE(p_value) = v49 != 0;
      __asan_report_store4(v112 + 1532, p_value);
    }
    *(_DWORD *)(v112 + 1532) = 8;
    __l._M_array = (std::initializer_list<data::GCGEffectElementType>::iterator)(v112 + 1504);
    __l._M_len = 8LL;
    *(_BYTE *)(((v112 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v112 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v112 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectElementType>::allocator((std::allocator<data::GCGEffectElementType> *const)(v112 + 128));
    std::unordered_set<data::GCGEffectElementType>::unordered_set(
      (std::unordered_set<data::GCGEffectElementType> *const)(v112 + 1984),
      __l,
      0LL,
      (const std::unordered_set<data::GCGEffectElementType>::hasher *)(v112 + 96),
      (const std::unordered_set<data::GCGEffectElementType>::key_equal *)(v112 + 112),
      (const std::unordered_set<data::GCGEffectElementType>::allocator_type *)(v112 + 128));
    std::allocator<data::GCGEffectElementType>::~allocator((std::allocator<data::GCGEffectElementType> *const)(v112 + 128));
    *(_BYTE *)(((v112 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v112 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v112 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v112 + 1504) >> 3) + 0x7FFF8000) = -117901064;
    p_limit_element_type = &config_effect->limit_element_type;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectElementType>,data::GCGEffectElementType>(
            (std::unordered_set<data::GCGEffectElementType> *)(v112 + 1984),
            &config_effect->limit_element_type) )
    {
      *(_DWORD *)(((v112 + 1568) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v112 + 1568) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v112 + 1599) >> 3) + 0x7FFF8000) != 0
        && (char)((v112 + 63) & 7) >= *(_BYTE *)(((v112 + 1599) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v112 + 1568, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v112 + 1568),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectTransferEnergyValidatorFunc",
        351);
      v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v112 + 1568),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v52 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v51, (const char (*)[31])byte_1A5047A0);
      v53 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              v52,
              (const char (*)[33])"config_effect.limit_element_type");
      v54 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v53, (const char (*)[8])" value:");
      *(_BYTE *)(((v112 + 368) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->limit_element_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->limit_element_type >> 3) + 0x7FFF8000) <= 3 )
      {
        v54 = (common::milog::MiLogStream *)&config_effect->limit_element_type;
        __asan_report_load4(&config_effect->limit_element_type);
      }
      limit_element_type = (unsigned int)config_effect->limit_element_type;
      if ( *(_BYTE *)(((v112 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 368) >> 3) + 0x7FFF8000) <= 3 )
      {
        v54 = (common::milog::MiLogStream *)(v112 + 368);
        __asan_report_store4(v112 + 368, limit_element_type);
      }
      *(_DWORD *)(v112 + 368) = limit_element_type;
      p_limit_element_type = (data::GCGEffectElementType *)(v112 + 368);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v54, (const unsigned int *)(v112 + 368));
      *(_BYTE *)(((v112 + 368) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1568));
      *(_DWORD *)(((v112 + 1568) >> 3) + 0x7FFF8000) = -117901064;
      v113 = -1;
      v56 = 0;
    }
    else
    {
      v56 = 1;
    }
    std::unordered_set<data::GCGEffectElementType>::~unordered_set((std::unordered_set<data::GCGEffectElementType> *const)(v112 + 1984));
    v57 = ((v112 + 1984) >> 3) + 2147450880;
    *(_DWORD *)v57 = -117901064;
    *(_WORD *)(v57 + 4) = -1800;
    *(_BYTE *)(v57 + 6) = -8;
    if ( v56 == 1 )
    {
      v58 = ((v112 + 2080) >> 3) + 2147450880;
      *(_DWORD *)v58 = 0;
      *(_WORD *)(v58 + 4) = 0;
      *(_BYTE *)(v58 + 6) = 0;
      v59 = ((v112 + 800) >> 3) + 2147450880;
      *(_WORD *)v59 = 0;
      *(_BYTE *)(v59 + 2) = 4;
      if ( *(_BYTE *)(((v112 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v112 + 800, p_limit_element_type);
      *(_DWORD *)(v112 + 800) = 0;
      v60 = *(_BYTE *)(((v112 + 804) >> 3) + 0x7FFF8000);
      LOBYTE(p_limit_element_type) = v60 != 0;
      if ( v60 != 0 && (char)(((v112 + 36) & 7) + 3) >= v60 )
        __asan_report_store4(v112 + 804, p_limit_element_type);
      *(_DWORD *)(v112 + 804) = 1;
      if ( *(_BYTE *)(((v112 + 808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 808) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v112 + 808, p_limit_element_type);
      *(_DWORD *)(v112 + 808) = 2;
      v61 = *(_BYTE *)(((v112 + 812) >> 3) + 0x7FFF8000);
      LOBYTE(p_limit_element_type) = v61 != 0;
      if ( v61 != 0 && (char)(((v112 + 44) & 7) + 3) >= v61 )
        __asan_report_store4(v112 + 812, p_limit_element_type);
      *(_DWORD *)(v112 + 812) = 3;
      if ( *(_BYTE *)(((v112 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v112 + 816, p_limit_element_type);
      *(_DWORD *)(v112 + 816) = 11;
      v108._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v112 + 800);
      v108._M_len = 5LL;
      *(_BYTE *)(((v112 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v112 + 160) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v112 + 176) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v112 + 176));
      std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
        (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v112 + 2080),
        v108,
        0LL,
        (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v112 + 144),
        (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v112 + 160),
        (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v112 + 176));
      std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v112 + 176));
      *(_BYTE *)(((v112 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v112 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v112 + 144) >> 3) + 0x7FFF8000) = -8;
      v62 = ((v112 + 800) >> 3) + 2147450880;
      *(_WORD *)v62 = -1800;
      *(_BYTE *)(v62 + 2) = -8;
      p_source_character = &config_effect->source_character;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
              (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v112 + 2080),
              &config_effect->source_character) )
      {
        *(_DWORD *)(((v112 + 1632) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v112 + 1632) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v112 + 1663) >> 3) + 0x7FFF8000) != 0
          && (char)((v112 + 127) & 7) >= *(_BYTE *)(((v112 + 1663) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v112 + 1632, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v112 + 1632),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectTransferEnergyValidatorFunc",
          360);
        v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v112 + 1632),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v65 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v64, (const char (*)[31])byte_1A5047A0);
        v66 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                v65,
                (const char (*)[31])"config_effect.source_character");
        v67 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v66, (const char (*)[8])" value:");
        *(_BYTE *)(((v112 + 384) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->source_character >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_effect->source_character >> 3) + 0x7FFF8000) <= 3 )
        {
          v67 = (common::milog::MiLogStream *)&config_effect->source_character;
          __asan_report_load4(&config_effect->source_character);
        }
        source_character = (unsigned int)config_effect->source_character;
        if ( *(_BYTE *)(((v112 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 384) >> 3) + 0x7FFF8000) <= 3 )
        {
          v67 = (common::milog::MiLogStream *)(v112 + 384);
          __asan_report_store4(v112 + 384, source_character);
        }
        *(_DWORD *)(v112 + 384) = source_character;
        p_source_character = (data::GCGChooseTargetCharaterType *)(v112 + 384);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, (const unsigned int *)(v112 + 384));
        *(_BYTE *)(((v112 + 384) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1632));
        *(_DWORD *)(((v112 + 1632) >> 3) + 0x7FFF8000) = -117901064;
        v113 = -1;
        v69 = 0;
      }
      else
      {
        v69 = 1;
      }
      std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v112 + 2080));
      v70 = ((v112 + 2080) >> 3) + 2147450880;
      *(_DWORD *)v70 = -117901064;
      *(_WORD *)(v70 + 4) = -1800;
      *(_BYTE *)(v70 + 6) = -8;
      if ( v69 == 1 )
      {
        v71 = ((v112 + 2176) >> 3) + 2147450880;
        *(_DWORD *)v71 = 0;
        *(_WORD *)(v71 + 4) = 0;
        *(_BYTE *)(v71 + 6) = 0;
        *(_WORD *)(((v112 + 768) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v112 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 768) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v112 + 768, p_source_character);
        *(_DWORD *)(v112 + 768) = 0;
        v72 = *(_BYTE *)(((v112 + 772) >> 3) + 0x7FFF8000);
        LOBYTE(p_source_character) = v72 != 0;
        if ( v72 != 0 && (char)(((v112 - 96 + 100) & 7) + 3) >= v72 )
          __asan_report_store4(v112 + 772, p_source_character);
        *(_DWORD *)(v112 + 772) = 1;
        if ( *(_BYTE *)(((v112 + 776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 776) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v112 + 776, p_source_character);
        *(_DWORD *)(v112 + 776) = 2;
        v73 = *(_BYTE *)(((v112 + 780) >> 3) + 0x7FFF8000);
        if ( v73 != 0 && (char)(((v112 - 96 + 108) & 7) + 3) >= v73 )
        {
          LOBYTE(p_source_character) = v73 != 0;
          __asan_report_store4(v112 + 780, p_source_character);
        }
        *(_DWORD *)(v112 + 780) = 3;
        v109._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v112 + 768);
        v109._M_len = 4LL;
        *(_BYTE *)(((v112 + 192) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v112 + 208) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v112 + 224) >> 3) + 0x7FFF8000) = 1;
        std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v112 + 224));
        std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
          (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v112 + 2176),
          v109,
          0LL,
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v112 + 192),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v112 + 208),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v112 + 224));
        std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v112 + 224));
        *(_BYTE *)(((v112 + 224) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v112 + 208) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v112 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_WORD *)(((v112 + 768) >> 3) + 0x7FFF8000) = -1800;
        p_target_character = &config_effect->target_character;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
                (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v112 + 2176),
                &config_effect->target_character) )
        {
          *(_DWORD *)(((v112 + 1696) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v112 + 1696) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v112 + 1727) >> 3) + 0x7FFF8000) != 0
            && (char)((v112 - 96 + 31) & 7) >= *(_BYTE *)(((v112 + 1727) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v112 + 1696, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v112 + 1696),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectTransferEnergyValidatorFunc",
            366);
          v75 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v112 + 1696),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v76 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v75, (const char (*)[31])byte_1A5047A0);
          v77 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  v76,
                  (const char (*)[31])"config_effect.target_character");
          v78 = " value:";
          v79 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v77, (const char (*)[8])" value:");
          *(_BYTE *)(((v112 + 400) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config_effect->target_character);
          }
          target_character = config_effect->target_character;
          v81 = *(_BYTE *)(((v112 + 400) >> 3) + 0x7FFF8000);
          if ( v81 != 0 && v81 <= 3 )
          {
            target_character = v112 + 400;
            LOBYTE(v78) = v81 != 0;
            __asan_report_store4(v112 + 400, v78);
          }
          *(_DWORD *)(v112 + 400) = target_character;
          p_target_character = (data::GCGChooseTargetCharaterType *)(v112 + 400);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v79,
            (const unsigned int *)(v112 + 400));
          *(_BYTE *)(((v112 + 400) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1696));
          *(_DWORD *)(((v112 + 1696) >> 3) + 0x7FFF8000) = -117901064;
          v113 = -1;
          v82 = 0;
        }
        else
        {
          v82 = 1;
        }
        std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v112 + 2176));
        v83 = ((v112 + 2176) >> 3) + 2147450880;
        *(_DWORD *)v83 = -117901064;
        *(_WORD *)(v83 + 4) = -1800;
        *(_BYTE *)(v83 + 6) = -8;
        if ( v82 == 1 )
        {
          v84 = ((v112 + 2272) >> 3) + 2147450880;
          *(_DWORD *)v84 = 0;
          *(_WORD *)(v84 + 4) = 0;
          *(_BYTE *)(v84 + 6) = 0;
          *(_WORD *)(((v112 + 512) >> 3) + 0x7FFF8000) = 1024;
          if ( *(_BYTE *)(((v112 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 512) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v112 + 512, p_target_character);
          *(_DWORD *)(v112 + 512) = 0;
          v85 = (((_BYTE)v112 - 96 + 100) & 7u) + 3;
          if ( *(_BYTE *)(((v112 + 516) >> 3) + 0x7FFF8000) != 0
            && (char)(((v112 - 96 + 100) & 7) + 3) >= *(_BYTE *)(((v112 + 516) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v112 + 516, v85);
          }
          *(_DWORD *)(v112 + 516) = 1;
          if ( *(_BYTE *)(((v112 + 520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 520) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v112 + 520, v85);
          *(_DWORD *)(v112 + 520) = 2;
          v110._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v112 + 512);
          v110._M_len = 3LL;
          *(_BYTE *)(((v112 + 240) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v112 + 256) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v112 + 272) >> 3) + 0x7FFF8000) = 1;
          std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v112 + 272));
          std::unordered_set<data::GCGEffectCampType>::unordered_set(
            (std::unordered_set<data::GCGEffectCampType> *const)(v112 + 2272),
            v110,
            0LL,
            (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v112 + 240),
            (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v112 + 256),
            (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v112 + 272));
          std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v112 + 272));
          *(_BYTE *)(((v112 + 272) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v112 + 256) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v112 + 240) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v112 + 512) >> 3) + 0x7FFF8000) = -1800;
          p_source_camp = &config_effect->source_camp;
          if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                  (std::unordered_set<data::GCGEffectCampType> *)(v112 + 2272),
                  &config_effect->source_camp) )
          {
            *(_DWORD *)(((v112 + 1760) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v112 + 1760) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v112 + 1791) >> 3) + 0x7FFF8000) != 0
              && (char)((v112 - 96 + 95) & 7) >= *(_BYTE *)(((v112 + 1791) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v112 + 1760, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v112 + 1760),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectTransferEnergyValidatorFunc",
              371);
            v87 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v112 + 1760),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v88 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    v87,
                    (const char (*)[31])byte_1A5047A0);
            v89 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    v88,
                    (const char (*)[26])"config_effect.source_camp");
            v90 = " value:";
            v91 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v89, (const char (*)[8])" value:");
            *(_BYTE *)(((v112 + 416) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)&config_effect->source_camp >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config_effect + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->source_camp >> 3)
                                                                            + 0x7FFF8000) )
            {
              __asan_report_load4(&config_effect->source_camp);
            }
            source_camp = config_effect->source_camp;
            v93 = *(_BYTE *)(((v112 + 416) >> 3) + 0x7FFF8000);
            if ( v93 != 0 && v93 <= 3 )
            {
              source_camp = v112 + 416;
              LOBYTE(v90) = v93 != 0;
              __asan_report_store4(v112 + 416, v90);
            }
            *(_DWORD *)(v112 + 416) = source_camp;
            p_source_camp = (data::GCGEffectCampType *)(v112 + 416);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v91,
              (const unsigned int *)(v112 + 416));
            *(_BYTE *)(((v112 + 416) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1760));
            *(_DWORD *)(((v112 + 1760) >> 3) + 0x7FFF8000) = -117901064;
            v113 = -1;
            v94 = 0;
          }
          else
          {
            v94 = 1;
          }
          std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v112 + 2272));
          v95 = ((v112 + 2272) >> 3) + 2147450880;
          *(_DWORD *)v95 = -117901064;
          *(_WORD *)(v95 + 4) = -1800;
          *(_BYTE *)(v95 + 6) = -8;
          if ( v94 == 1 )
          {
            v96 = ((v112 + 2368) >> 3) + 2147450880;
            *(_DWORD *)v96 = 0;
            *(_WORD *)(v96 + 4) = 0;
            *(_BYTE *)(v96 + 6) = 0;
            *(_WORD *)(((v112 + 544) >> 3) + 0x7FFF8000) = 1024;
            if ( *(_BYTE *)(((v112 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 544) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v112 + 544, p_source_camp);
            *(_DWORD *)(v112 + 544) = 0;
            v97 = (((_BYTE)v112 + 36) & 7u) + 3;
            if ( *(_BYTE *)(((v112 + 548) >> 3) + 0x7FFF8000) != 0
              && (char)(((v112 + 36) & 7) + 3) >= *(_BYTE *)(((v112 + 548) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v112 + 548, v97);
            }
            *(_DWORD *)(v112 + 548) = 1;
            if ( *(_BYTE *)(((v112 + 552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v112 + 552) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v112 + 552, v97);
            *(_DWORD *)(v112 + 552) = 2;
            v111._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v112 + 544);
            v111._M_len = 3LL;
            *(_BYTE *)(((v112 + 288) >> 3) + 0x7FFF8000) = 1;
            *(_BYTE *)(((v112 + 304) >> 3) + 0x7FFF8000) = 1;
            *(_BYTE *)(((v112 + 320) >> 3) + 0x7FFF8000) = 1;
            std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v112 + 320));
            std::unordered_set<data::GCGEffectCampType>::unordered_set(
              (std::unordered_set<data::GCGEffectCampType> *const)(v112 + 2368),
              v111,
              0LL,
              (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v112 + 288),
              (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v112 + 304),
              (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v112 + 320));
            std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v112 + 320));
            *(_BYTE *)(((v112 + 320) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v112 + 304) >> 3) + 0x7FFF8000) = -8;
            *(_BYTE *)(((v112 + 288) >> 3) + 0x7FFF8000) = -8;
            *(_WORD *)(((v112 + 544) >> 3) + 0x7FFF8000) = -1800;
            if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                    (std::unordered_set<data::GCGEffectCampType> *)(v112 + 2368),
                    &config_effect->target_camp) )
            {
              *(_DWORD *)(((v112 + 1824) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v112 + 1824) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v112 + 1855) >> 3) + 0x7FFF8000) != 0
                && (char)((v112 + 63) & 7) >= *(_BYTE *)(((v112 + 1855) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v112 + 1824, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v112 + 1824),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectTransferEnergyValidatorFunc",
                375);
              v98 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v112 + 1824),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v99 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                      v98,
                      (const char (*)[31])byte_1A5047A0);
              v100 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                       v99,
                       (const char (*)[26])"config_effect.target_camp");
              v101 = " value:";
              v102 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v100, (const char (*)[8])" value:");
              *(_BYTE *)(((v112 + 432) >> 3) + 0x7FFF8000) = 4;
              if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                             + 0x7FFF8000) )
              {
                __asan_report_load4(&config_effect->target_camp);
              }
              target_camp = config_effect->target_camp;
              v104 = *(_BYTE *)(((v112 + 432) >> 3) + 0x7FFF8000);
              if ( v104 != 0 && v104 <= 3 )
              {
                target_camp = v112 + 432;
                LOBYTE(v101) = v104 != 0;
                __asan_report_store4(v112 + 432, v101);
              }
              *(_DWORD *)(v112 + 432) = target_camp;
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v102,
                (const unsigned int *)(v112 + 432));
              *(_BYTE *)(((v112 + 432) >> 3) + 0x7FFF8000) = -8;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v112 + 1824));
              *(_DWORD *)(((v112 + 1824) >> 3) + 0x7FFF8000) = -117901064;
              v113 = -1;
              v105 = 0;
            }
            else
            {
              v105 = 1;
            }
            std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v112 + 2368));
            if ( v105 == 1 )
              v113 = 0;
          }
        }
      }
    }
  }
  if ( v115 == (char *)v112 )
  {
    *(_QWORD *)((v112 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v112 >> 3) + 0x7FFF8120) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 296) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v112 >> 3) + 0x7FFF812C) = 0LL;
  }
  else
  {
    *(_QWORD *)v112 = 1172321806LL;
    __asan_stack_free_6(v112, 2464LL, v115);
  }
  return v113;
};

// Line 383: range 000000000F1DAD8F-000000000F1DB783
int32_t __cdecl ConfigGCGExecEffectGenDiceValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectGenDice,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:383 64 8 13 __for_end:383 96 16 26 cast_config_effect_ptr:383 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectGenDiceValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectGenDice,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectGenDice>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectGenDice> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectGenDiceValidator",
        383);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        v12,
        (const char (*)[27])"ConfigGCGExecEffectGenDice");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectGenDiceValidator",
            383);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectGenDiceValidator",
              383);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectGenDiceValidator",
          383);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectGenDice,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectGenDice,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectGenDiceValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectGenDice>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectGenDice> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectGenDiceValidator",
    383);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])"ConfigGCGExecEffectGenDice");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 384: range 000000000F1DB784-000000000F1DE02A
int32_t __cdecl ConfigGCGExecEffectGenDiceValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectGenDice *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // rsi
  _QWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  int v12; // r13d
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v16; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v20; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int v24; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  char v26; // dl
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  char v31; // dl
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  int v39; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  char v41; // dl
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int v44; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  char v46; // dl
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  int v49; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  char v51; // dl
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // r13
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v54; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  __int64 type; // rsi
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rax
  unsigned __int64 v59; // rax
  __int64 v60; // rsi
  __int64 v61; // rsi
  __int64 v62; // rsi
  __int64 v63; // rsi
  __int64 v64; // rsi
  unsigned __int64 v65; // rax
  data::GCGEffectDiceType *p_effect_dice_type; // rsi
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  const char *v70; // rsi
  common::milog::MiLogStream *v71; // rcx
  data::GCGEffectDiceType effect_dice_type; // edi
  char v73; // al
  int v74; // r13d
  unsigned __int64 v75; // rax
  unsigned __int64 v76; // rax
  __int64 v77; // rsi
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  const char *v81; // rsi
  common::milog::MiLogStream *v82; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v84; // al
  int v85; // r13d
  std::initializer_list<data::GCGEffectDiceType> __l; // [rsp+0h] [rbp-710h]
  std::initializer_list<data::GCGEffectCampType> v88; // [rsp+10h] [rbp-700h]
  unsigned __int64 v89; // [rsp+28h] [rbp-6E8h]
  int32_t v90; // [rsp+34h] [rbp-6DCh]
  char v93[1712]; // [rsp+60h] [rbp-6B0h] BYREF

  v89 = (unsigned __int64)v93;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1664LL);
    if ( v3 )
      v89 = v3;
  }
  *(_QWORD *)v89 = 1102416563LL;
  *(_QWORD *)(v89 + 8) = "38 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9"
                         " <unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 4 9 <unknown> 192 4 9 <unk"
                         "nown> 208 4 9 <unknown> 224 4 9 <unknown> 240 8 8 iter:386 272 8 9 <unknown> 304 12 9 <unknown>"
                         " 336 16 22 declared_value_ptr:386 368 16 22 declared_value_ptr:386 400 16 22 declared_value_ptr"
                         ":386 432 16 22 declared_value_ptr:386 464 16 22 declared_value_ptr:386 496 16 22 declared_value"
                         "_ptr:386 528 32 9 <unknown> 592 32 9 <unknown> 656 32 9 <unknown> 720 32 9 <unknown> 784 32 9 <"
                         "unknown> 848 32 9 <unknown> 912 32 9 <unknown> 976 32 9 <unknown> 1040 32 9 <unknown> 1104 32 9"
                         " <unknown> 1168 32 9 <unknown> 1232 32 9 <unknown> 1296 44 9 <unknown> 1376 56 28 valid_declare"
                         "d_value_set:386 1472 56 23 valid_enum_type_set:388 1568 56 23 valid_enum_type_set:400";
  *(_QWORD *)(v89 + 16) = ConfigGCGExecEffectGenDiceValidatorFunc;
  v4 = (_DWORD *)(v89 >> 3);
  v5 = v4;
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234556927;
  v4[536862726] = -234556924;
  v4[536862727] = 61956;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862729] = 0x4000000;
  v4[536862730] = 62194;
  v4[536862731] = 62194;
  v4[536862732] = 62194;
  v4[536862733] = 62194;
  v4[536862734] = 62194;
  v4[536862735] = 62194;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862739] = -219021312;
  v4[536862740] = 62194;
  v4[536862741] = -219021312;
  v4[536862742] = 62194;
  v4[536862743] = -219021312;
  v4[536862744] = 62194;
  v4[536862745] = -219021312;
  v4[536862746] = 62194;
  v4[536862747] = -219021312;
  v4[536862748] = 62194;
  v4[536862749] = -219021312;
  v4[536862750] = 62194;
  v4[536862751] = -219021312;
  v4[536862752] = 62194;
  v4[536862753] = -219021312;
  v4[536862754] = 62194;
  v4[536862755] = -219021312;
  v4[536862756] = 62194;
  v4[536862757] = -219021312;
  v4[536862758] = 62194;
  v4[536862759] = -219021312;
  v4[536862760] = 62194;
  v4[536862761] = 0x4000000;
  v4[536862762] = -218959118;
  v4[536862764] = -234881024;
  v4[536862765] = -218959118;
  v4[536862767] = -234881024;
  v4[536862768] = -218959118;
  v4[536862770] = -218103808;
  v4[536862771] = -202116109;
  if ( *(_BYTE *)(((v89 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v89 + 176, v4);
  *(_DWORD *)(v89 + 176) = 4;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v89 + 64));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v89 + 1376),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v89 + 176),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v89 + 32),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v89 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v89 + 64));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v89 + 64));
  *(_BYTE *)(((v89 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v89 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v89 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v89 + 176) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v89 + 240) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v89 + 240) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v89 + 240, v89 + 176);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v89 + 240) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v89 + 272) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v89 + 272) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v89 + 272, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v89 + 272) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v89 + 240),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v89 + 272));
  *(_BYTE *)(((v89 + 272) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v89 + 528) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v89 + 528) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v89 + 559) >> 3) + 0x7FFF8000) != 0
      && (char)((v89 + 47) & 7) >= *(_BYTE *)(((v89 + 559) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v89 + 528, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v89 + 528),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectGenDiceValidatorFunc",
      386);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v89 + 528),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 528));
    *(_DWORD *)(((v89 + 528) >> 3) + 0x7FFF8000) = -117901064;
    v90 = -1;
    v12 = 0;
  }
  else
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v13->second) )
    {
      *(_DWORD *)(((v89 + 592) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v89 + 592) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v89 + 623) >> 3) + 0x7FFF8000) != 0
        && (char)((v89 + 111) & 7) >= *(_BYTE *)(((v89 + 623) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v89 + 592, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v89 + 592),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectGenDiceValidatorFunc",
        386);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v89 + 592),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v14, (const char (*)[32])byte_1A504620);
      v11 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v15, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 592));
      *(_DWORD *)(((v89 + 592) >> 3) + 0x7FFF8000) = -117901064;
      v90 = -1;
      v12 = 0;
    }
    else
    {
      v16 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
      v17 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v89 + 1376),
              &v17->type) )
      {
        *(_DWORD *)(((v89 + 656) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v89 + 656) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v89 + 687) >> 3) + 0x7FFF8000) != 0
          && (char)((v89 - 81) & 7) >= *(_BYTE *)(((v89 + 687) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v89 + 656, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v89 + 656),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectGenDiceValidatorFunc",
          386);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v89 + 656),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v19 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v18, (const char (*)[38])byte_1A504660);
        v11 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v19, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 656));
        *(_DWORD *)(((v89 + 656) >> 3) + 0x7FFF8000) = -117901064;
        v90 = -1;
        v12 = 0;
      }
      else
      {
        v20 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
        v21 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20->second);
        if ( *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v21->type);
        }
        switch ( v21->type )
        {
          case Damage:
            *(_WORD *)(((v89 + 336) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
            if ( *(_WORD *)(((v89 + 336) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v89 + 336));
            v11 = (const char *)(v89 + 336);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v89 + 336)) )
            {
              *(_DWORD *)(((v89 + 720) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v89 + 720) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v89 + 751) >> 3) + 0x7FFF8000) != 0
                && (char)((v89 - 17) & 7) >= *(_BYTE *)(((v89 + 751) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v89 + 720, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v89 + 720),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectGenDiceValidatorFunc",
                386);
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v89 + 720),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v22,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v23,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 720));
              *(_DWORD *)(((v89 + 720) >> 3) + 0x7FFF8000) = -117901064;
              v90 = -1;
              v24 = 0;
            }
            else
            {
              v25 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v89 + 336));
              v26 = *(_BYTE *)(((unsigned __int64)&v25->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v26 != 0;
              if ( v26 != 0 && v26 <= 3 )
                __asan_report_load4(&v25->value);
              v24 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v89 + 336));
            *(_WORD *)(((v89 + 336) >> 3) + 0x7FFF8000) = -1800;
            if ( v24 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Element:
            *(_WORD *)(((v89 + 368) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
            if ( *(_WORD *)(((v89 + 368) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v89 + 368));
            v11 = (const char *)(v89 + 368);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v89 + 368)) )
            {
              *(_DWORD *)(((v89 + 784) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v89 + 784) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v89 + 815) >> 3) + 0x7FFF8000) != 0
                && (char)((v89 + 47) & 7) >= *(_BYTE *)(((v89 + 815) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v89 + 784, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v89 + 784),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectGenDiceValidatorFunc",
                386);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v89 + 784),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v27,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v28,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 784));
              *(_DWORD *)(((v89 + 784) >> 3) + 0x7FFF8000) = -117901064;
              v90 = -1;
              v29 = 0;
            }
            else
            {
              v30 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v89 + 368));
              v31 = *(_BYTE *)(((unsigned __int64)&v30->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v31 != 0;
              if ( v31 != 0 && v31 <= 3 )
                __asan_report_load4(&v30->value);
              v29 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v89 + 368));
            *(_WORD *)(((v89 + 368) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              goto LABEL_98;
            v12 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v89 + 400) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
            if ( *(_WORD *)(((v89 + 400) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v89 + 400));
            v11 = (const char *)(v89 + 400);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v89 + 400)) )
            {
              *(_DWORD *)(((v89 + 848) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v89 + 848) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v89 + 879) >> 3) + 0x7FFF8000) != 0
                && (char)((v89 + 111) & 7) >= *(_BYTE *)(((v89 + 879) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v89 + 848, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v89 + 848),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectGenDiceValidatorFunc",
                386);
              v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v89 + 848),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v32,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v33,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 848));
              *(_DWORD *)(((v89 + 848) >> 3) + 0x7FFF8000) = -117901064;
              v90 = -1;
              v34 = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v89 + 400));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              v34 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v89 + 400));
            *(_WORD *)(((v89 + 400) >> 3) + 0x7FFF8000) = -1800;
            if ( v34 )
              goto LABEL_98;
            v12 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v89 + 464) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
            if ( *(_WORD *)(((v89 + 464) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v89 + 464));
            v11 = (const char *)(v89 + 464);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v89 + 464)) )
            {
              *(_DWORD *)(((v89 + 976) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v89 + 976) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v89 + 1007) >> 3) + 0x7FFF8000) != 0
                && (char)((v89 - 17) & 7) >= *(_BYTE *)(((v89 + 1007) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v89 + 976, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v89 + 976),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectGenDiceValidatorFunc",
                386);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v89 + 976),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v42,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v43,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 976));
              *(_DWORD *)(((v89 + 976) >> 3) + 0x7FFF8000) = -117901064;
              v90 = -1;
              v44 = 0;
            }
            else
            {
              v45 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v89 + 464));
              v46 = *(_BYTE *)(((unsigned __int64)&v45->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v46 != 0;
              if ( v46 != 0 && v46 <= 3 )
                __asan_report_load4(&v45->value);
              v44 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v89 + 464));
            *(_WORD *)(((v89 + 464) >> 3) + 0x7FFF8000) = -1800;
            if ( v44 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Heal:
            *(_WORD *)(((v89 + 432) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
            if ( *(_WORD *)(((v89 + 432) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v89 + 432));
            v11 = (const char *)(v89 + 432);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v89 + 432)) )
            {
              *(_DWORD *)(((v89 + 912) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v89 + 912) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v89 + 943) >> 3) + 0x7FFF8000) != 0
                && (char)((v89 - 81) & 7) >= *(_BYTE *)(((v89 + 943) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v89 + 912, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v89 + 912),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectGenDiceValidatorFunc",
                386);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v89 + 912),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 912));
              *(_DWORD *)(((v89 + 912) >> 3) + 0x7FFF8000) = -117901064;
              v90 = -1;
              v39 = 0;
            }
            else
            {
              v40 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v89 + 432));
              v41 = *(_BYTE *)(((unsigned __int64)&v40->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v41 != 0;
              if ( v41 != 0 && v41 <= 3 )
                __asan_report_load4(&v40->value);
              v39 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v89 + 432));
            *(_WORD *)(((v89 + 432) >> 3) + 0x7FFF8000) = -1800;
            if ( v39 )
              goto LABEL_98;
            v12 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v89 + 496) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
            if ( *(_WORD *)(((v89 + 496) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v89 + 496));
            v11 = (const char *)(v89 + 496);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v89 + 496)) )
            {
              *(_DWORD *)(((v89 + 1040) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v89 + 1040) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v89 + 1071) >> 3) + 0x7FFF8000) != 0
                && (char)((v89 + 47) & 7) >= *(_BYTE *)(((v89 + 1071) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v89 + 1040, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v89 + 1040),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectGenDiceValidatorFunc",
                386);
              v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v89 + 1040),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v47,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v48,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 1040));
              *(_DWORD *)(((v89 + 1040) >> 3) + 0x7FFF8000) = -117901064;
              v90 = -1;
              v49 = 0;
            }
            else
            {
              v50 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v89 + 496));
              v51 = *(_BYTE *)(((unsigned __int64)&v50->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v51 != 0;
              if ( v51 != 0 && v51 <= 3 )
                __asan_report_load4(&v50->value);
              v49 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v89 + 496));
            *(_WORD *)(((v89 + 496) >> 3) + 0x7FFF8000) = -1800;
            if ( v49 )
LABEL_98:
              v12 = 1;
            else
              v12 = 0;
            break;
          default:
            *(_DWORD *)(((v89 + 1104) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v89 + 1104) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v89 + 1135) >> 3) + 0x7FFF8000) != 0
              && (char)((v89 + 111) & 7) >= *(_BYTE *)(((v89 + 1135) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v89 + 1104, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v89 + 1104),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectGenDiceValidatorFunc",
              386);
            v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v89 + 1104),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v53 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v52,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v89 + 192) >> 3) + 0x7FFF8000) = 4;
            v54 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v89 + 240));
            v55 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v54->second);
            if ( *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v55->type);
            }
            type = (unsigned int)v55->type;
            if ( *(_BYTE *)(((v89 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 192) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v89 + 192, type);
            *(_DWORD *)(v89 + 192) = type;
            v11 = (const char *)(v89 + 192);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v53,
              (const unsigned int *)(v89 + 192));
            *(_BYTE *)(((v89 + 192) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 1104));
            *(_DWORD *)(((v89 + 1104) >> 3) + 0x7FFF8000) = -117901064;
            v90 = -1;
            v12 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v89 + 1376));
  v57 = ((v89 + 1376) >> 3) + 2147450880;
  *(_DWORD *)v57 = -117901064;
  *(_WORD *)(v57 + 4) = -1800;
  *(_BYTE *)(v57 + 6) = -8;
  *(_BYTE *)(((v89 + 240) >> 3) + 0x7FFF8000) = -8;
  if ( v12 == 1 )
  {
    v58 = ((v89 + 1472) >> 3) + 2147450880;
    *(_DWORD *)v58 = 0;
    *(_WORD *)(v58 + 4) = 0;
    *(_BYTE *)(v58 + 6) = 0;
    v59 = ((v89 + 1296) >> 3) + 2147450880;
    *(_DWORD *)v59 = 0;
    *(_WORD *)(v59 + 4) = 1024;
    if ( *(_BYTE *)(((v89 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v89 + 1296, v11);
    *(_DWORD *)(v89 + 1296) = 0;
    v60 = (((_BYTE)v89 + 20) & 7u) + 3;
    if ( *(_BYTE *)(((v89 + 1300) >> 3) + 0x7FFF8000) != 0
      && (char)(((v89 + 20) & 7) + 3) >= *(_BYTE *)(((v89 + 1300) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v89 + 1300, v60);
    }
    *(_DWORD *)(v89 + 1300) = 1;
    if ( *(_BYTE *)(((v89 + 1304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 1304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v89 + 1304, v60);
    *(_DWORD *)(v89 + 1304) = 2;
    v61 = (((_BYTE)v89 + 28) & 7u) + 3;
    if ( *(_BYTE *)(((v89 + 1308) >> 3) + 0x7FFF8000) != 0
      && (char)(((v89 + 28) & 7) + 3) >= *(_BYTE *)(((v89 + 1308) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v89 + 1308, v61);
    }
    *(_DWORD *)(v89 + 1308) = 3;
    if ( *(_BYTE *)(((v89 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v89 + 1312, v61);
    *(_DWORD *)(v89 + 1312) = 4;
    v62 = (((_BYTE)v89 + 36) & 7u) + 3;
    if ( *(_BYTE *)(((v89 + 1316) >> 3) + 0x7FFF8000) != 0
      && (char)(((v89 + 36) & 7) + 3) >= *(_BYTE *)(((v89 + 1316) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v89 + 1316, v62);
    }
    *(_DWORD *)(v89 + 1316) = 5;
    if ( *(_BYTE *)(((v89 + 1320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 1320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v89 + 1320, v62);
    *(_DWORD *)(v89 + 1320) = 6;
    v63 = (((_BYTE)v89 + 44) & 7u) + 3;
    if ( *(_BYTE *)(((v89 + 1324) >> 3) + 0x7FFF8000) != 0
      && (char)(((v89 + 44) & 7) + 3) >= *(_BYTE *)(((v89 + 1324) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v89 + 1324, v63);
    }
    *(_DWORD *)(v89 + 1324) = 7;
    if ( *(_BYTE *)(((v89 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v89 + 1328, v63);
    *(_DWORD *)(v89 + 1328) = 8;
    v64 = (((_BYTE)v89 + 52) & 7u) + 3;
    if ( *(_BYTE *)(((v89 + 1332) >> 3) + 0x7FFF8000) != 0
      && (char)(((v89 + 52) & 7) + 3) >= *(_BYTE *)(((v89 + 1332) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v89 + 1332, v64);
    }
    *(_DWORD *)(v89 + 1332) = 10;
    if ( *(_BYTE *)(((v89 + 1336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 1336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v89 + 1336, v64);
    *(_DWORD *)(v89 + 1336) = 12;
    __l._M_array = (std::initializer_list<data::GCGEffectDiceType>::iterator)(v89 + 1296);
    __l._M_len = 11LL;
    *(_BYTE *)(((v89 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v89 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v89 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectDiceType>::allocator((std::allocator<data::GCGEffectDiceType> *const)(v89 + 112));
    std::unordered_set<data::GCGEffectDiceType>::unordered_set(
      (std::unordered_set<data::GCGEffectDiceType> *const)(v89 + 1472),
      __l,
      0LL,
      (const std::unordered_set<data::GCGEffectDiceType>::hasher *)(v89 + 80),
      (const std::unordered_set<data::GCGEffectDiceType>::key_equal *)(v89 + 96),
      (const std::unordered_set<data::GCGEffectDiceType>::allocator_type *)(v89 + 112));
    std::allocator<data::GCGEffectDiceType>::~allocator((std::allocator<data::GCGEffectDiceType> *const)(v89 + 112));
    *(_BYTE *)(((v89 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v89 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v89 + 80) >> 3) + 0x7FFF8000) = -8;
    v65 = ((v89 + 1296) >> 3) + 2147450880;
    *(_DWORD *)v65 = -117901064;
    *(_WORD *)(v65 + 4) = -1800;
    p_effect_dice_type = &config_effect->effect_dice_type;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectDiceType>,data::GCGEffectDiceType>(
            (std::unordered_set<data::GCGEffectDiceType> *)(v89 + 1472),
            &config_effect->effect_dice_type) )
    {
      *(_DWORD *)(((v89 + 1168) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v89 + 1168) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v89 + 1199) >> 3) + 0x7FFF8000) != 0
        && (char)((v89 - 81) & 7) >= *(_BYTE *)(((v89 + 1199) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v89 + 1168, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v89 + 1168),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectGenDiceValidatorFunc",
        388);
      v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v89 + 1168),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v68 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v67, (const char (*)[31])byte_1A5047A0);
      v69 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              v68,
              (const char (*)[31])"config_effect.effect_dice_type");
      v70 = " value:";
      v71 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v69, (const char (*)[8])" value:");
      *(_BYTE *)(((v89 + 208) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->effect_dice_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->effect_dice_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->effect_dice_type);
      }
      effect_dice_type = config_effect->effect_dice_type;
      v73 = *(_BYTE *)(((v89 + 208) >> 3) + 0x7FFF8000);
      if ( v73 != 0 && v73 <= 3 )
      {
        effect_dice_type = v89 + 208;
        LOBYTE(v70) = v73 != 0;
        __asan_report_store4(v89 + 208, v70);
      }
      *(_DWORD *)(v89 + 208) = effect_dice_type;
      p_effect_dice_type = (data::GCGEffectDiceType *)(v89 + 208);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v71, (const unsigned int *)(v89 + 208));
      *(_BYTE *)(((v89 + 208) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 1168));
      *(_DWORD *)(((v89 + 1168) >> 3) + 0x7FFF8000) = -117901064;
      v90 = -1;
      v74 = 0;
    }
    else
    {
      v74 = 1;
    }
    std::unordered_set<data::GCGEffectDiceType>::~unordered_set((std::unordered_set<data::GCGEffectDiceType> *const)(v89 + 1472));
    v75 = ((v89 + 1472) >> 3) + 2147450880;
    *(_DWORD *)v75 = -117901064;
    *(_WORD *)(v75 + 4) = -1800;
    *(_BYTE *)(v75 + 6) = -8;
    if ( v74 == 1 )
    {
      v76 = ((v89 + 1568) >> 3) + 2147450880;
      *(_DWORD *)v76 = 0;
      *(_WORD *)(v76 + 4) = 0;
      *(_BYTE *)(v76 + 6) = 0;
      *(_WORD *)(((v89 + 304) >> 3) + 0x7FFF8000) = 1024;
      if ( *(_BYTE *)(((v89 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v89 + 304, p_effect_dice_type);
      *(_DWORD *)(v89 + 304) = 0;
      v77 = (((_BYTE)v89 + 52) & 7u) + 3;
      if ( *(_BYTE *)(((v89 + 308) >> 3) + 0x7FFF8000) != 0
        && (char)(((v89 + 52) & 7) + 3) >= *(_BYTE *)(((v89 + 308) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v89 + 308, v77);
      }
      *(_DWORD *)(v89 + 308) = 1;
      if ( *(_BYTE *)(((v89 + 312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v89 + 312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v89 + 312, v77);
      *(_DWORD *)(v89 + 312) = 2;
      v88._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v89 + 304);
      v88._M_len = 3LL;
      *(_BYTE *)(((v89 + 128) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v89 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v89 + 160) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v89 + 160));
      std::unordered_set<data::GCGEffectCampType>::unordered_set(
        (std::unordered_set<data::GCGEffectCampType> *const)(v89 + 1568),
        v88,
        0LL,
        (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v89 + 128),
        (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v89 + 144),
        (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v89 + 160));
      std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v89 + 160));
      *(_BYTE *)(((v89 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v89 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v89 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v89 + 304) >> 3) + 0x7FFF8000) = -1800;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
              (std::unordered_set<data::GCGEffectCampType> *)(v89 + 1568),
              &config_effect->target_camp) )
      {
        *(_DWORD *)(((v89 + 1232) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v89 + 1232) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v89 + 1263) >> 3) + 0x7FFF8000) != 0
          && (char)((v89 - 17) & 7) >= *(_BYTE *)(((v89 + 1263) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v89 + 1232, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v89 + 1232),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectGenDiceValidatorFunc",
          400);
        v78 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v89 + 1232),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v79 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v78, (const char (*)[31])byte_1A5047A0);
        v80 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                v79,
                (const char (*)[26])"config_effect.target_camp");
        v81 = " value:";
        v82 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v80, (const char (*)[8])" value:");
        *(_BYTE *)(((v89 + 224) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                       + 0x7FFF8000) )
        {
          __asan_report_load4(&config_effect->target_camp);
        }
        target_camp = config_effect->target_camp;
        v84 = *(_BYTE *)(((v89 + 224) >> 3) + 0x7FFF8000);
        if ( v84 != 0 && v84 <= 3 )
        {
          target_camp = v89 + 224;
          LOBYTE(v81) = v84 != 0;
          __asan_report_store4(v89 + 224, v81);
        }
        *(_DWORD *)(v89 + 224) = target_camp;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v82, (const unsigned int *)(v89 + 224));
        *(_BYTE *)(((v89 + 224) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v89 + 1232));
        *(_DWORD *)(((v89 + 1232) >> 3) + 0x7FFF8000) = -117901064;
        v90 = -1;
        v85 = 0;
      }
      else
      {
        v85 = 1;
      }
      std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v89 + 1568));
      if ( v85 == 1 )
        v90 = 0;
    }
  }
  if ( v93 == (char *)v89 )
  {
    v5[268431360] = 0LL;
    *(_QWORD *)((char *)v5 + 2147451068) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 268431361) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 196) & 0xFFFFFFF8) >> 3));
    v5[268431385] = 0LL;
  }
  else
  {
    *(_QWORD *)v89 = 1172321806LL;
    __asan_stack_free_5(v89, 1664LL, v93);
  }
  return v90;
};

// Line 408: range 000000000F1DE02B-000000000F1DEA1F
int32_t __cdecl ConfigGCGExecEffectRandomGenDiceValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectRandomGenDice,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:408 64 8 13 __for_end:408 96 16 26 cast_config_effect_ptr:408 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectRandomGenDiceValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectRandomGenDice,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectRandomGenDice>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectRandomGenDice> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRandomGenDiceValidator",
        408);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        v12,
        (const char (*)[33])"ConfigGCGExecEffectRandomGenDice");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectRandomGenDiceValidator",
            408);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectRandomGenDiceValidator",
              408);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectRandomGenDiceValidator",
          408);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectRandomGenDice,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectRandomGenDice,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectRandomGenDiceValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectRandomGenDice>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectRandomGenDice> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectRandomGenDiceValidator",
    408);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
    v9,
    (const char (*)[33])"ConfigGCGExecEffectRandomGenDice");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 409: range 000000000F1DEA20-000000000F1E0F40
int32_t __cdecl ConfigGCGExecEffectRandomGenDiceValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectRandomGenDice *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // rsi
  _QWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  int v12; // r13d
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v16; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v20; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int v24; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  char v26; // dl
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  char v31; // dl
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  int v39; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  char v41; // dl
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int v44; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  char v46; // dl
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  int v49; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  char v51; // dl
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // r13
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v54; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  __int64 type; // rsi
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rax
  data::GCGEffectGenDiceType *p_gen_dice_type; // rsi
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  const char *v63; // rsi
  common::milog::MiLogStream *v64; // rcx
  data::GCGEffectGenDiceType gen_dice_type; // edi
  char v66; // al
  int v67; // r13d
  unsigned __int64 v68; // rax
  unsigned __int64 v69; // rax
  __int64 v70; // rsi
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  const char *v74; // rsi
  common::milog::MiLogStream *v75; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v77; // al
  int v78; // r13d
  std::initializer_list<data::GCGEffectGenDiceType> __l; // [rsp+0h] [rbp-6D0h]
  std::initializer_list<data::GCGEffectCampType> v81; // [rsp+10h] [rbp-6C0h]
  unsigned __int64 v82; // [rsp+28h] [rbp-6A8h]
  int32_t v83; // [rsp+34h] [rbp-69Ch]
  char v86[1648]; // [rsp+60h] [rbp-670h] BYREF

  v82 = (unsigned __int64)v86;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1600LL);
    if ( v3 )
      v82 = v3;
  }
  *(_QWORD *)v82 = 1102416563LL;
  *(_QWORD *)(v82 + 8) = "38 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9"
                         " <unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 4 9 <unknown> 192 4 9 <unk"
                         "nown> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 8 8 iter:411 288 8 9 <unknown> "
                         "320 12 9 <unknown> 352 16 22 declared_value_ptr:411 384 16 22 declared_value_ptr:411 416 16 22 "
                         "declared_value_ptr:411 448 16 22 declared_value_ptr:411 480 16 22 declared_value_ptr:411 512 16"
                         " 22 declared_value_ptr:411 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <u"
                         "nknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <"
                         "unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 56 28 valid_declared_"
                         "value_set:411 1408 56 23 valid_enum_type_set:413 1504 56 23 valid_enum_type_set:415";
  *(_QWORD *)(v82 + 16) = ConfigGCGExecEffectRandomGenDiceValidatorFunc;
  v4 = (_DWORD *)(v82 >> 3);
  v5 = v4;
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234556927;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -219020288;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862736] = -219021312;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -234881024;
  v4[536862763] = -218959118;
  v4[536862765] = -234881024;
  v4[536862766] = -218959118;
  v4[536862768] = -218103808;
  v4[536862769] = -202116109;
  if ( *(_BYTE *)(((v82 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v82 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v82 + 176, v4);
  *(_DWORD *)(v82 + 176) = 4;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v82 + 64));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v82 + 1312),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v82 + 176),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v82 + 32),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v82 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v82 + 64));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v82 + 64));
  *(_BYTE *)(((v82 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v82 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v82 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v82 + 176) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v82 + 256) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v82 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v82 + 256, v82 + 176);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v82 + 256) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v82 + 288) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v82 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v82 + 288, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v82 + 288) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v82 + 256),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v82 + 288));
  *(_BYTE *)(((v82 + 288) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v82 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v82 + 544) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v82 + 575) >> 3) + 0x7FFF8000) != 0
      && (char)((v82 + 63) & 7) >= *(_BYTE *)(((v82 + 575) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v82 + 544, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v82 + 544),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
      411);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v82 + 544),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 544));
    *(_DWORD *)(((v82 + 544) >> 3) + 0x7FFF8000) = -117901064;
    v83 = -1;
    v12 = 0;
  }
  else
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v13->second) )
    {
      *(_DWORD *)(((v82 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v82 + 608) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v82 + 639) >> 3) + 0x7FFF8000) != 0
        && (char)((v82 + 127) & 7) >= *(_BYTE *)(((v82 + 639) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v82 + 608, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v82 + 608),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
        411);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v82 + 608),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v14, (const char (*)[32])byte_1A504620);
      v11 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v15, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 608));
      *(_DWORD *)(((v82 + 608) >> 3) + 0x7FFF8000) = -117901064;
      v83 = -1;
      v12 = 0;
    }
    else
    {
      v16 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
      v17 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v82 + 1312),
              &v17->type) )
      {
        *(_DWORD *)(((v82 + 672) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v82 + 672) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v82 + 703) >> 3) + 0x7FFF8000) != 0
          && (char)((v82 - 65) & 7) >= *(_BYTE *)(((v82 + 703) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v82 + 672, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v82 + 672),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
          411);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v82 + 672),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v19 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v18, (const char (*)[38])byte_1A504660);
        v11 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v19, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 672));
        *(_DWORD *)(((v82 + 672) >> 3) + 0x7FFF8000) = -117901064;
        v83 = -1;
        v12 = 0;
      }
      else
      {
        v20 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
        v21 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20->second);
        if ( *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v21->type);
        }
        switch ( v21->type )
        {
          case Damage:
            *(_WORD *)(((v82 + 352) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
            if ( *(_WORD *)(((v82 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v82 + 352));
            v11 = (const char *)(v82 + 352);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v82 + 352)) )
            {
              *(_DWORD *)(((v82 + 736) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v82 + 736) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v82 + 767) >> 3) + 0x7FFF8000) != 0
                && (char)((v82 - 32 + 31) & 7) >= *(_BYTE *)(((v82 + 767) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v82 + 736, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v82 + 736),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
                411);
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v82 + 736),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v22,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v23,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 736));
              *(_DWORD *)(((v82 + 736) >> 3) + 0x7FFF8000) = -117901064;
              v83 = -1;
              v24 = 0;
            }
            else
            {
              v25 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v82 + 352));
              v26 = *(_BYTE *)(((unsigned __int64)&v25->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v26 != 0;
              if ( v26 != 0 && v26 <= 3 )
                __asan_report_load4(&v25->value);
              v24 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v82 + 352));
            *(_WORD *)(((v82 + 352) >> 3) + 0x7FFF8000) = -1800;
            if ( v24 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Element:
            *(_WORD *)(((v82 + 384) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
            if ( *(_WORD *)(((v82 + 384) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v82 + 384));
            v11 = (const char *)(v82 + 384);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v82 + 384)) )
            {
              *(_DWORD *)(((v82 + 800) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v82 + 800) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v82 + 831) >> 3) + 0x7FFF8000) != 0
                && (char)((v82 + 63) & 7) >= *(_BYTE *)(((v82 + 831) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v82 + 800, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v82 + 800),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
                411);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v82 + 800),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v27,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v28,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 800));
              *(_DWORD *)(((v82 + 800) >> 3) + 0x7FFF8000) = -117901064;
              v83 = -1;
              v29 = 0;
            }
            else
            {
              v30 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v82 + 384));
              v31 = *(_BYTE *)(((unsigned __int64)&v30->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v31 != 0;
              if ( v31 != 0 && v31 <= 3 )
                __asan_report_load4(&v30->value);
              v29 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v82 + 384));
            *(_WORD *)(((v82 + 384) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              goto LABEL_98;
            v12 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v82 + 416) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
            if ( *(_WORD *)(((v82 + 416) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v82 + 416));
            v11 = (const char *)(v82 + 416);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v82 + 416)) )
            {
              *(_DWORD *)(((v82 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v82 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v82 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v82 + 127) & 7) >= *(_BYTE *)(((v82 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v82 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v82 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
                411);
              v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v82 + 864),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v32,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v33,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 864));
              *(_DWORD *)(((v82 + 864) >> 3) + 0x7FFF8000) = -117901064;
              v83 = -1;
              v34 = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v82 + 416));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              v34 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v82 + 416));
            *(_WORD *)(((v82 + 416) >> 3) + 0x7FFF8000) = -1800;
            if ( v34 )
              goto LABEL_98;
            v12 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v82 + 480) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
            if ( *(_WORD *)(((v82 + 480) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v82 + 480));
            v11 = (const char *)(v82 + 480);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v82 + 480)) )
            {
              *(_DWORD *)(((v82 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v82 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v82 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v82 - 32 + 31) & 7) >= *(_BYTE *)(((v82 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v82 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v82 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
                411);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v82 + 992),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v42,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v43,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 992));
              *(_DWORD *)(((v82 + 992) >> 3) + 0x7FFF8000) = -117901064;
              v83 = -1;
              v44 = 0;
            }
            else
            {
              v45 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v82 + 480));
              v46 = *(_BYTE *)(((unsigned __int64)&v45->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v46 != 0;
              if ( v46 != 0 && v46 <= 3 )
                __asan_report_load4(&v45->value);
              v44 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v82 + 480));
            *(_WORD *)(((v82 + 480) >> 3) + 0x7FFF8000) = -1800;
            if ( v44 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Heal:
            *(_WORD *)(((v82 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
            if ( *(_WORD *)(((v82 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v82 + 448));
            v11 = (const char *)(v82 + 448);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v82 + 448)) )
            {
              *(_DWORD *)(((v82 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v82 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v82 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v82 - 65) & 7) >= *(_BYTE *)(((v82 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v82 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v82 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
                411);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v82 + 928),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 928));
              *(_DWORD *)(((v82 + 928) >> 3) + 0x7FFF8000) = -117901064;
              v83 = -1;
              v39 = 0;
            }
            else
            {
              v40 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v82 + 448));
              v41 = *(_BYTE *)(((unsigned __int64)&v40->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v41 != 0;
              if ( v41 != 0 && v41 <= 3 )
                __asan_report_load4(&v40->value);
              v39 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v82 + 448));
            *(_WORD *)(((v82 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( v39 )
              goto LABEL_98;
            v12 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v82 + 512) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
            if ( *(_WORD *)(((v82 + 512) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v82 + 512));
            v11 = (const char *)(v82 + 512);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v82 + 512)) )
            {
              *(_DWORD *)(((v82 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v82 + 1056) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v82 + 1087) >> 3) + 0x7FFF8000) != 0
                && (char)((v82 + 63) & 7) >= *(_BYTE *)(((v82 + 1087) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v82 + 1056, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v82 + 1056),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
                411);
              v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v82 + 1056),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v47,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v48,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 1056));
              *(_DWORD *)(((v82 + 1056) >> 3) + 0x7FFF8000) = -117901064;
              v83 = -1;
              v49 = 0;
            }
            else
            {
              v50 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v82 + 512));
              v51 = *(_BYTE *)(((unsigned __int64)&v50->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v51 != 0;
              if ( v51 != 0 && v51 <= 3 )
                __asan_report_load4(&v50->value);
              v49 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v82 + 512));
            *(_WORD *)(((v82 + 512) >> 3) + 0x7FFF8000) = -1800;
            if ( v49 )
LABEL_98:
              v12 = 1;
            else
              v12 = 0;
            break;
          default:
            *(_DWORD *)(((v82 + 1120) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v82 + 1120) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v82 + 1151) >> 3) + 0x7FFF8000) != 0
              && (char)((v82 + 127) & 7) >= *(_BYTE *)(((v82 + 1151) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v82 + 1120, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v82 + 1120),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
              411);
            v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v82 + 1120),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v53 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v52,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v82 + 192) >> 3) + 0x7FFF8000) = 4;
            v54 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v82 + 256));
            v55 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v54->second);
            if ( *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v55->type);
            }
            type = (unsigned int)v55->type;
            if ( *(_BYTE *)(((v82 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v82 + 192) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v82 + 192, type);
            *(_DWORD *)(v82 + 192) = type;
            v11 = (const char *)(v82 + 192);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v53,
              (const unsigned int *)(v82 + 192));
            *(_BYTE *)(((v82 + 192) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 1120));
            *(_DWORD *)(((v82 + 1120) >> 3) + 0x7FFF8000) = -117901064;
            v83 = -1;
            v12 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v82 + 1312));
  v57 = ((v82 + 1312) >> 3) + 2147450880;
  *(_DWORD *)v57 = -117901064;
  *(_WORD *)(v57 + 4) = -1800;
  *(_BYTE *)(v57 + 6) = -8;
  *(_BYTE *)(((v82 + 256) >> 3) + 0x7FFF8000) = -8;
  if ( v12 == 1 )
  {
    v58 = ((v82 + 1408) >> 3) + 2147450880;
    *(_DWORD *)v58 = 0;
    *(_WORD *)(v58 + 4) = 0;
    *(_BYTE *)(v58 + 6) = 0;
    *(_BYTE *)(((v82 + 208) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v82 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v82 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v82 + 208, v11);
    *(_DWORD *)(v82 + 208) = 0;
    __l._M_array = (std::initializer_list<data::GCGEffectGenDiceType>::iterator)(v82 + 208);
    __l._M_len = 1LL;
    *(_BYTE *)(((v82 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v82 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v82 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectGenDiceType>::allocator((std::allocator<data::GCGEffectGenDiceType> *const)(v82 + 112));
    std::unordered_set<data::GCGEffectGenDiceType>::unordered_set(
      (std::unordered_set<data::GCGEffectGenDiceType> *const)(v82 + 1408),
      __l,
      0LL,
      (const std::unordered_set<data::GCGEffectGenDiceType>::hasher *)(v82 + 80),
      (const std::unordered_set<data::GCGEffectGenDiceType>::key_equal *)(v82 + 96),
      (const std::unordered_set<data::GCGEffectGenDiceType>::allocator_type *)(v82 + 112));
    std::allocator<data::GCGEffectGenDiceType>::~allocator((std::allocator<data::GCGEffectGenDiceType> *const)(v82 + 112));
    *(_BYTE *)(((v82 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v82 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v82 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v82 + 208) >> 3) + 0x7FFF8000) = -8;
    p_gen_dice_type = &config_effect->gen_dice_type;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectGenDiceType>,data::GCGEffectGenDiceType>(
            (std::unordered_set<data::GCGEffectGenDiceType> *)(v82 + 1408),
            &config_effect->gen_dice_type) )
    {
      *(_DWORD *)(((v82 + 1184) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v82 + 1184) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v82 + 1215) >> 3) + 0x7FFF8000) != 0
        && (char)((v82 - 65) & 7) >= *(_BYTE *)(((v82 + 1215) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v82 + 1184, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v82 + 1184),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
        413);
      v60 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v82 + 1184),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v61 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v60, (const char (*)[31])byte_1A5047A0);
      v62 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v61,
              (const char (*)[28])"config_effect.gen_dice_type");
      v63 = " value:";
      v64 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v62, (const char (*)[8])" value:");
      *(_BYTE *)(((v82 + 224) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->gen_dice_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->gen_dice_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->gen_dice_type);
      }
      gen_dice_type = config_effect->gen_dice_type;
      v66 = *(_BYTE *)(((v82 + 224) >> 3) + 0x7FFF8000);
      if ( v66 != 0 && v66 <= 3 )
      {
        gen_dice_type = v82 + 224;
        LOBYTE(v63) = v66 != 0;
        __asan_report_store4(v82 + 224, v63);
      }
      *(_DWORD *)(v82 + 224) = gen_dice_type;
      p_gen_dice_type = (data::GCGEffectGenDiceType *)(v82 + 224);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v64, (const unsigned int *)(v82 + 224));
      *(_BYTE *)(((v82 + 224) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 1184));
      *(_DWORD *)(((v82 + 1184) >> 3) + 0x7FFF8000) = -117901064;
      v83 = -1;
      v67 = 0;
    }
    else
    {
      v67 = 1;
    }
    std::unordered_set<data::GCGEffectGenDiceType>::~unordered_set((std::unordered_set<data::GCGEffectGenDiceType> *const)(v82 + 1408));
    v68 = ((v82 + 1408) >> 3) + 2147450880;
    *(_DWORD *)v68 = -117901064;
    *(_WORD *)(v68 + 4) = -1800;
    *(_BYTE *)(v68 + 6) = -8;
    if ( v67 == 1 )
    {
      v69 = ((v82 + 1504) >> 3) + 2147450880;
      *(_DWORD *)v69 = 0;
      *(_WORD *)(v69 + 4) = 0;
      *(_BYTE *)(v69 + 6) = 0;
      *(_WORD *)(((v82 + 320) >> 3) + 0x7FFF8000) = 1024;
      if ( *(_BYTE *)(((v82 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v82 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v82 + 320, p_gen_dice_type);
      *(_DWORD *)(v82 + 320) = 0;
      v70 = (((_BYTE)v82 + 68) & 7u) + 3;
      if ( *(_BYTE *)(((v82 + 324) >> 3) + 0x7FFF8000) != 0
        && (char)(((v82 + 68) & 7) + 3) >= *(_BYTE *)(((v82 + 324) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v82 + 324, v70);
      }
      *(_DWORD *)(v82 + 324) = 1;
      if ( *(_BYTE *)(((v82 + 328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v82 + 328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v82 + 328, v70);
      *(_DWORD *)(v82 + 328) = 2;
      v81._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v82 + 320);
      v81._M_len = 3LL;
      *(_BYTE *)(((v82 + 128) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v82 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v82 + 160) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v82 + 160));
      std::unordered_set<data::GCGEffectCampType>::unordered_set(
        (std::unordered_set<data::GCGEffectCampType> *const)(v82 + 1504),
        v81,
        0LL,
        (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v82 + 128),
        (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v82 + 144),
        (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v82 + 160));
      std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v82 + 160));
      *(_BYTE *)(((v82 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v82 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v82 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v82 + 320) >> 3) + 0x7FFF8000) = -1800;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
              (std::unordered_set<data::GCGEffectCampType> *)(v82 + 1504),
              &config_effect->target_camp) )
      {
        *(_DWORD *)(((v82 + 1248) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v82 + 1248) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v82 + 1279) >> 3) + 0x7FFF8000) != 0
          && (char)((v82 - 32 + 31) & 7) >= *(_BYTE *)(((v82 + 1279) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v82 + 1248, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v82 + 1248),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectRandomGenDiceValidatorFunc",
          415);
        v71 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v82 + 1248),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v72 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v71, (const char (*)[31])byte_1A5047A0);
        v73 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                v72,
                (const char (*)[26])"config_effect.target_camp");
        v74 = " value:";
        v75 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v73, (const char (*)[8])" value:");
        *(_BYTE *)(((v82 + 240) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                       + 0x7FFF8000) )
        {
          __asan_report_load4(&config_effect->target_camp);
        }
        target_camp = config_effect->target_camp;
        v77 = *(_BYTE *)(((v82 + 240) >> 3) + 0x7FFF8000);
        if ( v77 != 0 && v77 <= 3 )
        {
          target_camp = v82 + 240;
          LOBYTE(v74) = v77 != 0;
          __asan_report_store4(v82 + 240, v74);
        }
        *(_DWORD *)(v82 + 240) = target_camp;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v75, (const unsigned int *)(v82 + 240));
        *(_BYTE *)(((v82 + 240) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v82 + 1248));
        *(_DWORD *)(((v82 + 1248) >> 3) + 0x7FFF8000) = -117901064;
        v83 = -1;
        v78 = 0;
      }
      else
      {
        v78 = 1;
      }
      std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v82 + 1504));
      if ( v78 == 1 )
        v83 = 0;
    }
  }
  if ( v86 == (char *)v82 )
  {
    v5[268431360] = 0LL;
    *(_QWORD *)((char *)v5 + 2147451060) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 268431361) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 188) & 0xFFFFFFF8) >> 3));
    v5[268431384] = 0LL;
  }
  else
  {
    *(_QWORD *)v82 = 1172321806LL;
    __asan_stack_free_5(v82, 1600LL, v86);
  }
  return v83;
};

// Line 423: range 000000000F1E0F41-000000000F1E1935
int32_t __cdecl ConfigGCGExecEffectRerollValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectReroll,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:423 64 8 13 __for_end:423 96 16 26 cast_config_effect_ptr:423 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectRerollValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectReroll,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectReroll>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectReroll> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRerollValidator",
        423);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        v12,
        (const char (*)[26])"ConfigGCGExecEffectReroll");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectRerollValidator",
            423);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectRerollValidator",
              423);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectRerollValidator",
          423);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectReroll,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectReroll,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectRerollValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectReroll>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectReroll> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectRerollValidator",
    423);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v9, (const char (*)[26])"ConfigGCGExecEffectReroll");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 424: range 000000000F1E1936-000000000F1E3A15
int32_t __cdecl ConfigGCGExecEffectRerollValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectReroll *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // dl
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  char v28; // dl
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  char v32; // dl
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  char v40; // dl
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  char v44; // dl
  common::milog::MiLogStream *v45; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v46; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  __int64 type; // rsi
  unsigned __int64 v49; // rax
  unsigned __int64 v50; // rax
  __int64 v51; // rsi
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  const char *v55; // rsi
  common::milog::MiLogStream *v56; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v58; // al
  int v59; // r14d
  std::initializer_list<data::GCGDeclaredValueType> __lg; // [rsp+10h] [rbp-5D0h]
  int __l; // [rsp+10h] [rbp-5D0h]
  int __la; // [rsp+10h] [rbp-5D0h]
  int __lb; // [rsp+10h] [rbp-5D0h]
  int __lc; // [rsp+10h] [rbp-5D0h]
  int __ld; // [rsp+10h] [rbp-5D0h]
  int __le; // [rsp+10h] [rbp-5D0h]
  int __lf; // [rsp+10h] [rbp-5D0h]
  int32_t v69; // [rsp+20h] [rbp-5C0h]
  common::milog::MiLogStream *v70; // [rsp+20h] [rbp-5C0h]
  char v72[1424]; // [rsp+50h] [rbp-590h] BYREF

  v3 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1376LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "31 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 8 8 iter:426 224 8 9 <unkno"
                        "wn> 256 12 9 <unknown> 288 16 22 declared_value_ptr:426 320 16 22 declared_value_ptr:426 352 16 "
                        "22 declared_value_ptr:426 384 16 22 declared_value_ptr:426 416 16 22 declared_value_ptr:426 448 "
                        "16 22 declared_value_ptr:426 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <"
                        "unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <u"
                        "nknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 56 28 valid_declared_value_set:426 1280 56 "
                        "23 valid_enum_type_set:428";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectRerollValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556927;
  v5[536862725] = -234556924;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -219020288;
  v5[536862729] = -219021312;
  v5[536862730] = -219021312;
  v5[536862731] = -219021312;
  v5[536862732] = -219021312;
  v5[536862733] = -219021312;
  v5[536862734] = -219021312;
  v5[536862736] = -218959118;
  v5[536862738] = -218959118;
  v5[536862740] = -218959118;
  v5[536862742] = -218959118;
  v5[536862744] = -218959118;
  v5[536862746] = -218959118;
  v5[536862748] = -218959118;
  v5[536862750] = -218959118;
  v5[536862752] = -218959118;
  v5[536862754] = -218959118;
  v5[536862756] = -218959118;
  v5[536862758] = -234881024;
  v5[536862759] = -218959118;
  v5[536862761] = -218103808;
  v5[536862762] = -202116109;
  if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 144, config_skill);
  *(_DWORD *)(v3 + 144) = 4;
  __lg._M_array = (std::initializer_list<data::GCGDeclaredValueType>::iterator)(v3 + 144);
  __lg._M_len = 1LL;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1184),
    __lg,
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 192, v3 + 144);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 192) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 224, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 224) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 192),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 224));
  *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 480, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 480),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectRerollValidatorFunc",
      426);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 480),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
    *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -117901064;
    v69 = -1;
    __l = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRerollValidatorFunc",
        426);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 544),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      v11 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 544));
      *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = -117901064;
      v69 = -1;
      __l = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v3 + 1184),
              &v16->type) )
      {
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectRerollValidatorFunc",
          426);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 608),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        v11 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 608));
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = -117901064;
        v69 = -1;
        __l = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 288));
            v11 = (const char *)(v3 + 288);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v3 + 288)) )
            {
              *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 672) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 672, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 672),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRerollValidatorFunc",
                426);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 672),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 672));
              *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __la = 0;
            }
            else
            {
              v23 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
              v24 = *(_BYTE *)(((unsigned __int64)&v23->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v24 != 0;
              if ( v24 != 0 && v24 <= 3 )
                __asan_report_load4(&v23->value);
              __la = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v3 + 288));
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -1800;
            if ( __la )
              goto LABEL_98;
            __l = 0;
            break;
          case Element:
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 320));
            v11 = (const char *)(v3 + 320);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v3 + 320)) )
            {
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 736, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 736),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRerollValidatorFunc",
                426);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 736),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v25,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v26,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 736));
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lb = 0;
            }
            else
            {
              v27 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 320));
              v28 = *(_BYTE *)(((unsigned __int64)&v27->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v28 != 0;
              if ( v28 != 0 && v28 <= 3 )
                __asan_report_load4(&v27->value);
              __lb = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v3 + 320));
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -1800;
            if ( __lb )
              goto LABEL_98;
            __l = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 352));
            v11 = (const char *)(v3 + 352);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v3 + 352)) )
            {
              *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 800) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 800, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 800),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRerollValidatorFunc",
                426);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 800),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v29,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v30,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 800));
              *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lc = 0;
            }
            else
            {
              v31 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 352));
              v32 = *(_BYTE *)(((unsigned __int64)&v31->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v32 != 0;
              if ( v32 != 0 && v32 <= 3 )
                __asan_report_load4(&v31->value);
              __lc = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v3 + 352));
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -1800;
            if ( __lc )
              goto LABEL_98;
            __l = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 416));
            v11 = (const char *)(v3 + 416);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v3 + 416)) )
            {
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRerollValidatorFunc",
                426);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 928),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 928));
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __le = 0;
            }
            else
            {
              v39 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 416));
              v40 = *(_BYTE *)(((unsigned __int64)&v39->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v40 != 0;
              if ( v40 != 0 && v40 <= 3 )
                __asan_report_load4(&v39->value);
              __le = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v3 + 416));
            *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -1800;
            if ( __le )
              goto LABEL_98;
            __l = 0;
            break;
          case Heal:
            *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 384));
            v11 = (const char *)(v3 + 384);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v3 + 384)) )
            {
              *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRerollValidatorFunc",
                426);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 864),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 864));
              *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __ld = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 384));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              __ld = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v3 + 384));
            *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -1800;
            if ( __ld )
              goto LABEL_98;
            __l = 0;
            break;
          case TokenType:
            *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 448));
            v11 = (const char *)(v3 + 448);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v3 + 448)) )
            {
              *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectRerollValidatorFunc",
                426);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 992),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v42,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 992));
              *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lf = 0;
            }
            else
            {
              v43 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
              v44 = *(_BYTE *)(((unsigned __int64)&v43->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v44 != 0;
              if ( v44 != 0 && v44 <= 3 )
                __asan_report_load4(&v43->value);
              __lf = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v3 + 448));
            *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( __lf )
LABEL_98:
              __l = 1;
            else
              __l = 0;
            break;
          default:
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1056) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1056, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1056),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectRerollValidatorFunc",
              426);
            v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1056),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v70 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v45,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
            v46 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            v47 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v46->second);
            if ( *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v47->type);
            }
            type = (unsigned int)v47->type;
            if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 160, type);
            *(_DWORD *)(v3 + 160) = type;
            v11 = (const char *)(v3 + 160);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v70,
              (const unsigned int *)(v3 + 160));
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1056));
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -117901064;
            v69 = -1;
            __l = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1184));
  v49 = ((v3 + 1184) >> 3) + 2147450880;
  *(_DWORD *)v49 = -117901064;
  *(_WORD *)(v49 + 4) = -1800;
  *(_BYTE *)(v49 + 6) = -8;
  *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
  if ( __l == 1 )
  {
    v50 = ((v3 + 1280) >> 3) + 2147450880;
    *(_DWORD *)v50 = 0;
    *(_WORD *)(v50 + 4) = 0;
    *(_BYTE *)(v50 + 6) = 0;
    *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 256, v11);
    *(_DWORD *)(v3 + 256) = 0;
    v51 = (((_BYTE)v3 + 4) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 260, v51);
    }
    *(_DWORD *)(v3 + 260) = 1;
    if ( *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 264, v51);
    *(_DWORD *)(v3 + 264) = 2;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 1280),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 256),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 112),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 128));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 1280),
            &config_effect->target_camp) )
    {
      *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1120, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1120),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRerollValidatorFunc",
        428);
      v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 1120),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v53 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v52, (const char (*)[31])byte_1A5047A0);
      v54 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v53,
              (const char (*)[26])"config_effect.target_camp");
      v55 = " value:";
      v56 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v54, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_effect->target_camp);
      }
      target_camp = config_effect->target_camp;
      v58 = *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000);
      if ( v58 != 0 && v58 <= 3 )
      {
        target_camp = v3 + 176;
        LOBYTE(v55) = v58 != 0;
        __asan_report_store4(v3 + 176, v55);
      }
      *(_DWORD *)(v3 + 176) = target_camp;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, (const unsigned int *)(v3 + 176));
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1120));
      *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
      v69 = -1;
      v59 = 0;
    }
    else
    {
      v59 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 1280));
    if ( v59 == 1 )
      v69 = 0;
  }
  if ( v72 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8098) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 160) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A4) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1376LL, v72);
  }
  return v69;
};

// Line 436: range 000000000F1E3A16-000000000F1E440A
int32_t __cdecl ConfigGCGExecEffectChangeOnstageCharaterValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectChangeOnstageCharater,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:436 64 8 13 __for_end:436 96 16 26 cast_config_effect_ptr:436 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectChangeOnstageCharaterValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectChangeOnstageCharater,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectChangeOnstageCharater>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectChangeOnstageCharater> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeOnstageCharaterValidator",
        436);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
        v12,
        (const char (*)[41])"ConfigGCGExecEffectChangeOnstageCharater");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectChangeOnstageCharaterValidator",
            436);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChangeOnstageCharaterValidator",
              436);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChangeOnstageCharaterValidator",
          436);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectChangeOnstageCharater,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectChangeOnstageCharater,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectChangeOnstageCharaterValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectChangeOnstageCharater>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectChangeOnstageCharater> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectChangeOnstageCharaterValidator",
    436);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
    v9,
    (const char (*)[41])"ConfigGCGExecEffectChangeOnstageCharater");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 437: range 000000000F1E440B-000000000F1E5020
int32_t __cdecl ConfigGCGExecEffectChangeOnstageCharaterValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectChangeOnstageCharater *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  unsigned __int64 v8; // rax
  data::GCGEffectSelectNextOnstageType *p_select_type; // rsi
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const char *v13; // rsi
  common::milog::MiLogStream *v14; // rcx
  data::GCGEffectSelectNextOnstageType select_type; // edi
  char v16; // al
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rax
  __int64 v19; // rsi
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  const char *v23; // rsi
  common::milog::MiLogStream *v24; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v26; // al
  int v27; // r14d
  int32_t result; // eax
  std::initializer_list<data::GCGEffectSelectNextOnstageType> __la; // [rsp+10h] [rbp-2A0h]
  int __l; // [rsp+10h] [rbp-2A0h]
  int32_t v31; // [rsp+24h] [rbp-28Ch]
  char v33[624]; // [rsp+40h] [rbp-270h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(576LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 12 9 <unknown> 192 20 9 <unknown> 256 32 9 <un"
                        "known> 320 32 9 <unknown> 384 56 23 valid_enum_type_set:440 480 56 23 valid_enum_type_set:446";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectChangeOnstageCharaterValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = -219020288;
  v5[536862726] = -234618880;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -234881024;
  v5[536862734] = -218959118;
  v5[536862736] = -218103808;
  v5[536862737] = -202116109;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, config_skill);
  *(_DWORD *)(v3 + 192) = 0;
  v6 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v6);
  }
  *(_DWORD *)(v3 + 196) = 1;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v6);
  *(_DWORD *)(v3 + 200) = 2;
  v7 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v7);
  }
  *(_DWORD *)(v3 + 204) = 3;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v7);
  *(_DWORD *)(v3 + 208) = 4;
  __la._M_array = (std::initializer_list<data::GCGEffectSelectNextOnstageType>::iterator)(v3 + 192);
  __la._M_len = 5LL;
  std::allocator<data::GCGEffectSelectNextOnstageType>::allocator((std::allocator<data::GCGEffectSelectNextOnstageType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectSelectNextOnstageType>::unordered_set(
    (std::unordered_set<data::GCGEffectSelectNextOnstageType> *const)(v3 + 384),
    __la,
    0LL,
    (const std::unordered_set<data::GCGEffectSelectNextOnstageType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectSelectNextOnstageType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectSelectNextOnstageType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectSelectNextOnstageType>::~allocator((std::allocator<data::GCGEffectSelectNextOnstageType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  v8 = ((v3 + 192) >> 3) + 2147450880;
  *(_WORD *)v8 = -1800;
  *(_BYTE *)(v8 + 2) = -8;
  p_select_type = &config_effect->select_type;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectSelectNextOnstageType>,data::GCGEffectSelectNextOnstageType>(
          (std::unordered_set<data::GCGEffectSelectNextOnstageType> *)(v3 + 384),
          &config_effect->select_type) )
  {
    *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectChangeOnstageCharaterValidatorFunc",
      440);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 256),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v11 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v10, (const char (*)[31])byte_1A5047A0);
    v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v11,
            (const char (*)[26])"config_effect.select_type");
    v13 = " value:";
    v14 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v12, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->select_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_effect->select_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_effect->select_type);
    }
    select_type = config_effect->select_type;
    v16 = *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000);
    if ( v16 != 0 && v16 <= 3 )
    {
      select_type = v3 + 128;
      LOBYTE(v13) = v16 != 0;
      __asan_report_store4(v3 + 128, v13);
    }
    *(_DWORD *)(v3 + 128) = select_type;
    p_select_type = (data::GCGEffectSelectNextOnstageType *)(v3 + 128);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
    *(_DWORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -117901064;
    v31 = -1;
    __l = 0;
  }
  else
  {
    __l = 1;
  }
  std::unordered_set<data::GCGEffectSelectNextOnstageType>::~unordered_set((std::unordered_set<data::GCGEffectSelectNextOnstageType> *const)(v3 + 384));
  v17 = ((v3 + 384) >> 3) + 2147450880;
  *(_DWORD *)v17 = -117901064;
  *(_WORD *)(v17 + 4) = -1800;
  *(_BYTE *)(v17 + 6) = -8;
  if ( __l == 1 )
  {
    v18 = ((v3 + 480) >> 3) + 2147450880;
    *(_DWORD *)v18 = 0;
    *(_WORD *)(v18 + 4) = 0;
    *(_BYTE *)(v18 + 6) = 0;
    *(_WORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 160, p_select_type);
    *(_DWORD *)(v3 + 160) = 0;
    v19 = (((_BYTE)v3 - 92) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 92) & 7) + 3) >= *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 164, v19);
    }
    *(_DWORD *)(v3 + 164) = 1;
    if ( *(_BYTE *)(((v3 + 168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 168, v19);
    *(_DWORD *)(v3 + 168) = 2;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 480),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 160),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 80),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 112));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 480),
            &config_effect->target_camp) )
    {
      *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeOnstageCharaterValidatorFunc",
        446);
      v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 320),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v21 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v20, (const char (*)[31])byte_1A5047A0);
      v22 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v21,
              (const char (*)[26])"config_effect.target_camp");
      v23 = " value:";
      v24 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v22, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_effect->target_camp);
      }
      target_camp = config_effect->target_camp;
      v26 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
      if ( v26 != 0 && v26 <= 3 )
      {
        target_camp = v3 + 144;
        LOBYTE(v23) = v26 != 0;
        __asan_report_store4(v3 + 144, v23);
      }
      *(_DWORD *)(v3 + 144) = target_camp;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v3 + 144));
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 320));
      *(_DWORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -117901064;
      v31 = -1;
      v27 = 0;
    }
    else
    {
      v27 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 480));
    if ( v27 == 1 )
      v31 = 0;
  }
  result = v31;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 454: range 000000000F1E5021-000000000F1E5A15
int32_t __cdecl ConfigGCGExecEffectDrawValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectDraw,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:454 64 8 13 __for_end:454 96 16 26 cast_config_effect_ptr:454 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectDrawValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectDraw,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectDraw>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectDraw> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDrawValidator",
        454);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
        v12,
        (const char (*)[24])"ConfigGCGExecEffectDraw");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectDrawValidator",
            454);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDrawValidator",
              454);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDrawValidator",
          454);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectDraw,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectDraw,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectDrawValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectDraw>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectDraw> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectDrawValidator",
    454);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v9, (const char (*)[24])"ConfigGCGExecEffectDraw");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 455: range 000000000F1E5A16-000000000F1E7AF5
int32_t __cdecl ConfigGCGExecEffectDrawValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectDraw *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // dl
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  char v28; // dl
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  char v32; // dl
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  char v40; // dl
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  char v44; // dl
  common::milog::MiLogStream *v45; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v46; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  __int64 type; // rsi
  unsigned __int64 v49; // rax
  unsigned __int64 v50; // rax
  __int64 v51; // rsi
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  const char *v55; // rsi
  common::milog::MiLogStream *v56; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v58; // al
  int v59; // r14d
  std::initializer_list<data::GCGDeclaredValueType> __lg; // [rsp+10h] [rbp-5D0h]
  int __l; // [rsp+10h] [rbp-5D0h]
  int __la; // [rsp+10h] [rbp-5D0h]
  int __lb; // [rsp+10h] [rbp-5D0h]
  int __lc; // [rsp+10h] [rbp-5D0h]
  int __ld; // [rsp+10h] [rbp-5D0h]
  int __le; // [rsp+10h] [rbp-5D0h]
  int __lf; // [rsp+10h] [rbp-5D0h]
  int32_t v69; // [rsp+20h] [rbp-5C0h]
  common::milog::MiLogStream *v70; // [rsp+20h] [rbp-5C0h]
  char v72[1424]; // [rsp+50h] [rbp-590h] BYREF

  v3 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1376LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "31 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 8 8 iter:457 224 8 9 <unkno"
                        "wn> 256 12 9 <unknown> 288 16 22 declared_value_ptr:457 320 16 22 declared_value_ptr:457 352 16 "
                        "22 declared_value_ptr:457 384 16 22 declared_value_ptr:457 416 16 22 declared_value_ptr:457 448 "
                        "16 22 declared_value_ptr:457 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <"
                        "unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <u"
                        "nknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 56 28 valid_declared_value_set:457 1280 56 "
                        "23 valid_enum_type_set:459";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectDrawValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556927;
  v5[536862725] = -234556924;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -219020288;
  v5[536862729] = -219021312;
  v5[536862730] = -219021312;
  v5[536862731] = -219021312;
  v5[536862732] = -219021312;
  v5[536862733] = -219021312;
  v5[536862734] = -219021312;
  v5[536862736] = -218959118;
  v5[536862738] = -218959118;
  v5[536862740] = -218959118;
  v5[536862742] = -218959118;
  v5[536862744] = -218959118;
  v5[536862746] = -218959118;
  v5[536862748] = -218959118;
  v5[536862750] = -218959118;
  v5[536862752] = -218959118;
  v5[536862754] = -218959118;
  v5[536862756] = -218959118;
  v5[536862758] = -234881024;
  v5[536862759] = -218959118;
  v5[536862761] = -218103808;
  v5[536862762] = -202116109;
  if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 144, config_skill);
  *(_DWORD *)(v3 + 144) = 4;
  __lg._M_array = (std::initializer_list<data::GCGDeclaredValueType>::iterator)(v3 + 144);
  __lg._M_len = 1LL;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1184),
    __lg,
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 192, v3 + 144);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 192) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 224, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 224) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 192),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 224));
  *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 480, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 480),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDrawValidatorFunc",
      457);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 480),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
    *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -117901064;
    v69 = -1;
    __l = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDrawValidatorFunc",
        457);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 544),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      v11 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 544));
      *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = -117901064;
      v69 = -1;
      __l = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v3 + 1184),
              &v16->type) )
      {
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDrawValidatorFunc",
          457);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 608),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        v11 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 608));
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = -117901064;
        v69 = -1;
        __l = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 288));
            v11 = (const char *)(v3 + 288);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v3 + 288)) )
            {
              *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 672) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 672, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 672),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDrawValidatorFunc",
                457);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 672),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 672));
              *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __la = 0;
            }
            else
            {
              v23 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
              v24 = *(_BYTE *)(((unsigned __int64)&v23->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v24 != 0;
              if ( v24 != 0 && v24 <= 3 )
                __asan_report_load4(&v23->value);
              __la = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v3 + 288));
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -1800;
            if ( __la )
              goto LABEL_98;
            __l = 0;
            break;
          case Element:
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 320));
            v11 = (const char *)(v3 + 320);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v3 + 320)) )
            {
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 736, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 736),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDrawValidatorFunc",
                457);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 736),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v25,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v26,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 736));
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lb = 0;
            }
            else
            {
              v27 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 320));
              v28 = *(_BYTE *)(((unsigned __int64)&v27->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v28 != 0;
              if ( v28 != 0 && v28 <= 3 )
                __asan_report_load4(&v27->value);
              __lb = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v3 + 320));
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -1800;
            if ( __lb )
              goto LABEL_98;
            __l = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 352));
            v11 = (const char *)(v3 + 352);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v3 + 352)) )
            {
              *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 800) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 800, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 800),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDrawValidatorFunc",
                457);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 800),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v29,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v30,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 800));
              *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lc = 0;
            }
            else
            {
              v31 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 352));
              v32 = *(_BYTE *)(((unsigned __int64)&v31->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v32 != 0;
              if ( v32 != 0 && v32 <= 3 )
                __asan_report_load4(&v31->value);
              __lc = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v3 + 352));
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -1800;
            if ( __lc )
              goto LABEL_98;
            __l = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 416));
            v11 = (const char *)(v3 + 416);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v3 + 416)) )
            {
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDrawValidatorFunc",
                457);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 928),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 928));
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __le = 0;
            }
            else
            {
              v39 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 416));
              v40 = *(_BYTE *)(((unsigned __int64)&v39->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v40 != 0;
              if ( v40 != 0 && v40 <= 3 )
                __asan_report_load4(&v39->value);
              __le = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v3 + 416));
            *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -1800;
            if ( __le )
              goto LABEL_98;
            __l = 0;
            break;
          case Heal:
            *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 384));
            v11 = (const char *)(v3 + 384);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v3 + 384)) )
            {
              *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDrawValidatorFunc",
                457);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 864),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 864));
              *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __ld = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 384));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              __ld = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v3 + 384));
            *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -1800;
            if ( __ld )
              goto LABEL_98;
            __l = 0;
            break;
          case TokenType:
            *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 448));
            v11 = (const char *)(v3 + 448);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v3 + 448)) )
            {
              *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDrawValidatorFunc",
                457);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 992),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v42,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 992));
              *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lf = 0;
            }
            else
            {
              v43 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
              v44 = *(_BYTE *)(((unsigned __int64)&v43->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v44 != 0;
              if ( v44 != 0 && v44 <= 3 )
                __asan_report_load4(&v43->value);
              __lf = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v3 + 448));
            *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( __lf )
LABEL_98:
              __l = 1;
            else
              __l = 0;
            break;
          default:
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1056) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1056, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1056),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDrawValidatorFunc",
              457);
            v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1056),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v70 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v45,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
            v46 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            v47 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v46->second);
            if ( *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v47->type);
            }
            type = (unsigned int)v47->type;
            if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 160, type);
            *(_DWORD *)(v3 + 160) = type;
            v11 = (const char *)(v3 + 160);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v70,
              (const unsigned int *)(v3 + 160));
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1056));
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -117901064;
            v69 = -1;
            __l = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1184));
  v49 = ((v3 + 1184) >> 3) + 2147450880;
  *(_DWORD *)v49 = -117901064;
  *(_WORD *)(v49 + 4) = -1800;
  *(_BYTE *)(v49 + 6) = -8;
  *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
  if ( __l == 1 )
  {
    v50 = ((v3 + 1280) >> 3) + 2147450880;
    *(_DWORD *)v50 = 0;
    *(_WORD *)(v50 + 4) = 0;
    *(_BYTE *)(v50 + 6) = 0;
    *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 256, v11);
    *(_DWORD *)(v3 + 256) = 0;
    v51 = (((_BYTE)v3 + 4) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 260, v51);
    }
    *(_DWORD *)(v3 + 260) = 1;
    if ( *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 264, v51);
    *(_DWORD *)(v3 + 264) = 2;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 1280),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 256),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 112),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 128));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 1280),
            &config_effect->target_camp) )
    {
      *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1120, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1120),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDrawValidatorFunc",
        459);
      v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 1120),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v53 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v52, (const char (*)[31])byte_1A5047A0);
      v54 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v53,
              (const char (*)[26])"config_effect.target_camp");
      v55 = " value:";
      v56 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v54, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_effect->target_camp);
      }
      target_camp = config_effect->target_camp;
      v58 = *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000);
      if ( v58 != 0 && v58 <= 3 )
      {
        target_camp = v3 + 176;
        LOBYTE(v55) = v58 != 0;
        __asan_report_store4(v3 + 176, v55);
      }
      *(_DWORD *)(v3 + 176) = target_camp;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, (const unsigned int *)(v3 + 176));
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1120));
      *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
      v69 = -1;
      v59 = 0;
    }
    else
    {
      v59 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 1280));
    if ( v59 == 1 )
      v69 = 0;
  }
  if ( v72 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8098) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 160) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A4) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1376LL, v72);
  }
  return v69;
};

// Line 467: range 000000000F1E7AF6-000000000F1E84EA
int32_t __cdecl ConfigGCGExecEffectSearchCardValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectSearchCard,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:467 64 8 13 __for_end:467 96 16 26 cast_config_effect_ptr:467 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectSearchCardValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectSearchCard,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectSearchCard>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectSearchCard> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectSearchCardValidator",
        467);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        v12,
        (const char (*)[30])"ConfigGCGExecEffectSearchCard");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectSearchCardValidator",
            467);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectSearchCardValidator",
              467);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectSearchCardValidator",
          467);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectSearchCard,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectSearchCard,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectSearchCardValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectSearchCard>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectSearchCard> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectSearchCardValidator",
    467);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
    v9,
    (const char (*)[30])"ConfigGCGExecEffectSearchCard");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 468: range 000000000F1E84EB-000000000F1EA5CA
int32_t __cdecl ConfigGCGExecEffectSearchCardValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectSearchCard *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // dl
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  char v28; // dl
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  char v32; // dl
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  char v40; // dl
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  char v44; // dl
  common::milog::MiLogStream *v45; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v46; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  __int64 type; // rsi
  unsigned __int64 v49; // rax
  unsigned __int64 v50; // rax
  __int64 v51; // rsi
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  const char *v55; // rsi
  common::milog::MiLogStream *v56; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v58; // al
  int v59; // r14d
  std::initializer_list<data::GCGDeclaredValueType> __lg; // [rsp+10h] [rbp-5D0h]
  int __l; // [rsp+10h] [rbp-5D0h]
  int __la; // [rsp+10h] [rbp-5D0h]
  int __lb; // [rsp+10h] [rbp-5D0h]
  int __lc; // [rsp+10h] [rbp-5D0h]
  int __ld; // [rsp+10h] [rbp-5D0h]
  int __le; // [rsp+10h] [rbp-5D0h]
  int __lf; // [rsp+10h] [rbp-5D0h]
  int32_t v69; // [rsp+20h] [rbp-5C0h]
  common::milog::MiLogStream *v70; // [rsp+20h] [rbp-5C0h]
  char v72[1424]; // [rsp+50h] [rbp-590h] BYREF

  v3 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1376LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "31 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 8 8 iter:470 224 8 9 <unkno"
                        "wn> 256 12 9 <unknown> 288 16 22 declared_value_ptr:470 320 16 22 declared_value_ptr:470 352 16 "
                        "22 declared_value_ptr:470 384 16 22 declared_value_ptr:470 416 16 22 declared_value_ptr:470 448 "
                        "16 22 declared_value_ptr:470 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <"
                        "unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <u"
                        "nknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 56 28 valid_declared_value_set:470 1280 56 "
                        "23 valid_enum_type_set:472";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectSearchCardValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556927;
  v5[536862725] = -234556924;
  v5[536862726] = -218959360;
  v5[536862727] = -218959360;
  v5[536862728] = -219020288;
  v5[536862729] = -219021312;
  v5[536862730] = -219021312;
  v5[536862731] = -219021312;
  v5[536862732] = -219021312;
  v5[536862733] = -219021312;
  v5[536862734] = -219021312;
  v5[536862736] = -218959118;
  v5[536862738] = -218959118;
  v5[536862740] = -218959118;
  v5[536862742] = -218959118;
  v5[536862744] = -218959118;
  v5[536862746] = -218959118;
  v5[536862748] = -218959118;
  v5[536862750] = -218959118;
  v5[536862752] = -218959118;
  v5[536862754] = -218959118;
  v5[536862756] = -218959118;
  v5[536862758] = -234881024;
  v5[536862759] = -218959118;
  v5[536862761] = -218103808;
  v5[536862762] = -202116109;
  if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 144, config_skill);
  *(_DWORD *)(v3 + 144) = 4;
  __lg._M_array = (std::initializer_list<data::GCGDeclaredValueType>::iterator)(v3 + 144);
  __lg._M_len = 1LL;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1184),
    __lg,
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 192, v3 + 144);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 192) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 224, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 224) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 192),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 224));
  *(_BYTE *)(((v3 + 224) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 480, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 480),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectSearchCardValidatorFunc",
      470);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 480),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
    *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -117901064;
    v69 = -1;
    __l = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectSearchCardValidatorFunc",
        470);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 544),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      v11 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 544));
      *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = -117901064;
      v69 = -1;
      __l = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v3 + 1184),
              &v16->type) )
      {
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectSearchCardValidatorFunc",
          470);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 608),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        v11 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 608));
        *(_DWORD *)(((v3 + 608) >> 3) + 0x7FFF8000) = -117901064;
        v69 = -1;
        __l = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 288));
            v11 = (const char *)(v3 + 288);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v3 + 288)) )
            {
              *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 672) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 703) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 672, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 672),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectSearchCardValidatorFunc",
                470);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 672),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 672));
              *(_DWORD *)(((v3 + 672) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __la = 0;
            }
            else
            {
              v23 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
              v24 = *(_BYTE *)(((unsigned __int64)&v23->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v24 != 0;
              if ( v24 != 0 && v24 <= 3 )
                __asan_report_load4(&v23->value);
              __la = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v3 + 288));
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -1800;
            if ( __la )
              goto LABEL_98;
            __l = 0;
            break;
          case Element:
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 320));
            v11 = (const char *)(v3 + 320);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v3 + 320)) )
            {
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 736) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 767) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 736, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 736),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectSearchCardValidatorFunc",
                470);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 736),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v25,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v26,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 736));
              *(_DWORD *)(((v3 + 736) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lb = 0;
            }
            else
            {
              v27 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 320));
              v28 = *(_BYTE *)(((unsigned __int64)&v27->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v28 != 0;
              if ( v28 != 0 && v28 <= 3 )
                __asan_report_load4(&v27->value);
              __lb = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v3 + 320));
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -1800;
            if ( __lb )
              goto LABEL_98;
            __l = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 352));
            v11 = (const char *)(v3 + 352);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v3 + 352)) )
            {
              *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 800) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 831) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 800, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 800),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectSearchCardValidatorFunc",
                470);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 800),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v29,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v30,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 800));
              *(_DWORD *)(((v3 + 800) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lc = 0;
            }
            else
            {
              v31 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 352));
              v32 = *(_BYTE *)(((unsigned __int64)&v31->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v32 != 0;
              if ( v32 != 0 && v32 <= 3 )
                __asan_report_load4(&v31->value);
              __lc = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v3 + 352));
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -1800;
            if ( __lc )
              goto LABEL_98;
            __l = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 416));
            v11 = (const char *)(v3 + 416);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v3 + 416)) )
            {
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectSearchCardValidatorFunc",
                470);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 928),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 928));
              *(_DWORD *)(((v3 + 928) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __le = 0;
            }
            else
            {
              v39 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 416));
              v40 = *(_BYTE *)(((unsigned __int64)&v39->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v40 != 0;
              if ( v40 != 0 && v40 <= 3 )
                __asan_report_load4(&v39->value);
              __le = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v3 + 416));
            *(_WORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -1800;
            if ( __le )
              goto LABEL_98;
            __l = 0;
            break;
          case Heal:
            *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 384));
            v11 = (const char *)(v3 + 384);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v3 + 384)) )
            {
              *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectSearchCardValidatorFunc",
                470);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 864),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 864));
              *(_DWORD *)(((v3 + 864) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __ld = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 384));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              __ld = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v3 + 384));
            *(_WORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -1800;
            if ( __ld )
              goto LABEL_98;
            __l = 0;
            break;
          case TokenType:
            *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            if ( *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 448));
            v11 = (const char *)(v3 + 448);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v3 + 448)) )
            {
              *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectSearchCardValidatorFunc",
                470);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 992),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v42,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 992));
              *(_DWORD *)(((v3 + 992) >> 3) + 0x7FFF8000) = -117901064;
              v69 = -1;
              __lf = 0;
            }
            else
            {
              v43 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 448));
              v44 = *(_BYTE *)(((unsigned __int64)&v43->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v44 != 0;
              if ( v44 != 0 && v44 <= 3 )
                __asan_report_load4(&v43->value);
              __lf = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v3 + 448));
            *(_WORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( __lf )
LABEL_98:
              __l = 1;
            else
              __l = 0;
            break;
          default:
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1056) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 1087) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1056, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1056),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectSearchCardValidatorFunc",
              470);
            v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1056),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v70 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v45,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
            v46 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 192));
            v47 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v46->second);
            if ( *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v47->type);
            }
            type = (unsigned int)v47->type;
            if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 160, type);
            *(_DWORD *)(v3 + 160) = type;
            v11 = (const char *)(v3 + 160);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v70,
              (const unsigned int *)(v3 + 160));
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1056));
            *(_DWORD *)(((v3 + 1056) >> 3) + 0x7FFF8000) = -117901064;
            v69 = -1;
            __l = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1184));
  v49 = ((v3 + 1184) >> 3) + 2147450880;
  *(_DWORD *)v49 = -117901064;
  *(_WORD *)(v49 + 4) = -1800;
  *(_BYTE *)(v49 + 6) = -8;
  *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) = -8;
  if ( __l == 1 )
  {
    v50 = ((v3 + 1280) >> 3) + 2147450880;
    *(_DWORD *)v50 = 0;
    *(_WORD *)(v50 + 4) = 0;
    *(_BYTE *)(v50 + 6) = 0;
    *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 256, v11);
    *(_DWORD *)(v3 + 256) = 0;
    v51 = (((_BYTE)v3 + 4) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 260) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 260, v51);
    }
    *(_DWORD *)(v3 + 260) = 1;
    if ( *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 264, v51);
    *(_DWORD *)(v3 + 264) = 2;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 1280),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 256),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 112),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 128));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 1280),
            &config_effect->target_camp) )
    {
      *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1120) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 1151) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1120, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1120),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectSearchCardValidatorFunc",
        472);
      v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 1120),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v53 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v52, (const char (*)[31])byte_1A5047A0);
      v54 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v53,
              (const char (*)[26])"config_effect.target_camp");
      v55 = " value:";
      v56 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v54, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_effect->target_camp);
      }
      target_camp = config_effect->target_camp;
      v58 = *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000);
      if ( v58 != 0 && v58 <= 3 )
      {
        target_camp = v3 + 176;
        LOBYTE(v55) = v58 != 0;
        __asan_report_store4(v3 + 176, v55);
      }
      *(_DWORD *)(v3 + 176) = target_camp;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, (const unsigned int *)(v3 + 176));
      *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1120));
      *(_DWORD *)(((v3 + 1120) >> 3) + 0x7FFF8000) = -117901064;
      v69 = -1;
      v59 = 0;
    }
    else
    {
      v59 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 1280));
    if ( v59 == 1 )
      v69 = 0;
  }
  if ( v72 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8098) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 160) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A4) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1376LL, v72);
  }
  return v69;
};

// Line 480: range 000000000F1EA5CB-000000000F1EAFBF
int32_t __cdecl ConfigGCGExecEffectAbsorbUnusedDiceValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectAbsorbUnusedDice,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:480 64 8 13 __for_end:480 96 16 26 cast_config_effect_ptr:480 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectAbsorbUnusedDiceValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectAbsorbUnusedDice,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectAbsorbUnusedDice>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectAbsorbUnusedDice> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectAbsorbUnusedDiceValidator",
        480);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        v12,
        (const char (*)[36])"ConfigGCGExecEffectAbsorbUnusedDice");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectAbsorbUnusedDiceValidator",
            480);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectAbsorbUnusedDiceValidator",
              480);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectAbsorbUnusedDiceValidator",
          480);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectAbsorbUnusedDice,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectAbsorbUnusedDice,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectAbsorbUnusedDiceValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectAbsorbUnusedDice>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectAbsorbUnusedDice> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectAbsorbUnusedDiceValidator",
    480);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
    v9,
    (const char (*)[36])"ConfigGCGExecEffectAbsorbUnusedDice");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 481: range 000000000F1EAFC0-000000000F1EB590
int32_t __cdecl ConfigGCGExecEffectAbsorbUnusedDiceValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectAbsorbUnusedDice *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  common::milog::MiLogStream *v11; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v13; // al
  int v14; // r14d
  int32_t result; // eax
  int32_t v16; // [rsp+14h] [rbp-16Ch]
  char v18[336]; // [rsp+30h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 12 9 <unknown> 128 32 9"
                        " <unknown> 192 56 23 valid_enum_type_set:484";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectAbsorbUnusedDiceValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556927;
  v5[536862723] = -219020288;
  v5[536862725] = -218959118;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 96, config_skill);
  *(_DWORD *)(v3 + 96) = 0;
  v6 = (((_BYTE)v3 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 100) & 7) + 3) >= *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 100, v6);
  }
  *(_DWORD *)(v3 + 100) = 1;
  if ( *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 104, v6);
  *(_DWORD *)(v3 + 104) = 2;
  std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectCampType>::unordered_set(
    (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 192),
    (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 96),
    0LL,
    (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_WORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -1800;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
          (std::unordered_set<data::GCGEffectCampType> *)(v3 + 192),
          &config_effect->target_camp) )
  {
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectAbsorbUnusedDiceValidatorFunc",
      484);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v7, (const char (*)[31])byte_1A5047A0);
    v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           v8,
           (const char (*)[26])"config_effect.target_camp");
    v10 = " value:";
    v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->target_camp);
    }
    target_camp = config_effect->target_camp;
    v13 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      target_camp = v3 + 80;
      LOBYTE(v10) = v13 != 0;
      __asan_report_store4(v3 + 80, v10);
    }
    *(_DWORD *)(v3 + 80) = target_camp;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 80));
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
    v16 = -1;
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 192));
  if ( v14 == 1 )
    v16 = 0;
  result = v16;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 492: range 000000000F1EB591-000000000F1EBF85
int32_t __cdecl ConfigGCGExecEffectCreateCardValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t CardValidatorFunc; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectCreateCard,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:492 64 8 13 __for_end:492 96 16 26 cast_config_effect_ptr:492 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectCreateCardValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectCreateCard,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectCreateCard>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectCreateCard> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectCreateCardValidator",
        492);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        v12,
        (const char (*)[30])"ConfigGCGExecEffectCreateCard");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      CardValidatorFunc = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectCreateCardValidator",
            492);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          CardValidatorFunc = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectCreateCardValidator",
              492);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            CardValidatorFunc = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectCreateCardValidator",
          492);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        CardValidatorFunc = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectCreateCard,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectCreateCard,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      CardValidatorFunc = ConfigGCGExecEffectCreateCardValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectCreateCard>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectCreateCard> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectCreateCardValidator",
    492);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
    v9,
    (const char (*)[30])"ConfigGCGExecEffectCreateCard");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  CardValidatorFunc = -1;
LABEL_42:
  result = CardValidatorFunc;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 493: range 000000000F1EBF86-000000000F1ECAAF
int32_t __cdecl ConfigGCGExecEffectCreateCardValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectCreateCard *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::GCGEffectCreatePositionType *p_position; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  common::milog::MiLogStream *v11; // rcx
  data::GCGEffectCreatePositionType position; // edi
  char v13; // al
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rax
  __int64 v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const char *v20; // rsi
  common::milog::MiLogStream *v21; // rcx
  data::GCGEffectCampType camp_type; // edi
  char v23; // al
  int v24; // r14d
  int32_t result; // eax
  std::initializer_list<data::GCGEffectCreatePositionType> __la; // [rsp+10h] [rbp-280h]
  int __l; // [rsp+10h] [rbp-280h]
  int32_t v28; // [rsp+24h] [rbp-26Ch]
  char v30[592]; // [rsp+40h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 8 9 <unknown> 192 12 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown> 352 56 23 valid_enum_type_set:496 448 56 23 valid_enum_type_set:499";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectCreateCardValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = -218959360;
  v5[536862726] = -219020288;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -234881024;
  v5[536862733] = -218959118;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 160, config_skill);
  *(_DWORD *)(v3 + 160) = 0;
  if ( *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 92) & 7) + 3) >= *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 164, (((_BYTE)v3 - 92) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 164) = 1;
  __la._M_array = (std::initializer_list<data::GCGEffectCreatePositionType>::iterator)(v3 + 160);
  __la._M_len = 2LL;
  std::allocator<data::GCGEffectCreatePositionType>::allocator((std::allocator<data::GCGEffectCreatePositionType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectCreatePositionType>::unordered_set(
    (std::unordered_set<data::GCGEffectCreatePositionType> *const)(v3 + 352),
    __la,
    0LL,
    (const std::unordered_set<data::GCGEffectCreatePositionType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectCreatePositionType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCreatePositionType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectCreatePositionType>::~allocator((std::allocator<data::GCGEffectCreatePositionType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  p_position = &config_effect->position;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCreatePositionType>,data::GCGEffectCreatePositionType>(
          (std::unordered_set<data::GCGEffectCreatePositionType> *)(v3 + 352),
          &config_effect->position) )
  {
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectCreateCardValidatorFunc",
      496);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v7, (const char (*)[31])byte_1A5047A0);
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           v8,
           (const char (*)[23])"config_effect.position");
    v10 = " value:";
    v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->position >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->position >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->position);
    }
    position = config_effect->position;
    v13 = *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      position = v3 + 128;
      LOBYTE(v10) = v13 != 0;
      __asan_report_store4(v3 + 128, v10);
    }
    *(_DWORD *)(v3 + 128) = position;
    p_position = (data::GCGEffectCreatePositionType *)(v3 + 128);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -117901064;
    v28 = -1;
    __l = 0;
  }
  else
  {
    __l = 1;
  }
  std::unordered_set<data::GCGEffectCreatePositionType>::~unordered_set((std::unordered_set<data::GCGEffectCreatePositionType> *const)(v3 + 352));
  v14 = ((v3 + 352) >> 3) + 2147450880;
  *(_DWORD *)v14 = -117901064;
  *(_WORD *)(v14 + 4) = -1800;
  *(_BYTE *)(v14 + 6) = -8;
  if ( __l == 1 )
  {
    v15 = ((v3 + 448) >> 3) + 2147450880;
    *(_DWORD *)v15 = 0;
    *(_WORD *)(v15 + 4) = 0;
    *(_BYTE *)(v15 + 6) = 0;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 192, p_position);
    *(_DWORD *)(v3 + 192) = 0;
    v16 = (((_BYTE)v3 - 64 + 4) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 64 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 196, v16);
    }
    *(_DWORD *)(v3 + 196) = 1;
    if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 200, v16);
    *(_DWORD *)(v3 + 200) = 2;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 192),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 80),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 112));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 448),
            &config_effect->camp_type) )
    {
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectCreateCardValidatorFunc",
        499);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v17, (const char (*)[31])byte_1A5047A0);
      v19 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v18,
              (const char (*)[24])"config_effect.camp_type");
      v20 = " value:";
      v21 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v19, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->camp_type);
      }
      camp_type = config_effect->camp_type;
      v23 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
      if ( v23 != 0 && v23 <= 3 )
      {
        camp_type = v3 + 144;
        LOBYTE(v20) = v23 != 0;
        __asan_report_store4(v3 + 144, v20);
      }
      *(_DWORD *)(v3 + 144) = camp_type;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 144));
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
      v28 = -1;
      v24 = 0;
    }
    else
    {
      v24 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448));
    if ( v24 == 1 )
      v28 = 0;
  }
  result = v28;
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 507: range 000000000F1ECAB0-000000000F1ED4A4
int32_t __cdecl ConfigGCGExecEffectRandomCreateCardValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t CardValidatorFunc; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectRandomCreateCard,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:507 64 8 13 __for_end:507 96 16 26 cast_config_effect_ptr:507 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectRandomCreateCardValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectRandomCreateCard,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectRandomCreateCard>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectRandomCreateCard> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRandomCreateCardValidator",
        507);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        v12,
        (const char (*)[36])"ConfigGCGExecEffectRandomCreateCard");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      CardValidatorFunc = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectRandomCreateCardValidator",
            507);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          CardValidatorFunc = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectRandomCreateCardValidator",
              507);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            CardValidatorFunc = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectRandomCreateCardValidator",
          507);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        CardValidatorFunc = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectRandomCreateCard,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectRandomCreateCard,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      CardValidatorFunc = ConfigGCGExecEffectRandomCreateCardValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectRandomCreateCard>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectRandomCreateCard> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectRandomCreateCardValidator",
    507);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
    v9,
    (const char (*)[36])"ConfigGCGExecEffectRandomCreateCard");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  CardValidatorFunc = -1;
LABEL_42:
  result = CardValidatorFunc;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 508: range 000000000F1ED4A5-000000000F1EDFCE
int32_t __cdecl ConfigGCGExecEffectRandomCreateCardValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectRandomCreateCard *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::GCGEffectCreatePositionType *p_position; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  common::milog::MiLogStream *v11; // rcx
  data::GCGEffectCreatePositionType position; // edi
  char v13; // al
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rax
  __int64 v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const char *v20; // rsi
  common::milog::MiLogStream *v21; // rcx
  data::GCGEffectCampType camp_type; // edi
  char v23; // al
  int v24; // r14d
  int32_t result; // eax
  std::initializer_list<data::GCGEffectCreatePositionType> __la; // [rsp+10h] [rbp-280h]
  int __l; // [rsp+10h] [rbp-280h]
  int32_t v28; // [rsp+24h] [rbp-26Ch]
  char v30[592]; // [rsp+40h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 8 9 <unknown> 192 12 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown> 352 56 23 valid_enum_type_set:511 448 56 23 valid_enum_type_set:514";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectRandomCreateCardValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = -218959360;
  v5[536862726] = -219020288;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -234881024;
  v5[536862733] = -218959118;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 160, config_skill);
  *(_DWORD *)(v3 + 160) = 0;
  if ( *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 92) & 7) + 3) >= *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 164, (((_BYTE)v3 - 92) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 164) = 1;
  __la._M_array = (std::initializer_list<data::GCGEffectCreatePositionType>::iterator)(v3 + 160);
  __la._M_len = 2LL;
  std::allocator<data::GCGEffectCreatePositionType>::allocator((std::allocator<data::GCGEffectCreatePositionType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectCreatePositionType>::unordered_set(
    (std::unordered_set<data::GCGEffectCreatePositionType> *const)(v3 + 352),
    __la,
    0LL,
    (const std::unordered_set<data::GCGEffectCreatePositionType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectCreatePositionType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCreatePositionType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectCreatePositionType>::~allocator((std::allocator<data::GCGEffectCreatePositionType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  p_position = &config_effect->position;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCreatePositionType>,data::GCGEffectCreatePositionType>(
          (std::unordered_set<data::GCGEffectCreatePositionType> *)(v3 + 352),
          &config_effect->position) )
  {
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectRandomCreateCardValidatorFunc",
      511);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v7, (const char (*)[31])byte_1A5047A0);
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           v8,
           (const char (*)[23])"config_effect.position");
    v10 = " value:";
    v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->position >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_effect->position >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_effect->position);
    }
    position = config_effect->position;
    v13 = *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      position = v3 + 128;
      LOBYTE(v10) = v13 != 0;
      __asan_report_store4(v3 + 128, v10);
    }
    *(_DWORD *)(v3 + 128) = position;
    p_position = (data::GCGEffectCreatePositionType *)(v3 + 128);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -117901064;
    v28 = -1;
    __l = 0;
  }
  else
  {
    __l = 1;
  }
  std::unordered_set<data::GCGEffectCreatePositionType>::~unordered_set((std::unordered_set<data::GCGEffectCreatePositionType> *const)(v3 + 352));
  v14 = ((v3 + 352) >> 3) + 2147450880;
  *(_DWORD *)v14 = -117901064;
  *(_WORD *)(v14 + 4) = -1800;
  *(_BYTE *)(v14 + 6) = -8;
  if ( __l == 1 )
  {
    v15 = ((v3 + 448) >> 3) + 2147450880;
    *(_DWORD *)v15 = 0;
    *(_WORD *)(v15 + 4) = 0;
    *(_BYTE *)(v15 + 6) = 0;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 192, p_position);
    *(_DWORD *)(v3 + 192) = 0;
    v16 = (((_BYTE)v3 - 64 + 4) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 64 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 196, v16);
    }
    *(_DWORD *)(v3 + 196) = 1;
    if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 200, v16);
    *(_DWORD *)(v3 + 200) = 2;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 192),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 80),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 112));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 448),
            &config_effect->camp_type) )
    {
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectRandomCreateCardValidatorFunc",
        514);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v17, (const char (*)[31])byte_1A5047A0);
      v19 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v18,
              (const char (*)[24])"config_effect.camp_type");
      v20 = " value:";
      v21 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v19, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_effect->camp_type);
      }
      camp_type = config_effect->camp_type;
      v23 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
      if ( v23 != 0 && v23 <= 3 )
      {
        camp_type = v3 + 144;
        LOBYTE(v20) = v23 != 0;
        __asan_report_store4(v3 + 144, v20);
      }
      *(_DWORD *)(v3 + 144) = camp_type;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 144));
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
      v28 = -1;
      v24 = 0;
    }
    else
    {
      v24 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448));
    if ( v24 == 1 )
      v28 = 0;
  }
  result = v28;
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 522: range 000000000F1EDFCF-000000000F1EE9C3
int32_t __cdecl ConfigGCGExecEffectCreateModifyCardValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t ModifyCardValidatorFunc; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectCreateModifyCard,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:522 64 8 13 __for_end:522 96 16 26 cast_config_effect_ptr:522 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectCreateModifyCardValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectCreateModifyCard,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectCreateModifyCard>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectCreateModifyCard> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectCreateModifyCardValidator",
        522);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        v12,
        (const char (*)[36])"ConfigGCGExecEffectCreateModifyCard");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      ModifyCardValidatorFunc = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectCreateModifyCardValidator",
            522);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          ModifyCardValidatorFunc = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectCreateModifyCardValidator",
              522);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            ModifyCardValidatorFunc = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectCreateModifyCardValidator",
          522);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        ModifyCardValidatorFunc = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectCreateModifyCard,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectCreateModifyCard,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      ModifyCardValidatorFunc = ConfigGCGExecEffectCreateModifyCardValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectCreateModifyCard>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectCreateModifyCard> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectCreateModifyCardValidator",
    522);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
    v9,
    (const char (*)[36])"ConfigGCGExecEffectCreateModifyCard");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  ModifyCardValidatorFunc = -1;
LABEL_42:
  result = ModifyCardValidatorFunc;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 523: range 000000000F1EE9C4-000000000F1EFC8C
int32_t __cdecl ConfigGCGExecEffectCreateModifyCardValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectCreateModifyCard *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGCardType card_type; // edi
  char v17; // al
  __int64 v18; // rsi
  __int64 v19; // rsi
  __int64 v20; // rsi
  __int64 v21; // rsi
  unsigned __int64 v22; // rax
  data::GCGChooseTargetCharaterType *p_choose_charater_type; // rsi
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  const char *v27; // rsi
  common::milog::MiLogStream *v28; // rcx
  data::GCGChooseTargetCharaterType choose_charater_type; // edi
  char v30; // al
  unsigned __int64 v31; // rax
  unsigned __int64 v32; // rax
  __int64 v33; // rsi
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  const char *v37; // rsi
  common::milog::MiLogStream *v38; // rcx
  data::GCGEffectCampType camp_type; // edi
  char v40; // al
  int v41; // r14d
  std::initializer_list<data::GCGChooseTargetCharaterType> __la; // [rsp+10h] [rbp-390h]
  int __l; // [rsp+10h] [rbp-390h]
  int32_t v45; // [rsp+24h] [rbp-37Ch]
  const GCGGameExcelConfigMgr *gcg_game_config_mgr; // [rsp+40h] [rbp-360h]
  const data::GCGCardConfig *target_card_config_ptr; // [rsp+48h] [rbp-358h]
  char v49[848]; // [rsp+50h] [rbp-350h] BYREF

  v3 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(800LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "18 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 12 9 <unknown> 208 32 9 <unk"
                        "nown> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 36 9 <unkn"
                        "own> 608 56 23 valid_enum_type_set:543 704 56 23 valid_enum_type_set:553";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectCreateModifyCardValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = 61956;
  v5[536862725] = 0x4000000;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862737] = -234618880;
  v5[536862738] = -218959118;
  v5[536862740] = -234881024;
  v5[536862741] = -218959118;
  v5[536862743] = -218103808;
  v5[536862744] = -202116109;
  if ( std::operator==<GCGConfigMgr>(0LL, &config->gcg_config_mgr_ptr) )
  {
    if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectCreateModifyCardValidatorFunc",
      526);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 208),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v6, (const char (*)[47])byte_1A508F60);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &config_effect->card_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
    v45 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config->gcg_config_mgr_ptr);
    gcg_game_config_mgr = GCGConfigMgr::getGCGGameExcelConfigMgr(v8);
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->card_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->card_id >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->card_id);
    }
    target_card_config_ptr = GCGGameExcelConfigMgr::findCardConfig(gcg_game_config_mgr, config_effect->card_id);
    if ( target_card_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)target_card_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3)
                                                                              + 0x7FFF8000) )
      {
        __asan_report_load4(&target_card_config_ptr->card_type);
      }
      if ( target_card_config_ptr->card_type == GCG_CARD_STATE || target_card_config_ptr->card_type == GCG_CARD_MODIFY )
      {
        if ( *(_BYTE *)(((v3 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 528) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 528, (((_BYTE)target_card_config_ptr + 12) & 7u) + 3);
        *(_DWORD *)(v3 + 528) = 0;
        v18 = (((_BYTE)v3 + 20) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 532) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 20) & 7) + 3) >= *(_BYTE *)(((v3 + 532) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 532, v18);
        }
        *(_DWORD *)(v3 + 532) = 1;
        if ( *(_BYTE *)(((v3 + 536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 536) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 536, v18);
        *(_DWORD *)(v3 + 536) = 2;
        v19 = (((_BYTE)v3 + 28) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 540) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 28) & 7) + 3) >= *(_BYTE *)(((v3 + 540) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 540, v19);
        }
        *(_DWORD *)(v3 + 540) = 3;
        if ( *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 544, v19);
        *(_DWORD *)(v3 + 544) = 9;
        v20 = (((_BYTE)v3 + 36) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 548) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 36) & 7) + 3) >= *(_BYTE *)(((v3 + 548) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 548, v20);
        }
        *(_DWORD *)(v3 + 548) = 10;
        if ( *(_BYTE *)(((v3 + 552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 552) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 552, v20);
        *(_DWORD *)(v3 + 552) = 14;
        v21 = (((_BYTE)v3 + 44) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 556) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 44) & 7) + 3) >= *(_BYTE *)(((v3 + 556) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 556, v21);
        }
        *(_DWORD *)(v3 + 556) = 15;
        if ( *(_BYTE *)(((v3 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 560) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 560, v21);
        *(_DWORD *)(v3 + 560) = 16;
        __la._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v3 + 528);
        __la._M_len = 9LL;
        std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v3 + 64));
        std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
          (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v3 + 608),
          __la,
          0LL,
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v3 + 32),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v3 + 48),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v3 + 64));
        std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v3 + 64));
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
        v22 = ((v3 + 528) >> 3) + 2147450880;
        *(_DWORD *)v22 = -117901064;
        *(_BYTE *)(v22 + 4) = -8;
        p_choose_charater_type = &config_effect->choose_charater_type;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
                (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v3 + 608),
                &config_effect->choose_charater_type) )
        {
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectCreateModifyCardValidatorFunc",
            543);
          v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 400),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v25 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v24, (const char (*)[31])byte_1A5047A0);
          v26 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  v25,
                  (const char (*)[35])"config_effect.choose_charater_type");
          v27 = " value:";
          v28 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v26, (const char (*)[8])" value:");
          *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&config_effect->choose_charater_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->choose_charater_type >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(&config_effect->choose_charater_type);
          }
          choose_charater_type = config_effect->choose_charater_type;
          v30 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
          if ( v30 != 0 && v30 <= 3 )
          {
            choose_charater_type = v3 + 144;
            LOBYTE(v27) = v30 != 0;
            __asan_report_store4(v3 + 144, v27);
          }
          *(_DWORD *)(v3 + 144) = choose_charater_type;
          p_choose_charater_type = (data::GCGChooseTargetCharaterType *)(v3 + 144);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v3 + 144));
          *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
          v45 = -1;
          __l = 0;
        }
        else
        {
          __l = 1;
        }
        std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v3 + 608));
        v31 = ((v3 + 608) >> 3) + 2147450880;
        *(_DWORD *)v31 = -117901064;
        *(_WORD *)(v31 + 4) = -1800;
        *(_BYTE *)(v31 + 6) = -8;
        if ( __l == 1 )
        {
          v32 = ((v3 + 704) >> 3) + 2147450880;
          *(_DWORD *)v32 = 0;
          *(_WORD *)(v32 + 4) = 0;
          *(_BYTE *)(v32 + 6) = 0;
          *(_WORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = 1024;
          if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 176, p_choose_charater_type);
          *(_DWORD *)(v3 + 176) = 0;
          v33 = (((_BYTE)v3 - 80 + 4) & 7u) + 3;
          if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 80 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v3 + 180, v33);
          }
          *(_DWORD *)(v3 + 180) = 1;
          if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 184, v33);
          *(_DWORD *)(v3 + 184) = 2;
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
          std::unordered_set<data::GCGEffectCampType>::unordered_set(
            (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 704),
            (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 176),
            0LL,
            (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 80),
            (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 96),
            (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 112));
          std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = -1800;
          if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                  (std::unordered_set<data::GCGEffectCampType> *)(v3 + 704),
                  &config_effect->camp_type) )
          {
            *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 464) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 464, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 464),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectCreateModifyCardValidatorFunc",
              553);
            v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 464),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v35 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    v34,
                    (const char (*)[31])byte_1A5047A0);
            v36 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v35,
                    (const char (*)[24])"config_effect.camp_type");
            v37 = " value:";
            v38 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v36, (const char (*)[8])" value:");
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&config_effect->camp_type);
            }
            camp_type = config_effect->camp_type;
            v40 = *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000);
            if ( v40 != 0 && v40 <= 3 )
            {
              camp_type = v3 + 160;
              LOBYTE(v37) = v40 != 0;
              __asan_report_store4(v3 + 160, v37);
            }
            *(_DWORD *)(v3 + 160) = camp_type;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v38,
              (const unsigned int *)(v3 + 160));
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 464));
            *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = -117901064;
            v45 = -1;
            v41 = 0;
          }
          else
          {
            v41 = 1;
          }
          std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 704));
          if ( v41 == 1 )
            v45 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectCreateModifyCardValidatorFunc",
          538);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])"card_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &config_effect->card_id);
        v14 = " card type is not valid, card type:";
        v15 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v13,
                (const char (*)[36])" card type is not valid, card type:");
        if ( *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)target_card_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3)
                                                                                + 0x7FFF8000) )
        {
          __asan_report_load4(&target_card_config_ptr->card_type);
        }
        card_type = target_card_config_ptr->card_type;
        v17 = *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000);
        if ( v17 != 0 && v17 <= 3 )
        {
          card_type = v3 + 128;
          LOBYTE(v14) = v17 != 0;
          __asan_report_store4(v3 + 128, v14);
        }
        *(_DWORD *)(v3 + 128) = card_type;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 128));
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
        v45 = -1;
      }
    }
    else
    {
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectCreateModifyCardValidatorFunc",
        533);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 272),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              v9,
              (const char (*)[43])"target_card_config_ptr not found, card_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &config_effect->card_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
      v45 = -1;
    }
  }
  if ( v49 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF805C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = -168430091;
  }
  return v45;
};

// Line 561: range 000000000F1EFC8D-000000000F1F0681
int32_t __cdecl ConfigGCGExecEffectDestroyCardValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectDestroyCard,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:561 64 8 13 __for_end:561 96 16 26 cast_config_effect_ptr:561 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectDestroyCardValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectDestroyCard,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectDestroyCard>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectDestroyCard> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDestroyCardValidator",
        561);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        v12,
        (const char (*)[31])"ConfigGCGExecEffectDestroyCard");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectDestroyCardValidator",
            561);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDestroyCardValidator",
              561);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDestroyCardValidator",
          561);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectDestroyCard,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectDestroyCard,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectDestroyCardValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectDestroyCard>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectDestroyCard> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectDestroyCardValidator",
    561);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
    v9,
    (const char (*)[31])"ConfigGCGExecEffectDestroyCard");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 562: range 000000000F1F0682-000000000F1F11AB
int32_t __cdecl ConfigGCGExecEffectDestroyCardValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectDestroyCard *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::GCGEffectCreatePositionType *p_position; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  common::milog::MiLogStream *v11; // rcx
  data::GCGEffectCreatePositionType position; // edi
  char v13; // al
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rax
  __int64 v16; // rsi
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const char *v20; // rsi
  common::milog::MiLogStream *v21; // rcx
  data::GCGEffectCampType camp_type; // edi
  char v23; // al
  int v24; // r14d
  int32_t result; // eax
  std::initializer_list<data::GCGEffectCreatePositionType> __la; // [rsp+10h] [rbp-280h]
  int __l; // [rsp+10h] [rbp-280h]
  int32_t v28; // [rsp+24h] [rbp-26Ch]
  char v30[592]; // [rsp+40h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 8 9 <unknown> 192 12 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown> 352 56 23 valid_enum_type_set:565 448 56 23 valid_enum_type_set:568";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectDestroyCardValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = -218959360;
  v5[536862726] = -219020288;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -234881024;
  v5[536862733] = -218959118;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 160, config_skill);
  *(_DWORD *)(v3 + 160) = 0;
  if ( *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 92) & 7) + 3) >= *(_BYTE *)(((v3 + 164) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 164, (((_BYTE)v3 - 92) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 164) = 1;
  __la._M_array = (std::initializer_list<data::GCGEffectCreatePositionType>::iterator)(v3 + 160);
  __la._M_len = 2LL;
  std::allocator<data::GCGEffectCreatePositionType>::allocator((std::allocator<data::GCGEffectCreatePositionType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectCreatePositionType>::unordered_set(
    (std::unordered_set<data::GCGEffectCreatePositionType> *const)(v3 + 352),
    __la,
    0LL,
    (const std::unordered_set<data::GCGEffectCreatePositionType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectCreatePositionType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCreatePositionType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectCreatePositionType>::~allocator((std::allocator<data::GCGEffectCreatePositionType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  p_position = &config_effect->position;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCreatePositionType>,data::GCGEffectCreatePositionType>(
          (std::unordered_set<data::GCGEffectCreatePositionType> *)(v3 + 352),
          &config_effect->position) )
  {
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDestroyCardValidatorFunc",
      565);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v7, (const char (*)[31])byte_1A5047A0);
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           v8,
           (const char (*)[23])"config_effect.position");
    v10 = " value:";
    v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->position >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->position >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->position);
    }
    position = config_effect->position;
    v13 = *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      position = v3 + 128;
      LOBYTE(v10) = v13 != 0;
      __asan_report_store4(v3 + 128, v10);
    }
    *(_DWORD *)(v3 + 128) = position;
    p_position = (data::GCGEffectCreatePositionType *)(v3 + 128);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
    *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -117901064;
    v28 = -1;
    __l = 0;
  }
  else
  {
    __l = 1;
  }
  std::unordered_set<data::GCGEffectCreatePositionType>::~unordered_set((std::unordered_set<data::GCGEffectCreatePositionType> *const)(v3 + 352));
  v14 = ((v3 + 352) >> 3) + 2147450880;
  *(_DWORD *)v14 = -117901064;
  *(_WORD *)(v14 + 4) = -1800;
  *(_BYTE *)(v14 + 6) = -8;
  if ( __l == 1 )
  {
    v15 = ((v3 + 448) >> 3) + 2147450880;
    *(_DWORD *)v15 = 0;
    *(_WORD *)(v15 + 4) = 0;
    *(_BYTE *)(v15 + 6) = 0;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 1024;
    if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 192, p_position);
    *(_DWORD *)(v3 + 192) = 0;
    v16 = (((_BYTE)v3 - 64 + 4) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 64 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 196, v16);
    }
    *(_DWORD *)(v3 + 196) = 1;
    if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 200, v16);
    *(_DWORD *)(v3 + 200) = 2;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    std::unordered_set<data::GCGEffectCampType>::unordered_set(
      (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448),
      (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 192),
      0LL,
      (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 80),
      (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 112));
    std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -1800;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
            (std::unordered_set<data::GCGEffectCampType> *)(v3 + 448),
            &config_effect->camp_type) )
    {
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDestroyCardValidatorFunc",
        568);
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 288),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v18 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v17, (const char (*)[31])byte_1A5047A0);
      v19 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v18,
              (const char (*)[24])"config_effect.camp_type");
      v20 = " value:";
      v21 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v19, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->camp_type);
      }
      camp_type = config_effect->camp_type;
      v23 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
      if ( v23 != 0 && v23 <= 3 )
      {
        camp_type = v3 + 144;
        LOBYTE(v20) = v23 != 0;
        __asan_report_store4(v3 + 144, v20);
      }
      *(_DWORD *)(v3 + 144) = camp_type;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 144));
      *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
      v28 = -1;
      v24 = 0;
    }
    else
    {
      v24 = 1;
    }
    std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 448));
    if ( v24 == 1 )
      v28 = 0;
  }
  result = v28;
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 576: range 000000000F1F11AC-000000000F1F1BA0
int32_t __cdecl ConfigGCGExecEffectDestroyModifyCardValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectDestroyModifyCard,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:576 64 8 13 __for_end:576 96 16 26 cast_config_effect_ptr:576 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectDestroyModifyCardValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectDestroyModifyCard,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectDestroyModifyCard>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectDestroyModifyCard> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDestroyModifyCardValidator",
        576);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        v12,
        (const char (*)[37])"ConfigGCGExecEffectDestroyModifyCard");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectDestroyModifyCardValidator",
            576);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDestroyModifyCardValidator",
              576);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDestroyModifyCardValidator",
          576);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectDestroyModifyCard,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectDestroyModifyCard,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectDestroyModifyCardValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectDestroyModifyCard>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectDestroyModifyCard> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectDestroyModifyCardValidator",
    576);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
    v9,
    (const char (*)[37])"ConfigGCGExecEffectDestroyModifyCard");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 577: range 000000000F1F1BA1-000000000F1F2E69
int32_t __cdecl ConfigGCGExecEffectDestroyModifyCardValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectDestroyModifyCard *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGCardType card_type; // edi
  char v17; // al
  __int64 v18; // rsi
  __int64 v19; // rsi
  __int64 v20; // rsi
  __int64 v21; // rsi
  unsigned __int64 v22; // rax
  data::GCGChooseTargetCharaterType *p_choose_charater_type; // rsi
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  const char *v27; // rsi
  common::milog::MiLogStream *v28; // rcx
  data::GCGChooseTargetCharaterType choose_charater_type; // edi
  char v30; // al
  unsigned __int64 v31; // rax
  unsigned __int64 v32; // rax
  __int64 v33; // rsi
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  const char *v37; // rsi
  common::milog::MiLogStream *v38; // rcx
  data::GCGEffectCampType camp_type; // edi
  char v40; // al
  int v41; // r14d
  std::initializer_list<data::GCGChooseTargetCharaterType> __la; // [rsp+10h] [rbp-390h]
  int __l; // [rsp+10h] [rbp-390h]
  int32_t v45; // [rsp+24h] [rbp-37Ch]
  const GCGGameExcelConfigMgr *gcg_game_config_mgr; // [rsp+40h] [rbp-360h]
  const data::GCGCardConfig *target_card_config_ptr; // [rsp+48h] [rbp-358h]
  char v49[848]; // [rsp+50h] [rbp-350h] BYREF

  v3 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(800LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "18 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 12 9 <unknown> 208 32 9 <unk"
                        "nown> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 36 9 <unkn"
                        "own> 608 56 23 valid_enum_type_set:597 704 56 23 valid_enum_type_set:607";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectDestroyModifyCardValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = 61956;
  v5[536862725] = 0x4000000;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862737] = -234618880;
  v5[536862738] = -218959118;
  v5[536862740] = -234881024;
  v5[536862741] = -218959118;
  v5[536862743] = -218103808;
  v5[536862744] = -202116109;
  if ( std::operator==<GCGConfigMgr>(0LL, &config->gcg_config_mgr_ptr) )
  {
    if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDestroyModifyCardValidatorFunc",
      580);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 208),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v6, (const char (*)[47])byte_1A508F60);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &config_effect->card_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
    v45 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config->gcg_config_mgr_ptr);
    gcg_game_config_mgr = GCGConfigMgr::getGCGGameExcelConfigMgr(v8);
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->card_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->card_id >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->card_id);
    }
    target_card_config_ptr = GCGGameExcelConfigMgr::findCardConfig(gcg_game_config_mgr, config_effect->card_id);
    if ( target_card_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)target_card_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3)
                                                                              + 0x7FFF8000) )
      {
        __asan_report_load4(&target_card_config_ptr->card_type);
      }
      if ( target_card_config_ptr->card_type == GCG_CARD_STATE || target_card_config_ptr->card_type == GCG_CARD_MODIFY )
      {
        if ( *(_BYTE *)(((v3 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 528) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 528, (((_BYTE)target_card_config_ptr + 12) & 7u) + 3);
        *(_DWORD *)(v3 + 528) = 0;
        v18 = (((_BYTE)v3 + 20) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 532) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 20) & 7) + 3) >= *(_BYTE *)(((v3 + 532) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 532, v18);
        }
        *(_DWORD *)(v3 + 532) = 1;
        if ( *(_BYTE *)(((v3 + 536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 536) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 536, v18);
        *(_DWORD *)(v3 + 536) = 2;
        v19 = (((_BYTE)v3 + 28) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 540) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 28) & 7) + 3) >= *(_BYTE *)(((v3 + 540) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 540, v19);
        }
        *(_DWORD *)(v3 + 540) = 3;
        if ( *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 544) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 544, v19);
        *(_DWORD *)(v3 + 544) = 9;
        v20 = (((_BYTE)v3 + 36) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 548) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 36) & 7) + 3) >= *(_BYTE *)(((v3 + 548) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 548, v20);
        }
        *(_DWORD *)(v3 + 548) = 10;
        if ( *(_BYTE *)(((v3 + 552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 552) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 552, v20);
        *(_DWORD *)(v3 + 552) = 15;
        v21 = (((_BYTE)v3 + 44) & 7u) + 3;
        if ( *(_BYTE *)(((v3 + 556) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 + 44) & 7) + 3) >= *(_BYTE *)(((v3 + 556) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 556, v21);
        }
        *(_DWORD *)(v3 + 556) = 14;
        if ( *(_BYTE *)(((v3 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 560) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v3 + 560, v21);
        *(_DWORD *)(v3 + 560) = 16;
        __la._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v3 + 528);
        __la._M_len = 9LL;
        std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v3 + 64));
        std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
          (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v3 + 608),
          __la,
          0LL,
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v3 + 32),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v3 + 48),
          (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v3 + 64));
        std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v3 + 64));
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
        v22 = ((v3 + 528) >> 3) + 2147450880;
        *(_DWORD *)v22 = -117901064;
        *(_BYTE *)(v22 + 4) = -8;
        p_choose_charater_type = &config_effect->choose_charater_type;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
                (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v3 + 608),
                &config_effect->choose_charater_type) )
        {
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 81) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectDestroyModifyCardValidatorFunc",
            597);
          v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 400),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v25 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v24, (const char (*)[31])byte_1A5047A0);
          v26 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  v25,
                  (const char (*)[35])"config_effect.choose_charater_type");
          v27 = " value:";
          v28 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v26, (const char (*)[8])" value:");
          *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&config_effect->choose_charater_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->choose_charater_type >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(&config_effect->choose_charater_type);
          }
          choose_charater_type = config_effect->choose_charater_type;
          v30 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
          if ( v30 != 0 && v30 <= 3 )
          {
            choose_charater_type = v3 + 144;
            LOBYTE(v27) = v30 != 0;
            __asan_report_store4(v3 + 144, v27);
          }
          *(_DWORD *)(v3 + 144) = choose_charater_type;
          p_choose_charater_type = (data::GCGChooseTargetCharaterType *)(v3 + 144);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v3 + 144));
          *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
          v45 = -1;
          __l = 0;
        }
        else
        {
          __l = 1;
        }
        std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v3 + 608));
        v31 = ((v3 + 608) >> 3) + 2147450880;
        *(_DWORD *)v31 = -117901064;
        *(_WORD *)(v31 + 4) = -1800;
        *(_BYTE *)(v31 + 6) = -8;
        if ( __l == 1 )
        {
          v32 = ((v3 + 704) >> 3) + 2147450880;
          *(_DWORD *)v32 = 0;
          *(_WORD *)(v32 + 4) = 0;
          *(_BYTE *)(v32 + 6) = 0;
          *(_WORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = 1024;
          if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 176, p_choose_charater_type);
          *(_DWORD *)(v3 + 176) = 0;
          v33 = (((_BYTE)v3 - 80 + 4) & 7u) + 3;
          if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 80 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v3 + 180, v33);
          }
          *(_DWORD *)(v3 + 180) = 1;
          if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v3 + 184, v33);
          *(_DWORD *)(v3 + 184) = 2;
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
          std::unordered_set<data::GCGEffectCampType>::unordered_set(
            (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 704),
            (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 176),
            0LL,
            (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 80),
            (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 96),
            (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 112));
          std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 112));
          *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = -1800;
          if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                  (std::unordered_set<data::GCGEffectCampType> *)(v3 + 704),
                  &config_effect->camp_type) )
          {
            *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 464) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 464, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 464),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDestroyModifyCardValidatorFunc",
              607);
            v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 464),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v35 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    v34,
                    (const char (*)[31])byte_1A5047A0);
            v36 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v35,
                    (const char (*)[24])"config_effect.camp_type");
            v37 = " value:";
            v38 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v36, (const char (*)[8])" value:");
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&config_effect->camp_type);
            }
            camp_type = config_effect->camp_type;
            v40 = *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000);
            if ( v40 != 0 && v40 <= 3 )
            {
              camp_type = v3 + 160;
              LOBYTE(v37) = v40 != 0;
              __asan_report_store4(v3 + 160, v37);
            }
            *(_DWORD *)(v3 + 160) = camp_type;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v38,
              (const unsigned int *)(v3 + 160));
            *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 464));
            *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = -117901064;
            v45 = -1;
            v41 = 0;
          }
          else
          {
            v41 = 1;
          }
          std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 704));
          if ( v41 == 1 )
            v45 = 0;
        }
      }
      else
      {
        if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDestroyModifyCardValidatorFunc",
          592);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 336),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])"card_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &config_effect->card_id);
        v14 = " card type is not valid, card type:";
        v15 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                v13,
                (const char (*)[36])" card type is not valid, card type:");
        if ( *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)target_card_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&target_card_config_ptr->card_type >> 3)
                                                                                + 0x7FFF8000) )
        {
          __asan_report_load4(&target_card_config_ptr->card_type);
        }
        card_type = target_card_config_ptr->card_type;
        v17 = *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000);
        if ( v17 != 0 && v17 <= 3 )
        {
          card_type = v3 + 128;
          LOBYTE(v14) = v17 != 0;
          __asan_report_store4(v3 + 128, v14);
        }
        *(_DWORD *)(v3 + 128) = card_type;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 128));
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
        v45 = -1;
      }
    }
    else
    {
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDestroyModifyCardValidatorFunc",
        587);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v3 + 272),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v10 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              v9,
              (const char (*)[43])"target_card_config_ptr not found, card_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &config_effect->card_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
      v45 = -1;
    }
  }
  if ( v49 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF805C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = -168430091;
  }
  return v45;
};

// Line 615: range 000000000F1F2E6A-000000000F1F385E
int32_t __cdecl ConfigGCGExecEffectChangeCardVarValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectChangeCardVar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:615 64 8 13 __for_end:615 96 16 26 cast_config_effect_ptr:615 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectChangeCardVarValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectChangeCardVar,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectChangeCardVar>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectChangeCardVar> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeCardVarValidator",
        615);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        v12,
        (const char (*)[33])"ConfigGCGExecEffectChangeCardVar");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectChangeCardVarValidator",
            615);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChangeCardVarValidator",
              615);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChangeCardVarValidator",
          615);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectChangeCardVar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectChangeCardVar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectChangeCardVarValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectChangeCardVar>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectChangeCardVar> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectChangeCardVarValidator",
    615);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
    v9,
    (const char (*)[33])"ConfigGCGExecEffectChangeCardVar");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 616: range 000000000F1F385F-000000000F1F6A78
int32_t __cdecl ConfigGCGExecEffectChangeCardVarValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectChangeCardVar *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::DeclaredValueMap *p_declared_value_map; // rcx
  data::DeclaredValueMap *v6; // rcx
  bool v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned __int64 p_value; // rsi
  int v11; // ebx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rcx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // ebx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int v26; // ebx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // ebx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  int v32; // ebx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  int v35; // ebx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int v38; // ebx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rbx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v41; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rcx
  __int64 type; // rsi
  unsigned __int64 v44; // rax
  unsigned __int64 v45; // rax
  char v46; // dl
  char v47; // dl
  data::GCGEffectTargetChooseType *p_choose_type; // rsi
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rdi
  __int64 choose_type; // rsi
  int v54; // ebx
  unsigned __int64 v55; // rax
  unsigned __int64 v56; // rax
  char v57; // cl
  char v58; // cl
  data::GCGTokenType *p_token_type; // rsi
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  const char *v63; // rsi
  common::milog::MiLogStream *v64; // rcx
  data::GCGTokenType token_type; // edi
  char v66; // al
  int v67; // ebx
  unsigned __int64 v68; // rax
  unsigned __int64 v69; // rax
  __int64 v70; // rsi
  data::GCGValueOperatorType *p_operator_type; // rsi
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  const char *v75; // rsi
  common::milog::MiLogStream *v76; // rcx
  data::GCGValueOperatorType operator_type; // edi
  char v78; // al
  int v79; // ebx
  unsigned __int64 v80; // rax
  unsigned __int64 v81; // rax
  __int64 v82; // rsi
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // rax
  const char *v86; // rsi
  common::milog::MiLogStream *v87; // rcx
  data::GCGEffectCampType camp_type; // edi
  char v89; // al
  int v90; // ebx
  std::initializer_list<data::GCGEffectTargetChooseType> __l; // [rsp+0h] [rbp-910h]
  std::initializer_list<data::GCGTokenType> v93; // [rsp+10h] [rbp-900h]
  std::initializer_list<data::GCGValueOperatorType> v94; // [rsp+20h] [rbp-8F0h]
  std::initializer_list<data::GCGEffectCampType> v95; // [rsp+30h] [rbp-8E0h]
  unsigned __int64 v96; // [rsp+48h] [rbp-8C8h]
  int32_t v97; // [rsp+54h] [rbp-8BCh]
  char v99[2192]; // [rsp+80h] [rbp-890h] BYREF

  v96 = (unsigned __int64)v99;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2144LL);
    if ( v3 )
      v96 = v3;
  }
  *(_QWORD *)v96 = 1102416563LL;
  *(_QWORD *)(v96 + 8) = "52 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 "
                         "9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <un"
                         "known> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 4 9 <unknown"
                         "> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384"
                         " 8 8 iter:618 416 8 9 <unknown> 448 12 9 <unknown> 480 12 9 <unknown> 512 16 22 declared_value_"
                         "ptr:618 544 16 22 declared_value_ptr:618 576 16 22 declared_value_ptr:618 608 16 22 declared_va"
                         "lue_ptr:618 640 16 22 declared_value_ptr:618 672 16 22 declared_value_ptr:618 704 16 9 <unknown"
                         "> 736 16 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown"
                         "> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <un"
                         "known> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 "
                         "9 <unknown> 1664 56 28 valid_declared_value_set:618 1760 56 23 valid_enum_type_set:620 1856 56 "
                         "23 valid_enum_type_set:625 1952 56 23 valid_enum_type_set:630 2048 56 23 valid_enum_type_set:634";
  *(_QWORD *)(v96 + 16) = ConfigGCGExecEffectChangeCardVarValidatorFunc;
  v4 = (_DWORD *)(v96 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862734] = -219020288;
  v4[536862735] = -219020288;
  v4[536862736] = -219021312;
  v4[536862737] = -219021312;
  v4[536862738] = -219021312;
  v4[536862739] = -219021312;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862742] = -219021312;
  v4[536862743] = -219021312;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -234881024;
  v4[536862774] = -218959118;
  v4[536862776] = -234881024;
  v4[536862777] = -218959118;
  v4[536862779] = -234881024;
  v4[536862780] = -218959118;
  v4[536862782] = -234881024;
  v4[536862783] = -218959118;
  v4[536862785] = -218103808;
  v4[536862786] = -202116109;
  if ( *(_BYTE *)(((v96 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 288) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v96 + 288, config_skill);
  *(_DWORD *)(v96 + 288) = 4;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v96 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v96 + 1664),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v96 + 288),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v96 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v96 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v96 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v96 + 80));
  *(_BYTE *)(((v96 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v96 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v96 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v96 + 288) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v96 + 384) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v96 + 384) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v96 + 384, v96 + 288);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v96 + 384) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v96 + 416) >> 3) + 0x7FFF8000) = 0;
  v6 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v96 + 416) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v96 + 416, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v96 + 416) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v6);
  v7 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v96 + 384),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v96 + 416));
  *(_BYTE *)(((v96 + 416) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    *(_DWORD *)(((v96 + 768) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v96 + 768) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v96 + 799) >> 3) + 0x7FFF8000) != 0
      && (char)((v96 + 31) & 7) >= *(_BYTE *)(((v96 + 799) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v96 + 768, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v96 + 768),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectChangeCardVarValidatorFunc",
      618);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v96 + 768),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v8, (const char (*)[29])byte_1A5045A0);
    p_value = (unsigned __int64)"declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v9, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 768));
    *(_DWORD *)(((v96 + 768) >> 3) + 0x7FFF8000) = -117901064;
    v97 = -1;
    v11 = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v96 + 832) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v96 + 832) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v96 + 863) >> 3) + 0x7FFF8000) != 0
        && (char)((v96 + 95) & 7) >= *(_BYTE *)(((v96 + 863) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v96 + 832, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v96 + 832),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeCardVarValidatorFunc",
        618);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v96 + 832),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      p_value = (unsigned __int64)"declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 832));
      *(_DWORD *)(((v96 + 832) >> 3) + 0x7FFF8000) = -117901064;
      v97 = -1;
      v11 = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v96 + 1664),
              &v16->type) )
      {
        *(_DWORD *)(((v96 + 896) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v96 + 896) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v96 + 927) >> 3) + 0x7FFF8000) != 0
          && (char)((v96 - 97) & 7) >= *(_BYTE *)(((v96 + 927) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v96 + 896, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v96 + 896),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChangeCardVarValidatorFunc",
          618);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v96 + 896),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        p_value = (unsigned __int64)"declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 896));
        *(_DWORD *)(((v96 + 896) >> 3) + 0x7FFF8000) = -117901064;
        v97 = -1;
        v11 = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v96 + 512) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
            if ( *(_WORD *)(((v96 + 512) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v96 + 512));
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v96 + 512)) )
            {
              *(_DWORD *)(((v96 + 960) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v96 + 960) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v96 + 991) >> 3) + 0x7FFF8000) != 0
                && (char)((v96 - 33) & 7) >= *(_BYTE *)(((v96 + 991) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v96 + 960, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v96 + 960),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardVarValidatorFunc",
                618);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v96 + 960),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 960));
              *(_DWORD *)(((v96 + 960) >> 3) + 0x7FFF8000) = -117901064;
              v97 = -1;
              v23 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v96 + 512))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v23 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v96 + 512));
            *(_WORD *)(((v96 + 512) >> 3) + 0x7FFF8000) = -1800;
            if ( v23 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Element:
            *(_WORD *)(((v96 + 544) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
            if ( *(_WORD *)(((v96 + 544) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v96 + 544));
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v96 + 544)) )
            {
              *(_DWORD *)(((v96 + 1024) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v96 + 1024) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v96 + 1055) >> 3) + 0x7FFF8000) != 0
                && (char)((v96 + 31) & 7) >= *(_BYTE *)(((v96 + 1055) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v96 + 1024, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v96 + 1024),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardVarValidatorFunc",
                618);
              v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v96 + 1024),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v24,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v25,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1024));
              *(_DWORD *)(((v96 + 1024) >> 3) + 0x7FFF8000) = -117901064;
              v97 = -1;
              v26 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v96 + 544))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v26 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v96 + 544));
            *(_WORD *)(((v96 + 544) >> 3) + 0x7FFF8000) = -1800;
            if ( v26 )
              goto LABEL_98;
            v11 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v96 + 576) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
            if ( *(_WORD *)(((v96 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v96 + 576));
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v96 + 576)) )
            {
              *(_DWORD *)(((v96 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v96 + 1088) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v96 + 1119) >> 3) + 0x7FFF8000) != 0
                && (char)((v96 + 95) & 7) >= *(_BYTE *)(((v96 + 1119) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v96 + 1088, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v96 + 1088),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardVarValidatorFunc",
                618);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v96 + 1088),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v27,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v28,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1088));
              *(_DWORD *)(((v96 + 1088) >> 3) + 0x7FFF8000) = -117901064;
              v97 = -1;
              v29 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v96 + 576))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v29 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v96 + 576));
            *(_WORD *)(((v96 + 576) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              goto LABEL_98;
            v11 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v96 + 640) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
            if ( *(_WORD *)(((v96 + 640) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v96 + 640));
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v96 + 640)) )
            {
              *(_DWORD *)(((v96 + 1216) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v96 + 1216) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v96 + 1247) >> 3) + 0x7FFF8000) != 0
                && (char)((v96 - 33) & 7) >= *(_BYTE *)(((v96 + 1247) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v96 + 1216, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v96 + 1216),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardVarValidatorFunc",
                618);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v96 + 1216),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1216));
              *(_DWORD *)(((v96 + 1216) >> 3) + 0x7FFF8000) = -117901064;
              v97 = -1;
              v35 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v96 + 640))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v35 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v96 + 640));
            *(_WORD *)(((v96 + 640) >> 3) + 0x7FFF8000) = -1800;
            if ( v35 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Heal:
            *(_WORD *)(((v96 + 608) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
            if ( *(_WORD *)(((v96 + 608) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v96 + 608));
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v96 + 608)) )
            {
              *(_DWORD *)(((v96 + 1152) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v96 + 1152) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v96 + 1183) >> 3) + 0x7FFF8000) != 0
                && (char)((v96 - 97) & 7) >= *(_BYTE *)(((v96 + 1183) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v96 + 1152, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v96 + 1152),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardVarValidatorFunc",
                618);
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v96 + 1152),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v30,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v31,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1152));
              *(_DWORD *)(((v96 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              v97 = -1;
              v32 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v96 + 608))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v32 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v96 + 608));
            *(_WORD *)(((v96 + 608) >> 3) + 0x7FFF8000) = -1800;
            if ( v32 )
              goto LABEL_98;
            v11 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v96 + 672) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
            if ( *(_WORD *)(((v96 + 672) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v96 + 672));
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v96 + 672)) )
            {
              *(_DWORD *)(((v96 + 1280) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v96 + 1280) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v96 + 1311) >> 3) + 0x7FFF8000) != 0
                && (char)((v96 + 31) & 7) >= *(_BYTE *)(((v96 + 1311) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v96 + 1280, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v96 + 1280),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardVarValidatorFunc",
                618);
              v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v96 + 1280),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v36,
                      (const char (*)[16])"cast fail, key:");
              p_value = (unsigned __int64)"declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v37,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1280));
              *(_DWORD *)(((v96 + 1280) >> 3) + 0x7FFF8000) = -117901064;
              v97 = -1;
              v38 = 0;
            }
            else
            {
              p_value = (unsigned __int64)&std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v96 + 672))->value;
              if ( *(_BYTE *)((p_value >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((p_value >> 3) + 0x7FFF8000) <= 3 )
                __asan_report_load4(p_value);
              v38 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v96 + 672));
            *(_WORD *)(((v96 + 672) >> 3) + 0x7FFF8000) = -1800;
            if ( v38 )
LABEL_98:
              v11 = 1;
            else
              v11 = 0;
            break;
          default:
            *(_DWORD *)(((v96 + 1344) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v96 + 1344) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v96 + 1375) >> 3) + 0x7FFF8000) != 0
              && (char)((v96 + 95) & 7) >= *(_BYTE *)(((v96 + 1375) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v96 + 1344, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v96 + 1344),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChangeCardVarValidatorFunc",
              618);
            v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v96 + 1344),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v40 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v39,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v96 + 304) >> 3) + 0x7FFF8000) = 4;
            v41 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v96 + 384));
            v42 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41->second);
            if ( *(_BYTE *)(((unsigned __int64)&v42->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v42->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v42->type);
            }
            type = (unsigned int)v42->type;
            if ( *(_BYTE *)(((v96 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 304) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v96 + 304, type);
            *(_DWORD *)(v96 + 304) = type;
            p_value = v96 + 304;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v40,
              (const unsigned int *)(v96 + 304));
            *(_BYTE *)(((v96 + 304) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1344));
            *(_DWORD *)(((v96 + 1344) >> 3) + 0x7FFF8000) = -117901064;
            v97 = -1;
            v11 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v96 + 1664));
  v44 = ((v96 + 1664) >> 3) + 2147450880;
  *(_DWORD *)v44 = -117901064;
  *(_WORD *)(v44 + 4) = -1800;
  *(_BYTE *)(v44 + 6) = -8;
  *(_BYTE *)(((v96 + 384) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
  {
    v45 = ((v96 + 1760) >> 3) + 2147450880;
    *(_DWORD *)v45 = 0;
    *(_WORD *)(v45 + 4) = 0;
    *(_BYTE *)(v45 + 6) = 0;
    *(_WORD *)(((v96 + 704) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v96 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v96 + 704, p_value);
    *(_DWORD *)(v96 + 704) = 0;
    v46 = *(_BYTE *)(((v96 + 708) >> 3) + 0x7FFF8000);
    LOBYTE(p_value) = v46 != 0;
    if ( v46 != 0 && (char)(((v96 - 60) & 7) + 3) >= v46 )
      __asan_report_store4(v96 + 708, p_value);
    *(_DWORD *)(v96 + 708) = 1;
    if ( *(_BYTE *)(((v96 + 712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v96 + 712, p_value);
    *(_DWORD *)(v96 + 712) = 2;
    v47 = *(_BYTE *)(((v96 + 716) >> 3) + 0x7FFF8000);
    if ( v47 != 0 && (char)(((v96 - 52) & 7) + 3) >= v47 )
    {
      LOBYTE(p_value) = v47 != 0;
      __asan_report_store4(v96 + 716, p_value);
    }
    *(_DWORD *)(v96 + 716) = 3;
    __l._M_array = (std::initializer_list<data::GCGEffectTargetChooseType>::iterator)(v96 + 704);
    __l._M_len = 4LL;
    *(_BYTE *)(((v96 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v96 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v96 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectTargetChooseType>::allocator((std::allocator<data::GCGEffectTargetChooseType> *const)(v96 + 128));
    std::unordered_set<data::GCGEffectTargetChooseType>::unordered_set(
      (std::unordered_set<data::GCGEffectTargetChooseType> *const)(v96 + 1760),
      __l,
      0LL,
      (const std::unordered_set<data::GCGEffectTargetChooseType>::hasher *)(v96 + 96),
      (const std::unordered_set<data::GCGEffectTargetChooseType>::key_equal *)(v96 + 112),
      (const std::unordered_set<data::GCGEffectTargetChooseType>::allocator_type *)(v96 + 128));
    std::allocator<data::GCGEffectTargetChooseType>::~allocator((std::allocator<data::GCGEffectTargetChooseType> *const)(v96 + 128));
    *(_BYTE *)(((v96 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v96 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v96 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v96 + 704) >> 3) + 0x7FFF8000) = -1800;
    p_choose_type = &config_effect->choose_type;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectTargetChooseType>,data::GCGEffectTargetChooseType>(
            (std::unordered_set<data::GCGEffectTargetChooseType> *)(v96 + 1760),
            &config_effect->choose_type) )
    {
      *(_DWORD *)(((v96 + 1408) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v96 + 1408) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v96 + 1439) >> 3) + 0x7FFF8000) != 0
        && (char)((v96 - 97) & 7) >= *(_BYTE *)(((v96 + 1439) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v96 + 1408, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v96 + 1408),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeCardVarValidatorFunc",
        620);
      v49 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v96 + 1408),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v50 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v49, (const char (*)[31])byte_1A5047A0);
      v51 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v50,
              (const char (*)[26])"config_effect.choose_type");
      v52 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v51, (const char (*)[8])" value:");
      *(_BYTE *)(((v96 + 320) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->choose_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->choose_type >> 3)
                                                                     + 0x7FFF8000) )
      {
        v52 = (common::milog::MiLogStream *)&config_effect->choose_type;
        __asan_report_load4(&config_effect->choose_type);
      }
      choose_type = (unsigned int)config_effect->choose_type;
      if ( *(_BYTE *)(((v96 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 320) >> 3) + 0x7FFF8000) <= 3 )
      {
        v52 = (common::milog::MiLogStream *)(v96 + 320);
        __asan_report_store4(v96 + 320, choose_type);
      }
      *(_DWORD *)(v96 + 320) = choose_type;
      p_choose_type = (data::GCGEffectTargetChooseType *)(v96 + 320);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v52, (const unsigned int *)(v96 + 320));
      *(_BYTE *)(((v96 + 320) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1408));
      *(_DWORD *)(((v96 + 1408) >> 3) + 0x7FFF8000) = -117901064;
      v97 = -1;
      v54 = 0;
    }
    else
    {
      v54 = 1;
    }
    std::unordered_set<data::GCGEffectTargetChooseType>::~unordered_set((std::unordered_set<data::GCGEffectTargetChooseType> *const)(v96 + 1760));
    v55 = ((v96 + 1760) >> 3) + 2147450880;
    *(_DWORD *)v55 = -117901064;
    *(_WORD *)(v55 + 4) = -1800;
    *(_BYTE *)(v55 + 6) = -8;
    if ( v54 == 1 )
    {
      v56 = ((v96 + 1856) >> 3) + 2147450880;
      *(_DWORD *)v56 = 0;
      *(_WORD *)(v56 + 4) = 0;
      *(_BYTE *)(v56 + 6) = 0;
      *(_WORD *)(((v96 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v96 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v96 + 736, p_choose_type);
      *(_DWORD *)(v96 + 736) = 8;
      v57 = *(_BYTE *)(((v96 + 740) >> 3) + 0x7FFF8000);
      LOBYTE(p_choose_type) = v57 != 0;
      if ( v57 != 0 && (char)(((v96 - 28) & 7) + 3) >= v57 )
        __asan_report_store4(v96 + 740, p_choose_type);
      *(_DWORD *)(v96 + 740) = 7;
      if ( *(_BYTE *)(((v96 + 744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 744) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v96 + 744, p_choose_type);
      *(_DWORD *)(v96 + 744) = 6;
      v58 = *(_BYTE *)(((v96 + 748) >> 3) + 0x7FFF8000);
      if ( v58 != 0 && (char)(((v96 - 20) & 7) + 3) >= v58 )
      {
        LOBYTE(p_choose_type) = v58 != 0;
        __asan_report_store4(v96 + 748, p_choose_type);
      }
      *(_DWORD *)(v96 + 748) = 16;
      v93._M_array = (std::initializer_list<data::GCGTokenType>::iterator)(v96 + 736);
      v93._M_len = 4LL;
      *(_BYTE *)(((v96 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v96 + 160) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v96 + 176) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGTokenType>::allocator((std::allocator<data::GCGTokenType> *const)(v96 + 176));
      std::unordered_set<data::GCGTokenType>::unordered_set(
        (std::unordered_set<data::GCGTokenType> *const)(v96 + 1856),
        v93,
        0LL,
        (const std::unordered_set<data::GCGTokenType>::hasher *)(v96 + 144),
        (const std::unordered_set<data::GCGTokenType>::key_equal *)(v96 + 160),
        (const std::unordered_set<data::GCGTokenType>::allocator_type *)(v96 + 176));
      std::allocator<data::GCGTokenType>::~allocator((std::allocator<data::GCGTokenType> *const)(v96 + 176));
      *(_BYTE *)(((v96 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v96 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v96 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v96 + 736) >> 3) + 0x7FFF8000) = -1800;
      p_token_type = &config_effect->token_type;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGTokenType>,data::GCGTokenType>(
              (std::unordered_set<data::GCGTokenType> *)(v96 + 1856),
              &config_effect->token_type) )
      {
        *(_DWORD *)(((v96 + 1472) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v96 + 1472) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v96 + 1503) >> 3) + 0x7FFF8000) != 0
          && (char)((v96 - 33) & 7) >= *(_BYTE *)(((v96 + 1503) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v96 + 1472, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v96 + 1472),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChangeCardVarValidatorFunc",
          625);
        v60 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v96 + 1472),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v61 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v60, (const char (*)[31])byte_1A5047A0);
        v62 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v61,
                (const char (*)[25])"config_effect.token_type");
        v63 = " value:";
        v64 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v62, (const char (*)[8])" value:");
        *(_BYTE *)(((v96 + 336) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->token_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_effect + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->token_type >> 3)
                                                                       + 0x7FFF8000) )
        {
          __asan_report_load4(&config_effect->token_type);
        }
        token_type = config_effect->token_type;
        v66 = *(_BYTE *)(((v96 + 336) >> 3) + 0x7FFF8000);
        if ( v66 != 0 && v66 <= 3 )
        {
          token_type = v96 + 336;
          LOBYTE(v63) = v66 != 0;
          __asan_report_store4(v96 + 336, v63);
        }
        *(_DWORD *)(v96 + 336) = token_type;
        p_token_type = (data::GCGTokenType *)(v96 + 336);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v64, (const unsigned int *)(v96 + 336));
        *(_BYTE *)(((v96 + 336) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1472));
        *(_DWORD *)(((v96 + 1472) >> 3) + 0x7FFF8000) = -117901064;
        v97 = -1;
        v67 = 0;
      }
      else
      {
        v67 = 1;
      }
      std::unordered_set<data::GCGTokenType>::~unordered_set((std::unordered_set<data::GCGTokenType> *const)(v96 + 1856));
      v68 = ((v96 + 1856) >> 3) + 2147450880;
      *(_DWORD *)v68 = -117901064;
      *(_WORD *)(v68 + 4) = -1800;
      *(_BYTE *)(v68 + 6) = -8;
      if ( v67 == 1 )
      {
        v69 = ((v96 + 1952) >> 3) + 2147450880;
        *(_DWORD *)v69 = 0;
        *(_WORD *)(v69 + 4) = 0;
        *(_BYTE *)(v69 + 6) = 0;
        *(_WORD *)(((v96 + 448) >> 3) + 0x7FFF8000) = 1024;
        if ( *(_BYTE *)(((v96 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 448) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v96 + 448, p_token_type);
        *(_DWORD *)(v96 + 448) = 0;
        v70 = (((_BYTE)v96 - 60) & 7u) + 3;
        if ( *(_BYTE *)(((v96 + 452) >> 3) + 0x7FFF8000) != 0
          && (char)(((v96 - 60) & 7) + 3) >= *(_BYTE *)(((v96 + 452) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v96 + 452, v70);
        }
        *(_DWORD *)(v96 + 452) = 1;
        if ( *(_BYTE *)(((v96 + 456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 456) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v96 + 456, v70);
        *(_DWORD *)(v96 + 456) = 2;
        v94._M_array = (std::initializer_list<data::GCGValueOperatorType>::iterator)(v96 + 448);
        v94._M_len = 3LL;
        *(_BYTE *)(((v96 + 192) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v96 + 208) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v96 + 224) >> 3) + 0x7FFF8000) = 1;
        std::allocator<data::GCGValueOperatorType>::allocator((std::allocator<data::GCGValueOperatorType> *const)(v96 + 224));
        std::unordered_set<data::GCGValueOperatorType>::unordered_set(
          (std::unordered_set<data::GCGValueOperatorType> *const)(v96 + 1952),
          v94,
          0LL,
          (const std::unordered_set<data::GCGValueOperatorType>::hasher *)(v96 + 192),
          (const std::unordered_set<data::GCGValueOperatorType>::key_equal *)(v96 + 208),
          (const std::unordered_set<data::GCGValueOperatorType>::allocator_type *)(v96 + 224));
        std::allocator<data::GCGValueOperatorType>::~allocator((std::allocator<data::GCGValueOperatorType> *const)(v96 + 224));
        *(_BYTE *)(((v96 + 224) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v96 + 208) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v96 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_WORD *)(((v96 + 448) >> 3) + 0x7FFF8000) = -1800;
        p_operator_type = &config_effect->operator_type;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGValueOperatorType>,data::GCGValueOperatorType>(
                (std::unordered_set<data::GCGValueOperatorType> *)(v96 + 1952),
                &config_effect->operator_type) )
        {
          *(_DWORD *)(((v96 + 1536) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v96 + 1536) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v96 + 1567) >> 3) + 0x7FFF8000) != 0
            && (char)((v96 + 31) & 7) >= *(_BYTE *)(((v96 + 1567) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v96 + 1536, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v96 + 1536),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectChangeCardVarValidatorFunc",
            630);
          v72 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v96 + 1536),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v73 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v72, (const char (*)[31])byte_1A5047A0);
          v74 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  v73,
                  (const char (*)[28])"config_effect.operator_type");
          v75 = " value:";
          v76 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v74, (const char (*)[8])" value:");
          *(_BYTE *)(((v96 + 352) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&config_effect->operator_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_effect->operator_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config_effect->operator_type);
          }
          operator_type = config_effect->operator_type;
          v78 = *(_BYTE *)(((v96 + 352) >> 3) + 0x7FFF8000);
          if ( v78 != 0 && v78 <= 3 )
          {
            operator_type = v96 + 352;
            LOBYTE(v75) = v78 != 0;
            __asan_report_store4(v96 + 352, v75);
          }
          *(_DWORD *)(v96 + 352) = operator_type;
          p_operator_type = (data::GCGValueOperatorType *)(v96 + 352);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v76, (const unsigned int *)(v96 + 352));
          *(_BYTE *)(((v96 + 352) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1536));
          *(_DWORD *)(((v96 + 1536) >> 3) + 0x7FFF8000) = -117901064;
          v97 = -1;
          v79 = 0;
        }
        else
        {
          v79 = 1;
        }
        std::unordered_set<data::GCGValueOperatorType>::~unordered_set((std::unordered_set<data::GCGValueOperatorType> *const)(v96 + 1952));
        v80 = ((v96 + 1952) >> 3) + 2147450880;
        *(_DWORD *)v80 = -117901064;
        *(_WORD *)(v80 + 4) = -1800;
        *(_BYTE *)(v80 + 6) = -8;
        if ( v79 == 1 )
        {
          v81 = ((v96 + 2048) >> 3) + 2147450880;
          *(_DWORD *)v81 = 0;
          *(_WORD *)(v81 + 4) = 0;
          *(_BYTE *)(v81 + 6) = 0;
          *(_WORD *)(((v96 + 480) >> 3) + 0x7FFF8000) = 1024;
          if ( *(_BYTE *)(((v96 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 480) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v96 + 480, p_operator_type);
          *(_DWORD *)(v96 + 480) = 0;
          v82 = (((_BYTE)v96 - 28) & 7u) + 3;
          if ( *(_BYTE *)(((v96 + 484) >> 3) + 0x7FFF8000) != 0
            && (char)(((v96 - 28) & 7) + 3) >= *(_BYTE *)(((v96 + 484) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v96 + 484, v82);
          }
          *(_DWORD *)(v96 + 484) = 1;
          if ( *(_BYTE *)(((v96 + 488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v96 + 488) >> 3) + 0x7FFF8000) <= 3 )
            __asan_report_store4(v96 + 488, v82);
          *(_DWORD *)(v96 + 488) = 2;
          v95._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v96 + 480);
          v95._M_len = 3LL;
          *(_BYTE *)(((v96 + 240) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v96 + 256) >> 3) + 0x7FFF8000) = 1;
          *(_BYTE *)(((v96 + 272) >> 3) + 0x7FFF8000) = 1;
          std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v96 + 272));
          std::unordered_set<data::GCGEffectCampType>::unordered_set(
            (std::unordered_set<data::GCGEffectCampType> *const)(v96 + 2048),
            v95,
            0LL,
            (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v96 + 240),
            (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v96 + 256),
            (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v96 + 272));
          std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v96 + 272));
          *(_BYTE *)(((v96 + 272) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v96 + 256) >> 3) + 0x7FFF8000) = -8;
          *(_BYTE *)(((v96 + 240) >> 3) + 0x7FFF8000) = -8;
          *(_WORD *)(((v96 + 480) >> 3) + 0x7FFF8000) = -1800;
          if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                  (std::unordered_set<data::GCGEffectCampType> *)(v96 + 2048),
                  &config_effect->camp_type) )
          {
            *(_DWORD *)(((v96 + 1600) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v96 + 1600) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v96 + 1631) >> 3) + 0x7FFF8000) != 0
              && (char)((v96 + 95) & 7) >= *(_BYTE *)(((v96 + 1631) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v96 + 1600, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v96 + 1600),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChangeCardVarValidatorFunc",
              634);
            v83 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v96 + 1600),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v84 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    v83,
                    (const char (*)[31])byte_1A5047A0);
            v85 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v84,
                    (const char (*)[24])"config_effect.camp_type");
            v86 = " value:";
            v87 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v85, (const char (*)[8])" value:");
            *(_BYTE *)(((v96 + 368) >> 3) + 0x7FFF8000) = 4;
            if ( *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3)
                                                                           + 0x7FFF8000) )
            {
              __asan_report_load4(&config_effect->camp_type);
            }
            camp_type = config_effect->camp_type;
            v89 = *(_BYTE *)(((v96 + 368) >> 3) + 0x7FFF8000);
            if ( v89 != 0 && v89 <= 3 )
            {
              camp_type = v96 + 368;
              LOBYTE(v86) = v89 != 0;
              __asan_report_store4(v96 + 368, v86);
            }
            *(_DWORD *)(v96 + 368) = camp_type;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v87,
              (const unsigned int *)(v96 + 368));
            *(_BYTE *)(((v96 + 368) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v96 + 1600));
            *(_DWORD *)(((v96 + 1600) >> 3) + 0x7FFF8000) = -117901064;
            v97 = -1;
            v90 = 0;
          }
          else
          {
            v90 = 1;
          }
          std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v96 + 2048));
          if ( v90 == 1 )
            v97 = 0;
        }
      }
    }
  }
  if ( v99 == (char *)v96 )
  {
    *(_QWORD *)((v96 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v96 >> 3) + 0x7FFF80F8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 256) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v96 >> 3) + 0x7FFF8104) = 0LL;
  }
  else
  {
    *(_QWORD *)v96 = 1172321806LL;
    __asan_stack_free_6(v96, 2144LL, v99);
  }
  return v97;
};

// Line 642: range 000000000F1F6A79-000000000F1F746D
int32_t __cdecl ConfigGCGExecEffectChangeCardShowTokenVarValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectChangeCardShowTokenVar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:642 64 8 13 __for_end:642 96 16 26 cast_config_effect_ptr:642 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectChangeCardShowTokenVarValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectChangeCardShowTokenVar,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectChangeCardShowTokenVar>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectChangeCardShowTokenVar> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeCardShowTokenVarValidator",
        642);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
        v12,
        (const char (*)[42])"ConfigGCGExecEffectChangeCardShowTokenVar");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectChangeCardShowTokenVarValidator",
            642);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChangeCardShowTokenVarValidator",
              642);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChangeCardShowTokenVarValidator",
          642);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectChangeCardShowTokenVar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectChangeCardShowTokenVar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectChangeCardShowTokenVar>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectChangeCardShowTokenVar> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectChangeCardShowTokenVarValidator",
    642);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
    v9,
    (const char (*)[42])"ConfigGCGExecEffectChangeCardShowTokenVar");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 643: range 000000000F1F746E-000000000F1FA14C
int32_t __cdecl ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectChangeCardShowTokenVar *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v6; // rdx
  bool v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  int v11; // ebx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rdx
  char v25; // al
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int v28; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rdx
  char v30; // al
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  int v33; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rdx
  char v35; // al
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int v38; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rdx
  char v40; // al
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  int v43; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rdx
  char v45; // al
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  int v48; // ebx
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rdx
  char v50; // al
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rbx
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v53; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rdx
  __int64 type; // rsi
  unsigned __int64 v56; // rax
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rax
  char v59; // cl
  char v60; // cl
  unsigned __int64 v61; // rax
  data::GCGEffectTargetChooseType *p_choose_type; // rsi
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  const char *v66; // rsi
  common::milog::MiLogStream *v67; // rcx
  data::GCGEffectTargetChooseType choose_type; // edi
  char v69; // al
  int v70; // ebx
  unsigned __int64 v71; // rax
  unsigned __int64 v72; // rax
  __int64 v73; // rsi
  data::GCGValueOperatorType *p_operator_type; // rsi
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  const char *v78; // rsi
  common::milog::MiLogStream *v79; // rcx
  data::GCGValueOperatorType operator_type; // edi
  char v81; // al
  int v82; // ebx
  unsigned __int64 v83; // rax
  unsigned __int64 v84; // rax
  __int64 v85; // rsi
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // rax
  const char *v89; // rsi
  common::milog::MiLogStream *v90; // rcx
  data::GCGEffectCampType camp_type; // edi
  char v92; // al
  int v93; // ebx
  std::initializer_list<data::GCGEffectTargetChooseType> __l; // [rsp+0h] [rbp-820h]
  std::initializer_list<data::GCGValueOperatorType> v96; // [rsp+10h] [rbp-810h]
  std::initializer_list<data::GCGEffectCampType> v97; // [rsp+20h] [rbp-800h]
  unsigned __int64 v98; // [rsp+38h] [rbp-7E8h]
  int32_t v99; // [rsp+44h] [rbp-7DCh]
  char v101[1968]; // [rsp+70h] [rbp-7B0h] BYREF

  v98 = (unsigned __int64)v101;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1920LL);
    if ( v3 )
      v98 = v3;
  }
  *(_QWORD *)v98 = 1102416563LL;
  *(_QWORD *)(v98 + 8) = "45 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 "
                         "9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <un"
                         "known> 224 1 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown"
                         "> 304 4 9 <unknown> 320 8 8 iter:645 352 8 9 <unknown> 384 12 9 <unknown> 416 12 9 <unknown> 44"
                         "8 16 22 declared_value_ptr:645 480 16 22 declared_value_ptr:645 512 16 22 declared_value_ptr:64"
                         "5 544 16 22 declared_value_ptr:645 576 16 22 declared_value_ptr:645 608 16 22 declared_value_pt"
                         "r:645 640 20 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unk"
                         "nown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 "
                         "<unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 "
                         "56 28 valid_declared_value_set:645 1632 56 23 valid_enum_type_set:647 1728 56 23 valid_enum_typ"
                         "e_set:653 1824 56 23 valid_enum_type_set:657";
  *(_QWORD *)(v98 + 16) = ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc;
  v4 = (_DWORD *)(v98 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234556927;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862732] = -219020288;
  v4[536862733] = -219020288;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862736] = -219021312;
  v4[536862737] = -219021312;
  v4[536862738] = -219021312;
  v4[536862739] = -219021312;
  v4[536862740] = -234618880;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -234881024;
  v4[536862770] = -218959118;
  v4[536862772] = -234881024;
  v4[536862773] = -218959118;
  v4[536862775] = -234881024;
  v4[536862776] = -218959118;
  v4[536862778] = -218103808;
  v4[536862779] = -202116109;
  if ( *(_BYTE *)(((v98 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 240) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v98 + 240, config_skill);
  *(_DWORD *)(v98 + 240) = 4;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v98 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v98 + 1536),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v98 + 240),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v98 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v98 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v98 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v98 + 80));
  *(_BYTE *)(((v98 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v98 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v98 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v98 + 240) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v98 + 320) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v98 + 320) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v98 + 320, v98 + 240);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v98 + 320) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v98 + 352) >> 3) + 0x7FFF8000) = 0;
  v6 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v98 + 352) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v98 + 352, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v98 + 352) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v6);
  v7 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v98 + 320),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v98 + 352));
  *(_BYTE *)(((v98 + 352) >> 3) + 0x7FFF8000) = -8;
  if ( v7 )
  {
    *(_DWORD *)(((v98 + 704) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v98 + 704) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v98 + 735) >> 3) + 0x7FFF8000) != 0
      && (char)((v98 - 33) & 7) >= *(_BYTE *)(((v98 + 735) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v98 + 704, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v98 + 704),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
      645);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v98 + 704),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v8, (const char (*)[29])byte_1A5045A0);
    v10 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v9, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 704));
    *(_DWORD *)(((v98 + 704) >> 3) + 0x7FFF8000) = -117901064;
    v99 = -1;
    v11 = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v98 + 768) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v98 + 768) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v98 + 799) >> 3) + 0x7FFF8000) != 0
        && (char)((v98 + 31) & 7) >= *(_BYTE *)(((v98 + 799) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v98 + 768, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v98 + 768),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
        645);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v98 + 768),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      v10 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 768));
      *(_DWORD *)(((v98 + 768) >> 3) + 0x7FFF8000) = -117901064;
      v99 = -1;
      v11 = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v98 + 1536),
              &v16->type) )
      {
        *(_DWORD *)(((v98 + 832) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v98 + 832) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v98 + 863) >> 3) + 0x7FFF8000) != 0
          && (char)((v98 + 95) & 7) >= *(_BYTE *)(((v98 + 863) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v98 + 832, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v98 + 832),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
          645);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v98 + 832),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        v10 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 832));
        *(_DWORD *)(((v98 + 832) >> 3) + 0x7FFF8000) = -117901064;
        v99 = -1;
        v11 = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v98 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
            if ( *(_WORD *)(((v98 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v98 + 448));
            v10 = (const char *)(v98 + 448);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v98 + 448)) )
            {
              *(_DWORD *)(((v98 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v98 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v98 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v98 - 97) & 7) >= *(_BYTE *)(((v98 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v98 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v98 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
                645);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v98 + 896),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 896));
              *(_DWORD *)(((v98 + 896) >> 3) + 0x7FFF8000) = -117901064;
              v99 = -1;
              v23 = 0;
            }
            else
            {
              v24 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v98 + 448));
              v25 = *(_BYTE *)(((unsigned __int64)&v24->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v25 != 0;
              if ( v25 != 0 && v25 <= 3 )
                __asan_report_load4(&v24->value);
              v23 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v98 + 448));
            *(_WORD *)(((v98 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( v23 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Element:
            *(_WORD *)(((v98 + 480) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
            if ( *(_WORD *)(((v98 + 480) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v98 + 480));
            v10 = (const char *)(v98 + 480);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v98 + 480)) )
            {
              *(_DWORD *)(((v98 + 960) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v98 + 960) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v98 + 991) >> 3) + 0x7FFF8000) != 0
                && (char)((v98 - 33) & 7) >= *(_BYTE *)(((v98 + 991) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v98 + 960, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v98 + 960),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
                645);
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v98 + 960),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v26,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v27,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 960));
              *(_DWORD *)(((v98 + 960) >> 3) + 0x7FFF8000) = -117901064;
              v99 = -1;
              v28 = 0;
            }
            else
            {
              v29 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v98 + 480));
              v30 = *(_BYTE *)(((unsigned __int64)&v29->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v30 != 0;
              if ( v30 != 0 && v30 <= 3 )
                __asan_report_load4(&v29->value);
              v28 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v98 + 480));
            *(_WORD *)(((v98 + 480) >> 3) + 0x7FFF8000) = -1800;
            if ( v28 )
              goto LABEL_98;
            v11 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v98 + 512) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
            if ( *(_WORD *)(((v98 + 512) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v98 + 512));
            v10 = (const char *)(v98 + 512);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v98 + 512)) )
            {
              *(_DWORD *)(((v98 + 1024) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v98 + 1024) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v98 + 1055) >> 3) + 0x7FFF8000) != 0
                && (char)((v98 + 31) & 7) >= *(_BYTE *)(((v98 + 1055) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v98 + 1024, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v98 + 1024),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
                645);
              v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v98 + 1024),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v31,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v32,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1024));
              *(_DWORD *)(((v98 + 1024) >> 3) + 0x7FFF8000) = -117901064;
              v99 = -1;
              v33 = 0;
            }
            else
            {
              v34 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v98 + 512));
              v35 = *(_BYTE *)(((unsigned __int64)&v34->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v35 != 0;
              if ( v35 != 0 && v35 <= 3 )
                __asan_report_load4(&v34->value);
              v33 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v98 + 512));
            *(_WORD *)(((v98 + 512) >> 3) + 0x7FFF8000) = -1800;
            if ( v33 )
              goto LABEL_98;
            v11 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v98 + 576) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
            if ( *(_WORD *)(((v98 + 576) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v98 + 576));
            v10 = (const char *)(v98 + 576);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v98 + 576)) )
            {
              *(_DWORD *)(((v98 + 1152) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v98 + 1152) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v98 + 1183) >> 3) + 0x7FFF8000) != 0
                && (char)((v98 - 97) & 7) >= *(_BYTE *)(((v98 + 1183) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v98 + 1152, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v98 + 1152),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
                645);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v98 + 1152),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v42,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1152));
              *(_DWORD *)(((v98 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              v99 = -1;
              v43 = 0;
            }
            else
            {
              v44 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v98 + 576));
              v45 = *(_BYTE *)(((unsigned __int64)&v44->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v45 != 0;
              if ( v45 != 0 && v45 <= 3 )
                __asan_report_load4(&v44->value);
              v43 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v98 + 576));
            *(_WORD *)(((v98 + 576) >> 3) + 0x7FFF8000) = -1800;
            if ( v43 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Heal:
            *(_WORD *)(((v98 + 544) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
            if ( *(_WORD *)(((v98 + 544) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v98 + 544));
            v10 = (const char *)(v98 + 544);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v98 + 544)) )
            {
              *(_DWORD *)(((v98 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v98 + 1088) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v98 + 1119) >> 3) + 0x7FFF8000) != 0
                && (char)((v98 + 95) & 7) >= *(_BYTE *)(((v98 + 1119) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v98 + 1088, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v98 + 1088),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
                645);
              v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v98 + 1088),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v36,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v37,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1088));
              *(_DWORD *)(((v98 + 1088) >> 3) + 0x7FFF8000) = -117901064;
              v99 = -1;
              v38 = 0;
            }
            else
            {
              v39 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v98 + 544));
              v40 = *(_BYTE *)(((unsigned __int64)&v39->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v40 != 0;
              if ( v40 != 0 && v40 <= 3 )
                __asan_report_load4(&v39->value);
              v38 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v98 + 544));
            *(_WORD *)(((v98 + 544) >> 3) + 0x7FFF8000) = -1800;
            if ( v38 )
              goto LABEL_98;
            v11 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v98 + 608) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
            if ( *(_WORD *)(((v98 + 608) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v98 + 608));
            v10 = (const char *)(v98 + 608);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v98 + 608)) )
            {
              *(_DWORD *)(((v98 + 1216) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v98 + 1216) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v98 + 1247) >> 3) + 0x7FFF8000) != 0
                && (char)((v98 - 33) & 7) >= *(_BYTE *)(((v98 + 1247) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v98 + 1216, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v98 + 1216),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
                645);
              v46 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v98 + 1216),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v46,
                      (const char (*)[16])"cast fail, key:");
              v10 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v47,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1216));
              *(_DWORD *)(((v98 + 1216) >> 3) + 0x7FFF8000) = -117901064;
              v99 = -1;
              v48 = 0;
            }
            else
            {
              v49 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v98 + 608));
              v50 = *(_BYTE *)(((unsigned __int64)&v49->value >> 3) + 0x7FFF8000);
              LOBYTE(v10) = v50 != 0;
              if ( v50 != 0 && v50 <= 3 )
                __asan_report_load4(&v49->value);
              v48 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v98 + 608));
            *(_WORD *)(((v98 + 608) >> 3) + 0x7FFF8000) = -1800;
            if ( v48 )
LABEL_98:
              v11 = 1;
            else
              v11 = 0;
            break;
          default:
            *(_DWORD *)(((v98 + 1280) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v98 + 1280) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v98 + 1311) >> 3) + 0x7FFF8000) != 0
              && (char)((v98 + 31) & 7) >= *(_BYTE *)(((v98 + 1311) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v98 + 1280, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v98 + 1280),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
              645);
            v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v98 + 1280),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v52 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v51,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v98 + 256) >> 3) + 0x7FFF8000) = 4;
            v53 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v98 + 320));
            v54 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v53->second);
            if ( *(_BYTE *)(((unsigned __int64)&v54->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v54->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v54->type);
            }
            type = (unsigned int)v54->type;
            if ( *(_BYTE *)(((v98 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 256) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v98 + 256, type);
            *(_DWORD *)(v98 + 256) = type;
            v10 = (const char *)(v98 + 256);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v52,
              (const unsigned int *)(v98 + 256));
            *(_BYTE *)(((v98 + 256) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1280));
            *(_DWORD *)(((v98 + 1280) >> 3) + 0x7FFF8000) = -117901064;
            v99 = -1;
            v11 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v98 + 1536));
  v56 = ((v98 + 1536) >> 3) + 2147450880;
  *(_DWORD *)v56 = -117901064;
  *(_WORD *)(v56 + 4) = -1800;
  *(_BYTE *)(v56 + 6) = -8;
  *(_BYTE *)(((v98 + 320) >> 3) + 0x7FFF8000) = -8;
  if ( v11 == 1 )
  {
    v57 = ((v98 + 1632) >> 3) + 2147450880;
    *(_DWORD *)v57 = 0;
    *(_WORD *)(v57 + 4) = 0;
    *(_BYTE *)(v57 + 6) = 0;
    v58 = ((v98 + 640) >> 3) + 2147450880;
    *(_WORD *)v58 = 0;
    *(_BYTE *)(v58 + 2) = 4;
    if ( *(_BYTE *)(((v98 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v98 + 640, v10);
    *(_DWORD *)(v98 + 640) = 0;
    v59 = *(_BYTE *)(((v98 + 644) >> 3) + 0x7FFF8000);
    LOBYTE(v10) = v59 != 0;
    if ( v59 != 0 && (char)(((v98 - 124) & 7) + 3) >= v59 )
      __asan_report_store4(v98 + 644, v10);
    *(_DWORD *)(v98 + 644) = 1;
    if ( *(_BYTE *)(((v98 + 648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v98 + 648, v10);
    *(_DWORD *)(v98 + 648) = 2;
    v60 = *(_BYTE *)(((v98 + 652) >> 3) + 0x7FFF8000);
    LOBYTE(v10) = v60 != 0;
    if ( v60 != 0 && (char)(((v98 - 116) & 7) + 3) >= v60 )
      __asan_report_store4(v98 + 652, v10);
    *(_DWORD *)(v98 + 652) = 3;
    if ( *(_BYTE *)(((v98 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v98 + 656, v10);
    *(_DWORD *)(v98 + 656) = 4;
    __l._M_array = (std::initializer_list<data::GCGEffectTargetChooseType>::iterator)(v98 + 640);
    __l._M_len = 5LL;
    *(_BYTE *)(((v98 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v98 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v98 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectTargetChooseType>::allocator((std::allocator<data::GCGEffectTargetChooseType> *const)(v98 + 128));
    std::unordered_set<data::GCGEffectTargetChooseType>::unordered_set(
      (std::unordered_set<data::GCGEffectTargetChooseType> *const)(v98 + 1632),
      __l,
      0LL,
      (const std::unordered_set<data::GCGEffectTargetChooseType>::hasher *)(v98 + 96),
      (const std::unordered_set<data::GCGEffectTargetChooseType>::key_equal *)(v98 + 112),
      (const std::unordered_set<data::GCGEffectTargetChooseType>::allocator_type *)(v98 + 128));
    std::allocator<data::GCGEffectTargetChooseType>::~allocator((std::allocator<data::GCGEffectTargetChooseType> *const)(v98 + 128));
    *(_BYTE *)(((v98 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v98 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v98 + 96) >> 3) + 0x7FFF8000) = -8;
    v61 = ((v98 + 640) >> 3) + 2147450880;
    *(_WORD *)v61 = -1800;
    *(_BYTE *)(v61 + 2) = -8;
    p_choose_type = &config_effect->choose_type;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectTargetChooseType>,data::GCGEffectTargetChooseType>(
            (std::unordered_set<data::GCGEffectTargetChooseType> *)(v98 + 1632),
            &config_effect->choose_type) )
    {
      *(_DWORD *)(((v98 + 1344) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v98 + 1344) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v98 + 1375) >> 3) + 0x7FFF8000) != 0
        && (char)((v98 + 95) & 7) >= *(_BYTE *)(((v98 + 1375) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v98 + 1344, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v98 + 1344),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
        647);
      v63 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v98 + 1344),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v64 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v63, (const char (*)[31])byte_1A5047A0);
      v65 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              v64,
              (const char (*)[26])"config_effect.choose_type");
      v66 = " value:";
      v67 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v65, (const char (*)[8])" value:");
      *(_BYTE *)(((v98 + 272) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->choose_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_effect + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->choose_type >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_effect->choose_type);
      }
      choose_type = config_effect->choose_type;
      v69 = *(_BYTE *)(((v98 + 272) >> 3) + 0x7FFF8000);
      if ( v69 != 0 && v69 <= 3 )
      {
        choose_type = v98 + 272;
        LOBYTE(v66) = v69 != 0;
        __asan_report_store4(v98 + 272, v66);
      }
      *(_DWORD *)(v98 + 272) = choose_type;
      p_choose_type = (data::GCGEffectTargetChooseType *)(v98 + 272);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, (const unsigned int *)(v98 + 272));
      *(_BYTE *)(((v98 + 272) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1344));
      *(_DWORD *)(((v98 + 1344) >> 3) + 0x7FFF8000) = -117901064;
      v99 = -1;
      v70 = 0;
    }
    else
    {
      v70 = 1;
    }
    std::unordered_set<data::GCGEffectTargetChooseType>::~unordered_set((std::unordered_set<data::GCGEffectTargetChooseType> *const)(v98 + 1632));
    v71 = ((v98 + 1632) >> 3) + 2147450880;
    *(_DWORD *)v71 = -117901064;
    *(_WORD *)(v71 + 4) = -1800;
    *(_BYTE *)(v71 + 6) = -8;
    if ( v70 == 1 )
    {
      v72 = ((v98 + 1728) >> 3) + 2147450880;
      *(_DWORD *)v72 = 0;
      *(_WORD *)(v72 + 4) = 0;
      *(_BYTE *)(v72 + 6) = 0;
      *(_WORD *)(((v98 + 384) >> 3) + 0x7FFF8000) = 1024;
      if ( *(_BYTE *)(((v98 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v98 + 384, p_choose_type);
      *(_DWORD *)(v98 + 384) = 0;
      v73 = (((_BYTE)v98 - 124) & 7u) + 3;
      if ( *(_BYTE *)(((v98 + 388) >> 3) + 0x7FFF8000) != 0
        && (char)(((v98 - 124) & 7) + 3) >= *(_BYTE *)(((v98 + 388) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v98 + 388, v73);
      }
      *(_DWORD *)(v98 + 388) = 1;
      if ( *(_BYTE *)(((v98 + 392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 392) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v98 + 392, v73);
      *(_DWORD *)(v98 + 392) = 2;
      v96._M_array = (std::initializer_list<data::GCGValueOperatorType>::iterator)(v98 + 384);
      v96._M_len = 3LL;
      *(_BYTE *)(((v98 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v98 + 160) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v98 + 176) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGValueOperatorType>::allocator((std::allocator<data::GCGValueOperatorType> *const)(v98 + 176));
      std::unordered_set<data::GCGValueOperatorType>::unordered_set(
        (std::unordered_set<data::GCGValueOperatorType> *const)(v98 + 1728),
        v96,
        0LL,
        (const std::unordered_set<data::GCGValueOperatorType>::hasher *)(v98 + 144),
        (const std::unordered_set<data::GCGValueOperatorType>::key_equal *)(v98 + 160),
        (const std::unordered_set<data::GCGValueOperatorType>::allocator_type *)(v98 + 176));
      std::allocator<data::GCGValueOperatorType>::~allocator((std::allocator<data::GCGValueOperatorType> *const)(v98 + 176));
      *(_BYTE *)(((v98 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v98 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v98 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v98 + 384) >> 3) + 0x7FFF8000) = -1800;
      p_operator_type = &config_effect->operator_type;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGValueOperatorType>,data::GCGValueOperatorType>(
              (std::unordered_set<data::GCGValueOperatorType> *)(v98 + 1728),
              &config_effect->operator_type) )
      {
        *(_DWORD *)(((v98 + 1408) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v98 + 1408) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v98 + 1439) >> 3) + 0x7FFF8000) != 0
          && (char)((v98 - 97) & 7) >= *(_BYTE *)(((v98 + 1439) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v98 + 1408, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v98 + 1408),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
          653);
        v75 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v98 + 1408),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v76 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v75, (const char (*)[31])byte_1A5047A0);
        v77 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                v76,
                (const char (*)[28])"config_effect.operator_type");
        v78 = " value:";
        v79 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v77, (const char (*)[8])" value:");
        *(_BYTE *)(((v98 + 288) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->operator_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_effect->operator_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_effect->operator_type);
        }
        operator_type = config_effect->operator_type;
        v81 = *(_BYTE *)(((v98 + 288) >> 3) + 0x7FFF8000);
        if ( v81 != 0 && v81 <= 3 )
        {
          operator_type = v98 + 288;
          LOBYTE(v78) = v81 != 0;
          __asan_report_store4(v98 + 288, v78);
        }
        *(_DWORD *)(v98 + 288) = operator_type;
        p_operator_type = (data::GCGValueOperatorType *)(v98 + 288);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v79, (const unsigned int *)(v98 + 288));
        *(_BYTE *)(((v98 + 288) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1408));
        *(_DWORD *)(((v98 + 1408) >> 3) + 0x7FFF8000) = -117901064;
        v99 = -1;
        v82 = 0;
      }
      else
      {
        v82 = 1;
      }
      std::unordered_set<data::GCGValueOperatorType>::~unordered_set((std::unordered_set<data::GCGValueOperatorType> *const)(v98 + 1728));
      v83 = ((v98 + 1728) >> 3) + 2147450880;
      *(_DWORD *)v83 = -117901064;
      *(_WORD *)(v83 + 4) = -1800;
      *(_BYTE *)(v83 + 6) = -8;
      if ( v82 == 1 )
      {
        v84 = ((v98 + 1824) >> 3) + 2147450880;
        *(_DWORD *)v84 = 0;
        *(_WORD *)(v84 + 4) = 0;
        *(_BYTE *)(v84 + 6) = 0;
        *(_WORD *)(((v98 + 416) >> 3) + 0x7FFF8000) = 1024;
        if ( *(_BYTE *)(((v98 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 416) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v98 + 416, p_operator_type);
        *(_DWORD *)(v98 + 416) = 0;
        v85 = (((_BYTE)v98 - 92) & 7u) + 3;
        if ( *(_BYTE *)(((v98 + 420) >> 3) + 0x7FFF8000) != 0
          && (char)(((v98 - 92) & 7) + 3) >= *(_BYTE *)(((v98 + 420) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v98 + 420, v85);
        }
        *(_DWORD *)(v98 + 420) = 1;
        if ( *(_BYTE *)(((v98 + 424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v98 + 424) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v98 + 424, v85);
        *(_DWORD *)(v98 + 424) = 2;
        v97._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v98 + 416);
        v97._M_len = 3LL;
        *(_BYTE *)(((v98 + 192) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v98 + 208) >> 3) + 0x7FFF8000) = 1;
        *(_BYTE *)(((v98 + 224) >> 3) + 0x7FFF8000) = 1;
        std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v98 + 224));
        std::unordered_set<data::GCGEffectCampType>::unordered_set(
          (std::unordered_set<data::GCGEffectCampType> *const)(v98 + 1824),
          v97,
          0LL,
          (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v98 + 192),
          (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v98 + 208),
          (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v98 + 224));
        std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v98 + 224));
        *(_BYTE *)(((v98 + 224) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v98 + 208) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v98 + 192) >> 3) + 0x7FFF8000) = -8;
        *(_WORD *)(((v98 + 416) >> 3) + 0x7FFF8000) = -1800;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
                (std::unordered_set<data::GCGEffectCampType> *)(v98 + 1824),
                &config_effect->camp_type) )
        {
          *(_DWORD *)(((v98 + 1472) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v98 + 1472) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v98 + 1503) >> 3) + 0x7FFF8000) != 0
            && (char)((v98 - 33) & 7) >= *(_BYTE *)(((v98 + 1503) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v98 + 1472, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v98 + 1472),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectChangeCardShowTokenVarValidatorFunc",
            657);
          v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v98 + 1472),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v87 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v86, (const char (*)[31])byte_1A5047A0);
          v88 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  v87,
                  (const char (*)[24])"config_effect.camp_type");
          v89 = " value:";
          v90 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v88, (const char (*)[8])" value:");
          *(_BYTE *)(((v98 + 304) >> 3) + 0x7FFF8000) = 4;
          if ( *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->camp_type >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(&config_effect->camp_type);
          }
          camp_type = config_effect->camp_type;
          v92 = *(_BYTE *)(((v98 + 304) >> 3) + 0x7FFF8000);
          if ( v92 != 0 && v92 <= 3 )
          {
            camp_type = v98 + 304;
            LOBYTE(v89) = v92 != 0;
            __asan_report_store4(v98 + 304, v89);
          }
          *(_DWORD *)(v98 + 304) = camp_type;
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v90, (const unsigned int *)(v98 + 304));
          *(_BYTE *)(((v98 + 304) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v98 + 1472));
          *(_DWORD *)(((v98 + 1472) >> 3) + 0x7FFF8000) = -117901064;
          v99 = -1;
          v93 = 0;
        }
        else
        {
          v93 = 1;
        }
        std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v98 + 1824));
        if ( v93 == 1 )
          v99 = 0;
      }
    }
  }
  if ( v101 == (char *)v98 )
  {
    *(_QWORD *)((v98 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v98 >> 3) + 0x7FFF80DC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 228) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v98 >> 3) + 0x7FFF80E8) = 0LL;
  }
  else
  {
    *(_QWORD *)v98 = 1172321806LL;
    __asan_stack_free_5(v98, 1920LL, v101);
  }
  return v99;
};

// Line 665: range 000000000F1FA14D-000000000F1FAB41
int32_t __cdecl ConfigGCGExecEffectTransferModifyCardValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectTransferModifyCard,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:665 64 8 13 __for_end:665 96 16 26 cast_config_effect_ptr:665 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectTransferModifyCardValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectTransferModifyCard,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectTransferModifyCard>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectTransferModifyCard> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectTransferModifyCardValidator",
        665);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
        v12,
        (const char (*)[38])"ConfigGCGExecEffectTransferModifyCard");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectTransferModifyCardValidator",
            665);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectTransferModifyCardValidator",
              665);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectTransferModifyCardValidator",
          665);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectTransferModifyCard,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectTransferModifyCard,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectTransferModifyCardValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectTransferModifyCard>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectTransferModifyCard> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectTransferModifyCardValidator",
    665);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
    v9,
    (const char (*)[38])"ConfigGCGExecEffectTransferModifyCard");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 666: range 000000000F1FAB42-000000000F1FAB58
int32_t __cdecl ConfigGCGExecEffectTransferModifyCardValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectTransferModifyCard *config_effect)
{
  return 0;
};

// Line 673: range 000000000F1FAB59-000000000F1FB54D
int32_t __cdecl ConfigGCGExecEffectOnStageCharacterUseSkillValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectOnStageCharacterUseSkill,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:673 64 8 13 __for_end:673 96 16 26 cast_config_effect_ptr:673 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectOnStageCharacterUseSkillValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectOnStageCharacterUseSkill,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectOnStageCharacterUseSkill>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectOnStageCharacterUseSkill> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectOnStageCharacterUseSkillValidator",
        673);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
        v12,
        (const char (*)[44])"ConfigGCGExecEffectOnStageCharacterUseSkill");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectOnStageCharacterUseSkillValidator",
            673);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectOnStageCharacterUseSkillValidator",
              673);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectOnStageCharacterUseSkillValidator",
          673);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectOnStageCharacterUseSkill,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectOnStageCharacterUseSkill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectOnStageCharacterUseSkillValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectOnStageCharacterUseSkill>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectOnStageCharacterUseSkill> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectOnStageCharacterUseSkillValidator",
    673);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
    v9,
    (const char (*)[44])"ConfigGCGExecEffectOnStageCharacterUseSkill");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 674: range 000000000F1FB54E-000000000F1FB564
int32_t __cdecl ConfigGCGExecEffectOnStageCharacterUseSkillValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectOnStageCharacterUseSkill *config_effect)
{
  return 0;
};

// Line 681: range 000000000F1FB565-000000000F1FBF59
int32_t __cdecl ConfigGCGExecEffectReviveCharacterValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectReviveCharacter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:681 64 8 13 __for_end:681 96 16 26 cast_config_effect_ptr:681 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectReviveCharacterValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectReviveCharacter,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectReviveCharacter>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectReviveCharacter> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectReviveCharacterValidator",
        681);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
        v12,
        (const char (*)[35])"ConfigGCGExecEffectReviveCharacter");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectReviveCharacterValidator",
            681);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectReviveCharacterValidator",
              681);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectReviveCharacterValidator",
          681);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectReviveCharacter,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectReviveCharacter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectReviveCharacterValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectReviveCharacter>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectReviveCharacter> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectReviveCharacterValidator",
    681);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
    v9,
    (const char (*)[35])"ConfigGCGExecEffectReviveCharacter");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 682: range 000000000F1FBF5A-000000000F1FE5AE
int32_t __cdecl ConfigGCGExecEffectReviveCharacterValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectReviveCharacter *config_effect)
{
  __int64 v3; // rax
  _DWORD *v4; // rsi
  _QWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  int v12; // r13d
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v16; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v20; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int v24; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  char v26; // dl
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  char v31; // dl
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  int v39; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  char v41; // dl
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int v44; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  char v46; // dl
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  int v49; // r13d
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  char v51; // dl
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // r13
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v54; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  __int64 type; // rsi
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rax
  unsigned __int64 v59; // rax
  __int64 v60; // rsi
  __int64 v61; // rsi
  unsigned __int64 v62; // rax
  data::GCGChooseTargetCharaterType *p_target_character; // rsi
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  const char *v67; // rsi
  common::milog::MiLogStream *v68; // rcx
  data::GCGChooseTargetCharaterType target_character; // edi
  char v70; // al
  int v71; // r13d
  unsigned __int64 v72; // rax
  unsigned __int64 v73; // rax
  __int64 v74; // rsi
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  const char *v78; // rsi
  common::milog::MiLogStream *v79; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v81; // al
  int v82; // r13d
  std::initializer_list<data::GCGChooseTargetCharaterType> __l; // [rsp+0h] [rbp-710h]
  std::initializer_list<data::GCGEffectCampType> v85; // [rsp+10h] [rbp-700h]
  unsigned __int64 v86; // [rsp+28h] [rbp-6E8h]
  int32_t v87; // [rsp+34h] [rbp-6DCh]
  char v90[1712]; // [rsp+60h] [rbp-6B0h] BYREF

  v86 = (unsigned __int64)v90;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1664LL);
    if ( v3 )
      v86 = v3;
  }
  *(_QWORD *)v86 = 1102416563LL;
  *(_QWORD *)(v86 + 8) = "38 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 "
                         "9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 4 9 <unknown> 208 4 9 <un"
                         "known> 224 4 9 <unknown> 240 4 9 <unknown> 256 8 8 iter:684 288 8 9 <unknown> 320 12 9 <unknown"
                         "> 352 16 22 declared_value_ptr:684 384 16 22 declared_value_ptr:684 416 16 22 declared_value_pt"
                         "r:684 448 16 22 declared_value_ptr:684 480 16 22 declared_value_ptr:684 512 16 22 declared_valu"
                         "e_ptr:684 544 20 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 "
                         "<unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 "
                         "9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 56 28 valid_declar"
                         "ed_value_set:684 1472 56 23 valid_enum_type_set:687 1568 56 23 valid_enum_type_set:693";
  *(_QWORD *)(v86 + 16) = ConfigGCGExecEffectReviveCharacterValidatorFunc;
  v4 = (_DWORD *)(v86 >> 3);
  v5 = v4;
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -219020288;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862736] = -219021312;
  v4[536862737] = -234618880;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -234881024;
  v4[536862765] = -218959118;
  v4[536862767] = -234881024;
  v4[536862768] = -218959118;
  v4[536862770] = -218103808;
  v4[536862771] = -202116109;
  if ( *(_BYTE *)(((v86 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v86 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v86 + 192, v4);
  *(_DWORD *)(v86 + 192) = 5;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v86 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v86 + 1376),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v86 + 192),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v86 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v86 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v86 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v86 + 80));
  *(_BYTE *)(((v86 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v86 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v86 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v86 + 192) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v86 + 256) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v86 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v86 + 256, v86 + 192);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v86 + 256) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_heal_amount_key.key);
  *(_BYTE *)(((v86 + 288) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v86 + 288) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v86 + 288, &config_effect->declared_heal_amount_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v86 + 288) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v86 + 256),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v86 + 288));
  *(_BYTE *)(((v86 + 288) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v86 + 608) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v86 + 608) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v86 + 639) >> 3) + 0x7FFF8000) != 0
      && (char)((v86 + 127) & 7) >= *(_BYTE *)(((v86 + 639) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v86 + 608, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v86 + 608),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectReviveCharacterValidatorFunc",
      684);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v86 + 608),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_heal_amount_key";
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v10, (const char (*)[25])"declared_heal_amount_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 608));
    *(_DWORD *)(((v86 + 608) >> 3) + 0x7FFF8000) = -117901064;
    v87 = -1;
    v12 = 0;
  }
  else
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v13->second) )
    {
      *(_DWORD *)(((v86 + 672) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v86 + 672) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v86 + 703) >> 3) + 0x7FFF8000) != 0
        && (char)((v86 - 65) & 7) >= *(_BYTE *)(((v86 + 703) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v86 + 672, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v86 + 672),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectReviveCharacterValidatorFunc",
        684);
      v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v86 + 672),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v14, (const char (*)[32])byte_1A504620);
      v11 = "declared_heal_amount_key";
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        v15,
        (const char (*)[25])"declared_heal_amount_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 672));
      *(_DWORD *)(((v86 + 672) >> 3) + 0x7FFF8000) = -117901064;
      v87 = -1;
      v12 = 0;
    }
    else
    {
      v16 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
      v17 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v86 + 1376),
              &v17->type) )
      {
        *(_DWORD *)(((v86 + 736) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v86 + 736) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v86 + 767) >> 3) + 0x7FFF8000) != 0
          && (char)((v86 - 1) & 7) >= *(_BYTE *)(((v86 + 767) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v86 + 736, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v86 + 736),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectReviveCharacterValidatorFunc",
          684);
        v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v86 + 736),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v19 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v18, (const char (*)[38])byte_1A504660);
        v11 = "declared_heal_amount_key";
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          v19,
          (const char (*)[25])"declared_heal_amount_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 736));
        *(_DWORD *)(((v86 + 736) >> 3) + 0x7FFF8000) = -117901064;
        v87 = -1;
        v12 = 0;
      }
      else
      {
        v20 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
        v21 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20->second);
        if ( *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v21->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v21->type);
        }
        switch ( v21->type )
        {
          case Damage:
            *(_WORD *)(((v86 + 352) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
            if ( *(_WORD *)(((v86 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v86 + 352));
            v11 = (const char *)(v86 + 352);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v86 + 352)) )
            {
              *(_DWORD *)(((v86 + 800) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v86 + 800) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v86 + 831) >> 3) + 0x7FFF8000) != 0
                && (char)((v86 + 63) & 7) >= *(_BYTE *)(((v86 + 831) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v86 + 800, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v86 + 800),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectReviveCharacterValidatorFunc",
                684);
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v86 + 800),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v22,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v23,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 800));
              *(_DWORD *)(((v86 + 800) >> 3) + 0x7FFF8000) = -117901064;
              v87 = -1;
              v24 = 0;
            }
            else
            {
              v25 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v86 + 352));
              v26 = *(_BYTE *)(((unsigned __int64)&v25->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v26 != 0;
              if ( v26 != 0 && v26 <= 3 )
                __asan_report_load4(&v25->value);
              v24 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v86 + 352));
            *(_WORD *)(((v86 + 352) >> 3) + 0x7FFF8000) = -1800;
            if ( v24 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Element:
            *(_WORD *)(((v86 + 384) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
            if ( *(_WORD *)(((v86 + 384) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v86 + 384));
            v11 = (const char *)(v86 + 384);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v86 + 384)) )
            {
              *(_DWORD *)(((v86 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v86 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v86 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v86 + 127) & 7) >= *(_BYTE *)(((v86 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v86 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v86 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectReviveCharacterValidatorFunc",
                684);
              v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v86 + 864),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v27,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v28,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 864));
              *(_DWORD *)(((v86 + 864) >> 3) + 0x7FFF8000) = -117901064;
              v87 = -1;
              v29 = 0;
            }
            else
            {
              v30 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v86 + 384));
              v31 = *(_BYTE *)(((unsigned __int64)&v30->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v31 != 0;
              if ( v31 != 0 && v31 <= 3 )
                __asan_report_load4(&v30->value);
              v29 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v86 + 384));
            *(_WORD *)(((v86 + 384) >> 3) + 0x7FFF8000) = -1800;
            if ( v29 )
              goto LABEL_98;
            v12 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v86 + 416) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
            if ( *(_WORD *)(((v86 + 416) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v86 + 416));
            v11 = (const char *)(v86 + 416);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v86 + 416)) )
            {
              *(_DWORD *)(((v86 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v86 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v86 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v86 - 65) & 7) >= *(_BYTE *)(((v86 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v86 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v86 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectReviveCharacterValidatorFunc",
                684);
              v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v86 + 928),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v32,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v33,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 928));
              *(_DWORD *)(((v86 + 928) >> 3) + 0x7FFF8000) = -117901064;
              v87 = -1;
              v34 = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v86 + 416));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              v34 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v86 + 416));
            *(_WORD *)(((v86 + 416) >> 3) + 0x7FFF8000) = -1800;
            if ( v34 )
              goto LABEL_98;
            v12 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v86 + 480) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
            if ( *(_WORD *)(((v86 + 480) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v86 + 480));
            v11 = (const char *)(v86 + 480);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v86 + 480)) )
            {
              *(_DWORD *)(((v86 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v86 + 1056) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v86 + 1087) >> 3) + 0x7FFF8000) != 0
                && (char)((v86 + 63) & 7) >= *(_BYTE *)(((v86 + 1087) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v86 + 1056, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v86 + 1056),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectReviveCharacterValidatorFunc",
                684);
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v86 + 1056),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v42,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v43,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 1056));
              *(_DWORD *)(((v86 + 1056) >> 3) + 0x7FFF8000) = -117901064;
              v87 = -1;
              v44 = 0;
            }
            else
            {
              v45 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v86 + 480));
              v46 = *(_BYTE *)(((unsigned __int64)&v45->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v46 != 0;
              if ( v46 != 0 && v46 <= 3 )
                __asan_report_load4(&v45->value);
              v44 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v86 + 480));
            *(_WORD *)(((v86 + 480) >> 3) + 0x7FFF8000) = -1800;
            if ( v44 )
              goto LABEL_98;
            v12 = 0;
            break;
          case Heal:
            *(_WORD *)(((v86 + 448) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
            if ( *(_WORD *)(((v86 + 448) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v86 + 448));
            v11 = (const char *)(v86 + 448);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v86 + 448)) )
            {
              *(_DWORD *)(((v86 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v86 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v86 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v86 - 1) & 7) >= *(_BYTE *)(((v86 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v86 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v86 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectReviveCharacterValidatorFunc",
                684);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v86 + 992),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v38,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 992));
              *(_DWORD *)(((v86 + 992) >> 3) + 0x7FFF8000) = -117901064;
              v87 = -1;
              v39 = 0;
            }
            else
            {
              v40 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v86 + 448));
              v41 = *(_BYTE *)(((unsigned __int64)&v40->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v41 != 0;
              if ( v41 != 0 && v41 <= 3 )
                __asan_report_load4(&v40->value);
              v39 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v86 + 448));
            *(_WORD *)(((v86 + 448) >> 3) + 0x7FFF8000) = -1800;
            if ( v39 )
              goto LABEL_98;
            v12 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v86 + 512) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
            if ( *(_WORD *)(((v86 + 512) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v86 + 512));
            v11 = (const char *)(v86 + 512);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v86 + 512)) )
            {
              *(_DWORD *)(((v86 + 1120) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v86 + 1120) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v86 + 1151) >> 3) + 0x7FFF8000) != 0
                && (char)((v86 + 127) & 7) >= *(_BYTE *)(((v86 + 1151) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v86 + 1120, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v86 + 1120),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectReviveCharacterValidatorFunc",
                684);
              v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v86 + 1120),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v47,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_heal_amount_key";
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v48,
                (const char (*)[25])"declared_heal_amount_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 1120));
              *(_DWORD *)(((v86 + 1120) >> 3) + 0x7FFF8000) = -117901064;
              v87 = -1;
              v49 = 0;
            }
            else
            {
              v50 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v86 + 512));
              v51 = *(_BYTE *)(((unsigned __int64)&v50->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v51 != 0;
              if ( v51 != 0 && v51 <= 3 )
                __asan_report_load4(&v50->value);
              v49 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v86 + 512));
            *(_WORD *)(((v86 + 512) >> 3) + 0x7FFF8000) = -1800;
            if ( v49 )
LABEL_98:
              v12 = 1;
            else
              v12 = 0;
            break;
          default:
            *(_DWORD *)(((v86 + 1184) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v86 + 1184) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v86 + 1215) >> 3) + 0x7FFF8000) != 0
              && (char)((v86 - 65) & 7) >= *(_BYTE *)(((v86 + 1215) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v86 + 1184, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v86 + 1184),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectReviveCharacterValidatorFunc",
              684);
            v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v86 + 1184),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v53 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v52,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v86 + 208) >> 3) + 0x7FFF8000) = 4;
            v54 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v86 + 256));
            v55 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v54->second);
            if ( *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v55->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v55->type);
            }
            type = (unsigned int)v55->type;
            if ( *(_BYTE *)(((v86 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v86 + 208) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v86 + 208, type);
            *(_DWORD *)(v86 + 208) = type;
            v11 = (const char *)(v86 + 208);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v53,
              (const unsigned int *)(v86 + 208));
            *(_BYTE *)(((v86 + 208) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 1184));
            *(_DWORD *)(((v86 + 1184) >> 3) + 0x7FFF8000) = -117901064;
            v87 = -1;
            v12 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v86 + 1376));
  v57 = ((v86 + 1376) >> 3) + 2147450880;
  *(_DWORD *)v57 = -117901064;
  *(_WORD *)(v57 + 4) = -1800;
  *(_BYTE *)(v57 + 6) = -8;
  *(_BYTE *)(((v86 + 256) >> 3) + 0x7FFF8000) = -8;
  if ( v12 == 1 )
  {
    v58 = ((v86 + 1472) >> 3) + 2147450880;
    *(_DWORD *)v58 = 0;
    *(_WORD *)(v58 + 4) = 0;
    *(_BYTE *)(v58 + 6) = 0;
    v59 = ((v86 + 544) >> 3) + 2147450880;
    *(_WORD *)v59 = 0;
    *(_BYTE *)(v59 + 2) = 4;
    if ( *(_BYTE *)(((v86 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v86 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v86 + 544, v11);
    *(_DWORD *)(v86 + 544) = 0;
    v60 = (((_BYTE)v86 + 36) & 7u) + 3;
    if ( *(_BYTE *)(((v86 + 548) >> 3) + 0x7FFF8000) != 0
      && (char)(((v86 + 36) & 7) + 3) >= *(_BYTE *)(((v86 + 548) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v86 + 548, v60);
    }
    *(_DWORD *)(v86 + 548) = 1;
    if ( *(_BYTE *)(((v86 + 552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v86 + 552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v86 + 552, v60);
    *(_DWORD *)(v86 + 552) = 2;
    v61 = (((_BYTE)v86 + 44) & 7u) + 3;
    if ( *(_BYTE *)(((v86 + 556) >> 3) + 0x7FFF8000) != 0
      && (char)(((v86 + 44) & 7) + 3) >= *(_BYTE *)(((v86 + 556) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v86 + 556, v61);
    }
    *(_DWORD *)(v86 + 556) = 3;
    if ( *(_BYTE *)(((v86 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v86 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v86 + 560, v61);
    *(_DWORD *)(v86 + 560) = 16;
    __l._M_array = (std::initializer_list<data::GCGChooseTargetCharaterType>::iterator)(v86 + 544);
    __l._M_len = 5LL;
    *(_BYTE *)(((v86 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v86 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v86 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGChooseTargetCharaterType>::allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v86 + 128));
    std::unordered_set<data::GCGChooseTargetCharaterType>::unordered_set(
      (std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v86 + 1472),
      __l,
      0LL,
      (const std::unordered_set<data::GCGChooseTargetCharaterType>::hasher *)(v86 + 96),
      (const std::unordered_set<data::GCGChooseTargetCharaterType>::key_equal *)(v86 + 112),
      (const std::unordered_set<data::GCGChooseTargetCharaterType>::allocator_type *)(v86 + 128));
    std::allocator<data::GCGChooseTargetCharaterType>::~allocator((std::allocator<data::GCGChooseTargetCharaterType> *const)(v86 + 128));
    *(_BYTE *)(((v86 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v86 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v86 + 96) >> 3) + 0x7FFF8000) = -8;
    v62 = ((v86 + 544) >> 3) + 2147450880;
    *(_WORD *)v62 = -1800;
    *(_BYTE *)(v62 + 2) = -8;
    p_target_character = &config_effect->target_character;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGChooseTargetCharaterType>,data::GCGChooseTargetCharaterType>(
            (std::unordered_set<data::GCGChooseTargetCharaterType> *)(v86 + 1472),
            &config_effect->target_character) )
    {
      *(_DWORD *)(((v86 + 1248) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v86 + 1248) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v86 + 1279) >> 3) + 0x7FFF8000) != 0
        && (char)((v86 - 1) & 7) >= *(_BYTE *)(((v86 + 1279) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v86 + 1248, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v86 + 1248),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectReviveCharacterValidatorFunc",
        687);
      v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v86 + 1248),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v65 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v64, (const char (*)[31])byte_1A5047A0);
      v66 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              v65,
              (const char (*)[31])"config_effect.target_character");
      v67 = " value:";
      v68 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v66, (const char (*)[8])" value:");
      *(_BYTE *)(((v86 + 224) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->target_character >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->target_character);
      }
      target_character = config_effect->target_character;
      v70 = *(_BYTE *)(((v86 + 224) >> 3) + 0x7FFF8000);
      if ( v70 != 0 && v70 <= 3 )
      {
        target_character = v86 + 224;
        LOBYTE(v67) = v70 != 0;
        __asan_report_store4(v86 + 224, v67);
      }
      *(_DWORD *)(v86 + 224) = target_character;
      p_target_character = (data::GCGChooseTargetCharaterType *)(v86 + 224);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, (const unsigned int *)(v86 + 224));
      *(_BYTE *)(((v86 + 224) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 1248));
      *(_DWORD *)(((v86 + 1248) >> 3) + 0x7FFF8000) = -117901064;
      v87 = -1;
      v71 = 0;
    }
    else
    {
      v71 = 1;
    }
    std::unordered_set<data::GCGChooseTargetCharaterType>::~unordered_set((std::unordered_set<data::GCGChooseTargetCharaterType> *const)(v86 + 1472));
    v72 = ((v86 + 1472) >> 3) + 2147450880;
    *(_DWORD *)v72 = -117901064;
    *(_WORD *)(v72 + 4) = -1800;
    *(_BYTE *)(v72 + 6) = -8;
    if ( v71 == 1 )
    {
      v73 = ((v86 + 1568) >> 3) + 2147450880;
      *(_DWORD *)v73 = 0;
      *(_WORD *)(v73 + 4) = 0;
      *(_BYTE *)(v73 + 6) = 0;
      *(_WORD *)(((v86 + 320) >> 3) + 0x7FFF8000) = 1024;
      if ( *(_BYTE *)(((v86 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v86 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v86 + 320, p_target_character);
      *(_DWORD *)(v86 + 320) = 0;
      v74 = (((_BYTE)v86 + 68) & 7u) + 3;
      if ( *(_BYTE *)(((v86 + 324) >> 3) + 0x7FFF8000) != 0
        && (char)(((v86 + 68) & 7) + 3) >= *(_BYTE *)(((v86 + 324) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v86 + 324, v74);
      }
      *(_DWORD *)(v86 + 324) = 1;
      if ( *(_BYTE *)(((v86 + 328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v86 + 328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v86 + 328, v74);
      *(_DWORD *)(v86 + 328) = 2;
      v85._M_array = (std::initializer_list<data::GCGEffectCampType>::iterator)(v86 + 320);
      v85._M_len = 3LL;
      *(_BYTE *)(((v86 + 144) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v86 + 160) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v86 + 176) >> 3) + 0x7FFF8000) = 1;
      std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v86 + 176));
      std::unordered_set<data::GCGEffectCampType>::unordered_set(
        (std::unordered_set<data::GCGEffectCampType> *const)(v86 + 1568),
        v85,
        0LL,
        (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v86 + 144),
        (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v86 + 160),
        (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v86 + 176));
      std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v86 + 176));
      *(_BYTE *)(((v86 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v86 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v86 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_WORD *)(((v86 + 320) >> 3) + 0x7FFF8000) = -1800;
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
              (std::unordered_set<data::GCGEffectCampType> *)(v86 + 1568),
              &config_effect->target_camp) )
      {
        *(_DWORD *)(((v86 + 1312) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v86 + 1312) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v86 + 1343) >> 3) + 0x7FFF8000) != 0
          && (char)((v86 + 63) & 7) >= *(_BYTE *)(((v86 + 1343) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v86 + 1312, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v86 + 1312),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectReviveCharacterValidatorFunc",
          693);
        v75 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v86 + 1312),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v76 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v75, (const char (*)[31])byte_1A5047A0);
        v77 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                v76,
                (const char (*)[26])"config_effect.target_camp");
        v78 = " value:";
        v79 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v77, (const char (*)[8])" value:");
        *(_BYTE *)(((v86 + 240) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                       + 0x7FFF8000) )
        {
          __asan_report_load4(&config_effect->target_camp);
        }
        target_camp = config_effect->target_camp;
        v81 = *(_BYTE *)(((v86 + 240) >> 3) + 0x7FFF8000);
        if ( v81 != 0 && v81 <= 3 )
        {
          target_camp = v86 + 240;
          LOBYTE(v78) = v81 != 0;
          __asan_report_store4(v86 + 240, v78);
        }
        *(_DWORD *)(v86 + 240) = target_camp;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v79, (const unsigned int *)(v86 + 240));
        *(_BYTE *)(((v86 + 240) >> 3) + 0x7FFF8000) = -8;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v86 + 1312));
        *(_DWORD *)(((v86 + 1312) >> 3) + 0x7FFF8000) = -117901064;
        v87 = -1;
        v82 = 0;
      }
      else
      {
        v82 = 1;
      }
      std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v86 + 1568));
      if ( v82 == 1 )
        v87 = 0;
    }
  }
  if ( v90 == (char *)v86 )
  {
    v5[268431360] = 0LL;
    *(_QWORD *)((char *)v5 + 2147451068) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 268431361) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 196) & 0xFFFFFFF8) >> 3));
    v5[268431385] = 0LL;
  }
  else
  {
    *(_QWORD *)v86 = 1172321806LL;
    __asan_stack_free_5(v86, 1664LL, v90);
  }
  return v87;
};

// Line 701: range 000000000F1FE5AF-000000000F1FEFA3
int32_t __cdecl ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:701 64 8 13 __for_end:701 96 16 26 cast_config_effect_ptr:701 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidator",
        701);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
        v12,
        (const char (*)[50])"ConfigGCGExecEffectAdvanceProcessWaitingCharacter");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidator",
            701);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidator",
              701);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidator",
          701);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidator",
    701);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
    v9,
    (const char (*)[50])"ConfigGCGExecEffectAdvanceProcessWaitingCharacter");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 702: range 000000000F1FEFA4-000000000F1FF574
int32_t __cdecl ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectAdvanceProcessWaitingCharacter *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  common::milog::MiLogStream *v11; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v13; // al
  int v14; // r14d
  int32_t result; // eax
  int32_t v16; // [rsp+14h] [rbp-16Ch]
  char v18[336]; // [rsp+30h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 12 9 <unknown> 128 32 9"
                        " <unknown> 192 56 23 valid_enum_type_set:705";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556927;
  v5[536862723] = -219020288;
  v5[536862725] = -218959118;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 96, config_skill);
  *(_DWORD *)(v3 + 96) = 0;
  v6 = (((_BYTE)v3 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 100) & 7) + 3) >= *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 100, v6);
  }
  *(_DWORD *)(v3 + 100) = 1;
  if ( *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 104, v6);
  *(_DWORD *)(v3 + 104) = 2;
  std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectCampType>::unordered_set(
    (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 192),
    (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 96),
    0LL,
    (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_WORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -1800;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
          (std::unordered_set<data::GCGEffectCampType> *)(v3 + 192),
          &config_effect->target_camp) )
  {
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectAdvanceProcessWaitingCharacterValidatorFunc",
      705);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v7, (const char (*)[31])byte_1A5047A0);
    v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           v8,
           (const char (*)[26])"config_effect.target_camp");
    v10 = " value:";
    v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->target_camp);
    }
    target_camp = config_effect->target_camp;
    v13 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      target_camp = v3 + 80;
      LOBYTE(v10) = v13 != 0;
      __asan_report_store4(v3 + 80, v10);
    }
    *(_DWORD *)(v3 + 80) = target_camp;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 80));
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
    v16 = -1;
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 192));
  if ( v14 == 1 )
    v16 = 0;
  result = v16;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 713: range 000000000F1FF575-000000000F1FFF69
int32_t __cdecl ConfigGCGExecEffectFinishDuelValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char *v10; // rsi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // eax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectFinishDuel,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  int32_t result; // eax
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-200h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+28h] [rbp-1F8h]
  char v24[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v5 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(448LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 8 15 __for_begin:713 64 8 13 __for_end:713 96 16 26 cast_config_effect_ptr:713 128 32 9 <un"
                        "known> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v5 + 16) = ConfigGCGExecEffectFinishDuelValidator;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959118;
  v7[536862731] = -218959118;
  v7[536862733] = -202116109;
  if ( !std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(_WORD *)(((v5 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectFinishDuel,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v5 + 96));
    v10 = (char *)(v5 + 96);
    if ( std::operator==<data::ConfigGCGExecEffectFinishDuel>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectFinishDuel> *)(v5 + 96)) )
    {
      if ( *(char *)(((v5 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v5 - 64 + 31) & 7) >= *(_BYTE *)(((v5 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v5 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v5 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectFinishDuelValidator",
        713);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v5 + 192),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v11,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        v12,
        (const char (*)[30])"ConfigGCGExecEffectFinishDuel");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 192));
      *(_DWORD *)(((v5 + 192) >> 3) + 0x7FFF8000) = -117901064;
      v4 = -1;
    }
    else
    {
      if ( !is_reaction )
      {
        if ( std::vector<data::ConfigGCGTrigger>::empty(&config_skill->trigger_list) )
        {
          if ( *(char *)(((v5 + 256) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) != 0
            && (char)((v5 - 64 + 95) & 7) >= *(_BYTE *)(((v5 + 287) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v5 + 256, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v5 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGExecEffectFinishDuelValidator",
            713);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v5 + 256),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])"TRIGGER not found");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 256));
          *(_DWORD *)(((v5 + 256) >> 3) + 0x7FFF8000) = -117901064;
          v4 = -1;
          goto LABEL_41;
        }
        __for_range = &config_skill->trigger_list;
        if ( *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 32, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        if ( *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v5 + 64, v10);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v5 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v5 + 64)) )
          {
            v15 = 1;
            goto LABEL_39;
          }
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_INVALID )
          {
            if ( *(char *)(((v5 + 320) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) != 0
              && (char)((v5 + 95) & 7) >= *(_BYTE *)(((v5 + 351) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v5 + 320, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v5 + 320),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectFinishDuelValidator",
              713);
            v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v5 + 320),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])"invalid trigger");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 320));
            *(_DWORD *)(((v5 + 320) >> 3) + 0x7FFF8000) = -117901064;
            v4 = -1;
            v15 = 0;
            goto LABEL_39;
          }
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_DURATION )
            break;
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v5 + 32));
        }
        if ( *(char *)(((v5 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v5 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v5 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectFinishDuelValidator",
          713);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v5 + 384),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v16, (const char (*)[32])byte_1A504000);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 384));
        *(_DWORD *)(((v5 + 384) >> 3) + 0x7FFF8000) = -117901064;
        v4 = -1;
        v15 = 0;
LABEL_39:
        *(_BYTE *)(((v5 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v5 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( v15 != 1 )
          goto LABEL_41;
      }
      v17 = std::__shared_ptr_access<data::ConfigGCGExecEffectFinishDuel,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectFinishDuel,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v4 = ConfigGCGExecEffectFinishDuelValidatorFunc(config, config_skill, v17);
    }
LABEL_41:
    std::shared_ptr<data::ConfigGCGExecEffectFinishDuel>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectFinishDuel> *const)(v5 + 96));
    goto LABEL_42;
  }
  if ( *(char *)(((v5 + 128) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) != 0
    && (char)((v5 - 97) & 7) >= *(_BYTE *)(((v5 + 159) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v5 + 128, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v5 + 128),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "ConfigGCGExecEffectFinishDuelValidator",
    713);
  v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
         (common::milog::MiLogStream *const)(v5 + 128),
         (const char (*)[16])"[CONFIG_ERROR] ");
  v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
         v8,
         (const char (*)[36])"config_effect_ptr is nullptr, name:");
  common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
    v9,
    (const char (*)[30])"ConfigGCGExecEffectFinishDuel");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v5 + 128));
  v4 = -1;
LABEL_42:
  result = v4;
  if ( v24 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 714: range 000000000F1FFF6A-000000000F20053A
int32_t __cdecl ConfigGCGExecEffectFinishDuelValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectFinishDuel *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const char *v10; // rsi
  common::milog::MiLogStream *v11; // rcx
  data::GCGEffectCampType target_camp; // edi
  char v13; // al
  int v14; // r14d
  int32_t result; // eax
  int32_t v16; // [rsp+14h] [rbp-16Ch]
  char v18[336]; // [rsp+30h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 12 9 <unknown> 128 32 9"
                        " <unknown> 192 56 23 valid_enum_type_set:717";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectFinishDuelValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556927;
  v5[536862723] = -219020288;
  v5[536862725] = -218959118;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 96, config_skill);
  *(_DWORD *)(v3 + 96) = 1;
  v6 = (((_BYTE)v3 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 100) & 7) + 3) >= *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 100, v6);
  }
  *(_DWORD *)(v3 + 100) = 2;
  if ( *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 104, v6);
  *(_DWORD *)(v3 + 104) = 3;
  std::allocator<data::GCGEffectCampType>::allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectCampType>::unordered_set(
    (std::unordered_set<data::GCGEffectCampType> *const)(v3 + 192),
    (std::initializer_list<data::GCGEffectCampType>)__PAIR128__(3LL, v3 + 96),
    0LL,
    (const std::unordered_set<data::GCGEffectCampType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectCampType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCampType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectCampType>::~allocator((std::allocator<data::GCGEffectCampType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_WORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -1800;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCampType>,data::GCGEffectCampType>(
          (std::unordered_set<data::GCGEffectCampType> *)(v3 + 192),
          &config_effect->target_camp) )
  {
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectFinishDuelValidatorFunc",
      717);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v7, (const char (*)[31])byte_1A5047A0);
    v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           v8,
           (const char (*)[26])"config_effect.target_camp");
    v10 = " value:";
    v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->target_camp >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->target_camp);
    }
    target_camp = config_effect->target_camp;
    v13 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
    if ( v13 != 0 && v13 <= 3 )
    {
      target_camp = v3 + 80;
      LOBYTE(v10) = v13 != 0;
      __asan_report_store4(v3 + 80, v10);
    }
    *(_DWORD *)(v3 + 80) = target_camp;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 80));
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
    v16 = -1;
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  std::unordered_set<data::GCGEffectCampType>::~unordered_set((std::unordered_set<data::GCGEffectCampType> *const)(v3 + 192));
  if ( v14 == 1 )
    v16 = 0;
  result = v16;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 728: range 000000000F20053B-000000000F200B16
int32_t __cdecl ConfigGCGExecEffectDamageReviseValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectDamageRevise,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:728 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGExecEffectDamageReviseValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDamageReviseValidator",
      728);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      v8,
      (const char (*)[32])"ConfigGCGExecEffectDamageRevise");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectDamageRevise,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGExecEffectDamageRevise>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectDamageRevise> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageReviseValidator",
        728);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
        v11,
        (const char (*)[32])"ConfigGCGExecEffectDamageRevise");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageReviseValidator",
          728);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGExecEffectDamageRevise,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectDamageRevise,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGExecEffectDamageReviseValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGExecEffectDamageRevise>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectDamageRevise> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 729: range 000000000F200B17-000000000F202E80
int32_t __cdecl ConfigGCGExecEffectDamageReviseValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectDamageRevise *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // dl
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  char v28; // dl
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  char v32; // dl
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  char v40; // dl
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  char v44; // dl
  common::milog::MiLogStream *v45; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v46; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  __int64 type; // rsi
  unsigned __int64 v49; // rax
  unsigned __int64 v50; // rax
  unsigned __int64 v51; // rax
  __int64 v52; // rsi
  __int64 v53; // rsi
  __int64 v54; // rsi
  __int64 v55; // rsi
  unsigned __int64 v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  const char *v60; // rsi
  common::milog::MiLogStream *v61; // rcx
  data::GCGEffectDamageElementType effect_element_type; // edi
  char v63; // al
  int v64; // r14d
  std::initializer_list<data::GCGDeclaredValueType> __lg; // [rsp+10h] [rbp-5F0h]
  int __l; // [rsp+10h] [rbp-5F0h]
  int __la; // [rsp+10h] [rbp-5F0h]
  int __lb; // [rsp+10h] [rbp-5F0h]
  int __lc; // [rsp+10h] [rbp-5F0h]
  int __ld; // [rsp+10h] [rbp-5F0h]
  int __le; // [rsp+10h] [rbp-5F0h]
  int __lf; // [rsp+10h] [rbp-5F0h]
  int32_t v74; // [rsp+20h] [rbp-5E0h]
  common::milog::MiLogStream *v75; // [rsp+20h] [rbp-5E0h]
  char v77[1456]; // [rsp+50h] [rbp-5B0h] BYREF

  v3 = (unsigned __int64)v77;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1408LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "31 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 8 8 iter:731 208 8 9 <unknow"
                        "n> 240 16 22 declared_value_ptr:731 272 16 22 declared_value_ptr:731 304 16 22 declared_value_pt"
                        "r:731 336 16 22 declared_value_ptr:731 368 16 22 declared_value_ptr:731 400 16 22 declared_value"
                        "_ptr:731 432 32 9 <unknown> 496 32 9 <unknown> 560 32 9 <unknown> 624 32 9 <unknown> 688 32 9 <u"
                        "nknown> 752 32 9 <unknown> 816 32 9 <unknown> 880 32 9 <unknown> 944 32 9 <unknown> 1008 32 9 <u"
                        "nknown> 1072 32 9 <unknown> 1136 40 9 <unknown> 1216 56 28 valid_declared_value_set:731 1312 56 "
                        "23 valid_enum_type_set:733";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectDamageReviseValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = 61956;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = 62194;
  v5[536862728] = 62194;
  v5[536862729] = 62194;
  v5[536862730] = 62194;
  v5[536862731] = 62194;
  v5[536862732] = 62194;
  v5[536862733] = 62194;
  v5[536862734] = -219021312;
  v5[536862735] = 62194;
  v5[536862736] = -219021312;
  v5[536862737] = 62194;
  v5[536862738] = -219021312;
  v5[536862739] = 62194;
  v5[536862740] = -219021312;
  v5[536862741] = 62194;
  v5[536862742] = -219021312;
  v5[536862743] = 62194;
  v5[536862744] = -219021312;
  v5[536862745] = 62194;
  v5[536862746] = -219021312;
  v5[536862747] = 62194;
  v5[536862748] = -219021312;
  v5[536862749] = 62194;
  v5[536862750] = -219021312;
  v5[536862751] = 62194;
  v5[536862752] = -219021312;
  v5[536862753] = 62194;
  v5[536862754] = -219021312;
  v5[536862755] = 62194;
  v5[536862756] = -234881024;
  v5[536862757] = -218959118;
  v5[536862759] = -234881024;
  v5[536862760] = -218959118;
  v5[536862762] = -218103808;
  v5[536862763] = -202116109;
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 128, config_skill);
  *(_DWORD *)(v3 + 128) = 4;
  __lg._M_array = (std::initializer_list<data::GCGDeclaredValueType>::iterator)(v3 + 128);
  __lg._M_len = 1LL;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 64));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1216),
    __lg,
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 176, v3 + 128);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 176) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 208, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 208) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 176),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 208));
  *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 432, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 432),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDamageReviseValidatorFunc",
      731);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 432),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 432));
    *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = -117901064;
    v74 = -1;
    __l = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 496) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 15) & 7) >= *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 496, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 496),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageReviseValidatorFunc",
        731);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 496),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      v11 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 496));
      *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = -117901064;
      v74 = -1;
      __l = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v3 + 1216),
              &v16->type) )
      {
        *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 560) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 560, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 560),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageReviseValidatorFunc",
          731);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 560),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        v11 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 560));
        *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = -117901064;
        v74 = -1;
        __l = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 240) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 240));
            v11 = (const char *)(v3 + 240);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v3 + 240)) )
            {
              *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 624) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 624, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 624),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageReviseValidatorFunc",
                731);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 624),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 624));
              *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __la = 0;
            }
            else
            {
              v23 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
              v24 = *(_BYTE *)(((unsigned __int64)&v23->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v24 != 0;
              if ( v24 != 0 && v24 <= 3 )
                __asan_report_load4(&v23->value);
              __la = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v3 + 240));
            *(_WORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = -1800;
            if ( __la )
              goto LABEL_98;
            __l = 0;
            break;
          case Element:
            *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 272));
            v11 = (const char *)(v3 + 272);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v3 + 272)) )
            {
              *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 688) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 688, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 688),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageReviseValidatorFunc",
                731);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 688),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v25,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v26,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 688));
              *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __lb = 0;
            }
            else
            {
              v27 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 272));
              v28 = *(_BYTE *)(((unsigned __int64)&v27->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v28 != 0;
              if ( v28 != 0 && v28 <= 3 )
                __asan_report_load4(&v27->value);
              __lb = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v3 + 272));
            *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -1800;
            if ( __lb )
              goto LABEL_98;
            __l = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 304));
            v11 = (const char *)(v3 + 304);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v3 + 304)) )
            {
              *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 752) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 15) & 7) >= *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 752, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 752),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageReviseValidatorFunc",
                731);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 752),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v29,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v30,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 752));
              *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __lc = 0;
            }
            else
            {
              v31 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 304));
              v32 = *(_BYTE *)(((unsigned __int64)&v31->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v32 != 0;
              if ( v32 != 0 && v32 <= 3 )
                __asan_report_load4(&v31->value);
              __lc = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v3 + 304));
            *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = -1800;
            if ( __lc )
              goto LABEL_98;
            __l = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 368) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 368));
            v11 = (const char *)(v3 + 368);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v3 + 368)) )
            {
              *(_DWORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 880) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 911) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 911) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 880, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 880),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageReviseValidatorFunc",
                731);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 880),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 880));
              *(_DWORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __le = 0;
            }
            else
            {
              v39 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 368));
              v40 = *(_BYTE *)(((unsigned __int64)&v39->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v40 != 0;
              if ( v40 != 0 && v40 <= 3 )
                __asan_report_load4(&v39->value);
              __le = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v3 + 368));
            *(_WORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = -1800;
            if ( __le )
              goto LABEL_98;
            __l = 0;
            break;
          case Heal:
            *(_WORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 336) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 336));
            v11 = (const char *)(v3 + 336);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v3 + 336)) )
            {
              *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 816) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 847) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 847) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 816, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 816),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageReviseValidatorFunc",
                731);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 816),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 816));
              *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __ld = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 336));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              __ld = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v3 + 336));
            *(_WORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -1800;
            if ( __ld )
              goto LABEL_98;
            __l = 0;
            break;
          case TokenType:
            *(_WORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 400) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 400));
            v11 = (const char *)(v3 + 400);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v3 + 400)) )
            {
              *(_DWORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 944) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 975) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 975) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 944, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 944),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageReviseValidatorFunc",
                731);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 944),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v42,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 944));
              *(_DWORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __lf = 0;
            }
            else
            {
              v43 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 400));
              v44 = *(_BYTE *)(((unsigned __int64)&v43->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v44 != 0;
              if ( v44 != 0 && v44 <= 3 )
                __asan_report_load4(&v43->value);
              __lf = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v3 + 400));
            *(_WORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -1800;
            if ( __lf )
LABEL_98:
              __l = 1;
            else
              __l = 0;
            break;
          default:
            *(_DWORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1008) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1039) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 15) & 7) >= *(_BYTE *)(((v3 + 1039) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1008, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1008),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDamageReviseValidatorFunc",
              731);
            v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1008),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v75 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v45,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
            v46 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            v47 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v46->second);
            if ( *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v47->type);
            }
            type = (unsigned int)v47->type;
            if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 144, type);
            *(_DWORD *)(v3 + 144) = type;
            v11 = (const char *)(v3 + 144);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v75,
              (const unsigned int *)(v3 + 144));
            *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1008));
            *(_DWORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = -117901064;
            v74 = -1;
            __l = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1216));
  v49 = ((v3 + 1216) >> 3) + 2147450880;
  *(_DWORD *)v49 = -117901064;
  *(_WORD *)(v49 + 4) = -1800;
  *(_BYTE *)(v49 + 6) = -8;
  *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
  if ( __l == 1 )
  {
    v50 = ((v3 + 1312) >> 3) + 2147450880;
    *(_DWORD *)v50 = 0;
    *(_WORD *)(v50 + 4) = 0;
    *(_BYTE *)(v50 + 6) = 0;
    v51 = ((v3 + 1136) >> 3) + 2147450880;
    *(_DWORD *)v51 = 0;
    *(_BYTE *)(v51 + 4) = 0;
    if ( *(_BYTE *)(((v3 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1136, v11);
    *(_DWORD *)(v3 + 1136) = 0;
    v52 = (((_BYTE)v3 + 116) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1140) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 116) & 7) + 3) >= *(_BYTE *)(((v3 + 1140) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1140, v52);
    }
    *(_DWORD *)(v3 + 1140) = 1;
    if ( *(_BYTE *)(((v3 + 1144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1144, v52);
    *(_DWORD *)(v3 + 1144) = 2;
    v53 = (((_BYTE)v3 + 124) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1148) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 124) & 7) + 3) >= *(_BYTE *)(((v3 + 1148) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1148, v53);
    }
    *(_DWORD *)(v3 + 1148) = 3;
    if ( *(_BYTE *)(((v3 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1152, v53);
    *(_DWORD *)(v3 + 1152) = 4;
    v54 = (((_BYTE)v3 - 124) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1156) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 124) & 7) + 3) >= *(_BYTE *)(((v3 + 1156) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1156, v54);
    }
    *(_DWORD *)(v3 + 1156) = 5;
    if ( *(_BYTE *)(((v3 + 1160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1160, v54);
    *(_DWORD *)(v3 + 1160) = 6;
    v55 = (((_BYTE)v3 - 116) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1164) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 116) & 7) + 3) >= *(_BYTE *)(((v3 + 1164) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1164, v55);
    }
    *(_DWORD *)(v3 + 1164) = 7;
    if ( *(_BYTE *)(((v3 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1168, v55);
    *(_DWORD *)(v3 + 1168) = 8;
    if ( *(_BYTE *)(((v3 + 1172) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 108) & 7) + 3) >= *(_BYTE *)(((v3 + 1172) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1172, (((_BYTE)v3 - 108) & 7u) + 3);
    }
    *(_DWORD *)(v3 + 1172) = 10;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectDamageElementType>::allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 112));
    std::unordered_set<data::GCGEffectDamageElementType>::unordered_set(
      (std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 1312),
      (std::initializer_list<data::GCGEffectDamageElementType>)__PAIR128__(10LL, v3 + 1136),
      0LL,
      (const std::unordered_set<data::GCGEffectDamageElementType>::hasher *)(v3 + 80),
      (const std::unordered_set<data::GCGEffectDamageElementType>::key_equal *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectDamageElementType>::allocator_type *)(v3 + 112));
    std::allocator<data::GCGEffectDamageElementType>::~allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 112));
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    v56 = ((v3 + 1136) >> 3) + 2147450880;
    *(_DWORD *)v56 = -117901064;
    *(_BYTE *)(v56 + 4) = -8;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectDamageElementType>,data::GCGEffectDamageElementType>(
            (std::unordered_set<data::GCGEffectDamageElementType> *)(v3 + 1312),
            &config_effect->effect_element_type) )
    {
      *(_DWORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1072) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1103) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 1103) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1072, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1072),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageReviseValidatorFunc",
        733);
      v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 1072),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v58 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v57, (const char (*)[31])byte_1A5047A0);
      v59 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v58,
              (const char (*)[34])"config_effect.effect_element_type");
      v60 = " value:";
      v61 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v59, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->effect_element_type);
      }
      effect_element_type = config_effect->effect_element_type;
      v63 = *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000);
      if ( v63 != 0 && v63 <= 3 )
      {
        effect_element_type = v3 + 160;
        LOBYTE(v60) = v63 != 0;
        __asan_report_store4(v3 + 160, v60);
      }
      *(_DWORD *)(v3 + 160) = effect_element_type;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v61, (const unsigned int *)(v3 + 160));
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1072));
      *(_DWORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = -117901064;
      v74 = -1;
      v64 = 0;
    }
    else
    {
      v64 = 1;
    }
    std::unordered_set<data::GCGEffectDamageElementType>::~unordered_set((std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 1312));
    if ( v64 == 1 )
      v74 = 0;
  }
  if ( v77 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF809C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 164) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A8) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1408LL, v77);
  }
  return v74;
};

// Line 748: range 000000000F202E81-000000000F20345C
int32_t __cdecl ConfigGCGEffectBeingHitDamageReviseValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectBeingHitDamageRevise,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:748 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectBeingHitDamageReviseValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectBeingHitDamageReviseValidator",
      748);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      v8,
      (const char (*)[36])"ConfigGCGEffectBeingHitDamageRevise");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectBeingHitDamageRevise,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectBeingHitDamageRevise>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectBeingHitDamageRevise> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectBeingHitDamageReviseValidator",
        748);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        v11,
        (const char (*)[36])"ConfigGCGEffectBeingHitDamageRevise");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectBeingHitDamageReviseValidator",
          748);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectBeingHitDamageRevise,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectBeingHitDamageRevise,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectBeingHitDamageReviseValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectBeingHitDamageRevise>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectBeingHitDamageRevise> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 749: range 000000000F20345D-000000000F20577E
int32_t __cdecl ConfigGCGEffectBeingHitDamageReviseValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectBeingHitDamageRevise *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // dl
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  char v28; // dl
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  char v32; // dl
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // dl
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  char v40; // dl
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  char v44; // dl
  common::milog::MiLogStream *v45; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v46; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  __int64 type; // rsi
  unsigned __int64 v49; // rax
  unsigned __int64 v50; // rax
  unsigned __int64 v51; // rax
  __int64 v52; // rsi
  __int64 v53; // rsi
  __int64 v54; // rsi
  __int64 v55; // rsi
  unsigned __int64 v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  const char *v60; // rsi
  common::milog::MiLogStream *v61; // rcx
  data::GCGEffectDamageElementType effect_element_type; // edi
  char v63; // al
  int v64; // r14d
  std::initializer_list<data::GCGDeclaredValueType> __lg; // [rsp+10h] [rbp-5F0h]
  int __l; // [rsp+10h] [rbp-5F0h]
  int __la; // [rsp+10h] [rbp-5F0h]
  int __lb; // [rsp+10h] [rbp-5F0h]
  int __lc; // [rsp+10h] [rbp-5F0h]
  int __ld; // [rsp+10h] [rbp-5F0h]
  int __le; // [rsp+10h] [rbp-5F0h]
  int __lf; // [rsp+10h] [rbp-5F0h]
  int32_t v74; // [rsp+20h] [rbp-5E0h]
  common::milog::MiLogStream *v75; // [rsp+20h] [rbp-5E0h]
  char v77[1456]; // [rsp+50h] [rbp-5B0h] BYREF

  v3 = (unsigned __int64)v77;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1408LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "31 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 8 8 iter:751 208 8 9 <unknow"
                        "n> 240 16 22 declared_value_ptr:751 272 16 22 declared_value_ptr:751 304 16 22 declared_value_pt"
                        "r:751 336 16 22 declared_value_ptr:751 368 16 22 declared_value_ptr:751 400 16 22 declared_value"
                        "_ptr:751 432 32 9 <unknown> 496 32 9 <unknown> 560 32 9 <unknown> 624 32 9 <unknown> 688 32 9 <u"
                        "nknown> 752 32 9 <unknown> 816 32 9 <unknown> 880 32 9 <unknown> 944 32 9 <unknown> 1008 32 9 <u"
                        "nknown> 1072 32 9 <unknown> 1136 36 9 <unknown> 1216 56 28 valid_declared_value_set:751 1312 56 "
                        "23 valid_enum_type_set:753";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectBeingHitDamageReviseValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556924;
  v5[536862725] = 61956;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = 62194;
  v5[536862728] = 62194;
  v5[536862729] = 62194;
  v5[536862730] = 62194;
  v5[536862731] = 62194;
  v5[536862732] = 62194;
  v5[536862733] = 62194;
  v5[536862734] = -219021312;
  v5[536862735] = 62194;
  v5[536862736] = -219021312;
  v5[536862737] = 62194;
  v5[536862738] = -219021312;
  v5[536862739] = 62194;
  v5[536862740] = -219021312;
  v5[536862741] = 62194;
  v5[536862742] = -219021312;
  v5[536862743] = 62194;
  v5[536862744] = -219021312;
  v5[536862745] = 62194;
  v5[536862746] = -219021312;
  v5[536862747] = 62194;
  v5[536862748] = -219021312;
  v5[536862749] = 62194;
  v5[536862750] = -219021312;
  v5[536862751] = 62194;
  v5[536862752] = -219021312;
  v5[536862753] = 62194;
  v5[536862754] = -219021312;
  v5[536862755] = 62194;
  v5[536862756] = -234618880;
  v5[536862757] = -218959118;
  v5[536862759] = -234881024;
  v5[536862760] = -218959118;
  v5[536862762] = -218103808;
  v5[536862763] = -202116109;
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 128, config_skill);
  *(_DWORD *)(v3 + 128) = 4;
  __lg._M_array = (std::initializer_list<data::GCGDeclaredValueType>::iterator)(v3 + 128);
  __lg._M_len = 1LL;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 64));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1216),
    __lg,
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 176, v3 + 128);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 176) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 208, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 208) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 176),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 208));
  *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 432) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 432, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 432),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
      751);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 432),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    v11 = "declared_output_key";
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 432));
    *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = -117901064;
    v74 = -1;
    __l = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 496) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 15) & 7) >= *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 496, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 496),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
        751);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 496),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      v11 = "declared_output_key";
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 496));
      *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = -117901064;
      v74 = -1;
      __l = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v3 + 1216),
              &v16->type) )
      {
        *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 560) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 591) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 560, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 560),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
          751);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 560),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        v11 = "declared_output_key";
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 560));
        *(_DWORD *)(((v3 + 560) >> 3) + 0x7FFF8000) = -117901064;
        v74 = -1;
        __l = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 240) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 240));
            v11 = (const char *)(v3 + 240);
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v3 + 240)) )
            {
              *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 624) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 655) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 624, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 624),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
                751);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 624),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 624));
              *(_DWORD *)(((v3 + 624) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __la = 0;
            }
            else
            {
              v23 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
              v24 = *(_BYTE *)(((unsigned __int64)&v23->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v24 != 0;
              if ( v24 != 0 && v24 <= 3 )
                __asan_report_load4(&v23->value);
              __la = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v3 + 240));
            *(_WORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = -1800;
            if ( __la )
              goto LABEL_98;
            __l = 0;
            break;
          case Element:
            *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 272));
            v11 = (const char *)(v3 + 272);
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v3 + 272)) )
            {
              *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 688) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 719) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 688, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 688),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
                751);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 688),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v25,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v26,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 688));
              *(_DWORD *)(((v3 + 688) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __lb = 0;
            }
            else
            {
              v27 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 272));
              v28 = *(_BYTE *)(((unsigned __int64)&v27->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v28 != 0;
              if ( v28 != 0 && v28 <= 3 )
                __asan_report_load4(&v27->value);
              __lb = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v3 + 272));
            *(_WORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -1800;
            if ( __lb )
              goto LABEL_98;
            __l = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 304));
            v11 = (const char *)(v3 + 304);
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v3 + 304)) )
            {
              *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 752) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 15) & 7) >= *(_BYTE *)(((v3 + 783) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 752, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 752),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
                751);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 752),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v29,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v30,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 752));
              *(_DWORD *)(((v3 + 752) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __lc = 0;
            }
            else
            {
              v31 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 304));
              v32 = *(_BYTE *)(((unsigned __int64)&v31->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v32 != 0;
              if ( v32 != 0 && v32 <= 3 )
                __asan_report_load4(&v31->value);
              __lc = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v3 + 304));
            *(_WORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = -1800;
            if ( __lc )
              goto LABEL_98;
            __l = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 368) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 368));
            v11 = (const char *)(v3 + 368);
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v3 + 368)) )
            {
              *(_DWORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 880) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 911) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 911) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 880, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 880),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
                751);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 880),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 880));
              *(_DWORD *)(((v3 + 880) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __le = 0;
            }
            else
            {
              v39 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 368));
              v40 = *(_BYTE *)(((unsigned __int64)&v39->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v40 != 0;
              if ( v40 != 0 && v40 <= 3 )
                __asan_report_load4(&v39->value);
              __le = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v3 + 368));
            *(_WORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = -1800;
            if ( __le )
              goto LABEL_98;
            __l = 0;
            break;
          case Heal:
            *(_WORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 336) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 336));
            v11 = (const char *)(v3 + 336);
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v3 + 336)) )
            {
              *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 816) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 847) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 847) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 816, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 816),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
                751);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 816),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 816));
              *(_DWORD *)(((v3 + 816) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __ld = 0;
            }
            else
            {
              v35 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 336));
              v36 = *(_BYTE *)(((unsigned __int64)&v35->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v36 != 0;
              if ( v36 != 0 && v36 <= 3 )
                __asan_report_load4(&v35->value);
              __ld = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v3 + 336));
            *(_WORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -1800;
            if ( __ld )
              goto LABEL_98;
            __l = 0;
            break;
          case TokenType:
            *(_WORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            if ( *(_WORD *)(((v3 + 400) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 400));
            v11 = (const char *)(v3 + 400);
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v3 + 400)) )
            {
              *(_DWORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 944) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 975) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 49) & 7) >= *(_BYTE *)(((v3 + 975) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 944, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 944),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
                751);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 944),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              v11 = "declared_output_key";
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v42,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 944));
              *(_DWORD *)(((v3 + 944) >> 3) + 0x7FFF8000) = -117901064;
              v74 = -1;
              __lf = 0;
            }
            else
            {
              v43 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 400));
              v44 = *(_BYTE *)(((unsigned __int64)&v43->value >> 3) + 0x7FFF8000);
              LOBYTE(v11) = v44 != 0;
              if ( v44 != 0 && v44 <= 3 )
                __asan_report_load4(&v43->value);
              __lf = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v3 + 400));
            *(_WORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -1800;
            if ( __lf )
LABEL_98:
              __l = 1;
            else
              __l = 0;
            break;
          default:
            *(_DWORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 1008) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 1039) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 + 15) & 7) >= *(_BYTE *)(((v3 + 1039) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 1008, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 1008),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
              751);
            v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 1008),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v75 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v45,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
            v46 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 176));
            v47 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v46->second);
            if ( *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v47->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v47->type);
            }
            type = (unsigned int)v47->type;
            if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 144, type);
            *(_DWORD *)(v3 + 144) = type;
            v11 = (const char *)(v3 + 144);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v75,
              (const unsigned int *)(v3 + 144));
            *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1008));
            *(_DWORD *)(((v3 + 1008) >> 3) + 0x7FFF8000) = -117901064;
            v74 = -1;
            __l = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1216));
  v49 = ((v3 + 1216) >> 3) + 2147450880;
  *(_DWORD *)v49 = -117901064;
  *(_WORD *)(v49 + 4) = -1800;
  *(_BYTE *)(v49 + 6) = -8;
  *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) = -8;
  if ( __l == 1 )
  {
    v50 = ((v3 + 1312) >> 3) + 2147450880;
    *(_DWORD *)v50 = 0;
    *(_WORD *)(v50 + 4) = 0;
    *(_BYTE *)(v50 + 6) = 0;
    v51 = ((v3 + 1136) >> 3) + 2147450880;
    *(_DWORD *)v51 = 0;
    *(_BYTE *)(v51 + 4) = 4;
    if ( *(_BYTE *)(((v3 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1136, v11);
    *(_DWORD *)(v3 + 1136) = 0;
    v52 = (((_BYTE)v3 + 116) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1140) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 116) & 7) + 3) >= *(_BYTE *)(((v3 + 1140) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1140, v52);
    }
    *(_DWORD *)(v3 + 1140) = 1;
    if ( *(_BYTE *)(((v3 + 1144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1144, v52);
    *(_DWORD *)(v3 + 1144) = 2;
    v53 = (((_BYTE)v3 + 124) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1148) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 124) & 7) + 3) >= *(_BYTE *)(((v3 + 1148) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1148, v53);
    }
    *(_DWORD *)(v3 + 1148) = 3;
    if ( *(_BYTE *)(((v3 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1152, v53);
    *(_DWORD *)(v3 + 1152) = 4;
    v54 = (((_BYTE)v3 - 124) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1156) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 124) & 7) + 3) >= *(_BYTE *)(((v3 + 1156) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1156, v54);
    }
    *(_DWORD *)(v3 + 1156) = 5;
    if ( *(_BYTE *)(((v3 + 1160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1160, v54);
    *(_DWORD *)(v3 + 1160) = 6;
    v55 = (((_BYTE)v3 - 116) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 1164) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 - 116) & 7) + 3) >= *(_BYTE *)(((v3 + 1164) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 1164, v55);
    }
    *(_DWORD *)(v3 + 1164) = 7;
    if ( *(_BYTE *)(((v3 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 1168, v55);
    *(_DWORD *)(v3 + 1168) = 8;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectDamageElementType>::allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 112));
    std::unordered_set<data::GCGEffectDamageElementType>::unordered_set(
      (std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 1312),
      (std::initializer_list<data::GCGEffectDamageElementType>)__PAIR128__(9LL, v3 + 1136),
      0LL,
      (const std::unordered_set<data::GCGEffectDamageElementType>::hasher *)(v3 + 80),
      (const std::unordered_set<data::GCGEffectDamageElementType>::key_equal *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectDamageElementType>::allocator_type *)(v3 + 112));
    std::allocator<data::GCGEffectDamageElementType>::~allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 112));
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    v56 = ((v3 + 1136) >> 3) + 2147450880;
    *(_DWORD *)v56 = -117901064;
    *(_BYTE *)(v56 + 4) = -8;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectDamageElementType>,data::GCGEffectDamageElementType>(
            (std::unordered_set<data::GCGEffectDamageElementType> *)(v3 + 1312),
            &config_effect->effect_element_type) )
    {
      *(_DWORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 1072) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 1103) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 1103) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 1072, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 1072),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectBeingHitDamageReviseValidatorFunc",
        753);
      v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 1072),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v58 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v57, (const char (*)[31])byte_1A5047A0);
      v59 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v58,
              (const char (*)[34])"config_effect.effect_element_type");
      v60 = " value:";
      v61 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v59, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->effect_element_type);
      }
      effect_element_type = config_effect->effect_element_type;
      v63 = *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000);
      if ( v63 != 0 && v63 <= 3 )
      {
        effect_element_type = v3 + 160;
        LOBYTE(v60) = v63 != 0;
        __asan_report_store4(v3 + 160, v60);
      }
      *(_DWORD *)(v3 + 160) = effect_element_type;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v61, (const unsigned int *)(v3 + 160));
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 1072));
      *(_DWORD *)(((v3 + 1072) >> 3) + 0x7FFF8000) = -117901064;
      v74 = -1;
      v64 = 0;
    }
    else
    {
      v64 = 1;
    }
    std::unordered_set<data::GCGEffectDamageElementType>::~unordered_set((std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 1312));
    if ( v64 == 1 )
      v74 = 0;
  }
  if ( v77 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF809C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 164) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A8) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1408LL, v77);
  }
  return v74;
};

// Line 767: range 000000000F20577F-000000000F205D5A
int32_t __cdecl ConfigGCGExecEffectDamageMultipleValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGExecEffectDamageMultiple,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:767 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGExecEffectDamageMultipleValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDamageMultipleValidator",
      767);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      v8,
      (const char (*)[34])"ConfigGCGExecEffectDamageMultiple");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGExecEffectDamageMultiple,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGExecEffectDamageMultiple>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGExecEffectDamageMultiple> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageMultipleValidator",
        767);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        v11,
        (const char (*)[34])"ConfigGCGExecEffectDamageMultiple");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageMultipleValidator",
          767);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGExecEffectDamageMultiple,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGExecEffectDamageMultiple,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGExecEffectDamageMultipleValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGExecEffectDamageMultiple>::~shared_ptr((std::shared_ptr<data::ConfigGCGExecEffectDamageMultiple> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 768: range 000000000F205D5B-000000000F20785F
int32_t __cdecl ConfigGCGExecEffectDamageMultipleValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGExecEffectDamageMultiple *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::DeclaredValueMap *v7; // rdx
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int v11; // r14d
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v15; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v19; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // r14d
  std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  int v27; // r14d
  std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  int v31; // r14d
  std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  int v35; // r14d
  std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  int v39; // r14d
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  int v43; // r14d
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // r14
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v47; // rax
  std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  __int64 type; // rsi
  int32_t v51; // [rsp+14h] [rbp-4BCh]
  char v53[1168]; // [rsp+40h] [rbp-490h] BYREF

  v3 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1120LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "24 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 8 8"
                        " iter:770 160 8 9 <unknown> 192 16 22 declared_value_ptr:770 224 16 22 declared_value_ptr:770 25"
                        "6 16 22 declared_value_ptr:770 288 16 22 declared_value_ptr:770 320 16 22 declared_value_ptr:770"
                        " 352 16 22 declared_value_ptr:770 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 3"
                        "2 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32"
                        " 9 <unknown> 960 32 9 <unknown> 1024 56 28 valid_declared_value_set:770";
  *(_QWORD *)(v3 + 16) = ConfigGCGExecEffectDamageMultipleValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234556924;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -219021312;
  v5[536862729] = -219021312;
  v5[536862730] = -219021312;
  v5[536862731] = -219021312;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -218959118;
  v5[536862739] = -218959118;
  v5[536862741] = -218959118;
  v5[536862743] = -218959118;
  v5[536862745] = -218959118;
  v5[536862747] = -218959118;
  v5[536862749] = -218959118;
  v5[536862751] = -218959118;
  v5[536862753] = -218103808;
  v5[536862754] = -202116109;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 96, config_skill);
  *(_DWORD *)(v3 + 96) = 4;
  std::allocator<data::GCGDeclaredValueType>::allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  std::unordered_set<data::GCGDeclaredValueType>::unordered_set(
    (std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1024),
    (std::initializer_list<data::GCGDeclaredValueType>)__PAIR128__(1LL, v3 + 96),
    0LL,
    (const std::unordered_set<data::GCGDeclaredValueType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGDeclaredValueType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGDeclaredValueType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGDeclaredValueType>::~allocator((std::allocator<data::GCGDeclaredValueType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
  p_declared_value_map = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 128, v3 + 96);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 128) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &config_effect->declared_output_key.key);
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
  v7 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v3 + 160, &config_effect->declared_output_key);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v3 + 160) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v7);
  v8 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 128),
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v3 + 160));
  *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 384) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 415) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 384, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 384),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGExecEffectDamageMultipleValidatorFunc",
      770);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 384),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A5045A0);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v10, (const char (*)[20])"declared_output_key");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 384));
    *(_DWORD *)(((v3 + 384) >> 3) + 0x7FFF8000) = -117901064;
    v51 = -1;
    v11 = 0;
  }
  else
  {
    v12 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
    if ( std::operator==<data::GCGDeclaredValue>(0LL, &v12->second) )
    {
      *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGExecEffectDamageMultipleValidatorFunc",
        770);
      v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 448),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v13, (const char (*)[32])byte_1A504620);
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v14, (const char (*)[20])"declared_output_key");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 448));
      *(_DWORD *)(((v3 + 448) >> 3) + 0x7FFF8000) = -117901064;
      v51 = -1;
      v11 = 0;
    }
    else
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
      v16 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15->second);
      if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGDeclaredValueType>,data::GCGDeclaredValueType>(
              (std::unordered_set<data::GCGDeclaredValueType> *)(v3 + 1024),
              &v16->type) )
      {
        *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGExecEffectDamageMultipleValidatorFunc",
          770);
        v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 512),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v18 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v17, (const char (*)[38])byte_1A504660);
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v18, (const char (*)[20])"declared_output_key");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 512));
        *(_DWORD *)(((v3 + 512) >> 3) + 0x7FFF8000) = -117901064;
        v51 = -1;
        v11 = 0;
      }
      else
      {
        v19 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
        v20 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19->second);
        if ( *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v20->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&v20->type);
        }
        switch ( v20->type )
        {
          case Damage:
            *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
            if ( *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 192));
            if ( std::operator==<data::GCGDeclaredValueDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueDamage> *)(v3 + 192)) )
            {
              *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 576) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 607) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 576, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 576),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageMultipleValidatorFunc",
                770);
              v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 576),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v21,
                      (const char (*)[16])"cast fail, key:");
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v22,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 576));
              *(_DWORD *)(((v3 + 576) >> 3) + 0x7FFF8000) = -117901064;
              v51 = -1;
              v23 = 0;
            }
            else
            {
              v24 = std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              if ( *(_BYTE *)(((unsigned __int64)&v24->value >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v24->value >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v24->value);
              }
              v23 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueDamage> *const)(v3 + 192));
            *(_WORD *)(((v3 + 192) >> 3) + 0x7FFF8000) = -1800;
            if ( v23 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Element:
            *(_WORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
            if ( *(_WORD *)(((v3 + 224) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueElement,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 224));
            if ( std::operator==<data::GCGDeclaredValueElement>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueElement> *)(v3 + 224)) )
            {
              *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 671) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 640, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 640),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageMultipleValidatorFunc",
                770);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 640),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v25,
                      (const char (*)[16])"cast fail, key:");
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v26,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 640));
              *(_DWORD *)(((v3 + 640) >> 3) + 0x7FFF8000) = -117901064;
              v51 = -1;
              v27 = 0;
            }
            else
            {
              v28 = std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( *(_BYTE *)(((unsigned __int64)&v28->value >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v28->value >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v28->value);
              }
              v27 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueElement>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueElement> *const)(v3 + 224));
            *(_WORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -1800;
            if ( v27 )
              goto LABEL_98;
            v11 = 0;
            break;
          case IndirectDamage:
            *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
            if ( *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueIndirectDamage,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 256));
            if ( std::operator==<data::GCGDeclaredValueIndirectDamage>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *)(v3 + 256)) )
            {
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 704) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 735) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 704, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 704),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageMultipleValidatorFunc",
                770);
              v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 704),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v29,
                      (const char (*)[16])"cast fail, key:");
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v30,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 704));
              *(_DWORD *)(((v3 + 704) >> 3) + 0x7FFF8000) = -117901064;
              v51 = -1;
              v31 = 0;
            }
            else
            {
              v32 = std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueIndirectDamage,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
              if ( *(_BYTE *)(((unsigned __int64)&v32->value >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v32->value >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v32->value);
              }
              v31 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueIndirectDamage>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueIndirectDamage> *const)(v3 + 256));
            *(_WORD *)(((v3 + 256) >> 3) + 0x7FFF8000) = -1800;
            if ( v31 )
              goto LABEL_98;
            v11 = 0;
            break;
          case EffectNum:
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
            if ( *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 320));
            if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v3 + 320)) )
            {
              *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 863) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 832, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 832),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageMultipleValidatorFunc",
                770);
              v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 832),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v38 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v37,
                      (const char (*)[16])"cast fail, key:");
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v38,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 832));
              *(_DWORD *)(((v3 + 832) >> 3) + 0x7FFF8000) = -117901064;
              v51 = -1;
              v39 = 0;
            }
            else
            {
              v40 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 320));
              if ( *(_BYTE *)(((unsigned __int64)&v40->value >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v40->value >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v40->value);
              }
              v39 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v3 + 320));
            *(_WORD *)(((v3 + 320) >> 3) + 0x7FFF8000) = -1800;
            if ( v39 )
              goto LABEL_98;
            v11 = 0;
            break;
          case Heal:
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
            if ( *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueHealAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 288));
            if ( std::operator==<data::GCGDeclaredValueHealAmount>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueHealAmount> *)(v3 + 288)) )
            {
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 768) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 + 31) & 7) >= *(_BYTE *)(((v3 + 799) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 768, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 768),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageMultipleValidatorFunc",
                770);
              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 768),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v33,
                      (const char (*)[16])"cast fail, key:");
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v34,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 768));
              *(_DWORD *)(((v3 + 768) >> 3) + 0x7FFF8000) = -117901064;
              v51 = -1;
              v35 = 0;
            }
            else
            {
              v36 = std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueHealAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
              if ( *(_BYTE *)(((unsigned __int64)&v36->value >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v36->value >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v36->value);
              }
              v35 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueHealAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueHealAmount> *const)(v3 + 288));
            *(_WORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -1800;
            if ( v35 )
              goto LABEL_98;
            v11 = 0;
            break;
          case TokenType:
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
            std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
            if ( *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v3 + 352));
            if ( std::operator==<data::GCGDeclaredValueToken>(
                   0LL,
                   (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v3 + 352)) )
            {
              *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v3 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v3 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "ConfigGCGExecEffectDamageMultipleValidatorFunc",
                770);
              v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v3 + 896),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v42 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      v41,
                      (const char (*)[16])"cast fail, key:");
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v42,
                (const char (*)[20])"declared_output_key");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 896));
              *(_DWORD *)(((v3 + 896) >> 3) + 0x7FFF8000) = -117901064;
              v51 = -1;
              v43 = 0;
            }
            else
            {
              v44 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 352));
              if ( *(_BYTE *)(((unsigned __int64)&v44->value >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v44->value >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v44->value);
              }
              v43 = 1;
            }
            std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v3 + 352));
            *(_WORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -1800;
            if ( v43 )
LABEL_98:
              v11 = 1;
            else
              v11 = 0;
            break;
          default:
            *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 960) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 33) & 7) >= *(_BYTE *)(((v3 + 991) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 960, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 960),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "ConfigGCGExecEffectDamageMultipleValidatorFunc",
              770);
            v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 960),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v46 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v45,
                    (const char (*)[36])"invalid GCGDeclaredValueType, type:");
            *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
            v47 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v3 + 128));
            v48 = std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValue,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v47->second);
            if ( *(_BYTE *)(((unsigned __int64)&v48->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v48->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&v48->type);
            }
            type = (unsigned int)v48->type;
            if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
              __asan_report_store4(v3 + 112, type);
            *(_DWORD *)(v3 + 112) = type;
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v46,
              (const unsigned int *)(v3 + 112));
            *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 960));
            *(_DWORD *)(((v3 + 960) >> 3) + 0x7FFF8000) = -117901064;
            v51 = -1;
            v11 = 0;
            break;
        }
      }
    }
  }
  std::unordered_set<data::GCGDeclaredValueType>::~unordered_set((std::unordered_set<data::GCGDeclaredValueType> *const)(v3 + 1024));
  if ( v11 == 1 )
    v51 = 0;
  if ( v53 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8078) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 128) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v3 >> 3) + 0x7FFF8084) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1120LL, v53);
  }
  return v51;
};

// Line 776: range 000000000F207860-000000000F207E3B
int32_t __cdecl ConfigGCGEffectBeingHitDamageReduceToHalfValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectBeingHitDamageReduceToHalf,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:776 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectBeingHitDamageReduceToHalfValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectBeingHitDamageReduceToHalfValidator",
      776);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      v8,
      (const char (*)[42])"ConfigGCGEffectBeingHitDamageReduceToHalf");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectBeingHitDamageReduceToHalf,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectBeingHitDamageReduceToHalf>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectBeingHitDamageReduceToHalf> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectBeingHitDamageReduceToHalfValidator",
        776);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
        v11,
        (const char (*)[42])"ConfigGCGEffectBeingHitDamageReduceToHalf");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectBeingHitDamageReduceToHalfValidator",
          776);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectBeingHitDamageReduceToHalf,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectBeingHitDamageReduceToHalf,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectBeingHitDamageReduceToHalfValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectBeingHitDamageReduceToHalf>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectBeingHitDamageReduceToHalf> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 777: range 000000000F207E3C-000000000F2085EB
int32_t __cdecl ConfigGCGEffectBeingHitDamageReduceToHalfValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectBeingHitDamageReduceToHalf *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectDamageElementType effect_element_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 36 "
                        "9 <unknown> 256 56 23 valid_enum_type_set:780";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectBeingHitDamageReduceToHalfValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234618880;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 0;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 1;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 2;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 3;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 4;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 5;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 6;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 7;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 8;
  std::allocator<data::GCGEffectDamageElementType>::allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectDamageElementType>::unordered_set(
    (std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectDamageElementType>)__PAIR128__(9LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectDamageElementType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectDamageElementType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectDamageElementType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectDamageElementType>::~allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectDamageElementType>,data::GCGEffectDamageElementType>(
          (std::unordered_set<data::GCGEffectDamageElementType> *)(v3 + 256),
          &config_effect->effect_element_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectBeingHitDamageReduceToHalfValidatorFunc",
      780);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            v12,
            (const char (*)[34])"config_effect.effect_element_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->effect_element_type);
    }
    effect_element_type = config_effect->effect_element_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      effect_element_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = effect_element_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectDamageElementType>::~unordered_set((std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 794: range 000000000F2085EC-000000000F208BC7
int32_t __cdecl ConfigGCGEffectAddShieldValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectAddShield,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:794 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectAddShieldValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectAddShieldValidator",
      794);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v8, (const char (*)[25])"ConfigGCGEffectAddShield");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectAddShield,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectAddShield>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectAddShield> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectAddShieldValidator",
        794);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        v11,
        (const char (*)[25])"ConfigGCGEffectAddShield");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectAddShieldValidator",
          794);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectAddShield,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectAddShield,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectAddShieldValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectAddShield>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectAddShield> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 795: range 000000000F208BC8-000000000F20992F
int32_t __cdecl ConfigGCGEffectAddShieldValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectAddShield *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  data::GCGTokenType *p_token_type; // rsi
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  common::milog::MiLogStream *v12; // rcx
  data::GCGTokenType token_type; // edi
  char v14; // al
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rax
  __int64 v18; // rsi
  __int64 v19; // rsi
  __int64 v20; // rsi
  __int64 v21; // rsi
  unsigned __int64 v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  const char *v26; // rsi
  common::milog::MiLogStream *v27; // rcx
  data::GCGEffectDamageElementType effect_element_type; // edi
  char v29; // al
  int v30; // r14d
  int32_t result; // eax
  std::initializer_list<data::GCGTokenType> __la; // [rsp+10h] [rbp-2C0h]
  int __l; // [rsp+10h] [rbp-2C0h]
  int32_t v34; // [rsp+24h] [rbp-2ACh]
  char v36[656]; // [rsp+40h] [rbp-290h] BYREF

  v3 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 12 9 <unknown> 208 32 9 <unknown> 272 32 9 <u"
                        "nknown> 336 36 9 <unknown> 416 56 23 valid_enum_type_set:798 512 56 23 valid_enum_type_set:802";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectAddShieldValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234753535;
  v5[536862724] = -234556927;
  v5[536862725] = 61956;
  v5[536862725] = 0x4000000;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -234618880;
  v5[536862732] = -218959118;
  v5[536862734] = -234881024;
  v5[536862735] = -218959118;
  v5[536862737] = -218103808;
  v5[536862738] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 8;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 7;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 6;
  __la._M_array = (std::initializer_list<data::GCGTokenType>::iterator)(v3 + 176);
  __la._M_len = 3LL;
  std::allocator<data::GCGTokenType>::allocator((std::allocator<data::GCGTokenType> *const)(v3 + 80));
  std::unordered_set<data::GCGTokenType>::unordered_set(
    (std::unordered_set<data::GCGTokenType> *const)(v3 + 416),
    __la,
    0LL,
    (const std::unordered_set<data::GCGTokenType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGTokenType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGTokenType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGTokenType>::~allocator((std::allocator<data::GCGTokenType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_WORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = -1800;
  p_token_type = &config_effect->token_type;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGTokenType>,data::GCGTokenType>(
          (std::unordered_set<data::GCGTokenType> *)(v3 + 416),
          &config_effect->token_type) )
  {
    *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 17) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectAddShieldValidatorFunc",
      798);
    v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 208),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v9 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v8, (const char (*)[31])byte_1A5047A0);
    v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            v9,
            (const char (*)[25])"config_effect.token_type");
    v11 = " value:";
    v12 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v10, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->token_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->token_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->token_type);
    }
    token_type = config_effect->token_type;
    v14 = *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000);
    if ( v14 != 0 && v14 <= 3 )
    {
      token_type = v3 + 144;
      LOBYTE(v11) = v14 != 0;
      __asan_report_store4(v3 + 144, v11);
    }
    *(_DWORD *)(v3 + 144) = token_type;
    p_token_type = (data::GCGTokenType *)(v3 + 144);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 144));
    *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
    *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = -117901064;
    v34 = -1;
    __l = 0;
  }
  else
  {
    __l = 1;
  }
  std::unordered_set<data::GCGTokenType>::~unordered_set((std::unordered_set<data::GCGTokenType> *const)(v3 + 416));
  v15 = ((v3 + 416) >> 3) + 2147450880;
  *(_DWORD *)v15 = -117901064;
  *(_WORD *)(v15 + 4) = -1800;
  *(_BYTE *)(v15 + 6) = -8;
  if ( __l == 1 )
  {
    v16 = ((v3 + 512) >> 3) + 2147450880;
    *(_DWORD *)v16 = 0;
    *(_WORD *)(v16 + 4) = 0;
    *(_BYTE *)(v16 + 6) = 0;
    v17 = ((v3 + 336) >> 3) + 2147450880;
    *(_DWORD *)v17 = 0;
    *(_BYTE *)(v17 + 4) = 4;
    if ( *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 336, p_token_type);
    *(_DWORD *)(v3 + 336) = 0;
    v18 = (((_BYTE)v3 + 84) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 340) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 84) & 7) + 3) >= *(_BYTE *)(((v3 + 340) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 340, v18);
    }
    *(_DWORD *)(v3 + 340) = 1;
    if ( *(_BYTE *)(((v3 + 344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 344, v18);
    *(_DWORD *)(v3 + 344) = 2;
    v19 = (((_BYTE)v3 + 92) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 348) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 92) & 7) + 3) >= *(_BYTE *)(((v3 + 348) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 348, v19);
    }
    *(_DWORD *)(v3 + 348) = 3;
    if ( *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 352, v19);
    *(_DWORD *)(v3 + 352) = 4;
    v20 = (((_BYTE)v3 + 100) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 356) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 100) & 7) + 3) >= *(_BYTE *)(((v3 + 356) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 356, v20);
    }
    *(_DWORD *)(v3 + 356) = 5;
    if ( *(_BYTE *)(((v3 + 360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 360, v20);
    *(_DWORD *)(v3 + 360) = 6;
    v21 = (((_BYTE)v3 + 108) & 7u) + 3;
    if ( *(_BYTE *)(((v3 + 364) >> 3) + 0x7FFF8000) != 0
      && (char)(((v3 + 108) & 7) + 3) >= *(_BYTE *)(((v3 + 364) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v3 + 364, v21);
    }
    *(_DWORD *)(v3 + 364) = 7;
    if ( *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v3 + 368, v21);
    *(_DWORD *)(v3 + 368) = 8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 1;
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<data::GCGEffectDamageElementType>::allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 128));
    std::unordered_set<data::GCGEffectDamageElementType>::unordered_set(
      (std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 512),
      (std::initializer_list<data::GCGEffectDamageElementType>)__PAIR128__(9LL, v3 + 336),
      0LL,
      (const std::unordered_set<data::GCGEffectDamageElementType>::hasher *)(v3 + 96),
      (const std::unordered_set<data::GCGEffectDamageElementType>::key_equal *)(v3 + 112),
      (const std::unordered_set<data::GCGEffectDamageElementType>::allocator_type *)(v3 + 128));
    std::allocator<data::GCGEffectDamageElementType>::~allocator((std::allocator<data::GCGEffectDamageElementType> *const)(v3 + 128));
    *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    v22 = ((v3 + 336) >> 3) + 2147450880;
    *(_DWORD *)v22 = -117901064;
    *(_BYTE *)(v22 + 4) = -8;
    if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectDamageElementType>,data::GCGEffectDamageElementType>(
            (std::unordered_set<data::GCGEffectDamageElementType> *)(v3 + 512),
            &config_effect->effect_element_type) )
    {
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectAddShieldValidatorFunc",
        802);
      v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 272),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v24 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v23, (const char (*)[31])byte_1A5047A0);
      v25 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v24,
              (const char (*)[34])"config_effect.effect_element_type");
      v26 = " value:";
      v27 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v25, (const char (*)[8])" value:");
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_effect->effect_element_type);
      }
      effect_element_type = config_effect->effect_element_type;
      v29 = *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000);
      if ( v29 != 0 && v29 <= 3 )
      {
        effect_element_type = v3 + 160;
        LOBYTE(v26) = v29 != 0;
        __asan_report_store4(v3 + 160, v26);
      }
      *(_DWORD *)(v3 + 160) = effect_element_type;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v3 + 160));
      *(_BYTE *)(((v3 + 160) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -117901064;
      v34 = -1;
      v30 = 0;
    }
    else
    {
      v30 = 1;
    }
    std::unordered_set<data::GCGEffectDamageElementType>::~unordered_set((std::unordered_set<data::GCGEffectDamageElementType> *const)(v3 + 512));
    if ( v30 == 1 )
      v34 = 0;
  }
  result = v34;
  if ( v36 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 816: range 000000000F209930-000000000F209F0B
int32_t __cdecl ConfigGCGEffectAttachPhysicDamageToElementValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectAttachPhysicDamageToElement,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:816 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectAttachPhysicDamageToElementValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectAttachPhysicDamageToElementValidator",
      816);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      v8,
      (const char (*)[43])"ConfigGCGEffectAttachPhysicDamageToElement");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectAttachPhysicDamageToElement,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectAttachPhysicDamageToElement>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectAttachPhysicDamageToElement> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectAttachPhysicDamageToElementValidator",
        816);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
        v11,
        (const char (*)[43])"ConfigGCGEffectAttachPhysicDamageToElement");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectAttachPhysicDamageToElementValidator",
          816);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectAttachPhysicDamageToElement,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectAttachPhysicDamageToElement,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectAttachPhysicDamageToElementValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectAttachPhysicDamageToElement>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectAttachPhysicDamageToElement> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 817: range 000000000F209F0C-000000000F20A60B
int32_t __cdecl ConfigGCGEffectAttachPhysicDamageToElementValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectAttachPhysicDamageToElement *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const char *v12; // rsi
  common::milog::MiLogStream *v13; // rcx
  data::GCGEffectElementType attached_element_type; // edi
  char v15; // al
  int v16; // r14d
  int32_t result; // eax
  int32_t v18; // [rsp+14h] [rbp-18Ch]
  char v20[368]; // [rsp+30h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 28 9 <unknown> 160 32 9"
                        " <unknown> 224 56 23 valid_enum_type_set:820";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectAttachPhysicDamageToElementValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556927;
  v5[536862723] = 0x4000000;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -218103808;
  v5[536862729] = -202116109;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 96, config_skill);
  *(_DWORD *)(v3 + 96) = 1;
  v6 = (((_BYTE)v3 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 100) & 7) + 3) >= *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 100, v6);
  }
  *(_DWORD *)(v3 + 100) = 2;
  if ( *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 104, v6);
  *(_DWORD *)(v3 + 104) = 3;
  v7 = (((_BYTE)v3 + 108) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 108) & 7) + 3) >= *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 108, v7);
  }
  *(_DWORD *)(v3 + 108) = 4;
  if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 112, v7);
  *(_DWORD *)(v3 + 112) = 5;
  v8 = (((_BYTE)v3 + 116) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 116) & 7) + 3) >= *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 116, v8);
  }
  *(_DWORD *)(v3 + 116) = 6;
  if ( *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 120, v8);
  *(_DWORD *)(v3 + 120) = 7;
  std::allocator<data::GCGEffectElementType>::allocator((std::allocator<data::GCGEffectElementType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectElementType>::unordered_set(
    (std::unordered_set<data::GCGEffectElementType> *const)(v3 + 224),
    (std::initializer_list<data::GCGEffectElementType>)__PAIR128__(7LL, v3 + 96),
    0LL,
    (const std::unordered_set<data::GCGEffectElementType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectElementType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectElementType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectElementType>::~allocator((std::allocator<data::GCGEffectElementType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -117901064;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectElementType>,data::GCGEffectElementType>(
          (std::unordered_set<data::GCGEffectElementType> *)(v3 + 224),
          &config_effect->attached_element_type) )
  {
    *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectAttachPhysicDamageToElementValidatorFunc",
      820);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v9, (const char (*)[31])byte_1A5047A0);
    v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            v10,
            (const char (*)[36])"config_effect.attached_element_type");
    v12 = " value:";
    v13 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->attached_element_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->attached_element_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->attached_element_type);
    }
    attached_element_type = config_effect->attached_element_type;
    v15 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
    if ( v15 != 0 && v15 <= 3 )
    {
      attached_element_type = v3 + 80;
      LOBYTE(v12) = v15 != 0;
      __asan_report_store4(v3 + 80, v12);
    }
    *(_DWORD *)(v3 + 80) = attached_element_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 80));
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
    *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = -117901064;
    v18 = -1;
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  std::unordered_set<data::GCGEffectElementType>::~unordered_set((std::unordered_set<data::GCGEffectElementType> *const)(v3 + 224));
  if ( v16 == 1 )
    v18 = 0;
  result = v18;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 832: range 000000000F20A60C-000000000F20ABE7
int32_t __cdecl ConfigGCGEffectRerollReviseCostValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectRerollReviseCost,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:832 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectRerollReviseCostValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectRerollReviseCostValidator",
      832);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      v8,
      (const char (*)[32])"ConfigGCGEffectRerollReviseCost");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectRerollReviseCost,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectRerollReviseCost>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectRerollReviseCost> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectRerollReviseCostValidator",
        832);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
        v11,
        (const char (*)[32])"ConfigGCGEffectRerollReviseCost");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectRerollReviseCostValidator",
          832);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectRerollReviseCost,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectRerollReviseCost,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectRerollReviseCostValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectRerollReviseCost>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectRerollReviseCost> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 833: range 000000000F20ABE8-000000000F20ABFE
int32_t __cdecl ConfigGCGEffectRerollReviseCostValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectRerollReviseCost *config_effect)
{
  return 0;
};

// Line 840: range 000000000F20ABFF-000000000F20B1DA
int32_t __cdecl ConfigGCGEffectSkillUseCostReviseValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectSkillUseCostRevise,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:840 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectSkillUseCostReviseValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectSkillUseCostReviseValidator",
      840);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      v8,
      (const char (*)[34])"ConfigGCGEffectSkillUseCostRevise");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectSkillUseCostRevise,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectSkillUseCostRevise>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectSkillUseCostRevise> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectSkillUseCostReviseValidator",
        840);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        v11,
        (const char (*)[34])"ConfigGCGEffectSkillUseCostRevise");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectSkillUseCostReviseValidator",
          840);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectSkillUseCostRevise,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectSkillUseCostRevise,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectSkillUseCostReviseValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectSkillUseCostRevise>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectSkillUseCostRevise> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 841: range 000000000F20B1DB-000000000F20B9D2
int32_t __cdecl ConfigGCGEffectSkillUseCostReviseValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectSkillUseCostRevise *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectCostType cost_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 40 "
                        "9 <unknown> 256 56 23 valid_enum_type_set:844";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectSkillUseCostReviseValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 5;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 11;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 12;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 13;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 14;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 15;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 16;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 17;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 6;
  if ( *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 44) & 7) + 3) >= *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 212, (((_BYTE)v3 - 44) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 212) = 1;
  std::allocator<data::GCGEffectCostType>::allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectCostType>::unordered_set(
    (std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectCostType>)__PAIR128__(10LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectCostType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCostType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectCostType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectCostType>::~allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCostType>,data::GCGEffectCostType>(
          (std::unordered_set<data::GCGEffectCostType> *)(v3 + 256),
          &config_effect->cost_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectSkillUseCostReviseValidatorFunc",
      844);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v12,
            (const char (*)[24])"config_effect.cost_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->cost_type);
    }
    cost_type = config_effect->cost_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      cost_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = cost_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectCostType>::~unordered_set((std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 859: range 000000000F20B9D3-000000000F20BFAE
int32_t __cdecl ConfigGCGEffectPlayCardCostReviseValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectPlayCardCostRevise,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:859 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectPlayCardCostReviseValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectPlayCardCostReviseValidator",
      859);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      v8,
      (const char (*)[34])"ConfigGCGEffectPlayCardCostRevise");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectPlayCardCostRevise,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectPlayCardCostRevise>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectPlayCardCostRevise> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectPlayCardCostReviseValidator",
        859);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        v11,
        (const char (*)[34])"ConfigGCGEffectPlayCardCostRevise");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectPlayCardCostReviseValidator",
          859);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectPlayCardCostRevise,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectPlayCardCostRevise,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectPlayCardCostReviseValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectPlayCardCostRevise>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectPlayCardCostRevise> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 860: range 000000000F20BFAF-000000000F20C7A6
int32_t __cdecl ConfigGCGEffectPlayCardCostReviseValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectPlayCardCostRevise *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectCostType cost_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 40 "
                        "9 <unknown> 256 56 23 valid_enum_type_set:863";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectPlayCardCostReviseValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 5;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 11;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 12;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 13;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 14;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 15;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 16;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 17;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 6;
  if ( *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 44) & 7) + 3) >= *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 212, (((_BYTE)v3 - 44) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 212) = 1;
  std::allocator<data::GCGEffectCostType>::allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectCostType>::unordered_set(
    (std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectCostType>)__PAIR128__(10LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectCostType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCostType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectCostType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectCostType>::~allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCostType>,data::GCGEffectCostType>(
          (std::unordered_set<data::GCGEffectCostType> *)(v3 + 256),
          &config_effect->cost_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectPlayCardCostReviseValidatorFunc",
      863);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v12,
            (const char (*)[24])"config_effect.cost_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->cost_type);
    }
    cost_type = config_effect->cost_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      cost_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = cost_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectCostType>::~unordered_set((std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 878: range 000000000F20C7A7-000000000F20CD82
int32_t __cdecl ConfigGCGEffectChangeCharacterReviseCostValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterReviseCost,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:878 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectChangeCharacterReviseCostValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectChangeCharacterReviseCostValidator",
      878);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
      v8,
      (const char (*)[41])"ConfigGCGEffectChangeCharacterReviseCost");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectChangeCharacterReviseCost,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectChangeCharacterReviseCost>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectChangeCharacterReviseCost> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectChangeCharacterReviseCostValidator",
        878);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
        v11,
        (const char (*)[41])"ConfigGCGEffectChangeCharacterReviseCost");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectChangeCharacterReviseCostValidator",
          878);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterReviseCost,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterReviseCost,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectChangeCharacterReviseCostValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectChangeCharacterReviseCost>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectChangeCharacterReviseCost> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 879: range 000000000F20CD83-000000000F20D572
int32_t __cdecl ConfigGCGEffectChangeCharacterReviseCostValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectChangeCharacterReviseCost *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectCostType cost_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 40 "
                        "9 <unknown> 256 56 23 valid_enum_type_set:882";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectChangeCharacterReviseCostValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 5;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 11;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 12;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 13;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 14;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 15;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 16;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 17;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 6;
  if ( *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 44) & 7) + 3) >= *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 212, (((_BYTE)v3 - 44) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 212) = 1;
  std::allocator<data::GCGEffectCostType>::allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectCostType>::unordered_set(
    (std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectCostType>)__PAIR128__(10LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectCostType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCostType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectCostType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectCostType>::~allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCostType>,data::GCGEffectCostType>(
          (std::unordered_set<data::GCGEffectCostType> *)(v3 + 256),
          &config_effect->cost_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectChangeCharacterReviseCostValidatorFunc",
      882);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v12,
            (const char (*)[24])"config_effect.cost_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_effect->cost_type);
    }
    cost_type = config_effect->cost_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      cost_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = cost_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectCostType>::~unordered_set((std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 897: range 000000000F20D573-000000000F20DB4E
int32_t __cdecl ConfigGCGEffectChangeCharacterIncreCostValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterIncreCost,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:897 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectChangeCharacterIncreCostValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectChangeCharacterIncreCostValidator",
      897);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      v8,
      (const char (*)[40])"ConfigGCGEffectChangeCharacterIncreCost");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectChangeCharacterIncreCost,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectChangeCharacterIncreCost>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectChangeCharacterIncreCost> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectChangeCharacterIncreCostValidator",
        897);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
        v11,
        (const char (*)[40])"ConfigGCGEffectChangeCharacterIncreCost");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectChangeCharacterIncreCostValidator",
          897);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterIncreCost,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterIncreCost,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectChangeCharacterIncreCostValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectChangeCharacterIncreCost>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectChangeCharacterIncreCost> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 898: range 000000000F20DB4F-000000000F20E33E
int32_t __cdecl ConfigGCGEffectChangeCharacterIncreCostValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectChangeCharacterIncreCost *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectCostType cost_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 40 "
                        "9 <unknown> 256 56 23 valid_enum_type_set:901";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectChangeCharacterIncreCostValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 5;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 11;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 12;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 13;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 14;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 15;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 16;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 17;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 6;
  if ( *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 44) & 7) + 3) >= *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 212, (((_BYTE)v3 - 44) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 212) = 1;
  std::allocator<data::GCGEffectCostType>::allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectCostType>::unordered_set(
    (std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectCostType>)__PAIR128__(10LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectCostType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCostType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectCostType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectCostType>::~allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCostType>,data::GCGEffectCostType>(
          (std::unordered_set<data::GCGEffectCostType> *)(v3 + 256),
          &config_effect->cost_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectChangeCharacterIncreCostValidatorFunc",
      901);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v12,
            (const char (*)[24])"config_effect.cost_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_effect->cost_type);
    }
    cost_type = config_effect->cost_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      cost_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = cost_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectCostType>::~unordered_set((std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 916: range 000000000F20E33F-000000000F20E91A
int32_t __cdecl ConfigGCGEffectOpponentChangeCharacterIncreCostValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectOpponentChangeCharacterIncreCost,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:916 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectOpponentChangeCharacterIncreCostValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectOpponentChangeCharacterIncreCostValidator",
      916);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
      v8,
      (const char (*)[48])"ConfigGCGEffectOpponentChangeCharacterIncreCost");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectOpponentChangeCharacterIncreCost,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectOpponentChangeCharacterIncreCost>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectOpponentChangeCharacterIncreCost> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectOpponentChangeCharacterIncreCostValidator",
        916);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
        v11,
        (const char (*)[48])"ConfigGCGEffectOpponentChangeCharacterIncreCost");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectOpponentChangeCharacterIncreCostValidator",
          916);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectOpponentChangeCharacterIncreCost,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectOpponentChangeCharacterIncreCost,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectOpponentChangeCharacterIncreCostValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectOpponentChangeCharacterIncreCost>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectOpponentChangeCharacterIncreCost> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 917: range 000000000F20E91B-000000000F20F10A
int32_t __cdecl ConfigGCGEffectOpponentChangeCharacterIncreCostValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectOpponentChangeCharacterIncreCost *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectCostType cost_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 40 "
                        "9 <unknown> 256 56 23 valid_enum_type_set:920";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectOpponentChangeCharacterIncreCostValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 5;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 11;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 12;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 13;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 14;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 15;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 16;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 17;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 6;
  if ( *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 44) & 7) + 3) >= *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 212, (((_BYTE)v3 - 44) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 212) = 1;
  std::allocator<data::GCGEffectCostType>::allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectCostType>::unordered_set(
    (std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectCostType>)__PAIR128__(10LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectCostType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCostType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectCostType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectCostType>::~allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCostType>,data::GCGEffectCostType>(
          (std::unordered_set<data::GCGEffectCostType> *)(v3 + 256),
          &config_effect->cost_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectOpponentChangeCharacterIncreCostValidatorFunc",
      920);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v12,
            (const char (*)[24])"config_effect.cost_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_effect->cost_type);
    }
    cost_type = config_effect->cost_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      cost_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = cost_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectCostType>::~unordered_set((std::unordered_set<data::GCGEffectCostType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 935: range 000000000F20F10B-000000000F20F6E6
int32_t __cdecl ConfigGCGEffectPayByCardTagValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectPayByCardTag,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:935 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectPayByCardTagValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectPayByCardTagValidator",
      935);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
      v8,
      (const char (*)[28])"ConfigGCGEffectPayByCardTag");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectPayByCardTag,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectPayByCardTag>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectPayByCardTag> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectPayByCardTagValidator",
        935);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        v11,
        (const char (*)[28])"ConfigGCGEffectPayByCardTag");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectPayByCardTagValidator",
          935);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectPayByCardTag,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectPayByCardTag,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectPayByCardTagValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectPayByCardTag>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectPayByCardTag> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 936: range 000000000F20F6E7-000000000F20FC25
int32_t __cdecl ConfigGCGEffectPayByCardTagValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectPayByCardTag *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  const char *v9; // rsi
  common::milog::MiLogStream *v10; // rcx
  data::GCGEffectCostType cost_type; // edi
  char v12; // al
  int v13; // r14d
  int32_t result; // eax
  int32_t v15; // [rsp+14h] [rbp-16Ch]
  char v17[336]; // [rsp+30h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 32 9"
                        " <unknown> 192 56 23 valid_enum_type_set:939";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectPayByCardTagValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = -234556924;
  v5[536862725] = -218959118;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 96, config_skill);
  *(_DWORD *)(v3 + 96) = 6;
  std::allocator<data::GCGEffectCostType>::allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectCostType>::unordered_set(
    (std::unordered_set<data::GCGEffectCostType> *const)(v3 + 192),
    (std::initializer_list<data::GCGEffectCostType>)__PAIR128__(1LL, v3 + 96),
    0LL,
    (const std::unordered_set<data::GCGEffectCostType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectCostType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectCostType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectCostType>::~allocator((std::allocator<data::GCGEffectCostType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectCostType>,data::GCGEffectCostType>(
          (std::unordered_set<data::GCGEffectCostType> *)(v3 + 192),
          &config_effect->cost_type) )
  {
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 97) & 7) >= *(_BYTE *)(((v3 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectPayByCardTagValidatorFunc",
      939);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v6, (const char (*)[31])byte_1A5047A0);
    v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           v7,
           (const char (*)[24])"config_effect.cost_type");
    v9 = " value:";
    v10 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v8, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_effect->cost_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_effect->cost_type);
    }
    cost_type = config_effect->cost_type;
    v12 = *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000);
    if ( v12 != 0 && v12 <= 3 )
    {
      cost_type = v3 + 112;
      LOBYTE(v9) = v12 != 0;
      __asan_report_store4(v3 + 112, v9);
    }
    *(_DWORD *)(v3 + 112) = cost_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 112));
    *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
    *(_DWORD *)(((v3 + 128) >> 3) + 0x7FFF8000) = -117901064;
    v15 = -1;
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  std::unordered_set<data::GCGEffectCostType>::~unordered_set((std::unordered_set<data::GCGEffectCostType> *const)(v3 + 192));
  if ( v13 == 1 )
    v15 = 0;
  result = v15;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 945: range 000000000F20FC26-000000000F210201
int32_t __cdecl ConfigGCGEffectChangeCharacterSetQuickValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterSetQuick,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:945 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectChangeCharacterSetQuickValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectChangeCharacterSetQuickValidator",
      945);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
      v8,
      (const char (*)[39])"ConfigGCGEffectChangeCharacterSetQuick");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectChangeCharacterSetQuick,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectChangeCharacterSetQuick>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectChangeCharacterSetQuick> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectChangeCharacterSetQuickValidator",
        945);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
        v11,
        (const char (*)[39])"ConfigGCGEffectChangeCharacterSetQuick");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectChangeCharacterSetQuickValidator",
          945);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterSetQuick,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectChangeCharacterSetQuick,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectChangeCharacterSetQuickValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectChangeCharacterSetQuick>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectChangeCharacterSetQuick> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 946: range 000000000F210202-000000000F210218
int32_t __cdecl ConfigGCGEffectChangeCharacterSetQuickValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectChangeCharacterSetQuick *config_effect)
{
  return 0;
};

// Line 953: range 000000000F210219-000000000F2107F4
int32_t __cdecl ConfigGCGEffectReplaceReactionElementByCardVarValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectReplaceReactionElementByCardVar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:953 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectReplaceReactionElementByCardVarValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectReplaceReactionElementByCardVarValidator",
      953);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      v8,
      (const char (*)[47])"ConfigGCGEffectReplaceReactionElementByCardVar");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectReplaceReactionElementByCardVar,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectReplaceReactionElementByCardVar>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectReplaceReactionElementByCardVar> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectReplaceReactionElementByCardVarValidator",
        953);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
        v11,
        (const char (*)[47])"ConfigGCGEffectReplaceReactionElementByCardVar");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectReplaceReactionElementByCardVarValidator",
          953);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectReplaceReactionElementByCardVar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectReplaceReactionElementByCardVar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectReplaceReactionElementByCardVarValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectReplaceReactionElementByCardVar>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectReplaceReactionElementByCardVar> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 954: range 000000000F2107F5-000000000F210EF4
int32_t __cdecl ConfigGCGEffectReplaceReactionElementByCardVarValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectReplaceReactionElementByCardVar *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const char *v12; // rsi
  common::milog::MiLogStream *v13; // rcx
  data::GCGEffectElementType effect_element_type; // edi
  char v15; // al
  int v16; // r14d
  int32_t result; // eax
  int32_t v18; // [rsp+14h] [rbp-18Ch]
  char v20[368]; // [rsp+30h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 28 9 <unknown> 160 32 9"
                        " <unknown> 224 56 23 valid_enum_type_set:957";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectReplaceReactionElementByCardVarValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556927;
  v5[536862723] = 0x4000000;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -218103808;
  v5[536862729] = -202116109;
  if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 96, config_skill);
  *(_DWORD *)(v3 + 96) = 1;
  v6 = (((_BYTE)v3 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 100) & 7) + 3) >= *(_BYTE *)(((v3 + 100) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 100, v6);
  }
  *(_DWORD *)(v3 + 100) = 2;
  if ( *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 104) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 104, v6);
  *(_DWORD *)(v3 + 104) = 3;
  v7 = (((_BYTE)v3 + 108) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 108) & 7) + 3) >= *(_BYTE *)(((v3 + 108) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 108, v7);
  }
  *(_DWORD *)(v3 + 108) = 4;
  if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 112, v7);
  *(_DWORD *)(v3 + 112) = 5;
  v8 = (((_BYTE)v3 + 116) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 + 116) & 7) + 3) >= *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 116, v8);
  }
  *(_DWORD *)(v3 + 116) = 6;
  if ( *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 120, v8);
  *(_DWORD *)(v3 + 120) = 7;
  std::allocator<data::GCGEffectElementType>::allocator((std::allocator<data::GCGEffectElementType> *const)(v3 + 64));
  std::unordered_set<data::GCGEffectElementType>::unordered_set(
    (std::unordered_set<data::GCGEffectElementType> *const)(v3 + 224),
    (std::initializer_list<data::GCGEffectElementType>)__PAIR128__(7LL, v3 + 96),
    0LL,
    (const std::unordered_set<data::GCGEffectElementType>::hasher *)(v3 + 32),
    (const std::unordered_set<data::GCGEffectElementType>::key_equal *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectElementType>::allocator_type *)(v3 + 64));
  std::allocator<data::GCGEffectElementType>::~allocator((std::allocator<data::GCGEffectElementType> *const)(v3 + 64));
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
  *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -117901064;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectElementType>,data::GCGEffectElementType>(
          (std::unordered_set<data::GCGEffectElementType> *)(v3 + 224),
          &config_effect->effect_element_type) )
  {
    *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectReplaceReactionElementByCardVarValidatorFunc",
      957);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v9, (const char (*)[31])byte_1A5047A0);
    v11 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            v10,
            (const char (*)[34])"config_effect.effect_element_type");
    v12 = " value:";
    v13 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->effect_element_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->effect_element_type);
    }
    effect_element_type = config_effect->effect_element_type;
    v15 = *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000);
    if ( v15 != 0 && v15 <= 3 )
    {
      effect_element_type = v3 + 80;
      LOBYTE(v12) = v15 != 0;
      __asan_report_store4(v3 + 80, v12);
    }
    *(_DWORD *)(v3 + 80) = effect_element_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 80));
    *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
    *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = -117901064;
    v18 = -1;
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  std::unordered_set<data::GCGEffectElementType>::~unordered_set((std::unordered_set<data::GCGEffectElementType> *const)(v3 + 224));
  if ( v16 == 1 )
    v18 = 0;
  result = v18;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 969: range 000000000F210EF5-000000000F2114D0
int32_t __cdecl ConfigGCGEffectModifiedCharacterAssignUseSkillValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectModifiedCharacterAssignUseSkill,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 26 cast_config_effect_ptr:969 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectModifiedCharacterAssignUseSkillValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectModifiedCharacterAssignUseSkillValidator",
      969);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      v8,
      (const char (*)[47])"ConfigGCGEffectModifiedCharacterAssignUseSkill");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v9 = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectModifiedCharacterAssignUseSkill,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectModifiedCharacterAssignUseSkill>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectModifiedCharacterAssignUseSkill> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectModifiedCharacterAssignUseSkillValidator",
        969);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
        v11,
        (const char (*)[47])"ConfigGCGEffectModifiedCharacterAssignUseSkill");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      v9 = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectModifiedCharacterAssignUseSkillValidator",
          969);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        v9 = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectModifiedCharacterAssignUseSkill,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectModifiedCharacterAssignUseSkill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v9 = ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectModifiedCharacterAssignUseSkill>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectModifiedCharacterAssignUseSkill> *const)(v4 + 32));
  }
  result = v9;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 970: range 000000000F2114D1-000000000F212407
int32_t __cdecl ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectModifiedCharacterAssignUseSkill *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  const GCGGameExcelConfigMgr *GCGGameExcelConfigMgr; // rcx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const char *p_skill_json; // rsi
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  const char *v23; // rsi
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  __gnu_cxx::__normal_iterator<const data::GCGSkillTagType*,std::vector<data::GCGSkillTagType> >::reference v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  bool has_trigger_on_use; // [rsp+21h] [rbp-2BFh]
  bool has_active_tag; // [rsp+22h] [rbp-2BEh]
  bool has_passive_tag; // [rsp+23h] [rbp-2BDh]
  int32_t ret; // [rsp+24h] [rbp-2BCh]
  const data::GCGSkillExcelConfig *skill_excel_config_ptr; // [rsp+30h] [rbp-2B0h]
  const data::ConfigGCGSkill *skill_json_config_ptr; // [rsp+38h] [rbp-2A8h]
  const std::vector<data::ConfigGCGTrigger> *__for_range; // [rsp+40h] [rbp-2A0h]
  __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+48h] [rbp-298h]
  const std::vector<data::GCGSkillTagType> *__for_range_0; // [rsp+50h] [rbp-290h]
  const data::GCGSkillTagType *skill_tag; // [rsp+58h] [rbp-288h]
  char v45[640]; // [rsp+60h] [rbp-280h] BYREF

  v3 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 32 8 16 __for_begin:1000 64 8 14 __for_end:1000 96 8 16 __for_begin:1021 128 8 14 __for_end:1"
                        "021 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknow"
                        "n> 480 32 9 <unknown> 544 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -218959118;
  v5[536862734] = -218959118;
  v5[536862736] = -218959118;
  v5[536862738] = -202116109;
  if ( std::operator==<GCGConfigMgr>(&config->gcg_config_mgr_ptr, 0LL) )
  {
    if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc",
      975);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v3 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v7 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(v6, (const char (*)[41])byte_1A50D960);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &config_effect->skill_id);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
    result = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config->gcg_config_mgr_ptr);
    GCGGameExcelConfigMgr = GCGConfigMgr::getGCGGameExcelConfigMgr(v9);
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->skill_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->skill_id >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->skill_id);
    }
    skill_excel_config_ptr = data::GCGGameExcelConfigMgrBase::findGCGSkillExcelConfig(
                               GCGGameExcelConfigMgr,
                               config_effect->skill_id);
    if ( skill_excel_config_ptr )
    {
      v13 = std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GCGConfigMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config->gcg_config_mgr_ptr);
      p_skill_json = (const char *)&skill_excel_config_ptr->skill_json;
      skill_json_config_ptr = GCGConfigMgr::findGCGSkillConfig(v13, &skill_excel_config_ptr->skill_json);
      if ( skill_json_config_ptr )
      {
        ret = 0;
        if ( *(char *)(((unsigned __int64)&skill_excel_config_ptr->is_hidden >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&skill_excel_config_ptr->is_hidden, p_skill_json, &skill_excel_config_ptr->is_hidden);
        if ( !skill_excel_config_ptr->is_hidden )
        {
          if ( *(char *)(((v3 + 352) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 352, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 352),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc",
            995);
          v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 352),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v21 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v20, (const char (*)[44])byte_1A50DAC0);
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &config_effect->skill_id);
          p_skill_json = byte_1A50DB20;
          common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v22, (const char (*)[20])byte_1A50DB20);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 352));
          *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        has_trigger_on_use = 0;
        __for_range = &skill_json_config_ptr->trigger_list;
        *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 32, p_skill_json);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v3 + 32) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 64, p_skill_json);
        *(std::vector<data::ConfigGCGTrigger>::const_iterator *)(v3 + 64) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
        while ( 1 )
        {
          v23 = (const char *)(v3 + 64);
          if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>(
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v3 + 32),
                  (const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v3 + 64)) )
            break;
          trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v3 + 32));
          if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(trigger);
          }
          if ( trigger->type == GCG_TRIGGER_ON_USE )
          {
            has_trigger_on_use = 1;
            break;
          }
          __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger const*,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v3 + 32));
        }
        *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( !has_trigger_on_use )
        {
          *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 65) & 7) >= *(_BYTE *)(((v3 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc",
            1010);
          v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 416),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v25 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v24, (const char (*)[44])byte_1A50DAC0);
          v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &config_effect->skill_id);
          v23 = byte_1A50DB60;
          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v26, (const char (*)[33])byte_1A50DB60);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 416));
          *(_DWORD *)(((v3 + 416) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        if ( std::vector<data::GCGSkillTagType>::empty(&skill_excel_config_ptr->skill_tag_list) )
        {
          *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc",
            1016);
          v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 480),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v28 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v27, (const char (*)[44])byte_1A50DAC0);
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &config_effect->skill_id);
          v23 = byte_1A50DBC0;
          common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v29, (const char (*)[23])byte_1A50DBC0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 480));
          *(_DWORD *)(((v3 + 480) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
        has_active_tag = 0;
        has_passive_tag = 0;
        __for_range_0 = &skill_excel_config_ptr->skill_tag_list;
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 96, v23);
        *(std::vector<data::GCGSkillTagType>::const_iterator *)(v3 + 96) = std::vector<data::GCGSkillTagType>::begin(__for_range_0);
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store8(v3 + 128, v23);
        *(std::vector<data::GCGSkillTagType>::const_iterator *)(v3 + 128) = std::vector<data::GCGSkillTagType>::end(__for_range_0);
        while ( __gnu_cxx::operator!=<data::GCGSkillTagType const*,std::vector<data::GCGSkillTagType>>(
                  (const __gnu_cxx::__normal_iterator<const data::GCGSkillTagType*,std::vector<data::GCGSkillTagType> > *)(v3 + 96),
                  (const __gnu_cxx::__normal_iterator<const data::GCGSkillTagType*,std::vector<data::GCGSkillTagType> > *)(v3 + 128)) )
        {
          v30 = __gnu_cxx::__normal_iterator<data::GCGSkillTagType const*,std::vector<data::GCGSkillTagType>>::operator*((const __gnu_cxx::__normal_iterator<const data::GCGSkillTagType*,std::vector<data::GCGSkillTagType> > *const)(v3 + 96));
          skill_tag = v30;
          if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v30);
          }
          if ( *skill_tag )
          {
            if ( *(_BYTE *)(((unsigned __int64)skill_tag >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)skill_tag & 7) + 3) >= *(_BYTE *)(((unsigned __int64)skill_tag >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4(skill_tag);
            }
            if ( *skill_tag == GCG_SKILL_TAG_PASSIVE )
              has_passive_tag = 1;
            has_active_tag = 1;
          }
          __gnu_cxx::__normal_iterator<data::GCGSkillTagType const*,std::vector<data::GCGSkillTagType>>::operator++((__gnu_cxx::__normal_iterator<const data::GCGSkillTagType*,std::vector<data::GCGSkillTagType> > *const)(v3 + 96));
        }
        *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
        *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) = -8;
        if ( !has_active_tag || has_passive_tag )
        {
          *(_DWORD *)(((v3 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 575) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 544, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 544),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc",
            1035);
          v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 544),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v32 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v31, (const char (*)[44])byte_1A50DAC0);
          v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &config_effect->skill_id);
          common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v33, (const char (*)[26])byte_1A50DC00);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 544));
          ret = -1;
        }
        result = ret;
      }
      else
      {
        if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 63) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 288, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 288),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc",
          988);
        v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v3 + 288),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v16 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v15, (const char (*)[10])"skill_id:");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &config_effect->skill_id);
        v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v17, (const char (*)[12])" json name:");
        v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                v18,
                &skill_excel_config_ptr->skill_json);
        common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])" not find");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
        result = -1;
      }
    }
    else
    {
      if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 1) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectModifiedCharacterAssignUseSkillValidatorFunc",
        982);
      v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v3 + 224),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v12 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v11,
              (const char (*)[32])"skill_id excel config not find:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &config_effect->skill_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 224));
      result = -1;
    }
  }
  if ( v45 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 1042: range 000000000F212408-000000000F2129E3
int32_t __cdecl ConfigGCGEffectFixRerollDiceToSpecialTypeValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t fixed; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectFixRerollDiceToSpecialType,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 27 cast_config_effect_ptr:1042 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectFixRerollDiceToSpecialTypeValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectFixRerollDiceToSpecialTypeValidator",
      1042);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      v8,
      (const char (*)[42])"ConfigGCGEffectFixRerollDiceToSpecialType");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    fixed = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectFixRerollDiceToSpecialType,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectFixRerollDiceToSpecialType>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectFixRerollDiceToSpecialType> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectFixRerollDiceToSpecialTypeValidator",
        1042);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
        v11,
        (const char (*)[42])"ConfigGCGEffectFixRerollDiceToSpecialType");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      fixed = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectFixRerollDiceToSpecialTypeValidator",
          1042);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        fixed = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectFixRerollDiceToSpecialType,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectFixRerollDiceToSpecialType,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        fixed = ConfigGCGEffectFixRerollDiceToSpecialTypeValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectFixRerollDiceToSpecialType>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectFixRerollDiceToSpecialType> *const)(v4 + 32));
  }
  result = fixed;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1043: range 000000000F2129E4-000000000F2131DB
int32_t __cdecl ConfigGCGEffectFixRerollDiceToSpecialTypeValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectFixRerollDiceToSpecialType *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectDiceType fixed_dice_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 40 "
                        "9 <unknown> 256 56 24 valid_enum_type_set:1046";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectFixRerollDiceToSpecialTypeValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 0;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 1;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 2;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 3;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 4;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 5;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 6;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 7;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 8;
  if ( *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 44) & 7) + 3) >= *(_BYTE *)(((v3 + 212) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 212, (((_BYTE)v3 - 44) & 7u) + 3);
  }
  *(_DWORD *)(v3 + 212) = 11;
  std::allocator<data::GCGEffectDiceType>::allocator((std::allocator<data::GCGEffectDiceType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectDiceType>::unordered_set(
    (std::unordered_set<data::GCGEffectDiceType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectDiceType>)__PAIR128__(10LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectDiceType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectDiceType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectDiceType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectDiceType>::~allocator((std::allocator<data::GCGEffectDiceType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectDiceType>,data::GCGEffectDiceType>(
          (std::unordered_set<data::GCGEffectDiceType> *)(v3 + 256),
          &config_effect->fixed_dice_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectFixRerollDiceToSpecialTypeValidatorFunc",
      1046);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            v12,
            (const char (*)[30])"config_effect.fixed_dice_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->fixed_dice_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->fixed_dice_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->fixed_dice_type);
    }
    fixed_dice_type = config_effect->fixed_dice_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      fixed_dice_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = fixed_dice_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectDiceType>::~unordered_set((std::unordered_set<data::GCGEffectDiceType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1061: range 000000000F2131DC-000000000F2137B7
int32_t __cdecl ConfigGCGEffectFixRerollDiceValidator(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t fixed; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<data::ConfigGCGTrigger>::const_reference v12; // rax
  char v13; // al
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<data::ConfigGCGEffectFixRerollDice,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t result; // eax
  char v19[304]; // [rsp+20h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 27 cast_config_effect_ptr:1061 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = ConfigGCGEffectFixRerollDiceValidator;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectFixRerollDiceValidator",
      1061);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           v7,
           (const char (*)[36])"config_effect_ptr is nullptr, name:");
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      v8,
      (const char (*)[29])"ConfigGCGEffectFixRerollDice");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    fixed = -1;
  }
  else
  {
    if ( *(_WORD *)(((v4 + 32) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGEffectFixRerollDice,data::ConfigGCGEffect>((const std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 32));
    if ( std::operator==<data::ConfigGCGEffectFixRerollDice>(
           0LL,
           (const std::shared_ptr<data::ConfigGCGEffectFixRerollDice> *)(v4 + 32)) )
    {
      if ( *(char *)(((v4 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 128, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "ConfigGCGEffectFixRerollDiceValidator",
        1061);
      v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v10,
              (const char (*)[24])"cast effect fail, name:");
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        v11,
        (const char (*)[29])"ConfigGCGEffectFixRerollDice");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      *(_DWORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -117901064;
      fixed = -1;
    }
    else
    {
      if ( is_reaction )
        goto LABEL_25;
      if ( std::vector<data::ConfigGCGTrigger>::size(&config_skill->trigger_list) != 1 )
        goto LABEL_19;
      v12 = std::vector<data::ConfigGCGTrigger>::operator[](&config_skill->trigger_list, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v12);
      }
      if ( v12->type == GCG_TRIGGER_DURATION )
        v13 = 0;
      else
LABEL_19:
        v13 = 1;
      if ( v13 )
      {
        if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
          && (char)((v4 - 64 + 31) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v4 + 192, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "ConfigGCGEffectFixRerollDiceValidator",
          1061);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v4 + 192),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v14, (const char (*)[38])byte_1A50B260);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
        *(_DWORD *)(((v4 + 192) >> 3) + 0x7FFF8000) = -117901064;
        fixed = -1;
      }
      else
      {
LABEL_25:
        v15 = std::__shared_ptr_access<data::ConfigGCGEffectFixRerollDice,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigGCGEffectFixRerollDice,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        fixed = ConfigGCGEffectFixRerollDiceValidatorFunc(config, config_skill, v15);
      }
    }
    std::shared_ptr<data::ConfigGCGEffectFixRerollDice>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffectFixRerollDice> *const)(v4 + 32));
  }
  result = fixed;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1062: range 000000000F2137B8-000000000F213F67
int32_t __cdecl ConfigGCGEffectFixRerollDiceValidatorFunc(
        const HK4EDesignConfig *config,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGEffectFixRerollDice *config_effect)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  __int64 v9; // rsi
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const char *v14; // rsi
  common::milog::MiLogStream *v15; // rcx
  data::GCGEffectDiceType fixed_dice_type; // edi
  char v17; // al
  int v18; // r14d
  int32_t result; // eax
  int32_t v20; // [rsp+14h] [rbp-1ACh]
  char v22[400]; // [rsp+30h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 32 9 <unknown> 176 36 "
                        "9 <unknown> 256 56 24 valid_enum_type_set:1065";
  *(_QWORD *)(v3 + 16) = ConfigGCGEffectFixRerollDiceValidatorFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234753535;
  v5[536862723] = 61956;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -234618880;
  v5[536862727] = -218959118;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  if ( *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 176) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 176, config_skill);
  *(_DWORD *)(v3 + 176) = 0;
  v6 = (((_BYTE)v3 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 76) & 7) + 3) >= *(_BYTE *)(((v3 + 180) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 180, v6);
  }
  *(_DWORD *)(v3 + 180) = 1;
  if ( *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 184) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 184, v6);
  *(_DWORD *)(v3 + 184) = 2;
  v7 = (((_BYTE)v3 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 68) & 7) + 3) >= *(_BYTE *)(((v3 + 188) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 188, v7);
  }
  *(_DWORD *)(v3 + 188) = 3;
  if ( *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 192) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 192, v7);
  *(_DWORD *)(v3 + 192) = 4;
  v8 = (((_BYTE)v3 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 60) & 7) + 3) >= *(_BYTE *)(((v3 + 196) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 196, v8);
  }
  *(_DWORD *)(v3 + 196) = 5;
  if ( *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 200) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 200, v8);
  *(_DWORD *)(v3 + 200) = 6;
  v9 = (((_BYTE)v3 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) != 0
    && (char)(((v3 - 52) & 7) + 3) >= *(_BYTE *)(((v3 + 204) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v3 + 204, v9);
  }
  *(_DWORD *)(v3 + 204) = 7;
  if ( *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 208) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v3 + 208, v9);
  *(_DWORD *)(v3 + 208) = 8;
  std::allocator<data::GCGEffectDiceType>::allocator((std::allocator<data::GCGEffectDiceType> *const)(v3 + 80));
  std::unordered_set<data::GCGEffectDiceType>::unordered_set(
    (std::unordered_set<data::GCGEffectDiceType> *const)(v3 + 256),
    (std::initializer_list<data::GCGEffectDiceType>)__PAIR128__(9LL, v3 + 176),
    0LL,
    (const std::unordered_set<data::GCGEffectDiceType>::hasher *)(v3 + 48),
    (const std::unordered_set<data::GCGEffectDiceType>::key_equal *)(v3 + 64),
    (const std::unordered_set<data::GCGEffectDiceType>::allocator_type *)(v3 + 80));
  std::allocator<data::GCGEffectDiceType>::~allocator((std::allocator<data::GCGEffectDiceType> *const)(v3 + 80));
  *(_BYTE *)(((v3 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
  v10 = ((v3 + 176) >> 3) + 2147450880;
  *(_DWORD *)v10 = -117901064;
  *(_BYTE *)(v10 + 4) = -8;
  if ( !common::tools::MiscUtils::isContains<std::unordered_set<data::GCGEffectDiceType>,data::GCGEffectDiceType>(
          (std::unordered_set<data::GCGEffectDiceType> *)(v3 + 256),
          &config_effect->fixed_dice_type) )
  {
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v3 + 112) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 143) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 112, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 112),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "ConfigGCGEffectFixRerollDiceValidatorFunc",
      1065);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v3 + 112),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v11, (const char (*)[31])byte_1A5047A0);
    v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            v12,
            (const char (*)[30])"config_effect.fixed_dice_type");
    v14 = " value:";
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" value:");
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((unsigned __int64)&config_effect->fixed_dice_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_effect + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_effect->fixed_dice_type >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load4(&config_effect->fixed_dice_type);
    }
    fixed_dice_type = config_effect->fixed_dice_type;
    v17 = *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000);
    if ( v17 != 0 && v17 <= 3 )
    {
      fixed_dice_type = v3 + 96;
      LOBYTE(v14) = v17 != 0;
      __asan_report_store4(v3 + 96, v14);
    }
    *(_DWORD *)(v3 + 96) = fixed_dice_type;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 96));
    *(_BYTE *)(((v3 + 96) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 112));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v20 = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::unordered_set<data::GCGEffectDiceType>::~unordered_set((std::unordered_set<data::GCGEffectDiceType> *const)(v3 + 256));
  if ( v18 == 1 )
    v20 = 0;
  result = v20;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1079: range 000000000F213F68-000000000F22D8A7
void __cdecl GCGEffectConditionValidator::GCGEffectConditionValidator(GCGEffectConditionValidator *const this, HK4EDesignConfig *config);

// Line 1328: range 000000000F22D8A8-000000000F22D8DD
void __cdecl GCGEffectConditionValidator::setCurSkillInfo(
        GCGEffectConditionValidator *const this,
        data::ConfigGCGSkill *config_skill)
{
  std::string::operator=(&this->cur_skill_name_, config_skill);
  GCGEffectConditionValidator::clearErrorCausedByNotRegister(this);
};

// Line 1334: range 000000000F22D8DE-000000000F22DDC5
bool __cdecl GCGEffectConditionValidator::checkConditionTriggerLimitValid(
        const GCGEffectConditionValidator *const this,
        const std::string *condition_name)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  bool result; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  common::milog::MiLogStream *v12; // rax
  const char *v13; // rsi
  common::milog::MiLogStream *v14; // rcx
  data::GCGTriggerType cur_trigger_type; // edi
  char v16; // al
  bool ret; // [rsp+17h] [rbp-F9h]
  const std::map<std::string,std::set<data::GCGTriggerType>>::mapped_type *condition_limit_set; // [rsp+18h] [rbp-F8h]
  char v19[240]; // [rsp+20h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = GCGEffectConditionValidator::checkConditionTriggerLimitValid;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  if ( !std::map<std::string,std::set<data::GCGTriggerType>>::count(&this->condition_limit_trigger_map_, condition_name) )
    goto LABEL_8;
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_trigger_type_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cur_trigger_type_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->cur_trigger_type_);
  }
  if ( this->cur_trigger_type_ )
    v5 = 0;
  else
LABEL_8:
    v5 = 1;
  if ( v5 )
  {
    result = 1;
  }
  else
  {
    condition_limit_set = std::map<std::string,std::set<data::GCGTriggerType>>::at(
                            &this->condition_limit_trigger_map_,
                            condition_name);
    ret = 1;
    if ( !std::set<data::GCGTriggerType>::empty(condition_limit_set)
      && !std::set<data::GCGTriggerType>::count(condition_limit_set, &this->cur_trigger_type_) )
    {
      if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "checkConditionTriggerLimitValid",
        1343);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 64),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v8, (const char (*)[14])byte_1A5123E0);
      if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 128, 32LL);
      }
      GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v2 + 128), this);
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v2 + 128));
      v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])", condition:");
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, condition_name);
      v13 = byte_1A512460;
      v14 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v12, (const char (*)[40])byte_1A512460);
      if ( *(_BYTE *)(((unsigned __int64)&this->cur_trigger_type_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->cur_trigger_type_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->cur_trigger_type_);
      }
      cur_trigger_type = this->cur_trigger_type_;
      v16 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v16 != 0 && v16 <= 3 )
      {
        cur_trigger_type = v2 + 48;
        LOBYTE(v13) = v16 != 0;
        __asan_report_store4(v2 + 48, v13);
      }
      *(_DWORD *)(v2 + 48) = cur_trigger_type;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v2 + 48));
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      std::string::~string((void *)(v2 + 128));
      *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
      ret = 0;
    }
    result = ret;
  }
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1350: range 000000000F22DDC6-000000000F22F466
int32_t __cdecl GCGEffectConditionValidator::validateSKillLimit(
        GCGEffectConditionValidator *const this,
        const data::ConfigGCGSkill *config_skill,
        const data::ConfigGCGLimit *limit)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  data::DeclaredValueMap *p_declared_value_map; // rdx
  data::GCGDeclare *p_declare_value; // rcx
  __int64 v12; // rsi
  data::GCGDeclare *v13; // rsi
  data::DeclaredValueMap *v14; // rdx
  bool v15; // al
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true>::pointer v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // r14
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // r14
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r14
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  int v49; // [rsp+4h] [rbp-48Ch]
  int v50; // [rsp+4h] [rbp-48Ch]
  char v53[1136]; // [rsp+20h] [rbp-470h] BYREF

  v4 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1088LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "19 32 8 15 const_iter:1357 64 8 9 <unknown> 96 16 28 base_declared_value_ptr:1363 128 16 22 decl"
                        "are_value_ptr:1371 160 16 22 declare_value_ptr:1385 192 32 9 <unknown> 256 32 9 <unknown> 320 32"
                        " 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 "
                        "9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9"
                        " <unknown> 1024 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = GCGEffectConditionValidator::validateSKillLimit;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862727] = -218959118;
  v6[536862729] = -218959118;
  v6[536862731] = -218959118;
  v6[536862733] = -218959118;
  v6[536862735] = -218959118;
  v6[536862737] = -218959118;
  v6[536862739] = -218959118;
  v6[536862741] = -218959118;
  v6[536862743] = -218959118;
  v6[536862745] = -218959118;
  v6[536862747] = -218959118;
  v6[536862749] = -218959118;
  v6[536862751] = -218959118;
  v6[536862753] = -202116109;
  if ( (unsigned __int8)std::string::empty(&limit->declare_value) )
  {
    if ( *(char *)(((v4 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "validateSKillLimit",
      1354);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v4 + 192),
           (const char (*)[16])"[CONFIG_ERROR] ");
    v8 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v7, (const char (*)[14])byte_1A5123E0);
    if ( *(char *)(((v4 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 256, 32LL);
    }
    GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v4 + 256), this);
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 256));
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v9, (const char (*)[32])byte_1A5126A0);
    std::string::~string((void *)(v4 + 256));
    *(_DWORD *)(((v4 + 256) >> 3) + 0x7FFF8000) = -117901064;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 192));
    v3 = -1;
    goto LABEL_68;
  }
  p_declared_value_map = &config_skill->declared_value_map;
  p_declare_value = &limit->declare_value;
  v12 = *(unsigned __int8 *)(((v4 + 32) >> 3) + 0x7FFF8000);
  if ( (_BYTE)v12 )
    __asan_report_store8(v4 + 32, v12);
  v13 = p_declare_value;
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v4 + 32) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::find(p_declared_value_map, &p_declare_value->key);
  v14 = &config_skill->declared_value_map;
  if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v4 + 64, v13);
  *(std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::const_iterator *)(v4 + 64) = std::unordered_map<std::string,std::shared_ptr<data::GCGDeclaredValue>>::end(v14);
  v15 = std::__detail::operator==<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,true>(
          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v4 + 32),
          (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,true> *)(v4 + 64));
  *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( !v15 )
  {
    *(_WORD *)(((v4 + 96) >> 3) + 0x7FFF8000) = 0;
    v20 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::GCGDeclaredValue>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::GCGDeclaredValue> >,false,true> *const)(v4 + 32));
    std::shared_ptr<data::GCGDeclaredValue>::shared_ptr(
      (std::shared_ptr<data::GCGDeclaredValue> *const)(v4 + 96),
      &v20->second);
    if ( std::operator==<data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 96), 0LL) )
    {
      *(_DWORD *)(((v4 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "validateSKillLimit",
        1366);
      v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v4 + 448),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v22 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v21, (const char (*)[14])byte_1A5123E0);
      *(_DWORD *)(((v4 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v4 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v4 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v4 + 512, 32LL);
      }
      GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v4 + 512), this);
      v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, (const std::string *)(v4 + 512));
      v24 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(v23, (const char (*)[67])byte_1A512760);
      v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, &limit->declare_value.key);
      common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v25, (const char (*)[14])byte_1A5127E0);
      std::string::~string((void *)(v4 + 512));
      *(_DWORD *)(((v4 + 512) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 448));
      *(_DWORD *)(((v4 + 448) >> 3) + 0x7FFF8000) = -117901064;
      v3 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)limit >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)limit >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(limit);
      }
      if ( limit->type == BindToToken )
      {
        *(_WORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v4 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::static_pointer_cast<data::GCGDeclaredValueToken,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 128));
        if ( std::operator==<data::GCGDeclaredValueToken>(
               (const std::shared_ptr<data::GCGDeclaredValueToken> *)(v4 + 128),
               0LL) )
        {
          *(_DWORD *)(((v4 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSKillLimit",
            1374);
          v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 576),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v27 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v26, (const char (*)[14])byte_1A5123E0);
          *(_DWORD *)(((v4 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 640, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v4 + 640), this);
          v28 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v27,
                  (const std::string *)(v4 + 640));
          v29 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(v28, (const char (*)[67])byte_1A512760);
          v30 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, &limit->declare_value.key);
          common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v30, (const char (*)[14])byte_1A5127E0);
          std::string::~string((void *)(v4 + 640));
          *(_DWORD *)(((v4 + 640) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 576));
          *(_DWORD *)(((v4 + 576) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v49 = 0;
        }
        else
        {
          v31 = std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueToken,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          if ( *(_BYTE *)(((unsigned __int64)&v31->value >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v31->value >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&v31->value);
          }
          if ( v31->value )
          {
            v49 = 1;
          }
          else
          {
            *(_DWORD *)(((v4 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "validateSKillLimit",
              1379);
            v32 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 704),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v33 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v32,
                    (const char (*)[14])byte_1A5123E0);
            *(_DWORD *)(((v4 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 768, 32LL);
            }
            GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v4 + 768), this);
            v34 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v33,
                    (const std::string *)(v4 + 768));
            v35 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                    v34,
                    (const char (*)[67])byte_1A512760);
            v36 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, &limit->declare_value.key);
            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v36, (const char (*)[28])byte_1A512820);
            std::string::~string((void *)(v4 + 768));
            *(_DWORD *)(((v4 + 768) >> 3) + 0x7FFF8000) = -117901064;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 704));
            *(_DWORD *)(((v4 + 704) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v49 = 0;
          }
        }
        std::shared_ptr<data::GCGDeclaredValueToken>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueToken> *const)(v4 + 128));
        *(_WORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = -1800;
        if ( v49 != 1 )
          goto LABEL_67;
      }
      else
      {
        *(_WORD *)(((v4 + 160) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v4 + 160) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::static_pointer_cast<data::GCGDeclaredValueEffectAmount,data::GCGDeclaredValue>((const std::shared_ptr<data::GCGDeclaredValue> *)(v4 + 160));
        if ( std::operator==<data::GCGDeclaredValueEffectAmount>(
               (const std::shared_ptr<data::GCGDeclaredValueEffectAmount> *)(v4 + 160),
               0LL) )
        {
          *(_DWORD *)(((v4 + 832) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 832) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 863) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 863) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 832, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 832),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSKillLimit",
            1388);
          v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v4 + 832),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v38 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v37, (const char (*)[14])byte_1A5123E0);
          *(_DWORD *)(((v4 + 896) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v4 + 896) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v4 + 927) >> 3) + 0x7FFF8000) != 0
            && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 927) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v4 + 896, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v4 + 896), this);
          v39 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v38,
                  (const std::string *)(v4 + 896));
          v40 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(v39, (const char (*)[67])byte_1A512760);
          v41 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v40, &limit->declare_value.key);
          common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v41, (const char (*)[14])byte_1A5127E0);
          std::string::~string((void *)(v4 + 896));
          *(_DWORD *)(((v4 + 896) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 832));
          *(_DWORD *)(((v4 + 832) >> 3) + 0x7FFF8000) = -117901064;
          v3 = -1;
          v50 = 0;
        }
        else
        {
          v42 = std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::GCGDeclaredValueEffectAmount,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          if ( *(_BYTE *)(((unsigned __int64)&v42->value >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v42->value >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&v42->value);
          }
          if ( v42->value )
          {
            v50 = 1;
          }
          else
          {
            *(_DWORD *)(((v4 + 960) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 960) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 991) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 - 33) & 7) >= *(_BYTE *)(((v4 + 991) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 960, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 960),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "validateSKillLimit",
              1393);
            v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v4 + 960),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v44 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v43,
                    (const char (*)[14])byte_1A5123E0);
            *(_DWORD *)(((v4 + 1024) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v4 + 1024) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v4 + 1055) >> 3) + 0x7FFF8000) != 0
              && (char)((v4 + 31) & 7) >= *(_BYTE *)(((v4 + 1055) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v4 + 1024, 32LL);
            }
            GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v4 + 1024), this);
            v45 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v44,
                    (const std::string *)(v4 + 1024));
            v46 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                    v45,
                    (const char (*)[67])byte_1A512760);
            v47 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v46, &limit->declare_value.key);
            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v47, (const char (*)[28])byte_1A512820);
            std::string::~string((void *)(v4 + 1024));
            *(_DWORD *)(((v4 + 1024) >> 3) + 0x7FFF8000) = -117901064;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 960));
            *(_DWORD *)(((v4 + 960) >> 3) + 0x7FFF8000) = -117901064;
            v3 = -1;
            v50 = 0;
          }
        }
        std::shared_ptr<data::GCGDeclaredValueEffectAmount>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValueEffectAmount> *const)(v4 + 160));
        *(_WORD *)(((v4 + 160) >> 3) + 0x7FFF8000) = -1800;
        if ( v50 != 1 )
          goto LABEL_67;
      }
      v3 = 0;
    }
LABEL_67:
    std::shared_ptr<data::GCGDeclaredValue>::~shared_ptr((std::shared_ptr<data::GCGDeclaredValue> *const)(v4 + 96));
    goto LABEL_68;
  }
  *(_DWORD *)(((v4 + 320) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v4 + 320) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) != 0
    && (char)((v4 + 95) & 7) >= *(_BYTE *)(((v4 + 351) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v4 + 320, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v4 + 320),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
    "validateSKillLimit",
    1360);
  v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v4 + 320),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v16, (const char (*)[14])byte_1A5123E0);
  *(_DWORD *)(((v4 + 384) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v4 + 384) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) != 0
    && (char)((v4 - 97) & 7) >= *(_BYTE *)(((v4 + 415) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v4 + 384, 32LL);
  }
  GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v4 + 384), this);
  v18 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v4 + 384));
  v19 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(v18, (const char (*)[70])byte_1A5126E0);
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, &limit->declare_value.key);
  std::string::~string((void *)(v4 + 384));
  *(_DWORD *)(((v4 + 384) >> 3) + 0x7FFF8000) = -117901064;
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 320));
  v3 = -1;
LABEL_68:
  if ( v53 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8080) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862733) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147450924 - (((_DWORD)v6 + 2147450932) & 0xFFFFFFF8) + 92) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1088LL, v53);
  }
  return v3;
};

// Line 1403: range 000000000F22F468-000000000F23058B
int32_t __cdecl GCGEffectConditionValidator::validateSkillConfig(
        GCGEffectConditionValidator *const this,
        data::ConfigGCGSkill *config_skill)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char *v5; // rsi
  data::GCGTriggerType type; // ecx
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  const char *v11; // rsi
  common::milog::MiLogStream *v12; // rcx
  data::GCGTriggerType v13; // edi
  char v14; // al
  common::milog::MiLogStream *v15; // rax
  char *v16; // rsi
  const data::ConfigGCGLimit *v17; // rdx
  data::ConfigGCGLogicConditionPtr *p_condition; // rsi
  bool isReactionSkill; // r14
  bool v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  unsigned __int64 v25; // rax
  unsigned __int64 v26; // rdx
  __int64 v27; // rsi
  __int64 v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v31; // rdx
  common::milog::MiLogStream *v32; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  common::milog::MiLogStream *v36; // rax
  int32_t ret; // [rsp+1Ch] [rbp-304h]
  data::ConfigGCGTriggerList *__for_range; // [rsp+20h] [rbp-300h]
  data::ConfigGCGLimitList *__for_range_0; // [rsp+28h] [rbp-2F8h]
  data::ConfigGCGEffectList *__for_range_1; // [rsp+30h] [rbp-2F0h]
  std::shared_ptr<data::ConfigGCGEffect> *effect_ptr; // [rsp+38h] [rbp-2E8h]
  __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> >::reference trigger; // [rsp+48h] [rbp-2D8h]
  char v45[720]; // [rsp+50h] [rbp-2D0h] BYREF

  v2 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(672LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 48 4 9 <unknown> 64 4 14 leaf_type:1424 80 4 14 leaf_type:1453 96 8 16 __for_begin:1408 128 8"
                        " 14 __for_end:1408 160 8 16 __for_begin:1436 192 8 14 __for_end:1436 224 8 16 __for_begin:1446 2"
                        "56 8 14 __for_end:1446 288 8 9 <unknown> 320 16 26 trigger_condition_ptr:1419 352 16 25 effect_c"
                        "ondition_ptr:1452 384 16 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 60"
                        "8 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = GCGEffectConditionValidator::validateSkillConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -234556924;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862730] = -219021312;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -202116109;
  GCGEffectConditionValidator::setCurSkillInfo(this, config_skill);
  ret = 0;
  __for_range = &config_skill->trigger_list;
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, config_skill);
  *(std::vector<data::ConfigGCGTrigger>::iterator *)(v2 + 96) = std::vector<data::ConfigGCGTrigger>::begin(__for_range);
  if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 128, config_skill);
  *(std::vector<data::ConfigGCGTrigger>::iterator *)(v2 + 128) = std::vector<data::ConfigGCGTrigger>::end(__for_range);
  while ( 1 )
  {
    v5 = (char *)(v2 + 128);
    if ( !__gnu_cxx::operator!=<data::ConfigGCGTrigger *,std::vector<data::ConfigGCGTrigger>>(
            (const __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v2 + 96),
            (const __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *)(v2 + 128)) )
      break;
    trigger = __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger *,std::vector<data::ConfigGCGTrigger>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v2 + 96));
    if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(trigger);
    }
    type = trigger->type;
    v7 = *(_BYTE *)(((unsigned __int64)&this->cur_trigger_type_ >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(&this->cur_trigger_type_, v5);
    }
    this->cur_trigger_type_ = type;
    if ( this->cur_trigger_type_ )
    {
      *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      std::shared_ptr<data::ConfigGCGLogicCondition>::shared_ptr(
        (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v2 + 320),
        &trigger->condition);
      if ( !std::operator==<data::ConfigGCGLogicCondition>(
              (const std::shared_ptr<data::ConfigGCGLogicCondition> *)(v2 + 320),
              0LL) )
      {
        *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 4;
        if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_store4(v2 + 64, 0LL);
        *(_DWORD *)(v2 + 64) = 0;
        if ( GCGEffectConditionValidator::validateSkillConditionConfig(
               this,
               (data::ConfigGCGLogicConditionPtr *)(v2 + 320),
               ConditionNodeTagNone,
               0,
               (ConditionNodeTagType *)(v2 + 64)) )
        {
          ret = -1;
        }
      }
      std::shared_ptr<data::ConfigGCGLogicCondition>::~shared_ptr((std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v2 + 320));
    }
    else
    {
      ret = -1;
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "validateSkillConfig",
        1415);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 416),
             (const char (*)[16])"[CONFIG_ERROR] ");
      v9 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v8, (const char (*)[20])byte_1A512A40);
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, &config_skill->name);
      v11 = " trigger:";
      v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v10, (const char (*)[10])" trigger:");
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)trigger >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(trigger);
      }
      v13 = trigger->type;
      v14 = *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000);
      if ( v14 != 0 && v14 <= 3 )
      {
        v13 = v2 + 48;
        LOBYTE(v11) = v14 != 0;
        __asan_report_store4(v2 + 48, v11);
      }
      *(_DWORD *)(v2 + 48) = v13;
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v15, (const char (*)[11])byte_1A512AC0);
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
    }
    *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -1800;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    __gnu_cxx::__normal_iterator<data::ConfigGCGTrigger *,std::vector<data::ConfigGCGTrigger>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigGCGTrigger*,std::vector<data::ConfigGCGTrigger> > *const)(v2 + 96));
  }
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_trigger_type_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cur_trigger_type_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cur_trigger_type_, v5);
  }
  this->cur_trigger_type_ = GCG_TRIGGER_INVALID;
  __for_range_0 = &config_skill->limit_list;
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 160, v5);
  *(std::vector<data::ConfigGCGLimit>::iterator *)(v2 + 160) = std::vector<data::ConfigGCGLimit>::begin(__for_range_0);
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 192, v5);
  *(std::vector<data::ConfigGCGLimit>::iterator *)(v2 + 192) = std::vector<data::ConfigGCGLimit>::end(__for_range_0);
  while ( 1 )
  {
    v16 = (char *)(v2 + 192);
    if ( !__gnu_cxx::operator!=<data::ConfigGCGLimit *,std::vector<data::ConfigGCGLimit>>(
            (const __gnu_cxx::__normal_iterator<data::ConfigGCGLimit*,std::vector<data::ConfigGCGLimit> > *)(v2 + 160),
            (const __gnu_cxx::__normal_iterator<data::ConfigGCGLimit*,std::vector<data::ConfigGCGLimit> > *)(v2 + 192)) )
      break;
    v17 = __gnu_cxx::__normal_iterator<data::ConfigGCGLimit *,std::vector<data::ConfigGCGLimit>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigGCGLimit*,std::vector<data::ConfigGCGLimit> > *const)(v2 + 160));
    if ( GCGEffectConditionValidator::validateSKillLimit(this, config_skill, v17) )
      ret = -1;
    __gnu_cxx::__normal_iterator<data::ConfigGCGLimit *,std::vector<data::ConfigGCGLimit>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigGCGLimit*,std::vector<data::ConfigGCGLimit> > *const)(v2 + 160));
  }
  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
  __for_range_1 = &config_skill->effect_list;
  *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 224, v16);
  *(std::vector<std::shared_ptr<data::ConfigGCGEffect>>::iterator *)(v2 + 224) = std::vector<std::shared_ptr<data::ConfigGCGEffect>>::begin(__for_range_1);
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 256, v16);
  *(std::vector<std::shared_ptr<data::ConfigGCGEffect>>::iterator *)(v2 + 256) = std::vector<std::shared_ptr<data::ConfigGCGEffect>>::end(__for_range_1);
  while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigGCGEffect> *,std::vector<std::shared_ptr<data::ConfigGCGEffect>>>(
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGEffect>*,std::vector<std::shared_ptr<data::ConfigGCGEffect>> > *)(v2 + 224),
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGEffect>*,std::vector<std::shared_ptr<data::ConfigGCGEffect>> > *)(v2 + 256)) )
  {
    effect_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGEffect> *,std::vector<std::shared_ptr<data::ConfigGCGEffect>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGEffect>*,std::vector<std::shared_ptr<data::ConfigGCGEffect>> > *const)(v2 + 224));
    if ( !std::operator==<data::ConfigGCGEffect>(effect_ptr, 0LL) )
    {
      *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      p_condition = &std::__shared_ptr_access<data::ConfigGCGEffect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGEffect,(__gnu_cxx::_Lock_policy)2,false,false> *const)effect_ptr)->condition;
      std::shared_ptr<data::ConfigGCGLogicCondition>::shared_ptr(
        (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v2 + 352),
        p_condition);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, p_condition);
      *(_DWORD *)(v2 + 80) = 0;
      if ( GCGEffectConditionValidator::validateSkillConditionConfig(
             this,
             (data::ConfigGCGLogicConditionPtr *)(v2 + 352),
             ConditionNodeTagNone,
             0,
             (ConditionNodeTagType *)(v2 + 80)) )
      {
        ret = -1;
      }
      else
      {
        isReactionSkill = GCGEffectConditionValidator::isReactionSkill(this, config_skill);
        *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        std::shared_ptr<data::ConfigGCGEffect>::shared_ptr(
          (std::shared_ptr<data::ConfigGCGEffect> *const)(v2 + 384),
          effect_ptr);
        v20 = GCGEffectConditionValidator::validateSkillEffectConfig(
                this,
                config_skill,
                (data::ConfigGCGEffectPtr *)(v2 + 384),
                isReactionSkill) != 0;
        std::shared_ptr<data::ConfigGCGEffect>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffect> *const)(v2 + 384));
        *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -1800;
        if ( v20 )
        {
          ret = -1;
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillConfig",
            1463);
          v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 480),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v22 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v21, (const char (*)[20])byte_1A512A40);
          v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, &config_skill->name);
          v24 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v23, (const char (*)[9])" effect:");
          *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
          v25 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGCGEffect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGEffect,(__gnu_cxx::_Lock_policy)2,false,false> *const)effect_ptr);
          if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
            v25 = __asan_report_load8(v25);
          v26 = *(_QWORD *)v25 + 32LL;
          v27 = *(unsigned __int8 *)((v26 >> 3) + 0x7FFF8000);
          if ( (_BYTE)v27 )
            v25 = __asan_report_load8(*(_QWORD *)v25 + 32LL);
          v28 = (*(__int64 (__fastcall **)(unsigned __int64))v26)(v25);
          if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
            v28 = __asan_report_store8(v2 + 288, v27);
          *(_QWORD *)(v2 + 288) = v28;
          v29 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                  v24,
                  (const char *const *)(v2 + 288));
          common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v29, (const char (*)[24])byte_1A512B40);
          *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        }
      }
      std::shared_ptr<data::ConfigGCGLogicCondition>::~shared_ptr((std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v2 + 352));
    }
    *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -1800;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGEffect> *,std::vector<std::shared_ptr<data::ConfigGCGEffect>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGEffect>*,std::vector<std::shared_ptr<data::ConfigGCGEffect>> > *const)(v2 + 224));
  }
  *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
  if ( ret && GCGEffectConditionValidator::checkHasOccurNotRegisterConditionError(this) )
  {
    *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 544, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 544),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "validateSkillConfig",
      1470);
    v31 = common::milog::MiLogStream::operator<<<char [82],(char *[82])0>(
            (common::milog::MiLogStream *const)(v2 + 544),
            (const char (*)[82])byte_1A512B80);
    v32 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, &config_skill->name);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v32, (const char (*)[17])byte_1A512C00);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
    result = 0;
  }
  else
  {
    if ( ret )
    {
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 608, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 608),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "validateSkillConfig",
        1475);
      v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              (common::milog::MiLogStream *const)(v2 + 608),
              (const char (*)[16])"[CONFIG_ERROR] ");
      v35 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v34, (const char (*)[14])byte_1A5123E0);
      v36 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, &config_skill->name);
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v36, (const char (*)[27])byte_1A512C40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
    }
    result = ret;
  }
  if ( v45 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 1488: range 000000000F23058C-000000000F2322A2
int32_t __cdecl GCGEffectConditionValidator::validateSkillConditionConfig(
        GCGEffectConditionValidator *const this,
        data::ConfigGCGLogicConditionPtr *logic_condition_ptr,
        ConditionNodeTagType need_tag_type,
        int32_t level,
        ConditionNodeTagType *leaf_type)
{
  int32_t v5; // r14d
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  const char *v9; // rsi
  int v10; // r15d
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rdx
  __int64 v13; // rsi
  __int64 v14; // rax
  char *v15; // rsi
  bool v16; // r15
  common::milog::MiLogStream *v17; // r14
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  int v21; // eax
  std::map<ConditionLayerType,std::set<std::string>> *p_layer_info_map; // rcx
  char v23; // al
  const char *v24; // rsi
  bool v25; // r15
  common::milog::MiLogStream *v26; // r15
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  int32_t v30; // eax
  int v31; // eax
  int v32; // edx
  std::vector<ConditionNodeTagType>::reference v33; // rax
  ConditionNodeTagType *v34; // rdx
  std::vector<ConditionNodeTagType>::reference v35; // rax
  _DWORD *v36; // rdx
  common::milog::MiLogStream *v37; // r14
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rcx
  size_t v40; // rsi
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // r14
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r14
  std::vector<ConditionNodeTagType>::reference v45; // rax
  ConditionNodeTagType *v46; // rdx
  ConditionNodeTagType v47; // esi
  std::vector<ConditionNodeTagType>::reference v48; // rax
  ConditionNodeTagType *v49; // rdx
  ConditionNodeTagType v50; // ecx
  char v51; // dl
  std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rdx
  data::GCGConditionType *p_type; // rax
  std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rdx
  data::GCGConditionType *v55; // rax
  std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rdx
  data::GCGConditionType *v57; // rax
  std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rdx
  data::GCGConditionType *v59; // rax
  std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v60; // rdx
  data::GCGConditionType *v61; // rax
  std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rdx
  data::GCGConditionType *v63; // rax
  char v64; // al
  common::milog::MiLogStream *v65; // r14
  ConditionNodeTagType v66; // esi
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // r14
  int32_t ret; // [rsp+3Ch] [rbp-524h]
  ConditionNodeTagType last_leaf_type; // [rsp+44h] [rbp-51Ch]
  size_t i; // [rsp+48h] [rbp-518h]
  data::ConfigGCGConditionList *condition_ptr_vec; // [rsp+50h] [rbp-510h]
  std::shared_ptr<data::ConfigGCGCondition> *child_condition_ptr; // [rsp+60h] [rbp-500h]
  std::map<ConditionLayerType,std::set<std::string>>::mapped_type *cur_layer_condition_set; // [rsp+68h] [rbp-4F8h]
  char v80[1264]; // [rsp+70h] [rbp-4F0h] BYREF

  v6 = (unsigned __int64)v80;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_5(1216LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "25 32 1 9 <unknown> 48 1 9 <unknown> 64 4 20 child_leaf_type:1512 80 4 9 <unknown> 96 8 16 __for"
                        "_begin:1510 128 8 14 __for_end:1510 160 8 23 cur_condition_name:1528 192 8 9 <unknown> 224 8 9 <"
                        "unknown> 256 8 9 <unknown> 288 16 30 child_logic_condition_ptr:1513 320 24 24 child_leaf_type_ve"
                        "c:1509 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unk"
                        "nown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unkn"
                        "own> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown>";
  *(_QWORD *)(v6 + 16) = GCGEffectConditionValidator::validateSkillConditionConfig;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234753535;
  v8[536862722] = -234556924;
  v8[536862723] = -218959360;
  v8[536862724] = -218959360;
  v8[536862725] = -218959360;
  v8[536862726] = -218959360;
  v8[536862727] = -218959360;
  v8[536862728] = -218959360;
  v8[536862729] = -219021312;
  v8[536862730] = -234881024;
  v8[536862731] = -218959118;
  v8[536862733] = -218959118;
  v8[536862735] = -218959118;
  v8[536862737] = -218959118;
  v8[536862739] = -218959118;
  v8[536862741] = -218959118;
  v8[536862743] = -218959118;
  v8[536862745] = -218959118;
  v8[536862747] = -218959118;
  v8[536862749] = -218959118;
  v8[536862751] = -218959118;
  v8[536862753] = -218959118;
  v8[536862755] = -218959118;
  v8[536862757] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(leaf_type, ((unsigned __int8)leaf_type & 7u) + 3);
  }
  *leaf_type = ConditionNodeTagNone;
  if ( std::operator==<data::ConfigGCGLogicCondition>(logic_condition_ptr, 0LL) )
  {
    v5 = 0;
    goto LABEL_136;
  }
  condition_ptr_vec = &std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)logic_condition_ptr)->conditions;
  if ( std::vector<std::shared_ptr<data::ConfigGCGCondition>>::empty(condition_ptr_vec) )
  {
    v5 = 0;
    goto LABEL_136;
  }
  ret = 0;
  std::vector<ConditionNodeTagType>::vector((std::vector<ConditionNodeTagType> *const)(v6 + 320));
  if ( *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v6 + 96, 0LL);
  *(std::vector<std::shared_ptr<data::ConfigGCGCondition>>::iterator *)(v6 + 96) = std::vector<std::shared_ptr<data::ConfigGCGCondition>>::begin(condition_ptr_vec);
  if ( *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v6 + 128, 0LL);
  *(std::vector<std::shared_ptr<data::ConfigGCGCondition>>::iterator *)(v6 + 128) = std::vector<std::shared_ptr<data::ConfigGCGCondition>>::end(condition_ptr_vec);
  while ( 1 )
  {
    v9 = (const char *)(v6 + 128);
    if ( !__gnu_cxx::operator!=<std::shared_ptr<data::ConfigGCGCondition> *,std::vector<std::shared_ptr<data::ConfigGCGCondition>>>(
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGCondition>*,std::vector<std::shared_ptr<data::ConfigGCGCondition>> > *)(v6 + 96),
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGCondition>*,std::vector<std::shared_ptr<data::ConfigGCGCondition>> > *)(v6 + 128)) )
      break;
    child_condition_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGCondition> *,std::vector<std::shared_ptr<data::ConfigGCGCondition>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGCondition>*,std::vector<std::shared_ptr<data::ConfigGCGCondition>> > *const)(v6 + 96));
    *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v6 + 64, v9);
    *(_DWORD *)(v6 + 64) = 0;
    *(_WORD *)(((v6 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v6 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGLogicCondition,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 288));
    if ( std::operator!=<data::ConfigGCGLogicCondition>(
           (const std::shared_ptr<data::ConfigGCGLogicCondition> *)(v6 + 288),
           0LL) )
    {
      v9 = (const char *)(v6 + 288);
      if ( GCGEffectConditionValidator::validateSkillConditionConfig(
             this,
             (data::ConfigGCGLogicConditionPtr *)(v6 + 288),
             need_tag_type,
             level,
             (ConditionNodeTagType *)(v6 + 64)) )
      {
        ret = -1;
        v10 = 0;
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = 0;
    v11 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGCGCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)child_condition_ptr);
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8(v11);
    v12 = *(_QWORD *)v11 + 32LL;
    v13 = *(unsigned __int8 *)((v12 >> 3) + 0x7FFF8000);
    if ( (_BYTE)v13 )
      v11 = __asan_report_load8(*(_QWORD *)v11 + 32LL);
    v14 = (*(__int64 (__fastcall **)(unsigned __int64))v12)(v11);
    if ( *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) )
      v14 = __asan_report_store8(v6 + 160, v13);
    *(_QWORD *)(v6 + 160) = v14;
    if ( !level )
    {
      *(_DWORD *)(((v6 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v6 + 32);
      if ( *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v6 + 160);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v6 + 384),
        *(const char **)(v6 + 160),
        (const std::allocator<char> *)(v6 + 32));
      v15 = (char *)(v6 + 384);
      v16 = std::map<std::string,std::set<ConditionNodeTagType>>::count(
              &this->condition_tag_info_map_,
              (const std::map<std::string,std::set<ConditionNodeTagType>>::key_type *)(v6 + 384)) == 0;
      std::string::~string((void *)(v6 + 384));
      *(_DWORD *)(((v6 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v6 + 32);
      *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) = -8;
      if ( v16 )
      {
        *(_DWORD *)(((v6 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v6 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "validateSkillConditionConfig",
          1535);
        v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                (common::milog::MiLogStream *const)(v6 + 448),
                (const char (*)[20])byte_1A512A40);
        *(_DWORD *)(((v6 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 64 + 95) & 7) >= *(_BYTE *)(((v6 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 512, 32LL);
        }
        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 512), this);
        v18 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v6 + 512));
        v19 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v18, (const char (*)[18])byte_1A512F00);
        v20 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v19, (const char *const *)(v6 + 160));
        v9 = byte_1A512F40;
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v20, (const char (*)[23])byte_1A512F40);
        std::string::~string((void *)(v6 + 512));
        *(_DWORD *)(((v6 + 512) >> 3) + 0x7FFF8000) = -117901064;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 448));
        *(_DWORD *)(((v6 + 448) >> 3) + 0x7FFF8000) = -117901064;
        GCGEffectConditionValidator::markErrorCausedByNotRegister(this);
        v5 = -1;
        v21 = 0;
        goto LABEL_58;
      }
      p_layer_info_map = &this->layer_info_map_;
      *(_BYTE *)(((v6 + 80) >> 3) + 0x7FFF8000) = 4;
      v23 = *(_BYTE *)(((v6 + 80) >> 3) + 0x7FFF8000);
      if ( v23 != 0 && v23 <= 3 )
      {
        LOBYTE(v15) = v23 != 0;
        __asan_report_store4(v6 + 80, v15);
      }
      *(_DWORD *)(v6 + 80) = 0;
      cur_layer_condition_set = std::map<ConditionLayerType,std::set<std::string>>::operator[](
                                  p_layer_info_map,
                                  (std::map<ConditionLayerType,std::set<std::string>>::key_type *)(v6 + 80));
      *(_BYTE *)(((v6 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v6 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 224) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 224, v6 + 80);
      *(std::set<std::string>::iterator *)(v6 + 224) = std::set<std::string>::end(cur_layer_condition_set);
      *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) = 0;
      *(_DWORD *)(((v6 + 576) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v6 + 48);
      if ( *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v6 + 160);
      v24 = *(const char **)(v6 + 160);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v6 + 576),
        v24,
        (const std::allocator<char> *)(v6 + 48));
      if ( *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 192, v24);
      *(std::set<std::string>::const_iterator *)(v6 + 192) = std::set<std::string>::find(
                                                               cur_layer_condition_set,
                                                               (const std::set<std::string>::key_type *)(v6 + 576));
      v25 = std::operator==(
              (const std::_Rb_tree_const_iterator<std::string >::_Self *)(v6 + 192),
              (const std::_Rb_tree_const_iterator<std::string >::_Self *)(v6 + 224));
      *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) = -8;
      std::string::~string((void *)(v6 + 576));
      *(_DWORD *)(((v6 + 576) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v6 + 48);
      *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v6 + 224) >> 3) + 0x7FFF8000) = -8;
      if ( v25 )
      {
        *(_DWORD *)(((v6 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v6 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "validateSkillConditionConfig",
          1543);
        v26 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                (common::milog::MiLogStream *const)(v6 + 640),
                (const char (*)[20])byte_1A512A40);
        *(_DWORD *)(((v6 + 704) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 704) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 735) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 735) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 704, 32LL);
        }
        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 704), this);
        v27 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, (const std::string *)(v6 + 704));
        v28 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v27, (const char (*)[13])", condition:");
        v29 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v28, (const char *const *)(v6 + 160));
        v9 = byte_1A512F80;
        common::milog::MiLogStream::operator<<<char [74],(char *[74])0>(v29, (const char (*)[74])byte_1A512F80);
        std::string::~string((void *)(v6 + 704));
        *(_DWORD *)(((v6 + 704) >> 3) + 0x7FFF8000) = -117901064;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 640));
        *(_DWORD *)(((v6 + 640) >> 3) + 0x7FFF8000) = -117901064;
        ret = -1;
        v21 = 1;
        goto LABEL_58;
      }
    }
    if ( level )
      v30 = level + 1;
    else
      v30 = 0;
    v9 = (const char *)child_condition_ptr;
    if ( GCGEffectConditionValidator::validateSkillSpecificConditionConfig(
           this,
           child_condition_ptr,
           need_tag_type,
           v30,
           (ConditionNodeTagType *)(v6 + 64)) )
    {
      ret = -1;
      v21 = 1;
    }
    else
    {
      v21 = 2;
    }
LABEL_58:
    *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( !v21 )
    {
      v10 = 1;
      goto LABEL_63;
    }
    if ( v21 != 2 )
    {
      v10 = 0;
      goto LABEL_63;
    }
LABEL_62:
    v9 = (const char *)(v6 + 64);
    std::vector<ConditionNodeTagType>::push_back(
      (std::vector<ConditionNodeTagType> *const)(v6 + 320),
      (const std::vector<ConditionNodeTagType>::value_type *)(v6 + 64));
    v10 = 2;
LABEL_63:
    std::shared_ptr<data::ConfigGCGLogicCondition>::~shared_ptr((std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 288));
    if ( v10 )
    {
      if ( v10 == 2 )
        v31 = 2;
      else
        v31 = 1;
    }
    else
    {
      v31 = 0;
    }
    *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_WORD *)(((v6 + 288) >> 3) + 0x7FFF8000) = -1800;
    if ( v31 && v31 != 2 )
    {
      v32 = 0;
      goto LABEL_73;
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGCondition> *,std::vector<std::shared_ptr<data::ConfigGCGCondition>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGCGCondition>*,std::vector<std::shared_ptr<data::ConfigGCGCondition>> > *const)(v6 + 96));
  }
  v32 = 1;
LABEL_73:
  *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) = -8;
  if ( v32 == 1 )
  {
    if ( std::vector<ConditionNodeTagType>::empty((const std::vector<ConditionNodeTagType> *const)(v6 + 320)) )
    {
      v5 = ret;
    }
    else
    {
      v33 = std::vector<ConditionNodeTagType>::front((std::vector<ConditionNodeTagType> *const)(v6 + 320));
      v34 = v33;
      if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v33);
      }
      last_leaf_type = *v34;
      for ( i = 1LL;
            i < std::vector<ConditionNodeTagType>::size((const std::vector<ConditionNodeTagType> *const)(v6 + 320));
            ++i )
      {
        v9 = (const char *)i;
        v35 = std::vector<ConditionNodeTagType>::operator[]((std::vector<ConditionNodeTagType> *const)(v6 + 320), i);
        v36 = v35;
        if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v35);
        }
        if ( last_leaf_type != *v36 )
        {
          *(_DWORD *)(((v6 + 768) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 768) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 799) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 64 + 95) & 7) >= *(_BYTE *)(((v6 + 799) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 768, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v6 + 768),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillConditionConfig",
            1573);
          v37 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  (common::milog::MiLogStream *const)(v6 + 768),
                  (const char (*)[20])byte_1A512A40);
          *(_DWORD *)(((v6 + 832) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 832) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 863) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 863) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 832, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 832), this);
          v38 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v37,
                  (const std::string *)(v6 + 832));
          v39 = common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(v38, (const char (*)[69])byte_1A513000);
          *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) = 0;
          v40 = i + 1;
          if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
            __asan_report_store8(v6 + 256, v40);
          *(_QWORD *)(v6 + 256) = v40;
          v41 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v39,
                  (const unsigned __int64 *)(v6 + 256));
          v42 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v41, (const char (*)[20])byte_1A513080);
          *(_DWORD *)(((v6 + 896) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 896) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 927) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 927) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 896, 32LL);
          }
          getConditionNodeTagDesc((std::string *)(v6 + 896), last_leaf_type);
          v43 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v42,
                  (const std::string *)(v6 + 896));
          v44 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v43, (const char (*)[9])byte_1A5130C0);
          *(_DWORD *)(((v6 + 960) >> 3) + 0x7FFF8000) = 0;
          v45 = std::vector<ConditionNodeTagType>::operator[]((std::vector<ConditionNodeTagType> *const)(v6 + 320), i);
          v46 = v45;
          if ( *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v45 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v45);
          }
          v47 = *v46;
          if ( *(char *)(((v6 + 960) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 991) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 991) >> 3) + 0x7FFF8000) )
          {
            v47 = 32;
            __asan_report_store_n(v6 + 960, 32LL);
          }
          getConditionNodeTagDesc((std::string *)(v6 + 960), v47);
          v9 = (const char *)(v6 + 960);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v44, (const std::string *)(v6 + 960));
          std::string::~string((void *)(v6 + 960));
          *(_DWORD *)(((v6 + 960) >> 3) + 0x7FFF8000) = -117901064;
          std::string::~string((void *)(v6 + 896));
          *(_DWORD *)(((v6 + 896) >> 3) + 0x7FFF8000) = -117901064;
          *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) = -8;
          std::string::~string((void *)(v6 + 832));
          *(_DWORD *)(((v6 + 832) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 768));
          *(_DWORD *)(((v6 + 768) >> 3) + 0x7FFF8000) = -117901064;
          ret = -1;
        }
      }
      v48 = std::vector<ConditionNodeTagType>::front((std::vector<ConditionNodeTagType> *const)(v6 + 320));
      v49 = v48;
      if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v48 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v48);
      }
      v50 = *v49;
      v51 = *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000);
      if ( v51 != 0 && (char)(((unsigned __int8)leaf_type & 7) + 3) >= v51 )
      {
        LOBYTE(v9) = v51 != 0;
        __asan_report_store4(leaf_type, v9);
      }
      *leaf_type = v50;
      if ( std::vector<ConditionNodeTagType>::size((const std::vector<ConditionNodeTagType> *const)(v6 + 320)) > 1 )
      {
        v52 = std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)logic_condition_ptr);
        p_type = &v52->type;
        if ( *(_BYTE *)(((unsigned __int64)p_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_type >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(p_type);
        }
        if ( v52->type == LARGE )
          goto LABEL_120;
        v54 = std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)logic_condition_ptr);
        v55 = &v54->type;
        if ( *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v55 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v55);
        }
        if ( v54->type == LARGE_EQUAL )
          goto LABEL_120;
        v56 = std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)logic_condition_ptr);
        v57 = &v56->type;
        if ( *(_BYTE *)(((unsigned __int64)v57 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v57 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v57 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v57);
        }
        if ( v56->type == EQUAL )
          goto LABEL_120;
        v58 = std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)logic_condition_ptr);
        v59 = &v58->type;
        if ( *(_BYTE *)(((unsigned __int64)v59 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v59 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v59 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v59);
        }
        if ( v58->type == LESS_EQUAL )
          goto LABEL_120;
        v60 = std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)logic_condition_ptr);
        v61 = &v60->type;
        if ( *(_BYTE *)(((unsigned __int64)v61 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v61 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v61 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v61);
        }
        if ( v60->type == LESS )
          goto LABEL_120;
        v62 = std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)logic_condition_ptr);
        v63 = &v62->type;
        if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v63);
        }
        if ( v62->type == NOT_EQUAL )
LABEL_120:
          v64 = 1;
        else
          v64 = 0;
        if ( v64 )
        {
          *(_DWORD *)(((v6 + 1024) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 1024) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 1055) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 64 + 95) & 7) >= *(_BYTE *)(((v6 + 1055) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 1024, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v6 + 1024),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillConditionConfig",
            1590);
          v65 = common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(
                  (common::milog::MiLogStream *const)(v6 + 1024),
                  (const char (*)[64])"ConfigGCGLogicCondition revise child condition leaf_type, from:");
          *(_DWORD *)(((v6 + 1088) >> 3) + 0x7FFF8000) = 0;
          if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(leaf_type);
          }
          v66 = *leaf_type;
          if ( *(char *)(((v6 + 1088) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 1119) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 1119) >> 3) + 0x7FFF8000) )
          {
            v66 = 32;
            __asan_report_store_n(v6 + 1088, 32LL);
          }
          getConditionNodeTagDesc((std::string *)(v6 + 1088), v66);
          v67 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v65,
                  (const std::string *)(v6 + 1088));
          v68 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v67, (const char (*)[5])" to ");
          *(_DWORD *)(((v6 + 1152) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 1152) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 1183) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 1183) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 1152, 32LL);
          }
          getConditionNodeTagDesc((std::string *)(v6 + 1152), ConditionNodeTagBool);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v68, (const std::string *)(v6 + 1152));
          std::string::~string((void *)(v6 + 1152));
          *(_DWORD *)(((v6 + 1152) >> 3) + 0x7FFF8000) = -117901064;
          std::string::~string((void *)(v6 + 1088));
          *(_DWORD *)(((v6 + 1088) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 1024));
          *(_DWORD *)(((v6 + 1024) >> 3) + 0x7FFF8000) = -117901064;
          if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(leaf_type, ((unsigned __int8)leaf_type & 7u) + 3);
          }
          *leaf_type = ConditionNodeTagBool;
        }
      }
      v5 = ret;
    }
  }
  std::vector<ConditionNodeTagType>::~vector((std::vector<ConditionNodeTagType> *const)(v6 + 320));
LABEL_136:
  if ( v80 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8090) = 0LL;
    memset(
      (void *)((unsigned __int64)(v8 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v8 + 2147450880 - (((_DWORD)v8 + 2147450888) & 0xFFFFFFF8) + 152) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    __asan_stack_free_5(v6, 1216LL, v80);
  }
  return v5;
};

// Line 1603: range 000000000F2322A4-000000000F23AA87
__int64 __fastcall GCGEffectConditionValidator::validateSkillSpecificConditionConfig(
        GCGEffectConditionValidator *const this,
        data::ConfigGCGConditionPtr *condition_ptr,
        ConditionNodeTagType need_tag_type,
        int32_t level,
        ConditionNodeTagType *leaf_type)
{
  unsigned int v5; // r13d
  unsigned __int64 v6; // r14
  __int64 v7; // rax
  _DWORD *v8; // r12
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  __int64 v11; // rsi
  __int64 v12; // rax
  common::milog::MiLogStream *v13; // r13
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  const char *v17; // rsi
  const char *v18; // rsi
  std::map<std::string,std::set<ConditionNodeTagType>> *p_condition_tag_info_map; // rdx
  char *v20; // rsi
  bool v21; // al
  bool v22; // al
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r13
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r13
  ConditionNodeTagType v29; // esi
  int v30; // edx
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  std::map<ConditionLayerType,std::set<std::string>> *p_layer_info_map; // rcx
  char v35; // al
  bool v36; // r13
  common::milog::MiLogStream *v37; // r13
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  unsigned __int64 v41; // rax
  std::map<std::string,std::set<ConditionNodeTagType>>::mapped_type *v42; // rsi
  char *v43; // rsi
  bool v44; // al
  bool v45; // al
  common::milog::MiLogStream *v46; // r13
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // r13
  ConditionNodeTagType v55; // esi
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // r13
  ConditionNodeTagType v58; // esi
  unsigned __int64 v59; // rax
  std::map<std::string,std::set<ConditionNodeTagType>>::mapped_type *v60; // rsi
  std::set<ConditionNodeTagType>::size_type v61; // rax
  std::set<ConditionNodeTagType>::size_type v62; // rax
  common::milog::MiLogStream *v63; // r13
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // r13
  common::milog::MiLogStream *v68; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalLogicNot,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // r13
  common::milog::MiLogStream *v72; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalLogicNot,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // r13
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // r13
  ConditionNodeTagType v78; // esi
  common::milog::MiLogStream *v79; // r13
  common::milog::MiLogStream *v80; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalCheckParitity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // r13
  common::milog::MiLogStream *v84; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalCheckParitity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v85; // rax
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // r13
  common::milog::MiLogStream *v88; // rax
  common::milog::MiLogStream *v89; // r13
  ConditionNodeTagType v90; // esi
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v91; // rax
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // r13
  common::milog::MiLogStream *v94; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v95; // rax
  common::milog::MiLogStream *v96; // rax
  common::milog::MiLogStream *v97; // r13
  common::milog::MiLogStream *v98; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v99; // rax
  common::milog::MiLogStream *v100; // rax
  common::milog::MiLogStream *v101; // r13
  common::milog::MiLogStream *v102; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v103; // rax
  common::milog::MiLogStream *v104; // rax
  common::milog::MiLogStream *v105; // r13
  common::milog::MiLogStream *v106; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v107; // rax
  common::milog::MiLogStream *v108; // rax
  common::milog::MiLogStream *v109; // r13
  common::milog::MiLogStream *v110; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v111; // rax
  common::milog::MiLogStream *v112; // rax
  common::milog::MiLogStream *v113; // r13
  common::milog::MiLogStream *v114; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchThisCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v115; // rax
  common::milog::MiLogStream *v116; // rax
  common::milog::MiLogStream *v117; // r13
  common::milog::MiLogStream *v118; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchThisCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // r13
  common::milog::MiLogStream *v122; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionCurCardAttachToCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v123; // rax
  common::milog::MiLogStream *v124; // rax
  common::milog::MiLogStream *v125; // r13
  common::milog::MiLogStream *v126; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionCurCardAttachToCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v127; // rax
  common::milog::MiLogStream *v128; // rax
  common::milog::MiLogStream *v129; // r13
  common::milog::MiLogStream *v130; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v131; // rax
  common::milog::MiLogStream *v132; // rax
  common::milog::MiLogStream *v133; // r13
  common::milog::MiLogStream *v134; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v135; // rax
  common::milog::MiLogStream *v136; // rax
  common::milog::MiLogStream *v137; // r13
  common::milog::MiLogStream *v138; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v139; // rax
  common::milog::MiLogStream *v140; // rax
  common::milog::MiLogStream *v141; // r13
  common::milog::MiLogStream *v142; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v143; // rax
  common::milog::MiLogStream *v144; // rax
  common::milog::MiLogStream *v145; // r13
  common::milog::MiLogStream *v146; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v147; // rax
  common::milog::MiLogStream *v148; // rax
  common::milog::MiLogStream *v149; // r13
  common::milog::MiLogStream *v150; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v151; // rax
  common::milog::MiLogStream *v152; // rax
  common::milog::MiLogStream *v153; // r13
  common::milog::MiLogStream *v154; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalThisSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v155; // rax
  common::milog::MiLogStream *v156; // rax
  common::milog::MiLogStream *v157; // r13
  common::milog::MiLogStream *v158; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalThisSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v159; // rax
  common::milog::MiLogStream *v160; // rax
  common::milog::MiLogStream *v161; // r13
  common::milog::MiLogStream *v162; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v163; // rax
  common::milog::MiLogStream *v164; // rax
  common::milog::MiLogStream *v165; // r13
  common::milog::MiLogStream *v166; // rax
  std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v167; // rax
  common::milog::MiLogStream *v168; // rax
  common::milog::MiLogStream *v169; // r13
  common::milog::MiLogStream *v170; // rax
  common::milog::MiLogStream *v171; // rax
  common::milog::MiLogStream *v172; // rax
  std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v173; // rax
  common::milog::MiLogStream *v175; // rax
  common::milog::MiLogStream *v176; // r13
  common::milog::MiLogStream *v177; // rax
  common::milog::MiLogStream *v178; // rax
  common::milog::MiLogStream *v179; // rax
  char v181; // [rsp+6h] [rbp-1A8Ah]
  char v182; // [rsp+7h] [rbp-1A89h]
  bool v183; // [rsp+8h] [rbp-1A88h]
  bool v184; // [rsp+8h] [rbp-1A88h]
  common::milog::MiLogStream *v185; // [rsp+8h] [rbp-1A88h]
  std::map<ConditionLayerType,std::set<std::string>>::mapped_type *v186; // [rsp+8h] [rbp-1A88h]
  bool v187; // [rsp+8h] [rbp-1A88h]
  char v188; // [rsp+8h] [rbp-1A88h]
  bool v189; // [rsp+8h] [rbp-1A88h]
  bool v190; // [rsp+8h] [rbp-1A88h]
  bool CurCard; // [rsp+8h] [rbp-1A88h]
  int v192; // [rsp+8h] [rbp-1A88h]
  bool SourceCharacter; // [rsp+8h] [rbp-1A88h]
  int v194; // [rsp+8h] [rbp-1A88h]
  bool TargetCharacter; // [rsp+8h] [rbp-1A88h]
  int v196; // [rsp+8h] [rbp-1A88h]
  bool ThisCard; // [rsp+8h] [rbp-1A88h]
  int v198; // [rsp+8h] [rbp-1A88h]
  bool v199; // [rsp+8h] [rbp-1A88h]
  int v200; // [rsp+8h] [rbp-1A88h]
  bool SpecifiedCampOnstageCharacter; // [rsp+8h] [rbp-1A88h]
  int v202; // [rsp+8h] [rbp-1A88h]
  bool CurDieCard; // [rsp+8h] [rbp-1A88h]
  int v204; // [rsp+8h] [rbp-1A88h]
  bool CurDieCardOwner; // [rsp+8h] [rbp-1A88h]
  int v206; // [rsp+8h] [rbp-1A88h]
  bool v207; // [rsp+8h] [rbp-1A88h]
  int v208; // [rsp+8h] [rbp-1A88h]
  bool CurSkill; // [rsp+8h] [rbp-1A88h]
  int v210; // [rsp+8h] [rbp-1A88h]
  ConditionNodeTagType child_need_type; // [rsp+34h] [rbp-1A5Ch]
  std::set<ConditionNodeTagType> *tag_set; // [rsp+38h] [rbp-1A58h]
  char v216[6736]; // [rsp+40h] [rbp-1A50h] BYREF

  v6 = (unsigned __int64)v216;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_7(6688LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "132 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9"
                        " <unknown> 128 1 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkn"
                        "own> 208 4 9 <unknown> 224 4 18 need_tag_type:1602 240 4 10 level:1602 256 8 23 cur_condition_na"
                        "me:1610 288 8 13 tag_iter:1624 320 8 9 <unknown> 352 8 9 <unknown> 384 8 9 <unknown> 416 8 9 <un"
                        "known> 448 8 9 <unknown> 480 8 9 <unknown> 512 8 9 <unknown> 544 16 9 <unknown> 576 16 9 <unknow"
                        "n> 608 16 38 specific_with_child_condition_ptr:1688 640 16 9 <unknown> 672 16 27 specific_condit"
                        "ion_ptr:1692 704 16 9 <unknown> 736 16 27 specific_condition_ptr:1722 768 16 9 <unknown> 800 16 "
                        "27 specific_condition_ptr:1751 832 16 9 <unknown> 864 16 27 specific_condition_ptr:1766 896 16 9"
                        " <unknown> 928 16 27 specific_condition_ptr:1781 960 16 9 <unknown> 992 16 27 specific_condition"
                        "_ptr:1796 1024 16 9 <unknown> 1056 16 27 specific_condition_ptr:1811 1088 16 9 <unknown> 1120 16"
                        " 27 specific_condition_ptr:1826 1152 16 9 <unknown> 1184 16 27 specific_condition_ptr:1841 1216 "
                        "16 9 <unknown> 1248 16 27 specific_condition_ptr:1856 1280 16 9 <unknown> 1312 16 27 specific_co"
                        "ndition_ptr:1871 1344 16 9 <unknown> 1376 16 27 specific_condition_ptr:1886 1408 32 9 <unknown> "
                        "1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 32 9 <unknown> 1728 32 9 <unkno"
                        "wn> 1792 32 9 <unknown> 1856 32 9 <unknown> 1920 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9 <u"
                        "nknown> 2112 32 9 <unknown> 2176 32 9 <unknown> 2240 32 9 <unknown> 2304 32 9 <unknown> 2368 32 "
                        "9 <unknown> 2432 32 9 <unknown> 2496 32 9 <unknown> 2560 32 9 <unknown> 2624 32 9 <unknown> 2688"
                        " 32 9 <unknown> 2752 32 9 <unknown> 2816 32 9 <unknown> 2880 32 9 <unknown> 2944 32 9 <unknown> "
                        "3008 32 9 <unknown> 3072 32 9 <unknown> 3136 32 9 <unknown> 3200 32 9 <unknown> 3264 32 9 <unkno"
                        "wn> 3328 32 9 <unknown> 3392 32 9 <unknown> 3456 32 9 <unknown> 3520 32 9 <unknown> 3584 32 9 <u"
                        "nknown> 3648 32 9 <unknown> 3712 32 9 <unknown> 3776 32 9 <unknown> 3840 32 9 <unknown> 3904 32 "
                        "9 <unknown> 3968 32 9 <unknown> 4032 32 9 <unknown> 4096 32 9 <unknown> 4160 32 9 <unknown> 4224"
                        " 32 9 <unknown> 4288 32 9 <unknown> 4352 32 9 <unknown> 4416 32 9 <unknown> 4480 32 9 <unknown> "
                        "4544 32 9 <unknown> 4608 32 9 <unknown> 4672 32 9 <unknown> 4736 32 9 <unknown> 4800 32 9 <unkno"
                        "wn> 4864 32 9 <unknown> 4928 32 9 <unknown> 4992 32 9 <unknown> 5056 32 9 <unknown> 5120 32 9 <u"
                        "nknown> 5184 32 9 <unknown> 5248 32 9 <unknown> 5312 32 9 <unknown> 5376 32 9 <unknown> 5440 32 "
                        "9 <unknown> 5504 32 9 <unknown> 5568 32 9 <unknown> 5632 32 9 <unknown> 5696 32 9 <unknown> 5760"
                        " 32 9 <unknown> 5824 32 9 <unknown> 5888 32 9 <unknown> 5952 32 9 <unknown> 6016 32 9 <unknown> "
                        "6080 32 9 <unknown> 6144 32 9 <unknown> 6208 32 9 <unknown> 6272 32 9 <unknown> 6336 32 9 <unkno"
                        "wn> 6400 32 9 <unknown> 6464 32 9 <unknown> 6528 48 12 tag_set:1647 6608 48 12 tag_set:1666";
  *(_QWORD *)(v6 + 16) = GCGEffectConditionValidator::validateSkillSpecificConditionConfig;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234753535;
  v8[536862722] = -234753535;
  v8[536862723] = -234753535;
  v8[536862724] = -234556927;
  v8[536862725] = -234556924;
  v8[536862726] = -234556924;
  v8[536862727] = -234556924;
  v8[536862728] = -218959360;
  v8[536862729] = -218959360;
  v8[536862730] = -218959360;
  v8[536862731] = -218959360;
  v8[536862732] = -218959360;
  v8[536862733] = -218959360;
  v8[536862734] = -218959360;
  v8[536862735] = -218959360;
  v8[536862736] = -218959360;
  v8[536862737] = -219021312;
  v8[536862738] = -219021312;
  v8[536862739] = -219021312;
  v8[536862740] = -219021312;
  v8[536862741] = -219021312;
  v8[536862742] = -219021312;
  v8[536862743] = -219021312;
  v8[536862744] = -219021312;
  v8[536862745] = -219021312;
  v8[536862746] = -219021312;
  v8[536862747] = -219021312;
  v8[536862748] = -219021312;
  v8[536862749] = -219021312;
  v8[536862750] = -219021312;
  v8[536862751] = -219021312;
  v8[536862752] = -219021312;
  v8[536862753] = -219021312;
  v8[536862754] = -219021312;
  v8[536862755] = -219021312;
  v8[536862756] = -219021312;
  v8[536862757] = -219021312;
  v8[536862758] = -219021312;
  v8[536862759] = -219021312;
  v8[536862760] = -219021312;
  v8[536862761] = -219021312;
  v8[536862762] = -219021312;
  v8[536862763] = -219021312;
  v8[536862765] = -218959118;
  v8[536862767] = -218959118;
  v8[536862769] = -218959118;
  v8[536862771] = -218959118;
  v8[536862773] = -218959118;
  v8[536862775] = -218959118;
  v8[536862777] = -218959118;
  v8[536862779] = -218959118;
  v8[536862781] = -218959118;
  v8[536862783] = -218959118;
  v8[536862785] = -218959118;
  v8[536862787] = -218959118;
  v8[536862789] = -218959118;
  v8[536862791] = -218959118;
  v8[536862793] = -218959118;
  v8[536862795] = -218959118;
  v8[536862797] = -218959118;
  v8[536862799] = -218959118;
  v8[536862801] = -218959118;
  v8[536862803] = -218959118;
  v8[536862805] = -218959118;
  v8[536862807] = -218959118;
  v8[536862809] = -218959118;
  v8[536862811] = -218959118;
  v8[536862813] = -218959118;
  v8[536862815] = -218959118;
  v8[536862817] = -218959118;
  v8[536862819] = -218959118;
  v8[536862821] = -218959118;
  v8[536862823] = -218959118;
  v8[536862825] = -218959118;
  v8[536862827] = -218959118;
  v8[536862829] = -218959118;
  v8[536862831] = -218959118;
  v8[536862833] = -218959118;
  v8[536862835] = -218959118;
  v8[536862837] = -218959118;
  v8[536862839] = -218959118;
  v8[536862841] = -218959118;
  v8[536862843] = -218959118;
  v8[536862845] = -218959118;
  v8[536862847] = -218959118;
  v8[536862849] = -218959118;
  v8[536862851] = -218959118;
  v8[536862853] = -218959118;
  v8[536862855] = -218959118;
  v8[536862857] = -218959118;
  v8[536862859] = -218959118;
  v8[536862861] = -218959118;
  v8[536862863] = -218959118;
  v8[536862865] = -218959118;
  v8[536862867] = -218959118;
  v8[536862869] = -218959118;
  v8[536862871] = -218959118;
  v8[536862873] = -218959118;
  v8[536862875] = -218959118;
  v8[536862877] = -218959118;
  v8[536862879] = -218959118;
  v8[536862881] = -218959118;
  v8[536862883] = -218959118;
  v8[536862885] = -218959118;
  v8[536862887] = -218959118;
  v8[536862889] = -218959118;
  v8[536862891] = -218959118;
  v8[536862893] = -218959118;
  v8[536862895] = -218959118;
  v8[536862897] = -218959118;
  v8[536862899] = -218959118;
  v8[536862901] = -218959118;
  v8[536862903] = -218959118;
  v8[536862905] = -218959118;
  v8[536862907] = -218959118;
  v8[536862909] = -218959118;
  v8[536862911] = -218959118;
  v8[536862913] = -218959118;
  v8[536862915] = -218959118;
  v8[536862917] = -218959118;
  v8[536862919] = -218959118;
  v8[536862921] = -218959118;
  v8[536862923] = -218959118;
  v8[536862925] = -219021312;
  v8[536862926] = 62194;
  v8[536862928] = -202116109;
  *(_DWORD *)(v6 + 224) = need_tag_type;
  *(_DWORD *)(v6 + 240) = level;
  if ( std::operator==<data::ConfigGCGCondition>(condition_ptr, 0LL) )
  {
    v5 = 0;
    goto LABEL_413;
  }
  v9 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGCGCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)condition_ptr);
  if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
    v9 = __asan_report_load8(v9);
  v10 = *(_QWORD *)v9 + 32LL;
  v11 = *(unsigned __int8 *)((v10 >> 3) + 0x7FFF8000);
  if ( (_BYTE)v11 )
    v9 = __asan_report_load8(*(_QWORD *)v9 + 32LL);
  v12 = (*(__int64 (__fastcall **)(unsigned __int64))v10)(v9);
  if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
    v12 = __asan_report_store8(v6 + 256, v11);
  *(_QWORD *)(v6 + 256) = v12;
  std::allocator<char>::allocator(v6 + 32);
  if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v6 + 256);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v6 + 1408),
    *(const char **)(v6 + 256),
    (const std::allocator<char> *)(v6 + 32));
  v183 = std::map<std::string,std::set<ConditionNodeTagType>>::count(
           &this->condition_tag_info_map_,
           (const std::map<std::string,std::set<ConditionNodeTagType>>::key_type *)(v6 + 1408)) == 0;
  std::string::~string((void *)(v6 + 1408));
  *(_DWORD *)(((v6 + 1408) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v6 + 32);
  *(_BYTE *)(((v6 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v183 )
  {
    *(_DWORD *)(((v6 + 1472) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v6 + 1472) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 1503) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 1503) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v6 + 1472, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v6 + 1472),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "validateSkillSpecificConditionConfig",
      1614);
    v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            (common::milog::MiLogStream *const)(v6 + 1472),
            (const char (*)[20])byte_1A512A40);
    *(_DWORD *)(((v6 + 1536) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v6 + 1536) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 1567) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 1567) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v6 + 1536, 32LL);
    }
    GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 1536), this);
    v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v6 + 1536));
    v15 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v14, (const char (*)[18])byte_1A512F00);
    v16 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v15, (const char *const *)(v6 + 256));
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v16, (const char (*)[23])byte_1A512F40);
    std::string::~string((void *)(v6 + 1536));
    *(_DWORD *)(((v6 + 1536) >> 3) + 0x7FFF8000) = -117901064;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 1472));
    *(_DWORD *)(((v6 + 1472) >> 3) + 0x7FFF8000) = -117901064;
    GCGEffectConditionValidator::markErrorCausedByNotRegister(this);
    v5 = -1;
    goto LABEL_413;
  }
  *(_DWORD *)(((v6 + 1600) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v6 + 48);
  if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v6 + 256);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v6 + 1600),
    *(const char **)(v6 + 256),
    (const std::allocator<char> *)(v6 + 48));
  v17 = (const char *)(v6 + 1600);
  v184 = !GCGEffectConditionValidator::checkConditionTriggerLimitValid(this, (const std::string *)(v6 + 1600));
  std::string::~string((void *)(v6 + 1600));
  *(_DWORD *)(((v6 + 1600) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v6 + 48);
  *(_BYTE *)(((v6 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v184 )
  {
    v5 = -1;
    goto LABEL_413;
  }
  if ( *(_DWORD *)(v6 + 224) >= 2u )
  {
    *(_BYTE *)(((v6 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v6 + 1664) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v6 + 64);
    if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v6 + 256);
    v18 = *(const char **)(v6 + 256);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v6 + 1664),
      v18,
      (const std::allocator<char> *)(v6 + 64));
    if ( *(_BYTE *)(((v6 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 288, v18);
    *(std::map<std::string,std::set<ConditionNodeTagType>>::iterator *)(v6 + 288) = std::map<std::string,std::set<ConditionNodeTagType>>::find(
                                                                                      &this->condition_tag_info_map_,
                                                                                      (const std::map<std::string,std::set<ConditionNodeTagType>>::key_type *)(v6 + 1664));
    std::string::~string((void *)(v6 + 1664));
    *(_DWORD *)(((v6 + 1664) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v6 + 64);
    *(_BYTE *)(((v6 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v6 + 320) >> 3) + 0x7FFF8000) = 0;
    p_condition_tag_info_map = &this->condition_tag_info_map_;
    if ( *(_BYTE *)(((v6 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 320, v6 + 1664);
    *(std::map<std::string,std::set<ConditionNodeTagType>>::iterator *)(v6 + 320) = std::map<std::string,std::set<ConditionNodeTagType>>::end(p_condition_tag_info_map);
    v20 = (char *)(v6 + 320);
    v21 = std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<const std::string,std::set<ConditionNodeTagType> > >::_Self *)(v6 + 288),
            (const std::_Rb_tree_iterator<std::pair<const std::string,std::set<ConditionNodeTagType> > >::_Self *)(v6 + 320));
    *(_BYTE *)(((v6 + 320) >> 3) + 0x7FFF8000) = -8;
    if ( v21 )
    {
      tag_set = &std::_Rb_tree_iterator<std::pair<std::string const,std::set<ConditionNodeTagType>>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,std::set<ConditionNodeTagType> > > *const)(v6 + 288))->second;
      *(_BYTE *)(((v6 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 384) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 384, v20);
      *(std::set<ConditionNodeTagType>::iterator *)(v6 + 384) = std::set<ConditionNodeTagType>::end(tag_set);
      *(_BYTE *)(((v6 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 352) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 352, v20);
      *(std::set<ConditionNodeTagType>::const_iterator *)(v6 + 352) = std::set<ConditionNodeTagType>::find(
                                                                        tag_set,
                                                                        (const std::set<ConditionNodeTagType>::key_type *)(v6 + 224));
      v17 = (const char *)(v6 + 384);
      v22 = std::operator==(
              (const std::_Rb_tree_const_iterator<ConditionNodeTagType>::_Self *)(v6 + 352),
              (const std::_Rb_tree_const_iterator<ConditionNodeTagType>::_Self *)(v6 + 384));
      *(_BYTE *)(((v6 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v6 + 384) >> 3) + 0x7FFF8000) = -8;
      if ( v22 )
      {
        *(_DWORD *)(((v6 + 1728) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 1728) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 1759) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 1759) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 1728, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v6 + 1728),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "validateSkillSpecificConditionConfig",
          1630);
        v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v6 + 1728),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v24 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v23, (const char (*)[20])byte_1A512A40);
        *(_DWORD *)(((v6 + 1792) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 1792) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 1823) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 1823) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 1792, 32LL);
        }
        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 1792), this);
        v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, (const std::string *)(v6 + 1792));
        v26 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v25, (const char (*)[18])byte_1A512F00);
        v27 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v26, (const char *const *)(v6 + 256));
        v28 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v27, (const char (*)[18])byte_1A513D40);
        *(_DWORD *)(((v6 + 1856) >> 3) + 0x7FFF8000) = 0;
        v29 = *(_DWORD *)(v6 + 224);
        if ( *(char *)(((v6 + 1856) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 1887) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 1887) >> 3) + 0x7FFF8000) )
        {
          v29 = 32;
          __asan_report_store_n(v6 + 1856, 32LL);
        }
        getConditionNodeTagDesc((std::string *)(v6 + 1856), v29);
        v17 = (const char *)(v6 + 1856);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, (const std::string *)(v6 + 1856));
        std::string::~string((void *)(v6 + 1856));
        *(_DWORD *)(((v6 + 1856) >> 3) + 0x7FFF8000) = -117901064;
        std::string::~string((void *)(v6 + 1792));
        *(_DWORD *)(((v6 + 1792) >> 3) + 0x7FFF8000) = -117901064;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 1728));
        *(_DWORD *)(((v6 + 1728) >> 3) + 0x7FFF8000) = -117901064;
        v5 = -1;
        v30 = 0;
LABEL_50:
        *(_BYTE *)(((v6 + 288) >> 3) + 0x7FFF8000) = -8;
        if ( v30 != 1 )
          goto LABEL_413;
        goto LABEL_51;
      }
    }
    else
    {
      *(_DWORD *)(((v6 + 1920) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v6 + 1920) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v6 + 1951) >> 3) + 0x7FFF8000) != 0
        && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 1951) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v6 + 1920, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v6 + 1920),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "validateSkillSpecificConditionConfig",
        1636);
      v185 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
               (common::milog::MiLogStream *const)(v6 + 1920),
               (const char (*)[20])byte_1A512A40);
      *(_DWORD *)(((v6 + 1984) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v6 + 1984) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v6 + 2015) >> 3) + 0x7FFF8000) != 0
        && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 2015) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v6 + 1984, 32LL);
      }
      GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 1984), this);
      v31 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v185, (const std::string *)(v6 + 1984));
      v32 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v31, (const char (*)[18])byte_1A512F00);
      v33 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v32, (const char *const *)(v6 + 256));
      v17 = byte_1A512F40;
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v33, (const char (*)[23])byte_1A512F40);
      std::string::~string((void *)(v6 + 1984));
      *(_DWORD *)(((v6 + 1984) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 1920));
      *(_DWORD *)(((v6 + 1920) >> 3) + 0x7FFF8000) = -117901064;
    }
    v30 = 1;
    goto LABEL_50;
  }
LABEL_51:
  p_layer_info_map = &this->layer_info_map_;
  *(_BYTE *)(((v6 + 144) >> 3) + 0x7FFF8000) = 4;
  v35 = *(_BYTE *)(((v6 + 144) >> 3) + 0x7FFF8000);
  if ( v35 != 0 && v35 <= 3 )
  {
    LOBYTE(v17) = v35 != 0;
    __asan_report_store4(v6 + 144, v17);
  }
  *(_DWORD *)(v6 + 144) = 1;
  v186 = std::map<ConditionLayerType,std::set<std::string>>::operator[](
           p_layer_info_map,
           (std::map<ConditionLayerType,std::set<std::string>>::key_type *)(v6 + 144));
  *(_DWORD *)(((v6 + 2048) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v6 + 80) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v6 + 80);
  if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v6 + 256);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v6 + 2048),
    *(const char **)(v6 + 256),
    (const std::allocator<char> *)(v6 + 80));
  v187 = std::set<std::string>::count(v186, (const std::set<std::string>::key_type *)(v6 + 2048)) != 0;
  std::string::~string((void *)(v6 + 2048));
  *(_DWORD *)(((v6 + 2048) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v6 + 80);
  *(_BYTE *)(((v6 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v6 + 144) >> 3) + 0x7FFF8000) = -8;
  if ( !v187 )
  {
    v59 = ((v6 + 6608) >> 3) + 2147450880;
    *(_DWORD *)v59 = 0;
    *(_WORD *)(v59 + 4) = 0;
    *(_DWORD *)(((v6 + 2688) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v6 + 128);
    if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v6 + 256);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v6 + 2688),
      *(const char **)(v6 + 256),
      (const std::allocator<char> *)(v6 + 128));
    v60 = std::map<std::string,std::set<ConditionNodeTagType>>::operator[](
            &this->condition_tag_info_map_,
            (std::map<std::string,std::set<ConditionNodeTagType>>::key_type *)(v6 + 2688));
    std::set<ConditionNodeTagType>::set((std::set<ConditionNodeTagType> *const)(v6 + 6608), v60);
    std::string::~string((void *)(v6 + 2688));
    *(_DWORD *)(((v6 + 2688) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v6 + 128);
    *(_BYTE *)(((v6 + 128) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v6 + 192, v60);
    *(_DWORD *)(v6 + 192) = 4;
    v61 = std::set<ConditionNodeTagType>::count(
            (const std::set<ConditionNodeTagType> *const)(v6 + 6608),
            (const std::set<ConditionNodeTagType>::key_type *)(v6 + 192));
    *(_BYTE *)(((v6 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v61 )
    {
      child_need_type = ConditionNodeTagContextCardObject;
    }
    else
    {
      *(_BYTE *)(((v6 + 208) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v6 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v6 + 208, v6 + 192);
      *(_DWORD *)(v6 + 208) = 5;
      v62 = std::set<ConditionNodeTagType>::count(
              (const std::set<ConditionNodeTagType> *const)(v6 + 6608),
              (const std::set<ConditionNodeTagType>::key_type *)(v6 + 208));
      *(_BYTE *)(((v6 + 208) >> 3) + 0x7FFF8000) = -8;
      if ( v62 )
      {
        child_need_type = ConditionNodeTagContextSkillObject;
      }
      else
      {
        v182 = 0;
        v181 = 0;
        *(_WORD *)(((v6 + 544) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v6 + 544) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalLogicNot,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 544));
        if ( std::operator!=<data::ConfigGCGConditionGlobalLogicNot>(
               (const std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot> *)(v6 + 544),
               0LL) )
        {
          goto LABEL_116;
        }
        *(_WORD *)(((v6 + 576) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v6 + 576) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalCheckParitity,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 576));
        v182 = 1;
        v181 = 1;
        if ( std::operator!=<data::ConfigGCGConditionGlobalCheckParitity>(
               (const std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity> *)(v6 + 576),
               0LL) )
        {
LABEL_116:
          v188 = 1;
        }
        else
        {
          v188 = 0;
        }
        if ( v181 )
          std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity> *const)(v6 + 576));
        if ( v182 )
          *(_WORD *)(((v6 + 576) >> 3) + 0x7FFF8000) = -1800;
        std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot> *const)(v6 + 544));
        *(_WORD *)(((v6 + 544) >> 3) + 0x7FFF8000) = -1800;
        if ( !v188 )
        {
          *(_DWORD *)(((v6 + 2752) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 2752) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 2783) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 2783) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 2752, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v6 + 2752),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillSpecificConditionConfig",
            1684);
          v63 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  (common::milog::MiLogStream *const)(v6 + 2752),
                  (const char (*)[20])byte_1A512A40);
          *(_DWORD *)(((v6 + 2816) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 2816) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 2847) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 2847) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 2816, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 2816), this);
          v64 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v63,
                  (const std::string *)(v6 + 2816));
          v65 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v64, (const char (*)[18])byte_1A513F20);
          v66 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                  v65,
                  (const char *const *)(v6 + 256));
          common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v66, (const char (*)[29])byte_1A513F60);
          std::string::~string((void *)(v6 + 2816));
          *(_DWORD *)(((v6 + 2816) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 2752));
          *(_DWORD *)(((v6 + 2752) >> 3) + 0x7FFF8000) = -117901064;
          v5 = -1;
          goto LABEL_412;
        }
        child_need_type = ConditionNodeTagNone;
      }
    }
    *(_WORD *)(((v6 + 608) >> 3) + 0x7FFF8000) = 0;
    std::shared_ptr<data::ConfigGCGLogicCondition>::shared_ptr(
      (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
      0LL);
    *(_WORD *)(((v6 + 640) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v6 + 640) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalLogicNot,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 640));
    v189 = std::operator!=<data::ConfigGCGConditionGlobalLogicNot>(
             (const std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot> *)(v6 + 640),
             0LL);
    std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot> *const)(v6 + 640));
    *(_WORD *)(((v6 + 640) >> 3) + 0x7FFF8000) = -1800;
    if ( v189 )
    {
      *(_WORD *)(((v6 + 672) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v6 + 672) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalLogicNot,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 672));
      if ( std::operator==<data::ConfigGCGConditionGlobalLogicNot>(
             (const std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot> *)(v6 + 672),
             0LL) )
      {
        *(_DWORD *)(((v6 + 2880) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 2880) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 2911) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 2911) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 2880, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v6 + 2880),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "validateSkillSpecificConditionConfig",
          1695);
        v67 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                (common::milog::MiLogStream *const)(v6 + 2880),
                (const char (*)[20])byte_1A512A40);
        *(_DWORD *)(((v6 + 2944) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 2944) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 2975) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 2975) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 2944, 32LL);
        }
        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 2944), this);
        v68 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v67, (const std::string *)(v6 + 2944));
        common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(v68, (const char (*)[54])byte_1A513FA0);
        std::string::~string((void *)(v6 + 2944));
        *(_DWORD *)(((v6 + 2944) >> 3) + 0x7FFF8000) = -117901064;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 2880));
        *(_DWORD *)(((v6 + 2880) >> 3) + 0x7FFF8000) = -117901064;
        v5 = -1;
      }
      else
      {
        v69 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalLogicNot,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalLogicNot,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 672));
        if ( std::operator==<data::ConfigGCGLogicCondition>(&v69->condition, 0LL) )
        {
          *(_DWORD *)(((v6 + 3008) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 3008) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 3039) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 3039) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 3008, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v6 + 3008),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillSpecificConditionConfig",
            1700);
          v70 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v6 + 3008),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v71 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v70, (const char (*)[20])byte_1A512A40);
          *(_DWORD *)(((v6 + 3072) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 3072) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 3103) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 3103) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 3072, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 3072), this);
          v72 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v71,
                  (const std::string *)(v6 + 3072));
          common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(v72, (const char (*)[57])byte_1A514000);
          std::string::~string((void *)(v6 + 3072));
          *(_DWORD *)(((v6 + 3072) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3008));
          *(_DWORD *)(((v6 + 3008) >> 3) + 0x7FFF8000) = -117901064;
          v5 = -1;
        }
        else
        {
          v73 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalLogicNot,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalLogicNot,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 672));
          std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
            (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
            &v73->condition);
          if ( GCGEffectConditionValidator::validateSkillConditionConfig(
                 this,
                 (data::ConfigGCGLogicConditionPtr *)(v6 + 608),
                 child_need_type,
                 0,
                 leaf_type) )
          {
            v5 = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4(leaf_type);
            }
            if ( *leaf_type == ConditionNodeTagBool )
            {
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v6 + 3136) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 3136) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 3167) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 3167) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 3136, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v6 + 3136),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "validateSkillSpecificConditionConfig",
                1715);
              v74 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v6 + 3136),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v75 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                      v74,
                      (const char (*)[20])byte_1A512A40);
              *(_DWORD *)(((v6 + 3200) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 3200) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 3231) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 3231) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 3200, 32LL);
              }
              GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 3200), this);
              v76 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v75,
                      (const std::string *)(v6 + 3200));
              v77 = common::milog::MiLogStream::operator<<<char [82],(char *[82])0>(
                      v76,
                      (const char (*)[82])byte_1A514060);
              *(_DWORD *)(((v6 + 3264) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(leaf_type);
              }
              v78 = *leaf_type;
              if ( *(char *)(((v6 + 3264) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 3295) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 3295) >> 3) + 0x7FFF8000) )
              {
                v78 = 32;
                __asan_report_store_n(v6 + 3264, 32LL);
              }
              getConditionNodeTagDesc((std::string *)(v6 + 3264), v78);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v77, (const std::string *)(v6 + 3264));
              std::string::~string((void *)(v6 + 3264));
              *(_DWORD *)(((v6 + 3264) >> 3) + 0x7FFF8000) = -117901064;
              std::string::~string((void *)(v6 + 3200));
              *(_DWORD *)(((v6 + 3200) >> 3) + 0x7FFF8000) = -117901064;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3136));
              *(_DWORD *)(((v6 + 3136) >> 3) + 0x7FFF8000) = -117901064;
              v5 = -1;
            }
          }
        }
      }
      std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalLogicNot> *const)(v6 + 672));
      *(_WORD *)(((v6 + 672) >> 3) + 0x7FFF8000) = -1800;
      goto LABEL_411;
    }
    *(_WORD *)(((v6 + 704) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v6 + 704) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalCheckParitity,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 704));
    v190 = std::operator!=<data::ConfigGCGConditionGlobalCheckParitity>(
             (const std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity> *)(v6 + 704),
             0LL);
    std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity> *const)(v6 + 704));
    *(_WORD *)(((v6 + 704) >> 3) + 0x7FFF8000) = -1800;
    if ( v190 )
    {
      *(_WORD *)(((v6 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v6 + 736) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalCheckParitity,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 736));
      if ( std::operator==<data::ConfigGCGConditionGlobalCheckParitity>(
             (const std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity> *)(v6 + 736),
             0LL) )
      {
        *(_DWORD *)(((v6 + 3328) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 3328) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 3359) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 3359) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 3328, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v6 + 3328),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "validateSkillSpecificConditionConfig",
          1725);
        v79 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                (common::milog::MiLogStream *const)(v6 + 3328),
                (const char (*)[20])byte_1A512A40);
        *(_DWORD *)(((v6 + 3392) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 3392) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 3423) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 3423) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 3392, 32LL);
        }
        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 3392), this);
        v80 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v79, (const std::string *)(v6 + 3392));
        common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(v80, (const char (*)[59])byte_1A5140E0);
        std::string::~string((void *)(v6 + 3392));
        *(_DWORD *)(((v6 + 3392) >> 3) + 0x7FFF8000) = -117901064;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3328));
        *(_DWORD *)(((v6 + 3328) >> 3) + 0x7FFF8000) = -117901064;
        v5 = -1;
      }
      else
      {
        v81 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalCheckParitity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalCheckParitity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 736));
        if ( std::operator==<data::ConfigGCGLogicCondition>(&v81->condition, 0LL) )
        {
          *(_DWORD *)(((v6 + 3456) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 3456) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 3487) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 3487) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 3456, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v6 + 3456),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillSpecificConditionConfig",
            1730);
          v82 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v6 + 3456),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v83 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v82, (const char (*)[20])byte_1A512A40);
          *(_DWORD *)(((v6 + 3520) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 3520) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 3551) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 3551) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 3520, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 3520), this);
          v84 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v83,
                  (const std::string *)(v6 + 3520));
          common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(v84, (const char (*)[62])byte_1A514140);
          std::string::~string((void *)(v6 + 3520));
          *(_DWORD *)(((v6 + 3520) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3456));
          *(_DWORD *)(((v6 + 3456) >> 3) + 0x7FFF8000) = -117901064;
          v5 = -1;
        }
        else
        {
          v85 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalCheckParitity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalCheckParitity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 736));
          std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
            (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
            &v85->condition);
          if ( GCGEffectConditionValidator::validateSkillConditionConfig(
                 this,
                 (data::ConfigGCGLogicConditionPtr *)(v6 + 608),
                 child_need_type,
                 0,
                 leaf_type) )
          {
            v5 = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4(leaf_type);
            }
            if ( *leaf_type == ConditionNodeTagNum )
            {
              if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_store4(leaf_type, ((unsigned __int8)leaf_type & 7u) + 3);
              }
              *leaf_type = ConditionNodeTagBool;
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v6 + 3584) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 3584) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 3615) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 3615) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 3584, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v6 + 3584),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "validateSkillSpecificConditionConfig",
                1742);
              v86 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v6 + 3584),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              v87 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                      v86,
                      (const char (*)[20])byte_1A512A40);
              *(_DWORD *)(((v6 + 3648) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 3648) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 3679) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 3679) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 3648, 32LL);
              }
              GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 3648), this);
              v88 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v87,
                      (const std::string *)(v6 + 3648));
              v89 = common::milog::MiLogStream::operator<<<char [86],(char *[86])0>(
                      v88,
                      (const char (*)[86])byte_1A5141A0);
              *(_DWORD *)(((v6 + 3712) >> 3) + 0x7FFF8000) = 0;
              if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(leaf_type);
              }
              v90 = *leaf_type;
              if ( *(char *)(((v6 + 3712) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 3743) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 3743) >> 3) + 0x7FFF8000) )
              {
                v90 = 32;
                __asan_report_store_n(v6 + 3712, 32LL);
              }
              getConditionNodeTagDesc((std::string *)(v6 + 3712), v90);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v89, (const std::string *)(v6 + 3712));
              std::string::~string((void *)(v6 + 3712));
              *(_DWORD *)(((v6 + 3712) >> 3) + 0x7FFF8000) = -117901064;
              std::string::~string((void *)(v6 + 3648));
              *(_DWORD *)(((v6 + 3648) >> 3) + 0x7FFF8000) = -117901064;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3584));
              *(_DWORD *)(((v6 + 3584) >> 3) + 0x7FFF8000) = -117901064;
              v5 = -1;
            }
          }
        }
      }
      std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalCheckParitity> *const)(v6 + 736));
      *(_WORD *)(((v6 + 736) >> 3) + 0x7FFF8000) = -1800;
      goto LABEL_411;
    }
    *(_WORD *)(((v6 + 768) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v6 + 768) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 768));
    CurCard = std::operator!=<data::ConfigGCGConditionGlobalFetchCurCardObject>(
                (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurCardObject> *)(v6 + 768),
                0LL);
    std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurCardObject> *const)(v6 + 768));
    *(_WORD *)(((v6 + 768) >> 3) + 0x7FFF8000) = -1800;
    if ( CurCard )
    {
      *(_WORD *)(((v6 + 800) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v6 + 800) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 800));
      if ( std::operator==<data::ConfigGCGConditionGlobalFetchCurCardObject>(
             (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurCardObject> *)(v6 + 800),
             0LL) )
      {
        *(_DWORD *)(((v6 + 3776) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 3776) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 3807) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 3807) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 3776, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v6 + 3776),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "validateSkillSpecificConditionConfig",
          1754);
        common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
          (common::milog::MiLogStream *const)(v6 + 3776),
          (const char (*)[62])byte_1A514220);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3776));
        *(_DWORD *)(((v6 + 3776) >> 3) + 0x7FFF8000) = -117901064;
        v5 = -1;
        v192 = 0;
      }
      else
      {
        v91 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 800));
        if ( std::operator==<data::ConfigGCGLogicCondition>(&v91->condition, 0LL) )
        {
          *(_DWORD *)(((v6 + 3840) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 3840) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 3871) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 3871) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 3840, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v6 + 3840),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillSpecificConditionConfig",
            1759);
          v92 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v6 + 3840),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v93 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v92, (const char (*)[20])byte_1A512A40);
          *(_DWORD *)(((v6 + 3904) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 3904) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 3935) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 3935) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 3904, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 3904), this);
          v94 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v93,
                  (const std::string *)(v6 + 3904));
          common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(v94, (const char (*)[67])byte_1A514280);
          std::string::~string((void *)(v6 + 3904));
          *(_DWORD *)(((v6 + 3904) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3840));
          *(_DWORD *)(((v6 + 3840) >> 3) + 0x7FFF8000) = -117901064;
          v5 = -1;
          v192 = 0;
        }
        else
        {
          v95 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 800));
          std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
            (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
            &v95->condition);
          v192 = 1;
        }
      }
      std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurCardObject> *const)(v6 + 800));
      *(_WORD *)(((v6 + 800) >> 3) + 0x7FFF8000) = -1800;
      if ( v192 != 1 )
        goto LABEL_411;
    }
    else
    {
      *(_WORD *)(((v6 + 832) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v6 + 832) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 832));
      SourceCharacter = std::operator!=<data::ConfigGCGConditionGlobalFetchSourceCharacterObject>(
                          (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchSourceCharacterObject> *)(v6 + 832),
                          0LL);
      std::shared_ptr<data::ConfigGCGConditionGlobalFetchSourceCharacterObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchSourceCharacterObject> *const)(v6 + 832));
      *(_WORD *)(((v6 + 832) >> 3) + 0x7FFF8000) = -1800;
      if ( SourceCharacter )
      {
        *(_WORD *)(((v6 + 864) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v6 + 864) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 864));
        if ( std::operator==<data::ConfigGCGConditionGlobalFetchSourceCharacterObject>(
               (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchSourceCharacterObject> *)(v6 + 864),
               0LL) )
        {
          *(_DWORD *)(((v6 + 3968) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 3968) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 3999) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 3999) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 3968, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v6 + 3968),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
            "validateSkillSpecificConditionConfig",
            1769);
          v96 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v6 + 3968),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v97 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v96, (const char (*)[20])byte_1A512A40);
          *(_DWORD *)(((v6 + 4032) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v6 + 4032) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v6 + 4063) >> 3) + 0x7FFF8000) != 0
            && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 4063) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v6 + 4032, 32LL);
          }
          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4032), this);
          v98 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v97,
                  (const std::string *)(v6 + 4032));
          common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(v98, (const char (*)[72])byte_1A514300);
          std::string::~string((void *)(v6 + 4032));
          *(_DWORD *)(((v6 + 4032) >> 3) + 0x7FFF8000) = -117901064;
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 3968));
          *(_DWORD *)(((v6 + 3968) >> 3) + 0x7FFF8000) = -117901064;
          v5 = -1;
          v194 = 0;
        }
        else
        {
          v99 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 864));
          if ( std::operator==<data::ConfigGCGLogicCondition>(&v99->condition, 0LL) )
          {
            *(_DWORD *)(((v6 + 4096) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v6 + 4096) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v6 + 4127) >> 3) + 0x7FFF8000) != 0
              && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 4127) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v6 + 4096, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v6 + 4096),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "validateSkillSpecificConditionConfig",
              1774);
            v100 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v6 + 4096),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v101 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                     v100,
                     (const char (*)[20])byte_1A512A40);
            *(_DWORD *)(((v6 + 4160) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v6 + 4160) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v6 + 4191) >> 3) + 0x7FFF8000) != 0
              && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 4191) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v6 + 4160, 32LL);
            }
            GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4160), this);
            v102 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                     v101,
                     (const std::string *)(v6 + 4160));
            common::milog::MiLogStream::operator<<<char [75],(char *[75])0>(v102, (const char (*)[75])byte_1A514380);
            std::string::~string((void *)(v6 + 4160));
            *(_DWORD *)(((v6 + 4160) >> 3) + 0x7FFF8000) = -117901064;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4096));
            *(_DWORD *)(((v6 + 4096) >> 3) + 0x7FFF8000) = -117901064;
            v5 = -1;
            v194 = 0;
          }
          else
          {
            v103 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSourceCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 864));
            std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
              (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
              &v103->condition);
            v194 = 1;
          }
        }
        std::shared_ptr<data::ConfigGCGConditionGlobalFetchSourceCharacterObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchSourceCharacterObject> *const)(v6 + 864));
        *(_WORD *)(((v6 + 864) >> 3) + 0x7FFF8000) = -1800;
        if ( v194 != 1 )
          goto LABEL_411;
      }
      else
      {
        *(_WORD *)(((v6 + 896) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v6 + 896) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 896));
        TargetCharacter = std::operator!=<data::ConfigGCGConditionGlobalFetchTargetCharacterObject>(
                            (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchTargetCharacterObject> *)(v6 + 896),
                            0LL);
        std::shared_ptr<data::ConfigGCGConditionGlobalFetchTargetCharacterObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchTargetCharacterObject> *const)(v6 + 896));
        *(_WORD *)(((v6 + 896) >> 3) + 0x7FFF8000) = -1800;
        if ( TargetCharacter )
        {
          *(_WORD *)(((v6 + 928) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v6 + 928) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 928));
          if ( std::operator==<data::ConfigGCGConditionGlobalFetchTargetCharacterObject>(
                 (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchTargetCharacterObject> *)(v6 + 928),
                 0LL) )
          {
            *(_DWORD *)(((v6 + 4224) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v6 + 4224) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v6 + 4255) >> 3) + 0x7FFF8000) != 0
              && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 4255) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v6 + 4224, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v6 + 4224),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/json_data_manual/gcg_effect_condition_validator.cpp",
              "validateSkillSpecificConditionConfig",
              1784);
            v104 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                     (common::milog::MiLogStream *const)(v6 + 4224),
                     (const char (*)[16])"[CONFIG_ERROR] ");
            v105 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                     v104,
                     (const char (*)[20])byte_1A512A40);
            *(_DWORD *)(((v6 + 4288) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v6 + 4288) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v6 + 4319) >> 3) + 0x7FFF8000) != 0
              && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 4319) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v6 + 4288, 32LL);
            }
            GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4288), this);
            v106 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                     v105,
                     (const std::string *)(v6 + 4288));
            common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(v106, (const char (*)[72])byte_1A514400);
            std::string::~string((void *)(v6 + 4288));
            *(_DWORD *)(((v6 + 4288) >> 3) + 0x7FFF8000) = -117901064;
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4224));
            *(_DWORD *)(((v6 + 4224) >> 3) + 0x7FFF8000) = -117901064;
            v5 = -1;
            v196 = 0;
          }
          else
          {
            v107 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 928));
            if ( std::operator==<data::ConfigGCGLogicCondition>(&v107->condition, 0LL) )
            {
              *(_DWORD *)(((v6 + 4352) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 4352) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 4383) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 4383) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 4352, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v6 + 4352),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "validateSkillSpecificConditionConfig",
                1789);
              v108 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v6 + 4352),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v109 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                       v108,
                       (const char (*)[20])byte_1A512A40);
              *(_DWORD *)(((v6 + 4416) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 4416) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 4447) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 4447) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 4416, 32LL);
              }
              GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4416), this);
              v110 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                       v109,
                       (const std::string *)(v6 + 4416));
              common::milog::MiLogStream::operator<<<char [75],(char *[75])0>(v110, (const char (*)[75])byte_1A514480);
              std::string::~string((void *)(v6 + 4416));
              *(_DWORD *)(((v6 + 4416) >> 3) + 0x7FFF8000) = -117901064;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4352));
              *(_DWORD *)(((v6 + 4352) >> 3) + 0x7FFF8000) = -117901064;
              v5 = -1;
              v196 = 0;
            }
            else
            {
              v111 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchTargetCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 928));
              std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                &v111->condition);
              v196 = 1;
            }
          }
          std::shared_ptr<data::ConfigGCGConditionGlobalFetchTargetCharacterObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchTargetCharacterObject> *const)(v6 + 928));
          *(_WORD *)(((v6 + 928) >> 3) + 0x7FFF8000) = -1800;
          if ( v196 != 1 )
            goto LABEL_411;
        }
        else
        {
          *(_WORD *)(((v6 + 960) >> 3) + 0x7FFF8000) = 0;
          if ( *(_WORD *)(((v6 + 960) >> 3) + 0x7FFF8000) )
            __asan_report_store16();
          std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchThisCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 960));
          ThisCard = std::operator!=<data::ConfigGCGConditionGlobalFetchThisCardObject>(
                       (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchThisCardObject> *)(v6 + 960),
                       0LL);
          std::shared_ptr<data::ConfigGCGConditionGlobalFetchThisCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchThisCardObject> *const)(v6 + 960));
          *(_WORD *)(((v6 + 960) >> 3) + 0x7FFF8000) = -1800;
          if ( ThisCard )
          {
            *(_WORD *)(((v6 + 992) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v6 + 992) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchThisCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 992));
            if ( std::operator==<data::ConfigGCGConditionGlobalFetchThisCardObject>(
                   (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchThisCardObject> *)(v6 + 992),
                   0LL) )
            {
              *(_DWORD *)(((v6 + 4480) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 4480) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 4511) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 4511) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 4480, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v6 + 4480),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                "validateSkillSpecificConditionConfig",
                1799);
              v112 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                       (common::milog::MiLogStream *const)(v6 + 4480),
                       (const char (*)[16])"[CONFIG_ERROR] ");
              v113 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                       v112,
                       (const char (*)[20])byte_1A512A40);
              *(_DWORD *)(((v6 + 4544) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v6 + 4544) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v6 + 4575) >> 3) + 0x7FFF8000) != 0
                && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 4575) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v6 + 4544, 32LL);
              }
              GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4544), this);
              v114 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                       v113,
                       (const std::string *)(v6 + 4544));
              common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(v114, (const char (*)[65])byte_1A514500);
              std::string::~string((void *)(v6 + 4544));
              *(_DWORD *)(((v6 + 4544) >> 3) + 0x7FFF8000) = -117901064;
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4480));
              *(_DWORD *)(((v6 + 4480) >> 3) + 0x7FFF8000) = -117901064;
              v5 = -1;
              v198 = 0;
            }
            else
            {
              v115 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchThisCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchThisCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 992));
              if ( std::operator==<data::ConfigGCGLogicCondition>(&v115->condition, 0LL) )
              {
                *(_DWORD *)(((v6 + 4608) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v6 + 4608) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v6 + 4639) >> 3) + 0x7FFF8000) != 0
                  && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 4639) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v6 + 4608, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v6 + 4608),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "validateSkillSpecificConditionConfig",
                  1804);
                v116 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v6 + 4608),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v117 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                         v116,
                         (const char (*)[20])byte_1A512A40);
                *(_DWORD *)(((v6 + 4672) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v6 + 4672) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v6 + 4703) >> 3) + 0x7FFF8000) != 0
                  && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 4703) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v6 + 4672, 32LL);
                }
                GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4672), this);
                v118 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                         v117,
                         (const std::string *)(v6 + 4672));
                common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(v118, (const char (*)[68])byte_1A514580);
                std::string::~string((void *)(v6 + 4672));
                *(_DWORD *)(((v6 + 4672) >> 3) + 0x7FFF8000) = -117901064;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4608));
                *(_DWORD *)(((v6 + 4608) >> 3) + 0x7FFF8000) = -117901064;
                v5 = -1;
                v198 = 0;
              }
              else
              {
                v119 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchThisCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchThisCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 992));
                std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                  (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                  &v119->condition);
                v198 = 1;
              }
            }
            std::shared_ptr<data::ConfigGCGConditionGlobalFetchThisCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchThisCardObject> *const)(v6 + 992));
            *(_WORD *)(((v6 + 992) >> 3) + 0x7FFF8000) = -1800;
            if ( v198 != 1 )
              goto LABEL_411;
          }
          else
          {
            *(_WORD *)(((v6 + 1024) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v6 + 1024) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            std::dynamic_pointer_cast<data::ConfigGCGConditionCurCardAttachToCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1024));
            v199 = std::operator!=<data::ConfigGCGConditionCurCardAttachToCardObject>(
                     (const std::shared_ptr<data::ConfigGCGConditionCurCardAttachToCardObject> *)(v6 + 1024),
                     0LL);
            std::shared_ptr<data::ConfigGCGConditionCurCardAttachToCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionCurCardAttachToCardObject> *const)(v6 + 1024));
            *(_WORD *)(((v6 + 1024) >> 3) + 0x7FFF8000) = -1800;
            if ( v199 )
            {
              *(_WORD *)(((v6 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v6 + 1056) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::ConfigGCGConditionCurCardAttachToCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1056));
              if ( std::operator==<data::ConfigGCGConditionCurCardAttachToCardObject>(
                     (const std::shared_ptr<data::ConfigGCGConditionCurCardAttachToCardObject> *)(v6 + 1056),
                     0LL) )
              {
                *(_DWORD *)(((v6 + 4736) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v6 + 4736) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v6 + 4767) >> 3) + 0x7FFF8000) != 0
                  && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 4767) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v6 + 4736, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v6 + 4736),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                  "validateSkillSpecificConditionConfig",
                  1814);
                v120 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                         (common::milog::MiLogStream *const)(v6 + 4736),
                         (const char (*)[16])"[CONFIG_ERROR] ");
                v121 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                         v120,
                         (const char (*)[20])byte_1A512A40);
                *(_DWORD *)(((v6 + 4800) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v6 + 4800) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v6 + 4831) >> 3) + 0x7FFF8000) != 0
                  && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 4831) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v6 + 4800, 32LL);
                }
                GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4800), this);
                v122 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                         v121,
                         (const std::string *)(v6 + 4800));
                common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(v122, (const char (*)[65])byte_1A514600);
                std::string::~string((void *)(v6 + 4800));
                *(_DWORD *)(((v6 + 4800) >> 3) + 0x7FFF8000) = -117901064;
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4736));
                *(_DWORD *)(((v6 + 4736) >> 3) + 0x7FFF8000) = -117901064;
                v5 = -1;
                v200 = 0;
              }
              else
              {
                v123 = std::__shared_ptr_access<data::ConfigGCGConditionCurCardAttachToCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionCurCardAttachToCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1056));
                if ( std::operator==<data::ConfigGCGLogicCondition>(&v123->condition, 0LL) )
                {
                  *(_DWORD *)(((v6 + 4864) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v6 + 4864) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v6 + 4895) >> 3) + 0x7FFF8000) != 0
                    && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 4895) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v6 + 4864, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v6 + 4864),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                    "validateSkillSpecificConditionConfig",
                    1819);
                  v124 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v6 + 4864),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v125 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                           v124,
                           (const char (*)[20])byte_1A512A40);
                  *(_DWORD *)(((v6 + 4928) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v6 + 4928) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v6 + 4959) >> 3) + 0x7FFF8000) != 0
                    && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 4959) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v6 + 4928, 32LL);
                  }
                  GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 4928), this);
                  v126 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                           v125,
                           (const std::string *)(v6 + 4928));
                  common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
                    v126,
                    (const char (*)[68])byte_1A514680);
                  std::string::~string((void *)(v6 + 4928));
                  *(_DWORD *)(((v6 + 4928) >> 3) + 0x7FFF8000) = -117901064;
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4864));
                  *(_DWORD *)(((v6 + 4864) >> 3) + 0x7FFF8000) = -117901064;
                  v5 = -1;
                  v200 = 0;
                }
                else
                {
                  v127 = std::__shared_ptr_access<data::ConfigGCGConditionCurCardAttachToCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionCurCardAttachToCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1056));
                  std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                    (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                    &v127->condition);
                  v200 = 1;
                }
              }
              std::shared_ptr<data::ConfigGCGConditionCurCardAttachToCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionCurCardAttachToCardObject> *const)(v6 + 1056));
              *(_WORD *)(((v6 + 1056) >> 3) + 0x7FFF8000) = -1800;
              if ( v200 != 1 )
                goto LABEL_411;
            }
            else
            {
              *(_WORD *)(((v6 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v6 + 1088) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1088));
              SpecifiedCampOnstageCharacter = std::operator!=<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject>(
                                                (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject> *)(v6 + 1088),
                                                0LL);
              std::shared_ptr<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject> *const)(v6 + 1088));
              *(_WORD *)(((v6 + 1088) >> 3) + 0x7FFF8000) = -1800;
              if ( SpecifiedCampOnstageCharacter )
              {
                *(_WORD *)(((v6 + 1120) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v6 + 1120) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1120));
                if ( std::operator==<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject>(
                       (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject> *)(v6 + 1120),
                       0LL) )
                {
                  *(_DWORD *)(((v6 + 4992) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v6 + 4992) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v6 + 5023) >> 3) + 0x7FFF8000) != 0
                    && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 5023) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v6 + 4992, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v6 + 4992),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                    "validateSkillSpecificConditionConfig",
                    1829);
                  v128 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                           (common::milog::MiLogStream *const)(v6 + 4992),
                           (const char (*)[16])"[CONFIG_ERROR] ");
                  v129 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                           v128,
                           (const char (*)[20])byte_1A512A40);
                  *(_DWORD *)(((v6 + 5056) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v6 + 5056) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v6 + 5087) >> 3) + 0x7FFF8000) != 0
                    && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 5087) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v6 + 5056, 32LL);
                  }
                  GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5056), this);
                  v130 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                           v129,
                           (const std::string *)(v6 + 5056));
                  common::milog::MiLogStream::operator<<<char [86],(char *[86])0>(
                    v130,
                    (const char (*)[86])byte_1A514700);
                  std::string::~string((void *)(v6 + 5056));
                  *(_DWORD *)(((v6 + 5056) >> 3) + 0x7FFF8000) = -117901064;
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 4992));
                  *(_DWORD *)(((v6 + 4992) >> 3) + 0x7FFF8000) = -117901064;
                  v5 = -1;
                  v202 = 0;
                }
                else
                {
                  v131 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1120));
                  if ( std::operator==<data::ConfigGCGLogicCondition>(&v131->condition, 0LL) )
                  {
                    *(_DWORD *)(((v6 + 5120) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v6 + 5120) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v6 + 5151) >> 3) + 0x7FFF8000) != 0
                      && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 5151) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v6 + 5120, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v6 + 5120),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                      "validateSkillSpecificConditionConfig",
                      1834);
                    v132 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v6 + 5120),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v133 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                             v132,
                             (const char (*)[20])byte_1A512A40);
                    *(_DWORD *)(((v6 + 5184) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v6 + 5184) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v6 + 5215) >> 3) + 0x7FFF8000) != 0
                      && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 5215) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v6 + 5184, 32LL);
                    }
                    GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5184), this);
                    v134 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                             v133,
                             (const std::string *)(v6 + 5184));
                    common::milog::MiLogStream::operator<<<char [89],(char *[89])0>(
                      v134,
                      (const char (*)[89])byte_1A514780);
                    std::string::~string((void *)(v6 + 5184));
                    *(_DWORD *)(((v6 + 5184) >> 3) + 0x7FFF8000) = -117901064;
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 5120));
                    *(_DWORD *)(((v6 + 5120) >> 3) + 0x7FFF8000) = -117901064;
                    v5 = -1;
                    v202 = 0;
                  }
                  else
                  {
                    v135 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1120));
                    std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                      (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                      &v135->condition);
                    v202 = 1;
                  }
                }
                std::shared_ptr<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchSpecifiedCampOnstageCharacterObject> *const)(v6 + 1120));
                *(_WORD *)(((v6 + 1120) >> 3) + 0x7FFF8000) = -1800;
                if ( v202 != 1 )
                  goto LABEL_411;
              }
              else
              {
                *(_WORD *)(((v6 + 1152) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v6 + 1152) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurDieCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1152));
                CurDieCard = std::operator!=<data::ConfigGCGConditionGlobalFetchCurDieCardObject>(
                               (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardObject> *)(v6 + 1152),
                               0LL);
                std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardObject> *const)(v6 + 1152));
                *(_WORD *)(((v6 + 1152) >> 3) + 0x7FFF8000) = -1800;
                if ( CurDieCard )
                {
                  *(_WORD *)(((v6 + 1184) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v6 + 1184) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurDieCardObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1184));
                  if ( std::operator==<data::ConfigGCGConditionGlobalFetchCurDieCardObject>(
                         (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardObject> *)(v6 + 1184),
                         0LL) )
                  {
                    *(_DWORD *)(((v6 + 5248) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v6 + 5248) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v6 + 5279) >> 3) + 0x7FFF8000) != 0
                      && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 5279) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v6 + 5248, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v6 + 5248),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                      "validateSkillSpecificConditionConfig",
                      1844);
                    v136 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                             (common::milog::MiLogStream *const)(v6 + 5248),
                             (const char (*)[16])"[CONFIG_ERROR] ");
                    v137 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                             v136,
                             (const char (*)[20])byte_1A512A40);
                    *(_DWORD *)(((v6 + 5312) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v6 + 5312) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v6 + 5343) >> 3) + 0x7FFF8000) != 0
                      && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 5343) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v6 + 5312, 32LL);
                    }
                    GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5312), this);
                    v138 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                             v137,
                             (const std::string *)(v6 + 5312));
                    common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                      v138,
                      (const char (*)[67])byte_1A514800);
                    std::string::~string((void *)(v6 + 5312));
                    *(_DWORD *)(((v6 + 5312) >> 3) + 0x7FFF8000) = -117901064;
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 5248));
                    *(_DWORD *)(((v6 + 5248) >> 3) + 0x7FFF8000) = -117901064;
                    v5 = -1;
                    v204 = 0;
                  }
                  else
                  {
                    v139 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1184));
                    if ( std::operator==<data::ConfigGCGLogicCondition>(&v139->condition, 0LL) )
                    {
                      *(_DWORD *)(((v6 + 5376) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v6 + 5376) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v6 + 5407) >> 3) + 0x7FFF8000) != 0
                        && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 5407) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v6 + 5376, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v6 + 5376),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                        "validateSkillSpecificConditionConfig",
                        1849);
                      v140 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                               (common::milog::MiLogStream *const)(v6 + 5376),
                               (const char (*)[16])"[CONFIG_ERROR] ");
                      v141 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                               v140,
                               (const char (*)[20])byte_1A512A40);
                      *(_DWORD *)(((v6 + 5440) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v6 + 5440) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v6 + 5471) >> 3) + 0x7FFF8000) != 0
                        && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 5471) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v6 + 5440, 32LL);
                      }
                      GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5440), this);
                      v142 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                               v141,
                               (const std::string *)(v6 + 5440));
                      common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
                        v142,
                        (const char (*)[70])byte_1A514880);
                      std::string::~string((void *)(v6 + 5440));
                      *(_DWORD *)(((v6 + 5440) >> 3) + 0x7FFF8000) = -117901064;
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 5376));
                      *(_DWORD *)(((v6 + 5376) >> 3) + 0x7FFF8000) = -117901064;
                      v5 = -1;
                      v204 = 0;
                    }
                    else
                    {
                      v143 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1184));
                      std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                        (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                        &v143->condition);
                      v204 = 1;
                    }
                  }
                  std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardObject> *const)(v6 + 1184));
                  *(_WORD *)(((v6 + 1184) >> 3) + 0x7FFF8000) = -1800;
                  if ( v204 != 1 )
                    goto LABEL_411;
                }
                else
                {
                  *(_WORD *)(((v6 + 1216) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v6 + 1216) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1216));
                  CurDieCardOwner = std::operator!=<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject>(
                                      (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject> *)(v6 + 1216),
                                      0LL);
                  std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject> *const)(v6 + 1216));
                  *(_WORD *)(((v6 + 1216) >> 3) + 0x7FFF8000) = -1800;
                  if ( CurDieCardOwner )
                  {
                    *(_WORD *)(((v6 + 1248) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_WORD *)(((v6 + 1248) >> 3) + 0x7FFF8000) )
                      __asan_report_store16();
                    std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1248));
                    if ( std::operator==<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject>(
                           (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject> *)(v6 + 1248),
                           0LL) )
                    {
                      *(_DWORD *)(((v6 + 5504) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v6 + 5504) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v6 + 5535) >> 3) + 0x7FFF8000) != 0
                        && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 5535) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v6 + 5504, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v6 + 5504),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                        "validateSkillSpecificConditionConfig",
                        1859);
                      v144 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                               (common::milog::MiLogStream *const)(v6 + 5504),
                               (const char (*)[16])"[CONFIG_ERROR] ");
                      v145 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                               v144,
                               (const char (*)[20])byte_1A512A40);
                      *(_DWORD *)(((v6 + 5568) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v6 + 5568) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v6 + 5599) >> 3) + 0x7FFF8000) != 0
                        && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 5599) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v6 + 5568, 32LL);
                      }
                      GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5568), this);
                      v146 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                               v145,
                               (const std::string *)(v6 + 5568));
                      common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
                        v146,
                        (const char (*)[72])byte_1A514900);
                      std::string::~string((void *)(v6 + 5568));
                      *(_DWORD *)(((v6 + 5568) >> 3) + 0x7FFF8000) = -117901064;
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 5504));
                      *(_DWORD *)(((v6 + 5504) >> 3) + 0x7FFF8000) = -117901064;
                      v5 = -1;
                      v206 = 0;
                    }
                    else
                    {
                      v147 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1248));
                      if ( std::operator==<data::ConfigGCGLogicCondition>(&v147->condition, 0LL) )
                      {
                        *(_DWORD *)(((v6 + 5632) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 5632) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 5663) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 5663) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 5632, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v6 + 5632),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                          "validateSkillSpecificConditionConfig",
                          1864);
                        v148 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                 (common::milog::MiLogStream *const)(v6 + 5632),
                                 (const char (*)[16])"[CONFIG_ERROR] ");
                        v149 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                                 v148,
                                 (const char (*)[20])byte_1A512A40);
                        *(_DWORD *)(((v6 + 5696) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 5696) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 5727) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 5727) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 5696, 32LL);
                        }
                        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5696), this);
                        v150 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                 v149,
                                 (const std::string *)(v6 + 5696));
                        common::milog::MiLogStream::operator<<<char [75],(char *[75])0>(
                          v150,
                          (const char (*)[75])byte_1A514980);
                        std::string::~string((void *)(v6 + 5696));
                        *(_DWORD *)(((v6 + 5696) >> 3) + 0x7FFF8000) = -117901064;
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 5632));
                        *(_DWORD *)(((v6 + 5632) >> 3) + 0x7FFF8000) = -117901064;
                        v5 = -1;
                        v206 = 0;
                      }
                      else
                      {
                        v151 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1248));
                        std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                          (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                          &v151->condition);
                        v206 = 1;
                      }
                    }
                    std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurDieCardOwnerObject> *const)(v6 + 1248));
                    *(_WORD *)(((v6 + 1248) >> 3) + 0x7FFF8000) = -1800;
                    if ( v206 != 1 )
                      goto LABEL_411;
                  }
                  else
                  {
                    *(_WORD *)(((v6 + 1280) >> 3) + 0x7FFF8000) = 0;
                    if ( *(_WORD *)(((v6 + 1280) >> 3) + 0x7FFF8000) )
                      __asan_report_store16();
                    std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalThisSkillObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1280));
                    v207 = std::operator!=<data::ConfigGCGConditionGlobalThisSkillObject>(
                             (const std::shared_ptr<data::ConfigGCGConditionGlobalThisSkillObject> *)(v6 + 1280),
                             0LL);
                    std::shared_ptr<data::ConfigGCGConditionGlobalThisSkillObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalThisSkillObject> *const)(v6 + 1280));
                    *(_WORD *)(((v6 + 1280) >> 3) + 0x7FFF8000) = -1800;
                    if ( v207 )
                    {
                      *(_WORD *)(((v6 + 1312) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v6 + 1312) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalThisSkillObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1312));
                      if ( std::operator==<data::ConfigGCGConditionGlobalThisSkillObject>(
                             (const std::shared_ptr<data::ConfigGCGConditionGlobalThisSkillObject> *)(v6 + 1312),
                             0LL) )
                      {
                        *(_DWORD *)(((v6 + 5760) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 5760) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 5791) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 5791) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 5760, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v6 + 5760),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                          "validateSkillSpecificConditionConfig",
                          1874);
                        v152 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                 (common::milog::MiLogStream *const)(v6 + 5760),
                                 (const char (*)[16])"[CONFIG_ERROR] ");
                        v153 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                                 v152,
                                 (const char (*)[20])byte_1A512A40);
                        *(_DWORD *)(((v6 + 5824) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 5824) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 5855) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 5855) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 5824, 32LL);
                        }
                        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5824), this);
                        v154 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                 v153,
                                 (const std::string *)(v6 + 5824));
                        common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
                          v154,
                          (const char (*)[61])byte_1A514A00);
                        std::string::~string((void *)(v6 + 5824));
                        *(_DWORD *)(((v6 + 5824) >> 3) + 0x7FFF8000) = -117901064;
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 5760));
                        *(_DWORD *)(((v6 + 5760) >> 3) + 0x7FFF8000) = -117901064;
                        v5 = -1;
                        v208 = 0;
                      }
                      else
                      {
                        v155 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalThisSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalThisSkillObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1312));
                        if ( std::operator==<data::ConfigGCGLogicCondition>(&v155->condition, 0LL) )
                        {
                          *(_DWORD *)(((v6 + 5888) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v6 + 5888) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v6 + 5919) >> 3) + 0x7FFF8000) != 0
                            && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 5919) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v6 + 5888, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v6 + 5888),
                            &common::milog::MiLogDefault::default_log_obj_,
                            4u,
                            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                            "validateSkillSpecificConditionConfig",
                            1879);
                          v156 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                   (common::milog::MiLogStream *const)(v6 + 5888),
                                   (const char (*)[16])"[CONFIG_ERROR] ");
                          v157 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                                   v156,
                                   (const char (*)[20])byte_1A512A40);
                          *(_DWORD *)(((v6 + 5952) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v6 + 5952) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v6 + 5983) >> 3) + 0x7FFF8000) != 0
                            && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 5983) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v6 + 5952, 32LL);
                          }
                          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 5952), this);
                          v158 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                   v157,
                                   (const std::string *)(v6 + 5952));
                          common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(
                            v158,
                            (const char (*)[64])byte_1A514A60);
                          std::string::~string((void *)(v6 + 5952));
                          *(_DWORD *)(((v6 + 5952) >> 3) + 0x7FFF8000) = -117901064;
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 5888));
                          *(_DWORD *)(((v6 + 5888) >> 3) + 0x7FFF8000) = -117901064;
                          v5 = -1;
                          v208 = 0;
                        }
                        else
                        {
                          v159 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalThisSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalThisSkillObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1312));
                          std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                            (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                            &v159->condition);
                          v208 = 1;
                        }
                      }
                      std::shared_ptr<data::ConfigGCGConditionGlobalThisSkillObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalThisSkillObject> *const)(v6 + 1312));
                      *(_WORD *)(((v6 + 1312) >> 3) + 0x7FFF8000) = -1800;
                      if ( v208 != 1 )
                        goto LABEL_411;
                    }
                    else
                    {
                      *(_WORD *)(((v6 + 1344) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v6 + 1344) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurSkillObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1344));
                      CurSkill = std::operator!=<data::ConfigGCGConditionGlobalFetchCurSkillObject>(
                                   (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurSkillObject> *)(v6 + 1344),
                                   0LL);
                      std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurSkillObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurSkillObject> *const)(v6 + 1344));
                      *(_WORD *)(((v6 + 1344) >> 3) + 0x7FFF8000) = -1800;
                      if ( !CurSkill )
                      {
                        *(_DWORD *)(((v6 + 6272) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 6272) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 6303) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 6303) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 6272, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v6 + 6272),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                          "validateSkillSpecificConditionConfig",
                          1903);
                        v168 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                 (common::milog::MiLogStream *const)(v6 + 6272),
                                 (const char (*)[16])"[CONFIG_ERROR] ");
                        v169 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                                 v168,
                                 (const char (*)[20])byte_1A512A40);
                        *(_DWORD *)(((v6 + 6336) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 6336) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 6367) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 6367) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 6336, 32LL);
                        }
                        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 6336), this);
                        v170 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                 v169,
                                 (const std::string *)(v6 + 6336));
                        v171 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                                 v170,
                                 (const char (*)[13])", Condition:");
                        v172 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                                 v171,
                                 (const char *const *)(v6 + 256));
                        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                          v172,
                          (const char (*)[20])byte_1A514C00);
                        std::string::~string((void *)(v6 + 6336));
                        *(_DWORD *)(((v6 + 6336) >> 3) + 0x7FFF8000) = -117901064;
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 6272));
                        *(_DWORD *)(((v6 + 6272) >> 3) + 0x7FFF8000) = -117901064;
                        v5 = -1;
                        goto LABEL_411;
                      }
                      *(_WORD *)(((v6 + 1376) >> 3) + 0x7FFF8000) = 0;
                      if ( *(_WORD *)(((v6 + 1376) >> 3) + 0x7FFF8000) )
                        __asan_report_store16();
                      std::dynamic_pointer_cast<data::ConfigGCGConditionGlobalFetchCurSkillObject,data::ConfigGCGCondition>((const std::shared_ptr<data::ConfigGCGCondition> *)(v6 + 1376));
                      if ( std::operator==<data::ConfigGCGConditionGlobalFetchCurSkillObject>(
                             (const std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurSkillObject> *)(v6 + 1376),
                             0LL) )
                      {
                        *(_DWORD *)(((v6 + 6016) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 6016) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 6047) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 6047) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 6016, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v6 + 6016),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                          "validateSkillSpecificConditionConfig",
                          1889);
                        v160 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                 (common::milog::MiLogStream *const)(v6 + 6016),
                                 (const char (*)[16])"[CONFIG_ERROR] ");
                        v161 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                                 v160,
                                 (const char (*)[20])byte_1A512A40);
                        *(_DWORD *)(((v6 + 6080) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v6 + 6080) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v6 + 6111) >> 3) + 0x7FFF8000) != 0
                          && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 6111) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v6 + 6080, 32LL);
                        }
                        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 6080), this);
                        v162 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                 v161,
                                 (const std::string *)(v6 + 6080));
                        common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                          v162,
                          (const char (*)[65])byte_1A514AC0);
                        std::string::~string((void *)(v6 + 6080));
                        *(_DWORD *)(((v6 + 6080) >> 3) + 0x7FFF8000) = -117901064;
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 6016));
                        *(_DWORD *)(((v6 + 6016) >> 3) + 0x7FFF8000) = -117901064;
                        v5 = -1;
                        v210 = 0;
                      }
                      else
                      {
                        v163 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurSkillObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1376));
                        if ( std::operator==<data::ConfigGCGLogicCondition>(&v163->condition, 0LL) )
                        {
                          *(_DWORD *)(((v6 + 6144) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v6 + 6144) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v6 + 6175) >> 3) + 0x7FFF8000) != 0
                            && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 6175) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v6 + 6144, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v6 + 6144),
                            &common::milog::MiLogDefault::default_log_obj_,
                            4u,
                            "./src/json_data_manual/gcg_effect_condition_validator.cpp",
                            "validateSkillSpecificConditionConfig",
                            1894);
                          v164 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                   (common::milog::MiLogStream *const)(v6 + 6144),
                                   (const char (*)[16])"[CONFIG_ERROR] ");
                          v165 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                                   v164,
                                   (const char (*)[20])byte_1A512A40);
                          *(_DWORD *)(((v6 + 6208) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v6 + 6208) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v6 + 6239) >> 3) + 0x7FFF8000) != 0
                            && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 6239) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v6 + 6208, 32LL);
                          }
                          GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 6208), this);
                          v166 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                                   v165,
                                   (const std::string *)(v6 + 6208));
                          common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
                            v166,
                            (const char (*)[68])byte_1A514B40);
                          std::string::~string((void *)(v6 + 6208));
                          *(_DWORD *)(((v6 + 6208) >> 3) + 0x7FFF8000) = -117901064;
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 6144));
                          *(_DWORD *)(((v6 + 6144) >> 3) + 0x7FFF8000) = -117901064;
                          v5 = -1;
                          v210 = 0;
                        }
                        else
                        {
                          v167 = std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurSkillObject,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGConditionGlobalFetchCurSkillObject,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 1376));
                          std::shared_ptr<data::ConfigGCGLogicCondition>::operator=(
                            (std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608),
                            &v167->condition);
                          v210 = 1;
                        }
                      }
                      std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurSkillObject>::~shared_ptr((std::shared_ptr<data::ConfigGCGConditionGlobalFetchCurSkillObject> *const)(v6 + 1376));
                      *(_WORD *)(((v6 + 1376) >> 3) + 0x7FFF8000) = -1800;
                      if ( v210 != 1 )
                      {
LABEL_411:
                        std::shared_ptr<data::ConfigGCGLogicCondition>::~shared_ptr((std::shared_ptr<data::ConfigGCGLogicCondition> *const)(v6 + 608));
LABEL_412:
                        std::set<ConditionNodeTagType>::~set((std::set<ConditionNodeTagType> *const)(v6 + 6608));
                        goto LABEL_413;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ( std::operator==<data::ConfigGCGLogicCondition>(
           (const std::shared_ptr<data::ConfigGCGLogicCondition> *)(v6 + 608),
           0LL)
      || (v173 = std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGLogicCondition,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 608)),
          std::vector<std::shared_ptr<data::ConfigGCGCondition>>::empty(&v173->conditions)) )
    {
      *(_DWORD *)(((v6 + 6400) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v6 + 6400) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v6 + 6431) >> 3) + 0x7FFF8000) != 0
        && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 6431) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v6 + 6400, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v6 + 6400),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/json_data_manual/gcg_effect_condition_validator.cpp",
        "validateSkillSpecificConditionConfig",
        1908);
      v175 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)(v6 + 6400),
               (const char (*)[16])"[CONFIG_ERROR] ");
      v176 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v175, (const char (*)[20])byte_1A512A40);
      *(_DWORD *)(((v6 + 6464) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v6 + 6464) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v6 + 6495) >> 3) + 0x7FFF8000) != 0
        && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 6495) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v6 + 6464, 32LL);
      }
      GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 6464), this);
      v177 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v176, (const std::string *)(v6 + 6464));
      v178 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v177, (const char (*)[13])", Condition:");
      v179 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v178, (const char *const *)(v6 + 256));
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v179, (const char (*)[23])byte_1A514C40);
      std::string::~string((void *)(v6 + 6464));
      *(_DWORD *)(((v6 + 6464) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 6400));
      *(_DWORD *)(((v6 + 6400) >> 3) + 0x7FFF8000) = -117901064;
      v5 = -1;
    }
    else
    {
      v5 = GCGEffectConditionValidator::validateSkillConditionConfig(
             this,
             (data::ConfigGCGLogicConditionPtr *)(v6 + 608),
             child_need_type,
             *(_DWORD *)(v6 + 240) + 1,
             leaf_type);
    }
    goto LABEL_411;
  }
  *(_DWORD *)(((v6 + 2112) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v6 + 96);
  if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v6 + 256);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v6 + 2112),
    *(const char **)(v6 + 256),
    (const std::allocator<char> *)(v6 + 96));
  v36 = std::map<std::string,std::set<ConditionNodeTagType>>::count(
          &this->condition_tag_info_map_,
          (const std::map<std::string,std::set<ConditionNodeTagType>>::key_type *)(v6 + 2112)) == 0;
  std::string::~string((void *)(v6 + 2112));
  *(_DWORD *)(((v6 + 2112) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v6 + 96);
  *(_BYTE *)(((v6 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v36 )
  {
    *(_DWORD *)(((v6 + 2176) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v6 + 2176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 2207) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 2207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v6 + 2176, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v6 + 2176),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "validateSkillSpecificConditionConfig",
      1644);
    v37 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            (common::milog::MiLogStream *const)(v6 + 2176),
            (const char (*)[20])byte_1A512A40);
    *(_DWORD *)(((v6 + 2240) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v6 + 2240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 2271) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 2271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v6 + 2240, 32LL);
    }
    GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 2240), this);
    v38 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v37, (const std::string *)(v6 + 2240));
    v39 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v38, (const char (*)[18])byte_1A512F00);
    v40 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v39, (const char *const *)(v6 + 256));
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v40, (const char (*)[26])byte_1A513D80);
    std::string::~string((void *)(v6 + 2240));
    *(_DWORD *)(((v6 + 2240) >> 3) + 0x7FFF8000) = -117901064;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 2176));
    v5 = 0;
  }
  else
  {
    v41 = ((v6 + 6528) >> 3) + 2147450880;
    *(_DWORD *)v41 = 0;
    *(_WORD *)(v41 + 4) = 0;
    *(_DWORD *)(((v6 + 2304) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v6 + 112) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v6 + 112);
    if ( *(_BYTE *)(((v6 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v6 + 256);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v6 + 2304),
      *(const char **)(v6 + 256),
      (const std::allocator<char> *)(v6 + 112));
    v42 = std::map<std::string,std::set<ConditionNodeTagType>>::operator[](
            &this->condition_tag_info_map_,
            (std::map<std::string,std::set<ConditionNodeTagType>>::key_type *)(v6 + 2304));
    std::set<ConditionNodeTagType>::set((std::set<ConditionNodeTagType> *const)(v6 + 6528), v42);
    std::string::~string((void *)(v6 + 2304));
    *(_DWORD *)(((v6 + 2304) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v6 + 112);
    *(_BYTE *)(((v6 + 112) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v6 + 448) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v6 + 448) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 448, v42);
    *(std::set<ConditionNodeTagType>::iterator *)(v6 + 448) = std::set<ConditionNodeTagType>::end((const std::set<ConditionNodeTagType> *const)(v6 + 6528));
    *(_BYTE *)(((v6 + 416) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = 4;
    if ( *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v6 + 160, v42);
    *(_DWORD *)(v6 + 160) = 3;
    if ( *(_BYTE *)(((v6 + 416) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v6 + 416, v42);
    *(std::set<ConditionNodeTagType>::const_iterator *)(v6 + 416) = std::set<ConditionNodeTagType>::find(
                                                                      (const std::set<ConditionNodeTagType> *const)(v6 + 6528),
                                                                      (const std::set<ConditionNodeTagType>::key_type *)(v6 + 160));
    v43 = (char *)(v6 + 448);
    v44 = std::operator!=(
            (const std::_Rb_tree_const_iterator<ConditionNodeTagType>::_Self *)(v6 + 416),
            (const std::_Rb_tree_const_iterator<ConditionNodeTagType>::_Self *)(v6 + 448));
    *(_BYTE *)(((v6 + 416) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v6 + 160) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v6 + 448) >> 3) + 0x7FFF8000) = -8;
    if ( v44 )
    {
      if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(leaf_type, ((unsigned __int8)leaf_type & 7u) + 3);
      }
      *leaf_type = ConditionNodeTagBool;
    }
    else
    {
      *(_BYTE *)(((v6 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v6 + 512) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 512, v43);
      *(std::set<ConditionNodeTagType>::iterator *)(v6 + 512) = std::set<ConditionNodeTagType>::end((const std::set<ConditionNodeTagType> *const)(v6 + 6528));
      *(_BYTE *)(((v6 + 480) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v6 + 176) >> 3) + 0x7FFF8000) = 4;
      if ( *(_BYTE *)(((v6 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v6 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v6 + 176, v43);
      *(_DWORD *)(v6 + 176) = 2;
      if ( *(_BYTE *)(((v6 + 480) >> 3) + 0x7FFF8000) )
        __asan_report_store8(v6 + 480, v43);
      *(std::set<ConditionNodeTagType>::const_iterator *)(v6 + 480) = std::set<ConditionNodeTagType>::find(
                                                                        (const std::set<ConditionNodeTagType> *const)(v6 + 6528),
                                                                        (const std::set<ConditionNodeTagType>::key_type *)(v6 + 176));
      v45 = std::operator!=(
              (const std::_Rb_tree_const_iterator<ConditionNodeTagType>::_Self *)(v6 + 480),
              (const std::_Rb_tree_const_iterator<ConditionNodeTagType>::_Self *)(v6 + 512));
      *(_BYTE *)(((v6 + 480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v6 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v6 + 512) >> 3) + 0x7FFF8000) = -8;
      if ( v45 )
      {
        if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(leaf_type, ((unsigned __int8)leaf_type & 7u) + 3);
        }
        *leaf_type = ConditionNodeTagNum;
      }
      else
      {
        *(_DWORD *)(((v6 + 2368) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 2368) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 2399) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 2399) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 2368, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v6 + 2368),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_manual/gcg_effect_condition_validator.cpp",
          "validateSkillSpecificConditionConfig",
          1659);
        v46 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                (common::milog::MiLogStream *const)(v6 + 2368),
                (const char (*)[20])byte_1A512A40);
        *(_DWORD *)(((v6 + 2432) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v6 + 2432) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v6 + 2463) >> 3) + 0x7FFF8000) != 0
          && (char)((v6 - 97) & 7) >= *(_BYTE *)(((v6 + 2463) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v6 + 2432, 32LL);
        }
        GCGEffectConditionValidator::getCurSkillName[abi:cxx11]((std::string *)(v6 + 2432), this);
        v47 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v46, (const std::string *)(v6 + 2432));
        v48 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v47, (const char (*)[18])byte_1A512F00);
        v49 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v48, (const char *const *)(v6 + 256));
        common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v49, (const char (*)[47])byte_1A513DC0);
        std::string::~string((void *)(v6 + 2432));
        *(_DWORD *)(((v6 + 2432) >> 3) + 0x7FFF8000) = -117901064;
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 2368));
        *(_DWORD *)(((v6 + 2368) >> 3) + 0x7FFF8000) = -117901064;
      }
    }
    *(_DWORD *)(((v6 + 2496) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v6 + 2496) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 2527) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 - 64 + 31) & 7) >= *(_BYTE *)(((v6 + 2527) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v6 + 2496, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v6 + 2496),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "validateSkillSpecificConditionConfig",
      1661);
    v50 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v6 + 2496),
            (const char (*)[16])"Leaf Condition ");
    v51 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v50, (const char *const *)(v6 + 256));
    v52 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v51, (const char (*)[8])" level:");
    v53 = common::milog::MiLogStream::operator<<<int,(int *)0>(v52, (const int *)(v6 + 240));
    v54 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v53, (const char (*)[12])" leaf_type:");
    *(_DWORD *)(((v6 + 2560) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)leaf_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)leaf_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(leaf_type);
    }
    v55 = *leaf_type;
    if ( *(char *)(((v6 + 2560) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 2591) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 + 31) & 7) >= *(_BYTE *)(((v6 + 2591) >> 3) + 0x7FFF8000) )
    {
      v55 = 32;
      __asan_report_store_n(v6 + 2560, 32LL);
    }
    getConditionNodeTagDesc((std::string *)(v6 + 2560), v55);
    v56 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v54, (const std::string *)(v6 + 2560));
    v57 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v56, (const char (*)[11])" need tag:");
    *(_DWORD *)(((v6 + 2624) >> 3) + 0x7FFF8000) = 0;
    v58 = *(_DWORD *)(v6 + 224);
    if ( *(char *)(((v6 + 2624) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v6 + 2655) >> 3) + 0x7FFF8000) != 0
      && (char)((v6 + 95) & 7) >= *(_BYTE *)(((v6 + 2655) >> 3) + 0x7FFF8000) )
    {
      v58 = 32;
      __asan_report_store_n(v6 + 2624, 32LL);
    }
    getConditionNodeTagDesc((std::string *)(v6 + 2624), v58);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v57, (const std::string *)(v6 + 2624));
    std::string::~string((void *)(v6 + 2624));
    *(_DWORD *)(((v6 + 2624) >> 3) + 0x7FFF8000) = -117901064;
    std::string::~string((void *)(v6 + 2560));
    *(_DWORD *)(((v6 + 2560) >> 3) + 0x7FFF8000) = -117901064;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v6 + 2496));
    *(_DWORD *)(((v6 + 2496) >> 3) + 0x7FFF8000) = -117901064;
    v5 = 0;
    std::set<ConditionNodeTagType>::~set((std::set<ConditionNodeTagType> *const)(v6 + 6528));
  }
LABEL_413:
  if ( v216 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8108) = 0LL;
    memset(
      (void *)((unsigned __int64)(v8 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v8 + 2147450880 - (((_DWORD)v8 + 2147450888) & 0xFFFFFFF8) + 272) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v6 >> 3) + 0x7FFF8114) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8328) = 0LL;
    memset(
      (void *)((unsigned __int64)(v8 + 536862791) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v8 + 2147451156 - (((_DWORD)v8 + 2147451164) & 0xFFFFFFF8) + 540) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v6 >> 3) + 0x7FFF8334) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8340) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    __asan_stack_free_7(v6, 6688LL, v216);
  }
  return v5;
};

// Line 1915: range 000000000F23AA88-000000000F23AFC4
int32_t __cdecl GCGEffectConditionValidator::validateSkillEffectConfig(
        GCGEffectConditionValidator *const this,
        const data::ConfigGCGSkill *config_skill,
        data::ConfigGCGEffectPtr *p_config_effect_ptr,
        bool is_reaction)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  const char *v10; // rsi
  std::map<std::string,std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)>> *p_effect_name_validator_map; // rdx
  bool v12; // al
  std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)> *p_second; // r14
  int32_t result; // eax
  char v18[336]; // [rsp+30h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 1 9 <unknown> 64 8 9 iter:1921 96 8 9 <unknown> 128 16 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown>";
  *(_QWORD *)(v4 + 16) = GCGEffectConditionValidator::validateSkillEffectConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862726] = -218959118;
  v6[536862728] = -202116109;
  if ( std::operator==<data::ConfigGCGEffect>(0LL, p_config_effect_ptr) )
  {
    if ( *(char *)(((v4 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v4 - 65) & 7) >= *(_BYTE *)(((v4 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v4 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/json_data_manual/gcg_effect_condition_validator.cpp",
      "validateSkillEffectConfig",
      1918);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      (common::milog::MiLogStream *const)(v4 + 160),
      (const char (*)[29])"config_effect_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 160));
    v7 = 0;
  }
  else
  {
    std::allocator<char>::allocator(v4 + 48);
    v8 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGCGEffect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGCGEffect,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_effect_ptr);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(v8);
    v9 = *(_QWORD *)v8 + 32LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(*(_QWORD *)v8 + 32LL);
    v10 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v9)(v8);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v4 + 224),
      v10,
      (const std::allocator<char> *)(v4 + 48));
    if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 64, v10);
    *(std::map<std::string,std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)>>::iterator *)(v4 + 64) = std::map<std::string,std::function<int ()(HK4EDesignConfig const&,data::ConfigGCGSkill const&,std::shared_ptr<data::ConfigGCGEffect>,bool)>>::find(&this->effect_name_validator_map_, (const std::map<std::string,std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)>>::key_type *)(v4 + 224));
    std::string::~string((void *)(v4 + 224));
    *(_DWORD *)(((v4 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v4 + 48);
    *(_BYTE *)(((v4 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = 0;
    p_effect_name_validator_map = &this->effect_name_validator_map_;
    if ( *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v4 + 96, v4 + 224);
    *(std::map<std::string,std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)>>::iterator *)(v4 + 96) = std::map<std::string,std::function<int ()(HK4EDesignConfig const&,data::ConfigGCGSkill const&,std::shared_ptr<data::ConfigGCGEffect>,bool)>>::end(p_effect_name_validator_map);
    v12 = std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<const std::string,std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)> > >::_Self *)(v4 + 64),
            (const std::_Rb_tree_iterator<std::pair<const std::string,std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)> > >::_Self *)(v4 + 96));
    *(_BYTE *)(((v4 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v12 )
    {
      p_second = &std::_Rb_tree_iterator<std::pair<std::string const,std::function<int ()(HK4EDesignConfig const&,data::ConfigGCGSkill const&,std::shared_ptr<data::ConfigGCGEffect>,bool)>>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,std::function<int(const HK4EDesignConfig&,const data::ConfigGCGSkill&,std::shared_ptr<data::ConfigGCGEffect>,bool)> > > *const)(v4 + 64))->second;
      *(_WORD *)(((v4 + 128) >> 3) + 0x7FFF8000) = 0;
      std::shared_ptr<data::ConfigGCGEffect>::shared_ptr(
        (std::shared_ptr<data::ConfigGCGEffect> *const)(v4 + 128),
        p_config_effect_ptr);
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8(this);
      v7 = std::function<int ()(HK4EDesignConfig const&,data::ConfigGCGSkill const&,std::shared_ptr<data::ConfigGCGEffect>,bool)>::operator()(
             p_second,
             this->config_,
             config_skill,
             (std::shared_ptr<data::ConfigGCGEffect> *)(v4 + 128),
             is_reaction);
      std::shared_ptr<data::ConfigGCGEffect>::~shared_ptr((std::shared_ptr<data::ConfigGCGEffect> *const)(v4 + 128));
    }
    else
    {
      v7 = 0;
    }
  }
  result = v7;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1934: range 000000000F23AFC6-000000000F23AFF6
bool __cdecl GCGEffectConditionValidator::isReactionSkill(
        GCGEffectConditionValidator *const this,
        const data::ConfigGCGSkill *config_skill)
{
  return std::string::find(config_skill, "Reaction", 0LL) != -1;
};
